
fw_24-1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000286a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  0000286a  000028de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000dc  00800094  0000289e  00002912  2**0
                  ALLOC
  3 .stab         00005c7c  00000000  00000000  00002914  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002703  00000000  00000000  00008590  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__vector_19>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000054 <pgmIsb_Obj_1Bit_Obj_Array>:
      54:	00 01 02 03 04 05 06 07 08 09 0a 0d 0e 0f           ..............

00000062 <pgmIsb_Obj_4Bit_Obj_Array>:
      62:	0b 10                                               ..

00000064 <pgmIsb_Obj_8Bit_Obj_Array>:
      64:	0c 11                                               ..

00000066 <pgmIsb_Obj_1Bit_Ch_Array>:
      66:	00 00 00 00 01 01 01 01 02 02 02 03 03 03           ..............

00000074 <pgmIsb_Obj_4Bit_Ch_Array>:
      74:	02 03                                               ..

00000076 <pgmIsb_Obj_8Bit_Ch_Array>:
      76:	02 03                                               ..

00000078 <pgmIsb_App_DigOut_Ch_Array>:
      78:	00 01                                               ..

0000007a <pgmIsb_App_DigOut_Obj_1Bit_0_Array>:
      7a:	00 04                                               ..

0000007c <pgmIsb_App_DigOut_Obj_1Bit_1_Array>:
      7c:	01 05                                               ..

0000007e <pgmIsb_App_DigOut_Obj_1Bit_2_Array>:
      7e:	02 06                                               ..

00000080 <pgmIsb_App_DigOut_Obj_1Bit_3_Array>:
      80:	03 07                                               ..

00000082 <pgmIsb_App_DigOut_Pin0_Array>:
      82:	1e 1f                                               ..

00000084 <pgmIsb_App_DigIn_Ch_Array>:
      84:	02 03                                               ..

00000086 <pgmIsb_App_DigIn_Pin0_Array>:
      86:	50 51                                               PQ

00000088 <pgmIsb_App_DigIn_Obj_1Bit_1_Array>:
      88:	09 0c                                               ..

0000008a <pgmIsb_App_DigIn_Obj_1Bit_2_Array>:
      8a:	0a 0d                                               ..

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d4 e0       	ldi	r29, 0x04	; 4
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	10 e0       	ldi	r17, 0x00	; 0
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	ea e6       	ldi	r30, 0x6A	; 106
      a0:	f8 e2       	ldi	r31, 0x28	; 40
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <.do_copy_data_start>

000000a4 <.do_copy_data_loop>:
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
      a8:	a4 39       	cpi	r26, 0x94	; 148
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <.do_copy_data_loop>

000000ae <__do_clear_bss>:
      ae:	11 e0       	ldi	r17, 0x01	; 1
      b0:	a4 e9       	ldi	r26, 0x94	; 148
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a0 37       	cpi	r26, 0x70	; 112
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 02 13 	call	0x2604	; 0x2604 <main>
      c2:	0c 94 33 14 	jmp	0x2866	; 0x2866 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000ca <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
      ca:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
      cc:	e1 99       	sbic	0x1c, 1	; 28
      ce:	fe cf       	rjmp	.-4      	; 0xcc <eeprom_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
      d0:	3f bb       	out	0x1f, r19	; 31
      d2:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
      d4:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
      d6:	8d b3       	in	r24, 0x1d	; 29
}
      d8:	08 95       	ret

000000da <lib_eep_read_byte>:
#ifndef LIB_EEP_C_
	#define LIB_EEP_C_



	uint8_t __attribute__((always_inline)) lib_eep_read_byte(uint8_t * aAddr) {
      da:	9c 01       	movw	r18, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
      dc:	e1 99       	sbic	0x1c, 1	; 28
      de:	fe cf       	rjmp	.-4      	; 0xdc <lib_eep_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
      e0:	3f bb       	out	0x1f, r19	; 31
      e2:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
      e4:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
      e6:	8d b3       	in	r24, 0x1d	; 29
		return eeprom_read_byte(aAddr);;
	}
      e8:	08 95       	ret

000000ea <lib_eep_write_byte>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
      ea:	e1 99       	sbic	0x1c, 1	; 28
      ec:	fe cf       	rjmp	.-4      	; 0xea <lib_eep_write_byte>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
      ee:	9c 01       	movw	r18, r24
      f0:	9f bb       	out	0x1f, r25	; 31
      f2:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
      f4:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
      f6:	8d b3       	in	r24, 0x1d	; 29
	}



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
      f8:	86 17       	cp	r24, r22
      fa:	51 f0       	breq	.+20     	; 0x110 <lib_eep_write_byte+0x26>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
      fc:	e1 99       	sbic	0x1c, 1	; 28
      fe:	fe cf       	rjmp	.-4      	; 0xfc <lib_eep_write_byte+0x12>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     100:	3f bb       	out	0x1f, r19	; 31
     102:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
     104:	6d bb       	out	0x1d, r22	; 29

    __asm__ __volatile__ (
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	f8 94       	cli
     10a:	e2 9a       	sbi	0x1c, 2	; 28
     10c:	e1 9a       	sbi	0x1c, 1	; 28
     10e:	0f be       	out	0x3f, r0	; 63
     110:	08 95       	ret

00000112 <lib_eep_fw_read_byte>:
	}



	uint8_t __attribute__((always_inline)) lib_eep_fw_read_byte(uint8_t * aAddr) {
		return eeprom_read_byte(Isb_Firmware_Offset + aAddr);;
     112:	20 91 96 00 	lds	r18, 0x0096
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     116:	e1 99       	sbic	0x1c, 1	; 28
     118:	fe cf       	rjmp	.-4      	; 0x116 <lib_eep_fw_read_byte+0x4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     11a:	82 0f       	add	r24, r18
     11c:	91 1d       	adc	r25, r1
     11e:	9f bb       	out	0x1f, r25	; 31
     120:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     122:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     124:	8d b3       	in	r24, 0x1d	; 29
	}
     126:	08 95       	ret

00000128 <lib_eep_fw_write_byte>:
		return eeprom_read_word(Isb_Firmware_Offset + aAddr);;
	}



	void __attribute__((always_inline)) lib_eep_fw_write_byte(uint8_t * aAddr, uint8_t aData) {
     128:	ac 01       	movw	r20, r24
		if (eeprom_read_byte(Isb_Firmware_Offset + aAddr) != aData) {
     12a:	80 91 96 00 	lds	r24, 0x0096
     12e:	28 2f       	mov	r18, r24
     130:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     132:	e1 99       	sbic	0x1c, 1	; 28
     134:	fe cf       	rjmp	.-4      	; 0x132 <lib_eep_fw_write_byte+0xa>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     136:	ca 01       	movw	r24, r20
     138:	82 0f       	add	r24, r18
     13a:	93 1f       	adc	r25, r19
     13c:	9f bb       	out	0x1f, r25	; 31
     13e:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     140:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     142:	8d b3       	in	r24, 0x1d	; 29
     144:	86 17       	cp	r24, r22
     146:	61 f0       	breq	.+24     	; 0x160 <lib_eep_fw_write_byte+0x38>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     148:	e1 99       	sbic	0x1c, 1	; 28
     14a:	fe cf       	rjmp	.-4      	; 0x148 <lib_eep_fw_write_byte+0x20>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     14c:	24 0f       	add	r18, r20
     14e:	35 1f       	adc	r19, r21
     150:	3f bb       	out	0x1f, r19	; 31
     152:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
     154:	6d bb       	out	0x1d, r22	; 29

    __asm__ __volatile__ (
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	e2 9a       	sbi	0x1c, 2	; 28
     15c:	e1 9a       	sbi	0x1c, 1	; 28
     15e:	0f be       	out	0x3f, r0	; 63
     160:	08 95       	ret

00000162 <Lib_Pin_Get>:
	#endif



	uint8_t Lib_Pin_Get(const uint8_t aPort, const uint8_t aPin) {
		return (*(PINx[aPort]) >> aPin) & 1;
     162:	e8 2f       	mov	r30, r24
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	ee 0f       	add	r30, r30
     168:	ff 1f       	adc	r31, r31
     16a:	ec 57       	subi	r30, 0x7C	; 124
     16c:	ff 4f       	sbci	r31, 0xFF	; 255
     16e:	01 90       	ld	r0, Z+
     170:	f0 81       	ld	r31, Z
     172:	e0 2d       	mov	r30, r0
     174:	80 81       	ld	r24, Z
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	02 c0       	rjmp	.+4      	; 0x17e <Lib_Pin_Get+0x1c>
     17a:	95 95       	asr	r25
     17c:	87 95       	ror	r24
     17e:	6a 95       	dec	r22
     180:	e2 f7       	brpl	.-8      	; 0x17a <Lib_Pin_Get+0x18>
	}
     182:	81 70       	andi	r24, 0x01	; 1
     184:	08 95       	ret

00000186 <Lib_Pin_Set>:



	void __attribute__((noinline)) Lib_Pin_Set(const uint8_t aPort, const uint8_t aPin, const uint8_t aCmd) {
     186:	91 e0       	ldi	r25, 0x01	; 1
     188:	02 c0       	rjmp	.+4      	; 0x18e <Lib_Pin_Set+0x8>
		uint8_t mask;
		uint8_t tmp;
		volatile uint8_t *reg;
		uint8_t Pxx = aPin;
		for (mask = 1; Pxx--; mask <<= 1) ;
     18a:	99 0f       	add	r25, r25
     18c:	61 50       	subi	r22, 0x01	; 1
     18e:	66 23       	and	r22, r22
     190:	e1 f7       	brne	.-8      	; 0x18a <Lib_Pin_Set+0x4>
		reg = PORTx[aPort];
     192:	a8 2f       	mov	r26, r24
     194:	b0 e0       	ldi	r27, 0x00	; 0
     196:	fd 01       	movw	r30, r26
     198:	ee 0f       	add	r30, r30
     19a:	ff 1f       	adc	r31, r31
     19c:	ec 58       	subi	r30, 0x8C	; 140
     19e:	ff 4f       	sbci	r31, 0xFF	; 255
     1a0:	01 90       	ld	r0, Z+
     1a2:	f0 81       	ld	r31, Z
     1a4:	e0 2d       	mov	r30, r0
		tmp = *reg | mask;
     1a6:	80 81       	ld	r24, Z
     1a8:	89 2b       	or	r24, r25
		if (! (aCmd & 2)) {
     1aa:	41 ff       	sbrs	r20, 1
			tmp ^= mask;
     1ac:	89 27       	eor	r24, r25
		}
		*reg = tmp;
     1ae:	80 83       	st	Z, r24
		reg = DDRx[aPort];
     1b0:	aa 0f       	add	r26, r26
     1b2:	bb 1f       	adc	r27, r27
     1b4:	ac 59       	subi	r26, 0x9C	; 156
     1b6:	bf 4f       	sbci	r27, 0xFF	; 255
     1b8:	ed 91       	ld	r30, X+
     1ba:	fc 91       	ld	r31, X
		tmp = *reg | mask;
     1bc:	80 81       	ld	r24, Z
     1be:	89 2b       	or	r24, r25
		if (! (aCmd & 1)) {
     1c0:	40 ff       	sbrs	r20, 0
			tmp ^= mask;
     1c2:	89 27       	eor	r24, r25
		}
		*reg = tmp;
     1c4:	80 83       	st	Z, r24
	}
     1c6:	08 95       	ret

000001c8 <Inf_Spi_Init>:
#ifndef INF_SPI_C_
	#define INF_SPI_C_



	void Inf_Spi_Init(const uint8_t aCfg) {
     1c8:	df 93       	push	r29
     1ca:	cf 93       	push	r28
     1cc:	0f 92       	push	r0
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
     1d2:	89 83       	std	Y+1, r24	; 0x01
		// Bit 3	CPOL (Clock Polarity)
		// Bit 4	CPHA (Clock Phase)
		// Bit 5	SPR0
		// Bit 6	SPR1
		// Bit 7	SPI2X
		SPCR &= ~(1 << SPE);
     1d4:	6e 98       	cbi	0x0d, 6	; 13
		if (bit_is_set(aCfg, 0)) {
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
     1d8:	80 ff       	sbrs	r24, 0
     1da:	10 c0       	rjmp	.+32     	; 0x1fc <Inf_Spi_Init+0x34>
			if (bit_is_set(aCfg, 1)) {
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	81 ff       	sbrs	r24, 1
     1e0:	06 c0       	rjmp	.+12     	; 0x1ee <Inf_Spi_Init+0x26>
				INF_SPI_DDR |= (1 << INF_SPI_DD_MOSI) | (1 << INF_SPI_DD_SCK);
     1e2:	87 b3       	in	r24, 0x17	; 23
     1e4:	80 6a       	ori	r24, 0xA0	; 160
     1e6:	87 bb       	out	0x17, r24	; 23
				INF_SPI_DDR &= ~(1 << INF_SPI_DD_MISO);
     1e8:	be 98       	cbi	0x17, 6	; 23
				SPCR |= (1 << MSTR);
     1ea:	6c 9a       	sbi	0x0d, 4	; 13
     1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <Inf_Spi_Init+0x30>
			}
			else {
				INF_SPI_DDR |= (1 << INF_SPI_DD_MISO);
     1ee:	be 9a       	sbi	0x17, 6	; 23
				INF_SPI_DDR &= ~(1 << INF_SPI_DD_MOSI) & ~(1 << INF_SPI_DD_SCK);
     1f0:	87 b3       	in	r24, 0x17	; 23
     1f2:	8f 75       	andi	r24, 0x5F	; 95
     1f4:	87 bb       	out	0x17, r24	; 23
				SPCR &= ~(1 << MSTR);
     1f6:	6c 98       	cbi	0x0d, 4	; 13
			}
			SPCR |= (1 << SPE);
     1f8:	6e 9a       	sbi	0x0d, 6	; 13
     1fa:	03 c0       	rjmp	.+6      	; 0x202 <Inf_Spi_Init+0x3a>
		}
		else {
			INF_SPI_DDR &= ~(1 << INF_SPI_DD_MISO) & ~(1 << INF_SPI_DD_MOSI) & ~(1 << INF_SPI_DD_SCK);
     1fc:	87 b3       	in	r24, 0x17	; 23
     1fe:	8f 71       	andi	r24, 0x1F	; 31
     200:	87 bb       	out	0x17, r24	; 23
		}
	}
     202:	0f 90       	pop	r0
     204:	cf 91       	pop	r28
     206:	df 91       	pop	r29
     208:	08 95       	ret

0000020a <Inf_Spi_Rx>:



	uint8_t Inf_Spi_Rx(void) {
		SPDR = 0;
     20a:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     20c:	77 9b       	sbis	0x0e, 7	; 14
     20e:	fe cf       	rjmp	.-4      	; 0x20c <Inf_Spi_Rx+0x2>
		return SPDR;
     210:	8f b1       	in	r24, 0x0f	; 15
	}
     212:	08 95       	ret

00000214 <Inf_Spi_Tx>:
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     214:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     216:	77 9b       	sbis	0x0e, 7	; 14
     218:	fe cf       	rjmp	.-4      	; 0x216 <Inf_Spi_Tx+0x2>
	}
     21a:	08 95       	ret

0000021c <Inf_Spi_TxRx>:



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     21c:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     21e:	77 9b       	sbis	0x0e, 7	; 14
     220:	fe cf       	rjmp	.-4      	; 0x21e <Inf_Spi_TxRx+0x2>
		return SPDR;
     222:	8f b1       	in	r24, 0x0f	; 15
	}
     224:	08 95       	ret

00000226 <Lib_Mcp2515_Read>:
#ifndef LIB_MCP2515_C_
	#define LIB_MCP2515_C_



	uint8_t Lib_Mcp2515_Read(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr) {
     226:	ff 92       	push	r15
     228:	0f 93       	push	r16
     22a:	1f 93       	push	r17
     22c:	08 2f       	mov	r16, r24
     22e:	f6 2e       	mov	r15, r22
     230:	14 2f       	mov	r17, r20
		uint8_t aData;
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     232:	41 e0       	ldi	r20, 0x01	; 1
     234:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     238:	83 e0       	ldi	r24, 0x03	; 3
     23a:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     23c:	77 9b       	sbis	0x0e, 7	; 14
     23e:	fe cf       	rjmp	.-4      	; 0x23c <Lib_Mcp2515_Read+0x16>
		return SPDR;
     240:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     242:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     244:	77 9b       	sbis	0x0e, 7	; 14
     246:	fe cf       	rjmp	.-4      	; 0x244 <Lib_Mcp2515_Read+0x1e>
		return SPDR;
     248:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     24a:	8f ef       	ldi	r24, 0xFF	; 255
     24c:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     24e:	77 9b       	sbis	0x0e, 7	; 14
     250:	fe cf       	rjmp	.-4      	; 0x24e <Lib_Mcp2515_Read+0x28>
		return SPDR;
     252:	1f b1       	in	r17, 0x0f	; 15
		Inf_Spi_TxRx(LIB_MCP2515_READ);
		Inf_Spi_TxRx(aAddr);
		aData = Inf_Spi_TxRx(0xff);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     254:	80 2f       	mov	r24, r16
     256:	6f 2d       	mov	r22, r15
     258:	43 e0       	ldi	r20, 0x03	; 3
     25a:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
		return aData;
	}
     25e:	81 2f       	mov	r24, r17
     260:	1f 91       	pop	r17
     262:	0f 91       	pop	r16
     264:	ff 90       	pop	r15
     266:	08 95       	ret

00000268 <Lib_Mcp2515_Write>:



	void Lib_Mcp2515_Write(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr, const uint8_t aData) {
     268:	ef 92       	push	r14
     26a:	ff 92       	push	r15
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
     270:	08 2f       	mov	r16, r24
     272:	f6 2e       	mov	r15, r22
     274:	14 2f       	mov	r17, r20
     276:	e2 2e       	mov	r14, r18
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     278:	41 e0       	ldi	r20, 0x01	; 1
     27a:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     27e:	82 e0       	ldi	r24, 0x02	; 2
     280:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     282:	77 9b       	sbis	0x0e, 7	; 14
     284:	fe cf       	rjmp	.-4      	; 0x282 <Lib_Mcp2515_Write+0x1a>
		return SPDR;
     286:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     288:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     28a:	77 9b       	sbis	0x0e, 7	; 14
     28c:	fe cf       	rjmp	.-4      	; 0x28a <Lib_Mcp2515_Write+0x22>
		return SPDR;
     28e:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     290:	ef b8       	out	0x0f, r14	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     292:	77 9b       	sbis	0x0e, 7	; 14
     294:	fe cf       	rjmp	.-4      	; 0x292 <Lib_Mcp2515_Write+0x2a>
		return SPDR;
     296:	8f b1       	in	r24, 0x0f	; 15
		Inf_Spi_TxRx(LIB_MCP2515_WRITE);
		Inf_Spi_TxRx(aAddr);
		Inf_Spi_TxRx(aData);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     298:	80 2f       	mov	r24, r16
     29a:	6f 2d       	mov	r22, r15
     29c:	43 e0       	ldi	r20, 0x03	; 3
     29e:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
	}
     2a2:	1f 91       	pop	r17
     2a4:	0f 91       	pop	r16
     2a6:	ff 90       	pop	r15
     2a8:	ef 90       	pop	r14
     2aa:	08 95       	ret

000002ac <Lib_Mcp2515_Modify>:



	void Lib_Mcp2515_Modify(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr, const uint8_t aMask, const uint8_t aData) {
     2ac:	df 92       	push	r13
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	e8 2e       	mov	r14, r24
     2b8:	d6 2e       	mov	r13, r22
     2ba:	14 2f       	mov	r17, r20
     2bc:	f2 2e       	mov	r15, r18
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     2be:	41 e0       	ldi	r20, 0x01	; 1
     2c0:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     2c4:	85 e0       	ldi	r24, 0x05	; 5
     2c6:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2c8:	77 9b       	sbis	0x0e, 7	; 14
     2ca:	fe cf       	rjmp	.-4      	; 0x2c8 <Lib_Mcp2515_Modify+0x1c>
		return SPDR;
     2cc:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     2ce:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2d0:	77 9b       	sbis	0x0e, 7	; 14
     2d2:	fe cf       	rjmp	.-4      	; 0x2d0 <Lib_Mcp2515_Modify+0x24>
		return SPDR;
     2d4:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     2d6:	ff b8       	out	0x0f, r15	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2d8:	77 9b       	sbis	0x0e, 7	; 14
     2da:	fe cf       	rjmp	.-4      	; 0x2d8 <Lib_Mcp2515_Modify+0x2c>
		return SPDR;
     2dc:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     2de:	0f b9       	out	0x0f, r16	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2e0:	77 9b       	sbis	0x0e, 7	; 14
     2e2:	fe cf       	rjmp	.-4      	; 0x2e0 <Lib_Mcp2515_Modify+0x34>
		return SPDR;
     2e4:	8f b1       	in	r24, 0x0f	; 15
		Inf_Spi_TxRx(LIB_MCP2515_BIT_MODIFY);
		Inf_Spi_TxRx(aAddr);
		Inf_Spi_TxRx(aMask);
		Inf_Spi_TxRx(aData);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     2e6:	8e 2d       	mov	r24, r14
     2e8:	6d 2d       	mov	r22, r13
     2ea:	43 e0       	ldi	r20, 0x03	; 3
     2ec:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
	}
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	ff 90       	pop	r15
     2f6:	ef 90       	pop	r14
     2f8:	df 90       	pop	r13
     2fa:	08 95       	ret

000002fc <Inf_Can_Init>:
	#define INF_CAN_C_



	#if defined(INF_CAN0_TX) || defined(INF_CAN0_RX) || defined(INF_CAN1_TX) || defined(INF_CAN1_RX) || defined(INF_CAN2_TX) || defined(INF_CAN2_RX)
		uint8_t Inf_Can_Init(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aCnf1, const uint8_t aCnf2, const uint8_t aCnf3, const uint8_t aRSPort, const uint8_t aRSPin, const uint8_t aMode) {
     2fc:	8f 92       	push	r8
     2fe:	9f 92       	push	r9
     300:	af 92       	push	r10
     302:	bf 92       	push	r11
     304:	cf 92       	push	r12
     306:	df 92       	push	r13
     308:	ef 92       	push	r14
     30a:	ff 92       	push	r15
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	df 93       	push	r29
     312:	cf 93       	push	r28
     314:	cd b7       	in	r28, 0x3d	; 61
     316:	de b7       	in	r29, 0x3e	; 62
     318:	f8 2e       	mov	r15, r24
     31a:	d6 2e       	mov	r13, r22
     31c:	14 2f       	mov	r17, r20
     31e:	b2 2e       	mov	r11, r18
     320:	90 2e       	mov	r9, r16
     322:	0c 2d       	mov	r16, r12
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     324:	43 e0       	ldi	r20, 0x03	; 3
     326:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     32a:	81 2f       	mov	r24, r17
     32c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     330:	8f 2d       	mov	r24, r15
     332:	6d 2d       	mov	r22, r13
     334:	41 e0       	ldi	r20, 0x01	; 1
     336:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     33a:	80 ec       	ldi	r24, 0xC0	; 192
     33c:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     33e:	77 9b       	sbis	0x0e, 7	; 14
     340:	fe cf       	rjmp	.-4      	; 0x33e <Inf_Can_Init+0x42>
		return SPDR;
     342:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_TxRx(LIB_MCP2515_RESET);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     344:	8f 2d       	mov	r24, r15
     346:	6d 2d       	mov	r22, r13
     348:	43 e0       	ldi	r20, 0x03	; 3
     34a:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     34e:	80 e4       	ldi	r24, 0x40	; 64
     350:	9f e1       	ldi	r25, 0x1F	; 31
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <Inf_Can_Init+0x56>
			_delay_ms(2);
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF1, aCnf1);
     356:	8f 2d       	mov	r24, r15
     358:	6d 2d       	mov	r22, r13
     35a:	4a e2       	ldi	r20, 0x2A	; 42
     35c:	2b 2d       	mov	r18, r11
     35e:	0e 94 34 01 	call	0x268	; 0x268 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF2, aCnf2);
     362:	8f 2d       	mov	r24, r15
     364:	6d 2d       	mov	r22, r13
     366:	49 e2       	ldi	r20, 0x29	; 41
     368:	29 2d       	mov	r18, r9
     36a:	0e 94 34 01 	call	0x268	; 0x268 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF3, aCnf3);
     36e:	8f 2d       	mov	r24, r15
     370:	6d 2d       	mov	r22, r13
     372:	48 e2       	ldi	r20, 0x28	; 40
     374:	2e 2d       	mov	r18, r14
     376:	0e 94 34 01 	call	0x268	; 0x268 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_RXB0CTRL, 0x64);
     37a:	8f 2d       	mov	r24, r15
     37c:	6d 2d       	mov	r22, r13
     37e:	40 e6       	ldi	r20, 0x60	; 96
     380:	24 e6       	ldi	r18, 0x64	; 100
     382:	0e 94 34 01 	call	0x268	; 0x268 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_RXB1CTRL, 0x60);
     386:	8f 2d       	mov	r24, r15
     388:	6d 2d       	mov	r22, r13
     38a:	40 e7       	ldi	r20, 0x70	; 112
     38c:	20 e6       	ldi	r18, 0x60	; 96
     38e:	0e 94 34 01 	call	0x268	; 0x268 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CANINTE, 0x03);
     392:	8f 2d       	mov	r24, r15
     394:	6d 2d       	mov	r22, r13
     396:	4b e2       	ldi	r20, 0x2B	; 43
     398:	23 e0       	ldi	r18, 0x03	; 3
     39a:	0e 94 34 01 	call	0x268	; 0x268 <Lib_Mcp2515_Write>
			if (aRSPort != 0) {
     39e:	00 23       	and	r16, r16
     3a0:	79 f1       	breq	.+94     	; 0x400 <Inf_Can_Init+0x104>
				if (aRSPort < 8) {
     3a2:	08 30       	cpi	r16, 0x08	; 8
     3a4:	20 f4       	brcc	.+8      	; 0x3ae <Inf_Can_Init+0xb2>
					Lib_Pin_Set(aRSPort, aRSPin, LIB_PIN_OUTPUT_LOW);
     3a6:	80 2f       	mov	r24, r16
     3a8:	6a 2d       	mov	r22, r10
     3aa:	41 e0       	ldi	r20, 0x01	; 1
     3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <Inf_Can_Init+0xbc>
				}
				else if (aRSPort < 16) {
     3ae:	00 31       	cpi	r16, 0x10	; 16
     3b0:	30 f4       	brcc	.+12     	; 0x3be <Inf_Can_Init+0xc2>
					Lib_Pin_Set(aRSPort, aRSPin, LIB_PIN_OUTPUT_HIGH);
     3b2:	80 2f       	mov	r24, r16
     3b4:	6a 2d       	mov	r22, r10
     3b6:	43 e0       	ldi	r20, 0x03	; 3
     3b8:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
     3bc:	21 c0       	rjmp	.+66     	; 0x400 <Inf_Can_Init+0x104>
				}
				else if (aRSPort == 0xFC) {
     3be:	0c 3f       	cpi	r16, 0xFC	; 252
     3c0:	31 f4       	brne	.+12     	; 0x3ce <Inf_Can_Init+0xd2>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x14, 0x04);
     3c2:	8f 2d       	mov	r24, r15
     3c4:	6d 2d       	mov	r22, r13
     3c6:	4c e0       	ldi	r20, 0x0C	; 12
     3c8:	24 e1       	ldi	r18, 0x14	; 20
     3ca:	04 e0       	ldi	r16, 0x04	; 4
     3cc:	17 c0       	rjmp	.+46     	; 0x3fc <Inf_Can_Init+0x100>
				}
				else if (aRSPort == 0xFD) {
     3ce:	0d 3f       	cpi	r16, 0xFD	; 253
     3d0:	31 f4       	brne	.+12     	; 0x3de <Inf_Can_Init+0xe2>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x28, 0x08);
     3d2:	8f 2d       	mov	r24, r15
     3d4:	6d 2d       	mov	r22, r13
     3d6:	4c e0       	ldi	r20, 0x0C	; 12
     3d8:	28 e2       	ldi	r18, 0x28	; 40
     3da:	08 e0       	ldi	r16, 0x08	; 8
     3dc:	0f c0       	rjmp	.+30     	; 0x3fc <Inf_Can_Init+0x100>
				}
				else if (aRSPort == 0xFE) {
     3de:	0e 3f       	cpi	r16, 0xFE	; 254
     3e0:	31 f4       	brne	.+12     	; 0x3ee <Inf_Can_Init+0xf2>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x14, 0x14);
     3e2:	8f 2d       	mov	r24, r15
     3e4:	6d 2d       	mov	r22, r13
     3e6:	4c e0       	ldi	r20, 0x0C	; 12
     3e8:	24 e1       	ldi	r18, 0x14	; 20
     3ea:	04 e1       	ldi	r16, 0x14	; 20
     3ec:	07 c0       	rjmp	.+14     	; 0x3fc <Inf_Can_Init+0x100>
				}
				else if (aRSPort == 0xFF) {
     3ee:	0f 3f       	cpi	r16, 0xFF	; 255
     3f0:	39 f4       	brne	.+14     	; 0x400 <Inf_Can_Init+0x104>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x28, 0x28);
     3f2:	8f 2d       	mov	r24, r15
     3f4:	6d 2d       	mov	r22, r13
     3f6:	4c e0       	ldi	r20, 0x0C	; 12
     3f8:	28 e2       	ldi	r18, 0x28	; 40
     3fa:	08 e2       	ldi	r16, 0x28	; 40
     3fc:	0e 94 56 01 	call	0x2ac	; 0x2ac <Lib_Mcp2515_Modify>
				}
			}
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x0C);
     400:	8f 2d       	mov	r24, r15
     402:	6d 2d       	mov	r22, r13
     404:	4c e0       	ldi	r20, 0x0C	; 12
     406:	2c e0       	ldi	r18, 0x0C	; 12
     408:	0e 94 34 01 	call	0x268	; 0x268 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_CANCTRL, 0xE0, aMode);
     40c:	8f 2d       	mov	r24, r15
     40e:	6d 2d       	mov	r22, r13
     410:	4f e0       	ldi	r20, 0x0F	; 15
     412:	20 ee       	ldi	r18, 0xE0	; 224
     414:	08 2d       	mov	r16, r8
     416:	0e 94 56 01 	call	0x2ac	; 0x2ac <Lib_Mcp2515_Modify>
			if (((Lib_Mcp2515_Read(aSSPort, aSSPin, LIB_MCP2515_CANCTRL)) & 0xE0) == aMode) {
     41a:	8f 2d       	mov	r24, r15
     41c:	6d 2d       	mov	r22, r13
     41e:	4f e0       	ldi	r20, 0x0F	; 15
     420:	0e 94 13 01 	call	0x226	; 0x226 <Lib_Mcp2515_Read>
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	80 7e       	andi	r24, 0xE0	; 224
     42a:	90 70       	andi	r25, 0x00	; 0
     42c:	28 2d       	mov	r18, r8
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	82 17       	cp	r24, r18
     432:	93 07       	cpc	r25, r19
     434:	09 f4       	brne	.+2      	; 0x438 <Inf_Can_Init+0x13c>
     436:	41 e0       	ldi	r20, 0x01	; 1
				return TRUE;
			}
			return FALSE;
		}
     438:	84 2f       	mov	r24, r20
     43a:	cf 91       	pop	r28
     43c:	df 91       	pop	r29
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	ff 90       	pop	r15
     444:	ef 90       	pop	r14
     446:	df 90       	pop	r13
     448:	cf 90       	pop	r12
     44a:	bf 90       	pop	r11
     44c:	af 90       	pop	r10
     44e:	9f 90       	pop	r9
     450:	8f 90       	pop	r8
     452:	08 95       	ret

00000454 <Inf_Can_Rx>:
	#endif /* INF_CAN0_TX || INF_CAN0_RX || INF_CAN1_TX || INF_CAN1_RX || INF_CAN2_TX || INF_CAN2_RX */



	#if defined(INF_CAN0_RX) || defined(INF_CAN1_RX) || defined(INF_CAN2_RX)
		uint8_t Inf_Can_Rx(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aRSPort, const uint8_t aRSPin, Inf_Can_Msg_t * aInf_Can_Msg) {
     454:	df 92       	push	r13
     456:	ef 92       	push	r14
     458:	ff 92       	push	r15
     45a:	0f 93       	push	r16
     45c:	1f 93       	push	r17
     45e:	df 93       	push	r29
     460:	cf 93       	push	r28
     462:	0f 92       	push	r0
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	08 2f       	mov	r16, r24
     46a:	d6 2e       	mov	r13, r22
     46c:	14 2f       	mov	r17, r20
			uint8_t State = 0;
     46e:	19 82       	std	Y+1, r1	; 0x01
			uint8_t CmdSave = 0;
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     470:	43 e0       	ldi	r20, 0x03	; 3
     472:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     476:	81 2f       	mov	r24, r17
     478:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     47c:	80 2f       	mov	r24, r16
     47e:	6d 2d       	mov	r22, r13
     480:	41 e0       	ldi	r20, 0x01	; 1
     482:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     486:	80 eb       	ldi	r24, 0xB0	; 176
     488:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     48a:	77 9b       	sbis	0x0e, 7	; 14
     48c:	fe cf       	rjmp	.-4      	; 0x48a <__stack+0x2b>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     48e:	8f ef       	ldi	r24, 0xFF	; 255
     490:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     492:	77 9b       	sbis	0x0e, 7	; 14
     494:	fe cf       	rjmp	.-4      	; 0x492 <__stack+0x33>
		return SPDR;
     496:	9f b1       	in	r25, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     498:	8f ef       	ldi	r24, 0xFF	; 255
     49a:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     49c:	77 9b       	sbis	0x0e, 7	; 14
     49e:	fe cf       	rjmp	.-4      	; 0x49c <__stack+0x3d>
		return SPDR;
     4a0:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_Tx(LIB_MCP2515_RX_STATUS);
			State = Inf_Spi_TxRx(0xFF);
     4a2:	99 83       	std	Y+1, r25	; 0x01
			Inf_Spi_TxRx(0xFF);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     4a4:	80 2f       	mov	r24, r16
     4a6:	6d 2d       	mov	r22, r13
     4a8:	43 e0       	ldi	r20, 0x03	; 3
     4aa:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
			if (bit_is_set(State, LIB_MCP2515_RX_STATUS_INSTRUCTION_CANINTF_RX0IF)) {
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	86 ff       	sbrs	r24, 6
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__stack+0x59>
     4b4:	10 e9       	ldi	r17, 0x90	; 144
     4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <__stack+0x65>
				CmdSave = LIB_MCP2515_READ_RX_BUFFER0;
			}
			else if (bit_is_set(State, LIB_MCP2515_RX_STATUS_INSTRUCTION_CANINTF_RX1IF)) {
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	87 fd       	sbrc	r24, 7
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__stack+0x63>
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	47 c0       	rjmp	.+142    	; 0x550 <__stack+0xf1>
     4c2:	14 e9       	ldi	r17, 0x94	; 148
				CmdSave = LIB_MCP2515_READ_RX_BUFFER1;
			}
			else {
				return FALSE;
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     4c4:	80 2f       	mov	r24, r16
     4c6:	6d 2d       	mov	r22, r13
     4c8:	41 e0       	ldi	r20, 0x01	; 1
     4ca:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     4ce:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4d0:	77 9b       	sbis	0x0e, 7	; 14
     4d2:	fe cf       	rjmp	.-4      	; 0x4d0 <__stack+0x71>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     4d4:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4d6:	77 9b       	sbis	0x0e, 7	; 14
     4d8:	fe cf       	rjmp	.-4      	; 0x4d6 <__stack+0x77>
		return SPDR;
     4da:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_Tx(CmdSave);
			aInf_Can_Msg->SIdH = Inf_Spi_TxRx(0x00);
     4dc:	f7 01       	movw	r30, r14
     4de:	81 83       	std	Z+1, r24	; 0x01
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     4e0:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4e2:	77 9b       	sbis	0x0e, 7	; 14
     4e4:	fe cf       	rjmp	.-4      	; 0x4e2 <__stack+0x83>
		return SPDR;
     4e6:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->SIdL = Inf_Spi_TxRx(0x00);
     4e8:	f7 01       	movw	r30, r14
     4ea:	80 83       	st	Z, r24
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     4ec:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4ee:	77 9b       	sbis	0x0e, 7	; 14
     4f0:	fe cf       	rjmp	.-4      	; 0x4ee <__stack+0x8f>
		return SPDR;
     4f2:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->EIdH = Inf_Spi_TxRx(0x00);
     4f4:	f7 01       	movw	r30, r14
     4f6:	83 83       	std	Z+3, r24	; 0x03
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     4f8:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4fa:	77 9b       	sbis	0x0e, 7	; 14
     4fc:	fe cf       	rjmp	.-4      	; 0x4fa <__stack+0x9b>
		return SPDR;
     4fe:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->EIdL = Inf_Spi_TxRx(0x00);
     500:	f7 01       	movw	r30, r14
     502:	82 83       	std	Z+2, r24	; 0x02
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     504:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     506:	77 9b       	sbis	0x0e, 7	; 14
     508:	fe cf       	rjmp	.-4      	; 0x506 <__stack+0xa7>
		return SPDR;
     50a:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->Dlc = Inf_Spi_TxRx(0x00);
     50c:	f7 01       	movw	r30, r14
     50e:	84 83       	std	Z+4, r24	; 0x04
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
     510:	84 81       	ldd	r24, Z+4	; 0x04
     512:	86 fd       	sbrc	r24, 6
     514:	10 c0       	rjmp	.+32     	; 0x536 <__stack+0xd7>
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	09 c0       	rjmp	.+18     	; 0x52c <__stack+0xcd>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     51a:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     51c:	77 9b       	sbis	0x0e, 7	; 14
     51e:	fe cf       	rjmp	.-4      	; 0x51c <__stack+0xbd>
		return SPDR;
     520:	8f b1       	in	r24, 0x0f	; 15
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
     522:	f7 01       	movw	r30, r14
     524:	e9 0f       	add	r30, r25
     526:	f1 1d       	adc	r31, r1
     528:	85 83       	std	Z+5, r24	; 0x05
			aInf_Can_Msg->SIdL = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->EIdH = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->EIdL = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->Dlc = Inf_Spi_TxRx(0x00);
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
     52a:	9f 5f       	subi	r25, 0xFF	; 255
     52c:	f7 01       	movw	r30, r14
     52e:	84 81       	ldd	r24, Z+4	; 0x04
     530:	98 17       	cp	r25, r24
     532:	98 f3       	brcs	.-26     	; 0x51a <__stack+0xbb>
     534:	07 c0       	rjmp	.+14     	; 0x544 <__stack+0xe5>
     536:	f7 01       	movw	r30, r14
     538:	80 e0       	ldi	r24, 0x00	; 0
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
				}
			}
			else {
				for (uint8_t i = 0; i < 8; i++) {
					aInf_Can_Msg->Data[i] = 0x00;
     53a:	15 82       	std	Z+5, r1	; 0x05
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
				}
			}
			else {
				for (uint8_t i = 0; i < 8; i++) {
     53c:	8f 5f       	subi	r24, 0xFF	; 255
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	88 30       	cpi	r24, 0x08	; 8
     542:	d9 f7       	brne	.-10     	; 0x53a <__stack+0xdb>
					aInf_Can_Msg->Data[i] = 0x00;
				}
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     544:	80 2f       	mov	r24, r16
     546:	6d 2d       	mov	r22, r13
     548:	43 e0       	ldi	r20, 0x03	; 3
     54a:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
     54e:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
		}
     550:	0f 90       	pop	r0
     552:	cf 91       	pop	r28
     554:	df 91       	pop	r29
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	08 95       	ret

00000562 <Inf_Can_Tx>:
	#endif /* INF_CAN0_RX || INF_CAN1_RX || INF_CAN2_RX */



	#if defined(INF_CAN0_TX) || defined(INF_CAN1_TX) || defined(INF_CAN2_TX)
		uint8_t Inf_Can_Tx(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aRSPort, const uint8_t aRSPin, Inf_Can_Msg_t * aInf_Can_Msg) {
     562:	cf 92       	push	r12
     564:	df 92       	push	r13
     566:	ef 92       	push	r14
     568:	ff 92       	push	r15
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	df 93       	push	r29
     570:	cf 93       	push	r28
     572:	0f 92       	push	r0
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	08 2f       	mov	r16, r24
     57a:	d6 2e       	mov	r13, r22
     57c:	14 2f       	mov	r17, r20
			uint8_t State = 0;
     57e:	19 82       	std	Y+1, r1	; 0x01
			uint8_t CmdLoad = 0;
			uint8_t CmdSend = 0;
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     580:	43 e0       	ldi	r20, 0x03	; 3
     582:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     586:	81 2f       	mov	r24, r17
     588:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     58c:	80 2f       	mov	r24, r16
     58e:	6d 2d       	mov	r22, r13
     590:	41 e0       	ldi	r20, 0x01	; 1
     592:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     596:	80 ea       	ldi	r24, 0xA0	; 160
     598:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     59a:	77 9b       	sbis	0x0e, 7	; 14
     59c:	fe cf       	rjmp	.-4      	; 0x59a <Inf_Can_Tx+0x38>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     59e:	8f ef       	ldi	r24, 0xFF	; 255
     5a0:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5a2:	77 9b       	sbis	0x0e, 7	; 14
     5a4:	fe cf       	rjmp	.-4      	; 0x5a2 <Inf_Can_Tx+0x40>
		return SPDR;
     5a6:	9f b1       	in	r25, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     5a8:	8f ef       	ldi	r24, 0xFF	; 255
     5aa:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5ac:	77 9b       	sbis	0x0e, 7	; 14
     5ae:	fe cf       	rjmp	.-4      	; 0x5ac <Inf_Can_Tx+0x4a>
		return SPDR;
     5b0:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_Tx(LIB_MCP2515_READ_STATUS);
			State = Inf_Spi_TxRx(0xFF);
     5b2:	99 83       	std	Y+1, r25	; 0x01
			Inf_Spi_TxRx(0xFF);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     5b4:	80 2f       	mov	r24, r16
     5b6:	6d 2d       	mov	r22, r13
     5b8:	43 e0       	ldi	r20, 0x03	; 3
     5ba:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
			if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB0CTRL_TXREQ)) {
     5be:	89 81       	ldd	r24, Y+1	; 0x01
     5c0:	82 fd       	sbrc	r24, 2
     5c2:	04 c0       	rjmp	.+8      	; 0x5cc <Inf_Can_Tx+0x6a>
     5c4:	10 e4       	ldi	r17, 0x40	; 64
     5c6:	61 e8       	ldi	r22, 0x81	; 129
     5c8:	c6 2e       	mov	r12, r22
     5ca:	0f c0       	rjmp	.+30     	; 0x5ea <Inf_Can_Tx+0x88>
				CmdLoad = LIB_MCP2515_LOAD_TX_BUFFER0;
				CmdSend = LIB_MCP2515_RTS_TX0;
			}
			else if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB1CTRL_TXREQ)) {
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
     5ce:	84 fd       	sbrc	r24, 4
     5d0:	04 c0       	rjmp	.+8      	; 0x5da <Inf_Can_Tx+0x78>
     5d2:	12 e4       	ldi	r17, 0x42	; 66
     5d4:	52 e8       	ldi	r21, 0x82	; 130
     5d6:	c5 2e       	mov	r12, r21
     5d8:	08 c0       	rjmp	.+16     	; 0x5ea <Inf_Can_Tx+0x88>
				CmdLoad = LIB_MCP2515_LOAD_TX_BUFFER1;
				CmdSend = LIB_MCP2515_RTS_TX1;
			}
			else if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB2CTRL_TXREQ)) {
     5da:	89 81       	ldd	r24, Y+1	; 0x01
     5dc:	86 ff       	sbrs	r24, 6
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <Inf_Can_Tx+0x82>
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	48 c0       	rjmp	.+144    	; 0x674 <Inf_Can_Tx+0x112>
     5e4:	14 e4       	ldi	r17, 0x44	; 68
     5e6:	44 e8       	ldi	r20, 0x84	; 132
     5e8:	c4 2e       	mov	r12, r20
				CmdSend = LIB_MCP2515_RTS_TX2;
			}
			else {
				return FALSE;
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     5ea:	80 2f       	mov	r24, r16
     5ec:	6d 2d       	mov	r22, r13
     5ee:	41 e0       	ldi	r20, 0x01	; 1
     5f0:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     5f4:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5f6:	77 9b       	sbis	0x0e, 7	; 14
     5f8:	fe cf       	rjmp	.-4      	; 0x5f6 <Inf_Can_Tx+0x94>
			Inf_Spi_Tx(CmdLoad);
			Inf_Spi_Tx(aInf_Can_Msg->SIdH);
     5fa:	f7 01       	movw	r30, r14
     5fc:	81 81       	ldd	r24, Z+1	; 0x01
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     5fe:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     600:	77 9b       	sbis	0x0e, 7	; 14
     602:	fe cf       	rjmp	.-4      	; 0x600 <Inf_Can_Tx+0x9e>
			Inf_Spi_Tx(aInf_Can_Msg->SIdL);
     604:	f7 01       	movw	r30, r14
     606:	80 81       	ld	r24, Z
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     608:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     60a:	77 9b       	sbis	0x0e, 7	; 14
     60c:	fe cf       	rjmp	.-4      	; 0x60a <Inf_Can_Tx+0xa8>
			Inf_Spi_Tx(aInf_Can_Msg->EIdH);
     60e:	f7 01       	movw	r30, r14
     610:	83 81       	ldd	r24, Z+3	; 0x03
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     612:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     614:	77 9b       	sbis	0x0e, 7	; 14
     616:	fe cf       	rjmp	.-4      	; 0x614 <Inf_Can_Tx+0xb2>
			Inf_Spi_Tx(aInf_Can_Msg->EIdL);
     618:	f7 01       	movw	r30, r14
     61a:	82 81       	ldd	r24, Z+2	; 0x02
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     61c:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     61e:	77 9b       	sbis	0x0e, 7	; 14
     620:	fe cf       	rjmp	.-4      	; 0x61e <Inf_Can_Tx+0xbc>
			Inf_Spi_Tx(aInf_Can_Msg->Dlc);
     622:	f7 01       	movw	r30, r14
     624:	24 81       	ldd	r18, Z+4	; 0x04
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     626:	2f b9       	out	0x0f, r18	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     628:	77 9b       	sbis	0x0e, 7	; 14
     62a:	fe cf       	rjmp	.-4      	; 0x628 <Inf_Can_Tx+0xc6>
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
     62c:	f7 01       	movw	r30, r14
     62e:	84 81       	ldd	r24, Z+4	; 0x04
     630:	86 fd       	sbrc	r24, 6
     632:	0c c0       	rjmp	.+24     	; 0x64c <Inf_Can_Tx+0xea>
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	08 c0       	rjmp	.+16     	; 0x648 <Inf_Can_Tx+0xe6>
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++)
				{
					Inf_Spi_Tx(aInf_Can_Msg->Data[i]);
     638:	f7 01       	movw	r30, r14
     63a:	e9 0f       	add	r30, r25
     63c:	f1 1d       	adc	r31, r1
     63e:	85 81       	ldd	r24, Z+5	; 0x05
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     640:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     642:	77 9b       	sbis	0x0e, 7	; 14
     644:	fe cf       	rjmp	.-4      	; 0x642 <Inf_Can_Tx+0xe0>
			Inf_Spi_Tx(aInf_Can_Msg->SIdL);
			Inf_Spi_Tx(aInf_Can_Msg->EIdH);
			Inf_Spi_Tx(aInf_Can_Msg->EIdL);
			Inf_Spi_Tx(aInf_Can_Msg->Dlc);
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++)
     646:	9f 5f       	subi	r25, 0xFF	; 255
     648:	92 17       	cp	r25, r18
     64a:	b0 f3       	brcs	.-20     	; 0x638 <Inf_Can_Tx+0xd6>
				{
					Inf_Spi_Tx(aInf_Can_Msg->Data[i]);
				}
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     64c:	80 2f       	mov	r24, r16
     64e:	6d 2d       	mov	r22, r13
     650:	43 e0       	ldi	r20, 0x03	; 3
     652:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
			asm volatile("nop");
     656:	00 00       	nop
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     658:	80 2f       	mov	r24, r16
     65a:	6d 2d       	mov	r22, r13
     65c:	41 e0       	ldi	r20, 0x01	; 1
     65e:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     662:	cf b8       	out	0x0f, r12	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     664:	77 9b       	sbis	0x0e, 7	; 14
     666:	fe cf       	rjmp	.-4      	; 0x664 <Inf_Can_Tx+0x102>
			Inf_Spi_Tx(CmdSend);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     668:	80 2f       	mov	r24, r16
     66a:	6d 2d       	mov	r22, r13
     66c:	43 e0       	ldi	r20, 0x03	; 3
     66e:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
     672:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
		}
     674:	0f 90       	pop	r0
     676:	cf 91       	pop	r28
     678:	df 91       	pop	r29
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	ff 90       	pop	r15
     680:	ef 90       	pop	r14
     682:	df 90       	pop	r13
     684:	cf 90       	pop	r12
     686:	08 95       	ret

00000688 <Isb_Inf_Can_Init>:
#ifndef ISB_INF_CAN_C_
	#define ISB_INF_CAN_C_



	uint8_t Isb_Inf_Can_Init(const uint8_t aInf) {
     688:	8f 92       	push	r8
     68a:	af 92       	push	r10
     68c:	cf 92       	push	r12
     68e:	ef 92       	push	r14
     690:	0f 93       	push	r16
		uint8_t Result = FALSE;
		switch (aInf) {
     692:	88 23       	and	r24, r24
     694:	11 f0       	breq	.+4      	; 0x69a <Isb_Inf_Can_Init+0x12>
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	0e c0       	rjmp	.+28     	; 0x6b6 <Isb_Inf_Can_Init+0x2e>
			#if ISB_INF_CAN0 == 1
				case 0:
					Result = Inf_Can_Init(INF_CAN0_SSPORT, INF_CAN0_SSPIN, INF_CAN0_SPICFG, INF_CAN0_CNF1, INF_CAN0_CNF2, INF_CAN0_CNF3, INF_CAN0_RSPORT, INF_CAN0_RSPIN, INF_CAN0_MODE);
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	64 e0       	ldi	r22, 0x04	; 4
     69e:	43 e0       	ldi	r20, 0x03	; 3
     6a0:	21 e0       	ldi	r18, 0x01	; 1
     6a2:	06 eb       	ldi	r16, 0xB6	; 182
     6a4:	e4 e0       	ldi	r30, 0x04	; 4
     6a6:	ee 2e       	mov	r14, r30
     6a8:	cc 24       	eor	r12, r12
     6aa:	ca 94       	dec	r12
     6ac:	72 e0       	ldi	r23, 0x02	; 2
     6ae:	a7 2e       	mov	r10, r23
     6b0:	88 24       	eor	r8, r8
     6b2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Inf_Can_Init>
					Result = Inf_Can_Init(INF_CAN2_SSPORT, INF_CAN2_SSPIN, INF_CAN2_SPICFG, INF_CAN2_CNF1, INF_CAN2_CNF2, INF_CAN2_CNF3, INF_CAN2_RSPORT, INF_CAN2_RSPIN, INF_CAN2_MODE);
					break;
			#endif /* ISB_INF_CAN2 == 1 */
		}
		return Result;
	}
     6b6:	0f 91       	pop	r16
     6b8:	ef 90       	pop	r14
     6ba:	cf 90       	pop	r12
     6bc:	af 90       	pop	r10
     6be:	8f 90       	pop	r8
     6c0:	08 95       	ret

000006c2 <Isb_Inf_Can_Rx>:



	uint8_t Isb_Inf_Can_Rx(const uint8_t aInf, Isb_Msg_t * aIsb_Msg) {
     6c2:	af 92       	push	r10
     6c4:	bf 92       	push	r11
     6c6:	cf 92       	push	r12
     6c8:	df 92       	push	r13
     6ca:	ef 92       	push	r14
     6cc:	ff 92       	push	r15
     6ce:	0f 93       	push	r16
     6d0:	df 93       	push	r29
     6d2:	cf 93       	push	r28
     6d4:	cd b7       	in	r28, 0x3d	; 61
     6d6:	de b7       	in	r29, 0x3e	; 62
     6d8:	2d 97       	sbiw	r28, 0x0d	; 13
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	cd bf       	out	0x3d, r28	; 61
     6e4:	6b 01       	movw	r12, r22
		uint8_t aSSPort;
		uint8_t aSSPin;
		uint8_t aSpiCfg;
		uint8_t aRSPort;
		uint8_t aRSPin;
		switch (aInf) {
     6e6:	88 23       	and	r24, r24
     6e8:	09 f0       	breq	.+2      	; 0x6ec <Isb_Inf_Can_Rx+0x2a>
     6ea:	66 c0       	rjmp	.+204    	; 0x7b8 <Isb_Inf_Can_Rx+0xf6>
			default:
				return FALSE;
				break;
		}
		Inf_Can_Msg_t aCanMsg;
		if (Inf_Can_Rx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
     6ec:	82 e0       	ldi	r24, 0x02	; 2
     6ee:	64 e0       	ldi	r22, 0x04	; 4
     6f0:	43 e0       	ldi	r20, 0x03	; 3
     6f2:	2f ef       	ldi	r18, 0xFF	; 255
     6f4:	02 e0       	ldi	r16, 0x02	; 2
     6f6:	5e 01       	movw	r10, r28
     6f8:	08 94       	sec
     6fa:	a1 1c       	adc	r10, r1
     6fc:	b1 1c       	adc	r11, r1
     6fe:	75 01       	movw	r14, r10
     700:	0e 94 2a 02 	call	0x454	; 0x454 <Inf_Can_Rx>
     704:	81 30       	cpi	r24, 0x01	; 1
     706:	09 f0       	breq	.+2      	; 0x70a <Isb_Inf_Can_Rx+0x48>
     708:	57 c0       	rjmp	.+174    	; 0x7b8 <Isb_Inf_Can_Rx+0xf6>
			aIsb_Msg->Flags = ((aCanMsg.SIdH & 0xC0) >> 2) | (aCanMsg.Dlc & ISB_MSG_FLAGS_DLC_MASK);
     70a:	ea 81       	ldd	r30, Y+2	; 0x02
     70c:	8e 2f       	mov	r24, r30
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	80 7c       	andi	r24, 0xC0	; 192
     712:	90 70       	andi	r25, 0x00	; 0
     714:	95 95       	asr	r25
     716:	87 95       	ror	r24
     718:	95 95       	asr	r25
     71a:	87 95       	ror	r24
     71c:	0d 81       	ldd	r16, Y+5	; 0x05
     71e:	f0 2f       	mov	r31, r16
     720:	ff 70       	andi	r31, 0x0F	; 15
     722:	f8 2b       	or	r31, r24
     724:	d6 01       	movw	r26, r12
     726:	fc 93       	st	X, r31
			aIsb_Msg->DestId = (uint16_t)((aCanMsg.EIdH & 0xF8) >> 3) + (uint16_t)((aCanMsg.SIdL & 0x03) << 5) + (uint16_t)((aCanMsg.SIdL & 0xE0) << 2) + (uint16_t)((aCanMsg.SIdH & 0x3F) << 10);
     728:	6c 81       	ldd	r22, Y+4	; 0x04
     72a:	49 81       	ldd	r20, Y+1	; 0x01
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	3e 2f       	mov	r19, r30
     730:	33 0f       	add	r19, r19
     732:	33 0f       	add	r19, r19
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	86 2f       	mov	r24, r22
     738:	86 95       	lsr	r24
     73a:	86 95       	lsr	r24
     73c:	86 95       	lsr	r24
     73e:	28 0f       	add	r18, r24
     740:	31 1d       	adc	r19, r1
     742:	ca 01       	movw	r24, r20
     744:	83 70       	andi	r24, 0x03	; 3
     746:	90 70       	andi	r25, 0x00	; 0
     748:	75 e0       	ldi	r23, 0x05	; 5
     74a:	88 0f       	add	r24, r24
     74c:	99 1f       	adc	r25, r25
     74e:	7a 95       	dec	r23
     750:	e1 f7       	brne	.-8      	; 0x74a <Isb_Inf_Can_Rx+0x88>
     752:	28 0f       	add	r18, r24
     754:	39 1f       	adc	r19, r25
     756:	40 7e       	andi	r20, 0xE0	; 224
     758:	50 70       	andi	r21, 0x00	; 0
     75a:	44 0f       	add	r20, r20
     75c:	55 1f       	adc	r21, r21
     75e:	44 0f       	add	r20, r20
     760:	55 1f       	adc	r21, r21
     762:	24 0f       	add	r18, r20
     764:	35 1f       	adc	r19, r21
     766:	12 96       	adiw	r26, 0x02	; 2
     768:	3c 93       	st	X, r19
     76a:	2e 93       	st	-X, r18
     76c:	11 97       	sbiw	r26, 0x01	; 1
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	67 70       	andi	r22, 0x07	; 7
     772:	70 70       	andi	r23, 0x00	; 0
     774:	76 2f       	mov	r23, r22
     776:	66 27       	eor	r22, r22
     778:	8b 81       	ldd	r24, Y+3	; 0x03
     77a:	68 0f       	add	r22, r24
     77c:	71 1d       	adc	r23, r1
     77e:	14 96       	adiw	r26, 0x04	; 4
     780:	7c 93       	st	X, r23
     782:	6e 93       	st	-X, r22
     784:	13 97       	sbiw	r26, 0x03	; 3
			if (bit_is_set(aCanMsg.Dlc, 6)) {
     786:	8d 81       	ldd	r24, Y+5	; 0x05
     788:	86 fd       	sbrc	r24, 6
     78a:	0a c0       	rjmp	.+20     	; 0x7a0 <Isb_Inf_Can_Rx+0xde>
				aIsb_Msg->Flags |= 0x40;
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     78c:	de 01       	movw	r26, r28
     78e:	16 96       	adiw	r26, 0x06	; 6
     790:	f6 01       	movw	r30, r12
     792:	20 2f       	mov	r18, r16
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	2b 5f       	subi	r18, 0xFB	; 251
     798:	3f 4f       	sbci	r19, 0xFF	; 255
     79a:	2a 0d       	add	r18, r10
     79c:	3b 1d       	adc	r19, r11
     79e:	06 c0       	rjmp	.+12     	; 0x7ac <Isb_Inf_Can_Rx+0xea>
		if (Inf_Can_Rx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
			aIsb_Msg->Flags = ((aCanMsg.SIdH & 0xC0) >> 2) | (aCanMsg.Dlc & ISB_MSG_FLAGS_DLC_MASK);
			aIsb_Msg->DestId = (uint16_t)((aCanMsg.EIdH & 0xF8) >> 3) + (uint16_t)((aCanMsg.SIdL & 0x03) << 5) + (uint16_t)((aCanMsg.SIdL & 0xE0) << 2) + (uint16_t)((aCanMsg.SIdH & 0x3F) << 10);
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
			if (bit_is_set(aCanMsg.Dlc, 6)) {
				aIsb_Msg->Flags |= 0x40;
     7a0:	f0 64       	ori	r31, 0x40	; 64
     7a2:	d6 01       	movw	r26, r12
     7a4:	fc 93       	st	X, r31
     7a6:	06 c0       	rjmp	.+12     	; 0x7b4 <Isb_Inf_Can_Rx+0xf2>
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
					aIsb_Msg->Data[i] = aCanMsg.Data[i];
     7a8:	8d 91       	ld	r24, X+
     7aa:	84 83       	std	Z+4, r24	; 0x04
     7ac:	31 96       	adiw	r30, 0x01	; 1
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
			if (bit_is_set(aCanMsg.Dlc, 6)) {
				aIsb_Msg->Flags |= 0x40;
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     7ae:	a2 17       	cp	r26, r18
     7b0:	b3 07       	cpc	r27, r19
     7b2:	d1 f7       	brne	.-12     	; 0x7a8 <Isb_Inf_Can_Rx+0xe6>
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <Isb_Inf_Can_Rx+0xf8>
     7b8:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			return TRUE;
		}
		return FALSE;
	}
     7ba:	2d 96       	adiw	r28, 0x0d	; 13
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	cf 91       	pop	r28
     7c8:	df 91       	pop	r29
     7ca:	0f 91       	pop	r16
     7cc:	ff 90       	pop	r15
     7ce:	ef 90       	pop	r14
     7d0:	df 90       	pop	r13
     7d2:	cf 90       	pop	r12
     7d4:	bf 90       	pop	r11
     7d6:	af 90       	pop	r10
     7d8:	08 95       	ret

000007da <Isb_Inf_Can_Tx>:



	uint8_t Isb_Inf_Can_Tx(const uint8_t aInf, const Isb_Msg_t * aIsb_Msg) {
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
     7de:	0f 93       	push	r16
     7e0:	df 93       	push	r29
     7e2:	cf 93       	push	r28
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	2d 97       	sbiw	r28, 0x0d	; 13
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	fb 01       	movw	r30, r22
		uint8_t aSSPort;
		uint8_t aSSPin;
		uint8_t aSpiCfg;
		uint8_t aRSPort;
		uint8_t aRSPin;
		switch (aInf) {
     7f6:	88 23       	and	r24, r24
     7f8:	11 f0       	breq	.+4      	; 0x7fe <Isb_Inf_Can_Tx+0x24>
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	4e c0       	rjmp	.+156    	; 0x89a <Isb_Inf_Can_Tx+0xc0>
		}
		Inf_Can_Msg_t aCanMsg;
		// Write Message to SendBuffer - TXBnSIDH:
		//	[7..6] = Type
		//	[5..0] = Dest[15..10]
		aCanMsg.SIdH = ((aIsb_Msg->Flags << 2) & 0xC0) | (aIsb_Msg->DestId >> 10);
     7fe:	92 81       	ldd	r25, Z+2	; 0x02
     800:	96 95       	lsr	r25
     802:	96 95       	lsr	r25
     804:	60 81       	ld	r22, Z
     806:	86 2f       	mov	r24, r22
     808:	88 0f       	add	r24, r24
     80a:	88 0f       	add	r24, r24
     80c:	80 7c       	andi	r24, 0xC0	; 192
     80e:	89 2b       	or	r24, r25
     810:	8a 83       	std	Y+2, r24	; 0x02
		//	[7..5] = Dest[9..7]
		//	[4] = 0
		//	[3] = 1
		//	[2] = 0
		//	[1..0] = Dest[6..5]
		aCanMsg.SIdL = ((uint8_t)(aIsb_Msg->DestId >> 2) & 0xE0) | 0x08 | ((uint8_t)(aIsb_Msg->DestId >> 5) & 0x03);
     812:	41 81       	ldd	r20, Z+1	; 0x01
     814:	52 81       	ldd	r21, Z+2	; 0x02
     816:	ca 01       	movw	r24, r20
     818:	96 95       	lsr	r25
     81a:	87 95       	ror	r24
     81c:	96 95       	lsr	r25
     81e:	87 95       	ror	r24
     820:	80 7e       	andi	r24, 0xE0	; 224
     822:	9a 01       	movw	r18, r20
     824:	a5 e0       	ldi	r26, 0x05	; 5
     826:	36 95       	lsr	r19
     828:	27 95       	ror	r18
     82a:	aa 95       	dec	r26
     82c:	e1 f7       	brne	.-8      	; 0x826 <Isb_Inf_Can_Tx+0x4c>
     82e:	23 70       	andi	r18, 0x03	; 3
     830:	82 2b       	or	r24, r18
     832:	88 60       	ori	r24, 0x08	; 8
     834:	89 83       	std	Y+1, r24	; 0x01
		// Write Message to SendBuffer - TXBnEID8:
		//	[7..3] = Dest[4..0]
		//	[2..0] = Source[10..8]
		aCanMsg.EIdH = ((uint8_t)((aIsb_Msg->DestId << 3) & 0xF8)) | ((uint8_t)((aIsb_Msg->SourceId >> 8) & 0x07));
     836:	84 81       	ldd	r24, Z+4	; 0x04
     838:	87 70       	andi	r24, 0x07	; 7
     83a:	44 0f       	add	r20, r20
     83c:	44 0f       	add	r20, r20
     83e:	44 0f       	add	r20, r20
     840:	84 2b       	or	r24, r20
     842:	8c 83       	std	Y+4, r24	; 0x04
		// Write Message to SendBuffer - TXBnEID0:
		//	[7..0] = Source[7..0]
		aCanMsg.EIdL = (uint8_t)aIsb_Msg->SourceId;
     844:	83 81       	ldd	r24, Z+3	; 0x03
     846:	8b 83       	std	Y+3, r24	; 0x03
		// Write Message to SendBuffer - DataLength
		aCanMsg.Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
     848:	6f 70       	andi	r22, 0x0F	; 15
     84a:	6d 83       	std	Y+5, r22	; 0x05
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
     84c:	80 81       	ld	r24, Z
     84e:	86 fd       	sbrc	r24, 6
     850:	0a c0       	rjmp	.+20     	; 0x866 <Isb_Inf_Can_Tx+0x8c>
     852:	df 01       	movw	r26, r30
     854:	fe 01       	movw	r30, r28
     856:	36 96       	adiw	r30, 0x06	; 6
			aCanMsg.Dlc |= 0x40;
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     858:	ce 01       	movw	r24, r28
     85a:	86 0f       	add	r24, r22
     85c:	91 1d       	adc	r25, r1
     85e:	bc 01       	movw	r22, r24
     860:	6a 5f       	subi	r22, 0xFA	; 250
     862:	7f 4f       	sbci	r23, 0xFF	; 255
     864:	07 c0       	rjmp	.+14     	; 0x874 <Isb_Inf_Can_Tx+0x9a>
		aCanMsg.EIdL = (uint8_t)aIsb_Msg->SourceId;
		// Write Message to SendBuffer - DataLength
		aCanMsg.Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
			aCanMsg.Dlc |= 0x40;
     866:	60 64       	ori	r22, 0x40	; 64
     868:	6d 83       	std	Y+5, r22	; 0x05
     86a:	08 c0       	rjmp	.+16     	; 0x87c <Isb_Inf_Can_Tx+0xa2>
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
				aCanMsg.Data[i] = aIsb_Msg->Data[i];
     86c:	14 96       	adiw	r26, 0x04	; 4
     86e:	8c 91       	ld	r24, X
     870:	14 97       	sbiw	r26, 0x04	; 4
     872:	81 93       	st	Z+, r24
     874:	11 96       	adiw	r26, 0x01	; 1
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
			aCanMsg.Dlc |= 0x40;
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     876:	e6 17       	cp	r30, r22
     878:	f7 07       	cpc	r31, r23
     87a:	c1 f7       	brne	.-16     	; 0x86c <Isb_Inf_Can_Tx+0x92>
				aCanMsg.Data[i] = aIsb_Msg->Data[i];
			}
		}
		if (Inf_Can_Tx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
     87c:	82 e0       	ldi	r24, 0x02	; 2
     87e:	64 e0       	ldi	r22, 0x04	; 4
     880:	43 e0       	ldi	r20, 0x03	; 3
     882:	2f ef       	ldi	r18, 0xFF	; 255
     884:	02 e0       	ldi	r16, 0x02	; 2
     886:	7e 01       	movw	r14, r28
     888:	08 94       	sec
     88a:	e1 1c       	adc	r14, r1
     88c:	f1 1c       	adc	r15, r1
     88e:	0e 94 b1 02 	call	0x562	; 0x562 <Inf_Can_Tx>
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	81 30       	cpi	r24, 0x01	; 1
     896:	09 f4       	brne	.+2      	; 0x89a <Isb_Inf_Can_Tx+0xc0>
     898:	91 e0       	ldi	r25, 0x01	; 1
			return TRUE;
		}
		return FALSE;
	}
     89a:	89 2f       	mov	r24, r25
     89c:	2d 96       	adiw	r28, 0x0d	; 13
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	cf 91       	pop	r28
     8aa:	df 91       	pop	r29
     8ac:	0f 91       	pop	r16
     8ae:	ff 90       	pop	r15
     8b0:	ef 90       	pop	r14
     8b2:	08 95       	ret

000008b4 <Isb_Systick_Init>:



	void Isb_Systick_Init(void) {
		#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__) || defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
			TCCR0 = (1 << WGM01) | (1 << CS01) | (1 << CS00);
     8b4:	8b e0       	ldi	r24, 0x0B	; 11
     8b6:	83 bf       	out	0x33, r24	; 51
			TCNT0 = 0;
     8b8:	12 be       	out	0x32, r1	; 50
			OCR0 = (F_CPU / 64) / 1000;
     8ba:	8a ef       	ldi	r24, 0xFA	; 250
     8bc:	8c bf       	out	0x3c, r24	; 60
			TIMSK = (1 << OCIE0);
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	89 bf       	out	0x39, r24	; 57
			OCR0A = (F_CPU / 64) / 1000;
			TIMSK0 = (1 << OCIE0A);
		#else
			#error "No definition for this MCU available."
		#endif
	}
     8c2:	08 95       	ret

000008c4 <Isb_Systick_Exec>:



	void Isb_Systick_Exec(void) {
		if (bit_is_set(Isb_Systick_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
     8c4:	80 91 99 00 	lds	r24, 0x0099
     8c8:	80 ff       	sbrs	r24, 0
     8ca:	50 c0       	rjmp	.+160    	; 0x96c <Isb_Systick_Exec+0xa8>

			#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
				if (Isb_App_DigOut_IrqExec >= ISB_APP_DIGOUT_EXECTIME) {
     8cc:	80 91 9b 00 	lds	r24, 0x009B
     8d0:	90 91 9c 00 	lds	r25, 0x009C
     8d4:	89 2b       	or	r24, r25
     8d6:	49 f0       	breq	.+18     	; 0x8ea <Isb_Systick_Exec+0x26>
					Isb_App_DigOut_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     8d8:	80 91 9a 00 	lds	r24, 0x009A
     8dc:	81 60       	ori	r24, 0x01	; 1
     8de:	80 93 9a 00 	sts	0x009A, r24
					Isb_App_DigOut_IrqExec = 0;
     8e2:	10 92 9c 00 	sts	0x009C, r1
     8e6:	10 92 9b 00 	sts	0x009B, r1
				}
			#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

			#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
				if (Isb_App_DigIn_IrqExec >= ISB_APP_DIGIN_EXECTIME) {
     8ea:	80 91 a0 00 	lds	r24, 0x00A0
     8ee:	90 91 a1 00 	lds	r25, 0x00A1
     8f2:	0a 97       	sbiw	r24, 0x0a	; 10
     8f4:	48 f0       	brcs	.+18     	; 0x908 <Isb_Systick_Exec+0x44>
					Isb_App_DigIn_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     8f6:	80 91 9f 00 	lds	r24, 0x009F
     8fa:	81 60       	ori	r24, 0x01	; 1
     8fc:	80 93 9f 00 	sts	0x009F, r24
					Isb_App_DigIn_IrqExec = 0;
     900:	10 92 a1 00 	sts	0x00A1, r1
     904:	10 92 a0 00 	sts	0x00A0, r1
					Isb_App_Lcd_IrqExec = 0;
				}
			#endif /* ISB_APP_LCD_MAX && ISB_APP_H_ */

			#if defined(ISB_OBJ_1BIT_MAX) && defined(ISB_OBJ_H_)
				if (Isb_Obj_1Bit_IrqExec >= ISB_OBJ_1BIT_EXECTIME) {
     908:	80 91 a3 00 	lds	r24, 0x00A3
     90c:	90 91 a4 00 	lds	r25, 0x00A4
     910:	89 2b       	or	r24, r25
     912:	49 f0       	breq	.+18     	; 0x926 <Isb_Systick_Exec+0x62>
					Isb_Obj_1Bit_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     914:	80 91 a2 00 	lds	r24, 0x00A2
     918:	81 60       	ori	r24, 0x01	; 1
     91a:	80 93 a2 00 	sts	0x00A2, r24
					Isb_Obj_1Bit_IrqExec = 0;
     91e:	10 92 a4 00 	sts	0x00A4, r1
     922:	10 92 a3 00 	sts	0x00A3, r1
				}
			#endif /* ISB_OBJ_1BIT_MAX && ISB_OBJ_H_ */

			#if defined(ISB_OBJ_4BIT_MAX) && defined(ISB_OBJ_H_)
				if (Isb_Obj_4Bit_IrqExec >= ISB_OBJ_4BIT_EXECTIME) {
     926:	80 91 a6 00 	lds	r24, 0x00A6
     92a:	90 91 a7 00 	lds	r25, 0x00A7
     92e:	89 2b       	or	r24, r25
     930:	49 f0       	breq	.+18     	; 0x944 <Isb_Systick_Exec+0x80>
					Isb_Obj_4Bit_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     932:	80 91 a5 00 	lds	r24, 0x00A5
     936:	81 60       	ori	r24, 0x01	; 1
     938:	80 93 a5 00 	sts	0x00A5, r24
					Isb_Obj_4Bit_IrqExec = 0;
     93c:	10 92 a7 00 	sts	0x00A7, r1
     940:	10 92 a6 00 	sts	0x00A6, r1
				}
			#endif /* ISB_OBJ_4BIT_MAX && ISB_OBJ_H_ */

			#if defined(ISB_OBJ_8BIT_MAX) && defined(ISB_OBJ_H_)
				if (Isb_Obj_8Bit_IrqExec >= ISB_OBJ_8BIT_EXECTIME) {
     944:	80 91 a9 00 	lds	r24, 0x00A9
     948:	90 91 aa 00 	lds	r25, 0x00AA
     94c:	89 2b       	or	r24, r25
     94e:	49 f0       	breq	.+18     	; 0x962 <Isb_Systick_Exec+0x9e>
					Isb_Obj_8Bit_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     950:	80 91 a8 00 	lds	r24, 0x00A8
     954:	81 60       	ori	r24, 0x01	; 1
     956:	80 93 a8 00 	sts	0x00A8, r24
					Isb_Obj_8Bit_IrqExec = 0;
     95a:	10 92 aa 00 	sts	0x00AA, r1
     95e:	10 92 a9 00 	sts	0x00A9, r1
					Isb_Obj_Float_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
					Isb_Obj_Float_IrqExec = 0;
				}
			#endif /* ISB_OBJ_FLOAT_MAX && ISB_OBJ_H_ */

			Isb_Systick_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
     962:	80 91 99 00 	lds	r24, 0x0099
     966:	8e 7f       	andi	r24, 0xFE	; 254
     968:	80 93 99 00 	sts	0x0099, r24
     96c:	08 95       	ret

0000096e <Isb_Systick_Irq_Timer>:
	}



	void Isb_Systick_Irq_Timer(void) {
		Isb_Systick_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     96e:	80 91 99 00 	lds	r24, 0x0099
     972:	81 60       	ori	r24, 0x01	; 1
     974:	80 93 99 00 	sts	0x0099, r24

		#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
			Isb_App_DigOut_IrqExec++;
     978:	80 91 9b 00 	lds	r24, 0x009B
     97c:	90 91 9c 00 	lds	r25, 0x009C
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	90 93 9c 00 	sts	0x009C, r25
     986:	80 93 9b 00 	sts	0x009B, r24
		#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

		#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
			Isb_App_DigIn_IrqExec++;
     98a:	80 91 a0 00 	lds	r24, 0x00A0
     98e:	90 91 a1 00 	lds	r25, 0x00A1
     992:	01 96       	adiw	r24, 0x01	; 1
     994:	90 93 a1 00 	sts	0x00A1, r25
     998:	80 93 a0 00 	sts	0x00A0, r24
		#if defined(ISB_APP_LCD_MAX) && defined(ISB_APP_H_)
			Isb_App_Lcd_IrqExec++;
		#endif /* ISB_APP_LCD_MAX && ISB_APP_H_ */

		#if defined(ISB_OBJ_1BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_1Bit_IrqExec++;
     99c:	80 91 a3 00 	lds	r24, 0x00A3
     9a0:	90 91 a4 00 	lds	r25, 0x00A4
     9a4:	01 96       	adiw	r24, 0x01	; 1
     9a6:	90 93 a4 00 	sts	0x00A4, r25
     9aa:	80 93 a3 00 	sts	0x00A3, r24
		#endif /* ISB_OBJ_1BIT_MAX && ISB_OBJ_H_ */

		#if defined(ISB_OBJ_4BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_4Bit_IrqExec++;
     9ae:	80 91 a6 00 	lds	r24, 0x00A6
     9b2:	90 91 a7 00 	lds	r25, 0x00A7
     9b6:	01 96       	adiw	r24, 0x01	; 1
     9b8:	90 93 a7 00 	sts	0x00A7, r25
     9bc:	80 93 a6 00 	sts	0x00A6, r24
		#endif /* ISB_OBJ_4BIT_MAX && ISB_OBJ_H_ */

		#if defined(ISB_OBJ_8BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_8Bit_IrqExec++;
     9c0:	80 91 a9 00 	lds	r24, 0x00A9
     9c4:	90 91 aa 00 	lds	r25, 0x00AA
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	90 93 aa 00 	sts	0x00AA, r25
     9ce:	80 93 a9 00 	sts	0x00A9, r24

		#if defined(ISB_OBJ_FLOAT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_Float_IrqExec++;
		#endif /* ISB_OBJ_FLOAT_MAX && ISB_OBJ_H_ */

	}
     9d2:	08 95       	ret

000009d4 <__vector_19>:



	#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__) || defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
		ISR(TIMER0_COMP_vect) {
     9d4:	1f 92       	push	r1
     9d6:	0f 92       	push	r0
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	0f 92       	push	r0
     9dc:	11 24       	eor	r1, r1
     9de:	8f 93       	push	r24
     9e0:	9f 93       	push	r25
	}



	void Isb_Systick_Irq_Timer(void) {
		Isb_Systick_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     9e2:	80 91 99 00 	lds	r24, 0x0099
     9e6:	81 60       	ori	r24, 0x01	; 1
     9e8:	80 93 99 00 	sts	0x0099, r24

		#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
			Isb_App_DigOut_IrqExec++;
     9ec:	80 91 9b 00 	lds	r24, 0x009B
     9f0:	90 91 9c 00 	lds	r25, 0x009C
     9f4:	01 96       	adiw	r24, 0x01	; 1
     9f6:	90 93 9c 00 	sts	0x009C, r25
     9fa:	80 93 9b 00 	sts	0x009B, r24
		#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

		#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
			Isb_App_DigIn_IrqExec++;
     9fe:	80 91 a0 00 	lds	r24, 0x00A0
     a02:	90 91 a1 00 	lds	r25, 0x00A1
     a06:	01 96       	adiw	r24, 0x01	; 1
     a08:	90 93 a1 00 	sts	0x00A1, r25
     a0c:	80 93 a0 00 	sts	0x00A0, r24
		#if defined(ISB_APP_LCD_MAX) && defined(ISB_APP_H_)
			Isb_App_Lcd_IrqExec++;
		#endif /* ISB_APP_LCD_MAX && ISB_APP_H_ */

		#if defined(ISB_OBJ_1BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_1Bit_IrqExec++;
     a10:	80 91 a3 00 	lds	r24, 0x00A3
     a14:	90 91 a4 00 	lds	r25, 0x00A4
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	90 93 a4 00 	sts	0x00A4, r25
     a1e:	80 93 a3 00 	sts	0x00A3, r24
		#endif /* ISB_OBJ_1BIT_MAX && ISB_OBJ_H_ */

		#if defined(ISB_OBJ_4BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_4Bit_IrqExec++;
     a22:	80 91 a6 00 	lds	r24, 0x00A6
     a26:	90 91 a7 00 	lds	r25, 0x00A7
     a2a:	01 96       	adiw	r24, 0x01	; 1
     a2c:	90 93 a7 00 	sts	0x00A7, r25
     a30:	80 93 a6 00 	sts	0x00A6, r24
		#endif /* ISB_OBJ_4BIT_MAX && ISB_OBJ_H_ */

		#if defined(ISB_OBJ_8BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_8Bit_IrqExec++;
     a34:	80 91 a9 00 	lds	r24, 0x00A9
     a38:	90 91 aa 00 	lds	r25, 0x00AA
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	90 93 aa 00 	sts	0x00AA, r25
     a42:	80 93 a9 00 	sts	0x00A9, r24


	#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__) || defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
		ISR(TIMER0_COMP_vect) {
			Isb_Systick_Irq_Timer();
		}
     a46:	9f 91       	pop	r25
     a48:	8f 91       	pop	r24
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	0f 90       	pop	r0
     a50:	1f 90       	pop	r1
     a52:	18 95       	reti

00000a54 <Isb_Ch_Init>:
	}



	uint8_t __attribute__((always_inline)) lib_eep_fw_read_byte(uint8_t * aAddr) {
		return eeprom_read_byte(Isb_Firmware_Offset + aAddr);;
     a54:	80 91 96 00 	lds	r24, 0x0096
     a58:	a8 2f       	mov	r26, r24
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	e8 e6       	ldi	r30, 0x68	; 104
     a5e:	f1 e0       	ldi	r31, 0x01	; 1
     a60:	60 e0       	ldi	r22, 0x00	; 0

	void Isb_Ch_Init(void) {
		for (uint8_t ChIndex = 0; ChIndex < ISB_CH_MAX; ChIndex++) {
			uint16_t eepAddrCtrl = 0;
			uint16_t eepAddrCrc = 0;
			switch (ChIndex) {
     a62:	61 30       	cpi	r22, 0x01	; 1
     a64:	39 f0       	breq	.+14     	; 0xa74 <Isb_Ch_Init+0x20>
     a66:	61 30       	cpi	r22, 0x01	; 1
     a68:	50 f0       	brcs	.+20     	; 0xa7e <Isb_Ch_Init+0x2a>
     a6a:	62 30       	cpi	r22, 0x02	; 2
     a6c:	69 f0       	breq	.+26     	; 0xa88 <Isb_Ch_Init+0x34>
     a6e:	63 30       	cpi	r22, 0x03	; 3
     a70:	a9 f4       	brne	.+42     	; 0xa9c <Isb_Ch_Init+0x48>
     a72:	0f c0       	rjmp	.+30     	; 0xa92 <Isb_Ch_Init+0x3e>
     a74:	28 e1       	ldi	r18, 0x18	; 24
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	4f e2       	ldi	r20, 0x2F	; 47
     a7a:	50 e0       	ldi	r21, 0x00	; 0
     a7c:	13 c0       	rjmp	.+38     	; 0xaa4 <Isb_Ch_Init+0x50>
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	47 e1       	ldi	r20, 0x17	; 23
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	0e c0       	rjmp	.+28     	; 0xaa4 <Isb_Ch_Init+0x50>
     a88:	20 e3       	ldi	r18, 0x30	; 48
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	44 e4       	ldi	r20, 0x44	; 68
     a8e:	50 e0       	ldi	r21, 0x00	; 0
     a90:	09 c0       	rjmp	.+18     	; 0xaa4 <Isb_Ch_Init+0x50>
				#endif /* ISB_CH_1 */
				#if defined(ISB_CH_2)
					case 2:
						eepAddrCtrl = ISB_CH_2_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_2_EEADDR_CRC;
						break;
     a92:	25 e4       	ldi	r18, 0x45	; 69
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	49 e5       	ldi	r20, 0x59	; 89
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <Isb_Ch_Init+0x50>
				#endif /* ISB_CH_2 */
				#if defined(ISB_CH_3)
					case 3:
						eepAddrCtrl = ISB_CH_3_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_3_EEADDR_CRC;
						break;
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	40 e0       	ldi	r20, 0x00	; 0
     aa2:	50 e0       	ldi	r21, 0x00	; 0
				default:
					eepAddrCtrl = 0;
					eepAddrCrc = 0;
					break;
			}
			Isb_Ch[ChIndex].Ctrl = 0;
     aa4:	11 82       	std	Z+1, r1	; 0x01
     aa6:	10 82       	st	Z, r1
			if (eepAddrCtrl < eepAddrCrc) {
     aa8:	24 17       	cp	r18, r20
     aaa:	35 07       	cpc	r19, r21
     aac:	78 f4       	brcc	.+30     	; 0xacc <Isb_Ch_Init+0x78>
     aae:	c9 01       	movw	r24, r18
				uint8_t Crc = 0;
				for (uint16_t eepAddr = eepAddrCtrl; eepAddr <= eepAddrCrc; eepAddr++) {
     ab0:	01 96       	adiw	r24, 0x01	; 1
     ab2:	48 17       	cp	r20, r24
     ab4:	59 07       	cpc	r21, r25
     ab6:	e0 f7       	brcc	.-8      	; 0xab0 <Isb_Ch_Init+0x5c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     ab8:	e1 99       	sbic	0x1c, 1	; 28
     aba:	fe cf       	rjmp	.-4      	; 0xab8 <Isb_Ch_Init+0x64>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     abc:	2a 0f       	add	r18, r26
     abe:	3b 1f       	adc	r19, r27
     ac0:	3f bb       	out	0x1f, r19	; 31
     ac2:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
     ac4:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     ac6:	8d b3       	in	r24, 0x1d	; 29
//					Crc += lib_eep_fw_read_byte((uint8_t *)eepAddr);
				}
				if (Crc == 0) {
					Isb_Ch[ChIndex].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddrCtrl);
     ac8:	80 83       	st	Z, r24
     aca:	11 82       	std	Z+1, r1	; 0x01
	#define ISB_CH_C_



	void Isb_Ch_Init(void) {
		for (uint8_t ChIndex = 0; ChIndex < ISB_CH_MAX; ChIndex++) {
     acc:	6f 5f       	subi	r22, 0xFF	; 255
     ace:	32 96       	adiw	r30, 0x02	; 2
     ad0:	64 30       	cpi	r22, 0x04	; 4
     ad2:	39 f6       	brne	.-114    	; 0xa62 <Isb_Ch_Init+0xe>
				if (Crc == 0) {
					Isb_Ch[ChIndex].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddrCtrl);
				}
			}
		}
	}
     ad4:	08 95       	ret

00000ad6 <Isb_App_Init>:
#ifndef ISB_APP_C_
	#define ISB_APP_C_



	void Isb_App_Init(void) {
     ad6:	2f 92       	push	r2
     ad8:	3f 92       	push	r3
     ada:	4f 92       	push	r4
     adc:	5f 92       	push	r5
     ade:	6f 92       	push	r6
     ae0:	7f 92       	push	r7
     ae2:	8f 92       	push	r8
     ae4:	9f 92       	push	r9
     ae6:	af 92       	push	r10
     ae8:	bf 92       	push	r11
     aea:	cf 92       	push	r12
     aec:	df 92       	push	r13
     aee:	ef 92       	push	r14
     af0:	ff 92       	push	r15
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	80 91 96 00 	lds	r24, 0x0096
     afe:	28 2f       	mov	r18, r24
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	a4 e3       	ldi	r26, 0x34	; 52
     b04:	b1 e0       	ldi	r27, 0x01	; 1
     b06:	22 24       	eor	r2, r2
     b08:	33 24       	eor	r3, r3
				uint16_t eeAddrCfg5 = 0;
				uint16_t eeAddrCfg6 = 0;
				uint16_t eeAddrCfg7 = 0;
				uint16_t eeAddrCfg8 = 0;
				uint16_t eeAddrCfg9 = 0;
				switch (AppIndex) {
     b0a:	22 20       	and	r2, r2
     b0c:	21 f0       	breq	.+8      	; 0xb16 <Isb_App_Init+0x40>
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	28 16       	cp	r2, r24
     b12:	e1 f4       	brne	.+56     	; 0xb4c <Isb_App_Init+0x76>
     b14:	30 c0       	rjmp	.+96     	; 0xb76 <Isb_App_Init+0xa0>
     b16:	41 e0       	ldi	r20, 0x01	; 1
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	62 e0       	ldi	r22, 0x02	; 2
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	c3 e0       	ldi	r28, 0x03	; 3
     b20:	d0 e0       	ldi	r29, 0x00	; 0
     b22:	04 e0       	ldi	r16, 0x04	; 4
     b24:	10 e0       	ldi	r17, 0x00	; 0
     b26:	85 e0       	ldi	r24, 0x05	; 5
     b28:	e8 2e       	mov	r14, r24
     b2a:	f1 2c       	mov	r15, r1
     b2c:	f6 e0       	ldi	r31, 0x06	; 6
     b2e:	cf 2e       	mov	r12, r31
     b30:	d1 2c       	mov	r13, r1
     b32:	e7 e0       	ldi	r30, 0x07	; 7
     b34:	ae 2e       	mov	r10, r30
     b36:	b1 2c       	mov	r11, r1
     b38:	98 e0       	ldi	r25, 0x08	; 8
     b3a:	89 2e       	mov	r8, r25
     b3c:	91 2c       	mov	r9, r1
     b3e:	89 e0       	ldi	r24, 0x09	; 9
     b40:	68 2e       	mov	r6, r24
     b42:	71 2c       	mov	r7, r1
     b44:	fa e0       	ldi	r31, 0x0A	; 10
     b46:	4f 2e       	mov	r4, r31
     b48:	51 2c       	mov	r5, r1
     b4a:	2f c0       	rjmp	.+94     	; 0xbaa <Isb_App_Init+0xd4>
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	c0 e0       	ldi	r28, 0x00	; 0
     b56:	d0 e0       	ldi	r29, 0x00	; 0
     b58:	00 e0       	ldi	r16, 0x00	; 0
     b5a:	10 e0       	ldi	r17, 0x00	; 0
     b5c:	ee 24       	eor	r14, r14
     b5e:	ff 24       	eor	r15, r15
     b60:	cc 24       	eor	r12, r12
     b62:	dd 24       	eor	r13, r13
     b64:	aa 24       	eor	r10, r10
     b66:	bb 24       	eor	r11, r11
     b68:	88 24       	eor	r8, r8
     b6a:	99 24       	eor	r9, r9
     b6c:	66 24       	eor	r6, r6
     b6e:	77 24       	eor	r7, r7
     b70:	44 24       	eor	r4, r4
     b72:	55 24       	eor	r5, r5
     b74:	1a c0       	rjmp	.+52     	; 0xbaa <Isb_App_Init+0xd4>
     b76:	49 e1       	ldi	r20, 0x19	; 25
     b78:	50 e0       	ldi	r21, 0x00	; 0
     b7a:	6a e1       	ldi	r22, 0x1A	; 26
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	cb e1       	ldi	r28, 0x1B	; 27
     b80:	d0 e0       	ldi	r29, 0x00	; 0
     b82:	0c e1       	ldi	r16, 0x1C	; 28
     b84:	10 e0       	ldi	r17, 0x00	; 0
     b86:	ed e1       	ldi	r30, 0x1D	; 29
     b88:	ee 2e       	mov	r14, r30
     b8a:	f1 2c       	mov	r15, r1
     b8c:	9e e1       	ldi	r25, 0x1E	; 30
     b8e:	c9 2e       	mov	r12, r25
     b90:	d1 2c       	mov	r13, r1
     b92:	8f e1       	ldi	r24, 0x1F	; 31
     b94:	a8 2e       	mov	r10, r24
     b96:	b1 2c       	mov	r11, r1
     b98:	f0 e2       	ldi	r31, 0x20	; 32
     b9a:	8f 2e       	mov	r8, r31
     b9c:	91 2c       	mov	r9, r1
     b9e:	e1 e2       	ldi	r30, 0x21	; 33
     ba0:	6e 2e       	mov	r6, r30
     ba2:	71 2c       	mov	r7, r1
     ba4:	92 e2       	ldi	r25, 0x22	; 34
     ba6:	49 2e       	mov	r4, r25
     ba8:	51 2c       	mov	r5, r1
							eeAddrCfg8 = ISB_APP_DIGOUT_15_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_15_EEADDR_CFG9;
							break;
					#endif /* ISB_APP_DIGOUT_15 */
				}
				uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigOut_Ch_Array[AppIndex]);
     baa:	f1 01       	movw	r30, r2
     bac:	e8 58       	subi	r30, 0x88	; 136
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	e4 91       	lpm	r30, Z+
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	ee 0f       	add	r30, r30
     bb6:	ff 1f       	adc	r31, r31
     bb8:	e8 59       	subi	r30, 0x98	; 152
     bba:	fe 4f       	sbci	r31, 0xFE	; 254
     bbc:	80 81       	ld	r24, Z
     bbe:	80 ff       	sbrs	r24, 0
     bc0:	6c c0       	rjmp	.+216    	; 0xc9a <Isb_App_Init+0x1c4>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     bc2:	e1 99       	sbic	0x1c, 1	; 28
     bc4:	fe cf       	rjmp	.-4      	; 0xbc2 <Isb_App_Init+0xec>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     bc6:	42 0f       	add	r20, r18
     bc8:	53 1f       	adc	r21, r19
     bca:	5f bb       	out	0x1f, r21	; 31
     bcc:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
     bce:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     bd0:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg0);
     bd2:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     bd4:	e1 99       	sbic	0x1c, 1	; 28
     bd6:	fe cf       	rjmp	.-4      	; 0xbd4 <Isb_App_Init+0xfe>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     bd8:	62 0f       	add	r22, r18
     bda:	73 1f       	adc	r23, r19
     bdc:	7f bb       	out	0x1f, r23	; 31
     bde:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
     be0:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     be2:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg1);
     be4:	11 96       	adiw	r26, 0x01	; 1
     be6:	8c 93       	st	X, r24
     be8:	11 97       	sbiw	r26, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     bea:	e1 99       	sbic	0x1c, 1	; 28
     bec:	fe cf       	rjmp	.-4      	; 0xbea <Isb_App_Init+0x114>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     bee:	c2 0f       	add	r28, r18
     bf0:	d3 1f       	adc	r29, r19
     bf2:	df bb       	out	0x1f, r29	; 31
     bf4:	ce bb       	out	0x1e, r28	; 30
#endif
    EECR |= (1 << EERE);
     bf6:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     bf8:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg2);
     bfa:	12 96       	adiw	r26, 0x02	; 2
     bfc:	8c 93       	st	X, r24
     bfe:	12 97       	sbiw	r26, 0x02	; 2
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c00:	e1 99       	sbic	0x1c, 1	; 28
     c02:	fe cf       	rjmp	.-4      	; 0xc00 <Isb_App_Init+0x12a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     c04:	02 0f       	add	r16, r18
     c06:	13 1f       	adc	r17, r19
     c08:	1f bb       	out	0x1f, r17	; 31
     c0a:	0e bb       	out	0x1e, r16	; 30
#endif
    EECR |= (1 << EERE);
     c0c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     c0e:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg3 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg3);
     c10:	13 96       	adiw	r26, 0x03	; 3
     c12:	8c 93       	st	X, r24
     c14:	13 97       	sbiw	r26, 0x03	; 3
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c16:	e1 99       	sbic	0x1c, 1	; 28
     c18:	fe cf       	rjmp	.-4      	; 0xc16 <Isb_App_Init+0x140>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     c1a:	e2 0e       	add	r14, r18
     c1c:	f3 1e       	adc	r15, r19
     c1e:	ff ba       	out	0x1f, r15	; 31
     c20:	ee ba       	out	0x1e, r14	; 30
#endif
    EECR |= (1 << EERE);
     c22:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     c24:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg4 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg4);
     c26:	14 96       	adiw	r26, 0x04	; 4
     c28:	8c 93       	st	X, r24
     c2a:	14 97       	sbiw	r26, 0x04	; 4
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c2c:	e1 99       	sbic	0x1c, 1	; 28
     c2e:	fe cf       	rjmp	.-4      	; 0xc2c <Isb_App_Init+0x156>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     c30:	c2 0e       	add	r12, r18
     c32:	d3 1e       	adc	r13, r19
     c34:	df ba       	out	0x1f, r13	; 31
     c36:	ce ba       	out	0x1e, r12	; 30
#endif
    EECR |= (1 << EERE);
     c38:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     c3a:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg5 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg5);
     c3c:	15 96       	adiw	r26, 0x05	; 5
     c3e:	8c 93       	st	X, r24
     c40:	15 97       	sbiw	r26, 0x05	; 5
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c42:	e1 99       	sbic	0x1c, 1	; 28
     c44:	fe cf       	rjmp	.-4      	; 0xc42 <Isb_App_Init+0x16c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     c46:	a2 0e       	add	r10, r18
     c48:	b3 1e       	adc	r11, r19
     c4a:	bf ba       	out	0x1f, r11	; 31
     c4c:	ae ba       	out	0x1e, r10	; 30
#endif
    EECR |= (1 << EERE);
     c4e:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     c50:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg6 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg6);
     c52:	16 96       	adiw	r26, 0x06	; 6
     c54:	8c 93       	st	X, r24
     c56:	16 97       	sbiw	r26, 0x06	; 6
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c58:	e1 99       	sbic	0x1c, 1	; 28
     c5a:	fe cf       	rjmp	.-4      	; 0xc58 <Isb_App_Init+0x182>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     c5c:	82 0e       	add	r8, r18
     c5e:	93 1e       	adc	r9, r19
     c60:	9f ba       	out	0x1f, r9	; 31
     c62:	8e ba       	out	0x1e, r8	; 30
#endif
    EECR |= (1 << EERE);
     c64:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     c66:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg7 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg7);
     c68:	17 96       	adiw	r26, 0x07	; 7
     c6a:	8c 93       	st	X, r24
     c6c:	17 97       	sbiw	r26, 0x07	; 7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c6e:	e1 99       	sbic	0x1c, 1	; 28
     c70:	fe cf       	rjmp	.-4      	; 0xc6e <Isb_App_Init+0x198>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     c72:	62 0e       	add	r6, r18
     c74:	73 1e       	adc	r7, r19
     c76:	7f ba       	out	0x1f, r7	; 31
     c78:	6e ba       	out	0x1e, r6	; 30
#endif
    EECR |= (1 << EERE);
     c7a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     c7c:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg8 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg8);
     c7e:	18 96       	adiw	r26, 0x08	; 8
     c80:	8c 93       	st	X, r24
     c82:	18 97       	sbiw	r26, 0x08	; 8
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c84:	e1 99       	sbic	0x1c, 1	; 28
     c86:	fe cf       	rjmp	.-4      	; 0xc84 <Isb_App_Init+0x1ae>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     c88:	42 0e       	add	r4, r18
     c8a:	53 1e       	adc	r5, r19
     c8c:	5f ba       	out	0x1f, r5	; 31
     c8e:	4e ba       	out	0x1e, r4	; 30
#endif
    EECR |= (1 << EERE);
     c90:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     c92:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg9 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg9);
     c94:	19 96       	adiw	r26, 0x09	; 9
     c96:	8c 93       	st	X, r24
     c98:	19 97       	sbiw	r26, 0x09	; 9
     c9a:	08 94       	sec
     c9c:	21 1c       	adc	r2, r1
     c9e:	31 1c       	adc	r3, r1
     ca0:	5a 96       	adiw	r26, 0x1a	; 26


	void Isb_App_Init(void) {

		#if defined(ISB_APP_DIGOUT_MAX)
			for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGOUT_MAX; AppIndex++) {
     ca2:	92 e0       	ldi	r25, 0x02	; 2
     ca4:	29 16       	cp	r2, r25
     ca6:	31 04       	cpc	r3, r1
     ca8:	09 f0       	breq	.+2      	; 0xcac <Isb_App_Init+0x1d6>
     caa:	2f cf       	rjmp	.-418    	; 0xb0a <Isb_App_Init+0x34>
     cac:	9b ea       	ldi	r25, 0xAB	; 171
     cae:	e9 2e       	mov	r14, r25
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	f9 2e       	mov	r15, r25
     cb4:	00 e0       	ldi	r16, 0x00	; 0
     cb6:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++) {
				uint16_t eeAddrCfg0 = 0;
				uint16_t eeAddrCfg1 = 0;
				uint16_t eeAddrCfg2 = 0;
				uint16_t eeAddrCfg3 = 0;
				switch (AppIndex) {
     cb8:	00 23       	and	r16, r16
     cba:	19 f0       	breq	.+6      	; 0xcc2 <Isb_App_Init+0x1ec>
     cbc:	01 30       	cpi	r16, 0x01	; 1
     cbe:	51 f4       	brne	.+20     	; 0xcd4 <Isb_App_Init+0x1fe>
     cc0:	12 c0       	rjmp	.+36     	; 0xce6 <Isb_App_Init+0x210>
     cc2:	41 e3       	ldi	r20, 0x31	; 49
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	62 e3       	ldi	r22, 0x32	; 50
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	a3 e3       	ldi	r26, 0x33	; 51
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	c4 e3       	ldi	r28, 0x34	; 52
     cd0:	d0 e0       	ldi	r29, 0x00	; 0
     cd2:	11 c0       	rjmp	.+34     	; 0xcf6 <Isb_App_Init+0x220>
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	c0 e0       	ldi	r28, 0x00	; 0
     ce2:	d0 e0       	ldi	r29, 0x00	; 0
     ce4:	08 c0       	rjmp	.+16     	; 0xcf6 <Isb_App_Init+0x220>
     ce6:	46 e4       	ldi	r20, 0x46	; 70
     ce8:	50 e0       	ldi	r21, 0x00	; 0
     cea:	67 e4       	ldi	r22, 0x47	; 71
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	a8 e4       	ldi	r26, 0x48	; 72
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	c9 e4       	ldi	r28, 0x49	; 73
     cf4:	d0 e0       	ldi	r29, 0x00	; 0
							eeAddrCfg2 = ISB_APP_DIGIN_15_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_15_EEADDR_CFG3;
							break;
					#endif /* ISB_APP_DIGIN_15 */
				}
				uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigIn_Ch_Array[AppIndex]);
     cf6:	f8 01       	movw	r30, r16
     cf8:	ec 57       	subi	r30, 0x7C	; 124
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	e4 91       	lpm	r30, Z+
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	ee 0f       	add	r30, r30
     d02:	ff 1f       	adc	r31, r31
     d04:	e8 59       	subi	r30, 0x98	; 152
     d06:	fe 4f       	sbci	r31, 0xFE	; 254
     d08:	80 81       	ld	r24, Z
     d0a:	80 ff       	sbrs	r24, 0
     d0c:	44 c0       	rjmp	.+136    	; 0xd96 <Isb_App_Init+0x2c0>
     d0e:	80 91 96 00 	lds	r24, 0x0096
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d16:	e1 99       	sbic	0x1c, 1	; 28
     d18:	fe cf       	rjmp	.-4      	; 0xd16 <Isb_App_Init+0x240>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     d1a:	42 0f       	add	r20, r18
     d1c:	53 1f       	adc	r21, r19
     d1e:	5f bb       	out	0x1f, r21	; 31
     d20:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
     d22:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     d24:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigIn[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg0);
     d26:	f7 01       	movw	r30, r14
     d28:	80 83       	st	Z, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d2a:	e1 99       	sbic	0x1c, 1	; 28
     d2c:	fe cf       	rjmp	.-4      	; 0xd2a <Isb_App_Init+0x254>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     d2e:	62 0f       	add	r22, r18
     d30:	73 1f       	adc	r23, r19
     d32:	7f bb       	out	0x1f, r23	; 31
     d34:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
     d36:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     d38:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigIn[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg1);
     d3a:	f7 01       	movw	r30, r14
     d3c:	81 83       	std	Z+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d3e:	e1 99       	sbic	0x1c, 1	; 28
     d40:	fe cf       	rjmp	.-4      	; 0xd3e <Isb_App_Init+0x268>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     d42:	a2 0f       	add	r26, r18
     d44:	b3 1f       	adc	r27, r19
     d46:	bf bb       	out	0x1f, r27	; 31
     d48:	ae bb       	out	0x1e, r26	; 30
#endif
    EECR |= (1 << EERE);
     d4a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     d4c:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigIn[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg2);
     d4e:	f7 01       	movw	r30, r14
     d50:	82 83       	std	Z+2, r24	; 0x02
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d52:	e1 99       	sbic	0x1c, 1	; 28
     d54:	fe cf       	rjmp	.-4      	; 0xd52 <Isb_App_Init+0x27c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     d56:	c2 0f       	add	r28, r18
     d58:	d3 1f       	adc	r29, r19
     d5a:	df bb       	out	0x1f, r29	; 31
     d5c:	ce bb       	out	0x1e, r28	; 30
#endif
    EECR |= (1 << EERE);
     d5e:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     d60:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigIn[AppIndex].Cfg3 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg3);
     d62:	f7 01       	movw	r30, r14
     d64:	83 83       	std	Z+3, r24	; 0x03
					uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigIn_Pin0_Array[AppIndex]);
     d66:	f8 01       	movw	r30, r16
     d68:	ea 57       	subi	r30, 0x7A	; 122
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	64 91       	lpm	r22, Z+
					uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
     d6e:	26 2f       	mov	r18, r22
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	c9 01       	movw	r24, r18
     d74:	88 73       	andi	r24, 0x38	; 56
     d76:	90 70       	andi	r25, 0x00	; 0
     d78:	33 e0       	ldi	r19, 0x03	; 3
     d7a:	95 95       	asr	r25
     d7c:	87 95       	ror	r24
     d7e:	3a 95       	dec	r19
     d80:	e1 f7       	brne	.-8      	; 0xd7a <Isb_App_Init+0x2a4>
					uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
					if (Port != 0) {
     d82:	88 23       	and	r24, r24
     d84:	41 f0       	breq	.+16     	; 0xd96 <Isb_App_Init+0x2c0>
					Isb_App_DigIn[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg1);
					Isb_App_DigIn[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg2);
					Isb_App_DigIn[AppIndex].Cfg3 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg3);
					uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigIn_Pin0_Array[AppIndex]);
					uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
					uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
     d86:	67 70       	andi	r22, 0x07	; 7
					if (Port != 0) {
						if ((Pin0 & PULLUP) == 0) {
     d88:	26 fd       	sbrc	r18, 6
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <Isb_App_Init+0x2ba>
							Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT);
     d8c:	40 e0       	ldi	r20, 0x00	; 0
     d8e:	01 c0       	rjmp	.+2      	; 0xd92 <Isb_App_Init+0x2bc>
						}
						else {
							Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT_PULLUP);
     d90:	42 e0       	ldi	r20, 0x02	; 2
     d92:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
     d96:	0f 5f       	subi	r16, 0xFF	; 255
     d98:	1f 4f       	sbci	r17, 0xFF	; 255
     d9a:	88 e0       	ldi	r24, 0x08	; 8
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	e8 0e       	add	r14, r24
     da0:	f9 1e       	adc	r15, r25
				}
			}
		#endif /* ISB_APP_DIGOUT_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++) {
     da2:	02 30       	cpi	r16, 0x02	; 2
     da4:	11 05       	cpc	r17, r1
     da6:	09 f0       	breq	.+2      	; 0xdaa <Isb_App_Init+0x2d4>
     da8:	87 cf       	rjmp	.-242    	; 0xcb8 <Isb_App_Init+0x1e2>
//						break;
//				}
//			}
		#endif /* ISB_APP_LCD_MAX */

	}
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	df 90       	pop	r13
     db8:	cf 90       	pop	r12
     dba:	bf 90       	pop	r11
     dbc:	af 90       	pop	r10
     dbe:	9f 90       	pop	r9
     dc0:	8f 90       	pop	r8
     dc2:	7f 90       	pop	r7
     dc4:	6f 90       	pop	r6
     dc6:	5f 90       	pop	r5
     dc8:	4f 90       	pop	r4
     dca:	3f 90       	pop	r3
     dcc:	2f 90       	pop	r2
     dce:	08 95       	ret

00000dd0 <Isb_App_Convert_None>:



	void Isb_App_Convert_None(uint16_t Value, void *Destination) {
     dd0:	fb 01       	movw	r30, r22
		*(uint16_t *)Destination = Value;
     dd2:	91 83       	std	Z+1, r25	; 0x01
     dd4:	80 83       	st	Z, r24
	}
     dd6:	08 95       	ret

00000dd8 <Isb_App_Convert_PT100>:



	void Isb_App_Convert_PT100(uint16_t Value, void *Destination) {
     dd8:	fb 01       	movw	r30, r22
		Value = Value << 1;
		*(uint16_t *)Destination = Value;
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	91 83       	std	Z+1, r25	; 0x01
     de0:	80 83       	st	Z, r24
	}
     de2:	08 95       	ret

00000de4 <Isb_App_Exec>:



	void Isb_App_Exec(void) {
     de4:	3f 92       	push	r3
     de6:	4f 92       	push	r4
     de8:	5f 92       	push	r5
     dea:	6f 92       	push	r6
     dec:	7f 92       	push	r7
     dee:	8f 92       	push	r8
     df0:	9f 92       	push	r9
     df2:	af 92       	push	r10
     df4:	bf 92       	push	r11
     df6:	cf 92       	push	r12
     df8:	df 92       	push	r13
     dfa:	ef 92       	push	r14
     dfc:	ff 92       	push	r15
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29

		#if defined(ISB_APP_DIGOUT_MAX)
			if (bit_is_set(Isb_App_DigOut_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
     e06:	80 91 9a 00 	lds	r24, 0x009A
     e0a:	80 ff       	sbrs	r24, 0
     e0c:	b9 c1       	rjmp	.+882    	; 0x1180 <Isb_App_Exec+0x39c>
     e0e:	c4 e3       	ldi	r28, 0x34	; 52
     e10:	d1 e0       	ldi	r29, 0x01	; 1
     e12:	7e 01       	movw	r14, r28
     e14:	00 e0       	ldi	r16, 0x00	; 0
     e16:	10 e0       	ldi	r17, 0x00	; 0



						// Rückmeldungsfunktion
						Value = 0;
						if ((Isb_App_DigOut[AppIndex].Value == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
     e18:	7a e1       	ldi	r23, 0x1A	; 26
     e1a:	a7 2e       	mov	r10, r23
     e1c:	b1 2c       	mov	r11, r1
						if ((Isb_App_DigOut[AppIndex].Value == 0) & (bit_is_set(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
							Value = 1;
						}
						if (Isb_Obj_1Bit[Obj_1Bit_3].Value != Value) {
							Isb_Obj_1Bit[Obj_1Bit_3].Value = Value;
							Isb_Obj_1Bit[Obj_1Bit_3].IsChanged = TRUE;
     e1e:	dd 24       	eor	r13, r13
     e20:	d3 94       	inc	r13



						// Rückmeldungsfunktion
						Value = 0;
						if ((Isb_App_DigOut[AppIndex].Value == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
     e22:	61 e0       	ldi	r22, 0x01	; 1
     e24:	46 2e       	mov	r4, r22
     e26:	51 2c       	mov	r5, r1
											Isb_App_DigOut[AppIndex].TimeOffCount--;
											Value = 1;
										}
									}
									else {
										Isb_App_DigOut[AppIndex].TimeOffCount = (Isb_App_DigOut[AppIndex].Cfg5 + Isb_App_DigOut[AppIndex].Cfg6 * 60 + Isb_App_DigOut[AppIndex].Cfg7 * 60 * 60) * 1000;
     e28:	50 e1       	ldi	r21, 0x10	; 16
     e2a:	65 2e       	mov	r6, r21
     e2c:	5e e0       	ldi	r21, 0x0E	; 14
     e2e:	75 2e       	mov	r7, r21
     e30:	4c e3       	ldi	r20, 0x3C	; 60
     e32:	34 2e       	mov	r3, r20
     e34:	38 ee       	ldi	r19, 0xE8	; 232
     e36:	83 2e       	mov	r8, r19
     e38:	33 e0       	ldi	r19, 0x03	; 3
     e3a:	93 2e       	mov	r9, r19
	void Isb_App_Exec(void) {

		#if defined(ISB_APP_DIGOUT_MAX)
			if (bit_is_set(Isb_App_DigOut_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGOUT_MAX; AppIndex++) {
					uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigOut_Ch_Array[AppIndex]);
     e3c:	f8 01       	movw	r30, r16
     e3e:	e8 58       	subi	r30, 0x88	; 136
     e40:	ff 4f       	sbci	r31, 0xFF	; 255
     e42:	e4 91       	lpm	r30, Z+
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	ee 0f       	add	r30, r30
     e48:	ff 1f       	adc	r31, r31
     e4a:	e8 59       	subi	r30, 0x98	; 152
     e4c:	fe 4f       	sbci	r31, 0xFE	; 254
     e4e:	80 81       	ld	r24, Z
     e50:	80 ff       	sbrs	r24, 0
     e52:	86 c1       	rjmp	.+780    	; 0x1160 <Isb_App_Exec+0x37c>
						uint8_t Obj_1Bit_0 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_1Bit_0_Array[AppIndex]);
     e54:	f8 01       	movw	r30, r16
     e56:	e6 58       	subi	r30, 0x86	; 134
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	24 91       	lpm	r18, Z+
						uint8_t Obj_1Bit_1 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_1Bit_1_Array[AppIndex]);
     e5c:	f8 01       	movw	r30, r16
     e5e:	e4 58       	subi	r30, 0x84	; 132
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	34 91       	lpm	r19, Z+
						uint8_t Obj_1Bit_2 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_1Bit_2_Array[AppIndex]);
						uint8_t Obj_1Bit_3 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_1Bit_3_Array[AppIndex]);
     e64:	f8 01       	movw	r30, r16
     e66:	e0 58       	subi	r30, 0x80	; 128
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	c4 90       	lpm	r12, Z+
						// Verknüpfungsfunktion
						switch (Isb_App_DigOut[AppIndex].Cfg0 & ISB_APP_DIGOUT_CFG0_LOGIC_MODE_MASK) {
     e6c:	f7 01       	movw	r30, r14
     e6e:	80 81       	ld	r24, Z
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	80 76       	andi	r24, 0x60	; 96
     e74:	90 70       	andi	r25, 0x00	; 0
     e76:	80 32       	cpi	r24, 0x20	; 32
     e78:	91 05       	cpc	r25, r1
     e7a:	39 f0       	breq	.+14     	; 0xe8a <Isb_App_Exec+0xa6>
     e7c:	a2 2f       	mov	r26, r18
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	80 34       	cpi	r24, 0x40	; 64
     e82:	91 05       	cpc	r25, r1
     e84:	09 f0       	breq	.+2      	; 0xe88 <Isb_App_Exec+0xa4>
     e86:	52 c0       	rjmp	.+164    	; 0xf2c <Isb_App_Exec+0x148>
     e88:	23 c0       	rjmp	.+70     	; 0xed0 <Isb_App_Exec+0xec>
							case ISB_APP_DIGOUT_CFG0_LOGIC_MODE_AND:
								if ((Isb_Obj_1Bit[Obj_1Bit_0].IsChanged == TRUE) | (Isb_Obj_1Bit[Obj_1Bit_1].IsChanged == TRUE)) {
     e8a:	a2 2f       	mov	r26, r18
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	23 2f       	mov	r18, r19
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	fd 01       	movw	r30, r26
     e94:	ee 0f       	add	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	ee 0f       	add	r30, r30
     e9a:	ff 1f       	adc	r31, r31
     e9c:	e4 50       	subi	r30, 0x04	; 4
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	83 81       	ldd	r24, Z+3	; 0x03
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	59 f0       	breq	.+22     	; 0xebc <Isb_App_Exec+0xd8>
     ea6:	f9 01       	movw	r30, r18
     ea8:	ee 0f       	add	r30, r30
     eaa:	ff 1f       	adc	r31, r31
     eac:	ee 0f       	add	r30, r30
     eae:	ff 1f       	adc	r31, r31
     eb0:	e4 50       	subi	r30, 0x04	; 4
     eb2:	ff 4f       	sbci	r31, 0xFF	; 255
     eb4:	83 81       	ldd	r24, Z+3	; 0x03
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	09 f0       	breq	.+2      	; 0xebc <Isb_App_Exec+0xd8>
     eba:	4b c0       	rjmp	.+150    	; 0xf52 <Isb_App_Exec+0x16e>
									if ((Isb_Obj_1Bit[Obj_1Bit_0].Value != 0) & (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0)) {
     ebc:	aa 0f       	add	r26, r26
     ebe:	bb 1f       	adc	r27, r27
     ec0:	aa 0f       	add	r26, r26
     ec2:	bb 1f       	adc	r27, r27
     ec4:	a2 50       	subi	r26, 0x02	; 2
     ec6:	bf 4f       	sbci	r27, 0xFF	; 255
     ec8:	8c 91       	ld	r24, X
     eca:	88 23       	and	r24, r24
     ecc:	69 f1       	breq	.+90     	; 0xf28 <Isb_App_Exec+0x144>
     ece:	1f c0       	rjmp	.+62     	; 0xf0e <Isb_App_Exec+0x12a>
										Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
									}
								}
								break;
							case ISB_APP_DIGOUT_CFG0_LOGIC_MODE_OR:
								if ((Isb_Obj_1Bit[Obj_1Bit_0].IsChanged == TRUE) | (Isb_Obj_1Bit[Obj_1Bit_1].IsChanged == TRUE)) {
     ed0:	23 2f       	mov	r18, r19
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	fd 01       	movw	r30, r26
     ed6:	ee 0f       	add	r30, r30
     ed8:	ff 1f       	adc	r31, r31
     eda:	ee 0f       	add	r30, r30
     edc:	ff 1f       	adc	r31, r31
     ede:	e4 50       	subi	r30, 0x04	; 4
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	83 81       	ldd	r24, Z+3	; 0x03
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	51 f0       	breq	.+20     	; 0xefc <Isb_App_Exec+0x118>
     ee8:	f9 01       	movw	r30, r18
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	ee 0f       	add	r30, r30
     ef0:	ff 1f       	adc	r31, r31
     ef2:	e4 50       	subi	r30, 0x04	; 4
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	83 81       	ldd	r24, Z+3	; 0x03
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	59 f5       	brne	.+86     	; 0xf52 <Isb_App_Exec+0x16e>
									if ((Isb_Obj_1Bit[Obj_1Bit_0].Value != 0) | (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0)) {
     efc:	aa 0f       	add	r26, r26
     efe:	bb 1f       	adc	r27, r27
     f00:	aa 0f       	add	r26, r26
     f02:	bb 1f       	adc	r27, r27
     f04:	a2 50       	subi	r26, 0x02	; 2
     f06:	bf 4f       	sbci	r27, 0xFF	; 255
     f08:	8c 91       	ld	r24, X
     f0a:	88 23       	and	r24, r24
     f0c:	51 f4       	brne	.+20     	; 0xf22 <Isb_App_Exec+0x13e>
     f0e:	22 0f       	add	r18, r18
     f10:	33 1f       	adc	r19, r19
     f12:	22 0f       	add	r18, r18
     f14:	33 1f       	adc	r19, r19
     f16:	22 50       	subi	r18, 0x02	; 2
     f18:	3f 4f       	sbci	r19, 0xFF	; 255
     f1a:	f9 01       	movw	r30, r18
     f1c:	80 81       	ld	r24, Z
     f1e:	88 23       	and	r24, r24
     f20:	19 f0       	breq	.+6      	; 0xf28 <Isb_App_Exec+0x144>
										Isb_App_DigOut[AppIndex].LogicValue = 1;
     f22:	da 8a       	std	Y+18, r13	; 0x12
										Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
     f24:	db 8a       	std	Y+19, r13	; 0x13
     f26:	15 c0       	rjmp	.+42     	; 0xf52 <Isb_App_Exec+0x16e>
									}
									else {
										Isb_App_DigOut[AppIndex].LogicValue = 0;
     f28:	1a 8a       	std	Y+18, r1	; 0x12
     f2a:	fc cf       	rjmp	.-8      	; 0xf24 <Isb_App_Exec+0x140>
										Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
									}
								}
								break;
							default:
								if (Isb_Obj_1Bit[Obj_1Bit_0].IsChanged == TRUE) {
     f2c:	fd 01       	movw	r30, r26
     f2e:	ee 0f       	add	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	ee 0f       	add	r30, r30
     f34:	ff 1f       	adc	r31, r31
     f36:	e4 50       	subi	r30, 0x04	; 4
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	93 81       	ldd	r25, Z+3	; 0x03
     f3c:	91 30       	cpi	r25, 0x01	; 1
     f3e:	49 f4       	brne	.+18     	; 0xf52 <Isb_App_Exec+0x16e>
									Isb_App_DigOut[AppIndex].LogicValue = Isb_Obj_1Bit[Obj_1Bit_0].Value;
     f40:	aa 0f       	add	r26, r26
     f42:	bb 1f       	adc	r27, r27
     f44:	aa 0f       	add	r26, r26
     f46:	bb 1f       	adc	r27, r27
     f48:	a2 50       	subi	r26, 0x02	; 2
     f4a:	bf 4f       	sbci	r27, 0xFF	; 255
     f4c:	8c 91       	ld	r24, X
     f4e:	8a 8b       	std	Y+18, r24	; 0x12
									Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
     f50:	9b 8b       	std	Y+19, r25	; 0x13
								}						
								break;
						}
						// Zeitfunktion
						uint8_t Value = Isb_App_DigOut[AppIndex].LogicValue;
     f52:	4a 89       	ldd	r20, Y+18	; 0x12
						if ((Isb_App_DigOut[AppIndex].Cfg1 & ISB_APP_DIGOUT_CFG1_TIME_MODE_MASK) != ISB_APP_DIGOUT_CFG1_TIME_MODE_NONE) {
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	83 70       	andi	r24, 0x03	; 3
     f5a:	90 70       	andi	r25, 0x00	; 0
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	09 f4       	brne	.+2      	; 0xf62 <Isb_App_Exec+0x17e>
     f60:	7a c0       	rjmp	.+244    	; 0x1056 <Isb_App_Exec+0x272>
							if ((Isb_App_DigOut[AppIndex].Cfg1 & ISB_APP_DIGOUT_CFG1_TIME_MODE_MASK) == ISB_APP_DIGOUT_CFG1_TIME_MODE_DELAY) {
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	09 f0       	breq	.+2      	; 0xf68 <Isb_App_Exec+0x184>
     f66:	77 c0       	rjmp	.+238    	; 0x1056 <Isb_App_Exec+0x272>
								if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg1, ISB_APP_DIGOUT_CFG1_TIME_POWERUPDELAY_ENABLED)) {
     f68:	0a 9d       	mul	r16, r10
     f6a:	f0 01       	movw	r30, r0
     f6c:	0b 9d       	mul	r16, r11
     f6e:	f0 0d       	add	r31, r0
     f70:	1a 9d       	mul	r17, r10
     f72:	f0 0d       	add	r31, r0
     f74:	11 24       	eor	r1, r1
     f76:	eb 5c       	subi	r30, 0xCB	; 203
     f78:	fe 4f       	sbci	r31, 0xFE	; 254
     f7a:	80 81       	ld	r24, Z
     f7c:	82 ff       	sbrs	r24, 2
     f7e:	34 c0       	rjmp	.+104    	; 0xfe8 <Isb_App_Exec+0x204>
									if (Value == 1) {
     f80:	41 30       	cpi	r20, 0x01	; 1
     f82:	89 f4       	brne	.+34     	; 0xfa6 <Isb_App_Exec+0x1c2>
										if (Isb_App_DigOut[AppIndex].TimeOnCount != 0) {
     f84:	8a 85       	ldd	r24, Y+10	; 0x0a
     f86:	9b 85       	ldd	r25, Y+11	; 0x0b
     f88:	ac 85       	ldd	r26, Y+12	; 0x0c
     f8a:	bd 85       	ldd	r27, Y+13	; 0x0d
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	a1 05       	cpc	r26, r1
     f90:	b1 05       	cpc	r27, r1
     f92:	51 f1       	breq	.+84     	; 0xfe8 <Isb_App_Exec+0x204>
											Isb_App_DigOut[AppIndex].TimeOnCount--;
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	a1 09       	sbc	r26, r1
     f98:	b1 09       	sbc	r27, r1
     f9a:	8a 87       	std	Y+10, r24	; 0x0a
     f9c:	9b 87       	std	Y+11, r25	; 0x0b
     f9e:	ac 87       	std	Y+12, r26	; 0x0c
     fa0:	bd 87       	std	Y+13, r27	; 0x0d
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	21 c0       	rjmp	.+66     	; 0xfe8 <Isb_App_Exec+0x204>
											Value = 0;
										}
									}
									else {
										Isb_App_DigOut[AppIndex].TimeOnCount = (Isb_App_DigOut[AppIndex].Cfg2 + Isb_App_DigOut[AppIndex].Cfg3 * 60 + Isb_App_DigOut[AppIndex].Cfg4 * 60 * 60) * 1000;
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	86 9d       	mul	r24, r6
     fac:	90 01       	movw	r18, r0
     fae:	87 9d       	mul	r24, r7
     fb0:	30 0d       	add	r19, r0
     fb2:	96 9d       	mul	r25, r6
     fb4:	30 0d       	add	r19, r0
     fb6:	11 24       	eor	r1, r1
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	83 9d       	mul	r24, r3
     fbc:	c0 01       	movw	r24, r0
     fbe:	11 24       	eor	r1, r1
     fc0:	28 0f       	add	r18, r24
     fc2:	39 1f       	adc	r19, r25
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 0f       	add	r18, r24
     fc8:	31 1d       	adc	r19, r1
     fca:	28 9d       	mul	r18, r8
     fcc:	c0 01       	movw	r24, r0
     fce:	29 9d       	mul	r18, r9
     fd0:	90 0d       	add	r25, r0
     fd2:	38 9d       	mul	r19, r8
     fd4:	90 0d       	add	r25, r0
     fd6:	11 24       	eor	r1, r1
     fd8:	aa 27       	eor	r26, r26
     fda:	97 fd       	sbrc	r25, 7
     fdc:	a0 95       	com	r26
     fde:	ba 2f       	mov	r27, r26
     fe0:	8a 87       	std	Y+10, r24	; 0x0a
     fe2:	9b 87       	std	Y+11, r25	; 0x0b
     fe4:	ac 87       	std	Y+12, r26	; 0x0c
     fe6:	bd 87       	std	Y+13, r27	; 0x0d
									}
								}
								if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg1, ISB_APP_DIGOUT_CFG1_TIME_POWERDOWNDELAY_ENABLED)) {
     fe8:	80 81       	ld	r24, Z
     fea:	83 ff       	sbrs	r24, 3
     fec:	34 c0       	rjmp	.+104    	; 0x1056 <Isb_App_Exec+0x272>
									if (Value == 0) {
     fee:	44 23       	and	r20, r20
     ff0:	89 f4       	brne	.+34     	; 0x1014 <Isb_App_Exec+0x230>
										if (Isb_App_DigOut[AppIndex].TimeOffCount != 0) {
     ff2:	8e 85       	ldd	r24, Y+14	; 0x0e
     ff4:	9f 85       	ldd	r25, Y+15	; 0x0f
     ff6:	a8 89       	ldd	r26, Y+16	; 0x10
     ff8:	b9 89       	ldd	r27, Y+17	; 0x11
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	a1 05       	cpc	r26, r1
     ffe:	b1 05       	cpc	r27, r1
    1000:	51 f1       	breq	.+84     	; 0x1056 <Isb_App_Exec+0x272>
											Isb_App_DigOut[AppIndex].TimeOffCount--;
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	a1 09       	sbc	r26, r1
    1006:	b1 09       	sbc	r27, r1
    1008:	8e 87       	std	Y+14, r24	; 0x0e
    100a:	9f 87       	std	Y+15, r25	; 0x0f
    100c:	a8 8b       	std	Y+16, r26	; 0x10
    100e:	b9 8b       	std	Y+17, r27	; 0x11
    1010:	41 e0       	ldi	r20, 0x01	; 1
    1012:	21 c0       	rjmp	.+66     	; 0x1056 <Isb_App_Exec+0x272>
											Value = 1;
										}
									}
									else {
										Isb_App_DigOut[AppIndex].TimeOffCount = (Isb_App_DigOut[AppIndex].Cfg5 + Isb_App_DigOut[AppIndex].Cfg6 * 60 + Isb_App_DigOut[AppIndex].Cfg7 * 60 * 60) * 1000;
    1014:	8f 81       	ldd	r24, Y+7	; 0x07
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	86 9d       	mul	r24, r6
    101a:	90 01       	movw	r18, r0
    101c:	87 9d       	mul	r24, r7
    101e:	30 0d       	add	r19, r0
    1020:	96 9d       	mul	r25, r6
    1022:	30 0d       	add	r19, r0
    1024:	11 24       	eor	r1, r1
    1026:	8e 81       	ldd	r24, Y+6	; 0x06
    1028:	83 9d       	mul	r24, r3
    102a:	c0 01       	movw	r24, r0
    102c:	11 24       	eor	r1, r1
    102e:	28 0f       	add	r18, r24
    1030:	39 1f       	adc	r19, r25
    1032:	8d 81       	ldd	r24, Y+5	; 0x05
    1034:	28 0f       	add	r18, r24
    1036:	31 1d       	adc	r19, r1
    1038:	28 9d       	mul	r18, r8
    103a:	c0 01       	movw	r24, r0
    103c:	29 9d       	mul	r18, r9
    103e:	90 0d       	add	r25, r0
    1040:	38 9d       	mul	r19, r8
    1042:	90 0d       	add	r25, r0
    1044:	11 24       	eor	r1, r1
    1046:	aa 27       	eor	r26, r26
    1048:	97 fd       	sbrc	r25, 7
    104a:	a0 95       	com	r26
    104c:	ba 2f       	mov	r27, r26
    104e:	8e 87       	std	Y+14, r24	; 0x0e
    1050:	9f 87       	std	Y+15, r25	; 0x0f
    1052:	a8 8b       	std	Y+16, r26	; 0x10
    1054:	b9 8b       	std	Y+17, r27	; 0x11
									Isb_App_DigOut[AppIndex].TimeOffCount = (Isb_App_DigOut[AppIndex].Cfg5 + Isb_App_DigOut[AppIndex].Cfg6 * 60 + Isb_App_DigOut[AppIndex].Cfg7 * 60 * 60) * 1000;
								}
							}
*/
						}
						if (Isb_App_DigOut[AppIndex].TimeValue != Value) {
    1056:	8c 89       	ldd	r24, Y+20	; 0x14
    1058:	84 17       	cp	r24, r20
    105a:	11 f0       	breq	.+4      	; 0x1060 <Isb_App_Exec+0x27c>
							Isb_App_DigOut[AppIndex].TimeValue = Value;
    105c:	4c 8b       	std	Y+20, r20	; 0x14
							Isb_App_DigOut[AppIndex].TimeIsChanged = TRUE;
    105e:	dd 8a       	std	Y+21, r13	; 0x15
//									}
//								}
//							}
//						}
//						else {
							if (Isb_App_DigOut[AppIndex].TimeIsChanged == TRUE) {
    1060:	9d 89       	ldd	r25, Y+21	; 0x15
    1062:	91 30       	cpi	r25, 0x01	; 1
    1064:	19 f4       	brne	.+6      	; 0x106c <Isb_App_Exec+0x288>
								Isb_App_DigOut[AppIndex].SpecialValue = Isb_App_DigOut[AppIndex].TimeValue;
    1066:	8c 89       	ldd	r24, Y+20	; 0x14
    1068:	8e 8b       	std	Y+22, r24	; 0x16
								Isb_App_DigOut[AppIndex].SpecialIsChanged = TRUE;
    106a:	9f 8b       	std	Y+23, r25	; 0x17
//								}
//
//							}
//						}
//						else {
							if (Isb_App_DigOut[AppIndex].SpecialIsChanged == TRUE) {
    106c:	9f 89       	ldd	r25, Y+23	; 0x17
    106e:	91 30       	cpi	r25, 0x01	; 1
    1070:	19 f4       	brne	.+6      	; 0x1078 <Isb_App_Exec+0x294>
								Isb_App_DigOut[AppIndex].Value = Isb_App_DigOut[AppIndex].SpecialValue;
    1072:	8e 89       	ldd	r24, Y+22	; 0x16
    1074:	88 8f       	std	Y+24, r24	; 0x18
								Isb_App_DigOut[AppIndex].IsChanged = TRUE;
    1076:	99 8f       	std	Y+25, r25	; 0x19
							}						
//						}
						// Ausgang
// -> TODO:
						if (Isb_App_DigOut[AppIndex].IsChanged == TRUE) {
    1078:	89 8d       	ldd	r24, Y+25	; 0x19
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	09 f0       	breq	.+2      	; 0x1080 <Isb_App_Exec+0x29c>
    107e:	43 c0       	rjmp	.+134    	; 0x1106 <Isb_App_Exec+0x322>
							uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigOut_Pin0_Array[AppIndex]);
    1080:	f8 01       	movw	r30, r16
    1082:	ee 57       	subi	r30, 0x7E	; 126
    1084:	ff 4f       	sbci	r31, 0xFF	; 255
    1086:	64 91       	lpm	r22, Z+
//							uint8_t Pin1 = pgm_read_byte(&pgmIsb_App_DigOut_Pin1_Array[AppIndex]);
							switch (Isb_App_DigOut[AppIndex].Cfg0 & ISB_APP_DIGOUT_CFG0_OPERATION_MASK) {
    1088:	f7 01       	movw	r30, r14
    108a:	80 81       	ld	r24, Z
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	83 70       	andi	r24, 0x03	; 3
    1090:	90 70       	andi	r25, 0x00	; 0
    1092:	89 2b       	or	r24, r25
    1094:	c1 f5       	brne	.+112    	; 0x1106 <Isb_App_Exec+0x322>
								case ISB_APP_DIGOUT_CFG0_OPERATION_STD:
									if (bit_is_set(Isb_App_DigOut[AppIndex].Value, 0)) {
    1096:	0a 9d       	mul	r16, r10
    1098:	a0 01       	movw	r20, r0
    109a:	0b 9d       	mul	r16, r11
    109c:	50 0d       	add	r21, r0
    109e:	1a 9d       	mul	r17, r10
    10a0:	50 0d       	add	r21, r0
    10a2:	11 24       	eor	r1, r1
    10a4:	fa 01       	movw	r30, r20
    10a6:	e4 5b       	subi	r30, 0xB4	; 180
    10a8:	fe 4f       	sbci	r31, 0xFE	; 254
    10aa:	80 81       	ld	r24, Z
    10ac:	26 2f       	mov	r18, r22
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	80 ff       	sbrs	r24, 0
    10b2:	11 c0       	rjmp	.+34     	; 0x10d6 <Isb_App_Exec+0x2f2>
										uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
    10b4:	28 73       	andi	r18, 0x38	; 56
    10b6:	30 70       	andi	r19, 0x00	; 0
    10b8:	e3 e0       	ldi	r30, 0x03	; 3
    10ba:	35 95       	asr	r19
    10bc:	27 95       	ror	r18
    10be:	ea 95       	dec	r30
    10c0:	e1 f7       	brne	.-8      	; 0x10ba <Isb_App_Exec+0x2d6>
										uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
										if (Port != 0) {
    10c2:	22 23       	and	r18, r18
    10c4:	f9 f0       	breq	.+62     	; 0x1104 <Isb_App_Exec+0x320>
//							uint8_t Pin1 = pgm_read_byte(&pgmIsb_App_DigOut_Pin1_Array[AppIndex]);
							switch (Isb_App_DigOut[AppIndex].Cfg0 & ISB_APP_DIGOUT_CFG0_OPERATION_MASK) {
								case ISB_APP_DIGOUT_CFG0_OPERATION_STD:
									if (bit_is_set(Isb_App_DigOut[AppIndex].Value, 0)) {
										uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
										uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
    10c6:	67 70       	andi	r22, 0x07	; 7
										if (Port != 0) {
											if (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN0_INVERTED)) {
    10c8:	fa 01       	movw	r30, r20
    10ca:	ec 5c       	subi	r30, 0xCC	; 204
    10cc:	fe 4f       	sbci	r31, 0xFE	; 254
    10ce:	80 81       	ld	r24, Z
    10d0:	82 fd       	sbrc	r24, 2
    10d2:	11 c0       	rjmp	.+34     	; 0x10f6 <Isb_App_Exec+0x312>
    10d4:	13 c0       	rjmp	.+38     	; 0x10fc <Isb_App_Exec+0x318>
												Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_HIGH);
											}
										}
									}
									else {
										uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
    10d6:	28 73       	andi	r18, 0x38	; 56
    10d8:	30 70       	andi	r19, 0x00	; 0
    10da:	73 e0       	ldi	r23, 0x03	; 3
    10dc:	35 95       	asr	r19
    10de:	27 95       	ror	r18
    10e0:	7a 95       	dec	r23
    10e2:	e1 f7       	brne	.-8      	; 0x10dc <Isb_App_Exec+0x2f8>
										uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
										if (Port != 0) {
    10e4:	22 23       	and	r18, r18
    10e6:	71 f0       	breq	.+28     	; 0x1104 <Isb_App_Exec+0x320>
											}
										}
									}
									else {
										uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
										uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
    10e8:	67 70       	andi	r22, 0x07	; 7
										if (Port != 0) {
											if (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN0_INVERTED)) {
    10ea:	fa 01       	movw	r30, r20
    10ec:	ec 5c       	subi	r30, 0xCC	; 204
    10ee:	fe 4f       	sbci	r31, 0xFE	; 254
    10f0:	80 81       	ld	r24, Z
    10f2:	82 fd       	sbrc	r24, 2
    10f4:	03 c0       	rjmp	.+6      	; 0x10fc <Isb_App_Exec+0x318>
												Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_HIGH);
    10f6:	82 2f       	mov	r24, r18
    10f8:	43 e0       	ldi	r20, 0x03	; 3
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <Isb_App_Exec+0x31c>
											}
											else {
												Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_LOW);
    10fc:	82 2f       	mov	r24, r18
    10fe:	41 e0       	ldi	r20, 0x01	; 1
    1100:	0e 94 c3 00 	call	0x186	; 0x186 <Lib_Pin_Set>
											}
										}
									}
									Isb_App_DigOut[AppIndex].IsChanged = FALSE;
    1104:	19 8e       	std	Y+25, r1	; 0x19



						// Rückmeldungsfunktion
						Value = 0;
						if ((Isb_App_DigOut[AppIndex].Value == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
    1106:	98 8d       	ldd	r25, Y+24	; 0x18
    1108:	0a 9d       	mul	r16, r10
    110a:	f0 01       	movw	r30, r0
    110c:	0b 9d       	mul	r16, r11
    110e:	f0 0d       	add	r31, r0
    1110:	1a 9d       	mul	r17, r10
    1112:	f0 0d       	add	r31, r0
    1114:	11 24       	eor	r1, r1
    1116:	e3 5c       	subi	r30, 0xC3	; 195
    1118:	fe 4f       	sbci	r31, 0xFE	; 254
    111a:	20 81       	ld	r18, Z
							Value = 1;
						}
						if ((Isb_App_DigOut[AppIndex].Value == 0) & (bit_is_set(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
    111c:	e0 81       	ld	r30, Z
    111e:	99 23       	and	r25, r25
    1120:	21 f4       	brne	.+8      	; 0x112a <Isb_App_Exec+0x346>
    1122:	e0 ff       	sbrs	r30, 0
    1124:	02 c0       	rjmp	.+4      	; 0x112a <Isb_App_Exec+0x346>
    1126:	91 e0       	ldi	r25, 0x01	; 1
    1128:	07 c0       	rjmp	.+14     	; 0x1138 <Isb_App_Exec+0x354>



						// Rückmeldungsfunktion
						Value = 0;
						if ((Isb_App_DigOut[AppIndex].Value == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	91 30       	cpi	r25, 0x01	; 1
    112e:	09 f4       	brne	.+2      	; 0x1132 <Isb_App_Exec+0x34e>
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	92 2f       	mov	r25, r18
    1134:	94 25       	eor	r25, r4
    1136:	98 23       	and	r25, r24
							Value = 1;
						}
						if ((Isb_App_DigOut[AppIndex].Value == 0) & (bit_is_set(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
							Value = 1;
						}
						if (Isb_Obj_1Bit[Obj_1Bit_3].Value != Value) {
    1138:	ec 2d       	mov	r30, r12
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	df 01       	movw	r26, r30
    113e:	aa 0f       	add	r26, r26
    1140:	bb 1f       	adc	r27, r27
    1142:	aa 0f       	add	r26, r26
    1144:	bb 1f       	adc	r27, r27
    1146:	a2 50       	subi	r26, 0x02	; 2
    1148:	bf 4f       	sbci	r27, 0xFF	; 255
    114a:	8c 91       	ld	r24, X
    114c:	89 17       	cp	r24, r25
    114e:	41 f0       	breq	.+16     	; 0x1160 <Isb_App_Exec+0x37c>
							Isb_Obj_1Bit[Obj_1Bit_3].Value = Value;
    1150:	9c 93       	st	X, r25
							Isb_Obj_1Bit[Obj_1Bit_3].IsChanged = TRUE;
    1152:	ee 0f       	add	r30, r30
    1154:	ff 1f       	adc	r31, r31
    1156:	ee 0f       	add	r30, r30
    1158:	ff 1f       	adc	r31, r31
    115a:	e4 50       	subi	r30, 0x04	; 4
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	d3 82       	std	Z+3, r13	; 0x03
    1160:	0f 5f       	subi	r16, 0xFF	; 255
    1162:	1f 4f       	sbci	r17, 0xFF	; 255
    1164:	6a 96       	adiw	r28, 0x1a	; 26
    1166:	8a e1       	ldi	r24, 0x1A	; 26
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	e8 0e       	add	r14, r24
    116c:	f9 1e       	adc	r15, r25

	void Isb_App_Exec(void) {

		#if defined(ISB_APP_DIGOUT_MAX)
			if (bit_is_set(Isb_App_DigOut_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGOUT_MAX; AppIndex++) {
    116e:	02 30       	cpi	r16, 0x02	; 2
    1170:	11 05       	cpc	r17, r1
    1172:	09 f0       	breq	.+2      	; 0x1176 <Isb_App_Exec+0x392>
    1174:	63 ce       	rjmp	.-826    	; 0xe3c <Isb_App_Exec+0x58>
							Isb_Obj_1Bit[Obj_1Bit_3].Value = Value;
							Isb_Obj_1Bit[Obj_1Bit_3].IsChanged = TRUE;
						}
					}
				}
				Isb_App_DigOut_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    1176:	80 91 9a 00 	lds	r24, 0x009A
    117a:	8e 7f       	andi	r24, 0xFE	; 254
    117c:	80 93 9a 00 	sts	0x009A, r24
			}
		#endif /* ISB_APP_DIGOUT_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			if (bit_is_set(Isb_App_DigIn_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
    1180:	80 91 9f 00 	lds	r24, 0x009F
    1184:	80 ff       	sbrs	r24, 0
    1186:	68 c3       	rjmp	.+1744   	; 0x1858 <Isb_App_Exec+0xa74>
    1188:	cb ea       	ldi	r28, 0xAB	; 171
    118a:	d0 e0       	ldi	r29, 0x00	; 0
    118c:	00 e0       	ldi	r16, 0x00	; 0
    118e:	10 e0       	ldi	r17, 0x00	; 0
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1190:	61 e0       	ldi	r22, 0x01	; 1
								if (Isb_App_DigIn[AppIndex].CountHigh == 40) {
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHLONG);
								}
								// Event "High Repeat"
								if (Isb_App_DigIn[AppIndex].CountHigh == 100) {
									Isb_App_DigIn[AppIndex].CountHigh = 90;
    1192:	9a e5       	ldi	r25, 0x5A	; 90
    1194:	e9 2e       	mov	r14, r25
		#endif /* ISB_APP_DIGOUT_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			if (bit_is_set(Isb_App_DigIn_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++) {
					uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigIn_Ch_Array[AppIndex]);
    1196:	f8 01       	movw	r30, r16
    1198:	ec 57       	subi	r30, 0x7C	; 124
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	e4 91       	lpm	r30, Z+
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	ee 0f       	add	r30, r30
    11a2:	ff 1f       	adc	r31, r31
    11a4:	e8 59       	subi	r30, 0x98	; 152
    11a6:	fe 4f       	sbci	r31, 0xFE	; 254
    11a8:	80 81       	ld	r24, Z
    11aa:	80 ff       	sbrs	r24, 0
    11ac:	49 c3       	rjmp	.+1682   	; 0x1840 <Isb_App_Exec+0xa5c>
						uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigIn_Pin0_Array[AppIndex]);
    11ae:	f8 01       	movw	r30, r16
    11b0:	ea 57       	subi	r30, 0x7A	; 122
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	24 91       	lpm	r18, Z+
//						uint8_t Obj_1Bit_0 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_1Bit_0_Array[AppIndex]);
						uint8_t Obj_1Bit_1 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_1Bit_1_Array[AppIndex]);
    11b6:	f8 01       	movw	r30, r16
    11b8:	e8 57       	subi	r30, 0x78	; 120
    11ba:	ff 4f       	sbci	r31, 0xFF	; 255
    11bc:	74 91       	lpm	r23, Z+
						uint8_t Obj_1Bit_2 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_1Bit_2_Array[AppIndex]);
    11be:	f8 01       	movw	r30, r16
    11c0:	e6 57       	subi	r30, 0x76	; 118
    11c2:	ff 4f       	sbci	r31, 0xFF	; 255
    11c4:	f4 90       	lpm	r15, Z+
//						if (Isb_Obj_1Bit[Obj_1Bit_0].Value == 0) {



// Pin einlesen
							switch (Isb_App_DigIn[AppIndex].Cfg0 & ISB_APP_DIGIN_CFG0_MODE_MASK) {
    11c6:	88 81       	ld	r24, Y
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	83 70       	andi	r24, 0x03	; 3
    11cc:	90 70       	andi	r25, 0x00	; 0
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	91 05       	cpc	r25, r1
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <Isb_App_Exec+0x3f2>
    11d4:	44 c0       	rjmp	.+136    	; 0x125e <Isb_App_Exec+0x47a>
    11d6:	82 30       	cpi	r24, 0x02	; 2
    11d8:	91 05       	cpc	r25, r1
    11da:	09 f4       	brne	.+2      	; 0x11de <Isb_App_Exec+0x3fa>
    11dc:	40 c0       	rjmp	.+128    	; 0x125e <Isb_App_Exec+0x47a>
    11de:	89 2b       	or	r24, r25
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <Isb_App_Exec+0x400>
    11e2:	3e c0       	rjmp	.+124    	; 0x1260 <Isb_App_Exec+0x47c>
								case ISB_APP_DIGIN_CFG0_MODE_STD:
									;
									uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
    11e4:	82 2f       	mov	r24, r18
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	88 73       	andi	r24, 0x38	; 56
    11ea:	90 70       	andi	r25, 0x00	; 0
    11ec:	b3 e0       	ldi	r27, 0x03	; 3
    11ee:	95 95       	asr	r25
    11f0:	87 95       	ror	r24
    11f2:	ba 95       	dec	r27
    11f4:	e1 f7       	brne	.-8      	; 0x11ee <Isb_App_Exec+0x40a>
    11f6:	98 2f       	mov	r25, r24
									uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
									if (Port != 0) {
    11f8:	88 23       	and	r24, r24
    11fa:	91 f1       	breq	.+100    	; 0x1260 <Isb_App_Exec+0x47c>
// Pin einlesen
							switch (Isb_App_DigIn[AppIndex].Cfg0 & ISB_APP_DIGIN_CFG0_MODE_MASK) {
								case ISB_APP_DIGIN_CFG0_MODE_STD:
									;
									uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
									uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
    11fc:	27 70       	andi	r18, 0x07	; 7
									if (Port != 0) {
										if (bit_is_clear(Isb_App_DigIn[AppIndex].Cfg0, ISB_APP_DIGIN_CFG0_PIN0_INVERTED)) {
    11fe:	f8 01       	movw	r30, r16
    1200:	a3 e0       	ldi	r26, 0x03	; 3
    1202:	ee 0f       	add	r30, r30
    1204:	ff 1f       	adc	r31, r31
    1206:	aa 95       	dec	r26
    1208:	e1 f7       	brne	.-8      	; 0x1202 <Isb_App_Exec+0x41e>
    120a:	e5 55       	subi	r30, 0x55	; 85
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	80 81       	ld	r24, Z
    1210:	e9 2f       	mov	r30, r25
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	82 fd       	sbrc	r24, 2
    1216:	11 c0       	rjmp	.+34     	; 0x123a <Isb_App_Exec+0x456>
	#endif



	uint8_t Lib_Pin_Get(const uint8_t aPort, const uint8_t aPin) {
		return (*(PINx[aPort]) >> aPin) & 1;
    1218:	ee 0f       	add	r30, r30
    121a:	ff 1f       	adc	r31, r31
    121c:	ec 57       	subi	r30, 0x7C	; 124
    121e:	ff 4f       	sbci	r31, 0xFF	; 255
    1220:	01 90       	ld	r0, Z+
    1222:	f0 81       	ld	r31, Z
    1224:	e0 2d       	mov	r30, r0
    1226:	80 81       	ld	r24, Z
											if (Lib_Pin_Get(Port, Pin) != 0) {
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <Isb_App_Exec+0x44c>
    122c:	95 95       	asr	r25
    122e:	87 95       	ror	r24
    1230:	2a 95       	dec	r18
    1232:	e2 f7       	brpl	.-8      	; 0x122c <Isb_App_Exec+0x448>
    1234:	80 ff       	sbrs	r24, 0
    1236:	13 c0       	rjmp	.+38     	; 0x125e <Isb_App_Exec+0x47a>
    1238:	10 c0       	rjmp	.+32     	; 0x125a <Isb_App_Exec+0x476>
    123a:	ee 0f       	add	r30, r30
    123c:	ff 1f       	adc	r31, r31
    123e:	ec 57       	subi	r30, 0x7C	; 124
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	01 90       	ld	r0, Z+
    1244:	f0 81       	ld	r31, Z
    1246:	e0 2d       	mov	r30, r0
    1248:	80 81       	ld	r24, Z
											else {
												Isb_App_DigIn[AppIndex].Value = 0;
											}
										}
										else {
											if (Lib_Pin_Get(Port, Pin) != 0) {
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <Isb_App_Exec+0x46e>
    124e:	95 95       	asr	r25
    1250:	87 95       	ror	r24
    1252:	2a 95       	dec	r18
    1254:	e2 f7       	brpl	.-8      	; 0x124e <Isb_App_Exec+0x46a>
    1256:	80 fd       	sbrc	r24, 0
    1258:	02 c0       	rjmp	.+4      	; 0x125e <Isb_App_Exec+0x47a>
												Isb_App_DigIn[AppIndex].Value = 0;
											}
											else {
												Isb_App_DigIn[AppIndex].Value = 1;
    125a:	6c 83       	std	Y+4, r22	; 0x04
    125c:	01 c0       	rjmp	.+2      	; 0x1260 <Isb_App_Exec+0x47c>
									Isb_App_DigIn[AppIndex].Value = 0;
// <- TODO:
									break;
								case ISB_APP_DIGIN_CFG0_MODE_SLAVEUSART1:
// -> TODO:
									Isb_App_DigIn[AppIndex].Value = 0;
    125e:	1c 82       	std	Y+4, r1	; 0x04
							}



// Pin auswerten
							if (Isb_App_DigIn[AppIndex].Value != 0) {
    1260:	8c 81       	ldd	r24, Y+4	; 0x04
    1262:	88 23       	and	r24, r24
    1264:	b9 f0       	breq	.+46     	; 0x1294 <Isb_App_Exec+0x4b0>
								// Global
								Isb_App_DigIn[AppIndex].CountHigh++;
    1266:	8f 81       	ldd	r24, Y+7	; 0x07
    1268:	8f 5f       	subi	r24, 0xFF	; 255
    126a:	8f 83       	std	Y+7, r24	; 0x07
								// Event "High" > 40ms
								if (Isb_App_DigIn[AppIndex].CountHigh == 4) {
    126c:	84 30       	cpi	r24, 0x04	; 4
    126e:	19 f4       	brne	.+6      	; 0x1276 <Isb_App_Exec+0x492>
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGH);
    1270:	8d 81       	ldd	r24, Y+5	; 0x05
    1272:	80 61       	ori	r24, 0x10	; 16
    1274:	8d 83       	std	Y+5, r24	; 0x05
								}
								// Event "High Long" > 400ms
								if (Isb_App_DigIn[AppIndex].CountHigh == 40) {
    1276:	8f 81       	ldd	r24, Y+7	; 0x07
    1278:	88 32       	cpi	r24, 0x28	; 40
    127a:	19 f4       	brne	.+6      	; 0x1282 <Isb_App_Exec+0x49e>
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHLONG);
    127c:	8d 81       	ldd	r24, Y+5	; 0x05
    127e:	80 64       	ori	r24, 0x40	; 64
    1280:	8d 83       	std	Y+5, r24	; 0x05
								}
								// Event "High Repeat"
								if (Isb_App_DigIn[AppIndex].CountHigh == 100) {
    1282:	8f 81       	ldd	r24, Y+7	; 0x07
    1284:	84 36       	cpi	r24, 0x64	; 100
    1286:	21 f4       	brne	.+8      	; 0x1290 <Isb_App_Exec+0x4ac>
									Isb_App_DigIn[AppIndex].CountHigh = 90;
    1288:	ef 82       	std	Y+7, r14	; 0x07
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHREPEAT);
    128a:	8d 81       	ldd	r24, Y+5	; 0x05
    128c:	80 68       	ori	r24, 0x80	; 128
    128e:	8d 83       	std	Y+5, r24	; 0x05
//									if (Isb_App_DigIn[AppIndex].CountLow < 40) {
//										Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOWSHORT);
//									}
//								}
								// Global
								Isb_App_DigIn[AppIndex].CountLow = 0;
    1290:	1e 82       	std	Y+6, r1	; 0x06
    1292:	11 c0       	rjmp	.+34     	; 0x12b6 <Isb_App_Exec+0x4d2>
							}
							else {
								// Global
								Isb_App_DigIn[AppIndex].CountLow++;
    1294:	8e 81       	ldd	r24, Y+6	; 0x06
    1296:	8f 5f       	subi	r24, 0xFF	; 255
    1298:	8e 83       	std	Y+6, r24	; 0x06
								// Event "Low" > 40ms
								if (Isb_App_DigIn[AppIndex].CountLow == 4) {
    129a:	84 30       	cpi	r24, 0x04	; 4
    129c:	19 f4       	brne	.+6      	; 0x12a4 <Isb_App_Exec+0x4c0>
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOW);
    129e:	8d 81       	ldd	r24, Y+5	; 0x05
    12a0:	81 60       	ori	r24, 0x01	; 1
    12a2:	8d 83       	std	Y+5, r24	; 0x05
//								if (Isb_App_DigIn[AppIndex].CountLow == 100) {
//									Isb_App_DigIn[AppIndex].CountLow = 90;
//									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOWREPEAT);
//								}
								// Event "High Short" = 40-400ms
								if (Isb_App_DigIn[AppIndex].CountHigh != 0) {
    12a4:	8f 81       	ldd	r24, Y+7	; 0x07
    12a6:	88 23       	and	r24, r24
    12a8:	29 f0       	breq	.+10     	; 0x12b4 <Isb_App_Exec+0x4d0>
									if (Isb_App_DigIn[AppIndex].CountHigh < 40) {
    12aa:	88 32       	cpi	r24, 0x28	; 40
    12ac:	18 f4       	brcc	.+6      	; 0x12b4 <Isb_App_Exec+0x4d0>
										Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHSHORT);
    12ae:	8d 81       	ldd	r24, Y+5	; 0x05
    12b0:	80 62       	ori	r24, 0x20	; 32
    12b2:	8d 83       	std	Y+5, r24	; 0x05
									}
								}
								// Global
								Isb_App_DigIn[AppIndex].CountHigh = 0;
    12b4:	1f 82       	std	Y+7, r1	; 0x07
							}



// Event auswerten
							switch (Isb_App_DigIn[AppIndex].Cfg1 & ISB_APP_DIGIN_CFG1_MODE_MASK) {
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	c9 01       	movw	r24, r18
    12be:	87 70       	andi	r24, 0x07	; 7
    12c0:	90 70       	andi	r25, 0x00	; 0
    12c2:	89 2b       	or	r24, r25
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <Isb_App_Exec+0x4e4>
    12c6:	bc c2       	rjmp	.+1400   	; 0x1840 <Isb_App_Exec+0xa5c>
								case ISB_APP_DIGIN_CFG1_MODE_SWITCH:
									// Betriebsart = Schaltsensor/Störmeldeeingang
									switch (Isb_App_DigIn[AppIndex].Cfg1 & ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_MASK) {
    12c8:	c9 01       	movw	r24, r18
    12ca:	88 73       	andi	r24, 0x38	; 56
    12cc:	90 70       	andi	r25, 0x00	; 0
    12ce:	88 30       	cpi	r24, 0x08	; 8
    12d0:	91 05       	cpc	r25, r1
    12d2:	09 f4       	brne	.+2      	; 0x12d6 <Isb_App_Exec+0x4f2>
    12d4:	b6 c0       	rjmp	.+364    	; 0x1442 <Isb_App_Exec+0x65e>
    12d6:	89 30       	cpi	r24, 0x09	; 9
    12d8:	91 05       	cpc	r25, r1
    12da:	1c f4       	brge	.+6      	; 0x12e2 <Isb_App_Exec+0x4fe>
    12dc:	89 2b       	or	r24, r25
    12de:	49 f0       	breq	.+18     	; 0x12f2 <Isb_App_Exec+0x50e>
    12e0:	af c2       	rjmp	.+1374   	; 0x1840 <Isb_App_Exec+0xa5c>
    12e2:	80 31       	cpi	r24, 0x10	; 16
    12e4:	91 05       	cpc	r25, r1
    12e6:	09 f4       	brne	.+2      	; 0x12ea <Isb_App_Exec+0x506>
    12e8:	54 c1       	rjmp	.+680    	; 0x1592 <Isb_App_Exec+0x7ae>
    12ea:	48 97       	sbiw	r24, 0x18	; 24
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <Isb_App_Exec+0x50c>
    12ee:	a8 c2       	rjmp	.+1360   	; 0x1840 <Isb_App_Exec+0xa5c>
    12f0:	f8 c1       	rjmp	.+1008   	; 0x16e2 <Isb_App_Exec+0x8fe>
										case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_0:
											// 1 Schaltobjekt - Ohne Unterscheidung Kurz/Lang - Ohne Repeat 
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGH)) {
    12f2:	a8 01       	movw	r20, r16
    12f4:	33 e0       	ldi	r19, 0x03	; 3
    12f6:	44 0f       	add	r20, r20
    12f8:	55 1f       	adc	r21, r21
    12fa:	3a 95       	dec	r19
    12fc:	e1 f7       	brne	.-8      	; 0x12f6 <Isb_App_Exec+0x512>
    12fe:	40 55       	subi	r20, 0x50	; 80
    1300:	5f 4f       	sbci	r21, 0xFF	; 255
    1302:	fa 01       	movw	r30, r20
    1304:	80 81       	ld	r24, Z
    1306:	84 ff       	sbrs	r24, 4
    1308:	4c c0       	rjmp	.+152    	; 0x13a2 <Isb_App_Exec+0x5be>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1) {
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	8f 70       	andi	r24, 0x0F	; 15
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	a9 f4       	brne	.+42     	; 0x133c <Isb_App_Exec+0x558>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    1312:	a7 2f       	mov	r26, r23
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	fd 01       	movw	r30, r26
    1318:	ee 0f       	add	r30, r30
    131a:	ff 1f       	adc	r31, r31
    131c:	ee 0f       	add	r30, r30
    131e:	ff 1f       	adc	r31, r31
    1320:	e2 50       	subi	r30, 0x02	; 2
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	80 81       	ld	r24, Z
    1326:	88 23       	and	r24, r24
    1328:	49 f0       	breq	.+18     	; 0x133c <Isb_App_Exec+0x558>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    132a:	10 82       	st	Z, r1
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    132c:	aa 0f       	add	r26, r26
    132e:	bb 1f       	adc	r27, r27
    1330:	aa 0f       	add	r26, r26
    1332:	bb 1f       	adc	r27, r27
    1334:	a4 50       	subi	r26, 0x04	; 4
    1336:	bf 4f       	sbci	r27, 0xFF	; 255
    1338:	13 96       	adiw	r26, 0x03	; 3
    133a:	6c 93       	st	X, r22
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2) {
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	8f 70       	andi	r24, 0x0F	; 15
    1340:	82 30       	cpi	r24, 0x02	; 2
    1342:	a9 f4       	brne	.+42     	; 0x136e <Isb_App_Exec+0x58a>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    1344:	a7 2f       	mov	r26, r23
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	fd 01       	movw	r30, r26
    134a:	ee 0f       	add	r30, r30
    134c:	ff 1f       	adc	r31, r31
    134e:	ee 0f       	add	r30, r30
    1350:	ff 1f       	adc	r31, r31
    1352:	e2 50       	subi	r30, 0x02	; 2
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	80 81       	ld	r24, Z
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	49 f0       	breq	.+18     	; 0x136e <Isb_App_Exec+0x58a>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    135c:	60 83       	st	Z, r22
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    135e:	aa 0f       	add	r26, r26
    1360:	bb 1f       	adc	r27, r27
    1362:	aa 0f       	add	r26, r26
    1364:	bb 1f       	adc	r27, r27
    1366:	a4 50       	subi	r26, 0x04	; 4
    1368:	bf 4f       	sbci	r27, 0xFF	; 255
    136a:	13 96       	adiw	r26, 0x03	; 3
    136c:	6c 93       	st	X, r22
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3) {
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	8f 70       	andi	r24, 0x0F	; 15
    1372:	83 30       	cpi	r24, 0x03	; 3
    1374:	99 f4       	brne	.+38     	; 0x139c <Isb_App_Exec+0x5b8>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    1376:	87 2f       	mov	r24, r23
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	dc 01       	movw	r26, r24
    1384:	a2 50       	subi	r26, 0x02	; 2
    1386:	bf 4f       	sbci	r27, 0xFF	; 255
    1388:	2c 91       	ld	r18, X
    138a:	fc 01       	movw	r30, r24
    138c:	22 23       	and	r18, r18
    138e:	11 f4       	brne	.+4      	; 0x1394 <Isb_App_Exec+0x5b0>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1390:	6c 93       	st	X, r22
    1392:	01 c0       	rjmp	.+2      	; 0x1396 <Isb_App_Exec+0x5b2>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    1394:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1396:	e4 50       	subi	r30, 0x04	; 4
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	63 83       	std	Z+3, r22	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGH);
    139c:	8d 81       	ldd	r24, Y+5	; 0x05
    139e:	8f 7e       	andi	r24, 0xEF	; 239
    13a0:	8d 83       	std	Y+5, r24	; 0x05
											}
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_LOW)) {
    13a2:	fa 01       	movw	r30, r20
    13a4:	80 81       	ld	r24, Z
    13a6:	80 ff       	sbrs	r24, 0
    13a8:	4b c2       	rjmp	.+1174   	; 0x1840 <Isb_App_Exec+0xa5c>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1) {
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	80 7f       	andi	r24, 0xF0	; 240
    13ae:	80 31       	cpi	r24, 0x10	; 16
    13b0:	a9 f4       	brne	.+42     	; 0x13dc <Isb_App_Exec+0x5f8>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    13b2:	a7 2f       	mov	r26, r23
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	fd 01       	movw	r30, r26
    13b8:	ee 0f       	add	r30, r30
    13ba:	ff 1f       	adc	r31, r31
    13bc:	ee 0f       	add	r30, r30
    13be:	ff 1f       	adc	r31, r31
    13c0:	e2 50       	subi	r30, 0x02	; 2
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	80 81       	ld	r24, Z
    13c6:	88 23       	and	r24, r24
    13c8:	49 f0       	breq	.+18     	; 0x13dc <Isb_App_Exec+0x5f8>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    13ca:	10 82       	st	Z, r1
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    13cc:	aa 0f       	add	r26, r26
    13ce:	bb 1f       	adc	r27, r27
    13d0:	aa 0f       	add	r26, r26
    13d2:	bb 1f       	adc	r27, r27
    13d4:	a4 50       	subi	r26, 0x04	; 4
    13d6:	bf 4f       	sbci	r27, 0xFF	; 255
    13d8:	13 96       	adiw	r26, 0x03	; 3
    13da:	6c 93       	st	X, r22
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2) {
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	80 7f       	andi	r24, 0xF0	; 240
    13e0:	80 32       	cpi	r24, 0x20	; 32
    13e2:	a9 f4       	brne	.+42     	; 0x140e <Isb_App_Exec+0x62a>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    13e4:	a7 2f       	mov	r26, r23
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	fd 01       	movw	r30, r26
    13ea:	ee 0f       	add	r30, r30
    13ec:	ff 1f       	adc	r31, r31
    13ee:	ee 0f       	add	r30, r30
    13f0:	ff 1f       	adc	r31, r31
    13f2:	e2 50       	subi	r30, 0x02	; 2
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	80 81       	ld	r24, Z
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	49 f0       	breq	.+18     	; 0x140e <Isb_App_Exec+0x62a>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    13fc:	60 83       	st	Z, r22
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    13fe:	aa 0f       	add	r26, r26
    1400:	bb 1f       	adc	r27, r27
    1402:	aa 0f       	add	r26, r26
    1404:	bb 1f       	adc	r27, r27
    1406:	a4 50       	subi	r26, 0x04	; 4
    1408:	bf 4f       	sbci	r27, 0xFF	; 255
    140a:	13 96       	adiw	r26, 0x03	; 3
    140c:	6c 93       	st	X, r22
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3) {
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	80 7f       	andi	r24, 0xF0	; 240
    1412:	80 33       	cpi	r24, 0x30	; 48
    1414:	99 f4       	brne	.+38     	; 0x143c <Isb_App_Exec+0x658>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    1416:	87 2f       	mov	r24, r23
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	dc 01       	movw	r26, r24
    1424:	a2 50       	subi	r26, 0x02	; 2
    1426:	bf 4f       	sbci	r27, 0xFF	; 255
    1428:	2c 91       	ld	r18, X
    142a:	fc 01       	movw	r30, r24
    142c:	22 23       	and	r18, r18
    142e:	11 f4       	brne	.+4      	; 0x1434 <Isb_App_Exec+0x650>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1430:	6c 93       	st	X, r22
    1432:	01 c0       	rjmp	.+2      	; 0x1436 <Isb_App_Exec+0x652>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    1434:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1436:	e4 50       	subi	r30, 0x04	; 4
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	63 83       	std	Z+3, r22	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_LOW);
    143c:	8d 81       	ldd	r24, Y+5	; 0x05
    143e:	8e 7f       	andi	r24, 0xFE	; 254
    1440:	fe c1       	rjmp	.+1020   	; 0x183e <Isb_App_Exec+0xa5a>
											}
											break;
										case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_1:
											// 1 Schaltobjekt - Ohne Unterscheidung Kurz/Lang - Mit Repeat 
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGH)) {
    1442:	a8 01       	movw	r20, r16
    1444:	33 e0       	ldi	r19, 0x03	; 3
    1446:	44 0f       	add	r20, r20
    1448:	55 1f       	adc	r21, r21
    144a:	3a 95       	dec	r19
    144c:	e1 f7       	brne	.-8      	; 0x1446 <Isb_App_Exec+0x662>
    144e:	40 55       	subi	r20, 0x50	; 80
    1450:	5f 4f       	sbci	r21, 0xFF	; 255
    1452:	fa 01       	movw	r30, r20
    1454:	80 81       	ld	r24, Z
    1456:	84 ff       	sbrs	r24, 4
    1458:	4c c0       	rjmp	.+152    	; 0x14f2 <Isb_App_Exec+0x70e>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1) {
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	8f 70       	andi	r24, 0x0F	; 15
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	a9 f4       	brne	.+42     	; 0x148c <Isb_App_Exec+0x6a8>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    1462:	a7 2f       	mov	r26, r23
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	fd 01       	movw	r30, r26
    1468:	ee 0f       	add	r30, r30
    146a:	ff 1f       	adc	r31, r31
    146c:	ee 0f       	add	r30, r30
    146e:	ff 1f       	adc	r31, r31
    1470:	e2 50       	subi	r30, 0x02	; 2
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	80 81       	ld	r24, Z
    1476:	88 23       	and	r24, r24
    1478:	49 f0       	breq	.+18     	; 0x148c <Isb_App_Exec+0x6a8>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    147a:	10 82       	st	Z, r1
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    147c:	aa 0f       	add	r26, r26
    147e:	bb 1f       	adc	r27, r27
    1480:	aa 0f       	add	r26, r26
    1482:	bb 1f       	adc	r27, r27
    1484:	a4 50       	subi	r26, 0x04	; 4
    1486:	bf 4f       	sbci	r27, 0xFF	; 255
    1488:	13 96       	adiw	r26, 0x03	; 3
    148a:	6c 93       	st	X, r22
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2) {
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	8f 70       	andi	r24, 0x0F	; 15
    1490:	82 30       	cpi	r24, 0x02	; 2
    1492:	a9 f4       	brne	.+42     	; 0x14be <Isb_App_Exec+0x6da>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    1494:	a7 2f       	mov	r26, r23
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	fd 01       	movw	r30, r26
    149a:	ee 0f       	add	r30, r30
    149c:	ff 1f       	adc	r31, r31
    149e:	ee 0f       	add	r30, r30
    14a0:	ff 1f       	adc	r31, r31
    14a2:	e2 50       	subi	r30, 0x02	; 2
    14a4:	ff 4f       	sbci	r31, 0xFF	; 255
    14a6:	80 81       	ld	r24, Z
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	49 f0       	breq	.+18     	; 0x14be <Isb_App_Exec+0x6da>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    14ac:	60 83       	st	Z, r22
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    14ae:	aa 0f       	add	r26, r26
    14b0:	bb 1f       	adc	r27, r27
    14b2:	aa 0f       	add	r26, r26
    14b4:	bb 1f       	adc	r27, r27
    14b6:	a4 50       	subi	r26, 0x04	; 4
    14b8:	bf 4f       	sbci	r27, 0xFF	; 255
    14ba:	13 96       	adiw	r26, 0x03	; 3
    14bc:	6c 93       	st	X, r22
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3) {
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	8f 70       	andi	r24, 0x0F	; 15
    14c2:	83 30       	cpi	r24, 0x03	; 3
    14c4:	99 f4       	brne	.+38     	; 0x14ec <Isb_App_Exec+0x708>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    14c6:	87 2f       	mov	r24, r23
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	dc 01       	movw	r26, r24
    14d4:	a2 50       	subi	r26, 0x02	; 2
    14d6:	bf 4f       	sbci	r27, 0xFF	; 255
    14d8:	2c 91       	ld	r18, X
    14da:	fc 01       	movw	r30, r24
    14dc:	22 23       	and	r18, r18
    14de:	11 f4       	brne	.+4      	; 0x14e4 <Isb_App_Exec+0x700>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    14e0:	6c 93       	st	X, r22
    14e2:	01 c0       	rjmp	.+2      	; 0x14e6 <Isb_App_Exec+0x702>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    14e4:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    14e6:	e4 50       	subi	r30, 0x04	; 4
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	63 83       	std	Z+3, r22	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGH);
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	8f 7e       	andi	r24, 0xEF	; 239
    14f0:	8d 83       	std	Y+5, r24	; 0x05
											}
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_LOW)) {
    14f2:	fa 01       	movw	r30, r20
    14f4:	80 81       	ld	r24, Z
    14f6:	80 ff       	sbrs	r24, 0
    14f8:	9c c1       	rjmp	.+824    	; 0x1832 <Isb_App_Exec+0xa4e>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1) {
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	80 7f       	andi	r24, 0xF0	; 240
    14fe:	80 31       	cpi	r24, 0x10	; 16
    1500:	a9 f4       	brne	.+42     	; 0x152c <Isb_App_Exec+0x748>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    1502:	a7 2f       	mov	r26, r23
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	fd 01       	movw	r30, r26
    1508:	ee 0f       	add	r30, r30
    150a:	ff 1f       	adc	r31, r31
    150c:	ee 0f       	add	r30, r30
    150e:	ff 1f       	adc	r31, r31
    1510:	e2 50       	subi	r30, 0x02	; 2
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	80 81       	ld	r24, Z
    1516:	88 23       	and	r24, r24
    1518:	49 f0       	breq	.+18     	; 0x152c <Isb_App_Exec+0x748>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    151a:	10 82       	st	Z, r1
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    151c:	aa 0f       	add	r26, r26
    151e:	bb 1f       	adc	r27, r27
    1520:	aa 0f       	add	r26, r26
    1522:	bb 1f       	adc	r27, r27
    1524:	a4 50       	subi	r26, 0x04	; 4
    1526:	bf 4f       	sbci	r27, 0xFF	; 255
    1528:	13 96       	adiw	r26, 0x03	; 3
    152a:	6c 93       	st	X, r22
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2) {
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	80 7f       	andi	r24, 0xF0	; 240
    1530:	80 32       	cpi	r24, 0x20	; 32
    1532:	a9 f4       	brne	.+42     	; 0x155e <Isb_App_Exec+0x77a>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    1534:	a7 2f       	mov	r26, r23
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	fd 01       	movw	r30, r26
    153a:	ee 0f       	add	r30, r30
    153c:	ff 1f       	adc	r31, r31
    153e:	ee 0f       	add	r30, r30
    1540:	ff 1f       	adc	r31, r31
    1542:	e2 50       	subi	r30, 0x02	; 2
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	80 81       	ld	r24, Z
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	49 f0       	breq	.+18     	; 0x155e <Isb_App_Exec+0x77a>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    154c:	60 83       	st	Z, r22
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    154e:	aa 0f       	add	r26, r26
    1550:	bb 1f       	adc	r27, r27
    1552:	aa 0f       	add	r26, r26
    1554:	bb 1f       	adc	r27, r27
    1556:	a4 50       	subi	r26, 0x04	; 4
    1558:	bf 4f       	sbci	r27, 0xFF	; 255
    155a:	13 96       	adiw	r26, 0x03	; 3
    155c:	6c 93       	st	X, r22
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3) {
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	80 7f       	andi	r24, 0xF0	; 240
    1562:	80 33       	cpi	r24, 0x30	; 48
    1564:	99 f4       	brne	.+38     	; 0x158c <Isb_App_Exec+0x7a8>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    1566:	87 2f       	mov	r24, r23
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	dc 01       	movw	r26, r24
    1574:	a2 50       	subi	r26, 0x02	; 2
    1576:	bf 4f       	sbci	r27, 0xFF	; 255
    1578:	2c 91       	ld	r18, X
    157a:	fc 01       	movw	r30, r24
    157c:	22 23       	and	r18, r18
    157e:	11 f4       	brne	.+4      	; 0x1584 <Isb_App_Exec+0x7a0>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1580:	6c 93       	st	X, r22
    1582:	01 c0       	rjmp	.+2      	; 0x1586 <Isb_App_Exec+0x7a2>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    1584:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1586:	e4 50       	subi	r30, 0x04	; 4
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	63 83       	std	Z+3, r22	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_LOW);
    158c:	8d 81       	ldd	r24, Y+5	; 0x05
    158e:	8e 7f       	andi	r24, 0xFE	; 254
    1590:	4f c1       	rjmp	.+670    	; 0x1830 <Isb_App_Exec+0xa4c>
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHREPEAT);
											}
											break;
										case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_2:
											// 2 Schaltobjekte - Mit Unterscheidung Kurz/Lang - Ohne Repeat 
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHSHORT)) {
    1592:	a8 01       	movw	r20, r16
    1594:	33 e0       	ldi	r19, 0x03	; 3
    1596:	44 0f       	add	r20, r20
    1598:	55 1f       	adc	r21, r21
    159a:	3a 95       	dec	r19
    159c:	e1 f7       	brne	.-8      	; 0x1596 <Isb_App_Exec+0x7b2>
    159e:	40 55       	subi	r20, 0x50	; 80
    15a0:	5f 4f       	sbci	r21, 0xFF	; 255
    15a2:	fa 01       	movw	r30, r20
    15a4:	80 81       	ld	r24, Z
    15a6:	85 ff       	sbrs	r24, 5
    15a8:	4c c0       	rjmp	.+152    	; 0x1642 <Isb_App_Exec+0x85e>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1) {
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	8f 70       	andi	r24, 0x0F	; 15
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	a9 f4       	brne	.+42     	; 0x15dc <Isb_App_Exec+0x7f8>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    15b2:	a7 2f       	mov	r26, r23
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	fd 01       	movw	r30, r26
    15b8:	ee 0f       	add	r30, r30
    15ba:	ff 1f       	adc	r31, r31
    15bc:	ee 0f       	add	r30, r30
    15be:	ff 1f       	adc	r31, r31
    15c0:	e2 50       	subi	r30, 0x02	; 2
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	80 81       	ld	r24, Z
    15c6:	88 23       	and	r24, r24
    15c8:	49 f0       	breq	.+18     	; 0x15dc <Isb_App_Exec+0x7f8>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    15ca:	10 82       	st	Z, r1
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    15cc:	aa 0f       	add	r26, r26
    15ce:	bb 1f       	adc	r27, r27
    15d0:	aa 0f       	add	r26, r26
    15d2:	bb 1f       	adc	r27, r27
    15d4:	a4 50       	subi	r26, 0x04	; 4
    15d6:	bf 4f       	sbci	r27, 0xFF	; 255
    15d8:	13 96       	adiw	r26, 0x03	; 3
    15da:	6c 93       	st	X, r22
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2) {
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	8f 70       	andi	r24, 0x0F	; 15
    15e0:	82 30       	cpi	r24, 0x02	; 2
    15e2:	a9 f4       	brne	.+42     	; 0x160e <Isb_App_Exec+0x82a>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    15e4:	a7 2f       	mov	r26, r23
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	fd 01       	movw	r30, r26
    15ea:	ee 0f       	add	r30, r30
    15ec:	ff 1f       	adc	r31, r31
    15ee:	ee 0f       	add	r30, r30
    15f0:	ff 1f       	adc	r31, r31
    15f2:	e2 50       	subi	r30, 0x02	; 2
    15f4:	ff 4f       	sbci	r31, 0xFF	; 255
    15f6:	80 81       	ld	r24, Z
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	49 f0       	breq	.+18     	; 0x160e <Isb_App_Exec+0x82a>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    15fc:	60 83       	st	Z, r22
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    15fe:	aa 0f       	add	r26, r26
    1600:	bb 1f       	adc	r27, r27
    1602:	aa 0f       	add	r26, r26
    1604:	bb 1f       	adc	r27, r27
    1606:	a4 50       	subi	r26, 0x04	; 4
    1608:	bf 4f       	sbci	r27, 0xFF	; 255
    160a:	13 96       	adiw	r26, 0x03	; 3
    160c:	6c 93       	st	X, r22
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3) {
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	8f 70       	andi	r24, 0x0F	; 15
    1612:	83 30       	cpi	r24, 0x03	; 3
    1614:	99 f4       	brne	.+38     	; 0x163c <Isb_App_Exec+0x858>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    1616:	87 2f       	mov	r24, r23
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	dc 01       	movw	r26, r24
    1624:	a2 50       	subi	r26, 0x02	; 2
    1626:	bf 4f       	sbci	r27, 0xFF	; 255
    1628:	2c 91       	ld	r18, X
    162a:	fc 01       	movw	r30, r24
    162c:	22 23       	and	r18, r18
    162e:	11 f4       	brne	.+4      	; 0x1634 <Isb_App_Exec+0x850>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1630:	6c 93       	st	X, r22
    1632:	01 c0       	rjmp	.+2      	; 0x1636 <Isb_App_Exec+0x852>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    1634:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1636:	e4 50       	subi	r30, 0x04	; 4
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	63 83       	std	Z+3, r22	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHSHORT);
    163c:	8d 81       	ldd	r24, Y+5	; 0x05
    163e:	8f 7d       	andi	r24, 0xDF	; 223
    1640:	8d 83       	std	Y+5, r24	; 0x05
											}
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHLONG)) {
    1642:	fa 01       	movw	r30, r20
    1644:	80 81       	ld	r24, Z
    1646:	86 ff       	sbrs	r24, 6
    1648:	fb c0       	rjmp	.+502    	; 0x1840 <Isb_App_Exec+0xa5c>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1) {
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	80 7f       	andi	r24, 0xF0	; 240
    164e:	80 31       	cpi	r24, 0x10	; 16
    1650:	a9 f4       	brne	.+42     	; 0x167c <Isb_App_Exec+0x898>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 0) {
    1652:	af 2d       	mov	r26, r15
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	fd 01       	movw	r30, r26
    1658:	ee 0f       	add	r30, r30
    165a:	ff 1f       	adc	r31, r31
    165c:	ee 0f       	add	r30, r30
    165e:	ff 1f       	adc	r31, r31
    1660:	e2 50       	subi	r30, 0x02	; 2
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	80 81       	ld	r24, Z
    1666:	88 23       	and	r24, r24
    1668:	49 f0       	breq	.+18     	; 0x167c <Isb_App_Exec+0x898>
														Isb_Obj_1Bit[Obj_1Bit_2].Value = 0;
    166a:	10 82       	st	Z, r1
														Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
    166c:	aa 0f       	add	r26, r26
    166e:	bb 1f       	adc	r27, r27
    1670:	aa 0f       	add	r26, r26
    1672:	bb 1f       	adc	r27, r27
    1674:	a4 50       	subi	r26, 0x04	; 4
    1676:	bf 4f       	sbci	r27, 0xFF	; 255
    1678:	13 96       	adiw	r26, 0x03	; 3
    167a:	6c 93       	st	X, r22
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2) {
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	80 7f       	andi	r24, 0xF0	; 240
    1680:	80 32       	cpi	r24, 0x20	; 32
    1682:	a9 f4       	brne	.+42     	; 0x16ae <Isb_App_Exec+0x8ca>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 1) {
    1684:	af 2d       	mov	r26, r15
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	fd 01       	movw	r30, r26
    168a:	ee 0f       	add	r30, r30
    168c:	ff 1f       	adc	r31, r31
    168e:	ee 0f       	add	r30, r30
    1690:	ff 1f       	adc	r31, r31
    1692:	e2 50       	subi	r30, 0x02	; 2
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	80 81       	ld	r24, Z
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	49 f0       	breq	.+18     	; 0x16ae <Isb_App_Exec+0x8ca>
														Isb_Obj_1Bit[Obj_1Bit_2].Value = 1;
    169c:	60 83       	st	Z, r22
														Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
    169e:	aa 0f       	add	r26, r26
    16a0:	bb 1f       	adc	r27, r27
    16a2:	aa 0f       	add	r26, r26
    16a4:	bb 1f       	adc	r27, r27
    16a6:	a4 50       	subi	r26, 0x04	; 4
    16a8:	bf 4f       	sbci	r27, 0xFF	; 255
    16aa:	13 96       	adiw	r26, 0x03	; 3
    16ac:	6c 93       	st	X, r22
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3) {
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	80 7f       	andi	r24, 0xF0	; 240
    16b2:	80 33       	cpi	r24, 0x30	; 48
    16b4:	99 f4       	brne	.+38     	; 0x16dc <Isb_App_Exec+0x8f8>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value == 0) {
    16b6:	8f 2d       	mov	r24, r15
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	dc 01       	movw	r26, r24
    16c4:	a2 50       	subi	r26, 0x02	; 2
    16c6:	bf 4f       	sbci	r27, 0xFF	; 255
    16c8:	2c 91       	ld	r18, X
    16ca:	fc 01       	movw	r30, r24
    16cc:	22 23       	and	r18, r18
    16ce:	11 f4       	brne	.+4      	; 0x16d4 <Isb_App_Exec+0x8f0>
														if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_2].Value = 1;
    16d0:	6c 93       	st	X, r22
    16d2:	01 c0       	rjmp	.+2      	; 0x16d6 <Isb_App_Exec+0x8f2>
															Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_2].Value = 0;
    16d4:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
    16d6:	e4 50       	subi	r30, 0x04	; 4
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	63 83       	std	Z+3, r22	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHLONG);
    16dc:	8d 81       	ldd	r24, Y+5	; 0x05
    16de:	8f 7b       	andi	r24, 0xBF	; 191
    16e0:	ae c0       	rjmp	.+348    	; 0x183e <Isb_App_Exec+0xa5a>
											}
											break;
										case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_3:
											// 2 Schaltobjekte - Mit Unterscheidung Kurz/Lang - Mit Repeat 
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHSHORT)) {
    16e2:	a8 01       	movw	r20, r16
    16e4:	33 e0       	ldi	r19, 0x03	; 3
    16e6:	44 0f       	add	r20, r20
    16e8:	55 1f       	adc	r21, r21
    16ea:	3a 95       	dec	r19
    16ec:	e1 f7       	brne	.-8      	; 0x16e6 <Isb_App_Exec+0x902>
    16ee:	40 55       	subi	r20, 0x50	; 80
    16f0:	5f 4f       	sbci	r21, 0xFF	; 255
    16f2:	fa 01       	movw	r30, r20
    16f4:	80 81       	ld	r24, Z
    16f6:	85 ff       	sbrs	r24, 5
    16f8:	4c c0       	rjmp	.+152    	; 0x1792 <Isb_App_Exec+0x9ae>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1) {
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	8f 70       	andi	r24, 0x0F	; 15
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	a9 f4       	brne	.+42     	; 0x172c <Isb_App_Exec+0x948>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    1702:	a7 2f       	mov	r26, r23
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	fd 01       	movw	r30, r26
    1708:	ee 0f       	add	r30, r30
    170a:	ff 1f       	adc	r31, r31
    170c:	ee 0f       	add	r30, r30
    170e:	ff 1f       	adc	r31, r31
    1710:	e2 50       	subi	r30, 0x02	; 2
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	80 81       	ld	r24, Z
    1716:	88 23       	and	r24, r24
    1718:	49 f0       	breq	.+18     	; 0x172c <Isb_App_Exec+0x948>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    171a:	10 82       	st	Z, r1
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    171c:	aa 0f       	add	r26, r26
    171e:	bb 1f       	adc	r27, r27
    1720:	aa 0f       	add	r26, r26
    1722:	bb 1f       	adc	r27, r27
    1724:	a4 50       	subi	r26, 0x04	; 4
    1726:	bf 4f       	sbci	r27, 0xFF	; 255
    1728:	13 96       	adiw	r26, 0x03	; 3
    172a:	6c 93       	st	X, r22
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2) {
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	8f 70       	andi	r24, 0x0F	; 15
    1730:	82 30       	cpi	r24, 0x02	; 2
    1732:	a9 f4       	brne	.+42     	; 0x175e <Isb_App_Exec+0x97a>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    1734:	a7 2f       	mov	r26, r23
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	fd 01       	movw	r30, r26
    173a:	ee 0f       	add	r30, r30
    173c:	ff 1f       	adc	r31, r31
    173e:	ee 0f       	add	r30, r30
    1740:	ff 1f       	adc	r31, r31
    1742:	e2 50       	subi	r30, 0x02	; 2
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	80 81       	ld	r24, Z
    1748:	81 30       	cpi	r24, 0x01	; 1
    174a:	49 f0       	breq	.+18     	; 0x175e <Isb_App_Exec+0x97a>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    174c:	60 83       	st	Z, r22
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    174e:	aa 0f       	add	r26, r26
    1750:	bb 1f       	adc	r27, r27
    1752:	aa 0f       	add	r26, r26
    1754:	bb 1f       	adc	r27, r27
    1756:	a4 50       	subi	r26, 0x04	; 4
    1758:	bf 4f       	sbci	r27, 0xFF	; 255
    175a:	13 96       	adiw	r26, 0x03	; 3
    175c:	6c 93       	st	X, r22
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3) {
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	8f 70       	andi	r24, 0x0F	; 15
    1762:	83 30       	cpi	r24, 0x03	; 3
    1764:	99 f4       	brne	.+38     	; 0x178c <Isb_App_Exec+0x9a8>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    1766:	87 2f       	mov	r24, r23
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	dc 01       	movw	r26, r24
    1774:	a2 50       	subi	r26, 0x02	; 2
    1776:	bf 4f       	sbci	r27, 0xFF	; 255
    1778:	2c 91       	ld	r18, X
    177a:	fc 01       	movw	r30, r24
    177c:	22 23       	and	r18, r18
    177e:	11 f4       	brne	.+4      	; 0x1784 <Isb_App_Exec+0x9a0>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1780:	6c 93       	st	X, r22
    1782:	01 c0       	rjmp	.+2      	; 0x1786 <Isb_App_Exec+0x9a2>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    1784:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1786:	e4 50       	subi	r30, 0x04	; 4
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	63 83       	std	Z+3, r22	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHSHORT);
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
    178e:	8f 7d       	andi	r24, 0xDF	; 223
    1790:	8d 83       	std	Y+5, r24	; 0x05
											}
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHLONG)) {
    1792:	fa 01       	movw	r30, r20
    1794:	80 81       	ld	r24, Z
    1796:	86 ff       	sbrs	r24, 6
    1798:	4c c0       	rjmp	.+152    	; 0x1832 <Isb_App_Exec+0xa4e>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1) {
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	80 7f       	andi	r24, 0xF0	; 240
    179e:	80 31       	cpi	r24, 0x10	; 16
    17a0:	a9 f4       	brne	.+42     	; 0x17cc <Isb_App_Exec+0x9e8>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 0) {
    17a2:	af 2d       	mov	r26, r15
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	fd 01       	movw	r30, r26
    17a8:	ee 0f       	add	r30, r30
    17aa:	ff 1f       	adc	r31, r31
    17ac:	ee 0f       	add	r30, r30
    17ae:	ff 1f       	adc	r31, r31
    17b0:	e2 50       	subi	r30, 0x02	; 2
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	80 81       	ld	r24, Z
    17b6:	88 23       	and	r24, r24
    17b8:	49 f0       	breq	.+18     	; 0x17cc <Isb_App_Exec+0x9e8>
														Isb_Obj_1Bit[Obj_1Bit_2].Value = 0;
    17ba:	10 82       	st	Z, r1
														Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
    17bc:	aa 0f       	add	r26, r26
    17be:	bb 1f       	adc	r27, r27
    17c0:	aa 0f       	add	r26, r26
    17c2:	bb 1f       	adc	r27, r27
    17c4:	a4 50       	subi	r26, 0x04	; 4
    17c6:	bf 4f       	sbci	r27, 0xFF	; 255
    17c8:	13 96       	adiw	r26, 0x03	; 3
    17ca:	6c 93       	st	X, r22
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2) {
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	80 7f       	andi	r24, 0xF0	; 240
    17d0:	80 32       	cpi	r24, 0x20	; 32
    17d2:	a9 f4       	brne	.+42     	; 0x17fe <Isb_App_Exec+0xa1a>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 1) {
    17d4:	af 2d       	mov	r26, r15
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	fd 01       	movw	r30, r26
    17da:	ee 0f       	add	r30, r30
    17dc:	ff 1f       	adc	r31, r31
    17de:	ee 0f       	add	r30, r30
    17e0:	ff 1f       	adc	r31, r31
    17e2:	e2 50       	subi	r30, 0x02	; 2
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	80 81       	ld	r24, Z
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	49 f0       	breq	.+18     	; 0x17fe <Isb_App_Exec+0xa1a>
														Isb_Obj_1Bit[Obj_1Bit_2].Value = 1;
    17ec:	60 83       	st	Z, r22
														Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
    17ee:	aa 0f       	add	r26, r26
    17f0:	bb 1f       	adc	r27, r27
    17f2:	aa 0f       	add	r26, r26
    17f4:	bb 1f       	adc	r27, r27
    17f6:	a4 50       	subi	r26, 0x04	; 4
    17f8:	bf 4f       	sbci	r27, 0xFF	; 255
    17fa:	13 96       	adiw	r26, 0x03	; 3
    17fc:	6c 93       	st	X, r22
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3) {
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	80 7f       	andi	r24, 0xF0	; 240
    1802:	80 33       	cpi	r24, 0x30	; 48
    1804:	99 f4       	brne	.+38     	; 0x182c <Isb_App_Exec+0xa48>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value == 0) {
    1806:	8f 2d       	mov	r24, r15
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	dc 01       	movw	r26, r24
    1814:	a2 50       	subi	r26, 0x02	; 2
    1816:	bf 4f       	sbci	r27, 0xFF	; 255
    1818:	2c 91       	ld	r18, X
    181a:	fc 01       	movw	r30, r24
    181c:	22 23       	and	r18, r18
    181e:	11 f4       	brne	.+4      	; 0x1824 <Isb_App_Exec+0xa40>
														if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_2].Value = 1;
    1820:	6c 93       	st	X, r22
    1822:	01 c0       	rjmp	.+2      	; 0x1826 <Isb_App_Exec+0xa42>
															Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_2].Value = 0;
    1824:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
    1826:	e4 50       	subi	r30, 0x04	; 4
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	63 83       	std	Z+3, r22	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHLONG);
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	8f 7b       	andi	r24, 0xBF	; 191
    1830:	8d 83       	std	Y+5, r24	; 0x05
											}
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHREPEAT)) {
    1832:	fa 01       	movw	r30, r20
    1834:	80 81       	ld	r24, Z
    1836:	87 ff       	sbrs	r24, 7
    1838:	03 c0       	rjmp	.+6      	; 0x1840 <Isb_App_Exec+0xa5c>
// TODO:


												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHREPEAT);
    183a:	8d 81       	ldd	r24, Y+5	; 0x05
    183c:	8f 77       	andi	r24, 0x7F	; 127
    183e:	8d 83       	std	Y+5, r24	; 0x05
    1840:	0f 5f       	subi	r16, 0xFF	; 255
    1842:	1f 4f       	sbci	r17, 0xFF	; 255
    1844:	28 96       	adiw	r28, 0x08	; 8
			}
		#endif /* ISB_APP_DIGOUT_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			if (bit_is_set(Isb_App_DigIn_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++) {
    1846:	02 30       	cpi	r16, 0x02	; 2
    1848:	11 05       	cpc	r17, r1
    184a:	09 f0       	breq	.+2      	; 0x184e <Isb_App_Exec+0xa6a>
    184c:	a4 cc       	rjmp	.-1720   	; 0x1196 <Isb_App_Exec+0x3b2>

//						}
// <- TODO:
					}
				}
				Isb_App_DigIn_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    184e:	80 91 9f 00 	lds	r24, 0x009F
    1852:	8e 7f       	andi	r24, 0xFE	; 254
    1854:	80 93 9f 00 	sts	0x009F, r24
//#				}
				Isb_App_Lcd_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
			}
		#endif /* ISB_APP_LCD_MAX */

	}
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	1f 91       	pop	r17
    185e:	0f 91       	pop	r16
    1860:	ff 90       	pop	r15
    1862:	ef 90       	pop	r14
    1864:	df 90       	pop	r13
    1866:	cf 90       	pop	r12
    1868:	bf 90       	pop	r11
    186a:	af 90       	pop	r10
    186c:	9f 90       	pop	r9
    186e:	8f 90       	pop	r8
    1870:	7f 90       	pop	r7
    1872:	6f 90       	pop	r6
    1874:	5f 90       	pop	r5
    1876:	4f 90       	pop	r4
    1878:	3f 90       	pop	r3
    187a:	08 95       	ret

0000187c <Isb_Obj_Init>:
#ifndef ISB_OBJ_C_
	#define ISB_OBJ_C_



	void Isb_Obj_Init(void) {
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	80 91 96 00 	lds	r24, 0x0096
    1888:	08 2f       	mov	r16, r24
    188a:	10 e0       	ldi	r17, 0x00	; 0
    188c:	cc ef       	ldi	r28, 0xFC	; 252
    188e:	d0 e0       	ldi	r29, 0x00	; 0
    1890:	a0 e0       	ldi	r26, 0x00	; 0
    1892:	b0 e0       	ldi	r27, 0x00	; 0

		#if defined(ISB_OBJ_1BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
				uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_1Bit_Ch_Array[ObjIndex]);
    1894:	fd 01       	movw	r30, r26
    1896:	ea 59       	subi	r30, 0x9A	; 154
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	e4 91       	lpm	r30, Z+
				uint16_t eepAddrCtrl = 0;
				uint16_t eepAddrTov = 0;
				uint16_t eepAddrValueInit = 0;
				switch (ObjIndex) {
    189c:	a6 30       	cpi	r26, 0x06	; 6
    189e:	09 f4       	brne	.+2      	; 0x18a2 <Isb_Obj_Init+0x26>
    18a0:	57 c0       	rjmp	.+174    	; 0x1950 <Isb_Obj_Init+0xd4>
    18a2:	a7 30       	cpi	r26, 0x07	; 7
    18a4:	78 f4       	brcc	.+30     	; 0x18c4 <Isb_Obj_Init+0x48>
    18a6:	a2 30       	cpi	r26, 0x02	; 2
    18a8:	b9 f1       	breq	.+110    	; 0x1918 <Isb_Obj_Init+0x9c>
    18aa:	a3 30       	cpi	r26, 0x03	; 3
    18ac:	28 f4       	brcc	.+10     	; 0x18b8 <Isb_Obj_Init+0x3c>
    18ae:	aa 23       	and	r26, r26
    18b0:	f1 f0       	breq	.+60     	; 0x18ee <Isb_Obj_Init+0x72>
    18b2:	a1 30       	cpi	r26, 0x01	; 1
    18b4:	19 f5       	brne	.+70     	; 0x18fc <Isb_Obj_Init+0x80>
    18b6:	29 c0       	rjmp	.+82     	; 0x190a <Isb_Obj_Init+0x8e>
    18b8:	a4 30       	cpi	r26, 0x04	; 4
    18ba:	e1 f1       	breq	.+120    	; 0x1934 <Isb_Obj_Init+0xb8>
    18bc:	a5 30       	cpi	r26, 0x05	; 5
    18be:	08 f0       	brcs	.+2      	; 0x18c2 <Isb_Obj_Init+0x46>
    18c0:	40 c0       	rjmp	.+128    	; 0x1942 <Isb_Obj_Init+0xc6>
    18c2:	31 c0       	rjmp	.+98     	; 0x1926 <Isb_Obj_Init+0xaa>
    18c4:	aa 30       	cpi	r26, 0x0A	; 10
    18c6:	09 f4       	brne	.+2      	; 0x18ca <Isb_Obj_Init+0x4e>
    18c8:	5f c0       	rjmp	.+190    	; 0x1988 <Isb_Obj_Init+0x10c>
    18ca:	ab 30       	cpi	r26, 0x0B	; 11
    18cc:	38 f4       	brcc	.+14     	; 0x18dc <Isb_Obj_Init+0x60>
    18ce:	a8 30       	cpi	r26, 0x08	; 8
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <Isb_Obj_Init+0x58>
    18d2:	4c c0       	rjmp	.+152    	; 0x196c <Isb_Obj_Init+0xf0>
    18d4:	a9 30       	cpi	r26, 0x09	; 9
    18d6:	08 f0       	brcs	.+2      	; 0x18da <Isb_Obj_Init+0x5e>
    18d8:	50 c0       	rjmp	.+160    	; 0x197a <Isb_Obj_Init+0xfe>
    18da:	41 c0       	rjmp	.+130    	; 0x195e <Isb_Obj_Init+0xe2>
    18dc:	ac 30       	cpi	r26, 0x0C	; 12
    18de:	09 f4       	brne	.+2      	; 0x18e2 <Isb_Obj_Init+0x66>
    18e0:	61 c0       	rjmp	.+194    	; 0x19a4 <Isb_Obj_Init+0x128>
    18e2:	ac 30       	cpi	r26, 0x0C	; 12
    18e4:	08 f4       	brcc	.+2      	; 0x18e8 <Isb_Obj_Init+0x6c>
    18e6:	57 c0       	rjmp	.+174    	; 0x1996 <Isb_Obj_Init+0x11a>
    18e8:	ad 30       	cpi	r26, 0x0D	; 13
    18ea:	41 f4       	brne	.+16     	; 0x18fc <Isb_Obj_Init+0x80>
    18ec:	62 c0       	rjmp	.+196    	; 0x19b2 <Isb_Obj_Init+0x136>
    18ee:	6b e0       	ldi	r22, 0x0B	; 11
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	4c e0       	ldi	r20, 0x0C	; 12
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	2d e0       	ldi	r18, 0x0D	; 13
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	61 c0       	rjmp	.+194    	; 0x19be <Isb_Obj_Init+0x142>
    18fc:	60 e0       	ldi	r22, 0x00	; 0
    18fe:	70 e0       	ldi	r23, 0x00	; 0
    1900:	40 e0       	ldi	r20, 0x00	; 0
    1902:	50 e0       	ldi	r21, 0x00	; 0
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	5a c0       	rjmp	.+180    	; 0x19be <Isb_Obj_Init+0x142>
    190a:	6e e0       	ldi	r22, 0x0E	; 14
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	4f e0       	ldi	r20, 0x0F	; 15
    1910:	50 e0       	ldi	r21, 0x00	; 0
    1912:	20 e1       	ldi	r18, 0x10	; 16
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	53 c0       	rjmp	.+166    	; 0x19be <Isb_Obj_Init+0x142>
					#if defined(ISB_OBJ_1BIT_1)
						case 1:
							eepAddrCtrl = ISB_OBJ_1BIT_1_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_1_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_1_EEADDR_VALUEINIT;
							break;
    1918:	61 e1       	ldi	r22, 0x11	; 17
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	42 e1       	ldi	r20, 0x12	; 18
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	23 e1       	ldi	r18, 0x13	; 19
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	4c c0       	rjmp	.+152    	; 0x19be <Isb_Obj_Init+0x142>
					#if defined(ISB_OBJ_1BIT_2)
						case 2:
							eepAddrCtrl = ISB_OBJ_1BIT_2_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_2_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_2_EEADDR_VALUEINIT;
							break;
    1926:	64 e1       	ldi	r22, 0x14	; 20
    1928:	70 e0       	ldi	r23, 0x00	; 0
    192a:	45 e1       	ldi	r20, 0x15	; 21
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	26 e1       	ldi	r18, 0x16	; 22
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	45 c0       	rjmp	.+138    	; 0x19be <Isb_Obj_Init+0x142>
					#if defined(ISB_OBJ_1BIT_3)
						case 3:
							eepAddrCtrl = ISB_OBJ_1BIT_3_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_3_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_3_EEADDR_VALUEINIT;
							break;
    1934:	63 e2       	ldi	r22, 0x23	; 35
    1936:	70 e0       	ldi	r23, 0x00	; 0
    1938:	44 e2       	ldi	r20, 0x24	; 36
    193a:	50 e0       	ldi	r21, 0x00	; 0
    193c:	25 e2       	ldi	r18, 0x25	; 37
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	3e c0       	rjmp	.+124    	; 0x19be <Isb_Obj_Init+0x142>
					#if defined(ISB_OBJ_1BIT_4)
						case 4:
							eepAddrCtrl = ISB_OBJ_1BIT_4_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_4_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_4_EEADDR_VALUEINIT;
							break;
    1942:	66 e2       	ldi	r22, 0x26	; 38
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	47 e2       	ldi	r20, 0x27	; 39
    1948:	50 e0       	ldi	r21, 0x00	; 0
    194a:	28 e2       	ldi	r18, 0x28	; 40
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	37 c0       	rjmp	.+110    	; 0x19be <Isb_Obj_Init+0x142>
					#if defined(ISB_OBJ_1BIT_5)
						case 5:
							eepAddrCtrl = ISB_OBJ_1BIT_5_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_5_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_5_EEADDR_VALUEINIT;
							break;
    1950:	69 e2       	ldi	r22, 0x29	; 41
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	4a e2       	ldi	r20, 0x2A	; 42
    1956:	50 e0       	ldi	r21, 0x00	; 0
    1958:	2b e2       	ldi	r18, 0x2B	; 43
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	30 c0       	rjmp	.+96     	; 0x19be <Isb_Obj_Init+0x142>
					#if defined(ISB_OBJ_1BIT_6)
						case 6:
							eepAddrCtrl = ISB_OBJ_1BIT_6_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_6_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_6_EEADDR_VALUEINIT;
							break;
    195e:	6c e2       	ldi	r22, 0x2C	; 44
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	4d e2       	ldi	r20, 0x2D	; 45
    1964:	50 e0       	ldi	r21, 0x00	; 0
    1966:	2e e2       	ldi	r18, 0x2E	; 46
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	29 c0       	rjmp	.+82     	; 0x19be <Isb_Obj_Init+0x142>
					#if defined(ISB_OBJ_1BIT_7)
						case 7:
							eepAddrCtrl = ISB_OBJ_1BIT_7_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_7_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_7_EEADDR_VALUEINIT;
							break;
    196c:	65 e3       	ldi	r22, 0x35	; 53
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	46 e3       	ldi	r20, 0x36	; 54
    1972:	50 e0       	ldi	r21, 0x00	; 0
    1974:	27 e3       	ldi	r18, 0x37	; 55
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	22 c0       	rjmp	.+68     	; 0x19be <Isb_Obj_Init+0x142>
					#if defined(ISB_OBJ_1BIT_8)
						case 8:
							eepAddrCtrl = ISB_OBJ_1BIT_8_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_8_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_8_EEADDR_VALUEINIT;
							break;
    197a:	68 e3       	ldi	r22, 0x38	; 56
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	49 e3       	ldi	r20, 0x39	; 57
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	2a e3       	ldi	r18, 0x3A	; 58
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	1b c0       	rjmp	.+54     	; 0x19be <Isb_Obj_Init+0x142>
					#if defined(ISB_OBJ_1BIT_9)
						case 9:
							eepAddrCtrl = ISB_OBJ_1BIT_9_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_9_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_9_EEADDR_VALUEINIT;
							break;
    1988:	6b e3       	ldi	r22, 0x3B	; 59
    198a:	70 e0       	ldi	r23, 0x00	; 0
    198c:	4c e3       	ldi	r20, 0x3C	; 60
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	2d e3       	ldi	r18, 0x3D	; 61
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	14 c0       	rjmp	.+40     	; 0x19be <Isb_Obj_Init+0x142>
					#if defined(ISB_OBJ_1BIT_10)
						case 10:
							eepAddrCtrl = ISB_OBJ_1BIT_10_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_10_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_10_EEADDR_VALUEINIT;
							break;
    1996:	6a e4       	ldi	r22, 0x4A	; 74
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	4b e4       	ldi	r20, 0x4B	; 75
    199c:	50 e0       	ldi	r21, 0x00	; 0
    199e:	2c e4       	ldi	r18, 0x4C	; 76
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	0d c0       	rjmp	.+26     	; 0x19be <Isb_Obj_Init+0x142>
					#if defined(ISB_OBJ_1BIT_11)
						case 11:
							eepAddrCtrl = ISB_OBJ_1BIT_11_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_11_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_11_EEADDR_VALUEINIT;
							break;
    19a4:	6d e4       	ldi	r22, 0x4D	; 77
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	4e e4       	ldi	r20, 0x4E	; 78
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	2f e4       	ldi	r18, 0x4F	; 79
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	06 c0       	rjmp	.+12     	; 0x19be <Isb_Obj_Init+0x142>
					#if defined(ISB_OBJ_1BIT_12)
						case 12:
							eepAddrCtrl = ISB_OBJ_1BIT_12_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_12_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_12_EEADDR_VALUEINIT;
							break;
    19b2:	60 e5       	ldi	r22, 0x50	; 80
    19b4:	70 e0       	ldi	r23, 0x00	; 0
    19b6:	41 e5       	ldi	r20, 0x51	; 81
    19b8:	50 e0       	ldi	r21, 0x00	; 0
    19ba:	22 e5       	ldi	r18, 0x52	; 82
    19bc:	30 e0       	ldi	r19, 0x00	; 0
							eepAddrTov = ISB_OBJ_1BIT_63_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_63_EEADDR_VALUEINIT;
							break;
					#endif /* ISB_OBJ_1BIT_63 */
				}
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	ee 0f       	add	r30, r30
    19c2:	ff 1f       	adc	r31, r31
    19c4:	e8 59       	subi	r30, 0x98	; 152
    19c6:	fe 4f       	sbci	r31, 0xFE	; 254
    19c8:	80 81       	ld	r24, Z
    19ca:	80 ff       	sbrs	r24, 0
    19cc:	26 c0       	rjmp	.+76     	; 0x1a1a <Isb_Obj_Init+0x19e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    19ce:	e1 99       	sbic	0x1c, 1	; 28
    19d0:	fe cf       	rjmp	.-4      	; 0x19ce <Isb_Obj_Init+0x152>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    19d2:	60 0f       	add	r22, r16
    19d4:	71 1f       	adc	r23, r17
    19d6:	7f bb       	out	0x1f, r23	; 31
    19d8:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
    19da:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    19dc:	8d b3       	in	r24, 0x1d	; 29
					Isb_Obj_1Bit[ObjIndex].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddrCtrl);
    19de:	88 83       	st	Y, r24
					if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    19e0:	fd 01       	movw	r30, r26
    19e2:	ee 0f       	add	r30, r30
    19e4:	ff 1f       	adc	r31, r31
    19e6:	ee 0f       	add	r30, r30
    19e8:	ff 1f       	adc	r31, r31
    19ea:	e4 50       	subi	r30, 0x04	; 4
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	80 81       	ld	r24, Z
    19f0:	80 ff       	sbrs	r24, 0
    19f2:	13 c0       	rjmp	.+38     	; 0x1a1a <Isb_Obj_Init+0x19e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    19f4:	e1 99       	sbic	0x1c, 1	; 28
    19f6:	fe cf       	rjmp	.-4      	; 0x19f4 <Isb_Obj_Init+0x178>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    19f8:	40 0f       	add	r20, r16
    19fa:	51 1f       	adc	r21, r17
    19fc:	5f bb       	out	0x1f, r21	; 31
    19fe:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
    1a00:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1a02:	8d b3       	in	r24, 0x1d	; 29
						Isb_Obj_1Bit[ObjIndex].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddrTov);
    1a04:	89 83       	std	Y+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1a06:	e1 99       	sbic	0x1c, 1	; 28
    1a08:	fe cf       	rjmp	.-4      	; 0x1a06 <Isb_Obj_Init+0x18a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1a0a:	20 0f       	add	r18, r16
    1a0c:	31 1f       	adc	r19, r17
    1a0e:	3f bb       	out	0x1f, r19	; 31
    1a10:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    1a12:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1a14:	8d b3       	in	r24, 0x1d	; 29
						Isb_Obj_1Bit[ObjIndex].Value = lib_eep_fw_read_byte((uint8_t *)eepAddrValueInit);
    1a16:	8a 83       	std	Y+2, r24	; 0x02
						Isb_Obj_1Bit[ObjIndex].IsChanged = FALSE;
    1a18:	1b 82       	std	Y+3, r1	; 0x03
    1a1a:	11 96       	adiw	r26, 0x01	; 1
    1a1c:	24 96       	adiw	r28, 0x04	; 4


	void Isb_Obj_Init(void) {

		#if defined(ISB_OBJ_1BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
    1a1e:	ae 30       	cpi	r26, 0x0E	; 14
    1a20:	b1 05       	cpc	r27, r1
    1a22:	09 f0       	breq	.+2      	; 0x1a26 <Isb_Obj_Init+0x1aa>
    1a24:	37 cf       	rjmp	.-402    	; 0x1894 <Isb_Obj_Init+0x18>
    1a26:	cb eb       	ldi	r28, 0xBB	; 187
    1a28:	d0 e0       	ldi	r29, 0x00	; 0
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	50 e0       	ldi	r21, 0x00	; 0
			}
		#endif /* ISB_OBJ_1BIT_MAX */

		#if defined(ISB_OBJ_4BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
				uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_4Bit_Ch_Array[ObjIndex]);
    1a2e:	fa 01       	movw	r30, r20
    1a30:	ec 58       	subi	r30, 0x8C	; 140
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	e4 91       	lpm	r30, Z+
				uint16_t eepAddrCtrl = 0;
				uint16_t eepAddrTov = 0;
				uint16_t eepAddrValueInit = 0;
				switch (ObjIndex) {
    1a36:	44 23       	and	r20, r20
    1a38:	19 f0       	breq	.+6      	; 0x1a40 <Isb_Obj_Init+0x1c4>
    1a3a:	41 30       	cpi	r20, 0x01	; 1
    1a3c:	41 f4       	brne	.+16     	; 0x1a4e <Isb_Obj_Init+0x1d2>
    1a3e:	0e c0       	rjmp	.+28     	; 0x1a5c <Isb_Obj_Init+0x1e0>
    1a40:	2e e3       	ldi	r18, 0x3E	; 62
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	6f e3       	ldi	r22, 0x3F	; 63
    1a46:	70 e0       	ldi	r23, 0x00	; 0
    1a48:	a0 e4       	ldi	r26, 0x40	; 64
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	0d c0       	rjmp	.+26     	; 0x1a68 <Isb_Obj_Init+0x1ec>
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	60 e0       	ldi	r22, 0x00	; 0
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	a0 e0       	ldi	r26, 0x00	; 0
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	06 c0       	rjmp	.+12     	; 0x1a68 <Isb_Obj_Init+0x1ec>
    1a5c:	23 e5       	ldi	r18, 0x53	; 83
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	64 e5       	ldi	r22, 0x54	; 84
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    1a64:	a5 e5       	ldi	r26, 0x55	; 85
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
							eepAddrTov = ISB_OBJ_4BIT_31_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_31_EEADDR_VALUEINIT;
							break;
					#endif /* ISB_OBJ_4BIT_31 */
				}
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	ee 0f       	add	r30, r30
    1a6c:	ff 1f       	adc	r31, r31
    1a6e:	e8 59       	subi	r30, 0x98	; 152
    1a70:	fe 4f       	sbci	r31, 0xFE	; 254
    1a72:	80 81       	ld	r24, Z
    1a74:	80 ff       	sbrs	r24, 0
    1a76:	26 c0       	rjmp	.+76     	; 0x1ac4 <Isb_Obj_Init+0x248>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1a78:	e1 99       	sbic	0x1c, 1	; 28
    1a7a:	fe cf       	rjmp	.-4      	; 0x1a78 <Isb_Obj_Init+0x1fc>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1a7c:	20 0f       	add	r18, r16
    1a7e:	31 1f       	adc	r19, r17
    1a80:	3f bb       	out	0x1f, r19	; 31
    1a82:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    1a84:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1a86:	8d b3       	in	r24, 0x1d	; 29
					Isb_Obj_4Bit[ObjIndex].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddrCtrl);
    1a88:	88 83       	st	Y, r24
					if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    1a8a:	fa 01       	movw	r30, r20
    1a8c:	ee 0f       	add	r30, r30
    1a8e:	ff 1f       	adc	r31, r31
    1a90:	ee 0f       	add	r30, r30
    1a92:	ff 1f       	adc	r31, r31
    1a94:	e5 54       	subi	r30, 0x45	; 69
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	80 81       	ld	r24, Z
    1a9a:	80 ff       	sbrs	r24, 0
    1a9c:	13 c0       	rjmp	.+38     	; 0x1ac4 <Isb_Obj_Init+0x248>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1a9e:	e1 99       	sbic	0x1c, 1	; 28
    1aa0:	fe cf       	rjmp	.-4      	; 0x1a9e <Isb_Obj_Init+0x222>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1aa2:	60 0f       	add	r22, r16
    1aa4:	71 1f       	adc	r23, r17
    1aa6:	7f bb       	out	0x1f, r23	; 31
    1aa8:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
    1aaa:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1aac:	8d b3       	in	r24, 0x1d	; 29
						Isb_Obj_4Bit[ObjIndex].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddrTov);
    1aae:	89 83       	std	Y+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1ab0:	e1 99       	sbic	0x1c, 1	; 28
    1ab2:	fe cf       	rjmp	.-4      	; 0x1ab0 <Isb_Obj_Init+0x234>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1ab4:	a0 0f       	add	r26, r16
    1ab6:	b1 1f       	adc	r27, r17
    1ab8:	bf bb       	out	0x1f, r27	; 31
    1aba:	ae bb       	out	0x1e, r26	; 30
#endif
    EECR |= (1 << EERE);
    1abc:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1abe:	8d b3       	in	r24, 0x1d	; 29
						Isb_Obj_4Bit[ObjIndex].Value = lib_eep_fw_read_byte((uint8_t *)eepAddrValueInit);
    1ac0:	8a 83       	std	Y+2, r24	; 0x02
						Isb_Obj_4Bit[ObjIndex].IsChanged = FALSE;
    1ac2:	1b 82       	std	Y+3, r1	; 0x03
    1ac4:	4f 5f       	subi	r20, 0xFF	; 255
    1ac6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac8:	24 96       	adiw	r28, 0x04	; 4
				}
			}
		#endif /* ISB_OBJ_1BIT_MAX */

		#if defined(ISB_OBJ_4BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
    1aca:	42 30       	cpi	r20, 0x02	; 2
    1acc:	51 05       	cpc	r21, r1
    1ace:	09 f0       	breq	.+2      	; 0x1ad2 <Isb_Obj_Init+0x256>
    1ad0:	ae cf       	rjmp	.-164    	; 0x1a2e <Isb_Obj_Init+0x1b2>
    1ad2:	c4 ec       	ldi	r28, 0xC4	; 196
    1ad4:	d0 e0       	ldi	r29, 0x00	; 0
    1ad6:	40 e0       	ldi	r20, 0x00	; 0
    1ad8:	50 e0       	ldi	r21, 0x00	; 0
			}
		#endif /* ISB_OBJ_4BIT_MAX */

		#if defined(ISB_OBJ_8BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
				uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_8Bit_Ch_Array[ObjIndex]);
    1ada:	fa 01       	movw	r30, r20
    1adc:	ea 58       	subi	r30, 0x8A	; 138
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	e4 91       	lpm	r30, Z+
				uint16_t eepAddrCtrl = 0;
				uint16_t eepAddrTov = 0;
				uint16_t eepAddrValueInit = 0;
				switch (ObjIndex) {
    1ae2:	44 23       	and	r20, r20
    1ae4:	19 f0       	breq	.+6      	; 0x1aec <Isb_Obj_Init+0x270>
    1ae6:	41 30       	cpi	r20, 0x01	; 1
    1ae8:	41 f4       	brne	.+16     	; 0x1afa <Isb_Obj_Init+0x27e>
    1aea:	0e c0       	rjmp	.+28     	; 0x1b08 <Isb_Obj_Init+0x28c>
    1aec:	21 e4       	ldi	r18, 0x41	; 65
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	62 e4       	ldi	r22, 0x42	; 66
    1af2:	70 e0       	ldi	r23, 0x00	; 0
    1af4:	a3 e4       	ldi	r26, 0x43	; 67
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	0d c0       	rjmp	.+26     	; 0x1b14 <Isb_Obj_Init+0x298>
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	a0 e0       	ldi	r26, 0x00	; 0
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	06 c0       	rjmp	.+12     	; 0x1b14 <Isb_Obj_Init+0x298>
    1b08:	26 e5       	ldi	r18, 0x56	; 86
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	67 e5       	ldi	r22, 0x57	; 87
    1b0e:	70 e0       	ldi	r23, 0x00	; 0
    1b10:	a8 e5       	ldi	r26, 0x58	; 88
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
							eepAddrTov = ISB_OBJ_8BIT_31_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_31_EEADDR_VALUEINIT;
							break;
					#endif /* ISB_OBJ_8BIT_31 */
				}
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	ee 0f       	add	r30, r30
    1b18:	ff 1f       	adc	r31, r31
    1b1a:	e8 59       	subi	r30, 0x98	; 152
    1b1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b1e:	80 81       	ld	r24, Z
    1b20:	80 ff       	sbrs	r24, 0
    1b22:	26 c0       	rjmp	.+76     	; 0x1b70 <Isb_Obj_Init+0x2f4>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1b24:	e1 99       	sbic	0x1c, 1	; 28
    1b26:	fe cf       	rjmp	.-4      	; 0x1b24 <Isb_Obj_Init+0x2a8>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1b28:	20 0f       	add	r18, r16
    1b2a:	31 1f       	adc	r19, r17
    1b2c:	3f bb       	out	0x1f, r19	; 31
    1b2e:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    1b30:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1b32:	8d b3       	in	r24, 0x1d	; 29
					Isb_Obj_8Bit[ObjIndex].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddrCtrl);
    1b34:	88 83       	st	Y, r24
					if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    1b36:	fa 01       	movw	r30, r20
    1b38:	ee 0f       	add	r30, r30
    1b3a:	ff 1f       	adc	r31, r31
    1b3c:	ee 0f       	add	r30, r30
    1b3e:	ff 1f       	adc	r31, r31
    1b40:	ec 53       	subi	r30, 0x3C	; 60
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	80 81       	ld	r24, Z
    1b46:	80 ff       	sbrs	r24, 0
    1b48:	13 c0       	rjmp	.+38     	; 0x1b70 <Isb_Obj_Init+0x2f4>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1b4a:	e1 99       	sbic	0x1c, 1	; 28
    1b4c:	fe cf       	rjmp	.-4      	; 0x1b4a <Isb_Obj_Init+0x2ce>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1b4e:	60 0f       	add	r22, r16
    1b50:	71 1f       	adc	r23, r17
    1b52:	7f bb       	out	0x1f, r23	; 31
    1b54:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
    1b56:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1b58:	8d b3       	in	r24, 0x1d	; 29
						Isb_Obj_8Bit[ObjIndex].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddrTov);
    1b5a:	89 83       	std	Y+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1b5c:	e1 99       	sbic	0x1c, 1	; 28
    1b5e:	fe cf       	rjmp	.-4      	; 0x1b5c <Isb_Obj_Init+0x2e0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1b60:	a0 0f       	add	r26, r16
    1b62:	b1 1f       	adc	r27, r17
    1b64:	bf bb       	out	0x1f, r27	; 31
    1b66:	ae bb       	out	0x1e, r26	; 30
#endif
    EECR |= (1 << EERE);
    1b68:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1b6a:	8d b3       	in	r24, 0x1d	; 29
						Isb_Obj_8Bit[ObjIndex].Value = lib_eep_fw_read_byte((uint8_t *)eepAddrValueInit);
    1b6c:	8a 83       	std	Y+2, r24	; 0x02
						Isb_Obj_8Bit[ObjIndex].IsChanged = FALSE;
    1b6e:	1b 82       	std	Y+3, r1	; 0x03
    1b70:	4f 5f       	subi	r20, 0xFF	; 255
    1b72:	5f 4f       	sbci	r21, 0xFF	; 255
    1b74:	24 96       	adiw	r28, 0x04	; 4
				}
			}
		#endif /* ISB_OBJ_4BIT_MAX */

		#if defined(ISB_OBJ_8BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
    1b76:	42 30       	cpi	r20, 0x02	; 2
    1b78:	51 05       	cpc	r21, r1
    1b7a:	09 f0       	breq	.+2      	; 0x1b7e <Isb_Obj_Init+0x302>
    1b7c:	ae cf       	rjmp	.-164    	; 0x1ada <Isb_Obj_Init+0x25e>
					}
				}
			}
		#endif /* ISB_OBJ_FLOAT_MAX */

	}
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	08 95       	ret

00001b88 <Isb_Grp_Init>:
#ifndef ISB_GRP_C_
	#define ISB_GRP_C_



	void Isb_Grp_Init(void) {
    1b88:	80 91 96 00 	lds	r24, 0x0096
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	24 5a       	subi	r18, 0xA4	; 164
    1b92:	3f 4f       	sbci	r19, 0xFF	; 255
    1b94:	ec ec       	ldi	r30, 0xCC	; 204
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1b98:	e1 99       	sbic	0x1c, 1	; 28
    1b9a:	fe cf       	rjmp	.-4      	; 0x1b98 <Isb_Grp_Init+0x10>
    1b9c:	22 50       	subi	r18, 0x02	; 2
    1b9e:	30 40       	sbci	r19, 0x00	; 0
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1ba0:	3f bb       	out	0x1f, r19	; 31
    1ba2:	2e bb       	out	0x1e, r18	; 30
    1ba4:	2e 5f       	subi	r18, 0xFE	; 254
    1ba6:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
    EECR |= (1 << EERE);
    1ba8:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1baa:	9d b3       	in	r25, 0x1d	; 29
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1bac:	e1 99       	sbic	0x1c, 1	; 28
    1bae:	fe cf       	rjmp	.-4      	; 0x1bac <Isb_Grp_Init+0x24>
    1bb0:	21 50       	subi	r18, 0x01	; 1
    1bb2:	30 40       	sbci	r19, 0x00	; 0
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1bb4:	3f bb       	out	0x1f, r19	; 31
    1bb6:	2e bb       	out	0x1e, r18	; 30
    1bb8:	2f 5f       	subi	r18, 0xFF	; 255
    1bba:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
    EECR |= (1 << EERE);
    1bbc:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1bbe:	8d b3       	in	r24, 0x1d	; 29
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
			Isb_Grp[GrpIndex].Id = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3));
			Isb_Grp[GrpIndex].Id |= lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 1)) << 8;
    1bc0:	58 2f       	mov	r21, r24
    1bc2:	40 e0       	ldi	r20, 0x00	; 0
    1bc4:	89 2f       	mov	r24, r25
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	84 2b       	or	r24, r20
    1bca:	95 2b       	or	r25, r21
    1bcc:	91 83       	std	Z+1, r25	; 0x01
    1bce:	80 83       	st	Z, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1bd0:	e1 99       	sbic	0x1c, 1	; 28
    1bd2:	fe cf       	rjmp	.-4      	; 0x1bd0 <Isb_Grp_Init+0x48>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1bd4:	3f bb       	out	0x1f, r19	; 31
    1bd6:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    1bd8:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1bda:	8d b3       	in	r24, 0x1d	; 29
			Isb_Grp[GrpIndex].Obj = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 2));
    1bdc:	82 83       	std	Z+2, r24	; 0x02
    1bde:	2d 5f       	subi	r18, 0xFD	; 253
    1be0:	3f 4f       	sbci	r19, 0xFF	; 255
    1be2:	33 96       	adiw	r30, 0x03	; 3
	#define ISB_GRP_C_



	void Isb_Grp_Init(void) {
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	ec 3f       	cpi	r30, 0xFC	; 252
    1be8:	f8 07       	cpc	r31, r24
    1bea:	b1 f6       	brne	.-84     	; 0x1b98 <Isb_Grp_Init+0x10>
			Isb_Grp[GrpIndex].Id = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3));
			Isb_Grp[GrpIndex].Id |= lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 1)) << 8;
			Isb_Grp[GrpIndex].Obj = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 2));
		}
	}
    1bec:	08 95       	ret

00001bee <Node_Reboot>:
	#include "./../lib/isb_obj.c"
	#include "./../lib/isb_grp.c"



	void Node_Reboot(void) {
    1bee:	ff cf       	rjmp	.-2      	; 0x1bee <Node_Reboot>

00001bf0 <Isb_SendMsg>:
		while (1) ;
	}



	void Isb_SendMsg(Isb_Msg_t * aMsg) {
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
    1bf4:	ec 01       	movw	r28, r24
		#endif /* ISB_INF_USART0 == 1 */
		#if ISB_INF_USART1 == 1
			Isb_Inf_Usart_Tx(1, aMsg);
		#endif /* ISB_INF_USART1 == 1 */
		#if ISB_INF_CAN0 == 1
			Isb_Inf_Can_Tx(0, aMsg);
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	be 01       	movw	r22, r28
    1bfa:	0e 94 ed 03 	call	0x7da	; 0x7da <Isb_Inf_Can_Tx>
			Isb_Inf_Can_Tx(1, aMsg);
		#endif /* ISB_INF_CAN1 == 1 */
		#if ISB_INF_CAN2 == 1
			Isb_Inf_Can_Tx(2, aMsg);
		#endif /* ISB_INF_CAN2 == 1 */
		if ((aMsg->Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_MULTICAST) {
    1bfe:	88 81       	ld	r24, Y
    1c00:	80 73       	andi	r24, 0x30	; 48
    1c02:	80 32       	cpi	r24, 0x20	; 32
    1c04:	39 f4       	brne	.+14     	; 0x1c14 <Isb_SendMsg+0x24>
			if (Error == 0) {
    1c06:	80 91 98 00 	lds	r24, 0x0098
    1c0a:	88 23       	and	r24, r24
    1c0c:	19 f4       	brne	.+6      	; 0x1c14 <Isb_SendMsg+0x24>
				Isb_Obj_Rx(aMsg);
    1c0e:	ce 01       	movw	r24, r28
    1c10:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Isb_Obj_Rx>
			}
		}
	}
    1c14:	df 91       	pop	r29
    1c16:	cf 91       	pop	r28
    1c18:	08 95       	ret

00001c1a <Isb_Obj_Rx>:

	}



	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg) {
    1c1a:	3f 92       	push	r3
    1c1c:	4f 92       	push	r4
    1c1e:	5f 92       	push	r5
    1c20:	6f 92       	push	r6
    1c22:	7f 92       	push	r7
    1c24:	8f 92       	push	r8
    1c26:	9f 92       	push	r9
    1c28:	af 92       	push	r10
    1c2a:	bf 92       	push	r11
    1c2c:	cf 92       	push	r12
    1c2e:	df 92       	push	r13
    1c30:	ef 92       	push	r14
    1c32:	ff 92       	push	r15
    1c34:	0f 93       	push	r16
    1c36:	1f 93       	push	r17
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	2d 97       	sbiw	r28, 0x0d	; 13
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	8c 01       	movw	r16, r24
    1c4e:	fc ec       	ldi	r31, 0xCC	; 204
    1c50:	8f 2e       	mov	r8, r31
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	9f 2e       	mov	r9, r31
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE) {
											if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE)) {
												if (aIsb_Msg->Data[2] == Isb_Obj_1Bit[ObjIndex].Tov) {
													if (Isb_Obj_1Bit[ObjIndex].Value != aIsb_Msg->Data[3]) {
														Isb_Obj_1Bit[ObjIndex].Value = aIsb_Msg->Data[3];
														Isb_Obj_1Bit[ObjIndex].IsChanged = TRUE;
    1c56:	44 24       	eor	r4, r4
    1c58:	43 94       	inc	r4
												TxMsg.SourceId = Isb_Node_Id;
												TxMsg.Data[0] = ISB_MSG_TOP_1BIT;
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
												TxMsg.Data[2] = Isb_Obj_1Bit[ObjIndex].Tov;
												TxMsg.Data[3] = Isb_Obj_1Bit[ObjIndex].Value;
												Isb_SendMsg(&TxMsg);
    1c5a:	3e 01       	movw	r6, r28
    1c5c:	08 94       	sec
    1c5e:	61 1c       	adc	r6, r1
    1c60:	71 1c       	adc	r7, r1
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE) {
											if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE)) {
												if (aIsb_Msg->Data[2] == Isb_Obj_8Bit[ObjIndex].Tov) {
													if (Isb_Obj_8Bit[ObjIndex].Value != aIsb_Msg->Data[3]) {
														Isb_Obj_8Bit[ObjIndex].Value = aIsb_Msg->Data[3];
														Isb_Obj_8Bit[ObjIndex].IsChanged = TRUE;
    1c62:	33 24       	eor	r3, r3
    1c64:	33 94       	inc	r3
								if ((aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK) == ISB_MSG_FLAGS_DLC_4) {
									if (aIsb_Msg->Data[0] == ISB_MSG_TOP_8BIT) {
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ) {
											if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ)) {
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    1c66:	e4 e2       	ldi	r30, 0x24	; 36
    1c68:	5e 2e       	mov	r5, r30



	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg) {
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
			if ((aIsb_Msg->DestId == Isb_Grp[GrpIndex].Id) & (aIsb_Msg->DestId != 0)) {
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	21 81       	ldd	r18, Z+1	; 0x01
    1c6e:	32 81       	ldd	r19, Z+2	; 0x02
    1c70:	f4 01       	movw	r30, r8
    1c72:	80 81       	ld	r24, Z
    1c74:	91 81       	ldd	r25, Z+1	; 0x01
    1c76:	28 17       	cp	r18, r24
    1c78:	39 07       	cpc	r19, r25
    1c7a:	09 f0       	breq	.+2      	; 0x1c7e <Isb_Obj_Rx+0x64>
    1c7c:	77 c1       	rjmp	.+750    	; 0x1f6c <Isb_Obj_Rx+0x352>
    1c7e:	23 2b       	or	r18, r19
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <Isb_Obj_Rx+0x6a>
    1c82:	74 c1       	rjmp	.+744    	; 0x1f6c <Isb_Obj_Rx+0x352>
    1c84:	7d ef       	ldi	r23, 0xFD	; 253
    1c86:	e7 2e       	mov	r14, r23
    1c88:	70 e0       	ldi	r23, 0x00	; 0
    1c8a:	f7 2e       	mov	r15, r23
    1c8c:	aa 24       	eor	r10, r10
    1c8e:	bb 24       	eor	r11, r11

				#if defined(ISB_OBJ_1BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
//						uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_1Bit_Ch_Array[ObjIndex]);
						uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_1Bit_Obj_Array[ObjIndex]);
    1c90:	f5 01       	movw	r30, r10
    1c92:	ec 5a       	subi	r30, 0xAC	; 172
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	94 91       	lpm	r25, Z+
						if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    1c98:	65 01       	movw	r12, r10
    1c9a:	cc 0c       	add	r12, r12
    1c9c:	dd 1c       	adc	r13, r13
    1c9e:	cc 0c       	add	r12, r12
    1ca0:	dd 1c       	adc	r13, r13
    1ca2:	2c ef       	ldi	r18, 0xFC	; 252
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	c2 0e       	add	r12, r18
    1ca8:	d3 1e       	adc	r13, r19
    1caa:	f6 01       	movw	r30, r12
    1cac:	80 81       	ld	r24, Z
    1cae:	80 ff       	sbrs	r24, 0
    1cb0:	59 c0       	rjmp	.+178    	; 0x1d64 <Isb_Obj_Rx+0x14a>
							if (Obj == Isb_Grp[GrpIndex].Obj) {
    1cb2:	f4 01       	movw	r30, r8
    1cb4:	82 81       	ldd	r24, Z+2	; 0x02
    1cb6:	98 17       	cp	r25, r24
    1cb8:	09 f0       	breq	.+2      	; 0x1cbc <Isb_Obj_Rx+0xa2>
    1cba:	54 c0       	rjmp	.+168    	; 0x1d64 <Isb_Obj_Rx+0x14a>
								if ((aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK) == ISB_MSG_FLAGS_DLC_4) {
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	80 81       	ld	r24, Z
    1cc0:	8f 70       	andi	r24, 0x0F	; 15
    1cc2:	84 30       	cpi	r24, 0x04	; 4
    1cc4:	09 f0       	breq	.+2      	; 0x1cc8 <Isb_Obj_Rx+0xae>
    1cc6:	4e c0       	rjmp	.+156    	; 0x1d64 <Isb_Obj_Rx+0x14a>
									if (aIsb_Msg->Data[0] == ISB_MSG_TOP_1BIT) {
    1cc8:	25 81       	ldd	r18, Z+5	; 0x05
    1cca:	21 30       	cpi	r18, 0x01	; 1
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <Isb_Obj_Rx+0xb6>
    1cce:	4a c0       	rjmp	.+148    	; 0x1d64 <Isb_Obj_Rx+0x14a>
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ) {
    1cd0:	86 81       	ldd	r24, Z+6	; 0x06
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	83 70       	andi	r24, 0x03	; 3
    1cd6:	90 70       	andi	r25, 0x00	; 0
    1cd8:	89 2b       	or	r24, r25
    1cda:	d1 f4       	brne	.+52     	; 0x1d10 <Isb_Obj_Rx+0xf6>
											if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ)) {
    1cdc:	f6 01       	movw	r30, r12
    1cde:	80 81       	ld	r24, Z
    1ce0:	81 ff       	sbrs	r24, 1
    1ce2:	16 c0       	rjmp	.+44     	; 0x1d10 <Isb_Obj_Rx+0xf6>
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    1ce4:	59 82       	std	Y+1, r5	; 0x01
												TxMsg.DestId = aIsb_Msg->DestId;
    1ce6:	f8 01       	movw	r30, r16
    1ce8:	81 81       	ldd	r24, Z+1	; 0x01
    1cea:	92 81       	ldd	r25, Z+2	; 0x02
    1cec:	9b 83       	std	Y+3, r25	; 0x03
    1cee:	8a 83       	std	Y+2, r24	; 0x02
												TxMsg.SourceId = Isb_Node_Id;
    1cf0:	80 91 94 00 	lds	r24, 0x0094
    1cf4:	90 91 95 00 	lds	r25, 0x0095
    1cf8:	9d 83       	std	Y+5, r25	; 0x05
    1cfa:	8c 83       	std	Y+4, r24	; 0x04
												TxMsg.Data[0] = ISB_MSG_TOP_1BIT;
    1cfc:	2e 83       	std	Y+6, r18	; 0x06
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
    1cfe:	2f 83       	std	Y+7, r18	; 0x07
												TxMsg.Data[2] = Isb_Obj_1Bit[ObjIndex].Tov;
    1d00:	f7 01       	movw	r30, r14
    1d02:	80 81       	ld	r24, Z
    1d04:	88 87       	std	Y+8, r24	; 0x08
												TxMsg.Data[3] = Isb_Obj_1Bit[ObjIndex].Value;
    1d06:	81 81       	ldd	r24, Z+1	; 0x01
    1d08:	89 87       	std	Y+9, r24	; 0x09
												Isb_SendMsg(&TxMsg);
    1d0a:	c3 01       	movw	r24, r6
    1d0c:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <Isb_SendMsg>
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_ANSWER) {
    1d10:	f8 01       	movw	r30, r16
    1d12:	86 81       	ldd	r24, Z+6	; 0x06
    1d14:	83 70       	andi	r24, 0x03	; 3
    1d16:	81 30       	cpi	r24, 0x01	; 1
    1d18:	71 f4       	brne	.+28     	; 0x1d36 <Isb_Obj_Rx+0x11c>
											if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_UPDATE)) {
    1d1a:	f6 01       	movw	r30, r12
    1d1c:	80 81       	ld	r24, Z
    1d1e:	84 ff       	sbrs	r24, 4
    1d20:	0a c0       	rjmp	.+20     	; 0x1d36 <Isb_Obj_Rx+0x11c>
												if (aIsb_Msg->Data[2] == Isb_Obj_1Bit[ObjIndex].Tov) {
    1d22:	f8 01       	movw	r30, r16
    1d24:	97 81       	ldd	r25, Z+7	; 0x07
    1d26:	f7 01       	movw	r30, r14
    1d28:	80 81       	ld	r24, Z
    1d2a:	98 17       	cp	r25, r24
    1d2c:	21 f4       	brne	.+8      	; 0x1d36 <Isb_Obj_Rx+0x11c>
													Isb_Obj_1Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    1d2e:	f8 01       	movw	r30, r16
    1d30:	80 85       	ldd	r24, Z+8	; 0x08
    1d32:	f7 01       	movw	r30, r14
    1d34:	81 83       	std	Z+1, r24	; 0x01
												}
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE) {
    1d36:	f8 01       	movw	r30, r16
    1d38:	86 81       	ldd	r24, Z+6	; 0x06
    1d3a:	83 70       	andi	r24, 0x03	; 3
    1d3c:	82 30       	cpi	r24, 0x02	; 2
    1d3e:	91 f4       	brne	.+36     	; 0x1d64 <Isb_Obj_Rx+0x14a>
											if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE)) {
    1d40:	f6 01       	movw	r30, r12
    1d42:	80 81       	ld	r24, Z
    1d44:	82 ff       	sbrs	r24, 2
    1d46:	0e c0       	rjmp	.+28     	; 0x1d64 <Isb_Obj_Rx+0x14a>
												if (aIsb_Msg->Data[2] == Isb_Obj_1Bit[ObjIndex].Tov) {
    1d48:	f8 01       	movw	r30, r16
    1d4a:	97 81       	ldd	r25, Z+7	; 0x07
    1d4c:	f7 01       	movw	r30, r14
    1d4e:	80 81       	ld	r24, Z
    1d50:	98 17       	cp	r25, r24
    1d52:	41 f4       	brne	.+16     	; 0x1d64 <Isb_Obj_Rx+0x14a>
													if (Isb_Obj_1Bit[ObjIndex].Value != aIsb_Msg->Data[3]) {
    1d54:	f8 01       	movw	r30, r16
    1d56:	90 85       	ldd	r25, Z+8	; 0x08
    1d58:	f7 01       	movw	r30, r14
    1d5a:	81 81       	ldd	r24, Z+1	; 0x01
    1d5c:	89 17       	cp	r24, r25
    1d5e:	11 f0       	breq	.+4      	; 0x1d64 <Isb_Obj_Rx+0x14a>
														Isb_Obj_1Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    1d60:	91 83       	std	Z+1, r25	; 0x01
														Isb_Obj_1Bit[ObjIndex].IsChanged = TRUE;
    1d62:	42 82       	std	Z+2, r4	; 0x02
    1d64:	08 94       	sec
    1d66:	a1 1c       	adc	r10, r1
    1d68:	b1 1c       	adc	r11, r1
    1d6a:	24 e0       	ldi	r18, 0x04	; 4
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	e2 0e       	add	r14, r18
    1d70:	f3 1e       	adc	r15, r19
	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg) {
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
			if ((aIsb_Msg->DestId == Isb_Grp[GrpIndex].Id) & (aIsb_Msg->DestId != 0)) {

				#if defined(ISB_OBJ_1BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
    1d72:	3e e0       	ldi	r19, 0x0E	; 14
    1d74:	a3 16       	cp	r10, r19
    1d76:	b1 04       	cpc	r11, r1
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <Isb_Obj_Rx+0x162>
    1d7a:	8a cf       	rjmp	.-236    	; 0x1c90 <Isb_Obj_Rx+0x76>
    1d7c:	5c eb       	ldi	r21, 0xBC	; 188
    1d7e:	e5 2e       	mov	r14, r21
    1d80:	50 e0       	ldi	r21, 0x00	; 0
    1d82:	f5 2e       	mov	r15, r21
    1d84:	aa 24       	eor	r10, r10
    1d86:	bb 24       	eor	r11, r11
				#endif /* ISB_OBJ_1BIT_MAX */

				#if defined(ISB_OBJ_4BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
//						uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_4Bit_Ch_Array[ObjIndex]);
						uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_4Bit_Obj_Array[ObjIndex]);
    1d88:	f5 01       	movw	r30, r10
    1d8a:	ee 59       	subi	r30, 0x9E	; 158
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	94 91       	lpm	r25, Z+
						if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    1d90:	65 01       	movw	r12, r10
    1d92:	cc 0c       	add	r12, r12
    1d94:	dd 1c       	adc	r13, r13
    1d96:	cc 0c       	add	r12, r12
    1d98:	dd 1c       	adc	r13, r13
    1d9a:	eb eb       	ldi	r30, 0xBB	; 187
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	ce 0e       	add	r12, r30
    1da0:	df 1e       	adc	r13, r31
    1da2:	f6 01       	movw	r30, r12
    1da4:	80 81       	ld	r24, Z
    1da6:	80 ff       	sbrs	r24, 0
    1da8:	59 c0       	rjmp	.+178    	; 0x1e5c <Isb_Obj_Rx+0x242>
							if (Obj == Isb_Grp[GrpIndex].Obj) {
    1daa:	f4 01       	movw	r30, r8
    1dac:	82 81       	ldd	r24, Z+2	; 0x02
    1dae:	98 17       	cp	r25, r24
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <Isb_Obj_Rx+0x19a>
    1db2:	54 c0       	rjmp	.+168    	; 0x1e5c <Isb_Obj_Rx+0x242>
								if ((aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK) == ISB_MSG_FLAGS_DLC_4) {
    1db4:	f8 01       	movw	r30, r16
    1db6:	80 81       	ld	r24, Z
    1db8:	8f 70       	andi	r24, 0x0F	; 15
    1dba:	84 30       	cpi	r24, 0x04	; 4
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <Isb_Obj_Rx+0x1a6>
    1dbe:	4e c0       	rjmp	.+156    	; 0x1e5c <Isb_Obj_Rx+0x242>
									if (aIsb_Msg->Data[0] == ISB_MSG_TOP_4BIT) {
    1dc0:	25 81       	ldd	r18, Z+5	; 0x05
    1dc2:	22 30       	cpi	r18, 0x02	; 2
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <Isb_Obj_Rx+0x1ae>
    1dc6:	4a c0       	rjmp	.+148    	; 0x1e5c <Isb_Obj_Rx+0x242>
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ) {
    1dc8:	86 81       	ldd	r24, Z+6	; 0x06
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	83 70       	andi	r24, 0x03	; 3
    1dce:	90 70       	andi	r25, 0x00	; 0
    1dd0:	89 2b       	or	r24, r25
    1dd2:	d1 f4       	brne	.+52     	; 0x1e08 <Isb_Obj_Rx+0x1ee>
											if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ)) {
    1dd4:	f6 01       	movw	r30, r12
    1dd6:	80 81       	ld	r24, Z
    1dd8:	81 ff       	sbrs	r24, 1
    1dda:	16 c0       	rjmp	.+44     	; 0x1e08 <Isb_Obj_Rx+0x1ee>
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    1ddc:	59 82       	std	Y+1, r5	; 0x01
												TxMsg.DestId = aIsb_Msg->DestId;
    1dde:	f8 01       	movw	r30, r16
    1de0:	81 81       	ldd	r24, Z+1	; 0x01
    1de2:	92 81       	ldd	r25, Z+2	; 0x02
    1de4:	9b 83       	std	Y+3, r25	; 0x03
    1de6:	8a 83       	std	Y+2, r24	; 0x02
												TxMsg.SourceId = Isb_Node_Id;
    1de8:	80 91 94 00 	lds	r24, 0x0094
    1dec:	90 91 95 00 	lds	r25, 0x0095
    1df0:	9d 83       	std	Y+5, r25	; 0x05
    1df2:	8c 83       	std	Y+4, r24	; 0x04
												TxMsg.Data[0] = ISB_MSG_TOP_4BIT;
    1df4:	2e 83       	std	Y+6, r18	; 0x06
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
    1df6:	3f 82       	std	Y+7, r3	; 0x07
												TxMsg.Data[2] = Isb_Obj_4Bit[ObjIndex].Tov;
    1df8:	f7 01       	movw	r30, r14
    1dfa:	80 81       	ld	r24, Z
    1dfc:	88 87       	std	Y+8, r24	; 0x08
												TxMsg.Data[3] = Isb_Obj_4Bit[ObjIndex].Value;
    1dfe:	81 81       	ldd	r24, Z+1	; 0x01
    1e00:	89 87       	std	Y+9, r24	; 0x09
												Isb_SendMsg(&TxMsg);
    1e02:	c3 01       	movw	r24, r6
    1e04:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <Isb_SendMsg>
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_ANSWER) {
    1e08:	f8 01       	movw	r30, r16
    1e0a:	86 81       	ldd	r24, Z+6	; 0x06
    1e0c:	83 70       	andi	r24, 0x03	; 3
    1e0e:	81 30       	cpi	r24, 0x01	; 1
    1e10:	71 f4       	brne	.+28     	; 0x1e2e <Isb_Obj_Rx+0x214>
											if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_UPDATE)) {
    1e12:	f6 01       	movw	r30, r12
    1e14:	80 81       	ld	r24, Z
    1e16:	84 ff       	sbrs	r24, 4
    1e18:	0a c0       	rjmp	.+20     	; 0x1e2e <Isb_Obj_Rx+0x214>
												if (aIsb_Msg->Data[2] == Isb_Obj_4Bit[ObjIndex].Tov) {
    1e1a:	f8 01       	movw	r30, r16
    1e1c:	97 81       	ldd	r25, Z+7	; 0x07
    1e1e:	f7 01       	movw	r30, r14
    1e20:	80 81       	ld	r24, Z
    1e22:	98 17       	cp	r25, r24
    1e24:	21 f4       	brne	.+8      	; 0x1e2e <Isb_Obj_Rx+0x214>
													Isb_Obj_4Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    1e26:	f8 01       	movw	r30, r16
    1e28:	80 85       	ldd	r24, Z+8	; 0x08
    1e2a:	f7 01       	movw	r30, r14
    1e2c:	81 83       	std	Z+1, r24	; 0x01
												}
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE) {
    1e2e:	f8 01       	movw	r30, r16
    1e30:	86 81       	ldd	r24, Z+6	; 0x06
    1e32:	83 70       	andi	r24, 0x03	; 3
    1e34:	82 30       	cpi	r24, 0x02	; 2
    1e36:	91 f4       	brne	.+36     	; 0x1e5c <Isb_Obj_Rx+0x242>
											if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE)) {
    1e38:	f6 01       	movw	r30, r12
    1e3a:	80 81       	ld	r24, Z
    1e3c:	82 ff       	sbrs	r24, 2
    1e3e:	0e c0       	rjmp	.+28     	; 0x1e5c <Isb_Obj_Rx+0x242>
												if (aIsb_Msg->Data[2] == Isb_Obj_4Bit[ObjIndex].Tov) {
    1e40:	f8 01       	movw	r30, r16
    1e42:	97 81       	ldd	r25, Z+7	; 0x07
    1e44:	f7 01       	movw	r30, r14
    1e46:	80 81       	ld	r24, Z
    1e48:	98 17       	cp	r25, r24
    1e4a:	41 f4       	brne	.+16     	; 0x1e5c <Isb_Obj_Rx+0x242>
													if (Isb_Obj_4Bit[ObjIndex].Value != aIsb_Msg->Data[3]) {
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	90 85       	ldd	r25, Z+8	; 0x08
    1e50:	f7 01       	movw	r30, r14
    1e52:	81 81       	ldd	r24, Z+1	; 0x01
    1e54:	89 17       	cp	r24, r25
    1e56:	11 f0       	breq	.+4      	; 0x1e5c <Isb_Obj_Rx+0x242>
														Isb_Obj_4Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    1e58:	91 83       	std	Z+1, r25	; 0x01
														Isb_Obj_4Bit[ObjIndex].IsChanged = TRUE;
    1e5a:	42 82       	std	Z+2, r4	; 0x02
    1e5c:	08 94       	sec
    1e5e:	a1 1c       	adc	r10, r1
    1e60:	b1 1c       	adc	r11, r1
    1e62:	24 e0       	ldi	r18, 0x04	; 4
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	e2 0e       	add	r14, r18
    1e68:	f3 1e       	adc	r15, r19
						}
					}
				#endif /* ISB_OBJ_1BIT_MAX */

				#if defined(ISB_OBJ_4BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
    1e6a:	32 e0       	ldi	r19, 0x02	; 2
    1e6c:	a3 16       	cp	r10, r19
    1e6e:	b1 04       	cpc	r11, r1
    1e70:	09 f0       	breq	.+2      	; 0x1e74 <Isb_Obj_Rx+0x25a>
    1e72:	8a cf       	rjmp	.-236    	; 0x1d88 <Isb_Obj_Rx+0x16e>
    1e74:	35 ec       	ldi	r19, 0xC5	; 197
    1e76:	e3 2e       	mov	r14, r19
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	f3 2e       	mov	r15, r19
    1e7c:	aa 24       	eor	r10, r10
    1e7e:	bb 24       	eor	r11, r11
				#endif /* ISB_OBJ_4BIT_MAX */

				#if defined(ISB_OBJ_8BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
//						uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_8Bit_Ch_Array[ObjIndex]);
						uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_8Bit_Obj_Array[ObjIndex]);
    1e80:	f5 01       	movw	r30, r10
    1e82:	ec 59       	subi	r30, 0x9C	; 156
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	94 91       	lpm	r25, Z+
						if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    1e88:	65 01       	movw	r12, r10
    1e8a:	cc 0c       	add	r12, r12
    1e8c:	dd 1c       	adc	r13, r13
    1e8e:	cc 0c       	add	r12, r12
    1e90:	dd 1c       	adc	r13, r13
    1e92:	e4 ec       	ldi	r30, 0xC4	; 196
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	ce 0e       	add	r12, r30
    1e98:	df 1e       	adc	r13, r31
    1e9a:	f6 01       	movw	r30, r12
    1e9c:	80 81       	ld	r24, Z
    1e9e:	80 ff       	sbrs	r24, 0
    1ea0:	59 c0       	rjmp	.+178    	; 0x1f54 <Isb_Obj_Rx+0x33a>
							if (Obj == Isb_Grp[GrpIndex].Obj) {
    1ea2:	f4 01       	movw	r30, r8
    1ea4:	82 81       	ldd	r24, Z+2	; 0x02
    1ea6:	98 17       	cp	r25, r24
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <Isb_Obj_Rx+0x292>
    1eaa:	54 c0       	rjmp	.+168    	; 0x1f54 <Isb_Obj_Rx+0x33a>
								if ((aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK) == ISB_MSG_FLAGS_DLC_4) {
    1eac:	f8 01       	movw	r30, r16
    1eae:	80 81       	ld	r24, Z
    1eb0:	8f 70       	andi	r24, 0x0F	; 15
    1eb2:	84 30       	cpi	r24, 0x04	; 4
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <Isb_Obj_Rx+0x29e>
    1eb6:	4e c0       	rjmp	.+156    	; 0x1f54 <Isb_Obj_Rx+0x33a>
									if (aIsb_Msg->Data[0] == ISB_MSG_TOP_8BIT) {
    1eb8:	25 81       	ldd	r18, Z+5	; 0x05
    1eba:	23 30       	cpi	r18, 0x03	; 3
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <Isb_Obj_Rx+0x2a6>
    1ebe:	4a c0       	rjmp	.+148    	; 0x1f54 <Isb_Obj_Rx+0x33a>
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ) {
    1ec0:	86 81       	ldd	r24, Z+6	; 0x06
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	83 70       	andi	r24, 0x03	; 3
    1ec6:	90 70       	andi	r25, 0x00	; 0
    1ec8:	89 2b       	or	r24, r25
    1eca:	d1 f4       	brne	.+52     	; 0x1f00 <Isb_Obj_Rx+0x2e6>
											if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ)) {
    1ecc:	f6 01       	movw	r30, r12
    1ece:	80 81       	ld	r24, Z
    1ed0:	81 ff       	sbrs	r24, 1
    1ed2:	16 c0       	rjmp	.+44     	; 0x1f00 <Isb_Obj_Rx+0x2e6>
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    1ed4:	59 82       	std	Y+1, r5	; 0x01
												TxMsg.DestId = aIsb_Msg->DestId;
    1ed6:	f8 01       	movw	r30, r16
    1ed8:	81 81       	ldd	r24, Z+1	; 0x01
    1eda:	92 81       	ldd	r25, Z+2	; 0x02
    1edc:	9b 83       	std	Y+3, r25	; 0x03
    1ede:	8a 83       	std	Y+2, r24	; 0x02
												TxMsg.SourceId = Isb_Node_Id;
    1ee0:	80 91 94 00 	lds	r24, 0x0094
    1ee4:	90 91 95 00 	lds	r25, 0x0095
    1ee8:	9d 83       	std	Y+5, r25	; 0x05
    1eea:	8c 83       	std	Y+4, r24	; 0x04
												TxMsg.Data[0] = ISB_MSG_TOP_8BIT;
    1eec:	2e 83       	std	Y+6, r18	; 0x06
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
    1eee:	3f 82       	std	Y+7, r3	; 0x07
												TxMsg.Data[2] = Isb_Obj_8Bit[ObjIndex].Tov;
    1ef0:	f7 01       	movw	r30, r14
    1ef2:	80 81       	ld	r24, Z
    1ef4:	88 87       	std	Y+8, r24	; 0x08
												TxMsg.Data[3] = Isb_Obj_8Bit[ObjIndex].Value;
    1ef6:	81 81       	ldd	r24, Z+1	; 0x01
    1ef8:	89 87       	std	Y+9, r24	; 0x09
												Isb_SendMsg(&TxMsg);
    1efa:	c3 01       	movw	r24, r6
    1efc:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <Isb_SendMsg>
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_ANSWER) {
    1f00:	f8 01       	movw	r30, r16
    1f02:	86 81       	ldd	r24, Z+6	; 0x06
    1f04:	83 70       	andi	r24, 0x03	; 3
    1f06:	81 30       	cpi	r24, 0x01	; 1
    1f08:	71 f4       	brne	.+28     	; 0x1f26 <Isb_Obj_Rx+0x30c>
											if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_UPDATE)) {
    1f0a:	f6 01       	movw	r30, r12
    1f0c:	80 81       	ld	r24, Z
    1f0e:	84 ff       	sbrs	r24, 4
    1f10:	0a c0       	rjmp	.+20     	; 0x1f26 <Isb_Obj_Rx+0x30c>
												if (aIsb_Msg->Data[2] == Isb_Obj_8Bit[ObjIndex].Tov) {
    1f12:	f8 01       	movw	r30, r16
    1f14:	97 81       	ldd	r25, Z+7	; 0x07
    1f16:	f7 01       	movw	r30, r14
    1f18:	80 81       	ld	r24, Z
    1f1a:	98 17       	cp	r25, r24
    1f1c:	21 f4       	brne	.+8      	; 0x1f26 <Isb_Obj_Rx+0x30c>
													Isb_Obj_8Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    1f1e:	f8 01       	movw	r30, r16
    1f20:	80 85       	ldd	r24, Z+8	; 0x08
    1f22:	f7 01       	movw	r30, r14
    1f24:	81 83       	std	Z+1, r24	; 0x01
												}
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE) {
    1f26:	f8 01       	movw	r30, r16
    1f28:	86 81       	ldd	r24, Z+6	; 0x06
    1f2a:	83 70       	andi	r24, 0x03	; 3
    1f2c:	82 30       	cpi	r24, 0x02	; 2
    1f2e:	91 f4       	brne	.+36     	; 0x1f54 <Isb_Obj_Rx+0x33a>
											if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE)) {
    1f30:	f6 01       	movw	r30, r12
    1f32:	80 81       	ld	r24, Z
    1f34:	82 ff       	sbrs	r24, 2
    1f36:	0e c0       	rjmp	.+28     	; 0x1f54 <Isb_Obj_Rx+0x33a>
												if (aIsb_Msg->Data[2] == Isb_Obj_8Bit[ObjIndex].Tov) {
    1f38:	f8 01       	movw	r30, r16
    1f3a:	97 81       	ldd	r25, Z+7	; 0x07
    1f3c:	f7 01       	movw	r30, r14
    1f3e:	80 81       	ld	r24, Z
    1f40:	98 17       	cp	r25, r24
    1f42:	41 f4       	brne	.+16     	; 0x1f54 <Isb_Obj_Rx+0x33a>
													if (Isb_Obj_8Bit[ObjIndex].Value != aIsb_Msg->Data[3]) {
    1f44:	f8 01       	movw	r30, r16
    1f46:	90 85       	ldd	r25, Z+8	; 0x08
    1f48:	f7 01       	movw	r30, r14
    1f4a:	81 81       	ldd	r24, Z+1	; 0x01
    1f4c:	89 17       	cp	r24, r25
    1f4e:	11 f0       	breq	.+4      	; 0x1f54 <Isb_Obj_Rx+0x33a>
														Isb_Obj_8Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    1f50:	91 83       	std	Z+1, r25	; 0x01
														Isb_Obj_8Bit[ObjIndex].IsChanged = TRUE;
    1f52:	42 82       	std	Z+2, r4	; 0x02
    1f54:	08 94       	sec
    1f56:	a1 1c       	adc	r10, r1
    1f58:	b1 1c       	adc	r11, r1
    1f5a:	24 e0       	ldi	r18, 0x04	; 4
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	e2 0e       	add	r14, r18
    1f60:	f3 1e       	adc	r15, r19
						}
					}
				#endif /* ISB_OBJ_4BIT_MAX */

				#if defined(ISB_OBJ_8BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
    1f62:	32 e0       	ldi	r19, 0x02	; 2
    1f64:	a3 16       	cp	r10, r19
    1f66:	b1 04       	cpc	r11, r1
    1f68:	09 f0       	breq	.+2      	; 0x1f6c <Isb_Obj_Rx+0x352>
    1f6a:	8a cf       	rjmp	.-236    	; 0x1e80 <Isb_Obj_Rx+0x266>
    1f6c:	83 e0       	ldi	r24, 0x03	; 3
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	88 0e       	add	r8, r24
    1f72:	99 1e       	adc	r9, r25
	}



	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg) {
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    1f74:	9c ef       	ldi	r25, 0xFC	; 252
    1f76:	89 16       	cp	r8, r25
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	99 06       	cpc	r9, r25
    1f7c:	09 f0       	breq	.+2      	; 0x1f80 <Isb_Obj_Rx+0x366>
    1f7e:	75 ce       	rjmp	.-790    	; 0x1c6a <Isb_Obj_Rx+0x50>
					}
				#endif /* ISB_OBJ_FLOAT_MAX */

			}
		}
	}
    1f80:	2d 96       	adiw	r28, 0x0d	; 13
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	1f 91       	pop	r17
    1f92:	0f 91       	pop	r16
    1f94:	ff 90       	pop	r15
    1f96:	ef 90       	pop	r14
    1f98:	df 90       	pop	r13
    1f9a:	cf 90       	pop	r12
    1f9c:	bf 90       	pop	r11
    1f9e:	af 90       	pop	r10
    1fa0:	9f 90       	pop	r9
    1fa2:	8f 90       	pop	r8
    1fa4:	7f 90       	pop	r7
    1fa6:	6f 90       	pop	r6
    1fa8:	5f 90       	pop	r5
    1faa:	4f 90       	pop	r4
    1fac:	3f 90       	pop	r3
    1fae:	08 95       	ret

00001fb0 <Isb_Obj_Exec>:

	}



	void Isb_Obj_Exec(void) {
    1fb0:	7f 92       	push	r7
    1fb2:	8f 92       	push	r8
    1fb4:	9f 92       	push	r9
    1fb6:	af 92       	push	r10
    1fb8:	bf 92       	push	r11
    1fba:	cf 92       	push	r12
    1fbc:	df 92       	push	r13
    1fbe:	ef 92       	push	r14
    1fc0:	ff 92       	push	r15
    1fc2:	0f 93       	push	r16
    1fc4:	1f 93       	push	r17
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	2d 97       	sbiw	r28, 0x0d	; 13
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	f8 94       	cli
    1fd4:	de bf       	out	0x3e, r29	; 62
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	cd bf       	out	0x3d, r28	; 61

		#if defined(ISB_OBJ_1BIT_MAX)
			if (bit_is_set(Isb_Obj_1Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
    1fda:	80 91 a2 00 	lds	r24, 0x00A2
    1fde:	80 ff       	sbrs	r24, 0
    1fe0:	71 c0       	rjmp	.+226    	; 0x20c4 <Isb_Obj_Exec+0x114>
    1fe2:	0c ef       	ldi	r16, 0xFC	; 252
    1fe4:	10 e0       	ldi	r17, 0x00	; 0
    1fe6:	cc 24       	eor	r12, r12
    1fe8:	dd 24       	eor	r13, r13
								if (Isb_Obj_1Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_1Bit_Obj_Array[ObjIndex]);
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    1fea:	84 e2       	ldi	r24, 0x24	; 36
    1fec:	78 2e       	mov	r7, r24
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
											TxMsg.SourceId = Isb_Node_Id;
											TxMsg.Data[0] = ISB_MSG_TOP_1BIT;
    1fee:	88 24       	eor	r8, r8
    1ff0:	83 94       	inc	r8
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    1ff2:	b2 e0       	ldi	r27, 0x02	; 2
    1ff4:	9b 2e       	mov	r9, r27
											TxMsg.Data[2] = Isb_Obj_1Bit[ObjIndex].Tov;
											TxMsg.Data[3] = Isb_Obj_1Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
    1ff6:	5e 01       	movw	r10, r28
    1ff8:	08 94       	sec
    1ffa:	a1 1c       	adc	r10, r1
    1ffc:	b1 1c       	adc	r11, r1
	void Isb_Obj_Exec(void) {

		#if defined(ISB_OBJ_1BIT_MAX)
			if (bit_is_set(Isb_Obj_1Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_1Bit_Ch_Array[ObjIndex]);
    1ffe:	f6 01       	movw	r30, r12
    2000:	ea 59       	subi	r30, 0x9A	; 154
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	e4 91       	lpm	r30, Z+
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	ee 0f       	add	r30, r30
    200a:	ff 1f       	adc	r31, r31
    200c:	e8 59       	subi	r30, 0x98	; 152
    200e:	fe 4f       	sbci	r31, 0xFE	; 254
    2010:	80 81       	ld	r24, Z
    2012:	80 ff       	sbrs	r24, 0
    2014:	48 c0       	rjmp	.+144    	; 0x20a6 <Isb_Obj_Exec+0xf6>
						if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    2016:	76 01       	movw	r14, r12
    2018:	ee 0c       	add	r14, r14
    201a:	ff 1c       	adc	r15, r15
    201c:	ee 0c       	add	r14, r14
    201e:	ff 1c       	adc	r15, r15
    2020:	8c ef       	ldi	r24, 0xFC	; 252
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	e8 0e       	add	r14, r24
    2026:	f9 1e       	adc	r15, r25
    2028:	f7 01       	movw	r30, r14
    202a:	80 81       	ld	r24, Z
    202c:	80 ff       	sbrs	r24, 0
    202e:	3b c0       	rjmp	.+118    	; 0x20a6 <Isb_Obj_Exec+0xf6>
							if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
    2030:	80 81       	ld	r24, Z
    2032:	83 ff       	sbrs	r24, 3
    2034:	30 c0       	rjmp	.+96     	; 0x2096 <Isb_Obj_Exec+0xe6>
								if (Isb_Obj_1Bit[ObjIndex].IsChanged == TRUE) {
    2036:	f8 01       	movw	r30, r16
    2038:	83 81       	ldd	r24, Z+3	; 0x03
    203a:	81 30       	cpi	r24, 0x01	; 1
    203c:	61 f5       	brne	.+88     	; 0x2096 <Isb_Obj_Exec+0xe6>
    203e:	ac ec       	ldi	r26, 0xCC	; 204
    2040:	b0 e0       	ldi	r27, 0x00	; 0
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_1Bit_Obj_Array[ObjIndex]);
    2042:	f6 01       	movw	r30, r12
    2044:	ec 5a       	subi	r30, 0xAC	; 172
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	94 91       	lpm	r25, Z+
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
    204a:	2d 91       	ld	r18, X+
    204c:	3c 91       	ld	r19, X
    204e:	11 97       	sbiw	r26, 0x01	; 1
    2050:	12 96       	adiw	r26, 0x02	; 2
    2052:	8c 91       	ld	r24, X
    2054:	12 97       	sbiw	r26, 0x02	; 2
    2056:	89 17       	cp	r24, r25
    2058:	b9 f4       	brne	.+46     	; 0x2088 <Isb_Obj_Exec+0xd8>
    205a:	21 15       	cp	r18, r1
    205c:	31 05       	cpc	r19, r1
    205e:	a1 f0       	breq	.+40     	; 0x2088 <Isb_Obj_Exec+0xd8>
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    2060:	79 82       	std	Y+1, r7	; 0x01
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
    2062:	3b 83       	std	Y+3, r19	; 0x03
    2064:	2a 83       	std	Y+2, r18	; 0x02
											TxMsg.SourceId = Isb_Node_Id;
    2066:	80 91 94 00 	lds	r24, 0x0094
    206a:	90 91 95 00 	lds	r25, 0x0095
    206e:	9d 83       	std	Y+5, r25	; 0x05
    2070:	8c 83       	std	Y+4, r24	; 0x04
											TxMsg.Data[0] = ISB_MSG_TOP_1BIT;
    2072:	8e 82       	std	Y+6, r8	; 0x06
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    2074:	9f 82       	std	Y+7, r9	; 0x07
											TxMsg.Data[2] = Isb_Obj_1Bit[ObjIndex].Tov;
    2076:	f8 01       	movw	r30, r16
    2078:	81 81       	ldd	r24, Z+1	; 0x01
    207a:	88 87       	std	Y+8, r24	; 0x08
											TxMsg.Data[3] = Isb_Obj_1Bit[ObjIndex].Value;
    207c:	82 81       	ldd	r24, Z+2	; 0x02
    207e:	89 87       	std	Y+9, r24	; 0x09
											Isb_SendMsg(&TxMsg);
    2080:	c5 01       	movw	r24, r10
    2082:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <Isb_SendMsg>
    2086:	05 c0       	rjmp	.+10     	; 0x2092 <Isb_Obj_Exec+0xe2>
											break;
    2088:	13 96       	adiw	r26, 0x03	; 3
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_1Bit_Ch_Array[ObjIndex]);
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
						if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
							if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
								if (Isb_Obj_1Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	ac 3f       	cpi	r26, 0xFC	; 252
    208e:	bf 07       	cpc	r27, r31
    2090:	e1 f6       	brne	.-72     	; 0x204a <Isb_Obj_Exec+0x9a>
											TxMsg.Data[3] = Isb_Obj_1Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
											break;
										}
									}
									Isb_Obj_1Bit[ObjIndex].IsChanged = FALSE;
    2092:	f8 01       	movw	r30, r16
    2094:	13 82       	std	Z+3, r1	; 0x03
								}
							}
							if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READONINIT)) {
    2096:	f7 01       	movw	r30, r14
    2098:	80 81       	ld	r24, Z
    209a:	85 ff       	sbrs	r24, 5
    209c:	04 c0       	rjmp	.+8      	; 0x20a6 <Isb_Obj_Exec+0xf6>
								// TODO;
								Isb_Obj_1Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    209e:	f8 01       	movw	r30, r16
    20a0:	80 81       	ld	r24, Z
    20a2:	8f 7d       	andi	r24, 0xDF	; 223
    20a4:	80 83       	st	Z, r24
    20a6:	08 94       	sec
    20a8:	c1 1c       	adc	r12, r1
    20aa:	d1 1c       	adc	r13, r1
    20ac:	0c 5f       	subi	r16, 0xFC	; 252
    20ae:	1f 4f       	sbci	r17, 0xFF	; 255

	void Isb_Obj_Exec(void) {

		#if defined(ISB_OBJ_1BIT_MAX)
			if (bit_is_set(Isb_Obj_1Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
    20b0:	fe e0       	ldi	r31, 0x0E	; 14
    20b2:	cf 16       	cp	r12, r31
    20b4:	d1 04       	cpc	r13, r1
    20b6:	09 f0       	breq	.+2      	; 0x20ba <Isb_Obj_Exec+0x10a>
    20b8:	a2 cf       	rjmp	.-188    	; 0x1ffe <Isb_Obj_Exec+0x4e>
								Isb_Obj_1Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
							}
						}
					}
				}
				Isb_Obj_1Bit_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    20ba:	80 91 a2 00 	lds	r24, 0x00A2
    20be:	8e 7f       	andi	r24, 0xFE	; 254
    20c0:	80 93 a2 00 	sts	0x00A2, r24
			}
		#endif /* ISB_OBJ_1BIT_MAX */

		#if defined(ISB_OBJ_4BIT_MAX)
			if (bit_is_set(Isb_Obj_4Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
    20c4:	80 91 a5 00 	lds	r24, 0x00A5
    20c8:	80 ff       	sbrs	r24, 0
    20ca:	6f c0       	rjmp	.+222    	; 0x21aa <Isb_Obj_Exec+0x1fa>
    20cc:	0b eb       	ldi	r16, 0xBB	; 187
    20ce:	10 e0       	ldi	r17, 0x00	; 0
    20d0:	cc 24       	eor	r12, r12
    20d2:	dd 24       	eor	r13, r13
								if (Isb_Obj_4Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_4Bit_Obj_Array[ObjIndex]);
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    20d4:	64 e2       	ldi	r22, 0x24	; 36
    20d6:	86 2e       	mov	r8, r22
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
											TxMsg.SourceId = Isb_Node_Id;
											TxMsg.Data[0] = ISB_MSG_TOP_4BIT;
    20d8:	52 e0       	ldi	r21, 0x02	; 2
    20da:	95 2e       	mov	r9, r21
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
											TxMsg.Data[2] = Isb_Obj_4Bit[ObjIndex].Tov;
											TxMsg.Data[3] = Isb_Obj_4Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
    20dc:	5e 01       	movw	r10, r28
    20de:	08 94       	sec
    20e0:	a1 1c       	adc	r10, r1
    20e2:	b1 1c       	adc	r11, r1
		#endif /* ISB_OBJ_1BIT_MAX */

		#if defined(ISB_OBJ_4BIT_MAX)
			if (bit_is_set(Isb_Obj_4Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_4Bit_Ch_Array[ObjIndex]);
    20e4:	f6 01       	movw	r30, r12
    20e6:	ec 58       	subi	r30, 0x8C	; 140
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	e4 91       	lpm	r30, Z+
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	ee 0f       	add	r30, r30
    20f0:	ff 1f       	adc	r31, r31
    20f2:	e8 59       	subi	r30, 0x98	; 152
    20f4:	fe 4f       	sbci	r31, 0xFE	; 254
    20f6:	80 81       	ld	r24, Z
    20f8:	80 ff       	sbrs	r24, 0
    20fa:	48 c0       	rjmp	.+144    	; 0x218c <Isb_Obj_Exec+0x1dc>
						if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    20fc:	76 01       	movw	r14, r12
    20fe:	ee 0c       	add	r14, r14
    2100:	ff 1c       	adc	r15, r15
    2102:	ee 0c       	add	r14, r14
    2104:	ff 1c       	adc	r15, r15
    2106:	8b eb       	ldi	r24, 0xBB	; 187
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	e8 0e       	add	r14, r24
    210c:	f9 1e       	adc	r15, r25
    210e:	f7 01       	movw	r30, r14
    2110:	80 81       	ld	r24, Z
    2112:	80 ff       	sbrs	r24, 0
    2114:	3b c0       	rjmp	.+118    	; 0x218c <Isb_Obj_Exec+0x1dc>
							if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
    2116:	80 81       	ld	r24, Z
    2118:	83 ff       	sbrs	r24, 3
    211a:	30 c0       	rjmp	.+96     	; 0x217c <Isb_Obj_Exec+0x1cc>
								if (Isb_Obj_4Bit[ObjIndex].IsChanged == TRUE) {
    211c:	f8 01       	movw	r30, r16
    211e:	83 81       	ldd	r24, Z+3	; 0x03
    2120:	81 30       	cpi	r24, 0x01	; 1
    2122:	61 f5       	brne	.+88     	; 0x217c <Isb_Obj_Exec+0x1cc>
    2124:	ac ec       	ldi	r26, 0xCC	; 204
    2126:	b0 e0       	ldi	r27, 0x00	; 0
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_4Bit_Obj_Array[ObjIndex]);
    2128:	f6 01       	movw	r30, r12
    212a:	ee 59       	subi	r30, 0x9E	; 158
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	94 91       	lpm	r25, Z+
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
    2130:	2d 91       	ld	r18, X+
    2132:	3c 91       	ld	r19, X
    2134:	11 97       	sbiw	r26, 0x01	; 1
    2136:	12 96       	adiw	r26, 0x02	; 2
    2138:	8c 91       	ld	r24, X
    213a:	12 97       	sbiw	r26, 0x02	; 2
    213c:	89 17       	cp	r24, r25
    213e:	b9 f4       	brne	.+46     	; 0x216e <Isb_Obj_Exec+0x1be>
    2140:	21 15       	cp	r18, r1
    2142:	31 05       	cpc	r19, r1
    2144:	a1 f0       	breq	.+40     	; 0x216e <Isb_Obj_Exec+0x1be>
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    2146:	89 82       	std	Y+1, r8	; 0x01
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
    2148:	3b 83       	std	Y+3, r19	; 0x03
    214a:	2a 83       	std	Y+2, r18	; 0x02
											TxMsg.SourceId = Isb_Node_Id;
    214c:	80 91 94 00 	lds	r24, 0x0094
    2150:	90 91 95 00 	lds	r25, 0x0095
    2154:	9d 83       	std	Y+5, r25	; 0x05
    2156:	8c 83       	std	Y+4, r24	; 0x04
											TxMsg.Data[0] = ISB_MSG_TOP_4BIT;
    2158:	9e 82       	std	Y+6, r9	; 0x06
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    215a:	9f 82       	std	Y+7, r9	; 0x07
											TxMsg.Data[2] = Isb_Obj_4Bit[ObjIndex].Tov;
    215c:	f8 01       	movw	r30, r16
    215e:	81 81       	ldd	r24, Z+1	; 0x01
    2160:	88 87       	std	Y+8, r24	; 0x08
											TxMsg.Data[3] = Isb_Obj_4Bit[ObjIndex].Value;
    2162:	82 81       	ldd	r24, Z+2	; 0x02
    2164:	89 87       	std	Y+9, r24	; 0x09
											Isb_SendMsg(&TxMsg);
    2166:	c5 01       	movw	r24, r10
    2168:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <Isb_SendMsg>
    216c:	05 c0       	rjmp	.+10     	; 0x2178 <Isb_Obj_Exec+0x1c8>
											break;
    216e:	13 96       	adiw	r26, 0x03	; 3
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_4Bit_Ch_Array[ObjIndex]);
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
						if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
							if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
								if (Isb_Obj_4Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	ac 3f       	cpi	r26, 0xFC	; 252
    2174:	bf 07       	cpc	r27, r31
    2176:	e1 f6       	brne	.-72     	; 0x2130 <Isb_Obj_Exec+0x180>
											TxMsg.Data[3] = Isb_Obj_4Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
											break;
										}
									}
									Isb_Obj_4Bit[ObjIndex].IsChanged = FALSE;
    2178:	f8 01       	movw	r30, r16
    217a:	13 82       	std	Z+3, r1	; 0x03
								}
							}
							if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READONINIT)) {
    217c:	f7 01       	movw	r30, r14
    217e:	80 81       	ld	r24, Z
    2180:	85 ff       	sbrs	r24, 5
    2182:	04 c0       	rjmp	.+8      	; 0x218c <Isb_Obj_Exec+0x1dc>
								// TODO;
								Isb_Obj_4Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    2184:	f8 01       	movw	r30, r16
    2186:	80 81       	ld	r24, Z
    2188:	8f 7d       	andi	r24, 0xDF	; 223
    218a:	80 83       	st	Z, r24
    218c:	08 94       	sec
    218e:	c1 1c       	adc	r12, r1
    2190:	d1 1c       	adc	r13, r1
    2192:	0c 5f       	subi	r16, 0xFC	; 252
    2194:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		#endif /* ISB_OBJ_1BIT_MAX */

		#if defined(ISB_OBJ_4BIT_MAX)
			if (bit_is_set(Isb_Obj_4Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
    2196:	f2 e0       	ldi	r31, 0x02	; 2
    2198:	cf 16       	cp	r12, r31
    219a:	d1 04       	cpc	r13, r1
    219c:	09 f0       	breq	.+2      	; 0x21a0 <Isb_Obj_Exec+0x1f0>
    219e:	a2 cf       	rjmp	.-188    	; 0x20e4 <Isb_Obj_Exec+0x134>
								Isb_Obj_4Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
							}
						}
					}
				}
				Isb_Obj_4Bit_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    21a0:	80 91 a5 00 	lds	r24, 0x00A5
    21a4:	8e 7f       	andi	r24, 0xFE	; 254
    21a6:	80 93 a5 00 	sts	0x00A5, r24
			}
		#endif /* ISB_OBJ_4BIT_MAX */

		#if defined(ISB_OBJ_8BIT_MAX)
			if (bit_is_set(Isb_Obj_8Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
    21aa:	80 91 a8 00 	lds	r24, 0x00A8
    21ae:	80 ff       	sbrs	r24, 0
    21b0:	71 c0       	rjmp	.+226    	; 0x2294 <Isb_Obj_Exec+0x2e4>
    21b2:	04 ec       	ldi	r16, 0xC4	; 196
    21b4:	10 e0       	ldi	r17, 0x00	; 0
    21b6:	cc 24       	eor	r12, r12
    21b8:	dd 24       	eor	r13, r13
								if (Isb_Obj_8Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_8Bit_Obj_Array[ObjIndex]);
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    21ba:	24 e2       	ldi	r18, 0x24	; 36
    21bc:	72 2e       	mov	r7, r18
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
											TxMsg.SourceId = Isb_Node_Id;
											TxMsg.Data[0] = ISB_MSG_TOP_8BIT;
    21be:	93 e0       	ldi	r25, 0x03	; 3
    21c0:	89 2e       	mov	r8, r25
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    21c2:	82 e0       	ldi	r24, 0x02	; 2
    21c4:	98 2e       	mov	r9, r24
											TxMsg.Data[2] = Isb_Obj_8Bit[ObjIndex].Tov;
											TxMsg.Data[3] = Isb_Obj_8Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
    21c6:	5e 01       	movw	r10, r28
    21c8:	08 94       	sec
    21ca:	a1 1c       	adc	r10, r1
    21cc:	b1 1c       	adc	r11, r1
		#endif /* ISB_OBJ_4BIT_MAX */

		#if defined(ISB_OBJ_8BIT_MAX)
			if (bit_is_set(Isb_Obj_8Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_8Bit_Ch_Array[ObjIndex]);
    21ce:	f6 01       	movw	r30, r12
    21d0:	ea 58       	subi	r30, 0x8A	; 138
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	e4 91       	lpm	r30, Z+
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	ee 0f       	add	r30, r30
    21da:	ff 1f       	adc	r31, r31
    21dc:	e8 59       	subi	r30, 0x98	; 152
    21de:	fe 4f       	sbci	r31, 0xFE	; 254
    21e0:	80 81       	ld	r24, Z
    21e2:	80 ff       	sbrs	r24, 0
    21e4:	48 c0       	rjmp	.+144    	; 0x2276 <Isb_Obj_Exec+0x2c6>
						if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    21e6:	76 01       	movw	r14, r12
    21e8:	ee 0c       	add	r14, r14
    21ea:	ff 1c       	adc	r15, r15
    21ec:	ee 0c       	add	r14, r14
    21ee:	ff 1c       	adc	r15, r15
    21f0:	84 ec       	ldi	r24, 0xC4	; 196
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	e8 0e       	add	r14, r24
    21f6:	f9 1e       	adc	r15, r25
    21f8:	f7 01       	movw	r30, r14
    21fa:	80 81       	ld	r24, Z
    21fc:	80 ff       	sbrs	r24, 0
    21fe:	3b c0       	rjmp	.+118    	; 0x2276 <Isb_Obj_Exec+0x2c6>
							if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
    2200:	80 81       	ld	r24, Z
    2202:	83 ff       	sbrs	r24, 3
    2204:	30 c0       	rjmp	.+96     	; 0x2266 <Isb_Obj_Exec+0x2b6>
								if (Isb_Obj_8Bit[ObjIndex].IsChanged == TRUE) {
    2206:	f8 01       	movw	r30, r16
    2208:	83 81       	ldd	r24, Z+3	; 0x03
    220a:	81 30       	cpi	r24, 0x01	; 1
    220c:	61 f5       	brne	.+88     	; 0x2266 <Isb_Obj_Exec+0x2b6>
    220e:	ac ec       	ldi	r26, 0xCC	; 204
    2210:	b0 e0       	ldi	r27, 0x00	; 0
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_8Bit_Obj_Array[ObjIndex]);
    2212:	f6 01       	movw	r30, r12
    2214:	ec 59       	subi	r30, 0x9C	; 156
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	94 91       	lpm	r25, Z+
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
    221a:	2d 91       	ld	r18, X+
    221c:	3c 91       	ld	r19, X
    221e:	11 97       	sbiw	r26, 0x01	; 1
    2220:	12 96       	adiw	r26, 0x02	; 2
    2222:	8c 91       	ld	r24, X
    2224:	12 97       	sbiw	r26, 0x02	; 2
    2226:	89 17       	cp	r24, r25
    2228:	b9 f4       	brne	.+46     	; 0x2258 <Isb_Obj_Exec+0x2a8>
    222a:	21 15       	cp	r18, r1
    222c:	31 05       	cpc	r19, r1
    222e:	a1 f0       	breq	.+40     	; 0x2258 <Isb_Obj_Exec+0x2a8>
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    2230:	79 82       	std	Y+1, r7	; 0x01
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
    2232:	3b 83       	std	Y+3, r19	; 0x03
    2234:	2a 83       	std	Y+2, r18	; 0x02
											TxMsg.SourceId = Isb_Node_Id;
    2236:	80 91 94 00 	lds	r24, 0x0094
    223a:	90 91 95 00 	lds	r25, 0x0095
    223e:	9d 83       	std	Y+5, r25	; 0x05
    2240:	8c 83       	std	Y+4, r24	; 0x04
											TxMsg.Data[0] = ISB_MSG_TOP_8BIT;
    2242:	8e 82       	std	Y+6, r8	; 0x06
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    2244:	9f 82       	std	Y+7, r9	; 0x07
											TxMsg.Data[2] = Isb_Obj_8Bit[ObjIndex].Tov;
    2246:	f8 01       	movw	r30, r16
    2248:	81 81       	ldd	r24, Z+1	; 0x01
    224a:	88 87       	std	Y+8, r24	; 0x08
											TxMsg.Data[3] = Isb_Obj_8Bit[ObjIndex].Value;
    224c:	82 81       	ldd	r24, Z+2	; 0x02
    224e:	89 87       	std	Y+9, r24	; 0x09
											Isb_SendMsg(&TxMsg);
    2250:	c5 01       	movw	r24, r10
    2252:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <Isb_SendMsg>
    2256:	05 c0       	rjmp	.+10     	; 0x2262 <Isb_Obj_Exec+0x2b2>
											break;
    2258:	13 96       	adiw	r26, 0x03	; 3
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_8Bit_Ch_Array[ObjIndex]);
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
						if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
							if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
								if (Isb_Obj_8Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	ac 3f       	cpi	r26, 0xFC	; 252
    225e:	bf 07       	cpc	r27, r31
    2260:	e1 f6       	brne	.-72     	; 0x221a <Isb_Obj_Exec+0x26a>
											TxMsg.Data[3] = Isb_Obj_8Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
											break;
										}
									}
									Isb_Obj_8Bit[ObjIndex].IsChanged = FALSE;
    2262:	f8 01       	movw	r30, r16
    2264:	13 82       	std	Z+3, r1	; 0x03
								}
							}
							if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READONINIT)) {
    2266:	f7 01       	movw	r30, r14
    2268:	80 81       	ld	r24, Z
    226a:	85 ff       	sbrs	r24, 5
    226c:	04 c0       	rjmp	.+8      	; 0x2276 <Isb_Obj_Exec+0x2c6>
								// TODO;
								Isb_Obj_8Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    226e:	f8 01       	movw	r30, r16
    2270:	80 81       	ld	r24, Z
    2272:	8f 7d       	andi	r24, 0xDF	; 223
    2274:	80 83       	st	Z, r24
    2276:	08 94       	sec
    2278:	c1 1c       	adc	r12, r1
    227a:	d1 1c       	adc	r13, r1
    227c:	0c 5f       	subi	r16, 0xFC	; 252
    227e:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		#endif /* ISB_OBJ_4BIT_MAX */

		#if defined(ISB_OBJ_8BIT_MAX)
			if (bit_is_set(Isb_Obj_8Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
    2280:	f2 e0       	ldi	r31, 0x02	; 2
    2282:	cf 16       	cp	r12, r31
    2284:	d1 04       	cpc	r13, r1
    2286:	09 f0       	breq	.+2      	; 0x228a <Isb_Obj_Exec+0x2da>
    2288:	a2 cf       	rjmp	.-188    	; 0x21ce <Isb_Obj_Exec+0x21e>
								Isb_Obj_8Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
							}
						}
					}
				}
				Isb_Obj_8Bit_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    228a:	80 91 a8 00 	lds	r24, 0x00A8
    228e:	8e 7f       	andi	r24, 0xFE	; 254
    2290:	80 93 a8 00 	sts	0x00A8, r24
				}
				Isb_Obj_Float_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
			}
		#endif /* ISB_OBJ_FLOAT_MAX */

	}
    2294:	2d 96       	adiw	r28, 0x0d	; 13
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	cf 91       	pop	r28
    22a2:	df 91       	pop	r29
    22a4:	1f 91       	pop	r17
    22a6:	0f 91       	pop	r16
    22a8:	ff 90       	pop	r15
    22aa:	ef 90       	pop	r14
    22ac:	df 90       	pop	r13
    22ae:	cf 90       	pop	r12
    22b0:	bf 90       	pop	r11
    22b2:	af 90       	pop	r10
    22b4:	9f 90       	pop	r9
    22b6:	8f 90       	pop	r8
    22b8:	7f 90       	pop	r7
    22ba:	08 95       	ret

000022bc <Isb_Config_Rx>:
#ifndef ISB_SRV_CONFIG_C_
	#define ISB_SRV_CONFIG_C_



	void Isb_Config_Rx(Isb_Msg_t * aIsb_Msg) {
    22bc:	df 92       	push	r13
    22be:	ef 92       	push	r14
    22c0:	ff 92       	push	r15
    22c2:	0f 93       	push	r16
    22c4:	1f 93       	push	r17
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	2d 97       	sbiw	r28, 0x0d	; 13
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	f8 94       	cli
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	cd bf       	out	0x3d, r28	; 61
    22da:	ac 01       	movw	r20, r24
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
    22dc:	fc 01       	movw	r30, r24
    22de:	d0 80       	ld	r13, Z
    22e0:	6d 2d       	mov	r22, r13
    22e2:	6f 70       	andi	r22, 0x0F	; 15
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
    22e4:	e3 80       	ldd	r14, Z+3	; 0x03
    22e6:	f4 80       	ldd	r15, Z+4	; 0x04
		MsgTx.SourceId = Isb_Node_Id;
    22e8:	00 91 94 00 	lds	r16, 0x0094
    22ec:	10 91 95 00 	lds	r17, 0x0095
    22f0:	dc 01       	movw	r26, r24
    22f2:	fe 01       	movw	r30, r28
    22f4:	36 96       	adiw	r30, 0x06	; 6
		for (uint8_t i = 0; i < Dlc; i++) {
    22f6:	9e 01       	movw	r18, r28
    22f8:	26 0f       	add	r18, r22
    22fa:	31 1d       	adc	r19, r1
    22fc:	2a 5f       	subi	r18, 0xFA	; 250
    22fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2300:	04 c0       	rjmp	.+8      	; 0x230a <Isb_Config_Rx+0x4e>
			MsgTx.Data[i] = aIsb_Msg->Data[i];
    2302:	14 96       	adiw	r26, 0x04	; 4
    2304:	8c 91       	ld	r24, X
    2306:	14 97       	sbiw	r26, 0x04	; 4
    2308:	81 93       	st	Z+, r24
    230a:	11 96       	adiw	r26, 0x01	; 1
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
		MsgTx.SourceId = Isb_Node_Id;
		for (uint8_t i = 0; i < Dlc; i++) {
    230c:	e2 17       	cp	r30, r18
    230e:	f3 07       	cpc	r31, r19
    2310:	c1 f7       	brne	.-16     	; 0x2302 <Isb_Config_Rx+0x46>
			MsgTx.Data[i] = aIsb_Msg->Data[i];
		}
		if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_SETMODE) {
    2312:	fa 01       	movw	r30, r20
    2314:	85 81       	ldd	r24, Z+5	; 0x05
    2316:	82 30       	cpi	r24, 0x02	; 2
    2318:	09 f0       	breq	.+2      	; 0x231c <Isb_Config_Rx+0x60>
    231a:	90 c0       	rjmp	.+288    	; 0x243c <Isb_Config_Rx+0x180>
			if (Dlc == ISB_MSG_FLAGS_DLC_2) {
    231c:	62 30       	cpi	r22, 0x02	; 2
    231e:	09 f0       	breq	.+2      	; 0x2322 <Isb_Config_Rx+0x66>
    2320:	46 c1       	rjmp	.+652    	; 0x25ae <Isb_Config_Rx+0x2f2>
				MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_2;
				MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    2322:	8e 81       	ldd	r24, Y+6	; 0x06
    2324:	80 6c       	ori	r24, 0xC0	; 192
    2326:	8e 83       	std	Y+6, r24	; 0x06
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__BL_NORM) {
    2328:	26 81       	ldd	r18, Z+6	; 0x06
    232a:	22 23       	and	r18, r18
    232c:	c1 f4       	brne	.+48     	; 0x235e <Isb_Config_Rx+0xa2>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    232e:	e1 99       	sbic	0x1c, 1	; 28
    2330:	fe cf       	rjmp	.-4      	; 0x232e <Isb_Config_Rx+0x72>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2332:	82 e1       	ldi	r24, 0x12	; 18
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	9f bb       	out	0x1f, r25	; 31
    2338:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    233a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    233c:	8d b3       	in	r24, 0x1d	; 29
	}



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
    233e:	88 23       	and	r24, r24
    2340:	09 f4       	brne	.+2      	; 0x2344 <Isb_Config_Rx+0x88>
    2342:	62 c0       	rjmp	.+196    	; 0x2408 <Isb_Config_Rx+0x14c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2344:	e1 99       	sbic	0x1c, 1	; 28
    2346:	fe cf       	rjmp	.-4      	; 0x2344 <Isb_Config_Rx+0x88>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2348:	82 e1       	ldi	r24, 0x12	; 18
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9f bb       	out	0x1f, r25	; 31
    234e:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2350:	1d ba       	out	0x1d, r1	; 29

    __asm__ __volatile__ (
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	f8 94       	cli
    2356:	e2 9a       	sbi	0x1c, 2	; 28
    2358:	e1 9a       	sbi	0x1c, 1	; 28
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	6e c0       	rjmp	.+220    	; 0x243a <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__BL_FLASH) {
    235e:	21 30       	cpi	r18, 0x01	; 1
    2360:	c9 f4       	brne	.+50     	; 0x2394 <Isb_Config_Rx+0xd8>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2362:	e1 99       	sbic	0x1c, 1	; 28
    2364:	fe cf       	rjmp	.-4      	; 0x2362 <Isb_Config_Rx+0xa6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2366:	82 e1       	ldi	r24, 0x12	; 18
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9f bb       	out	0x1f, r25	; 31
    236c:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    236e:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2370:	8d b3       	in	r24, 0x1d	; 29
    2372:	81 30       	cpi	r24, 0x01	; 1
    2374:	09 f4       	brne	.+2      	; 0x2378 <Isb_Config_Rx+0xbc>
    2376:	61 c0       	rjmp	.+194    	; 0x243a <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2378:	e1 99       	sbic	0x1c, 1	; 28
    237a:	fe cf       	rjmp	.-4      	; 0x2378 <Isb_Config_Rx+0xbc>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    237c:	82 e1       	ldi	r24, 0x12	; 18
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	9f bb       	out	0x1f, r25	; 31
    2382:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	e2 9a       	sbi	0x1c, 2	; 28
    238e:	e1 9a       	sbi	0x1c, 1	; 28
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	53 c0       	rjmp	.+166    	; 0x243a <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_FLASH);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__FW_NORM) {
    2394:	28 30       	cpi	r18, 0x08	; 8
    2396:	09 f0       	breq	.+2      	; 0x239a <Isb_Config_Rx+0xde>
    2398:	37 c0       	rjmp	.+110    	; 0x2408 <Isb_Config_Rx+0x14c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    239a:	e1 99       	sbic	0x1c, 1	; 28
    239c:	fe cf       	rjmp	.-4      	; 0x239a <Isb_Config_Rx+0xde>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    239e:	8b e1       	ldi	r24, 0x1B	; 27
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	9f bb       	out	0x1f, r25	; 31
    23a4:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    23a6:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    23a8:	2d b3       	in	r18, 0x1d	; 29
					uint8_t crc = lib_eep_read_byte((uint8_t *)EEP__ISB_CONFIG_CRC);
					crc++;
    23aa:	2f 5f       	subi	r18, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    23ac:	e1 99       	sbic	0x1c, 1	; 28
    23ae:	fe cf       	rjmp	.-4      	; 0x23ac <Isb_Config_Rx+0xf0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    23b0:	8b e1       	ldi	r24, 0x1B	; 27
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	9f bb       	out	0x1f, r25	; 31
    23b6:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    23b8:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    23ba:	8d b3       	in	r24, 0x1d	; 29
    23bc:	82 17       	cp	r24, r18
    23be:	61 f0       	breq	.+24     	; 0x23d8 <Isb_Config_Rx+0x11c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    23c0:	e1 99       	sbic	0x1c, 1	; 28
    23c2:	fe cf       	rjmp	.-4      	; 0x23c0 <Isb_Config_Rx+0x104>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    23c4:	8b e1       	ldi	r24, 0x1B	; 27
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	9f bb       	out	0x1f, r25	; 31
    23ca:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    23cc:	2d bb       	out	0x1d, r18	; 29

    __asm__ __volatile__ (
    23ce:	0f b6       	in	r0, 0x3f	; 63
    23d0:	f8 94       	cli
    23d2:	e2 9a       	sbi	0x1c, 2	; 28
    23d4:	e1 9a       	sbi	0x1c, 1	; 28
    23d6:	0f be       	out	0x3f, r0	; 63
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    23d8:	e1 99       	sbic	0x1c, 1	; 28
    23da:	fe cf       	rjmp	.-4      	; 0x23d8 <Isb_Config_Rx+0x11c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    23dc:	82 e1       	ldi	r24, 0x12	; 18
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	9f bb       	out	0x1f, r25	; 31
    23e2:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    23e4:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    23e6:	8d b3       	in	r24, 0x1d	; 29
    23e8:	88 30       	cpi	r24, 0x08	; 8
    23ea:	39 f1       	breq	.+78     	; 0x243a <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    23ec:	e1 99       	sbic	0x1c, 1	; 28
    23ee:	fe cf       	rjmp	.-4      	; 0x23ec <Isb_Config_Rx+0x130>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    23f0:	82 e1       	ldi	r24, 0x12	; 18
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	9f bb       	out	0x1f, r25	; 31
    23f6:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    23f8:	88 e0       	ldi	r24, 0x08	; 8
    23fa:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	f8 94       	cli
    2400:	e2 9a       	sbi	0x1c, 2	; 28
    2402:	e1 9a       	sbi	0x1c, 1	; 28
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	19 c0       	rjmp	.+50     	; 0x243a <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_CONFIG_CRC, crc);
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__FW_NORM);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__FW_CFG) {
    2408:	29 30       	cpi	r18, 0x09	; 9
    240a:	b9 f4       	brne	.+46     	; 0x243a <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    240c:	e1 99       	sbic	0x1c, 1	; 28
    240e:	fe cf       	rjmp	.-4      	; 0x240c <Isb_Config_Rx+0x150>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2410:	82 e1       	ldi	r24, 0x12	; 18
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	9f bb       	out	0x1f, r25	; 31
    2416:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2418:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    241a:	8d b3       	in	r24, 0x1d	; 29
    241c:	89 30       	cpi	r24, 0x09	; 9
    241e:	69 f0       	breq	.+26     	; 0x243a <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2420:	e1 99       	sbic	0x1c, 1	; 28
    2422:	fe cf       	rjmp	.-4      	; 0x2420 <Isb_Config_Rx+0x164>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2424:	82 e1       	ldi	r24, 0x12	; 18
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	9f bb       	out	0x1f, r25	; 31
    242a:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    242c:	89 e0       	ldi	r24, 0x09	; 9
    242e:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	e2 9a       	sbi	0x1c, 2	; 28
    2436:	e1 9a       	sbi	0x1c, 1	; 28
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	ff cf       	rjmp	.-2      	; 0x243a <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__FW_CFG);
				}
				Node_Reboot();
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_INITEEPROM) {
    243c:	86 30       	cpi	r24, 0x06	; 6
    243e:	09 f0       	breq	.+2      	; 0x2442 <Isb_Config_Rx+0x186>
    2440:	43 c0       	rjmp	.+134    	; 0x24c8 <Isb_Config_Rx+0x20c>
			if (Dlc == ISB_MSG_FLAGS_DLC_1) {
    2442:	61 30       	cpi	r22, 0x01	; 1
    2444:	09 f0       	breq	.+2      	; 0x2448 <Isb_Config_Rx+0x18c>
    2446:	b3 c0       	rjmp	.+358    	; 0x25ae <Isb_Config_Rx+0x2f2>
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
    2448:	80 91 97 00 	lds	r24, 0x0097
    244c:	89 30       	cpi	r24, 0x09	; 9
    244e:	09 f0       	breq	.+2      	; 0x2452 <Isb_Config_Rx+0x196>
    2450:	ae c0       	rjmp	.+348    	; 0x25ae <Isb_Config_Rx+0x2f2>
					MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_1;
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
    2452:	80 91 96 00 	lds	r24, 0x0096
    2456:	28 2f       	mov	r18, r24
    2458:	30 e0       	ldi	r19, 0x00	; 0
						wdt_reset();
    245a:	a8 95       	wdr
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    245c:	e1 99       	sbic	0x1c, 1	; 28
    245e:	fe cf       	rjmp	.-4      	; 0x245c <Isb_Config_Rx+0x1a0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2460:	3f bb       	out	0x1f, r19	; 31
    2462:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2464:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2466:	8d b3       	in	r24, 0x1d	; 29
    2468:	88 23       	and	r24, r24
    246a:	51 f0       	breq	.+20     	; 0x2480 <Isb_Config_Rx+0x1c4>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    246c:	e1 99       	sbic	0x1c, 1	; 28
    246e:	fe cf       	rjmp	.-4      	; 0x246c <Isb_Config_Rx+0x1b0>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2470:	3f bb       	out	0x1f, r19	; 31
    2472:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    2474:	1d ba       	out	0x1d, r1	; 29

    __asm__ __volatile__ (
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	e2 9a       	sbi	0x1c, 2	; 28
    247c:	e1 9a       	sbi	0x1c, 1	; 28
    247e:	0f be       	out	0x3f, r0	; 63
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_INITEEPROM) {
			if (Dlc == ISB_MSG_FLAGS_DLC_1) {
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
					MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_1;
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
    2480:	2f 5f       	subi	r18, 0xFF	; 255
    2482:	3f 4f       	sbci	r19, 0xFF	; 255
    2484:	f2 e0       	ldi	r31, 0x02	; 2
    2486:	20 30       	cpi	r18, 0x00	; 0
    2488:	3f 07       	cpc	r19, r31
    248a:	38 f3       	brcs	.-50     	; 0x245a <Isb_Config_Rx+0x19e>
    248c:	2c e1       	ldi	r18, 0x1C	; 28
    248e:	30 e0       	ldi	r19, 0x00	; 0
						wdt_reset();
						lib_eep_write_byte((uint8_t *) ee_Addr, 0x00);
					}
					for (uint8_t i = 0; i < 4; i++) {
						lib_eep_write_byte((uint8_t *)(EEP__ISB_CONFIG_CODE_0 + i), Isb_Firmware_Code[i]);
    2490:	f9 01       	movw	r30, r18
    2492:	ec 5b       	subi	r30, 0xBC	; 188
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2498:	e1 99       	sbic	0x1c, 1	; 28
    249a:	fe cf       	rjmp	.-4      	; 0x2498 <Isb_Config_Rx+0x1dc>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    249c:	3f bb       	out	0x1f, r19	; 31
    249e:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    24a0:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    24a2:	8d b3       	in	r24, 0x1d	; 29
    24a4:	8e 17       	cp	r24, r30
    24a6:	51 f0       	breq	.+20     	; 0x24bc <Isb_Config_Rx+0x200>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    24a8:	e1 99       	sbic	0x1c, 1	; 28
    24aa:	fe cf       	rjmp	.-4      	; 0x24a8 <Isb_Config_Rx+0x1ec>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    24ac:	3f bb       	out	0x1f, r19	; 31
    24ae:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    24b0:	ed bb       	out	0x1d, r30	; 29

    __asm__ __volatile__ (
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	f8 94       	cli
    24b6:	e2 9a       	sbi	0x1c, 2	; 28
    24b8:	e1 9a       	sbi	0x1c, 1	; 28
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	2f 5f       	subi	r18, 0xFF	; 255
    24be:	3f 4f       	sbci	r19, 0xFF	; 255
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
						wdt_reset();
						lib_eep_write_byte((uint8_t *) ee_Addr, 0x00);
					}
					for (uint8_t i = 0; i < 4; i++) {
    24c0:	20 32       	cpi	r18, 0x20	; 32
    24c2:	31 05       	cpc	r19, r1
    24c4:	29 f7       	brne	.-54     	; 0x2490 <Isb_Config_Rx+0x1d4>
    24c6:	ff cf       	rjmp	.-2      	; 0x24c6 <Isb_Config_Rx+0x20a>
					}
					Node_Reboot();
				}
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_READEEPROMBLOCK) {
    24c8:	87 30       	cpi	r24, 0x07	; 7
    24ca:	71 f5       	brne	.+92     	; 0x2528 <Isb_Config_Rx+0x26c>
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
    24cc:	64 30       	cpi	r22, 0x04	; 4
    24ce:	08 f4       	brcc	.+2      	; 0x24d2 <Isb_Config_Rx+0x216>
    24d0:	6e c0       	rjmp	.+220    	; 0x25ae <Isb_Config_Rx+0x2f2>
				Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
    24d2:	fa 01       	movw	r30, r20
    24d4:	97 81       	ldd	r25, Z+7	; 0x07
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	26 81       	ldd	r18, Z+6	; 0x06
    24da:	dc 01       	movw	r26, r24
    24dc:	a2 0f       	add	r26, r18
    24de:	b1 1d       	adc	r27, r1
				if (Addr < EEP_SIZE) {
    24e0:	f2 e0       	ldi	r31, 0x02	; 2
    24e2:	a0 30       	cpi	r26, 0x00	; 0
    24e4:	bf 07       	cpc	r27, r31
    24e6:	08 f0       	brcs	.+2      	; 0x24ea <Isb_Config_Rx+0x22e>
    24e8:	62 c0       	rjmp	.+196    	; 0x25ae <Isb_Config_Rx+0x2f2>
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    24ea:	8e 81       	ldd	r24, Y+6	; 0x06
    24ec:	80 6c       	ori	r24, 0xC0	; 192
    24ee:	8e 83       	std	Y+6, r24	; 0x06
    24f0:	40 e0       	ldi	r20, 0x00	; 0
					for (uint8_t i = 0; i < (Dlc - 3); i++) {
    24f2:	26 2f       	mov	r18, r22
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	23 50       	subi	r18, 0x03	; 3
    24f8:	30 40       	sbci	r19, 0x00	; 0
						MsgTx.Data[3 + i] = lib_eep_read_byte((uint8_t *)(Addr + i));
    24fa:	be 01       	movw	r22, r28
    24fc:	67 5f       	subi	r22, 0xF7	; 247
    24fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2500:	0d c0       	rjmp	.+26     	; 0x251c <Isb_Config_Rx+0x260>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2502:	e1 99       	sbic	0x1c, 1	; 28
    2504:	fe cf       	rjmp	.-4      	; 0x2502 <Isb_Config_Rx+0x246>
    2506:	cd 01       	movw	r24, r26
    2508:	84 0f       	add	r24, r20
    250a:	91 1d       	adc	r25, r1
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    250c:	9f bb       	out	0x1f, r25	; 31
    250e:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2510:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2512:	8d b3       	in	r24, 0x1d	; 29
    2514:	e6 0f       	add	r30, r22
    2516:	f7 1f       	adc	r31, r23
    2518:	80 83       	st	Z, r24
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_READEEPROMBLOCK) {
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
				Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
				if (Addr < EEP_SIZE) {
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint8_t i = 0; i < (Dlc - 3); i++) {
    251a:	4f 5f       	subi	r20, 0xFF	; 255
    251c:	e4 2f       	mov	r30, r20
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	e2 17       	cp	r30, r18
    2522:	f3 07       	cpc	r31, r19
    2524:	74 f3       	brlt	.-36     	; 0x2502 <Isb_Config_Rx+0x246>
    2526:	43 c0       	rjmp	.+134    	; 0x25ae <Isb_Config_Rx+0x2f2>
						MsgTx.Data[3 + i] = lib_eep_read_byte((uint8_t *)(Addr + i));
					}
				}
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_WRITEEEPROMBLOCK) {
    2528:	88 30       	cpi	r24, 0x08	; 8
    252a:	09 f0       	breq	.+2      	; 0x252e <Isb_Config_Rx+0x272>
    252c:	40 c0       	rjmp	.+128    	; 0x25ae <Isb_Config_Rx+0x2f2>
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
    252e:	64 30       	cpi	r22, 0x04	; 4
    2530:	08 f4       	brcc	.+2      	; 0x2534 <Isb_Config_Rx+0x278>
    2532:	3d c0       	rjmp	.+122    	; 0x25ae <Isb_Config_Rx+0x2f2>
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
    2534:	80 91 97 00 	lds	r24, 0x0097
    2538:	89 30       	cpi	r24, 0x09	; 9
    253a:	09 f0       	breq	.+2      	; 0x253e <Isb_Config_Rx+0x282>
    253c:	38 c0       	rjmp	.+112    	; 0x25ae <Isb_Config_Rx+0x2f2>
					Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
    253e:	fa 01       	movw	r30, r20
    2540:	97 81       	ldd	r25, Z+7	; 0x07
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	26 81       	ldd	r18, Z+6	; 0x06
    2546:	dc 01       	movw	r26, r24
    2548:	a2 0f       	add	r26, r18
    254a:	b1 1d       	adc	r27, r1
					if ((Addr >= Isb_Firmware_Offset) & (Addr < EEP_SIZE)) {
    254c:	80 91 96 00 	lds	r24, 0x0096
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	a8 17       	cp	r26, r24
    2554:	b9 07       	cpc	r27, r25
    2556:	58 f1       	brcs	.+86     	; 0x25ae <Isb_Config_Rx+0x2f2>
    2558:	f2 e0       	ldi	r31, 0x02	; 2
    255a:	a0 30       	cpi	r26, 0x00	; 0
    255c:	bf 07       	cpc	r27, r31
    255e:	38 f5       	brcc	.+78     	; 0x25ae <Isb_Config_Rx+0x2f2>
						MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    2560:	8e 81       	ldd	r24, Y+6	; 0x06
    2562:	80 6c       	ori	r24, 0xC0	; 192
    2564:	8e 83       	std	Y+6, r24	; 0x06
    2566:	90 e0       	ldi	r25, 0x00	; 0
						for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2568:	26 2f       	mov	r18, r22
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	23 50       	subi	r18, 0x03	; 3
    256e:	30 40       	sbci	r19, 0x00	; 0
    2570:	19 c0       	rjmp	.+50     	; 0x25a4 <Isb_Config_Rx+0x2e8>
							lib_eep_write_byte((uint8_t *)(Addr + i), aIsb_Msg->Data[3 + i]);
    2572:	bf 01       	movw	r22, r30
    2574:	6a 0f       	add	r22, r26
    2576:	7b 1f       	adc	r23, r27
    2578:	e4 0f       	add	r30, r20
    257a:	f5 1f       	adc	r31, r21
    257c:	e0 85       	ldd	r30, Z+8	; 0x08
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    257e:	e1 99       	sbic	0x1c, 1	; 28
    2580:	fe cf       	rjmp	.-4      	; 0x257e <Isb_Config_Rx+0x2c2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2582:	7f bb       	out	0x1f, r23	; 31
    2584:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
    2586:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2588:	8d b3       	in	r24, 0x1d	; 29
    258a:	8e 17       	cp	r24, r30
    258c:	51 f0       	breq	.+20     	; 0x25a2 <Isb_Config_Rx+0x2e6>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    258e:	e1 99       	sbic	0x1c, 1	; 28
    2590:	fe cf       	rjmp	.-4      	; 0x258e <Isb_Config_Rx+0x2d2>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2592:	7f bb       	out	0x1f, r23	; 31
    2594:	6e bb       	out	0x1e, r22	; 30
#endif
    EEDR = __value;
    2596:	ed bb       	out	0x1d, r30	; 29

    __asm__ __volatile__ (
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	e2 9a       	sbi	0x1c, 2	; 28
    259e:	e1 9a       	sbi	0x1c, 1	; 28
    25a0:	0f be       	out	0x3f, r0	; 63
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
					Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
					if ((Addr >= Isb_Firmware_Offset) & (Addr < EEP_SIZE)) {
						MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
						for (uint8_t i = 0; i < (Dlc - 3); i++) {
    25a2:	9f 5f       	subi	r25, 0xFF	; 255
    25a4:	e9 2f       	mov	r30, r25
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	e2 17       	cp	r30, r18
    25aa:	f3 07       	cpc	r31, r19
    25ac:	14 f3       	brlt	.-60     	; 0x2572 <Isb_Config_Rx+0x2b6>
						}
					}
				}
			}
		}
		MsgTx.Data[0] |= ISB_CONFIG_ANSWER_NACK;
    25ae:	8e 81       	ldd	r24, Y+6	; 0x06
    25b0:	80 64       	ori	r24, 0x40	; 64
    25b2:	8e 83       	std	Y+6, r24	; 0x06
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
		MsgTx.SourceId = Isb_Node_Id;
    25b4:	1d 83       	std	Y+5, r17	; 0x05
    25b6:	0c 83       	std	Y+4, r16	; 0x04
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
    25b8:	fb 82       	std	Y+3, r15	; 0x03
    25ba:	ea 82       	std	Y+2, r14	; 0x02
	void Isb_Config_Rx(Isb_Msg_t * aIsb_Msg) {
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
    25bc:	d9 82       	std	Y+1, r13	; 0x01
					}
				}
			}
		}
		MsgTx.Data[0] |= ISB_CONFIG_ANSWER_NACK;
		Isb_SendMsg(&MsgTx);
    25be:	ce 01       	movw	r24, r28
    25c0:	01 96       	adiw	r24, 0x01	; 1
    25c2:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <Isb_SendMsg>
	}
    25c6:	2d 96       	adiw	r28, 0x0d	; 13
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	cf 91       	pop	r28
    25d4:	df 91       	pop	r29
    25d6:	1f 91       	pop	r17
    25d8:	0f 91       	pop	r16
    25da:	ff 90       	pop	r15
    25dc:	ef 90       	pop	r14
    25de:	df 90       	pop	r13
    25e0:	08 95       	ret

000025e2 <lib_eep_fw_read_word>:
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    return __eerd_word (__p, eeprom_read_byte);
    25e2:	20 91 96 00 	lds	r18, 0x0096
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	22 0f       	add	r18, r18
    25ea:	33 1f       	adc	r19, r19
    25ec:	82 0f       	add	r24, r18
    25ee:	93 1f       	adc	r25, r19
    25f0:	65 e6       	ldi	r22, 0x65	; 101
    25f2:	70 e0       	ldi	r23, 0x00	; 0
    25f4:	0e 94 1d 14 	call	0x283a	; 0x283a <__eerd_word>



	uint16_t __attribute__((always_inline)) lib_eep_fw_read_word(uint16_t * aAddr) {
		return eeprom_read_word(Isb_Firmware_Offset + aAddr);;
	}
    25f8:	08 95       	ret

000025fa <lib_eep_read_word>:
    25fa:	65 e6       	ldi	r22, 0x65	; 101
    25fc:	70 e0       	ldi	r23, 0x00	; 0
    25fe:	0e 94 1d 14 	call	0x283a	; 0x283a <__eerd_word>



	uint16_t __attribute__((always_inline)) lib_eep_read_word(uint16_t * aAddr) {
		return eeprom_read_word(aAddr);;
	}
    2602:	08 95       	ret

00002604 <main>:



	int main(void) {
    2604:	ff 92       	push	r15
    2606:	0f 93       	push	r16
    2608:	1f 93       	push	r17
    260a:	df 93       	push	r29
    260c:	cf 93       	push	r28
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	2d 97       	sbiw	r28, 0x0d	; 13
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
		wdt_enable(WDTO_500MS);
    261e:	2d e0       	ldi	r18, 0x0D	; 13
    2620:	88 e1       	ldi	r24, 0x18	; 24
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	a8 95       	wdr
    262a:	81 bd       	out	0x21, r24	; 33
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	21 bd       	out	0x21, r18	; 33
		wdt_reset();
    2630:	a8 95       	wdr
    2632:	80 e1       	ldi	r24, 0x10	; 16
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	65 e6       	ldi	r22, 0x65	; 101
    2638:	70 e0       	ldi	r23, 0x00	; 0
    263a:	0e 94 1d 14 	call	0x283a	; 0x283a <__eerd_word>
		Isb_Node_Id = lib_eep_read_word((uint16_t *)EEP__ISB_NODE_ID_0);
    263e:	90 93 95 00 	sts	0x0095, r25
    2642:	80 93 94 00 	sts	0x0094, r24
		if ((Isb_Node_Id == 0) | (Isb_Node_Id > 2047)) {
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	8f 5f       	subi	r24, 0xFF	; 255
    264a:	97 40       	sbci	r25, 0x07	; 7
    264c:	b8 f0       	brcs	.+46     	; 0x267c <main+0x78>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    264e:	e1 99       	sbic	0x1c, 1	; 28
    2650:	fe cf       	rjmp	.-4      	; 0x264e <main+0x4a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2652:	82 e1       	ldi	r24, 0x12	; 18
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	9f bb       	out	0x1f, r25	; 31
    2658:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    265a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    265c:	8d b3       	in	r24, 0x1d	; 29



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
    265e:	88 23       	and	r24, r24
    2660:	61 f0       	breq	.+24     	; 0x267a <main+0x76>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2662:	e1 99       	sbic	0x1c, 1	; 28
    2664:	fe cf       	rjmp	.-4      	; 0x2662 <main+0x5e>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2666:	82 e1       	ldi	r24, 0x12	; 18
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	9f bb       	out	0x1f, r25	; 31
    266c:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    266e:	1d ba       	out	0x1d, r1	; 29

    __asm__ __volatile__ (
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	e2 9a       	sbi	0x1c, 2	; 28
    2676:	e1 9a       	sbi	0x1c, 1	; 28
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	ff cf       	rjmp	.-2      	; 0x267a <main+0x76>
    267c:	2c e0       	ldi	r18, 0x0C	; 12
    267e:	30 e0       	ldi	r19, 0x00	; 0
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
			Node_Reboot();
		}
		for (uint8_t i = 0; i < 4; i++) {
			lib_eep_write_byte((uint8_t *)(EEP__ISB_FIRMWARE_CODE_0 + i), Isb_Firmware_Code[i]);
    2680:	f9 01       	movw	r30, r18
    2682:	ec 5a       	subi	r30, 0xAC	; 172
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2688:	e1 99       	sbic	0x1c, 1	; 28
    268a:	fe cf       	rjmp	.-4      	; 0x2688 <main+0x84>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    268c:	3f bb       	out	0x1f, r19	; 31
    268e:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2690:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2692:	8d b3       	in	r24, 0x1d	; 29
    2694:	8e 17       	cp	r24, r30
    2696:	51 f0       	breq	.+20     	; 0x26ac <main+0xa8>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2698:	e1 99       	sbic	0x1c, 1	; 28
    269a:	fe cf       	rjmp	.-4      	; 0x2698 <main+0x94>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    269c:	3f bb       	out	0x1f, r19	; 31
    269e:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    26a0:	ed bb       	out	0x1d, r30	; 29

    __asm__ __volatile__ (
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	e2 9a       	sbi	0x1c, 2	; 28
    26a8:	e1 9a       	sbi	0x1c, 1	; 28
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	2f 5f       	subi	r18, 0xFF	; 255
    26ae:	3f 4f       	sbci	r19, 0xFF	; 255
		Isb_Node_Id = lib_eep_read_word((uint16_t *)EEP__ISB_NODE_ID_0);
		if ((Isb_Node_Id == 0) | (Isb_Node_Id > 2047)) {
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
			Node_Reboot();
		}
		for (uint8_t i = 0; i < 4; i++) {
    26b0:	20 31       	cpi	r18, 0x10	; 16
    26b2:	31 05       	cpc	r19, r1
    26b4:	29 f7       	brne	.-54     	; 0x2680 <main+0x7c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    26b6:	e1 99       	sbic	0x1c, 1	; 28
    26b8:	fe cf       	rjmp	.-4      	; 0x26b6 <main+0xb2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    26ba:	8a e1       	ldi	r24, 0x1A	; 26
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	9f bb       	out	0x1f, r25	; 31
    26c0:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    26c2:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    26c4:	8d b3       	in	r24, 0x1d	; 29
			lib_eep_write_byte((uint8_t *)(EEP__ISB_FIRMWARE_CODE_0 + i), Isb_Firmware_Code[i]);
		}
		Isb_Firmware_Offset = lib_eep_read_byte((uint8_t *)EEP__ISB_FIRMWARE_OFFSET);
    26c6:	80 93 96 00 	sts	0x0096, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    26ca:	e1 99       	sbic	0x1c, 1	; 28
    26cc:	fe cf       	rjmp	.-4      	; 0x26ca <main+0xc6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    26ce:	82 e1       	ldi	r24, 0x12	; 18
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	9f bb       	out	0x1f, r25	; 31
    26d4:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    26d6:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    26d8:	8d b3       	in	r24, 0x1d	; 29
		Isb_Node_Operating_Mode = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
    26da:	80 93 97 00 	sts	0x0097, r24
		if ((Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_NORM) & (Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_CFG))
    26de:	88 50       	subi	r24, 0x08	; 8
    26e0:	82 30       	cpi	r24, 0x02	; 2
    26e2:	d0 f0       	brcs	.+52     	; 0x2718 <main+0x114>
		{
			Isb_Node_Operating_Mode = ISB_NODE_OPERATING_MODE__FW_NORM;
    26e4:	88 e0       	ldi	r24, 0x08	; 8
    26e6:	80 93 97 00 	sts	0x0097, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    26ea:	e1 99       	sbic	0x1c, 1	; 28
    26ec:	fe cf       	rjmp	.-4      	; 0x26ea <main+0xe6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    26ee:	82 e1       	ldi	r24, 0x12	; 18
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	9f bb       	out	0x1f, r25	; 31
    26f4:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    26f6:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    26f8:	8d b3       	in	r24, 0x1d	; 29
    26fa:	88 30       	cpi	r24, 0x08	; 8
    26fc:	69 f0       	breq	.+26     	; 0x2718 <main+0x114>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    26fe:	e1 99       	sbic	0x1c, 1	; 28
    2700:	fe cf       	rjmp	.-4      	; 0x26fe <main+0xfa>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2702:	82 e1       	ldi	r24, 0x12	; 18
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	9f bb       	out	0x1f, r25	; 31
    2708:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    270a:	88 e0       	ldi	r24, 0x08	; 8
    270c:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	e2 9a       	sbi	0x1c, 2	; 28
    2714:	e1 9a       	sbi	0x1c, 1	; 28
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	40 91 98 00 	lds	r20, 0x0098
    271c:	2c e1       	ldi	r18, 0x1C	; 28
    271e:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2720:	e1 99       	sbic	0x1c, 1	; 28
    2722:	fe cf       	rjmp	.-4      	; 0x2720 <main+0x11c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2724:	3f bb       	out	0x1f, r19	; 31
    2726:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2728:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    272a:	8d b3       	in	r24, 0x1d	; 29
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, Isb_Node_Operating_Mode);
		}
		for (uint8_t i = 0; i < 4; i++)
		{
			if (lib_eep_read_byte((uint8_t *)(EEP__ISB_CONFIG_CODE_0 + i)) != Isb_Firmware_Code[i])
    272c:	f9 01       	movw	r30, r18
    272e:	ec 5b       	subi	r30, 0xBC	; 188
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	90 81       	ld	r25, Z
    2734:	89 13       	cpse	r24, r25
			{
				Error |= ERROR__CONFIG_CODE;
    2736:	41 60       	ori	r20, 0x01	; 1
    2738:	2f 5f       	subi	r18, 0xFF	; 255
    273a:	3f 4f       	sbci	r19, 0xFF	; 255
		if ((Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_NORM) & (Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_CFG))
		{
			Isb_Node_Operating_Mode = ISB_NODE_OPERATING_MODE__FW_NORM;
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, Isb_Node_Operating_Mode);
		}
		for (uint8_t i = 0; i < 4; i++)
    273c:	20 32       	cpi	r18, 0x20	; 32
    273e:	31 05       	cpc	r19, r1
    2740:	79 f7       	brne	.-34     	; 0x2720 <main+0x11c>
    2742:	40 93 98 00 	sts	0x0098, r20
		#if defined(INF_TWI_C_)
			Inf_Twi_Init(0, 12);
// TODO:
Lib_Pin_Set(4, 2, LIB_PIN_OUTPUT_HIGH);
		#endif /* INF_TWI_C_ */
		if (Error == 0) {
    2746:	44 23       	and	r20, r20
    2748:	99 f4       	brne	.+38     	; 0x2770 <main+0x16c>



	void Isb_Systick_Init(void) {
		#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__) || defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
			TCCR0 = (1 << WGM01) | (1 << CS01) | (1 << CS00);
    274a:	8b e0       	ldi	r24, 0x0B	; 11
    274c:	83 bf       	out	0x33, r24	; 51
			TCNT0 = 0;
    274e:	12 be       	out	0x32, r1	; 50
			OCR0 = (F_CPU / 64) / 1000;
    2750:	8a ef       	ldi	r24, 0xFA	; 250
    2752:	8c bf       	out	0x3c, r24	; 60
			TIMSK = (1 << OCIE0);
    2754:	82 e0       	ldi	r24, 0x02	; 2
    2756:	89 bf       	out	0x39, r24	; 57
			Isb_Systick_Init();
			Isb_Ch_Init();
    2758:	0e 94 2a 05 	call	0xa54	; 0xa54 <Isb_Ch_Init>
			Isb_Grp_Init();
    275c:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <Isb_Grp_Init>
			Isb_Obj_Init();
    2760:	0e 94 3e 0c 	call	0x187c	; 0x187c <Isb_Obj_Init>
			Isb_Obj_Exec();
    2764:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <Isb_Obj_Exec>
			Isb_App_Init();
    2768:	0e 94 6b 05 	call	0xad6	; 0xad6 <Isb_App_Init>
			Isb_App_Exec();
    276c:	0e 94 f2 06 	call	0xde4	; 0xde4 <Isb_App_Exec>
		}
		sei();
    2770:	78 94       	sei
		#endif /* ISB_INF_USART0 == 1 */
		#if ISB_INF_USART1 == 1
			Isb_Inf_Usart_Init(1);
		#endif /* ISB_INF_USART1 == 1 */
		#if ISB_INF_CAN0 == 1
			Isb_Inf_Can_Init(0);
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	0e 94 44 03 	call	0x688	; 0x688 <Isb_Inf_Can_Init>
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
    2778:	40 91 94 00 	lds	r20, 0x0094
    277c:	50 91 95 00 	lds	r21, 0x0095
		Isb_Msg.Data[0] = ISB_MSG_TOP__SERIAL_NUMBER__MODE__ERROR;
    2780:	81 e2       	ldi	r24, 0x21	; 33
    2782:	8e 83       	std	Y+6, r24	; 0x06
    2784:	fe 01       	movw	r30, r28
    2786:	37 96       	adiw	r30, 0x07	; 7
    2788:	24 e0       	ldi	r18, 0x04	; 4
    278a:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    278c:	e1 99       	sbic	0x1c, 1	; 28
    278e:	fe cf       	rjmp	.-4      	; 0x278c <main+0x188>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2790:	3f bb       	out	0x1f, r19	; 31
    2792:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2794:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2796:	8d b3       	in	r24, 0x1d	; 29
		for (uint8_t i = 0; i < 4; i++) {
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
    2798:	81 93       	st	Z+, r24
    279a:	2f 5f       	subi	r18, 0xFF	; 255
    279c:	3f 4f       	sbci	r19, 0xFF	; 255
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
		Isb_Msg.Data[0] = ISB_MSG_TOP__SERIAL_NUMBER__MODE__ERROR;
		for (uint8_t i = 0; i < 4; i++) {
    279e:	28 30       	cpi	r18, 0x08	; 8
    27a0:	31 05       	cpc	r19, r1
    27a2:	a1 f7       	brne	.-24     	; 0x278c <main+0x188>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    27a4:	e1 99       	sbic	0x1c, 1	; 28
    27a6:	fe cf       	rjmp	.-4      	; 0x27a4 <main+0x1a0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    27a8:	82 e1       	ldi	r24, 0x12	; 18
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	9f bb       	out	0x1f, r25	; 31
    27ae:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    27b0:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    27b2:	8d b3       	in	r24, 0x1d	; 29
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
    27b4:	8b 87       	std	Y+11, r24	; 0x0b
		Isb_Msg.Data[6] = Error;
    27b6:	80 91 98 00 	lds	r24, 0x0098
    27ba:	8c 87       	std	Y+12, r24	; 0x0c
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
    27bc:	5d 83       	std	Y+5, r21	; 0x05
    27be:	4c 83       	std	Y+4, r20	; 0x04
		#if ISB_INF_USART1_SLAVE == 1
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
    27c0:	82 e0       	ldi	r24, 0x02	; 2
    27c2:	90 ef       	ldi	r25, 0xF0	; 240
    27c4:	9b 83       	std	Y+3, r25	; 0x03
    27c6:	8a 83       	std	Y+2, r24	; 0x02
		#endif /* ISB_INF_USART0_SLAVE == 1 */
		#if ISB_INF_USART1_SLAVE == 1
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
    27c8:	87 e2       	ldi	r24, 0x27	; 39
    27ca:	89 83       	std	Y+1, r24	; 0x01
		for (uint8_t i = 0; i < 4; i++) {
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
		Isb_Msg.Data[6] = Error;
		Isb_SendMsg(&Isb_Msg);
    27cc:	8e 01       	movw	r16, r28
    27ce:	0f 5f       	subi	r16, 0xFF	; 255
    27d0:	1f 4f       	sbci	r17, 0xFF	; 255
    27d2:	c8 01       	movw	r24, r16
    27d4:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <Isb_SendMsg>
						}
					}
				}
			#endif /* ISB_INF_USART1 == 1 */
			#if ISB_INF_CAN0 == 1
				if (Isb_Inf_Can_Rx(0, &Isb_Msg) == TRUE) {
    27d8:	f0 2e       	mov	r15, r16
    27da:	01 2f       	mov	r16, r17
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
		Isb_Msg.Data[6] = Error;
		Isb_SendMsg(&Isb_Msg);
		for (;;) {
			wdt_reset();
    27dc:	a8 95       	wdr
			if (Error == 0) {
    27de:	80 91 98 00 	lds	r24, 0x0098
    27e2:	88 23       	and	r24, r24
    27e4:	31 f4       	brne	.+12     	; 0x27f2 <main+0x1ee>
				Isb_Systick_Exec();
    27e6:	0e 94 62 04 	call	0x8c4	; 0x8c4 <Isb_Systick_Exec>
				Isb_Obj_Exec();
    27ea:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <Isb_Obj_Exec>
				Isb_App_Exec();
    27ee:	0e 94 f2 06 	call	0xde4	; 0xde4 <Isb_App_Exec>
						}
					}
				}
			#endif /* ISB_INF_USART1 == 1 */
			#if ISB_INF_CAN0 == 1
				if (Isb_Inf_Can_Rx(0, &Isb_Msg) == TRUE) {
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	6f 2d       	mov	r22, r15
    27f6:	70 2f       	mov	r23, r16
    27f8:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Isb_Inf_Can_Rx>
    27fc:	81 30       	cpi	r24, 0x01	; 1
    27fe:	71 f7       	brne	.-36     	; 0x27dc <main+0x1d8>
						Isb_Inf_Can_Tx(1, &Isb_Msg);
					#endif /* ISB_INF_CAN1 == 1 */
					#if ISB_INF_CAN2 == 1
						Isb_Inf_Can_Tx(2, &Isb_Msg);
					#endif /* ISB_INF_CAN2 == 1 */
					if ((Isb_Msg.Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_UNICAST) {
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	80 73       	andi	r24, 0x30	; 48
    2804:	69 f4       	brne	.+26     	; 0x2820 <main+0x21c>
						if (Isb_Msg.DestId == Isb_Node_Id) {
    2806:	2a 81       	ldd	r18, Y+2	; 0x02
    2808:	3b 81       	ldd	r19, Y+3	; 0x03
    280a:	80 91 94 00 	lds	r24, 0x0094
    280e:	90 91 95 00 	lds	r25, 0x0095
    2812:	28 17       	cp	r18, r24
    2814:	39 07       	cpc	r19, r25
    2816:	21 f4       	brne	.+8      	; 0x2820 <main+0x21c>
							Isb_Config_Rx(&Isb_Msg);
    2818:	8f 2d       	mov	r24, r15
    281a:	90 2f       	mov	r25, r16
    281c:	0e 94 5e 11 	call	0x22bc	; 0x22bc <Isb_Config_Rx>
						}
					}
					if ((Isb_Msg.Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_MULTICAST) {
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	80 73       	andi	r24, 0x30	; 48
    2824:	80 32       	cpi	r24, 0x20	; 32
    2826:	d1 f6       	brne	.-76     	; 0x27dc <main+0x1d8>
						if (Error == 0) {
    2828:	80 91 98 00 	lds	r24, 0x0098
    282c:	88 23       	and	r24, r24
    282e:	b1 f6       	brne	.-84     	; 0x27dc <main+0x1d8>
							Isb_Obj_Rx(&Isb_Msg);
    2830:	8f 2d       	mov	r24, r15
    2832:	90 2f       	mov	r25, r16
    2834:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Isb_Obj_Rx>
    2838:	d1 cf       	rjmp	.-94     	; 0x27dc <main+0x1d8>

0000283a <__eerd_word>:
    283a:	df 92       	push	r13
    283c:	ef 92       	push	r14
    283e:	ff 92       	push	r15
    2840:	0f 93       	push	r16
    2842:	1f 93       	push	r17
    2844:	7b 01       	movw	r14, r22
    2846:	8c 01       	movw	r16, r24
    2848:	fb 01       	movw	r30, r22
    284a:	09 95       	icall
    284c:	d8 2e       	mov	r13, r24
    284e:	c8 01       	movw	r24, r16
    2850:	01 96       	adiw	r24, 0x01	; 1
    2852:	f7 01       	movw	r30, r14
    2854:	09 95       	icall
    2856:	98 2f       	mov	r25, r24
    2858:	8d 2d       	mov	r24, r13
    285a:	1f 91       	pop	r17
    285c:	0f 91       	pop	r16
    285e:	ff 90       	pop	r15
    2860:	ef 90       	pop	r14
    2862:	df 90       	pop	r13
    2864:	08 95       	ret

00002866 <_exit>:
    2866:	f8 94       	cli

00002868 <__stop_program>:
    2868:	ff cf       	rjmp	.-2      	; 0x2868 <__stop_program>
