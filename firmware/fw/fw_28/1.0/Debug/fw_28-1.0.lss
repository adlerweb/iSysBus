
fw_28-1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002edc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00002edc  00002f50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002e0  00800094  00002f10  00002f84  2**0
                  ALLOC
  3 .stab         00005fc4  00000000  00000000  00002f84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000026f1  00000000  00000000  00008f48  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__ctors_end>
       4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       8:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      10:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      14:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      18:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      1c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      20:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      24:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      28:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      2c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      30:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      34:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      38:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      3c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      40:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      44:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      48:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      4c:	0c 94 76 05 	jmp	0xaec	; 0xaec <__vector_19>
      50:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      54:	1d 0e       	add	r1, r29
      56:	2b 0e       	add	r2, r27
      58:	32 0e       	add	r3, r18
      5a:	39 0e       	add	r3, r25
      5c:	40 0e       	add	r4, r16
      5e:	47 0e       	add	r4, r23
      60:	4e 0e       	add	r4, r30
      62:	55 0e       	add	r5, r21
      64:	5c 0e       	add	r5, r28
      66:	63 0e       	add	r6, r19
      68:	6a 0e       	add	r6, r26
      6a:	71 0e       	add	r7, r17
      6c:	78 0e       	add	r7, r24
      6e:	7f 0e       	add	r7, r31
      70:	86 0e       	add	r8, r22
      72:	8d 0e       	add	r8, r29
      74:	94 0e       	add	r9, r20
      76:	9b 0e       	add	r9, r27
      78:	a2 0e       	add	r10, r18
      7a:	a9 0e       	add	r10, r25
      7c:	b0 0e       	add	r11, r16
      7e:	b7 0e       	add	r11, r23
      80:	be 0e       	add	r11, r30
      82:	c5 0e       	add	r12, r21
      84:	cc 0e       	add	r12, r28
      86:	d3 0e       	add	r13, r19
      88:	da 0e       	add	r13, r26
      8a:	e1 0e       	add	r14, r17
      8c:	e8 0e       	add	r14, r24
      8e:	ef 0e       	add	r14, r31
      90:	f6 0e       	add	r15, r22
      92:	fd 0e       	add	r15, r29
      94:	04 0f       	add	r16, r20
      96:	0b 0f       	add	r16, r27
      98:	12 0f       	add	r17, r18
      9a:	19 0f       	add	r17, r25
      9c:	20 0f       	add	r18, r16
      9e:	27 0f       	add	r18, r23
      a0:	2e 0f       	add	r18, r30
      a2:	35 0f       	add	r19, r21
      a4:	3c 0f       	add	r19, r28
      a6:	43 0f       	add	r20, r19
      a8:	4a 0f       	add	r20, r26
      aa:	51 0f       	add	r21, r17
      ac:	58 0f       	add	r21, r24
      ae:	5f 0f       	add	r21, r31
      b0:	66 0f       	add	r22, r22
      b2:	6d 0f       	add	r22, r29
      b4:	74 0f       	add	r23, r20
      b6:	7b 0f       	add	r23, r27
      b8:	82 0f       	add	r24, r18
      ba:	89 0f       	add	r24, r25
      bc:	90 0f       	add	r25, r16
      be:	97 0f       	add	r25, r23
      c0:	9e 0f       	add	r25, r30
      c2:	a5 0f       	add	r26, r21

000000c4 <pgmIsb_Obj_1Bit_Obj_Array>:
      c4:	00 01 02 05 06 07 0a 0b 0c 0f 10 11 14 15 16 19     ................
      d4:	1a 1b 1e 1f 20 23 24 25 28 29 2a 2b 2c 2d 2e 2f     .... #$%()*+,-./
      e4:	30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f     0123456789:;<=>?
      f4:	40 41 42 43 44 45 46 47                             @ABCDEFG

000000fc <pgmIsb_Obj_4Bit_Obj_Array>:
      fc:	03 08 0d 12 17 1c 21 26                             ......!&

00000104 <pgmIsb_Obj_8Bit_Obj_Array>:
     104:	04 09 0e 13 18 1d 22 27                             ......"'

0000010c <pgmIsb_Obj_1Bit_Ch_Array>:
     10c:	00 00 00 01 01 01 02 02 02 03 03 03 04 04 04 05     ................
     11c:	05 05 06 06 06 07 07 07 08 08 08 08 09 09 09 09     ................
     12c:	0a 0a 0a 0a 0b 0b 0b 0b 0c 0c 0c 0c 0d 0d 0d 0d     ................
     13c:	0e 0e 0e 0e 0f 0f 0f 0f                             ........

00000144 <pgmIsb_Obj_4Bit_Ch_Array>:
     144:	00 01 02 03 04 05 06 07                             ........

0000014c <pgmIsb_Obj_8Bit_Ch_Array>:
     14c:	00 01 02 03 04 05 06 07                             ........

00000154 <pgmIsb_App_DigOut_Ch_Array>:
     154:	08 09 0a 0b 0c 0d 0e 0f                             ........

0000015c <pgmIsb_App_DigOut_Obj_1Bit_0_Array>:
     15c:	18 1c 20 24 28 2c 30 34                             .. $(,04

00000164 <pgmIsb_App_DigOut_Obj_1Bit_1_Array>:
     164:	19 1d 21 25 29 2d 31 35                             ..!%)-15

0000016c <pgmIsb_App_DigOut_Obj_1Bit_2_Array>:
     16c:	1a 1e 22 26 2a 2e 32 36                             .."&*.26

00000174 <pgmIsb_App_DigOut_Obj_1Bit_3_Array>:
     174:	1b 1f 23 27 2b 2f 33 37                             ..#'+/37

0000017c <pgmIsb_App_DigOut_Pin0_Array>:
     17c:	10 11 1a 1b 1c 1d 1e 1f                             ........

00000184 <pgmIsb_App_DigIn_Ch_Array>:
     184:	00 01 02 03 04 05 06 07                             ........

0000018c <pgmIsb_App_DigIn_Pin0_Array>:
     18c:	48 49 4a 4b 4c 4d 4e 4f                             HIJKLMNO

00000194 <pgmIsb_App_DigIn_Obj_1Bit_1_Array>:
     194:	01 04 07 0a 0d 10 13 16                             ........

0000019c <pgmIsb_App_DigIn_Obj_1Bit_2_Array>:
     19c:	02 05 08 0b 0e 11 14 17                             ........

000001a4 <__ctors_end>:
     1a4:	11 24       	eor	r1, r1
     1a6:	1f be       	out	0x3f, r1	; 63
     1a8:	cf e5       	ldi	r28, 0x5F	; 95
     1aa:	d4 e0       	ldi	r29, 0x04	; 4
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	cd bf       	out	0x3d, r28	; 61

000001b0 <__do_copy_data>:
     1b0:	10 e0       	ldi	r17, 0x00	; 0
     1b2:	a0 e6       	ldi	r26, 0x60	; 96
     1b4:	b0 e0       	ldi	r27, 0x00	; 0
     1b6:	ec ed       	ldi	r30, 0xDC	; 220
     1b8:	fe e2       	ldi	r31, 0x2E	; 46
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <.do_copy_data_start>

000001bc <.do_copy_data_loop>:
     1bc:	05 90       	lpm	r0, Z+
     1be:	0d 92       	st	X+, r0

000001c0 <.do_copy_data_start>:
     1c0:	a4 39       	cpi	r26, 0x94	; 148
     1c2:	b1 07       	cpc	r27, r17
     1c4:	d9 f7       	brne	.-10     	; 0x1bc <.do_copy_data_loop>

000001c6 <__do_clear_bss>:
     1c6:	13 e0       	ldi	r17, 0x03	; 3
     1c8:	a4 e9       	ldi	r26, 0x94	; 148
     1ca:	b0 e0       	ldi	r27, 0x00	; 0
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <.do_clear_bss_start>

000001ce <.do_clear_bss_loop>:
     1ce:	1d 92       	st	X+, r1

000001d0 <.do_clear_bss_start>:
     1d0:	a4 37       	cpi	r26, 0x74	; 116
     1d2:	b1 07       	cpc	r27, r17
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <.do_clear_bss_loop>
     1d6:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <main>
     1da:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <_exit>

000001de <__bad_interrupt>:
     1de:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000001e2 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
     1e2:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
     1e4:	e1 99       	sbic	0x1c, 1	; 28
     1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <eeprom_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     1e8:	3f bb       	out	0x1f, r19	; 31
     1ea:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
     1ec:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     1ee:	8d b3       	in	r24, 0x1d	; 29
}
     1f0:	08 95       	ret

000001f2 <lib_eep_read_byte>:
#ifndef LIB_EEP_C_
	#define LIB_EEP_C_



	uint8_t __attribute__((always_inline)) lib_eep_read_byte(uint8_t * aAddr) {
     1f2:	9c 01       	movw	r18, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     1f4:	e1 99       	sbic	0x1c, 1	; 28
     1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <lib_eep_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     1f8:	3f bb       	out	0x1f, r19	; 31
     1fa:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
     1fc:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     1fe:	8d b3       	in	r24, 0x1d	; 29
		return eeprom_read_byte(aAddr);;
	}
     200:	08 95       	ret

00000202 <lib_eep_write_byte>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     202:	e1 99       	sbic	0x1c, 1	; 28
     204:	fe cf       	rjmp	.-4      	; 0x202 <lib_eep_write_byte>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     206:	9c 01       	movw	r18, r24
     208:	9f bb       	out	0x1f, r25	; 31
     20a:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     20c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     20e:	8d b3       	in	r24, 0x1d	; 29
	}



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
     210:	86 17       	cp	r24, r22
     212:	51 f0       	breq	.+20     	; 0x228 <lib_eep_write_byte+0x26>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     214:	e1 99       	sbic	0x1c, 1	; 28
     216:	fe cf       	rjmp	.-4      	; 0x214 <lib_eep_write_byte+0x12>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     218:	3f bb       	out	0x1f, r19	; 31
     21a:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
     21c:	6d bb       	out	0x1d, r22	; 29

    __asm__ __volatile__ (
     21e:	0f b6       	in	r0, 0x3f	; 63
     220:	f8 94       	cli
     222:	e2 9a       	sbi	0x1c, 2	; 28
     224:	e1 9a       	sbi	0x1c, 1	; 28
     226:	0f be       	out	0x3f, r0	; 63
     228:	08 95       	ret

0000022a <lib_eep_fw_read_byte>:
	}



	uint8_t __attribute__((always_inline)) lib_eep_fw_read_byte(uint8_t * aAddr) {
		return eeprom_read_byte(Isb_Firmware_Offset + aAddr);;
     22a:	20 91 96 00 	lds	r18, 0x0096
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     22e:	e1 99       	sbic	0x1c, 1	; 28
     230:	fe cf       	rjmp	.-4      	; 0x22e <lib_eep_fw_read_byte+0x4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     232:	82 0f       	add	r24, r18
     234:	91 1d       	adc	r25, r1
     236:	9f bb       	out	0x1f, r25	; 31
     238:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     23a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     23c:	8d b3       	in	r24, 0x1d	; 29
	}
     23e:	08 95       	ret

00000240 <lib_eep_fw_write_byte>:
		return eeprom_read_word(Isb_Firmware_Offset + aAddr);;
	}



	void __attribute__((always_inline)) lib_eep_fw_write_byte(uint8_t * aAddr, uint8_t aData) {
     240:	ac 01       	movw	r20, r24
		if (eeprom_read_byte(Isb_Firmware_Offset + aAddr) != aData) {
     242:	80 91 96 00 	lds	r24, 0x0096
     246:	28 2f       	mov	r18, r24
     248:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     24a:	e1 99       	sbic	0x1c, 1	; 28
     24c:	fe cf       	rjmp	.-4      	; 0x24a <lib_eep_fw_write_byte+0xa>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     24e:	ca 01       	movw	r24, r20
     250:	82 0f       	add	r24, r18
     252:	93 1f       	adc	r25, r19
     254:	9f bb       	out	0x1f, r25	; 31
     256:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     258:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     25a:	8d b3       	in	r24, 0x1d	; 29
     25c:	86 17       	cp	r24, r22
     25e:	61 f0       	breq	.+24     	; 0x278 <lib_eep_fw_write_byte+0x38>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     260:	e1 99       	sbic	0x1c, 1	; 28
     262:	fe cf       	rjmp	.-4      	; 0x260 <lib_eep_fw_write_byte+0x20>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     264:	24 0f       	add	r18, r20
     266:	35 1f       	adc	r19, r21
     268:	3f bb       	out	0x1f, r19	; 31
     26a:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
     26c:	6d bb       	out	0x1d, r22	; 29

    __asm__ __volatile__ (
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	f8 94       	cli
     272:	e2 9a       	sbi	0x1c, 2	; 28
     274:	e1 9a       	sbi	0x1c, 1	; 28
     276:	0f be       	out	0x3f, r0	; 63
     278:	08 95       	ret

0000027a <Lib_Pin_Get>:
	#endif



	uint8_t Lib_Pin_Get(const uint8_t aPort, const uint8_t aPin) {
		return (*(PINx[aPort]) >> aPin) & 1;
     27a:	e8 2f       	mov	r30, r24
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	ee 0f       	add	r30, r30
     280:	ff 1f       	adc	r31, r31
     282:	ec 57       	subi	r30, 0x7C	; 124
     284:	ff 4f       	sbci	r31, 0xFF	; 255
     286:	01 90       	ld	r0, Z+
     288:	f0 81       	ld	r31, Z
     28a:	e0 2d       	mov	r30, r0
     28c:	80 81       	ld	r24, Z
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	02 c0       	rjmp	.+4      	; 0x296 <Lib_Pin_Get+0x1c>
     292:	95 95       	asr	r25
     294:	87 95       	ror	r24
     296:	6a 95       	dec	r22
     298:	e2 f7       	brpl	.-8      	; 0x292 <Lib_Pin_Get+0x18>
	}
     29a:	81 70       	andi	r24, 0x01	; 1
     29c:	08 95       	ret

0000029e <Lib_Pin_Set>:



	void __attribute__((noinline)) Lib_Pin_Set(const uint8_t aPort, const uint8_t aPin, const uint8_t aCmd) {
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <Lib_Pin_Set+0x8>
		uint8_t mask;
		uint8_t tmp;
		volatile uint8_t *reg;
		uint8_t Pxx = aPin;
		for (mask = 1; Pxx--; mask <<= 1) ;
     2a2:	99 0f       	add	r25, r25
     2a4:	61 50       	subi	r22, 0x01	; 1
     2a6:	66 23       	and	r22, r22
     2a8:	e1 f7       	brne	.-8      	; 0x2a2 <Lib_Pin_Set+0x4>
		reg = PORTx[aPort];
     2aa:	a8 2f       	mov	r26, r24
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	fd 01       	movw	r30, r26
     2b0:	ee 0f       	add	r30, r30
     2b2:	ff 1f       	adc	r31, r31
     2b4:	ec 58       	subi	r30, 0x8C	; 140
     2b6:	ff 4f       	sbci	r31, 0xFF	; 255
     2b8:	01 90       	ld	r0, Z+
     2ba:	f0 81       	ld	r31, Z
     2bc:	e0 2d       	mov	r30, r0
		tmp = *reg | mask;
     2be:	80 81       	ld	r24, Z
     2c0:	89 2b       	or	r24, r25
		if (! (aCmd & 2)) {
     2c2:	41 ff       	sbrs	r20, 1
			tmp ^= mask;
     2c4:	89 27       	eor	r24, r25
		}
		*reg = tmp;
     2c6:	80 83       	st	Z, r24
		reg = DDRx[aPort];
     2c8:	aa 0f       	add	r26, r26
     2ca:	bb 1f       	adc	r27, r27
     2cc:	ac 59       	subi	r26, 0x9C	; 156
     2ce:	bf 4f       	sbci	r27, 0xFF	; 255
     2d0:	ed 91       	ld	r30, X+
     2d2:	fc 91       	ld	r31, X
		tmp = *reg | mask;
     2d4:	80 81       	ld	r24, Z
     2d6:	89 2b       	or	r24, r25
		if (! (aCmd & 1)) {
     2d8:	40 ff       	sbrs	r20, 0
			tmp ^= mask;
     2da:	89 27       	eor	r24, r25
		}
		*reg = tmp;
     2dc:	80 83       	st	Z, r24
	}
     2de:	08 95       	ret

000002e0 <Inf_Spi_Init>:
#ifndef INF_SPI_C_
	#define INF_SPI_C_



	void Inf_Spi_Init(const uint8_t aCfg) {
     2e0:	df 93       	push	r29
     2e2:	cf 93       	push	r28
     2e4:	0f 92       	push	r0
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	89 83       	std	Y+1, r24	; 0x01
		// Bit 3	CPOL (Clock Polarity)
		// Bit 4	CPHA (Clock Phase)
		// Bit 5	SPR0
		// Bit 6	SPR1
		// Bit 7	SPI2X
		SPCR &= ~(1 << SPE);
     2ec:	6e 98       	cbi	0x0d, 6	; 13
		if (bit_is_set(aCfg, 0)) {
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	80 ff       	sbrs	r24, 0
     2f2:	10 c0       	rjmp	.+32     	; 0x314 <Inf_Spi_Init+0x34>
			if (bit_is_set(aCfg, 1)) {
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	81 ff       	sbrs	r24, 1
     2f8:	06 c0       	rjmp	.+12     	; 0x306 <Inf_Spi_Init+0x26>
				INF_SPI_DDR |= (1 << INF_SPI_DD_MOSI) | (1 << INF_SPI_DD_SCK);
     2fa:	87 b3       	in	r24, 0x17	; 23
     2fc:	80 6a       	ori	r24, 0xA0	; 160
     2fe:	87 bb       	out	0x17, r24	; 23
				INF_SPI_DDR &= ~(1 << INF_SPI_DD_MISO);
     300:	be 98       	cbi	0x17, 6	; 23
				SPCR |= (1 << MSTR);
     302:	6c 9a       	sbi	0x0d, 4	; 13
     304:	05 c0       	rjmp	.+10     	; 0x310 <Inf_Spi_Init+0x30>
			}
			else {
				INF_SPI_DDR |= (1 << INF_SPI_DD_MISO);
     306:	be 9a       	sbi	0x17, 6	; 23
				INF_SPI_DDR &= ~(1 << INF_SPI_DD_MOSI) & ~(1 << INF_SPI_DD_SCK);
     308:	87 b3       	in	r24, 0x17	; 23
     30a:	8f 75       	andi	r24, 0x5F	; 95
     30c:	87 bb       	out	0x17, r24	; 23
				SPCR &= ~(1 << MSTR);
     30e:	6c 98       	cbi	0x0d, 4	; 13
			}
			SPCR |= (1 << SPE);
     310:	6e 9a       	sbi	0x0d, 6	; 13
     312:	03 c0       	rjmp	.+6      	; 0x31a <Inf_Spi_Init+0x3a>
		}
		else {
			INF_SPI_DDR &= ~(1 << INF_SPI_DD_MISO) & ~(1 << INF_SPI_DD_MOSI) & ~(1 << INF_SPI_DD_SCK);
     314:	87 b3       	in	r24, 0x17	; 23
     316:	8f 71       	andi	r24, 0x1F	; 31
     318:	87 bb       	out	0x17, r24	; 23
		}
	}
     31a:	0f 90       	pop	r0
     31c:	cf 91       	pop	r28
     31e:	df 91       	pop	r29
     320:	08 95       	ret

00000322 <Inf_Spi_Rx>:



	uint8_t Inf_Spi_Rx(void) {
		SPDR = 0;
     322:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     324:	77 9b       	sbis	0x0e, 7	; 14
     326:	fe cf       	rjmp	.-4      	; 0x324 <Inf_Spi_Rx+0x2>
		return SPDR;
     328:	8f b1       	in	r24, 0x0f	; 15
	}
     32a:	08 95       	ret

0000032c <Inf_Spi_Tx>:
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     32c:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     32e:	77 9b       	sbis	0x0e, 7	; 14
     330:	fe cf       	rjmp	.-4      	; 0x32e <Inf_Spi_Tx+0x2>
	}
     332:	08 95       	ret

00000334 <Inf_Spi_TxRx>:



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     334:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     336:	77 9b       	sbis	0x0e, 7	; 14
     338:	fe cf       	rjmp	.-4      	; 0x336 <Inf_Spi_TxRx+0x2>
		return SPDR;
     33a:	8f b1       	in	r24, 0x0f	; 15
	}
     33c:	08 95       	ret

0000033e <Lib_Mcp2515_Read>:
#ifndef LIB_MCP2515_C_
	#define LIB_MCP2515_C_



	uint8_t Lib_Mcp2515_Read(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr) {
     33e:	ff 92       	push	r15
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
     344:	08 2f       	mov	r16, r24
     346:	f6 2e       	mov	r15, r22
     348:	14 2f       	mov	r17, r20
		uint8_t aData;
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     34a:	41 e0       	ldi	r20, 0x01	; 1
     34c:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     350:	83 e0       	ldi	r24, 0x03	; 3
     352:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     354:	77 9b       	sbis	0x0e, 7	; 14
     356:	fe cf       	rjmp	.-4      	; 0x354 <Lib_Mcp2515_Read+0x16>
		return SPDR;
     358:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     35a:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     35c:	77 9b       	sbis	0x0e, 7	; 14
     35e:	fe cf       	rjmp	.-4      	; 0x35c <Lib_Mcp2515_Read+0x1e>
		return SPDR;
     360:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     362:	8f ef       	ldi	r24, 0xFF	; 255
     364:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     366:	77 9b       	sbis	0x0e, 7	; 14
     368:	fe cf       	rjmp	.-4      	; 0x366 <Lib_Mcp2515_Read+0x28>
		return SPDR;
     36a:	1f b1       	in	r17, 0x0f	; 15
		Inf_Spi_TxRx(LIB_MCP2515_READ);
		Inf_Spi_TxRx(aAddr);
		aData = Inf_Spi_TxRx(0xff);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     36c:	80 2f       	mov	r24, r16
     36e:	6f 2d       	mov	r22, r15
     370:	43 e0       	ldi	r20, 0x03	; 3
     372:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
		return aData;
	}
     376:	81 2f       	mov	r24, r17
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	ff 90       	pop	r15
     37e:	08 95       	ret

00000380 <Lib_Mcp2515_Write>:



	void Lib_Mcp2515_Write(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr, const uint8_t aData) {
     380:	ef 92       	push	r14
     382:	ff 92       	push	r15
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	08 2f       	mov	r16, r24
     38a:	f6 2e       	mov	r15, r22
     38c:	14 2f       	mov	r17, r20
     38e:	e2 2e       	mov	r14, r18
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     390:	41 e0       	ldi	r20, 0x01	; 1
     392:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     396:	82 e0       	ldi	r24, 0x02	; 2
     398:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     39a:	77 9b       	sbis	0x0e, 7	; 14
     39c:	fe cf       	rjmp	.-4      	; 0x39a <Lib_Mcp2515_Write+0x1a>
		return SPDR;
     39e:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     3a0:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     3a2:	77 9b       	sbis	0x0e, 7	; 14
     3a4:	fe cf       	rjmp	.-4      	; 0x3a2 <Lib_Mcp2515_Write+0x22>
		return SPDR;
     3a6:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     3a8:	ef b8       	out	0x0f, r14	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     3aa:	77 9b       	sbis	0x0e, 7	; 14
     3ac:	fe cf       	rjmp	.-4      	; 0x3aa <Lib_Mcp2515_Write+0x2a>
		return SPDR;
     3ae:	8f b1       	in	r24, 0x0f	; 15
		Inf_Spi_TxRx(LIB_MCP2515_WRITE);
		Inf_Spi_TxRx(aAddr);
		Inf_Spi_TxRx(aData);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     3b0:	80 2f       	mov	r24, r16
     3b2:	6f 2d       	mov	r22, r15
     3b4:	43 e0       	ldi	r20, 0x03	; 3
     3b6:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	08 95       	ret

000003c4 <Lib_Mcp2515_Modify>:



	void Lib_Mcp2515_Modify(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr, const uint8_t aMask, const uint8_t aData) {
     3c4:	df 92       	push	r13
     3c6:	ef 92       	push	r14
     3c8:	ff 92       	push	r15
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	e8 2e       	mov	r14, r24
     3d0:	d6 2e       	mov	r13, r22
     3d2:	14 2f       	mov	r17, r20
     3d4:	f2 2e       	mov	r15, r18
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     3d6:	41 e0       	ldi	r20, 0x01	; 1
     3d8:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     3dc:	85 e0       	ldi	r24, 0x05	; 5
     3de:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     3e0:	77 9b       	sbis	0x0e, 7	; 14
     3e2:	fe cf       	rjmp	.-4      	; 0x3e0 <Lib_Mcp2515_Modify+0x1c>
		return SPDR;
     3e4:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     3e6:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     3e8:	77 9b       	sbis	0x0e, 7	; 14
     3ea:	fe cf       	rjmp	.-4      	; 0x3e8 <Lib_Mcp2515_Modify+0x24>
		return SPDR;
     3ec:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     3ee:	ff b8       	out	0x0f, r15	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     3f0:	77 9b       	sbis	0x0e, 7	; 14
     3f2:	fe cf       	rjmp	.-4      	; 0x3f0 <Lib_Mcp2515_Modify+0x2c>
		return SPDR;
     3f4:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     3f6:	0f b9       	out	0x0f, r16	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     3f8:	77 9b       	sbis	0x0e, 7	; 14
     3fa:	fe cf       	rjmp	.-4      	; 0x3f8 <Lib_Mcp2515_Modify+0x34>
		return SPDR;
     3fc:	8f b1       	in	r24, 0x0f	; 15
		Inf_Spi_TxRx(LIB_MCP2515_BIT_MODIFY);
		Inf_Spi_TxRx(aAddr);
		Inf_Spi_TxRx(aMask);
		Inf_Spi_TxRx(aData);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     3fe:	8e 2d       	mov	r24, r14
     400:	6d 2d       	mov	r22, r13
     402:	43 e0       	ldi	r20, 0x03	; 3
     404:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	ff 90       	pop	r15
     40e:	ef 90       	pop	r14
     410:	df 90       	pop	r13
     412:	08 95       	ret

00000414 <Inf_Can_Init>:
	#define INF_CAN_C_



	#if defined(INF_CAN0_TX) || defined(INF_CAN0_RX) || defined(INF_CAN1_TX) || defined(INF_CAN1_RX) || defined(INF_CAN2_TX) || defined(INF_CAN2_RX)
		uint8_t Inf_Can_Init(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aCnf1, const uint8_t aCnf2, const uint8_t aCnf3, const uint8_t aRSPort, const uint8_t aRSPin, const uint8_t aMode) {
     414:	8f 92       	push	r8
     416:	9f 92       	push	r9
     418:	af 92       	push	r10
     41a:	bf 92       	push	r11
     41c:	cf 92       	push	r12
     41e:	df 92       	push	r13
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	df 93       	push	r29
     42a:	cf 93       	push	r28
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
     430:	f8 2e       	mov	r15, r24
     432:	d6 2e       	mov	r13, r22
     434:	14 2f       	mov	r17, r20
     436:	b2 2e       	mov	r11, r18
     438:	90 2e       	mov	r9, r16
     43a:	0c 2d       	mov	r16, r12
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     43c:	43 e0       	ldi	r20, 0x03	; 3
     43e:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     442:	81 2f       	mov	r24, r17
     444:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     448:	8f 2d       	mov	r24, r15
     44a:	6d 2d       	mov	r22, r13
     44c:	41 e0       	ldi	r20, 0x01	; 1
     44e:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     452:	80 ec       	ldi	r24, 0xC0	; 192
     454:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     456:	77 9b       	sbis	0x0e, 7	; 14
     458:	fe cf       	rjmp	.-4      	; 0x456 <Inf_Can_Init+0x42>
		return SPDR;
     45a:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_TxRx(LIB_MCP2515_RESET);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     45c:	8f 2d       	mov	r24, r15
     45e:	6d 2d       	mov	r22, r13
     460:	43 e0       	ldi	r20, 0x03	; 3
     462:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     466:	80 ea       	ldi	r24, 0xA0	; 160
     468:	9f e0       	ldi	r25, 0x0F	; 15
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <__stack+0xb>
			_delay_ms(2);
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF1, aCnf1);
     46e:	8f 2d       	mov	r24, r15
     470:	6d 2d       	mov	r22, r13
     472:	4a e2       	ldi	r20, 0x2A	; 42
     474:	2b 2d       	mov	r18, r11
     476:	0e 94 c0 01 	call	0x380	; 0x380 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF2, aCnf2);
     47a:	8f 2d       	mov	r24, r15
     47c:	6d 2d       	mov	r22, r13
     47e:	49 e2       	ldi	r20, 0x29	; 41
     480:	29 2d       	mov	r18, r9
     482:	0e 94 c0 01 	call	0x380	; 0x380 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF3, aCnf3);
     486:	8f 2d       	mov	r24, r15
     488:	6d 2d       	mov	r22, r13
     48a:	48 e2       	ldi	r20, 0x28	; 40
     48c:	2e 2d       	mov	r18, r14
     48e:	0e 94 c0 01 	call	0x380	; 0x380 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_RXB0CTRL, 0x64);
     492:	8f 2d       	mov	r24, r15
     494:	6d 2d       	mov	r22, r13
     496:	40 e6       	ldi	r20, 0x60	; 96
     498:	24 e6       	ldi	r18, 0x64	; 100
     49a:	0e 94 c0 01 	call	0x380	; 0x380 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_RXB1CTRL, 0x60);
     49e:	8f 2d       	mov	r24, r15
     4a0:	6d 2d       	mov	r22, r13
     4a2:	40 e7       	ldi	r20, 0x70	; 112
     4a4:	20 e6       	ldi	r18, 0x60	; 96
     4a6:	0e 94 c0 01 	call	0x380	; 0x380 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CANINTE, 0x03);
     4aa:	8f 2d       	mov	r24, r15
     4ac:	6d 2d       	mov	r22, r13
     4ae:	4b e2       	ldi	r20, 0x2B	; 43
     4b0:	23 e0       	ldi	r18, 0x03	; 3
     4b2:	0e 94 c0 01 	call	0x380	; 0x380 <Lib_Mcp2515_Write>
			if (aRSPort != 0) {
     4b6:	00 23       	and	r16, r16
     4b8:	79 f1       	breq	.+94     	; 0x518 <__stack+0xb9>
				if (aRSPort < 8) {
     4ba:	08 30       	cpi	r16, 0x08	; 8
     4bc:	20 f4       	brcc	.+8      	; 0x4c6 <__stack+0x67>
					Lib_Pin_Set(aRSPort, aRSPin, LIB_PIN_OUTPUT_LOW);
     4be:	80 2f       	mov	r24, r16
     4c0:	6a 2d       	mov	r22, r10
     4c2:	41 e0       	ldi	r20, 0x01	; 1
     4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <__stack+0x71>
				}
				else if (aRSPort < 16) {
     4c6:	00 31       	cpi	r16, 0x10	; 16
     4c8:	30 f4       	brcc	.+12     	; 0x4d6 <__stack+0x77>
					Lib_Pin_Set(aRSPort, aRSPin, LIB_PIN_OUTPUT_HIGH);
     4ca:	80 2f       	mov	r24, r16
     4cc:	6a 2d       	mov	r22, r10
     4ce:	43 e0       	ldi	r20, 0x03	; 3
     4d0:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
     4d4:	21 c0       	rjmp	.+66     	; 0x518 <__stack+0xb9>
				}
				else if (aRSPort == 0xFC) {
     4d6:	0c 3f       	cpi	r16, 0xFC	; 252
     4d8:	31 f4       	brne	.+12     	; 0x4e6 <__stack+0x87>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x14, 0x04);
     4da:	8f 2d       	mov	r24, r15
     4dc:	6d 2d       	mov	r22, r13
     4de:	4c e0       	ldi	r20, 0x0C	; 12
     4e0:	24 e1       	ldi	r18, 0x14	; 20
     4e2:	04 e0       	ldi	r16, 0x04	; 4
     4e4:	17 c0       	rjmp	.+46     	; 0x514 <__stack+0xb5>
				}
				else if (aRSPort == 0xFD) {
     4e6:	0d 3f       	cpi	r16, 0xFD	; 253
     4e8:	31 f4       	brne	.+12     	; 0x4f6 <__stack+0x97>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x28, 0x08);
     4ea:	8f 2d       	mov	r24, r15
     4ec:	6d 2d       	mov	r22, r13
     4ee:	4c e0       	ldi	r20, 0x0C	; 12
     4f0:	28 e2       	ldi	r18, 0x28	; 40
     4f2:	08 e0       	ldi	r16, 0x08	; 8
     4f4:	0f c0       	rjmp	.+30     	; 0x514 <__stack+0xb5>
				}
				else if (aRSPort == 0xFE) {
     4f6:	0e 3f       	cpi	r16, 0xFE	; 254
     4f8:	31 f4       	brne	.+12     	; 0x506 <__stack+0xa7>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x14, 0x14);
     4fa:	8f 2d       	mov	r24, r15
     4fc:	6d 2d       	mov	r22, r13
     4fe:	4c e0       	ldi	r20, 0x0C	; 12
     500:	24 e1       	ldi	r18, 0x14	; 20
     502:	04 e1       	ldi	r16, 0x14	; 20
     504:	07 c0       	rjmp	.+14     	; 0x514 <__stack+0xb5>
				}
				else if (aRSPort == 0xFF) {
     506:	0f 3f       	cpi	r16, 0xFF	; 255
     508:	39 f4       	brne	.+14     	; 0x518 <__stack+0xb9>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x28, 0x28);
     50a:	8f 2d       	mov	r24, r15
     50c:	6d 2d       	mov	r22, r13
     50e:	4c e0       	ldi	r20, 0x0C	; 12
     510:	28 e2       	ldi	r18, 0x28	; 40
     512:	08 e2       	ldi	r16, 0x28	; 40
     514:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Lib_Mcp2515_Modify>
				}
			}
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x0C);
     518:	8f 2d       	mov	r24, r15
     51a:	6d 2d       	mov	r22, r13
     51c:	4c e0       	ldi	r20, 0x0C	; 12
     51e:	2c e0       	ldi	r18, 0x0C	; 12
     520:	0e 94 c0 01 	call	0x380	; 0x380 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_CANCTRL, 0xE0, aMode);
     524:	8f 2d       	mov	r24, r15
     526:	6d 2d       	mov	r22, r13
     528:	4f e0       	ldi	r20, 0x0F	; 15
     52a:	20 ee       	ldi	r18, 0xE0	; 224
     52c:	08 2d       	mov	r16, r8
     52e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Lib_Mcp2515_Modify>
			if (((Lib_Mcp2515_Read(aSSPort, aSSPin, LIB_MCP2515_CANCTRL)) & 0xE0) == aMode) {
     532:	8f 2d       	mov	r24, r15
     534:	6d 2d       	mov	r22, r13
     536:	4f e0       	ldi	r20, 0x0F	; 15
     538:	0e 94 9f 01 	call	0x33e	; 0x33e <Lib_Mcp2515_Read>
     53c:	40 e0       	ldi	r20, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	80 7e       	andi	r24, 0xE0	; 224
     542:	90 70       	andi	r25, 0x00	; 0
     544:	28 2d       	mov	r18, r8
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	82 17       	cp	r24, r18
     54a:	93 07       	cpc	r25, r19
     54c:	09 f4       	brne	.+2      	; 0x550 <__stack+0xf1>
     54e:	41 e0       	ldi	r20, 0x01	; 1
				return TRUE;
			}
			return FALSE;
		}
     550:	84 2f       	mov	r24, r20
     552:	cf 91       	pop	r28
     554:	df 91       	pop	r29
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	cf 90       	pop	r12
     562:	bf 90       	pop	r11
     564:	af 90       	pop	r10
     566:	9f 90       	pop	r9
     568:	8f 90       	pop	r8
     56a:	08 95       	ret

0000056c <Inf_Can_Rx>:
	#endif /* INF_CAN0_TX || INF_CAN0_RX || INF_CAN1_TX || INF_CAN1_RX || INF_CAN2_TX || INF_CAN2_RX */



	#if defined(INF_CAN0_RX) || defined(INF_CAN1_RX) || defined(INF_CAN2_RX)
		uint8_t Inf_Can_Rx(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aRSPort, const uint8_t aRSPin, Inf_Can_Msg_t * aInf_Can_Msg) {
     56c:	df 92       	push	r13
     56e:	ef 92       	push	r14
     570:	ff 92       	push	r15
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	df 93       	push	r29
     578:	cf 93       	push	r28
     57a:	0f 92       	push	r0
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	08 2f       	mov	r16, r24
     582:	d6 2e       	mov	r13, r22
     584:	14 2f       	mov	r17, r20
			uint8_t State = 0;
     586:	19 82       	std	Y+1, r1	; 0x01
			uint8_t CmdSave = 0;
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     588:	43 e0       	ldi	r20, 0x03	; 3
     58a:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     58e:	81 2f       	mov	r24, r17
     590:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     594:	80 2f       	mov	r24, r16
     596:	6d 2d       	mov	r22, r13
     598:	41 e0       	ldi	r20, 0x01	; 1
     59a:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     59e:	80 eb       	ldi	r24, 0xB0	; 176
     5a0:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5a2:	77 9b       	sbis	0x0e, 7	; 14
     5a4:	fe cf       	rjmp	.-4      	; 0x5a2 <Inf_Can_Rx+0x36>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     5a6:	8f ef       	ldi	r24, 0xFF	; 255
     5a8:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5aa:	77 9b       	sbis	0x0e, 7	; 14
     5ac:	fe cf       	rjmp	.-4      	; 0x5aa <Inf_Can_Rx+0x3e>
		return SPDR;
     5ae:	9f b1       	in	r25, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     5b0:	8f ef       	ldi	r24, 0xFF	; 255
     5b2:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5b4:	77 9b       	sbis	0x0e, 7	; 14
     5b6:	fe cf       	rjmp	.-4      	; 0x5b4 <Inf_Can_Rx+0x48>
		return SPDR;
     5b8:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_Tx(LIB_MCP2515_RX_STATUS);
			State = Inf_Spi_TxRx(0xFF);
     5ba:	99 83       	std	Y+1, r25	; 0x01
			Inf_Spi_TxRx(0xFF);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     5bc:	80 2f       	mov	r24, r16
     5be:	6d 2d       	mov	r22, r13
     5c0:	43 e0       	ldi	r20, 0x03	; 3
     5c2:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
			if (bit_is_set(State, LIB_MCP2515_RX_STATUS_INSTRUCTION_CANINTF_RX0IF)) {
     5c6:	89 81       	ldd	r24, Y+1	; 0x01
     5c8:	86 ff       	sbrs	r24, 6
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <Inf_Can_Rx+0x64>
     5cc:	10 e9       	ldi	r17, 0x90	; 144
     5ce:	06 c0       	rjmp	.+12     	; 0x5dc <Inf_Can_Rx+0x70>
				CmdSave = LIB_MCP2515_READ_RX_BUFFER0;
			}
			else if (bit_is_set(State, LIB_MCP2515_RX_STATUS_INSTRUCTION_CANINTF_RX1IF)) {
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	87 fd       	sbrc	r24, 7
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <Inf_Can_Rx+0x6e>
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	47 c0       	rjmp	.+142    	; 0x668 <Inf_Can_Rx+0xfc>
     5da:	14 e9       	ldi	r17, 0x94	; 148
				CmdSave = LIB_MCP2515_READ_RX_BUFFER1;
			}
			else {
				return FALSE;
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     5dc:	80 2f       	mov	r24, r16
     5de:	6d 2d       	mov	r22, r13
     5e0:	41 e0       	ldi	r20, 0x01	; 1
     5e2:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     5e6:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5e8:	77 9b       	sbis	0x0e, 7	; 14
     5ea:	fe cf       	rjmp	.-4      	; 0x5e8 <Inf_Can_Rx+0x7c>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     5ec:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5ee:	77 9b       	sbis	0x0e, 7	; 14
     5f0:	fe cf       	rjmp	.-4      	; 0x5ee <Inf_Can_Rx+0x82>
		return SPDR;
     5f2:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_Tx(CmdSave);
			aInf_Can_Msg->SIdH = Inf_Spi_TxRx(0x00);
     5f4:	f7 01       	movw	r30, r14
     5f6:	81 83       	std	Z+1, r24	; 0x01
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     5f8:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5fa:	77 9b       	sbis	0x0e, 7	; 14
     5fc:	fe cf       	rjmp	.-4      	; 0x5fa <Inf_Can_Rx+0x8e>
		return SPDR;
     5fe:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->SIdL = Inf_Spi_TxRx(0x00);
     600:	f7 01       	movw	r30, r14
     602:	80 83       	st	Z, r24
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     604:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     606:	77 9b       	sbis	0x0e, 7	; 14
     608:	fe cf       	rjmp	.-4      	; 0x606 <Inf_Can_Rx+0x9a>
		return SPDR;
     60a:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->EIdH = Inf_Spi_TxRx(0x00);
     60c:	f7 01       	movw	r30, r14
     60e:	83 83       	std	Z+3, r24	; 0x03
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     610:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     612:	77 9b       	sbis	0x0e, 7	; 14
     614:	fe cf       	rjmp	.-4      	; 0x612 <Inf_Can_Rx+0xa6>
		return SPDR;
     616:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->EIdL = Inf_Spi_TxRx(0x00);
     618:	f7 01       	movw	r30, r14
     61a:	82 83       	std	Z+2, r24	; 0x02
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     61c:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     61e:	77 9b       	sbis	0x0e, 7	; 14
     620:	fe cf       	rjmp	.-4      	; 0x61e <Inf_Can_Rx+0xb2>
		return SPDR;
     622:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->Dlc = Inf_Spi_TxRx(0x00);
     624:	f7 01       	movw	r30, r14
     626:	84 83       	std	Z+4, r24	; 0x04
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
     628:	84 81       	ldd	r24, Z+4	; 0x04
     62a:	86 fd       	sbrc	r24, 6
     62c:	10 c0       	rjmp	.+32     	; 0x64e <Inf_Can_Rx+0xe2>
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	09 c0       	rjmp	.+18     	; 0x644 <Inf_Can_Rx+0xd8>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     632:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     634:	77 9b       	sbis	0x0e, 7	; 14
     636:	fe cf       	rjmp	.-4      	; 0x634 <Inf_Can_Rx+0xc8>
		return SPDR;
     638:	8f b1       	in	r24, 0x0f	; 15
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
     63a:	f7 01       	movw	r30, r14
     63c:	e9 0f       	add	r30, r25
     63e:	f1 1d       	adc	r31, r1
     640:	85 83       	std	Z+5, r24	; 0x05
			aInf_Can_Msg->SIdL = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->EIdH = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->EIdL = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->Dlc = Inf_Spi_TxRx(0x00);
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
     642:	9f 5f       	subi	r25, 0xFF	; 255
     644:	f7 01       	movw	r30, r14
     646:	84 81       	ldd	r24, Z+4	; 0x04
     648:	98 17       	cp	r25, r24
     64a:	98 f3       	brcs	.-26     	; 0x632 <Inf_Can_Rx+0xc6>
     64c:	07 c0       	rjmp	.+14     	; 0x65c <Inf_Can_Rx+0xf0>
     64e:	f7 01       	movw	r30, r14
     650:	80 e0       	ldi	r24, 0x00	; 0
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
				}
			}
			else {
				for (uint8_t i = 0; i < 8; i++) {
					aInf_Can_Msg->Data[i] = 0x00;
     652:	15 82       	std	Z+5, r1	; 0x05
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
				}
			}
			else {
				for (uint8_t i = 0; i < 8; i++) {
     654:	8f 5f       	subi	r24, 0xFF	; 255
     656:	31 96       	adiw	r30, 0x01	; 1
     658:	88 30       	cpi	r24, 0x08	; 8
     65a:	d9 f7       	brne	.-10     	; 0x652 <Inf_Can_Rx+0xe6>
					aInf_Can_Msg->Data[i] = 0x00;
				}
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     65c:	80 2f       	mov	r24, r16
     65e:	6d 2d       	mov	r22, r13
     660:	43 e0       	ldi	r20, 0x03	; 3
     662:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
     666:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
		}
     668:	0f 90       	pop	r0
     66a:	cf 91       	pop	r28
     66c:	df 91       	pop	r29
     66e:	1f 91       	pop	r17
     670:	0f 91       	pop	r16
     672:	ff 90       	pop	r15
     674:	ef 90       	pop	r14
     676:	df 90       	pop	r13
     678:	08 95       	ret

0000067a <Inf_Can_Tx>:
	#endif /* INF_CAN0_RX || INF_CAN1_RX || INF_CAN2_RX */



	#if defined(INF_CAN0_TX) || defined(INF_CAN1_TX) || defined(INF_CAN2_TX)
		uint8_t Inf_Can_Tx(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aRSPort, const uint8_t aRSPin, Inf_Can_Msg_t * aInf_Can_Msg) {
     67a:	cf 92       	push	r12
     67c:	df 92       	push	r13
     67e:	ef 92       	push	r14
     680:	ff 92       	push	r15
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	df 93       	push	r29
     688:	cf 93       	push	r28
     68a:	0f 92       	push	r0
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	08 2f       	mov	r16, r24
     692:	d6 2e       	mov	r13, r22
     694:	14 2f       	mov	r17, r20
			uint8_t State = 0;
     696:	19 82       	std	Y+1, r1	; 0x01
			uint8_t CmdLoad = 0;
			uint8_t CmdSend = 0;
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     698:	43 e0       	ldi	r20, 0x03	; 3
     69a:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     69e:	81 2f       	mov	r24, r17
     6a0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     6a4:	80 2f       	mov	r24, r16
     6a6:	6d 2d       	mov	r22, r13
     6a8:	41 e0       	ldi	r20, 0x01	; 1
     6aa:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     6ae:	80 ea       	ldi	r24, 0xA0	; 160
     6b0:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     6b2:	77 9b       	sbis	0x0e, 7	; 14
     6b4:	fe cf       	rjmp	.-4      	; 0x6b2 <Inf_Can_Tx+0x38>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     6ba:	77 9b       	sbis	0x0e, 7	; 14
     6bc:	fe cf       	rjmp	.-4      	; 0x6ba <Inf_Can_Tx+0x40>
		return SPDR;
     6be:	9f b1       	in	r25, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     6c0:	8f ef       	ldi	r24, 0xFF	; 255
     6c2:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     6c4:	77 9b       	sbis	0x0e, 7	; 14
     6c6:	fe cf       	rjmp	.-4      	; 0x6c4 <Inf_Can_Tx+0x4a>
		return SPDR;
     6c8:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_Tx(LIB_MCP2515_READ_STATUS);
			State = Inf_Spi_TxRx(0xFF);
     6ca:	99 83       	std	Y+1, r25	; 0x01
			Inf_Spi_TxRx(0xFF);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     6cc:	80 2f       	mov	r24, r16
     6ce:	6d 2d       	mov	r22, r13
     6d0:	43 e0       	ldi	r20, 0x03	; 3
     6d2:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
			if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB0CTRL_TXREQ)) {
     6d6:	89 81       	ldd	r24, Y+1	; 0x01
     6d8:	82 fd       	sbrc	r24, 2
     6da:	04 c0       	rjmp	.+8      	; 0x6e4 <Inf_Can_Tx+0x6a>
     6dc:	10 e4       	ldi	r17, 0x40	; 64
     6de:	61 e8       	ldi	r22, 0x81	; 129
     6e0:	c6 2e       	mov	r12, r22
     6e2:	0f c0       	rjmp	.+30     	; 0x702 <Inf_Can_Tx+0x88>
				CmdLoad = LIB_MCP2515_LOAD_TX_BUFFER0;
				CmdSend = LIB_MCP2515_RTS_TX0;
			}
			else if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB1CTRL_TXREQ)) {
     6e4:	89 81       	ldd	r24, Y+1	; 0x01
     6e6:	84 fd       	sbrc	r24, 4
     6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <Inf_Can_Tx+0x78>
     6ea:	12 e4       	ldi	r17, 0x42	; 66
     6ec:	52 e8       	ldi	r21, 0x82	; 130
     6ee:	c5 2e       	mov	r12, r21
     6f0:	08 c0       	rjmp	.+16     	; 0x702 <Inf_Can_Tx+0x88>
				CmdLoad = LIB_MCP2515_LOAD_TX_BUFFER1;
				CmdSend = LIB_MCP2515_RTS_TX1;
			}
			else if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB2CTRL_TXREQ)) {
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	86 ff       	sbrs	r24, 6
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <Inf_Can_Tx+0x82>
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	48 c0       	rjmp	.+144    	; 0x78c <Inf_Can_Tx+0x112>
     6fc:	14 e4       	ldi	r17, 0x44	; 68
     6fe:	44 e8       	ldi	r20, 0x84	; 132
     700:	c4 2e       	mov	r12, r20
				CmdSend = LIB_MCP2515_RTS_TX2;
			}
			else {
				return FALSE;
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     702:	80 2f       	mov	r24, r16
     704:	6d 2d       	mov	r22, r13
     706:	41 e0       	ldi	r20, 0x01	; 1
     708:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     70c:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     70e:	77 9b       	sbis	0x0e, 7	; 14
     710:	fe cf       	rjmp	.-4      	; 0x70e <Inf_Can_Tx+0x94>
			Inf_Spi_Tx(CmdLoad);
			Inf_Spi_Tx(aInf_Can_Msg->SIdH);
     712:	f7 01       	movw	r30, r14
     714:	81 81       	ldd	r24, Z+1	; 0x01
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     716:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     718:	77 9b       	sbis	0x0e, 7	; 14
     71a:	fe cf       	rjmp	.-4      	; 0x718 <Inf_Can_Tx+0x9e>
			Inf_Spi_Tx(aInf_Can_Msg->SIdL);
     71c:	f7 01       	movw	r30, r14
     71e:	80 81       	ld	r24, Z
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     720:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     722:	77 9b       	sbis	0x0e, 7	; 14
     724:	fe cf       	rjmp	.-4      	; 0x722 <Inf_Can_Tx+0xa8>
			Inf_Spi_Tx(aInf_Can_Msg->EIdH);
     726:	f7 01       	movw	r30, r14
     728:	83 81       	ldd	r24, Z+3	; 0x03
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     72a:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     72c:	77 9b       	sbis	0x0e, 7	; 14
     72e:	fe cf       	rjmp	.-4      	; 0x72c <Inf_Can_Tx+0xb2>
			Inf_Spi_Tx(aInf_Can_Msg->EIdL);
     730:	f7 01       	movw	r30, r14
     732:	82 81       	ldd	r24, Z+2	; 0x02
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     734:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     736:	77 9b       	sbis	0x0e, 7	; 14
     738:	fe cf       	rjmp	.-4      	; 0x736 <Inf_Can_Tx+0xbc>
			Inf_Spi_Tx(aInf_Can_Msg->Dlc);
     73a:	f7 01       	movw	r30, r14
     73c:	24 81       	ldd	r18, Z+4	; 0x04
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     73e:	2f b9       	out	0x0f, r18	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     740:	77 9b       	sbis	0x0e, 7	; 14
     742:	fe cf       	rjmp	.-4      	; 0x740 <Inf_Can_Tx+0xc6>
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
     744:	f7 01       	movw	r30, r14
     746:	84 81       	ldd	r24, Z+4	; 0x04
     748:	86 fd       	sbrc	r24, 6
     74a:	0c c0       	rjmp	.+24     	; 0x764 <Inf_Can_Tx+0xea>
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	08 c0       	rjmp	.+16     	; 0x760 <Inf_Can_Tx+0xe6>
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++)
				{
					Inf_Spi_Tx(aInf_Can_Msg->Data[i]);
     750:	f7 01       	movw	r30, r14
     752:	e9 0f       	add	r30, r25
     754:	f1 1d       	adc	r31, r1
     756:	85 81       	ldd	r24, Z+5	; 0x05
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     758:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     75a:	77 9b       	sbis	0x0e, 7	; 14
     75c:	fe cf       	rjmp	.-4      	; 0x75a <Inf_Can_Tx+0xe0>
			Inf_Spi_Tx(aInf_Can_Msg->SIdL);
			Inf_Spi_Tx(aInf_Can_Msg->EIdH);
			Inf_Spi_Tx(aInf_Can_Msg->EIdL);
			Inf_Spi_Tx(aInf_Can_Msg->Dlc);
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++)
     75e:	9f 5f       	subi	r25, 0xFF	; 255
     760:	92 17       	cp	r25, r18
     762:	b0 f3       	brcs	.-20     	; 0x750 <Inf_Can_Tx+0xd6>
				{
					Inf_Spi_Tx(aInf_Can_Msg->Data[i]);
				}
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     764:	80 2f       	mov	r24, r16
     766:	6d 2d       	mov	r22, r13
     768:	43 e0       	ldi	r20, 0x03	; 3
     76a:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
			asm volatile("nop");
     76e:	00 00       	nop
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     770:	80 2f       	mov	r24, r16
     772:	6d 2d       	mov	r22, r13
     774:	41 e0       	ldi	r20, 0x01	; 1
     776:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     77a:	cf b8       	out	0x0f, r12	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     77c:	77 9b       	sbis	0x0e, 7	; 14
     77e:	fe cf       	rjmp	.-4      	; 0x77c <Inf_Can_Tx+0x102>
			Inf_Spi_Tx(CmdSend);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     780:	80 2f       	mov	r24, r16
     782:	6d 2d       	mov	r22, r13
     784:	43 e0       	ldi	r20, 0x03	; 3
     786:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
     78a:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
		}
     78c:	0f 90       	pop	r0
     78e:	cf 91       	pop	r28
     790:	df 91       	pop	r29
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	ff 90       	pop	r15
     798:	ef 90       	pop	r14
     79a:	df 90       	pop	r13
     79c:	cf 90       	pop	r12
     79e:	08 95       	ret

000007a0 <Isb_Inf_Can_Init>:
#ifndef ISB_INF_CAN_C_
	#define ISB_INF_CAN_C_



	uint8_t Isb_Inf_Can_Init(const uint8_t aInf) {
     7a0:	8f 92       	push	r8
     7a2:	af 92       	push	r10
     7a4:	cf 92       	push	r12
     7a6:	ef 92       	push	r14
     7a8:	0f 93       	push	r16
		uint8_t Result = FALSE;
		switch (aInf) {
     7aa:	88 23       	and	r24, r24
     7ac:	11 f0       	breq	.+4      	; 0x7b2 <Isb_Inf_Can_Init+0x12>
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	0e c0       	rjmp	.+28     	; 0x7ce <Isb_Inf_Can_Init+0x2e>
			#if ISB_INF_CAN0 == 1
				case 0:
					Result = Inf_Can_Init(INF_CAN0_SSPORT, INF_CAN0_SSPIN, INF_CAN0_SPICFG, INF_CAN0_CNF1, INF_CAN0_CNF2, INF_CAN0_CNF3, INF_CAN0_RSPORT, INF_CAN0_RSPIN, INF_CAN0_MODE);
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	64 e0       	ldi	r22, 0x04	; 4
     7b6:	43 e0       	ldi	r20, 0x03	; 3
     7b8:	21 e0       	ldi	r18, 0x01	; 1
     7ba:	06 eb       	ldi	r16, 0xB6	; 182
     7bc:	e4 e0       	ldi	r30, 0x04	; 4
     7be:	ee 2e       	mov	r14, r30
     7c0:	cc 24       	eor	r12, r12
     7c2:	ca 94       	dec	r12
     7c4:	72 e0       	ldi	r23, 0x02	; 2
     7c6:	a7 2e       	mov	r10, r23
     7c8:	88 24       	eor	r8, r8
     7ca:	0e 94 0a 02 	call	0x414	; 0x414 <Inf_Can_Init>
					Result = Inf_Can_Init(INF_CAN2_SSPORT, INF_CAN2_SSPIN, INF_CAN2_SPICFG, INF_CAN2_CNF1, INF_CAN2_CNF2, INF_CAN2_CNF3, INF_CAN2_RSPORT, INF_CAN2_RSPIN, INF_CAN2_MODE);
					break;
			#endif /* ISB_INF_CAN2 == 1 */
		}
		return Result;
	}
     7ce:	0f 91       	pop	r16
     7d0:	ef 90       	pop	r14
     7d2:	cf 90       	pop	r12
     7d4:	af 90       	pop	r10
     7d6:	8f 90       	pop	r8
     7d8:	08 95       	ret

000007da <Isb_Inf_Can_Rx>:



	uint8_t Isb_Inf_Can_Rx(const uint8_t aInf, Isb_Msg_t * aIsb_Msg) {
     7da:	af 92       	push	r10
     7dc:	bf 92       	push	r11
     7de:	cf 92       	push	r12
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	df 93       	push	r29
     7ea:	cf 93       	push	r28
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
     7f0:	2d 97       	sbiw	r28, 0x0d	; 13
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	cd bf       	out	0x3d, r28	; 61
     7fc:	6b 01       	movw	r12, r22
		uint8_t aSSPort;
		uint8_t aSSPin;
		uint8_t aSpiCfg;
		uint8_t aRSPort;
		uint8_t aRSPin;
		switch (aInf) {
     7fe:	88 23       	and	r24, r24
     800:	09 f0       	breq	.+2      	; 0x804 <Isb_Inf_Can_Rx+0x2a>
     802:	66 c0       	rjmp	.+204    	; 0x8d0 <Isb_Inf_Can_Rx+0xf6>
			default:
				return FALSE;
				break;
		}
		Inf_Can_Msg_t aCanMsg;
		if (Inf_Can_Rx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	64 e0       	ldi	r22, 0x04	; 4
     808:	43 e0       	ldi	r20, 0x03	; 3
     80a:	2f ef       	ldi	r18, 0xFF	; 255
     80c:	02 e0       	ldi	r16, 0x02	; 2
     80e:	5e 01       	movw	r10, r28
     810:	08 94       	sec
     812:	a1 1c       	adc	r10, r1
     814:	b1 1c       	adc	r11, r1
     816:	75 01       	movw	r14, r10
     818:	0e 94 b6 02 	call	0x56c	; 0x56c <Inf_Can_Rx>
     81c:	81 30       	cpi	r24, 0x01	; 1
     81e:	09 f0       	breq	.+2      	; 0x822 <Isb_Inf_Can_Rx+0x48>
     820:	57 c0       	rjmp	.+174    	; 0x8d0 <Isb_Inf_Can_Rx+0xf6>
			aIsb_Msg->Flags = ((aCanMsg.SIdH & 0xC0) >> 2) | (aCanMsg.Dlc & ISB_MSG_FLAGS_DLC_MASK);
     822:	ea 81       	ldd	r30, Y+2	; 0x02
     824:	8e 2f       	mov	r24, r30
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	80 7c       	andi	r24, 0xC0	; 192
     82a:	90 70       	andi	r25, 0x00	; 0
     82c:	95 95       	asr	r25
     82e:	87 95       	ror	r24
     830:	95 95       	asr	r25
     832:	87 95       	ror	r24
     834:	0d 81       	ldd	r16, Y+5	; 0x05
     836:	f0 2f       	mov	r31, r16
     838:	ff 70       	andi	r31, 0x0F	; 15
     83a:	f8 2b       	or	r31, r24
     83c:	d6 01       	movw	r26, r12
     83e:	fc 93       	st	X, r31
			aIsb_Msg->DestId = (uint16_t)((aCanMsg.EIdH & 0xF8) >> 3) + (uint16_t)((aCanMsg.SIdL & 0x03) << 5) + (uint16_t)((aCanMsg.SIdL & 0xE0) << 2) + (uint16_t)((aCanMsg.SIdH & 0x3F) << 10);
     840:	6c 81       	ldd	r22, Y+4	; 0x04
     842:	49 81       	ldd	r20, Y+1	; 0x01
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	3e 2f       	mov	r19, r30
     848:	33 0f       	add	r19, r19
     84a:	33 0f       	add	r19, r19
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	86 2f       	mov	r24, r22
     850:	86 95       	lsr	r24
     852:	86 95       	lsr	r24
     854:	86 95       	lsr	r24
     856:	28 0f       	add	r18, r24
     858:	31 1d       	adc	r19, r1
     85a:	ca 01       	movw	r24, r20
     85c:	83 70       	andi	r24, 0x03	; 3
     85e:	90 70       	andi	r25, 0x00	; 0
     860:	75 e0       	ldi	r23, 0x05	; 5
     862:	88 0f       	add	r24, r24
     864:	99 1f       	adc	r25, r25
     866:	7a 95       	dec	r23
     868:	e1 f7       	brne	.-8      	; 0x862 <Isb_Inf_Can_Rx+0x88>
     86a:	28 0f       	add	r18, r24
     86c:	39 1f       	adc	r19, r25
     86e:	40 7e       	andi	r20, 0xE0	; 224
     870:	50 70       	andi	r21, 0x00	; 0
     872:	44 0f       	add	r20, r20
     874:	55 1f       	adc	r21, r21
     876:	44 0f       	add	r20, r20
     878:	55 1f       	adc	r21, r21
     87a:	24 0f       	add	r18, r20
     87c:	35 1f       	adc	r19, r21
     87e:	12 96       	adiw	r26, 0x02	; 2
     880:	3c 93       	st	X, r19
     882:	2e 93       	st	-X, r18
     884:	11 97       	sbiw	r26, 0x01	; 1
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	67 70       	andi	r22, 0x07	; 7
     88a:	70 70       	andi	r23, 0x00	; 0
     88c:	76 2f       	mov	r23, r22
     88e:	66 27       	eor	r22, r22
     890:	8b 81       	ldd	r24, Y+3	; 0x03
     892:	68 0f       	add	r22, r24
     894:	71 1d       	adc	r23, r1
     896:	14 96       	adiw	r26, 0x04	; 4
     898:	7c 93       	st	X, r23
     89a:	6e 93       	st	-X, r22
     89c:	13 97       	sbiw	r26, 0x03	; 3
			if (bit_is_set(aCanMsg.Dlc, 6)) {
     89e:	8d 81       	ldd	r24, Y+5	; 0x05
     8a0:	86 fd       	sbrc	r24, 6
     8a2:	0a c0       	rjmp	.+20     	; 0x8b8 <Isb_Inf_Can_Rx+0xde>
				aIsb_Msg->Flags |= 0x40;
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     8a4:	de 01       	movw	r26, r28
     8a6:	16 96       	adiw	r26, 0x06	; 6
     8a8:	f6 01       	movw	r30, r12
     8aa:	20 2f       	mov	r18, r16
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	2b 5f       	subi	r18, 0xFB	; 251
     8b0:	3f 4f       	sbci	r19, 0xFF	; 255
     8b2:	2a 0d       	add	r18, r10
     8b4:	3b 1d       	adc	r19, r11
     8b6:	06 c0       	rjmp	.+12     	; 0x8c4 <Isb_Inf_Can_Rx+0xea>
		if (Inf_Can_Rx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
			aIsb_Msg->Flags = ((aCanMsg.SIdH & 0xC0) >> 2) | (aCanMsg.Dlc & ISB_MSG_FLAGS_DLC_MASK);
			aIsb_Msg->DestId = (uint16_t)((aCanMsg.EIdH & 0xF8) >> 3) + (uint16_t)((aCanMsg.SIdL & 0x03) << 5) + (uint16_t)((aCanMsg.SIdL & 0xE0) << 2) + (uint16_t)((aCanMsg.SIdH & 0x3F) << 10);
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
			if (bit_is_set(aCanMsg.Dlc, 6)) {
				aIsb_Msg->Flags |= 0x40;
     8b8:	f0 64       	ori	r31, 0x40	; 64
     8ba:	d6 01       	movw	r26, r12
     8bc:	fc 93       	st	X, r31
     8be:	06 c0       	rjmp	.+12     	; 0x8cc <Isb_Inf_Can_Rx+0xf2>
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
					aIsb_Msg->Data[i] = aCanMsg.Data[i];
     8c0:	8d 91       	ld	r24, X+
     8c2:	84 83       	std	Z+4, r24	; 0x04
     8c4:	31 96       	adiw	r30, 0x01	; 1
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
			if (bit_is_set(aCanMsg.Dlc, 6)) {
				aIsb_Msg->Flags |= 0x40;
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     8c6:	a2 17       	cp	r26, r18
     8c8:	b3 07       	cpc	r27, r19
     8ca:	d1 f7       	brne	.-12     	; 0x8c0 <Isb_Inf_Can_Rx+0xe6>
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <Isb_Inf_Can_Rx+0xf8>
     8d0:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			return TRUE;
		}
		return FALSE;
	}
     8d2:	2d 96       	adiw	r28, 0x0d	; 13
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	f8 94       	cli
     8d8:	de bf       	out	0x3e, r29	; 62
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	cd bf       	out	0x3d, r28	; 61
     8de:	cf 91       	pop	r28
     8e0:	df 91       	pop	r29
     8e2:	0f 91       	pop	r16
     8e4:	ff 90       	pop	r15
     8e6:	ef 90       	pop	r14
     8e8:	df 90       	pop	r13
     8ea:	cf 90       	pop	r12
     8ec:	bf 90       	pop	r11
     8ee:	af 90       	pop	r10
     8f0:	08 95       	ret

000008f2 <Isb_Inf_Can_Tx>:



	uint8_t Isb_Inf_Can_Tx(const uint8_t aInf, const Isb_Msg_t * aIsb_Msg) {
     8f2:	ef 92       	push	r14
     8f4:	ff 92       	push	r15
     8f6:	0f 93       	push	r16
     8f8:	df 93       	push	r29
     8fa:	cf 93       	push	r28
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62
     900:	2d 97       	sbiw	r28, 0x0d	; 13
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	fb 01       	movw	r30, r22
		uint8_t aSSPort;
		uint8_t aSSPin;
		uint8_t aSpiCfg;
		uint8_t aRSPort;
		uint8_t aRSPin;
		switch (aInf) {
     90e:	88 23       	and	r24, r24
     910:	11 f0       	breq	.+4      	; 0x916 <Isb_Inf_Can_Tx+0x24>
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	4e c0       	rjmp	.+156    	; 0x9b2 <Isb_Inf_Can_Tx+0xc0>
		}
		Inf_Can_Msg_t aCanMsg;
		// Write Message to SendBuffer - TXBnSIDH:
		//	[7..6] = Type
		//	[5..0] = Dest[15..10]
		aCanMsg.SIdH = ((aIsb_Msg->Flags << 2) & 0xC0) | (aIsb_Msg->DestId >> 10);
     916:	92 81       	ldd	r25, Z+2	; 0x02
     918:	96 95       	lsr	r25
     91a:	96 95       	lsr	r25
     91c:	60 81       	ld	r22, Z
     91e:	86 2f       	mov	r24, r22
     920:	88 0f       	add	r24, r24
     922:	88 0f       	add	r24, r24
     924:	80 7c       	andi	r24, 0xC0	; 192
     926:	89 2b       	or	r24, r25
     928:	8a 83       	std	Y+2, r24	; 0x02
		//	[7..5] = Dest[9..7]
		//	[4] = 0
		//	[3] = 1
		//	[2] = 0
		//	[1..0] = Dest[6..5]
		aCanMsg.SIdL = ((uint8_t)(aIsb_Msg->DestId >> 2) & 0xE0) | 0x08 | ((uint8_t)(aIsb_Msg->DestId >> 5) & 0x03);
     92a:	41 81       	ldd	r20, Z+1	; 0x01
     92c:	52 81       	ldd	r21, Z+2	; 0x02
     92e:	ca 01       	movw	r24, r20
     930:	96 95       	lsr	r25
     932:	87 95       	ror	r24
     934:	96 95       	lsr	r25
     936:	87 95       	ror	r24
     938:	80 7e       	andi	r24, 0xE0	; 224
     93a:	9a 01       	movw	r18, r20
     93c:	a5 e0       	ldi	r26, 0x05	; 5
     93e:	36 95       	lsr	r19
     940:	27 95       	ror	r18
     942:	aa 95       	dec	r26
     944:	e1 f7       	brne	.-8      	; 0x93e <Isb_Inf_Can_Tx+0x4c>
     946:	23 70       	andi	r18, 0x03	; 3
     948:	82 2b       	or	r24, r18
     94a:	88 60       	ori	r24, 0x08	; 8
     94c:	89 83       	std	Y+1, r24	; 0x01
		// Write Message to SendBuffer - TXBnEID8:
		//	[7..3] = Dest[4..0]
		//	[2..0] = Source[10..8]
		aCanMsg.EIdH = ((uint8_t)((aIsb_Msg->DestId << 3) & 0xF8)) | ((uint8_t)((aIsb_Msg->SourceId >> 8) & 0x07));
     94e:	84 81       	ldd	r24, Z+4	; 0x04
     950:	87 70       	andi	r24, 0x07	; 7
     952:	44 0f       	add	r20, r20
     954:	44 0f       	add	r20, r20
     956:	44 0f       	add	r20, r20
     958:	84 2b       	or	r24, r20
     95a:	8c 83       	std	Y+4, r24	; 0x04
		// Write Message to SendBuffer - TXBnEID0:
		//	[7..0] = Source[7..0]
		aCanMsg.EIdL = (uint8_t)aIsb_Msg->SourceId;
     95c:	83 81       	ldd	r24, Z+3	; 0x03
     95e:	8b 83       	std	Y+3, r24	; 0x03
		// Write Message to SendBuffer - DataLength
		aCanMsg.Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
     960:	6f 70       	andi	r22, 0x0F	; 15
     962:	6d 83       	std	Y+5, r22	; 0x05
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
     964:	80 81       	ld	r24, Z
     966:	86 fd       	sbrc	r24, 6
     968:	0a c0       	rjmp	.+20     	; 0x97e <Isb_Inf_Can_Tx+0x8c>
     96a:	df 01       	movw	r26, r30
     96c:	fe 01       	movw	r30, r28
     96e:	36 96       	adiw	r30, 0x06	; 6
			aCanMsg.Dlc |= 0x40;
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     970:	ce 01       	movw	r24, r28
     972:	86 0f       	add	r24, r22
     974:	91 1d       	adc	r25, r1
     976:	bc 01       	movw	r22, r24
     978:	6a 5f       	subi	r22, 0xFA	; 250
     97a:	7f 4f       	sbci	r23, 0xFF	; 255
     97c:	07 c0       	rjmp	.+14     	; 0x98c <Isb_Inf_Can_Tx+0x9a>
		aCanMsg.EIdL = (uint8_t)aIsb_Msg->SourceId;
		// Write Message to SendBuffer - DataLength
		aCanMsg.Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
			aCanMsg.Dlc |= 0x40;
     97e:	60 64       	ori	r22, 0x40	; 64
     980:	6d 83       	std	Y+5, r22	; 0x05
     982:	08 c0       	rjmp	.+16     	; 0x994 <Isb_Inf_Can_Tx+0xa2>
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
				aCanMsg.Data[i] = aIsb_Msg->Data[i];
     984:	14 96       	adiw	r26, 0x04	; 4
     986:	8c 91       	ld	r24, X
     988:	14 97       	sbiw	r26, 0x04	; 4
     98a:	81 93       	st	Z+, r24
     98c:	11 96       	adiw	r26, 0x01	; 1
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
			aCanMsg.Dlc |= 0x40;
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     98e:	e6 17       	cp	r30, r22
     990:	f7 07       	cpc	r31, r23
     992:	c1 f7       	brne	.-16     	; 0x984 <Isb_Inf_Can_Tx+0x92>
				aCanMsg.Data[i] = aIsb_Msg->Data[i];
			}
		}
		if (Inf_Can_Tx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	64 e0       	ldi	r22, 0x04	; 4
     998:	43 e0       	ldi	r20, 0x03	; 3
     99a:	2f ef       	ldi	r18, 0xFF	; 255
     99c:	02 e0       	ldi	r16, 0x02	; 2
     99e:	7e 01       	movw	r14, r28
     9a0:	08 94       	sec
     9a2:	e1 1c       	adc	r14, r1
     9a4:	f1 1c       	adc	r15, r1
     9a6:	0e 94 3d 03 	call	0x67a	; 0x67a <Inf_Can_Tx>
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <Isb_Inf_Can_Tx+0xc0>
     9b0:	91 e0       	ldi	r25, 0x01	; 1
			return TRUE;
		}
		return FALSE;
	}
     9b2:	89 2f       	mov	r24, r25
     9b4:	2d 96       	adiw	r28, 0x0d	; 13
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	f8 94       	cli
     9ba:	de bf       	out	0x3e, r29	; 62
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	cd bf       	out	0x3d, r28	; 61
     9c0:	cf 91       	pop	r28
     9c2:	df 91       	pop	r29
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	08 95       	ret

000009cc <Isb_Systick_Init>:



	void Isb_Systick_Init(void) {
		#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__) || defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
			TCCR0 = (1 << WGM01) | (1 << CS01) | (1 << CS00);
     9cc:	8b e0       	ldi	r24, 0x0B	; 11
     9ce:	83 bf       	out	0x33, r24	; 51
			TCNT0 = 0;
     9d0:	12 be       	out	0x32, r1	; 50
			OCR0 = (F_CPU / 64) / 1000;
     9d2:	8d e7       	ldi	r24, 0x7D	; 125
     9d4:	8c bf       	out	0x3c, r24	; 60
			TIMSK = (1 << OCIE0);
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	89 bf       	out	0x39, r24	; 57
			OCR0A = (F_CPU / 64) / 1000;
			TIMSK0 = (1 << OCIE0A);
		#else
			#error "No definition for this MCU available."
		#endif
	}
     9da:	08 95       	ret

000009dc <Isb_Systick_Exec>:



	void Isb_Systick_Exec(void) {
		if (bit_is_set(Isb_Systick_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
     9dc:	80 91 99 00 	lds	r24, 0x0099
     9e0:	80 ff       	sbrs	r24, 0
     9e2:	50 c0       	rjmp	.+160    	; 0xa84 <Isb_Systick_Exec+0xa8>

			#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
				if (Isb_App_DigOut_IrqExec >= ISB_APP_DIGOUT_EXECTIME) {
     9e4:	80 91 9b 00 	lds	r24, 0x009B
     9e8:	90 91 9c 00 	lds	r25, 0x009C
     9ec:	0a 97       	sbiw	r24, 0x0a	; 10
     9ee:	48 f0       	brcs	.+18     	; 0xa02 <Isb_Systick_Exec+0x26>
					Isb_App_DigOut_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     9f0:	80 91 9a 00 	lds	r24, 0x009A
     9f4:	81 60       	ori	r24, 0x01	; 1
     9f6:	80 93 9a 00 	sts	0x009A, r24
					Isb_App_DigOut_IrqExec = 0;
     9fa:	10 92 9c 00 	sts	0x009C, r1
     9fe:	10 92 9b 00 	sts	0x009B, r1
				}
			#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

			#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
				if (Isb_App_DigIn_IrqExec >= ISB_APP_DIGIN_EXECTIME) {
     a02:	80 91 a0 00 	lds	r24, 0x00A0
     a06:	90 91 a1 00 	lds	r25, 0x00A1
     a0a:	0a 97       	sbiw	r24, 0x0a	; 10
     a0c:	48 f0       	brcs	.+18     	; 0xa20 <Isb_Systick_Exec+0x44>
					Isb_App_DigIn_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a0e:	80 91 9f 00 	lds	r24, 0x009F
     a12:	81 60       	ori	r24, 0x01	; 1
     a14:	80 93 9f 00 	sts	0x009F, r24
					Isb_App_DigIn_IrqExec = 0;
     a18:	10 92 a1 00 	sts	0x00A1, r1
     a1c:	10 92 a0 00 	sts	0x00A0, r1
					Isb_App_Lcd_IrqExec = 0;
				}
			#endif /* ISB_APP_LCD_MAX && ISB_APP_H_ */

			#if defined(ISB_OBJ_1BIT_MAX) && defined(ISB_OBJ_H_)
				if (Isb_Obj_1Bit_IrqExec >= ISB_OBJ_1BIT_EXECTIME) {
     a20:	80 91 a3 00 	lds	r24, 0x00A3
     a24:	90 91 a4 00 	lds	r25, 0x00A4
     a28:	0a 97       	sbiw	r24, 0x0a	; 10
     a2a:	48 f0       	brcs	.+18     	; 0xa3e <Isb_Systick_Exec+0x62>
					Isb_Obj_1Bit_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a2c:	80 91 a2 00 	lds	r24, 0x00A2
     a30:	81 60       	ori	r24, 0x01	; 1
     a32:	80 93 a2 00 	sts	0x00A2, r24
					Isb_Obj_1Bit_IrqExec = 0;
     a36:	10 92 a4 00 	sts	0x00A4, r1
     a3a:	10 92 a3 00 	sts	0x00A3, r1
				}
			#endif /* ISB_OBJ_1BIT_MAX && ISB_OBJ_H_ */

			#if defined(ISB_OBJ_4BIT_MAX) && defined(ISB_OBJ_H_)
				if (Isb_Obj_4Bit_IrqExec >= ISB_OBJ_4BIT_EXECTIME) {
     a3e:	80 91 a6 00 	lds	r24, 0x00A6
     a42:	90 91 a7 00 	lds	r25, 0x00A7
     a46:	0a 97       	sbiw	r24, 0x0a	; 10
     a48:	48 f0       	brcs	.+18     	; 0xa5c <Isb_Systick_Exec+0x80>
					Isb_Obj_4Bit_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a4a:	80 91 a5 00 	lds	r24, 0x00A5
     a4e:	81 60       	ori	r24, 0x01	; 1
     a50:	80 93 a5 00 	sts	0x00A5, r24
					Isb_Obj_4Bit_IrqExec = 0;
     a54:	10 92 a7 00 	sts	0x00A7, r1
     a58:	10 92 a6 00 	sts	0x00A6, r1
				}
			#endif /* ISB_OBJ_4BIT_MAX && ISB_OBJ_H_ */

			#if defined(ISB_OBJ_8BIT_MAX) && defined(ISB_OBJ_H_)
				if (Isb_Obj_8Bit_IrqExec >= ISB_OBJ_8BIT_EXECTIME) {
     a5c:	80 91 a9 00 	lds	r24, 0x00A9
     a60:	90 91 aa 00 	lds	r25, 0x00AA
     a64:	0a 97       	sbiw	r24, 0x0a	; 10
     a66:	48 f0       	brcs	.+18     	; 0xa7a <Isb_Systick_Exec+0x9e>
					Isb_Obj_8Bit_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a68:	80 91 a8 00 	lds	r24, 0x00A8
     a6c:	81 60       	ori	r24, 0x01	; 1
     a6e:	80 93 a8 00 	sts	0x00A8, r24
					Isb_Obj_8Bit_IrqExec = 0;
     a72:	10 92 aa 00 	sts	0x00AA, r1
     a76:	10 92 a9 00 	sts	0x00A9, r1
					Isb_Obj_Float_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
					Isb_Obj_Float_IrqExec = 0;
				}
			#endif /* ISB_OBJ_FLOAT_MAX && ISB_OBJ_H_ */

			Isb_Systick_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
     a7a:	80 91 99 00 	lds	r24, 0x0099
     a7e:	8e 7f       	andi	r24, 0xFE	; 254
     a80:	80 93 99 00 	sts	0x0099, r24
     a84:	08 95       	ret

00000a86 <Isb_Systick_Irq_Timer>:
	}



	void Isb_Systick_Irq_Timer(void) {
		Isb_Systick_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a86:	80 91 99 00 	lds	r24, 0x0099
     a8a:	81 60       	ori	r24, 0x01	; 1
     a8c:	80 93 99 00 	sts	0x0099, r24

		#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
			Isb_App_DigOut_IrqExec++;
     a90:	80 91 9b 00 	lds	r24, 0x009B
     a94:	90 91 9c 00 	lds	r25, 0x009C
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	90 93 9c 00 	sts	0x009C, r25
     a9e:	80 93 9b 00 	sts	0x009B, r24
		#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

		#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
			Isb_App_DigIn_IrqExec++;
     aa2:	80 91 a0 00 	lds	r24, 0x00A0
     aa6:	90 91 a1 00 	lds	r25, 0x00A1
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	90 93 a1 00 	sts	0x00A1, r25
     ab0:	80 93 a0 00 	sts	0x00A0, r24
		#if defined(ISB_APP_LCD_MAX) && defined(ISB_APP_H_)
			Isb_App_Lcd_IrqExec++;
		#endif /* ISB_APP_LCD_MAX && ISB_APP_H_ */

		#if defined(ISB_OBJ_1BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_1Bit_IrqExec++;
     ab4:	80 91 a3 00 	lds	r24, 0x00A3
     ab8:	90 91 a4 00 	lds	r25, 0x00A4
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	90 93 a4 00 	sts	0x00A4, r25
     ac2:	80 93 a3 00 	sts	0x00A3, r24
		#endif /* ISB_OBJ_1BIT_MAX && ISB_OBJ_H_ */

		#if defined(ISB_OBJ_4BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_4Bit_IrqExec++;
     ac6:	80 91 a6 00 	lds	r24, 0x00A6
     aca:	90 91 a7 00 	lds	r25, 0x00A7
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	90 93 a7 00 	sts	0x00A7, r25
     ad4:	80 93 a6 00 	sts	0x00A6, r24
		#endif /* ISB_OBJ_4BIT_MAX && ISB_OBJ_H_ */

		#if defined(ISB_OBJ_8BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_8Bit_IrqExec++;
     ad8:	80 91 a9 00 	lds	r24, 0x00A9
     adc:	90 91 aa 00 	lds	r25, 0x00AA
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	90 93 aa 00 	sts	0x00AA, r25
     ae6:	80 93 a9 00 	sts	0x00A9, r24

		#if defined(ISB_OBJ_FLOAT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_Float_IrqExec++;
		#endif /* ISB_OBJ_FLOAT_MAX && ISB_OBJ_H_ */

	}
     aea:	08 95       	ret

00000aec <__vector_19>:



	#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__) || defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
		ISR(TIMER0_COMP_vect) {
     aec:	1f 92       	push	r1
     aee:	0f 92       	push	r0
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	0f 92       	push	r0
     af4:	11 24       	eor	r1, r1
     af6:	8f 93       	push	r24
     af8:	9f 93       	push	r25
	}



	void Isb_Systick_Irq_Timer(void) {
		Isb_Systick_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     afa:	80 91 99 00 	lds	r24, 0x0099
     afe:	81 60       	ori	r24, 0x01	; 1
     b00:	80 93 99 00 	sts	0x0099, r24

		#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
			Isb_App_DigOut_IrqExec++;
     b04:	80 91 9b 00 	lds	r24, 0x009B
     b08:	90 91 9c 00 	lds	r25, 0x009C
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	90 93 9c 00 	sts	0x009C, r25
     b12:	80 93 9b 00 	sts	0x009B, r24
		#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

		#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
			Isb_App_DigIn_IrqExec++;
     b16:	80 91 a0 00 	lds	r24, 0x00A0
     b1a:	90 91 a1 00 	lds	r25, 0x00A1
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	90 93 a1 00 	sts	0x00A1, r25
     b24:	80 93 a0 00 	sts	0x00A0, r24
		#if defined(ISB_APP_LCD_MAX) && defined(ISB_APP_H_)
			Isb_App_Lcd_IrqExec++;
		#endif /* ISB_APP_LCD_MAX && ISB_APP_H_ */

		#if defined(ISB_OBJ_1BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_1Bit_IrqExec++;
     b28:	80 91 a3 00 	lds	r24, 0x00A3
     b2c:	90 91 a4 00 	lds	r25, 0x00A4
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	90 93 a4 00 	sts	0x00A4, r25
     b36:	80 93 a3 00 	sts	0x00A3, r24
		#endif /* ISB_OBJ_1BIT_MAX && ISB_OBJ_H_ */

		#if defined(ISB_OBJ_4BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_4Bit_IrqExec++;
     b3a:	80 91 a6 00 	lds	r24, 0x00A6
     b3e:	90 91 a7 00 	lds	r25, 0x00A7
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	90 93 a7 00 	sts	0x00A7, r25
     b48:	80 93 a6 00 	sts	0x00A6, r24
		#endif /* ISB_OBJ_4BIT_MAX && ISB_OBJ_H_ */

		#if defined(ISB_OBJ_8BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_8Bit_IrqExec++;
     b4c:	80 91 a9 00 	lds	r24, 0x00A9
     b50:	90 91 aa 00 	lds	r25, 0x00AA
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	90 93 aa 00 	sts	0x00AA, r25
     b5a:	80 93 a9 00 	sts	0x00A9, r24


	#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__) || defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
		ISR(TIMER0_COMP_vect) {
			Isb_Systick_Irq_Timer();
		}
     b5e:	9f 91       	pop	r25
     b60:	8f 91       	pop	r24
     b62:	0f 90       	pop	r0
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	0f 90       	pop	r0
     b68:	1f 90       	pop	r1
     b6a:	18 95       	reti

00000b6c <Isb_Ch_Init>:
	}



	uint8_t __attribute__((always_inline)) lib_eep_fw_read_byte(uint8_t * aAddr) {
		return eeprom_read_byte(Isb_Firmware_Offset + aAddr);;
     b6c:	80 91 96 00 	lds	r24, 0x0096
     b70:	a8 2f       	mov	r26, r24
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	e4 e5       	ldi	r30, 0x54	; 84
     b76:	f3 e0       	ldi	r31, 0x03	; 3
     b78:	60 e0       	ldi	r22, 0x00	; 0

	void Isb_Ch_Init(void) {
		for (uint8_t ChIndex = 0; ChIndex < ISB_CH_MAX; ChIndex++) {
			uint16_t eepAddrCtrl = 0;
			uint16_t eepAddrCrc = 0;
			switch (ChIndex) {
     b7a:	67 30       	cpi	r22, 0x07	; 7
     b7c:	09 f4       	brne	.+2      	; 0xb80 <Isb_Ch_Init+0x14>
     b7e:	4b c0       	rjmp	.+150    	; 0xc16 <Isb_Ch_Init+0xaa>
     b80:	68 30       	cpi	r22, 0x08	; 8
     b82:	70 f4       	brcc	.+28     	; 0xba0 <Isb_Ch_Init+0x34>
     b84:	63 30       	cpi	r22, 0x03	; 3
     b86:	99 f1       	breq	.+102    	; 0xbee <Isb_Ch_Init+0x82>
     b88:	64 30       	cpi	r22, 0x04	; 4
     b8a:	28 f4       	brcc	.+10     	; 0xb96 <Isb_Ch_Init+0x2a>
     b8c:	61 30       	cpi	r22, 0x01	; 1
     b8e:	01 f1       	breq	.+64     	; 0xbd0 <Isb_Ch_Init+0x64>
     b90:	62 30       	cpi	r22, 0x02	; 2
     b92:	40 f5       	brcc	.+80     	; 0xbe4 <Isb_Ch_Init+0x78>
     b94:	22 c0       	rjmp	.+68     	; 0xbda <Isb_Ch_Init+0x6e>
     b96:	65 30       	cpi	r22, 0x05	; 5
     b98:	a1 f1       	breq	.+104    	; 0xc02 <Isb_Ch_Init+0x96>
     b9a:	66 30       	cpi	r22, 0x06	; 6
     b9c:	b8 f5       	brcc	.+110    	; 0xc0c <Isb_Ch_Init+0xa0>
     b9e:	2c c0       	rjmp	.+88     	; 0xbf8 <Isb_Ch_Init+0x8c>
     ba0:	6b 30       	cpi	r22, 0x0B	; 11
     ba2:	09 f4       	brne	.+2      	; 0xba6 <Isb_Ch_Init+0x3a>
     ba4:	4c c0       	rjmp	.+152    	; 0xc3e <Isb_Ch_Init+0xd2>
     ba6:	6c 30       	cpi	r22, 0x0C	; 12
     ba8:	30 f4       	brcc	.+12     	; 0xbb6 <Isb_Ch_Init+0x4a>
     baa:	69 30       	cpi	r22, 0x09	; 9
     bac:	f1 f1       	breq	.+124    	; 0xc2a <Isb_Ch_Init+0xbe>
     bae:	6a 30       	cpi	r22, 0x0A	; 10
     bb0:	08 f0       	brcs	.+2      	; 0xbb4 <Isb_Ch_Init+0x48>
     bb2:	40 c0       	rjmp	.+128    	; 0xc34 <Isb_Ch_Init+0xc8>
     bb4:	35 c0       	rjmp	.+106    	; 0xc20 <Isb_Ch_Init+0xb4>
     bb6:	6d 30       	cpi	r22, 0x0D	; 13
     bb8:	09 f4       	brne	.+2      	; 0xbbc <Isb_Ch_Init+0x50>
     bba:	4b c0       	rjmp	.+150    	; 0xc52 <Isb_Ch_Init+0xe6>
     bbc:	6d 30       	cpi	r22, 0x0D	; 13
     bbe:	08 f4       	brcc	.+2      	; 0xbc2 <Isb_Ch_Init+0x56>
     bc0:	43 c0       	rjmp	.+134    	; 0xc48 <Isb_Ch_Init+0xdc>
     bc2:	6e 30       	cpi	r22, 0x0E	; 14
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <Isb_Ch_Init+0x5c>
     bc6:	4a c0       	rjmp	.+148    	; 0xc5c <Isb_Ch_Init+0xf0>
     bc8:	6f 30       	cpi	r22, 0x0F	; 15
     bca:	09 f0       	breq	.+2      	; 0xbce <Isb_Ch_Init+0x62>
     bcc:	51 c0       	rjmp	.+162    	; 0xc70 <Isb_Ch_Init+0x104>
     bce:	4b c0       	rjmp	.+150    	; 0xc66 <Isb_Ch_Init+0xfa>
     bd0:	45 e1       	ldi	r20, 0x15	; 21
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	89 e2       	ldi	r24, 0x29	; 41
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	4f c0       	rjmp	.+158    	; 0xc78 <Isb_Ch_Init+0x10c>
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	84 e1       	ldi	r24, 0x14	; 20
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	4a c0       	rjmp	.+148    	; 0xc78 <Isb_Ch_Init+0x10c>
     be4:	4a e2       	ldi	r20, 0x2A	; 42
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	8e e3       	ldi	r24, 0x3E	; 62
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	45 c0       	rjmp	.+138    	; 0xc78 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_1 */
				#if defined(ISB_CH_2)
					case 2:
						eepAddrCtrl = ISB_CH_2_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_2_EEADDR_CRC;
						break;
     bee:	4f e3       	ldi	r20, 0x3F	; 63
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	83 e5       	ldi	r24, 0x53	; 83
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	40 c0       	rjmp	.+128    	; 0xc78 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_2 */
				#if defined(ISB_CH_3)
					case 3:
						eepAddrCtrl = ISB_CH_3_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_3_EEADDR_CRC;
						break;
     bf8:	44 e5       	ldi	r20, 0x54	; 84
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	88 e6       	ldi	r24, 0x68	; 104
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	3b c0       	rjmp	.+118    	; 0xc78 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_3 */
				#if defined(ISB_CH_4)
					case 4:
						eepAddrCtrl = ISB_CH_4_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_4_EEADDR_CRC;
						break;
     c02:	49 e6       	ldi	r20, 0x69	; 105
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	8d e7       	ldi	r24, 0x7D	; 125
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	36 c0       	rjmp	.+108    	; 0xc78 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_4 */
				#if defined(ISB_CH_5)
					case 5:
						eepAddrCtrl = ISB_CH_5_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_5_EEADDR_CRC;
						break;
     c0c:	4e e7       	ldi	r20, 0x7E	; 126
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	82 e9       	ldi	r24, 0x92	; 146
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	31 c0       	rjmp	.+98     	; 0xc78 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_5 */
				#if defined(ISB_CH_6)
					case 6:
						eepAddrCtrl = ISB_CH_6_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_6_EEADDR_CRC;
						break;
     c16:	43 e9       	ldi	r20, 0x93	; 147
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	87 ea       	ldi	r24, 0xA7	; 167
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	2c c0       	rjmp	.+88     	; 0xc78 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_6 */
				#if defined(ISB_CH_7)
					case 7:
						eepAddrCtrl = ISB_CH_7_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_7_EEADDR_CRC;
						break;
     c20:	48 ea       	ldi	r20, 0xA8	; 168
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	8f eb       	ldi	r24, 0xBF	; 191
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	27 c0       	rjmp	.+78     	; 0xc78 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_7 */
				#if defined(ISB_CH_8)
					case 8:
						eepAddrCtrl = ISB_CH_8_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_8_EEADDR_CRC;
						break;
     c2a:	40 ec       	ldi	r20, 0xC0	; 192
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	87 ed       	ldi	r24, 0xD7	; 215
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	22 c0       	rjmp	.+68     	; 0xc78 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_8 */
				#if defined(ISB_CH_9)
					case 9:
						eepAddrCtrl = ISB_CH_9_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_9_EEADDR_CRC;
						break;
     c34:	48 ed       	ldi	r20, 0xD8	; 216
     c36:	50 e0       	ldi	r21, 0x00	; 0
     c38:	8f ee       	ldi	r24, 0xEF	; 239
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	1d c0       	rjmp	.+58     	; 0xc78 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_9 */
				#if defined(ISB_CH_10)
					case 10:
						eepAddrCtrl = ISB_CH_10_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_10_EEADDR_CRC;
						break;
     c3e:	40 ef       	ldi	r20, 0xF0	; 240
     c40:	50 e0       	ldi	r21, 0x00	; 0
     c42:	87 e0       	ldi	r24, 0x07	; 7
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	18 c0       	rjmp	.+48     	; 0xc78 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_10 */
				#if defined(ISB_CH_11)
					case 11:
						eepAddrCtrl = ISB_CH_11_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_11_EEADDR_CRC;
						break;
     c48:	48 e0       	ldi	r20, 0x08	; 8
     c4a:	51 e0       	ldi	r21, 0x01	; 1
     c4c:	8f e1       	ldi	r24, 0x1F	; 31
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	13 c0       	rjmp	.+38     	; 0xc78 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_11 */
				#if defined(ISB_CH_12)
					case 12:
						eepAddrCtrl = ISB_CH_12_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_12_EEADDR_CRC;
						break;
     c52:	40 e2       	ldi	r20, 0x20	; 32
     c54:	51 e0       	ldi	r21, 0x01	; 1
     c56:	87 e3       	ldi	r24, 0x37	; 55
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	0e c0       	rjmp	.+28     	; 0xc78 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_12 */
				#if defined(ISB_CH_13)
					case 13:
						eepAddrCtrl = ISB_CH_13_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_13_EEADDR_CRC;
						break;
     c5c:	48 e3       	ldi	r20, 0x38	; 56
     c5e:	51 e0       	ldi	r21, 0x01	; 1
     c60:	8f e4       	ldi	r24, 0x4F	; 79
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	09 c0       	rjmp	.+18     	; 0xc78 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_13 */
				#if defined(ISB_CH_14)
					case 14:
						eepAddrCtrl = ISB_CH_14_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_14_EEADDR_CRC;
						break;
     c66:	40 e5       	ldi	r20, 0x50	; 80
     c68:	51 e0       	ldi	r21, 0x01	; 1
     c6a:	87 e6       	ldi	r24, 0x67	; 103
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_14 */
				#if defined(ISB_CH_15)
					case 15:
						eepAddrCtrl = ISB_CH_15_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_15_EEADDR_CRC;
						break;
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	50 e0       	ldi	r21, 0x00	; 0
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
				default:
					eepAddrCtrl = 0;
					eepAddrCrc = 0;
					break;
			}
			Isb_Ch[ChIndex].Ctrl = 0;
     c78:	11 82       	std	Z+1, r1	; 0x01
     c7a:	10 82       	st	Z, r1
			if (eepAddrCtrl < eepAddrCrc) {
     c7c:	48 17       	cp	r20, r24
     c7e:	59 07       	cpc	r21, r25
     c80:	80 f4       	brcc	.+32     	; 0xca2 <Isb_Ch_Init+0x136>
     c82:	9a 01       	movw	r18, r20
				uint8_t Crc = 0;
				for (uint16_t eepAddr = eepAddrCtrl; eepAddr <= eepAddrCrc; eepAddr++) {
     c84:	2f 5f       	subi	r18, 0xFF	; 255
     c86:	3f 4f       	sbci	r19, 0xFF	; 255
     c88:	82 17       	cp	r24, r18
     c8a:	93 07       	cpc	r25, r19
     c8c:	d8 f7       	brcc	.-10     	; 0xc84 <Isb_Ch_Init+0x118>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c8e:	e1 99       	sbic	0x1c, 1	; 28
     c90:	fe cf       	rjmp	.-4      	; 0xc8e <Isb_Ch_Init+0x122>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     c92:	4a 0f       	add	r20, r26
     c94:	5b 1f       	adc	r21, r27
     c96:	5f bb       	out	0x1f, r21	; 31
     c98:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
     c9a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     c9c:	8d b3       	in	r24, 0x1d	; 29
//					Crc += lib_eep_fw_read_byte((uint8_t *)eepAddr);
				}
				if (Crc == 0) {
					Isb_Ch[ChIndex].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddrCtrl);
     c9e:	80 83       	st	Z, r24
     ca0:	11 82       	std	Z+1, r1	; 0x01
	#define ISB_CH_C_



	void Isb_Ch_Init(void) {
		for (uint8_t ChIndex = 0; ChIndex < ISB_CH_MAX; ChIndex++) {
     ca2:	6f 5f       	subi	r22, 0xFF	; 255
     ca4:	32 96       	adiw	r30, 0x02	; 2
     ca6:	60 31       	cpi	r22, 0x10	; 16
     ca8:	09 f0       	breq	.+2      	; 0xcac <Isb_Ch_Init+0x140>
     caa:	67 cf       	rjmp	.-306    	; 0xb7a <Isb_Ch_Init+0xe>
				if (Crc == 0) {
					Isb_Ch[ChIndex].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddrCtrl);
				}
			}
		}
	}
     cac:	08 95       	ret

00000cae <Isb_App_Init>:
#ifndef ISB_APP_C_
	#define ISB_APP_C_



	void Isb_App_Init(void) {
     cae:	2f 92       	push	r2
     cb0:	3f 92       	push	r3
     cb2:	4f 92       	push	r4
     cb4:	5f 92       	push	r5
     cb6:	6f 92       	push	r6
     cb8:	7f 92       	push	r7
     cba:	8f 92       	push	r8
     cbc:	9f 92       	push	r9
     cbe:	af 92       	push	r10
     cc0:	bf 92       	push	r11
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	80 91 96 00 	lds	r24, 0x0096
     cd6:	28 2e       	mov	r2, r24
     cd8:	33 24       	eor	r3, r3
     cda:	64 e8       	ldi	r22, 0x84	; 132
     cdc:	46 2e       	mov	r4, r22
     cde:	62 e0       	ldi	r22, 0x02	; 2
     ce0:	56 2e       	mov	r5, r22
     ce2:	66 24       	eor	r6, r6
     ce4:	77 24       	eor	r7, r7
				uint16_t eeAddrCfg5 = 0;
				uint16_t eeAddrCfg6 = 0;
				uint16_t eeAddrCfg7 = 0;
				uint16_t eeAddrCfg8 = 0;
				uint16_t eeAddrCfg9 = 0;
				switch (AppIndex) {
     ce6:	83 e0       	ldi	r24, 0x03	; 3
     ce8:	68 16       	cp	r6, r24
     cea:	09 f4       	brne	.+2      	; 0xcee <Isb_App_Init+0x40>
     cec:	79 c0       	rjmp	.+242    	; 0xde0 <Isb_App_Init+0x132>
     cee:	86 15       	cp	r24, r6
     cf0:	40 f0       	brcs	.+16     	; 0xd02 <Isb_App_Init+0x54>
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	69 16       	cp	r6, r25
     cf6:	09 f4       	brne	.+2      	; 0xcfa <Isb_App_Init+0x4c>
     cf8:	41 c0       	rjmp	.+130    	; 0xd7c <Isb_App_Init+0xce>
     cfa:	96 15       	cp	r25, r6
     cfc:	08 f4       	brcc	.+2      	; 0xd00 <Isb_App_Init+0x52>
     cfe:	57 c0       	rjmp	.+174    	; 0xdae <Isb_App_Init+0x100>
     d00:	0f c0       	rjmp	.+30     	; 0xd20 <Isb_App_Init+0x72>
     d02:	a5 e0       	ldi	r26, 0x05	; 5
     d04:	6a 16       	cp	r6, r26
     d06:	09 f4       	brne	.+2      	; 0xd0a <Isb_App_Init+0x5c>
     d08:	a1 c0       	rjmp	.+322    	; 0xe4c <Isb_App_Init+0x19e>
     d0a:	6a 16       	cp	r6, r26
     d0c:	08 f4       	brcc	.+2      	; 0xd10 <Isb_App_Init+0x62>
     d0e:	81 c0       	rjmp	.+258    	; 0xe12 <Isb_App_Init+0x164>
     d10:	b6 e0       	ldi	r27, 0x06	; 6
     d12:	6b 16       	cp	r6, r27
     d14:	09 f4       	brne	.+2      	; 0xd18 <Isb_App_Init+0x6a>
     d16:	b7 c0       	rjmp	.+366    	; 0xe86 <Isb_App_Init+0x1d8>
     d18:	e7 e0       	ldi	r30, 0x07	; 7
     d1a:	6e 16       	cp	r6, r30
     d1c:	d1 f4       	brne	.+52     	; 0xd52 <Isb_App_Init+0xa4>
     d1e:	d0 c0       	rjmp	.+416    	; 0xec0 <Isb_App_Init+0x212>
     d20:	59 ea       	ldi	r21, 0xA9	; 169
     d22:	85 2e       	mov	r8, r21
     d24:	91 2c       	mov	r9, r1
     d26:	4a ea       	ldi	r20, 0xAA	; 170
     d28:	a4 2e       	mov	r10, r20
     d2a:	b1 2c       	mov	r11, r1
     d2c:	3b ea       	ldi	r19, 0xAB	; 171
     d2e:	c3 2e       	mov	r12, r19
     d30:	d1 2c       	mov	r13, r1
     d32:	2c ea       	ldi	r18, 0xAC	; 172
     d34:	e2 2e       	mov	r14, r18
     d36:	f1 2c       	mov	r15, r1
     d38:	0d ea       	ldi	r16, 0xAD	; 173
     d3a:	10 e0       	ldi	r17, 0x00	; 0
     d3c:	ce ea       	ldi	r28, 0xAE	; 174
     d3e:	d0 e0       	ldi	r29, 0x00	; 0
     d40:	af ea       	ldi	r26, 0xAF	; 175
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	60 eb       	ldi	r22, 0xB0	; 176
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	41 eb       	ldi	r20, 0xB1	; 177
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	22 eb       	ldi	r18, 0xB2	; 178
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	d3 c0       	rjmp	.+422    	; 0xef8 <Isb_App_Init+0x24a>
     d52:	88 24       	eor	r8, r8
     d54:	99 24       	eor	r9, r9
     d56:	aa 24       	eor	r10, r10
     d58:	bb 24       	eor	r11, r11
     d5a:	cc 24       	eor	r12, r12
     d5c:	dd 24       	eor	r13, r13
     d5e:	ee 24       	eor	r14, r14
     d60:	ff 24       	eor	r15, r15
     d62:	00 e0       	ldi	r16, 0x00	; 0
     d64:	10 e0       	ldi	r17, 0x00	; 0
     d66:	c0 e0       	ldi	r28, 0x00	; 0
     d68:	d0 e0       	ldi	r29, 0x00	; 0
     d6a:	a0 e0       	ldi	r26, 0x00	; 0
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	be c0       	rjmp	.+380    	; 0xef8 <Isb_App_Init+0x24a>
     d7c:	91 ec       	ldi	r25, 0xC1	; 193
     d7e:	89 2e       	mov	r8, r25
     d80:	91 2c       	mov	r9, r1
     d82:	82 ec       	ldi	r24, 0xC2	; 194
     d84:	a8 2e       	mov	r10, r24
     d86:	b1 2c       	mov	r11, r1
     d88:	03 ec       	ldi	r16, 0xC3	; 195
     d8a:	c0 2e       	mov	r12, r16
     d8c:	d1 2c       	mov	r13, r1
     d8e:	14 ec       	ldi	r17, 0xC4	; 196
     d90:	e1 2e       	mov	r14, r17
     d92:	f1 2c       	mov	r15, r1
     d94:	05 ec       	ldi	r16, 0xC5	; 197
     d96:	10 e0       	ldi	r17, 0x00	; 0
     d98:	c6 ec       	ldi	r28, 0xC6	; 198
     d9a:	d0 e0       	ldi	r29, 0x00	; 0
     d9c:	a7 ec       	ldi	r26, 0xC7	; 199
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	68 ec       	ldi	r22, 0xC8	; 200
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	49 ec       	ldi	r20, 0xC9	; 201
     da6:	50 e0       	ldi	r21, 0x00	; 0
     da8:	2a ec       	ldi	r18, 0xCA	; 202
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	a5 c0       	rjmp	.+330    	; 0xef8 <Isb_App_Init+0x24a>
							eeAddrCfg5 = ISB_APP_DIGOUT_1_EEADDR_CFG5;
							eeAddrCfg6 = ISB_APP_DIGOUT_1_EEADDR_CFG6;
							eeAddrCfg7 = ISB_APP_DIGOUT_1_EEADDR_CFG7;
							eeAddrCfg8 = ISB_APP_DIGOUT_1_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_1_EEADDR_CFG9;
							break;
     dae:	b9 ed       	ldi	r27, 0xD9	; 217
     db0:	8b 2e       	mov	r8, r27
     db2:	91 2c       	mov	r9, r1
     db4:	aa ed       	ldi	r26, 0xDA	; 218
     db6:	aa 2e       	mov	r10, r26
     db8:	b1 2c       	mov	r11, r1
     dba:	fb ed       	ldi	r31, 0xDB	; 219
     dbc:	cf 2e       	mov	r12, r31
     dbe:	d1 2c       	mov	r13, r1
     dc0:	ec ed       	ldi	r30, 0xDC	; 220
     dc2:	ee 2e       	mov	r14, r30
     dc4:	f1 2c       	mov	r15, r1
     dc6:	0d ed       	ldi	r16, 0xDD	; 221
     dc8:	10 e0       	ldi	r17, 0x00	; 0
     dca:	ce ed       	ldi	r28, 0xDE	; 222
     dcc:	d0 e0       	ldi	r29, 0x00	; 0
     dce:	af ed       	ldi	r26, 0xDF	; 223
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	60 ee       	ldi	r22, 0xE0	; 224
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	41 ee       	ldi	r20, 0xE1	; 225
     dd8:	50 e0       	ldi	r21, 0x00	; 0
     dda:	22 ee       	ldi	r18, 0xE2	; 226
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	8c c0       	rjmp	.+280    	; 0xef8 <Isb_App_Init+0x24a>
							eeAddrCfg5 = ISB_APP_DIGOUT_2_EEADDR_CFG5;
							eeAddrCfg6 = ISB_APP_DIGOUT_2_EEADDR_CFG6;
							eeAddrCfg7 = ISB_APP_DIGOUT_2_EEADDR_CFG7;
							eeAddrCfg8 = ISB_APP_DIGOUT_2_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_2_EEADDR_CFG9;
							break;
     de0:	71 ef       	ldi	r23, 0xF1	; 241
     de2:	87 2e       	mov	r8, r23
     de4:	91 2c       	mov	r9, r1
     de6:	62 ef       	ldi	r22, 0xF2	; 242
     de8:	a6 2e       	mov	r10, r22
     dea:	b1 2c       	mov	r11, r1
     dec:	53 ef       	ldi	r21, 0xF3	; 243
     dee:	c5 2e       	mov	r12, r21
     df0:	d1 2c       	mov	r13, r1
     df2:	44 ef       	ldi	r20, 0xF4	; 244
     df4:	e4 2e       	mov	r14, r20
     df6:	f1 2c       	mov	r15, r1
     df8:	05 ef       	ldi	r16, 0xF5	; 245
     dfa:	10 e0       	ldi	r17, 0x00	; 0
     dfc:	c6 ef       	ldi	r28, 0xF6	; 246
     dfe:	d0 e0       	ldi	r29, 0x00	; 0
     e00:	a7 ef       	ldi	r26, 0xF7	; 247
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	68 ef       	ldi	r22, 0xF8	; 248
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	49 ef       	ldi	r20, 0xF9	; 249
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	2a ef       	ldi	r18, 0xFA	; 250
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	73 c0       	rjmp	.+230    	; 0xef8 <Isb_App_Init+0x24a>
							eeAddrCfg5 = ISB_APP_DIGOUT_3_EEADDR_CFG5;
							eeAddrCfg6 = ISB_APP_DIGOUT_3_EEADDR_CFG6;
							eeAddrCfg7 = ISB_APP_DIGOUT_3_EEADDR_CFG7;
							eeAddrCfg8 = ISB_APP_DIGOUT_3_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_3_EEADDR_CFG9;
							break;
     e12:	39 e0       	ldi	r19, 0x09	; 9
     e14:	83 2e       	mov	r8, r19
     e16:	31 e0       	ldi	r19, 0x01	; 1
     e18:	93 2e       	mov	r9, r19
     e1a:	2a e0       	ldi	r18, 0x0A	; 10
     e1c:	a2 2e       	mov	r10, r18
     e1e:	21 e0       	ldi	r18, 0x01	; 1
     e20:	b2 2e       	mov	r11, r18
     e22:	9b e0       	ldi	r25, 0x0B	; 11
     e24:	c9 2e       	mov	r12, r25
     e26:	91 e0       	ldi	r25, 0x01	; 1
     e28:	d9 2e       	mov	r13, r25
     e2a:	8c e0       	ldi	r24, 0x0C	; 12
     e2c:	e8 2e       	mov	r14, r24
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	f8 2e       	mov	r15, r24
     e32:	0d e0       	ldi	r16, 0x0D	; 13
     e34:	11 e0       	ldi	r17, 0x01	; 1
     e36:	ce e0       	ldi	r28, 0x0E	; 14
     e38:	d1 e0       	ldi	r29, 0x01	; 1
     e3a:	af e0       	ldi	r26, 0x0F	; 15
     e3c:	b1 e0       	ldi	r27, 0x01	; 1
     e3e:	60 e1       	ldi	r22, 0x10	; 16
     e40:	71 e0       	ldi	r23, 0x01	; 1
     e42:	41 e1       	ldi	r20, 0x11	; 17
     e44:	51 e0       	ldi	r21, 0x01	; 1
     e46:	22 e1       	ldi	r18, 0x12	; 18
     e48:	31 e0       	ldi	r19, 0x01	; 1
     e4a:	56 c0       	rjmp	.+172    	; 0xef8 <Isb_App_Init+0x24a>
							eeAddrCfg5 = ISB_APP_DIGOUT_4_EEADDR_CFG5;
							eeAddrCfg6 = ISB_APP_DIGOUT_4_EEADDR_CFG6;
							eeAddrCfg7 = ISB_APP_DIGOUT_4_EEADDR_CFG7;
							eeAddrCfg8 = ISB_APP_DIGOUT_4_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_4_EEADDR_CFG9;
							break;
     e4c:	01 e2       	ldi	r16, 0x21	; 33
     e4e:	80 2e       	mov	r8, r16
     e50:	01 e0       	ldi	r16, 0x01	; 1
     e52:	90 2e       	mov	r9, r16
     e54:	12 e2       	ldi	r17, 0x22	; 34
     e56:	a1 2e       	mov	r10, r17
     e58:	11 e0       	ldi	r17, 0x01	; 1
     e5a:	b1 2e       	mov	r11, r17
     e5c:	b3 e2       	ldi	r27, 0x23	; 35
     e5e:	cb 2e       	mov	r12, r27
     e60:	b1 e0       	ldi	r27, 0x01	; 1
     e62:	db 2e       	mov	r13, r27
     e64:	a4 e2       	ldi	r26, 0x24	; 36
     e66:	ea 2e       	mov	r14, r26
     e68:	a1 e0       	ldi	r26, 0x01	; 1
     e6a:	fa 2e       	mov	r15, r26
     e6c:	05 e2       	ldi	r16, 0x25	; 37
     e6e:	11 e0       	ldi	r17, 0x01	; 1
     e70:	c6 e2       	ldi	r28, 0x26	; 38
     e72:	d1 e0       	ldi	r29, 0x01	; 1
     e74:	a7 e2       	ldi	r26, 0x27	; 39
     e76:	b1 e0       	ldi	r27, 0x01	; 1
     e78:	68 e2       	ldi	r22, 0x28	; 40
     e7a:	71 e0       	ldi	r23, 0x01	; 1
     e7c:	49 e2       	ldi	r20, 0x29	; 41
     e7e:	51 e0       	ldi	r21, 0x01	; 1
     e80:	2a e2       	ldi	r18, 0x2A	; 42
     e82:	31 e0       	ldi	r19, 0x01	; 1
     e84:	39 c0       	rjmp	.+114    	; 0xef8 <Isb_App_Init+0x24a>
							eeAddrCfg5 = ISB_APP_DIGOUT_5_EEADDR_CFG5;
							eeAddrCfg6 = ISB_APP_DIGOUT_5_EEADDR_CFG6;
							eeAddrCfg7 = ISB_APP_DIGOUT_5_EEADDR_CFG7;
							eeAddrCfg8 = ISB_APP_DIGOUT_5_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_5_EEADDR_CFG9;
							break;
     e86:	f9 e3       	ldi	r31, 0x39	; 57
     e88:	8f 2e       	mov	r8, r31
     e8a:	f1 e0       	ldi	r31, 0x01	; 1
     e8c:	9f 2e       	mov	r9, r31
     e8e:	ea e3       	ldi	r30, 0x3A	; 58
     e90:	ae 2e       	mov	r10, r30
     e92:	e1 e0       	ldi	r30, 0x01	; 1
     e94:	be 2e       	mov	r11, r30
     e96:	7b e3       	ldi	r23, 0x3B	; 59
     e98:	c7 2e       	mov	r12, r23
     e9a:	71 e0       	ldi	r23, 0x01	; 1
     e9c:	d7 2e       	mov	r13, r23
     e9e:	6c e3       	ldi	r22, 0x3C	; 60
     ea0:	e6 2e       	mov	r14, r22
     ea2:	61 e0       	ldi	r22, 0x01	; 1
     ea4:	f6 2e       	mov	r15, r22
     ea6:	0d e3       	ldi	r16, 0x3D	; 61
     ea8:	11 e0       	ldi	r17, 0x01	; 1
     eaa:	ce e3       	ldi	r28, 0x3E	; 62
     eac:	d1 e0       	ldi	r29, 0x01	; 1
     eae:	af e3       	ldi	r26, 0x3F	; 63
     eb0:	b1 e0       	ldi	r27, 0x01	; 1
     eb2:	60 e4       	ldi	r22, 0x40	; 64
     eb4:	71 e0       	ldi	r23, 0x01	; 1
     eb6:	41 e4       	ldi	r20, 0x41	; 65
     eb8:	51 e0       	ldi	r21, 0x01	; 1
     eba:	22 e4       	ldi	r18, 0x42	; 66
     ebc:	31 e0       	ldi	r19, 0x01	; 1
     ebe:	1c c0       	rjmp	.+56     	; 0xef8 <Isb_App_Init+0x24a>
							eeAddrCfg5 = ISB_APP_DIGOUT_6_EEADDR_CFG5;
							eeAddrCfg6 = ISB_APP_DIGOUT_6_EEADDR_CFG6;
							eeAddrCfg7 = ISB_APP_DIGOUT_6_EEADDR_CFG7;
							eeAddrCfg8 = ISB_APP_DIGOUT_6_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_6_EEADDR_CFG9;
							break;
     ec0:	51 e5       	ldi	r21, 0x51	; 81
     ec2:	85 2e       	mov	r8, r21
     ec4:	51 e0       	ldi	r21, 0x01	; 1
     ec6:	95 2e       	mov	r9, r21
     ec8:	42 e5       	ldi	r20, 0x52	; 82
     eca:	a4 2e       	mov	r10, r20
     ecc:	41 e0       	ldi	r20, 0x01	; 1
     ece:	b4 2e       	mov	r11, r20
     ed0:	33 e5       	ldi	r19, 0x53	; 83
     ed2:	c3 2e       	mov	r12, r19
     ed4:	31 e0       	ldi	r19, 0x01	; 1
     ed6:	d3 2e       	mov	r13, r19
     ed8:	24 e5       	ldi	r18, 0x54	; 84
     eda:	e2 2e       	mov	r14, r18
     edc:	21 e0       	ldi	r18, 0x01	; 1
     ede:	f2 2e       	mov	r15, r18
     ee0:	05 e5       	ldi	r16, 0x55	; 85
     ee2:	11 e0       	ldi	r17, 0x01	; 1
     ee4:	c6 e5       	ldi	r28, 0x56	; 86
     ee6:	d1 e0       	ldi	r29, 0x01	; 1
     ee8:	a7 e5       	ldi	r26, 0x57	; 87
     eea:	b1 e0       	ldi	r27, 0x01	; 1
     eec:	68 e5       	ldi	r22, 0x58	; 88
     eee:	71 e0       	ldi	r23, 0x01	; 1
     ef0:	49 e5       	ldi	r20, 0x59	; 89
     ef2:	51 e0       	ldi	r21, 0x01	; 1
     ef4:	2a e5       	ldi	r18, 0x5A	; 90
     ef6:	31 e0       	ldi	r19, 0x01	; 1
							eeAddrCfg8 = ISB_APP_DIGOUT_15_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_15_EEADDR_CFG9;
							break;
					#endif /* ISB_APP_DIGOUT_15 */
				}
				uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigOut_Ch_Array[AppIndex]);
     ef8:	f3 01       	movw	r30, r6
     efa:	ec 5a       	subi	r30, 0xAC	; 172
     efc:	fe 4f       	sbci	r31, 0xFE	; 254
     efe:	e4 91       	lpm	r30, Z+
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	ee 0f       	add	r30, r30
     f04:	ff 1f       	adc	r31, r31
     f06:	ec 5a       	subi	r30, 0xAC	; 172
     f08:	fc 4f       	sbci	r31, 0xFC	; 252
     f0a:	80 81       	ld	r24, Z
     f0c:	80 ff       	sbrs	r24, 0
     f0e:	66 c0       	rjmp	.+204    	; 0xfdc <Isb_App_Init+0x32e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f10:	e1 99       	sbic	0x1c, 1	; 28
     f12:	fe cf       	rjmp	.-4      	; 0xf10 <Isb_App_Init+0x262>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     f14:	82 0c       	add	r8, r2
     f16:	93 1c       	adc	r9, r3
     f18:	9f ba       	out	0x1f, r9	; 31
     f1a:	8e ba       	out	0x1e, r8	; 30
#endif
    EECR |= (1 << EERE);
     f1c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     f1e:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg0);
     f20:	f2 01       	movw	r30, r4
     f22:	80 83       	st	Z, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f24:	e1 99       	sbic	0x1c, 1	; 28
     f26:	fe cf       	rjmp	.-4      	; 0xf24 <Isb_App_Init+0x276>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     f28:	a2 0c       	add	r10, r2
     f2a:	b3 1c       	adc	r11, r3
     f2c:	bf ba       	out	0x1f, r11	; 31
     f2e:	ae ba       	out	0x1e, r10	; 30
#endif
    EECR |= (1 << EERE);
     f30:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     f32:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg1);
     f34:	f2 01       	movw	r30, r4
     f36:	81 83       	std	Z+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f38:	e1 99       	sbic	0x1c, 1	; 28
     f3a:	fe cf       	rjmp	.-4      	; 0xf38 <Isb_App_Init+0x28a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     f3c:	c2 0c       	add	r12, r2
     f3e:	d3 1c       	adc	r13, r3
     f40:	df ba       	out	0x1f, r13	; 31
     f42:	ce ba       	out	0x1e, r12	; 30
#endif
    EECR |= (1 << EERE);
     f44:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     f46:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg2);
     f48:	f2 01       	movw	r30, r4
     f4a:	82 83       	std	Z+2, r24	; 0x02
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f4c:	e1 99       	sbic	0x1c, 1	; 28
     f4e:	fe cf       	rjmp	.-4      	; 0xf4c <Isb_App_Init+0x29e>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     f50:	e2 0c       	add	r14, r2
     f52:	f3 1c       	adc	r15, r3
     f54:	ff ba       	out	0x1f, r15	; 31
     f56:	ee ba       	out	0x1e, r14	; 30
#endif
    EECR |= (1 << EERE);
     f58:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     f5a:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg3 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg3);
     f5c:	f2 01       	movw	r30, r4
     f5e:	83 83       	std	Z+3, r24	; 0x03
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f60:	e1 99       	sbic	0x1c, 1	; 28
     f62:	fe cf       	rjmp	.-4      	; 0xf60 <Isb_App_Init+0x2b2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     f64:	02 0d       	add	r16, r2
     f66:	13 1d       	adc	r17, r3
     f68:	1f bb       	out	0x1f, r17	; 31
     f6a:	0e bb       	out	0x1e, r16	; 30
#endif
    EECR |= (1 << EERE);
     f6c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     f6e:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg4 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg4);
     f70:	f2 01       	movw	r30, r4
     f72:	84 83       	std	Z+4, r24	; 0x04
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f74:	e1 99       	sbic	0x1c, 1	; 28
     f76:	fe cf       	rjmp	.-4      	; 0xf74 <Isb_App_Init+0x2c6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     f78:	c2 0d       	add	r28, r2
     f7a:	d3 1d       	adc	r29, r3
     f7c:	df bb       	out	0x1f, r29	; 31
     f7e:	ce bb       	out	0x1e, r28	; 30
#endif
    EECR |= (1 << EERE);
     f80:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     f82:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg5 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg5);
     f84:	f2 01       	movw	r30, r4
     f86:	85 83       	std	Z+5, r24	; 0x05
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f88:	e1 99       	sbic	0x1c, 1	; 28
     f8a:	fe cf       	rjmp	.-4      	; 0xf88 <Isb_App_Init+0x2da>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     f8c:	a2 0d       	add	r26, r2
     f8e:	b3 1d       	adc	r27, r3
     f90:	bf bb       	out	0x1f, r27	; 31
     f92:	ae bb       	out	0x1e, r26	; 30
#endif
    EECR |= (1 << EERE);
     f94:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     f96:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg6 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg6);
     f98:	d2 01       	movw	r26, r4
     f9a:	16 96       	adiw	r26, 0x06	; 6
     f9c:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f9e:	e1 99       	sbic	0x1c, 1	; 28
     fa0:	fe cf       	rjmp	.-4      	; 0xf9e <Isb_App_Init+0x2f0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     fa2:	62 0d       	add	r22, r2
     fa4:	73 1d       	adc	r23, r3
     fa6:	7f bb       	out	0x1f, r23	; 31
     fa8:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
     faa:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     fac:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg7 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg7);
     fae:	f2 01       	movw	r30, r4
     fb0:	87 83       	std	Z+7, r24	; 0x07
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     fb2:	e1 99       	sbic	0x1c, 1	; 28
     fb4:	fe cf       	rjmp	.-4      	; 0xfb2 <Isb_App_Init+0x304>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     fb6:	42 0d       	add	r20, r2
     fb8:	53 1d       	adc	r21, r3
     fba:	5f bb       	out	0x1f, r21	; 31
     fbc:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
     fbe:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     fc0:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg8 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg8);
     fc2:	d2 01       	movw	r26, r4
     fc4:	18 96       	adiw	r26, 0x08	; 8
     fc6:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     fc8:	e1 99       	sbic	0x1c, 1	; 28
     fca:	fe cf       	rjmp	.-4      	; 0xfc8 <Isb_App_Init+0x31a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     fcc:	22 0d       	add	r18, r2
     fce:	33 1d       	adc	r19, r3
     fd0:	3f bb       	out	0x1f, r19	; 31
     fd2:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
     fd4:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     fd6:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg9 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg9);
     fd8:	f2 01       	movw	r30, r4
     fda:	81 87       	std	Z+9, r24	; 0x09
     fdc:	08 94       	sec
     fde:	61 1c       	adc	r6, r1
     fe0:	71 1c       	adc	r7, r1
     fe2:	8a e1       	ldi	r24, 0x1A	; 26
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	48 0e       	add	r4, r24
     fe8:	59 1e       	adc	r5, r25


	void Isb_App_Init(void) {

		#if defined(ISB_APP_DIGOUT_MAX)
			for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGOUT_MAX; AppIndex++) {
     fea:	98 e0       	ldi	r25, 0x08	; 8
     fec:	69 16       	cp	r6, r25
     fee:	71 04       	cpc	r7, r1
     ff0:	09 f0       	breq	.+2      	; 0xff4 <Isb_App_Init+0x346>
     ff2:	79 ce       	rjmp	.-782    	; 0xce6 <Isb_App_Init+0x38>
     ff4:	0b ea       	ldi	r16, 0xAB	; 171
     ff6:	10 e0       	ldi	r17, 0x00	; 0
     ff8:	c0 e0       	ldi	r28, 0x00	; 0
     ffa:	d0 e0       	ldi	r29, 0x00	; 0
			for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++) {
				uint16_t eeAddrCfg0 = 0;
				uint16_t eeAddrCfg1 = 0;
				uint16_t eeAddrCfg2 = 0;
				uint16_t eeAddrCfg3 = 0;
				switch (AppIndex) {
     ffc:	c3 30       	cpi	r28, 0x03	; 3
     ffe:	a9 f1       	breq	.+106    	; 0x106a <Isb_App_Init+0x3bc>
    1000:	c4 30       	cpi	r28, 0x04	; 4
    1002:	28 f4       	brcc	.+10     	; 0x100e <Isb_App_Init+0x360>
    1004:	c1 30       	cpi	r28, 0x01	; 1
    1006:	f9 f0       	breq	.+62     	; 0x1046 <Isb_App_Init+0x398>
    1008:	c2 30       	cpi	r28, 0x02	; 2
    100a:	30 f5       	brcc	.+76     	; 0x1058 <Isb_App_Init+0x3aa>
    100c:	0a c0       	rjmp	.+20     	; 0x1022 <Isb_App_Init+0x374>
    100e:	c5 30       	cpi	r28, 0x05	; 5
    1010:	f1 f1       	breq	.+124    	; 0x108e <Isb_App_Init+0x3e0>
    1012:	c5 30       	cpi	r28, 0x05	; 5
    1014:	98 f1       	brcs	.+102    	; 0x107c <Isb_App_Init+0x3ce>
    1016:	c6 30       	cpi	r28, 0x06	; 6
    1018:	09 f4       	brne	.+2      	; 0x101c <Isb_App_Init+0x36e>
    101a:	42 c0       	rjmp	.+132    	; 0x10a0 <Isb_App_Init+0x3f2>
    101c:	c7 30       	cpi	r28, 0x07	; 7
    101e:	51 f4       	brne	.+20     	; 0x1034 <Isb_App_Init+0x386>
    1020:	48 c0       	rjmp	.+144    	; 0x10b2 <Isb_App_Init+0x404>
    1022:	a1 e0       	ldi	r26, 0x01	; 1
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	62 e0       	ldi	r22, 0x02	; 2
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	43 e0       	ldi	r20, 0x03	; 3
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	24 e0       	ldi	r18, 0x04	; 4
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	47 c0       	rjmp	.+142    	; 0x10c2 <Isb_App_Init+0x414>
    1034:	a0 e0       	ldi	r26, 0x00	; 0
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	40 e0       	ldi	r20, 0x00	; 0
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3e c0       	rjmp	.+124    	; 0x10c2 <Isb_App_Init+0x414>
    1046:	a6 e1       	ldi	r26, 0x16	; 22
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	67 e1       	ldi	r22, 0x17	; 23
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	48 e1       	ldi	r20, 0x18	; 24
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	29 e1       	ldi	r18, 0x19	; 25
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	35 c0       	rjmp	.+106    	; 0x10c2 <Isb_App_Init+0x414>
						case 1:
							eeAddrCfg0 = ISB_APP_DIGIN_1_EEADDR_CFG0;
							eeAddrCfg1 = ISB_APP_DIGIN_1_EEADDR_CFG1;
							eeAddrCfg2 = ISB_APP_DIGIN_1_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_1_EEADDR_CFG3;
							break;
    1058:	ab e2       	ldi	r26, 0x2B	; 43
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	6c e2       	ldi	r22, 0x2C	; 44
    105e:	70 e0       	ldi	r23, 0x00	; 0
    1060:	4d e2       	ldi	r20, 0x2D	; 45
    1062:	50 e0       	ldi	r21, 0x00	; 0
    1064:	2e e2       	ldi	r18, 0x2E	; 46
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	2c c0       	rjmp	.+88     	; 0x10c2 <Isb_App_Init+0x414>
						case 2:
							eeAddrCfg0 = ISB_APP_DIGIN_2_EEADDR_CFG0;
							eeAddrCfg1 = ISB_APP_DIGIN_2_EEADDR_CFG1;
							eeAddrCfg2 = ISB_APP_DIGIN_2_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_2_EEADDR_CFG3;
							break;
    106a:	a0 e4       	ldi	r26, 0x40	; 64
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	61 e4       	ldi	r22, 0x41	; 65
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	42 e4       	ldi	r20, 0x42	; 66
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	23 e4       	ldi	r18, 0x43	; 67
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	23 c0       	rjmp	.+70     	; 0x10c2 <Isb_App_Init+0x414>
						case 3:
							eeAddrCfg0 = ISB_APP_DIGIN_3_EEADDR_CFG0;
							eeAddrCfg1 = ISB_APP_DIGIN_3_EEADDR_CFG1;
							eeAddrCfg2 = ISB_APP_DIGIN_3_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_3_EEADDR_CFG3;
							break;
    107c:	a5 e5       	ldi	r26, 0x55	; 85
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	66 e5       	ldi	r22, 0x56	; 86
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	47 e5       	ldi	r20, 0x57	; 87
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	28 e5       	ldi	r18, 0x58	; 88
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	1a c0       	rjmp	.+52     	; 0x10c2 <Isb_App_Init+0x414>
						case 4:
							eeAddrCfg0 = ISB_APP_DIGIN_4_EEADDR_CFG0;
							eeAddrCfg1 = ISB_APP_DIGIN_4_EEADDR_CFG1;
							eeAddrCfg2 = ISB_APP_DIGIN_4_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_4_EEADDR_CFG3;
							break;
    108e:	aa e6       	ldi	r26, 0x6A	; 106
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	6b e6       	ldi	r22, 0x6B	; 107
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	4c e6       	ldi	r20, 0x6C	; 108
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	2d e6       	ldi	r18, 0x6D	; 109
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	11 c0       	rjmp	.+34     	; 0x10c2 <Isb_App_Init+0x414>
						case 5:
							eeAddrCfg0 = ISB_APP_DIGIN_5_EEADDR_CFG0;
							eeAddrCfg1 = ISB_APP_DIGIN_5_EEADDR_CFG1;
							eeAddrCfg2 = ISB_APP_DIGIN_5_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_5_EEADDR_CFG3;
							break;
    10a0:	af e7       	ldi	r26, 0x7F	; 127
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	60 e8       	ldi	r22, 0x80	; 128
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	41 e8       	ldi	r20, 0x81	; 129
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	22 e8       	ldi	r18, 0x82	; 130
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	08 c0       	rjmp	.+16     	; 0x10c2 <Isb_App_Init+0x414>
						case 6:
							eeAddrCfg0 = ISB_APP_DIGIN_6_EEADDR_CFG0;
							eeAddrCfg1 = ISB_APP_DIGIN_6_EEADDR_CFG1;
							eeAddrCfg2 = ISB_APP_DIGIN_6_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_6_EEADDR_CFG3;
							break;
    10b2:	a4 e9       	ldi	r26, 0x94	; 148
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	65 e9       	ldi	r22, 0x95	; 149
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	46 e9       	ldi	r20, 0x96	; 150
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	27 e9       	ldi	r18, 0x97	; 151
    10c0:	30 e0       	ldi	r19, 0x00	; 0
							eeAddrCfg2 = ISB_APP_DIGIN_15_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_15_EEADDR_CFG3;
							break;
					#endif /* ISB_APP_DIGIN_15 */
				}
				uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigIn_Ch_Array[AppIndex]);
    10c2:	fe 01       	movw	r30, r28
    10c4:	ec 57       	subi	r30, 0x7C	; 124
    10c6:	fe 4f       	sbci	r31, 0xFE	; 254
    10c8:	e4 91       	lpm	r30, Z+
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	ee 0f       	add	r30, r30
    10ce:	ff 1f       	adc	r31, r31
    10d0:	ec 5a       	subi	r30, 0xAC	; 172
    10d2:	fc 4f       	sbci	r31, 0xFC	; 252
    10d4:	80 81       	ld	r24, Z
    10d6:	80 ff       	sbrs	r24, 0
    10d8:	46 c0       	rjmp	.+140    	; 0x1166 <Isb_App_Init+0x4b8>
    10da:	80 91 96 00 	lds	r24, 0x0096
    10de:	e8 2f       	mov	r30, r24
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    10e2:	e1 99       	sbic	0x1c, 1	; 28
    10e4:	fe cf       	rjmp	.-4      	; 0x10e2 <Isb_App_Init+0x434>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    10e6:	ae 0f       	add	r26, r30
    10e8:	bf 1f       	adc	r27, r31
    10ea:	bf bb       	out	0x1f, r27	; 31
    10ec:	ae bb       	out	0x1e, r26	; 30
#endif
    EECR |= (1 << EERE);
    10ee:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    10f0:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigIn[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg0);
    10f2:	d8 01       	movw	r26, r16
    10f4:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    10f6:	e1 99       	sbic	0x1c, 1	; 28
    10f8:	fe cf       	rjmp	.-4      	; 0x10f6 <Isb_App_Init+0x448>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    10fa:	6e 0f       	add	r22, r30
    10fc:	7f 1f       	adc	r23, r31
    10fe:	7f bb       	out	0x1f, r23	; 31
    1100:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
    1102:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1104:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigIn[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg1);
    1106:	d8 01       	movw	r26, r16
    1108:	11 96       	adiw	r26, 0x01	; 1
    110a:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    110c:	e1 99       	sbic	0x1c, 1	; 28
    110e:	fe cf       	rjmp	.-4      	; 0x110c <Isb_App_Init+0x45e>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1110:	4e 0f       	add	r20, r30
    1112:	5f 1f       	adc	r21, r31
    1114:	5f bb       	out	0x1f, r21	; 31
    1116:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
    1118:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    111a:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigIn[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg2);
    111c:	d8 01       	movw	r26, r16
    111e:	12 96       	adiw	r26, 0x02	; 2
    1120:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1122:	e1 99       	sbic	0x1c, 1	; 28
    1124:	fe cf       	rjmp	.-4      	; 0x1122 <Isb_App_Init+0x474>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1126:	2e 0f       	add	r18, r30
    1128:	3f 1f       	adc	r19, r31
    112a:	3f bb       	out	0x1f, r19	; 31
    112c:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    112e:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1130:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigIn[AppIndex].Cfg3 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg3);
    1132:	f8 01       	movw	r30, r16
    1134:	83 83       	std	Z+3, r24	; 0x03
					uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigIn_Pin0_Array[AppIndex]);
    1136:	fe 01       	movw	r30, r28
    1138:	e4 57       	subi	r30, 0x74	; 116
    113a:	fe 4f       	sbci	r31, 0xFE	; 254
    113c:	64 91       	lpm	r22, Z+
					uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
    113e:	26 2f       	mov	r18, r22
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	c9 01       	movw	r24, r18
    1144:	88 73       	andi	r24, 0x38	; 56
    1146:	90 70       	andi	r25, 0x00	; 0
    1148:	33 e0       	ldi	r19, 0x03	; 3
    114a:	95 95       	asr	r25
    114c:	87 95       	ror	r24
    114e:	3a 95       	dec	r19
    1150:	e1 f7       	brne	.-8      	; 0x114a <Isb_App_Init+0x49c>
					uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
					if (Port != 0) {
    1152:	88 23       	and	r24, r24
    1154:	41 f0       	breq	.+16     	; 0x1166 <Isb_App_Init+0x4b8>
					Isb_App_DigIn[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg1);
					Isb_App_DigIn[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg2);
					Isb_App_DigIn[AppIndex].Cfg3 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg3);
					uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigIn_Pin0_Array[AppIndex]);
					uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
					uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
    1156:	67 70       	andi	r22, 0x07	; 7
					if (Port != 0) {
						if ((Pin0 & PULLUP) == 0) {
    1158:	26 fd       	sbrc	r18, 6
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <Isb_App_Init+0x4b2>
							Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT);
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <Isb_App_Init+0x4b4>
						}
						else {
							Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT_PULLUP);
    1160:	42 e0       	ldi	r20, 0x02	; 2
    1162:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
    1166:	21 96       	adiw	r28, 0x01	; 1
    1168:	08 5f       	subi	r16, 0xF8	; 248
    116a:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
		#endif /* ISB_APP_DIGOUT_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++) {
    116c:	c8 30       	cpi	r28, 0x08	; 8
    116e:	d1 05       	cpc	r29, r1
    1170:	09 f0       	breq	.+2      	; 0x1174 <Isb_App_Init+0x4c6>
    1172:	44 cf       	rjmp	.-376    	; 0xffc <Isb_App_Init+0x34e>
//						break;
//				}
//			}
		#endif /* ISB_APP_LCD_MAX */

	}
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	df 90       	pop	r13
    1182:	cf 90       	pop	r12
    1184:	bf 90       	pop	r11
    1186:	af 90       	pop	r10
    1188:	9f 90       	pop	r9
    118a:	8f 90       	pop	r8
    118c:	7f 90       	pop	r7
    118e:	6f 90       	pop	r6
    1190:	5f 90       	pop	r5
    1192:	4f 90       	pop	r4
    1194:	3f 90       	pop	r3
    1196:	2f 90       	pop	r2
    1198:	08 95       	ret

0000119a <Isb_App_Convert_None>:



	void Isb_App_Convert_None(uint16_t Value, void *Destination) {
    119a:	fb 01       	movw	r30, r22
		*(uint16_t *)Destination = Value;
    119c:	91 83       	std	Z+1, r25	; 0x01
    119e:	80 83       	st	Z, r24
	}
    11a0:	08 95       	ret

000011a2 <Isb_App_Convert_PT100>:



	void Isb_App_Convert_PT100(uint16_t Value, void *Destination) {
    11a2:	fb 01       	movw	r30, r22
		Value = Value << 1;
		*(uint16_t *)Destination = Value;
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	91 83       	std	Z+1, r25	; 0x01
    11aa:	80 83       	st	Z, r24
	}
    11ac:	08 95       	ret

000011ae <Isb_App_Exec>:



	void Isb_App_Exec(void) {
    11ae:	3f 92       	push	r3
    11b0:	4f 92       	push	r4
    11b2:	5f 92       	push	r5
    11b4:	6f 92       	push	r6
    11b6:	7f 92       	push	r7
    11b8:	8f 92       	push	r8
    11ba:	9f 92       	push	r9
    11bc:	af 92       	push	r10
    11be:	bf 92       	push	r11
    11c0:	cf 92       	push	r12
    11c2:	df 92       	push	r13
    11c4:	ef 92       	push	r14
    11c6:	ff 92       	push	r15
    11c8:	0f 93       	push	r16
    11ca:	1f 93       	push	r17
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29

		#if defined(ISB_APP_DIGOUT_MAX)
			if (bit_is_set(Isb_App_DigOut_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
    11d0:	80 91 9a 00 	lds	r24, 0x009A
    11d4:	80 ff       	sbrs	r24, 0
    11d6:	b9 c1       	rjmp	.+882    	; 0x154a <Isb_App_Exec+0x39c>
    11d8:	c4 e8       	ldi	r28, 0x84	; 132
    11da:	d2 e0       	ldi	r29, 0x02	; 2
    11dc:	7e 01       	movw	r14, r28
    11de:	00 e0       	ldi	r16, 0x00	; 0
    11e0:	10 e0       	ldi	r17, 0x00	; 0



						// Rückmeldungsfunktion
						Value = 0;
						if ((Isb_App_DigOut[AppIndex].Value == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
    11e2:	7a e1       	ldi	r23, 0x1A	; 26
    11e4:	a7 2e       	mov	r10, r23
    11e6:	b1 2c       	mov	r11, r1
						if ((Isb_App_DigOut[AppIndex].Value == 0) & (bit_is_set(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
							Value = 1;
						}
						if (Isb_Obj_1Bit[Obj_1Bit_3].Value != Value) {
							Isb_Obj_1Bit[Obj_1Bit_3].Value = Value;
							Isb_Obj_1Bit[Obj_1Bit_3].IsChanged = TRUE;
    11e8:	dd 24       	eor	r13, r13
    11ea:	d3 94       	inc	r13



						// Rückmeldungsfunktion
						Value = 0;
						if ((Isb_App_DigOut[AppIndex].Value == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
    11ec:	61 e0       	ldi	r22, 0x01	; 1
    11ee:	46 2e       	mov	r4, r22
    11f0:	51 2c       	mov	r5, r1
											Isb_App_DigOut[AppIndex].TimeOffCount--;
											Value = 1;
										}
									}
									else {
										Isb_App_DigOut[AppIndex].TimeOffCount = (Isb_App_DigOut[AppIndex].Cfg5 + Isb_App_DigOut[AppIndex].Cfg6 * 60 + Isb_App_DigOut[AppIndex].Cfg7 * 60 * 60) * 1000;
    11f2:	50 e1       	ldi	r21, 0x10	; 16
    11f4:	65 2e       	mov	r6, r21
    11f6:	5e e0       	ldi	r21, 0x0E	; 14
    11f8:	75 2e       	mov	r7, r21
    11fa:	4c e3       	ldi	r20, 0x3C	; 60
    11fc:	34 2e       	mov	r3, r20
    11fe:	38 ee       	ldi	r19, 0xE8	; 232
    1200:	83 2e       	mov	r8, r19
    1202:	33 e0       	ldi	r19, 0x03	; 3
    1204:	93 2e       	mov	r9, r19
	void Isb_App_Exec(void) {

		#if defined(ISB_APP_DIGOUT_MAX)
			if (bit_is_set(Isb_App_DigOut_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGOUT_MAX; AppIndex++) {
					uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigOut_Ch_Array[AppIndex]);
    1206:	f8 01       	movw	r30, r16
    1208:	ec 5a       	subi	r30, 0xAC	; 172
    120a:	fe 4f       	sbci	r31, 0xFE	; 254
    120c:	e4 91       	lpm	r30, Z+
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	ee 0f       	add	r30, r30
    1212:	ff 1f       	adc	r31, r31
    1214:	ec 5a       	subi	r30, 0xAC	; 172
    1216:	fc 4f       	sbci	r31, 0xFC	; 252
    1218:	80 81       	ld	r24, Z
    121a:	80 ff       	sbrs	r24, 0
    121c:	86 c1       	rjmp	.+780    	; 0x152a <Isb_App_Exec+0x37c>
						uint8_t Obj_1Bit_0 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_1Bit_0_Array[AppIndex]);
    121e:	f8 01       	movw	r30, r16
    1220:	e4 5a       	subi	r30, 0xA4	; 164
    1222:	fe 4f       	sbci	r31, 0xFE	; 254
    1224:	24 91       	lpm	r18, Z+
						uint8_t Obj_1Bit_1 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_1Bit_1_Array[AppIndex]);
    1226:	f8 01       	movw	r30, r16
    1228:	ec 59       	subi	r30, 0x9C	; 156
    122a:	fe 4f       	sbci	r31, 0xFE	; 254
    122c:	34 91       	lpm	r19, Z+
						uint8_t Obj_1Bit_2 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_1Bit_2_Array[AppIndex]);
						uint8_t Obj_1Bit_3 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_1Bit_3_Array[AppIndex]);
    122e:	f8 01       	movw	r30, r16
    1230:	ec 58       	subi	r30, 0x8C	; 140
    1232:	fe 4f       	sbci	r31, 0xFE	; 254
    1234:	c4 90       	lpm	r12, Z+
						// Verknüpfungsfunktion
						switch (Isb_App_DigOut[AppIndex].Cfg0 & ISB_APP_DIGOUT_CFG0_LOGIC_MODE_MASK) {
    1236:	f7 01       	movw	r30, r14
    1238:	80 81       	ld	r24, Z
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	80 76       	andi	r24, 0x60	; 96
    123e:	90 70       	andi	r25, 0x00	; 0
    1240:	80 32       	cpi	r24, 0x20	; 32
    1242:	91 05       	cpc	r25, r1
    1244:	39 f0       	breq	.+14     	; 0x1254 <Isb_App_Exec+0xa6>
    1246:	a2 2f       	mov	r26, r18
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	80 34       	cpi	r24, 0x40	; 64
    124c:	91 05       	cpc	r25, r1
    124e:	09 f0       	breq	.+2      	; 0x1252 <Isb_App_Exec+0xa4>
    1250:	52 c0       	rjmp	.+164    	; 0x12f6 <Isb_App_Exec+0x148>
    1252:	23 c0       	rjmp	.+70     	; 0x129a <Isb_App_Exec+0xec>
							case ISB_APP_DIGOUT_CFG0_LOGIC_MODE_AND:
								if ((Isb_Obj_1Bit[Obj_1Bit_0].IsChanged == TRUE) | (Isb_Obj_1Bit[Obj_1Bit_1].IsChanged == TRUE)) {
    1254:	a2 2f       	mov	r26, r18
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	23 2f       	mov	r18, r19
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	fd 01       	movw	r30, r26
    125e:	ee 0f       	add	r30, r30
    1260:	ff 1f       	adc	r31, r31
    1262:	ee 0f       	add	r30, r30
    1264:	ff 1f       	adc	r31, r31
    1266:	ec 55       	subi	r30, 0x5C	; 92
    1268:	fe 4f       	sbci	r31, 0xFE	; 254
    126a:	83 81       	ldd	r24, Z+3	; 0x03
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	59 f0       	breq	.+22     	; 0x1286 <Isb_App_Exec+0xd8>
    1270:	f9 01       	movw	r30, r18
    1272:	ee 0f       	add	r30, r30
    1274:	ff 1f       	adc	r31, r31
    1276:	ee 0f       	add	r30, r30
    1278:	ff 1f       	adc	r31, r31
    127a:	ec 55       	subi	r30, 0x5C	; 92
    127c:	fe 4f       	sbci	r31, 0xFE	; 254
    127e:	83 81       	ldd	r24, Z+3	; 0x03
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	09 f0       	breq	.+2      	; 0x1286 <Isb_App_Exec+0xd8>
    1284:	4b c0       	rjmp	.+150    	; 0x131c <Isb_App_Exec+0x16e>
									if ((Isb_Obj_1Bit[Obj_1Bit_0].Value != 0) & (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0)) {
    1286:	aa 0f       	add	r26, r26
    1288:	bb 1f       	adc	r27, r27
    128a:	aa 0f       	add	r26, r26
    128c:	bb 1f       	adc	r27, r27
    128e:	aa 55       	subi	r26, 0x5A	; 90
    1290:	be 4f       	sbci	r27, 0xFE	; 254
    1292:	8c 91       	ld	r24, X
    1294:	88 23       	and	r24, r24
    1296:	69 f1       	breq	.+90     	; 0x12f2 <Isb_App_Exec+0x144>
    1298:	1f c0       	rjmp	.+62     	; 0x12d8 <Isb_App_Exec+0x12a>
										Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
									}
								}
								break;
							case ISB_APP_DIGOUT_CFG0_LOGIC_MODE_OR:
								if ((Isb_Obj_1Bit[Obj_1Bit_0].IsChanged == TRUE) | (Isb_Obj_1Bit[Obj_1Bit_1].IsChanged == TRUE)) {
    129a:	23 2f       	mov	r18, r19
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	fd 01       	movw	r30, r26
    12a0:	ee 0f       	add	r30, r30
    12a2:	ff 1f       	adc	r31, r31
    12a4:	ee 0f       	add	r30, r30
    12a6:	ff 1f       	adc	r31, r31
    12a8:	ec 55       	subi	r30, 0x5C	; 92
    12aa:	fe 4f       	sbci	r31, 0xFE	; 254
    12ac:	83 81       	ldd	r24, Z+3	; 0x03
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	51 f0       	breq	.+20     	; 0x12c6 <Isb_App_Exec+0x118>
    12b2:	f9 01       	movw	r30, r18
    12b4:	ee 0f       	add	r30, r30
    12b6:	ff 1f       	adc	r31, r31
    12b8:	ee 0f       	add	r30, r30
    12ba:	ff 1f       	adc	r31, r31
    12bc:	ec 55       	subi	r30, 0x5C	; 92
    12be:	fe 4f       	sbci	r31, 0xFE	; 254
    12c0:	83 81       	ldd	r24, Z+3	; 0x03
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	59 f5       	brne	.+86     	; 0x131c <Isb_App_Exec+0x16e>
									if ((Isb_Obj_1Bit[Obj_1Bit_0].Value != 0) | (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0)) {
    12c6:	aa 0f       	add	r26, r26
    12c8:	bb 1f       	adc	r27, r27
    12ca:	aa 0f       	add	r26, r26
    12cc:	bb 1f       	adc	r27, r27
    12ce:	aa 55       	subi	r26, 0x5A	; 90
    12d0:	be 4f       	sbci	r27, 0xFE	; 254
    12d2:	8c 91       	ld	r24, X
    12d4:	88 23       	and	r24, r24
    12d6:	51 f4       	brne	.+20     	; 0x12ec <Isb_App_Exec+0x13e>
    12d8:	22 0f       	add	r18, r18
    12da:	33 1f       	adc	r19, r19
    12dc:	22 0f       	add	r18, r18
    12de:	33 1f       	adc	r19, r19
    12e0:	2a 55       	subi	r18, 0x5A	; 90
    12e2:	3e 4f       	sbci	r19, 0xFE	; 254
    12e4:	f9 01       	movw	r30, r18
    12e6:	80 81       	ld	r24, Z
    12e8:	88 23       	and	r24, r24
    12ea:	19 f0       	breq	.+6      	; 0x12f2 <Isb_App_Exec+0x144>
										Isb_App_DigOut[AppIndex].LogicValue = 1;
    12ec:	da 8a       	std	Y+18, r13	; 0x12
										Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
    12ee:	db 8a       	std	Y+19, r13	; 0x13
    12f0:	15 c0       	rjmp	.+42     	; 0x131c <Isb_App_Exec+0x16e>
									}
									else {
										Isb_App_DigOut[AppIndex].LogicValue = 0;
    12f2:	1a 8a       	std	Y+18, r1	; 0x12
    12f4:	fc cf       	rjmp	.-8      	; 0x12ee <Isb_App_Exec+0x140>
										Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
									}
								}
								break;
							default:
								if (Isb_Obj_1Bit[Obj_1Bit_0].IsChanged == TRUE) {
    12f6:	fd 01       	movw	r30, r26
    12f8:	ee 0f       	add	r30, r30
    12fa:	ff 1f       	adc	r31, r31
    12fc:	ee 0f       	add	r30, r30
    12fe:	ff 1f       	adc	r31, r31
    1300:	ec 55       	subi	r30, 0x5C	; 92
    1302:	fe 4f       	sbci	r31, 0xFE	; 254
    1304:	93 81       	ldd	r25, Z+3	; 0x03
    1306:	91 30       	cpi	r25, 0x01	; 1
    1308:	49 f4       	brne	.+18     	; 0x131c <Isb_App_Exec+0x16e>
									Isb_App_DigOut[AppIndex].LogicValue = Isb_Obj_1Bit[Obj_1Bit_0].Value;
    130a:	aa 0f       	add	r26, r26
    130c:	bb 1f       	adc	r27, r27
    130e:	aa 0f       	add	r26, r26
    1310:	bb 1f       	adc	r27, r27
    1312:	aa 55       	subi	r26, 0x5A	; 90
    1314:	be 4f       	sbci	r27, 0xFE	; 254
    1316:	8c 91       	ld	r24, X
    1318:	8a 8b       	std	Y+18, r24	; 0x12
									Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
    131a:	9b 8b       	std	Y+19, r25	; 0x13
								}						
								break;
						}
						// Zeitfunktion
						uint8_t Value = Isb_App_DigOut[AppIndex].LogicValue;
    131c:	4a 89       	ldd	r20, Y+18	; 0x12
						if ((Isb_App_DigOut[AppIndex].Cfg1 & ISB_APP_DIGOUT_CFG1_TIME_MODE_MASK) != ISB_APP_DIGOUT_CFG1_TIME_MODE_NONE) {
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	83 70       	andi	r24, 0x03	; 3
    1324:	90 70       	andi	r25, 0x00	; 0
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	09 f4       	brne	.+2      	; 0x132c <Isb_App_Exec+0x17e>
    132a:	7a c0       	rjmp	.+244    	; 0x1420 <Isb_App_Exec+0x272>
							if ((Isb_App_DigOut[AppIndex].Cfg1 & ISB_APP_DIGOUT_CFG1_TIME_MODE_MASK) == ISB_APP_DIGOUT_CFG1_TIME_MODE_DELAY) {
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	09 f0       	breq	.+2      	; 0x1332 <Isb_App_Exec+0x184>
    1330:	77 c0       	rjmp	.+238    	; 0x1420 <Isb_App_Exec+0x272>
								if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg1, ISB_APP_DIGOUT_CFG1_TIME_POWERUPDELAY_ENABLED)) {
    1332:	0a 9d       	mul	r16, r10
    1334:	f0 01       	movw	r30, r0
    1336:	0b 9d       	mul	r16, r11
    1338:	f0 0d       	add	r31, r0
    133a:	1a 9d       	mul	r17, r10
    133c:	f0 0d       	add	r31, r0
    133e:	11 24       	eor	r1, r1
    1340:	eb 57       	subi	r30, 0x7B	; 123
    1342:	fd 4f       	sbci	r31, 0xFD	; 253
    1344:	80 81       	ld	r24, Z
    1346:	82 ff       	sbrs	r24, 2
    1348:	34 c0       	rjmp	.+104    	; 0x13b2 <Isb_App_Exec+0x204>
									if (Value == 1) {
    134a:	41 30       	cpi	r20, 0x01	; 1
    134c:	89 f4       	brne	.+34     	; 0x1370 <Isb_App_Exec+0x1c2>
										if (Isb_App_DigOut[AppIndex].TimeOnCount != 0) {
    134e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1350:	9b 85       	ldd	r25, Y+11	; 0x0b
    1352:	ac 85       	ldd	r26, Y+12	; 0x0c
    1354:	bd 85       	ldd	r27, Y+13	; 0x0d
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	a1 05       	cpc	r26, r1
    135a:	b1 05       	cpc	r27, r1
    135c:	51 f1       	breq	.+84     	; 0x13b2 <Isb_App_Exec+0x204>
											Isb_App_DigOut[AppIndex].TimeOnCount--;
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	a1 09       	sbc	r26, r1
    1362:	b1 09       	sbc	r27, r1
    1364:	8a 87       	std	Y+10, r24	; 0x0a
    1366:	9b 87       	std	Y+11, r25	; 0x0b
    1368:	ac 87       	std	Y+12, r26	; 0x0c
    136a:	bd 87       	std	Y+13, r27	; 0x0d
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	21 c0       	rjmp	.+66     	; 0x13b2 <Isb_App_Exec+0x204>
											Value = 0;
										}
									}
									else {
										Isb_App_DigOut[AppIndex].TimeOnCount = (Isb_App_DigOut[AppIndex].Cfg2 + Isb_App_DigOut[AppIndex].Cfg3 * 60 + Isb_App_DigOut[AppIndex].Cfg4 * 60 * 60) * 1000;
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	86 9d       	mul	r24, r6
    1376:	90 01       	movw	r18, r0
    1378:	87 9d       	mul	r24, r7
    137a:	30 0d       	add	r19, r0
    137c:	96 9d       	mul	r25, r6
    137e:	30 0d       	add	r19, r0
    1380:	11 24       	eor	r1, r1
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	83 9d       	mul	r24, r3
    1386:	c0 01       	movw	r24, r0
    1388:	11 24       	eor	r1, r1
    138a:	28 0f       	add	r18, r24
    138c:	39 1f       	adc	r19, r25
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	28 0f       	add	r18, r24
    1392:	31 1d       	adc	r19, r1
    1394:	28 9d       	mul	r18, r8
    1396:	c0 01       	movw	r24, r0
    1398:	29 9d       	mul	r18, r9
    139a:	90 0d       	add	r25, r0
    139c:	38 9d       	mul	r19, r8
    139e:	90 0d       	add	r25, r0
    13a0:	11 24       	eor	r1, r1
    13a2:	aa 27       	eor	r26, r26
    13a4:	97 fd       	sbrc	r25, 7
    13a6:	a0 95       	com	r26
    13a8:	ba 2f       	mov	r27, r26
    13aa:	8a 87       	std	Y+10, r24	; 0x0a
    13ac:	9b 87       	std	Y+11, r25	; 0x0b
    13ae:	ac 87       	std	Y+12, r26	; 0x0c
    13b0:	bd 87       	std	Y+13, r27	; 0x0d
									}
								}
								if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg1, ISB_APP_DIGOUT_CFG1_TIME_POWERDOWNDELAY_ENABLED)) {
    13b2:	80 81       	ld	r24, Z
    13b4:	83 ff       	sbrs	r24, 3
    13b6:	34 c0       	rjmp	.+104    	; 0x1420 <Isb_App_Exec+0x272>
									if (Value == 0) {
    13b8:	44 23       	and	r20, r20
    13ba:	89 f4       	brne	.+34     	; 0x13de <Isb_App_Exec+0x230>
										if (Isb_App_DigOut[AppIndex].TimeOffCount != 0) {
    13bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    13be:	9f 85       	ldd	r25, Y+15	; 0x0f
    13c0:	a8 89       	ldd	r26, Y+16	; 0x10
    13c2:	b9 89       	ldd	r27, Y+17	; 0x11
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	a1 05       	cpc	r26, r1
    13c8:	b1 05       	cpc	r27, r1
    13ca:	51 f1       	breq	.+84     	; 0x1420 <Isb_App_Exec+0x272>
											Isb_App_DigOut[AppIndex].TimeOffCount--;
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	a1 09       	sbc	r26, r1
    13d0:	b1 09       	sbc	r27, r1
    13d2:	8e 87       	std	Y+14, r24	; 0x0e
    13d4:	9f 87       	std	Y+15, r25	; 0x0f
    13d6:	a8 8b       	std	Y+16, r26	; 0x10
    13d8:	b9 8b       	std	Y+17, r27	; 0x11
    13da:	41 e0       	ldi	r20, 0x01	; 1
    13dc:	21 c0       	rjmp	.+66     	; 0x1420 <Isb_App_Exec+0x272>
											Value = 1;
										}
									}
									else {
										Isb_App_DigOut[AppIndex].TimeOffCount = (Isb_App_DigOut[AppIndex].Cfg5 + Isb_App_DigOut[AppIndex].Cfg6 * 60 + Isb_App_DigOut[AppIndex].Cfg7 * 60 * 60) * 1000;
    13de:	8f 81       	ldd	r24, Y+7	; 0x07
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	86 9d       	mul	r24, r6
    13e4:	90 01       	movw	r18, r0
    13e6:	87 9d       	mul	r24, r7
    13e8:	30 0d       	add	r19, r0
    13ea:	96 9d       	mul	r25, r6
    13ec:	30 0d       	add	r19, r0
    13ee:	11 24       	eor	r1, r1
    13f0:	8e 81       	ldd	r24, Y+6	; 0x06
    13f2:	83 9d       	mul	r24, r3
    13f4:	c0 01       	movw	r24, r0
    13f6:	11 24       	eor	r1, r1
    13f8:	28 0f       	add	r18, r24
    13fa:	39 1f       	adc	r19, r25
    13fc:	8d 81       	ldd	r24, Y+5	; 0x05
    13fe:	28 0f       	add	r18, r24
    1400:	31 1d       	adc	r19, r1
    1402:	28 9d       	mul	r18, r8
    1404:	c0 01       	movw	r24, r0
    1406:	29 9d       	mul	r18, r9
    1408:	90 0d       	add	r25, r0
    140a:	38 9d       	mul	r19, r8
    140c:	90 0d       	add	r25, r0
    140e:	11 24       	eor	r1, r1
    1410:	aa 27       	eor	r26, r26
    1412:	97 fd       	sbrc	r25, 7
    1414:	a0 95       	com	r26
    1416:	ba 2f       	mov	r27, r26
    1418:	8e 87       	std	Y+14, r24	; 0x0e
    141a:	9f 87       	std	Y+15, r25	; 0x0f
    141c:	a8 8b       	std	Y+16, r26	; 0x10
    141e:	b9 8b       	std	Y+17, r27	; 0x11
									Isb_App_DigOut[AppIndex].TimeOffCount = (Isb_App_DigOut[AppIndex].Cfg5 + Isb_App_DigOut[AppIndex].Cfg6 * 60 + Isb_App_DigOut[AppIndex].Cfg7 * 60 * 60) * 1000;
								}
							}
*/
						}
						if (Isb_App_DigOut[AppIndex].TimeValue != Value) {
    1420:	8c 89       	ldd	r24, Y+20	; 0x14
    1422:	84 17       	cp	r24, r20
    1424:	11 f0       	breq	.+4      	; 0x142a <Isb_App_Exec+0x27c>
							Isb_App_DigOut[AppIndex].TimeValue = Value;
    1426:	4c 8b       	std	Y+20, r20	; 0x14
							Isb_App_DigOut[AppIndex].TimeIsChanged = TRUE;
    1428:	dd 8a       	std	Y+21, r13	; 0x15
//									}
//								}
//							}
//						}
//						else {
							if (Isb_App_DigOut[AppIndex].TimeIsChanged == TRUE) {
    142a:	9d 89       	ldd	r25, Y+21	; 0x15
    142c:	91 30       	cpi	r25, 0x01	; 1
    142e:	19 f4       	brne	.+6      	; 0x1436 <Isb_App_Exec+0x288>
								Isb_App_DigOut[AppIndex].SpecialValue = Isb_App_DigOut[AppIndex].TimeValue;
    1430:	8c 89       	ldd	r24, Y+20	; 0x14
    1432:	8e 8b       	std	Y+22, r24	; 0x16
								Isb_App_DigOut[AppIndex].SpecialIsChanged = TRUE;
    1434:	9f 8b       	std	Y+23, r25	; 0x17
//								}
//
//							}
//						}
//						else {
							if (Isb_App_DigOut[AppIndex].SpecialIsChanged == TRUE) {
    1436:	9f 89       	ldd	r25, Y+23	; 0x17
    1438:	91 30       	cpi	r25, 0x01	; 1
    143a:	19 f4       	brne	.+6      	; 0x1442 <Isb_App_Exec+0x294>
								Isb_App_DigOut[AppIndex].Value = Isb_App_DigOut[AppIndex].SpecialValue;
    143c:	8e 89       	ldd	r24, Y+22	; 0x16
    143e:	88 8f       	std	Y+24, r24	; 0x18
								Isb_App_DigOut[AppIndex].IsChanged = TRUE;
    1440:	99 8f       	std	Y+25, r25	; 0x19
							}						
//						}
						// Ausgang
// -> TODO:
						if (Isb_App_DigOut[AppIndex].IsChanged == TRUE) {
    1442:	89 8d       	ldd	r24, Y+25	; 0x19
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	09 f0       	breq	.+2      	; 0x144a <Isb_App_Exec+0x29c>
    1448:	43 c0       	rjmp	.+134    	; 0x14d0 <Isb_App_Exec+0x322>
							uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigOut_Pin0_Array[AppIndex]);
    144a:	f8 01       	movw	r30, r16
    144c:	e4 58       	subi	r30, 0x84	; 132
    144e:	fe 4f       	sbci	r31, 0xFE	; 254
    1450:	64 91       	lpm	r22, Z+
//							uint8_t Pin1 = pgm_read_byte(&pgmIsb_App_DigOut_Pin1_Array[AppIndex]);
							switch (Isb_App_DigOut[AppIndex].Cfg0 & ISB_APP_DIGOUT_CFG0_OPERATION_MASK) {
    1452:	f7 01       	movw	r30, r14
    1454:	80 81       	ld	r24, Z
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	83 70       	andi	r24, 0x03	; 3
    145a:	90 70       	andi	r25, 0x00	; 0
    145c:	89 2b       	or	r24, r25
    145e:	c1 f5       	brne	.+112    	; 0x14d0 <Isb_App_Exec+0x322>
								case ISB_APP_DIGOUT_CFG0_OPERATION_STD:
									if (bit_is_set(Isb_App_DigOut[AppIndex].Value, 0)) {
    1460:	0a 9d       	mul	r16, r10
    1462:	a0 01       	movw	r20, r0
    1464:	0b 9d       	mul	r16, r11
    1466:	50 0d       	add	r21, r0
    1468:	1a 9d       	mul	r17, r10
    146a:	50 0d       	add	r21, r0
    146c:	11 24       	eor	r1, r1
    146e:	fa 01       	movw	r30, r20
    1470:	e4 56       	subi	r30, 0x64	; 100
    1472:	fd 4f       	sbci	r31, 0xFD	; 253
    1474:	80 81       	ld	r24, Z
    1476:	26 2f       	mov	r18, r22
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	80 ff       	sbrs	r24, 0
    147c:	11 c0       	rjmp	.+34     	; 0x14a0 <Isb_App_Exec+0x2f2>
										uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
    147e:	28 73       	andi	r18, 0x38	; 56
    1480:	30 70       	andi	r19, 0x00	; 0
    1482:	e3 e0       	ldi	r30, 0x03	; 3
    1484:	35 95       	asr	r19
    1486:	27 95       	ror	r18
    1488:	ea 95       	dec	r30
    148a:	e1 f7       	brne	.-8      	; 0x1484 <Isb_App_Exec+0x2d6>
										uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
										if (Port != 0) {
    148c:	22 23       	and	r18, r18
    148e:	f9 f0       	breq	.+62     	; 0x14ce <Isb_App_Exec+0x320>
//							uint8_t Pin1 = pgm_read_byte(&pgmIsb_App_DigOut_Pin1_Array[AppIndex]);
							switch (Isb_App_DigOut[AppIndex].Cfg0 & ISB_APP_DIGOUT_CFG0_OPERATION_MASK) {
								case ISB_APP_DIGOUT_CFG0_OPERATION_STD:
									if (bit_is_set(Isb_App_DigOut[AppIndex].Value, 0)) {
										uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
										uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
    1490:	67 70       	andi	r22, 0x07	; 7
										if (Port != 0) {
											if (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN0_INVERTED)) {
    1492:	fa 01       	movw	r30, r20
    1494:	ec 57       	subi	r30, 0x7C	; 124
    1496:	fd 4f       	sbci	r31, 0xFD	; 253
    1498:	80 81       	ld	r24, Z
    149a:	82 fd       	sbrc	r24, 2
    149c:	11 c0       	rjmp	.+34     	; 0x14c0 <Isb_App_Exec+0x312>
    149e:	13 c0       	rjmp	.+38     	; 0x14c6 <Isb_App_Exec+0x318>
												Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_HIGH);
											}
										}
									}
									else {
										uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
    14a0:	28 73       	andi	r18, 0x38	; 56
    14a2:	30 70       	andi	r19, 0x00	; 0
    14a4:	73 e0       	ldi	r23, 0x03	; 3
    14a6:	35 95       	asr	r19
    14a8:	27 95       	ror	r18
    14aa:	7a 95       	dec	r23
    14ac:	e1 f7       	brne	.-8      	; 0x14a6 <Isb_App_Exec+0x2f8>
										uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
										if (Port != 0) {
    14ae:	22 23       	and	r18, r18
    14b0:	71 f0       	breq	.+28     	; 0x14ce <Isb_App_Exec+0x320>
											}
										}
									}
									else {
										uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
										uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
    14b2:	67 70       	andi	r22, 0x07	; 7
										if (Port != 0) {
											if (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN0_INVERTED)) {
    14b4:	fa 01       	movw	r30, r20
    14b6:	ec 57       	subi	r30, 0x7C	; 124
    14b8:	fd 4f       	sbci	r31, 0xFD	; 253
    14ba:	80 81       	ld	r24, Z
    14bc:	82 fd       	sbrc	r24, 2
    14be:	03 c0       	rjmp	.+6      	; 0x14c6 <Isb_App_Exec+0x318>
												Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_HIGH);
    14c0:	82 2f       	mov	r24, r18
    14c2:	43 e0       	ldi	r20, 0x03	; 3
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <Isb_App_Exec+0x31c>
											}
											else {
												Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_LOW);
    14c6:	82 2f       	mov	r24, r18
    14c8:	41 e0       	ldi	r20, 0x01	; 1
    14ca:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
											}
										}
									}
									Isb_App_DigOut[AppIndex].IsChanged = FALSE;
    14ce:	19 8e       	std	Y+25, r1	; 0x19



						// Rückmeldungsfunktion
						Value = 0;
						if ((Isb_App_DigOut[AppIndex].Value == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
    14d0:	98 8d       	ldd	r25, Y+24	; 0x18
    14d2:	0a 9d       	mul	r16, r10
    14d4:	f0 01       	movw	r30, r0
    14d6:	0b 9d       	mul	r16, r11
    14d8:	f0 0d       	add	r31, r0
    14da:	1a 9d       	mul	r17, r10
    14dc:	f0 0d       	add	r31, r0
    14de:	11 24       	eor	r1, r1
    14e0:	e3 57       	subi	r30, 0x73	; 115
    14e2:	fd 4f       	sbci	r31, 0xFD	; 253
    14e4:	20 81       	ld	r18, Z
							Value = 1;
						}
						if ((Isb_App_DigOut[AppIndex].Value == 0) & (bit_is_set(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
    14e6:	e0 81       	ld	r30, Z
    14e8:	99 23       	and	r25, r25
    14ea:	21 f4       	brne	.+8      	; 0x14f4 <Isb_App_Exec+0x346>
    14ec:	e0 ff       	sbrs	r30, 0
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <Isb_App_Exec+0x346>
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	07 c0       	rjmp	.+14     	; 0x1502 <Isb_App_Exec+0x354>



						// Rückmeldungsfunktion
						Value = 0;
						if ((Isb_App_DigOut[AppIndex].Value == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	91 30       	cpi	r25, 0x01	; 1
    14f8:	09 f4       	brne	.+2      	; 0x14fc <Isb_App_Exec+0x34e>
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	92 2f       	mov	r25, r18
    14fe:	94 25       	eor	r25, r4
    1500:	98 23       	and	r25, r24
							Value = 1;
						}
						if ((Isb_App_DigOut[AppIndex].Value == 0) & (bit_is_set(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
							Value = 1;
						}
						if (Isb_Obj_1Bit[Obj_1Bit_3].Value != Value) {
    1502:	ec 2d       	mov	r30, r12
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	df 01       	movw	r26, r30
    1508:	aa 0f       	add	r26, r26
    150a:	bb 1f       	adc	r27, r27
    150c:	aa 0f       	add	r26, r26
    150e:	bb 1f       	adc	r27, r27
    1510:	aa 55       	subi	r26, 0x5A	; 90
    1512:	be 4f       	sbci	r27, 0xFE	; 254
    1514:	8c 91       	ld	r24, X
    1516:	89 17       	cp	r24, r25
    1518:	41 f0       	breq	.+16     	; 0x152a <Isb_App_Exec+0x37c>
							Isb_Obj_1Bit[Obj_1Bit_3].Value = Value;
    151a:	9c 93       	st	X, r25
							Isb_Obj_1Bit[Obj_1Bit_3].IsChanged = TRUE;
    151c:	ee 0f       	add	r30, r30
    151e:	ff 1f       	adc	r31, r31
    1520:	ee 0f       	add	r30, r30
    1522:	ff 1f       	adc	r31, r31
    1524:	ec 55       	subi	r30, 0x5C	; 92
    1526:	fe 4f       	sbci	r31, 0xFE	; 254
    1528:	d3 82       	std	Z+3, r13	; 0x03
    152a:	0f 5f       	subi	r16, 0xFF	; 255
    152c:	1f 4f       	sbci	r17, 0xFF	; 255
    152e:	6a 96       	adiw	r28, 0x1a	; 26
    1530:	8a e1       	ldi	r24, 0x1A	; 26
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	e8 0e       	add	r14, r24
    1536:	f9 1e       	adc	r15, r25

	void Isb_App_Exec(void) {

		#if defined(ISB_APP_DIGOUT_MAX)
			if (bit_is_set(Isb_App_DigOut_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGOUT_MAX; AppIndex++) {
    1538:	08 30       	cpi	r16, 0x08	; 8
    153a:	11 05       	cpc	r17, r1
    153c:	09 f0       	breq	.+2      	; 0x1540 <Isb_App_Exec+0x392>
    153e:	63 ce       	rjmp	.-826    	; 0x1206 <Isb_App_Exec+0x58>
							Isb_Obj_1Bit[Obj_1Bit_3].Value = Value;
							Isb_Obj_1Bit[Obj_1Bit_3].IsChanged = TRUE;
						}
					}
				}
				Isb_App_DigOut_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    1540:	80 91 9a 00 	lds	r24, 0x009A
    1544:	8e 7f       	andi	r24, 0xFE	; 254
    1546:	80 93 9a 00 	sts	0x009A, r24
			}
		#endif /* ISB_APP_DIGOUT_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			if (bit_is_set(Isb_App_DigIn_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
    154a:	80 91 9f 00 	lds	r24, 0x009F
    154e:	80 ff       	sbrs	r24, 0
    1550:	45 c3       	rjmp	.+1674   	; 0x1bdc <Isb_App_Exec+0xa2e>
    1552:	cb ea       	ldi	r28, 0xAB	; 171
    1554:	d0 e0       	ldi	r29, 0x00	; 0
    1556:	00 e0       	ldi	r16, 0x00	; 0
    1558:	10 e0       	ldi	r17, 0x00	; 0
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    155a:	71 e0       	ldi	r23, 0x01	; 1
								if (Isb_App_DigIn[AppIndex].CountHigh == 40) {
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHLONG);
								}
								// Event "High Repeat"
								if (Isb_App_DigIn[AppIndex].CountHigh == 100) {
									Isb_App_DigIn[AppIndex].CountHigh = 90;
    155c:	ba e5       	ldi	r27, 0x5A	; 90
    155e:	eb 2e       	mov	r14, r27
		#endif /* ISB_APP_DIGOUT_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			if (bit_is_set(Isb_App_DigIn_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++) {
					uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigIn_Ch_Array[AppIndex]);
    1560:	f8 01       	movw	r30, r16
    1562:	ec 57       	subi	r30, 0x7C	; 124
    1564:	fe 4f       	sbci	r31, 0xFE	; 254
    1566:	e4 91       	lpm	r30, Z+
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	ee 0f       	add	r30, r30
    156c:	ff 1f       	adc	r31, r31
    156e:	ec 5a       	subi	r30, 0xAC	; 172
    1570:	fc 4f       	sbci	r31, 0xFC	; 252
    1572:	80 81       	ld	r24, Z
    1574:	80 ff       	sbrs	r24, 0
    1576:	26 c3       	rjmp	.+1612   	; 0x1bc4 <Isb_App_Exec+0xa16>
						uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigIn_Pin0_Array[AppIndex]);
    1578:	f8 01       	movw	r30, r16
    157a:	e4 57       	subi	r30, 0x74	; 116
    157c:	fe 4f       	sbci	r31, 0xFE	; 254
    157e:	24 91       	lpm	r18, Z+
//						uint8_t Obj_1Bit_0 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_1Bit_0_Array[AppIndex]);
						uint8_t Obj_1Bit_1 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_1Bit_1_Array[AppIndex]);
    1580:	f8 01       	movw	r30, r16
    1582:	ec 56       	subi	r30, 0x6C	; 108
    1584:	fe 4f       	sbci	r31, 0xFE	; 254
    1586:	64 91       	lpm	r22, Z+
						uint8_t Obj_1Bit_2 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_1Bit_2_Array[AppIndex]);
    1588:	f8 01       	movw	r30, r16
    158a:	e4 56       	subi	r30, 0x64	; 100
    158c:	fe 4f       	sbci	r31, 0xFE	; 254
    158e:	f4 90       	lpm	r15, Z+
//						if (Isb_Obj_1Bit[Obj_1Bit_0].Value == 0) {



// Pin einlesen
							switch (Isb_App_DigIn[AppIndex].Cfg0 & ISB_APP_DIGIN_CFG0_MODE_MASK) {
    1590:	88 81       	ld	r24, Y
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	83 70       	andi	r24, 0x03	; 3
    1596:	90 70       	andi	r25, 0x00	; 0
    1598:	81 30       	cpi	r24, 0x01	; 1
    159a:	91 05       	cpc	r25, r1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <Isb_App_Exec+0x3f2>
    159e:	44 c0       	rjmp	.+136    	; 0x1628 <Isb_App_Exec+0x47a>
    15a0:	82 30       	cpi	r24, 0x02	; 2
    15a2:	91 05       	cpc	r25, r1
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <Isb_App_Exec+0x3fa>
    15a6:	40 c0       	rjmp	.+128    	; 0x1628 <Isb_App_Exec+0x47a>
    15a8:	89 2b       	or	r24, r25
    15aa:	09 f0       	breq	.+2      	; 0x15ae <Isb_App_Exec+0x400>
    15ac:	3e c0       	rjmp	.+124    	; 0x162a <Isb_App_Exec+0x47c>
								case ISB_APP_DIGIN_CFG0_MODE_STD:
									;
									uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
    15ae:	82 2f       	mov	r24, r18
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	88 73       	andi	r24, 0x38	; 56
    15b4:	90 70       	andi	r25, 0x00	; 0
    15b6:	e3 e0       	ldi	r30, 0x03	; 3
    15b8:	95 95       	asr	r25
    15ba:	87 95       	ror	r24
    15bc:	ea 95       	dec	r30
    15be:	e1 f7       	brne	.-8      	; 0x15b8 <Isb_App_Exec+0x40a>
    15c0:	98 2f       	mov	r25, r24
									uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
									if (Port != 0) {
    15c2:	88 23       	and	r24, r24
    15c4:	91 f1       	breq	.+100    	; 0x162a <Isb_App_Exec+0x47c>
// Pin einlesen
							switch (Isb_App_DigIn[AppIndex].Cfg0 & ISB_APP_DIGIN_CFG0_MODE_MASK) {
								case ISB_APP_DIGIN_CFG0_MODE_STD:
									;
									uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
									uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
    15c6:	27 70       	andi	r18, 0x07	; 7
									if (Port != 0) {
										if (bit_is_clear(Isb_App_DigIn[AppIndex].Cfg0, ISB_APP_DIGIN_CFG0_PIN0_INVERTED)) {
    15c8:	f8 01       	movw	r30, r16
    15ca:	53 e0       	ldi	r21, 0x03	; 3
    15cc:	ee 0f       	add	r30, r30
    15ce:	ff 1f       	adc	r31, r31
    15d0:	5a 95       	dec	r21
    15d2:	e1 f7       	brne	.-8      	; 0x15cc <Isb_App_Exec+0x41e>
    15d4:	e5 55       	subi	r30, 0x55	; 85
    15d6:	ff 4f       	sbci	r31, 0xFF	; 255
    15d8:	80 81       	ld	r24, Z
    15da:	e9 2f       	mov	r30, r25
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	82 fd       	sbrc	r24, 2
    15e0:	11 c0       	rjmp	.+34     	; 0x1604 <Isb_App_Exec+0x456>
	#endif



	uint8_t Lib_Pin_Get(const uint8_t aPort, const uint8_t aPin) {
		return (*(PINx[aPort]) >> aPin) & 1;
    15e2:	ee 0f       	add	r30, r30
    15e4:	ff 1f       	adc	r31, r31
    15e6:	ec 57       	subi	r30, 0x7C	; 124
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	01 90       	ld	r0, Z+
    15ec:	f0 81       	ld	r31, Z
    15ee:	e0 2d       	mov	r30, r0
    15f0:	80 81       	ld	r24, Z
											if (Lib_Pin_Get(Port, Pin) != 0) {
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <Isb_App_Exec+0x44c>
    15f6:	95 95       	asr	r25
    15f8:	87 95       	ror	r24
    15fa:	2a 95       	dec	r18
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <Isb_App_Exec+0x448>
    15fe:	80 ff       	sbrs	r24, 0
    1600:	13 c0       	rjmp	.+38     	; 0x1628 <Isb_App_Exec+0x47a>
    1602:	10 c0       	rjmp	.+32     	; 0x1624 <Isb_App_Exec+0x476>
    1604:	ee 0f       	add	r30, r30
    1606:	ff 1f       	adc	r31, r31
    1608:	ec 57       	subi	r30, 0x7C	; 124
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	01 90       	ld	r0, Z+
    160e:	f0 81       	ld	r31, Z
    1610:	e0 2d       	mov	r30, r0
    1612:	80 81       	ld	r24, Z
											else {
												Isb_App_DigIn[AppIndex].Value = 0;
											}
										}
										else {
											if (Lib_Pin_Get(Port, Pin) != 0) {
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 c0       	rjmp	.+4      	; 0x161c <Isb_App_Exec+0x46e>
    1618:	95 95       	asr	r25
    161a:	87 95       	ror	r24
    161c:	2a 95       	dec	r18
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <Isb_App_Exec+0x46a>
    1620:	80 fd       	sbrc	r24, 0
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <Isb_App_Exec+0x47a>
												Isb_App_DigIn[AppIndex].Value = 0;
											}
											else {
												Isb_App_DigIn[AppIndex].Value = 1;
    1624:	7c 83       	std	Y+4, r23	; 0x04
    1626:	01 c0       	rjmp	.+2      	; 0x162a <Isb_App_Exec+0x47c>
									Isb_App_DigIn[AppIndex].Value = 0;
// <- TODO:
									break;
								case ISB_APP_DIGIN_CFG0_MODE_SLAVEUSART1:
// -> TODO:
									Isb_App_DigIn[AppIndex].Value = 0;
    1628:	1c 82       	std	Y+4, r1	; 0x04
							}



// Pin auswerten
							if (Isb_App_DigIn[AppIndex].Value != 0) {
    162a:	8c 81       	ldd	r24, Y+4	; 0x04
    162c:	88 23       	and	r24, r24
    162e:	b9 f0       	breq	.+46     	; 0x165e <Isb_App_Exec+0x4b0>
								// Global
								Isb_App_DigIn[AppIndex].CountHigh++;
    1630:	8f 81       	ldd	r24, Y+7	; 0x07
    1632:	8f 5f       	subi	r24, 0xFF	; 255
    1634:	8f 83       	std	Y+7, r24	; 0x07
								// Event "High" > 40ms
								if (Isb_App_DigIn[AppIndex].CountHigh == 4) {
    1636:	84 30       	cpi	r24, 0x04	; 4
    1638:	19 f4       	brne	.+6      	; 0x1640 <Isb_App_Exec+0x492>
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGH);
    163a:	8d 81       	ldd	r24, Y+5	; 0x05
    163c:	80 61       	ori	r24, 0x10	; 16
    163e:	8d 83       	std	Y+5, r24	; 0x05
								}
								// Event "High Long" > 400ms
								if (Isb_App_DigIn[AppIndex].CountHigh == 40) {
    1640:	8f 81       	ldd	r24, Y+7	; 0x07
    1642:	88 32       	cpi	r24, 0x28	; 40
    1644:	19 f4       	brne	.+6      	; 0x164c <Isb_App_Exec+0x49e>
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHLONG);
    1646:	8d 81       	ldd	r24, Y+5	; 0x05
    1648:	80 64       	ori	r24, 0x40	; 64
    164a:	8d 83       	std	Y+5, r24	; 0x05
								}
								// Event "High Repeat"
								if (Isb_App_DigIn[AppIndex].CountHigh == 100) {
    164c:	8f 81       	ldd	r24, Y+7	; 0x07
    164e:	84 36       	cpi	r24, 0x64	; 100
    1650:	21 f4       	brne	.+8      	; 0x165a <Isb_App_Exec+0x4ac>
									Isb_App_DigIn[AppIndex].CountHigh = 90;
    1652:	ef 82       	std	Y+7, r14	; 0x07
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHREPEAT);
    1654:	8d 81       	ldd	r24, Y+5	; 0x05
    1656:	80 68       	ori	r24, 0x80	; 128
    1658:	8d 83       	std	Y+5, r24	; 0x05
//									if (Isb_App_DigIn[AppIndex].CountLow < 40) {
//										Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOWSHORT);
//									}
//								}
								// Global
								Isb_App_DigIn[AppIndex].CountLow = 0;
    165a:	1e 82       	std	Y+6, r1	; 0x06
    165c:	11 c0       	rjmp	.+34     	; 0x1680 <Isb_App_Exec+0x4d2>
							}
							else {
								// Global
								Isb_App_DigIn[AppIndex].CountLow++;
    165e:	8e 81       	ldd	r24, Y+6	; 0x06
    1660:	8f 5f       	subi	r24, 0xFF	; 255
    1662:	8e 83       	std	Y+6, r24	; 0x06
								// Event "Low" > 40ms
								if (Isb_App_DigIn[AppIndex].CountLow == 4) {
    1664:	84 30       	cpi	r24, 0x04	; 4
    1666:	19 f4       	brne	.+6      	; 0x166e <Isb_App_Exec+0x4c0>
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOW);
    1668:	8d 81       	ldd	r24, Y+5	; 0x05
    166a:	81 60       	ori	r24, 0x01	; 1
    166c:	8d 83       	std	Y+5, r24	; 0x05
//								if (Isb_App_DigIn[AppIndex].CountLow == 100) {
//									Isb_App_DigIn[AppIndex].CountLow = 90;
//									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOWREPEAT);
//								}
								// Event "High Short" = 40-400ms
								if (Isb_App_DigIn[AppIndex].CountHigh != 0) {
    166e:	8f 81       	ldd	r24, Y+7	; 0x07
    1670:	88 23       	and	r24, r24
    1672:	29 f0       	breq	.+10     	; 0x167e <Isb_App_Exec+0x4d0>
									if (Isb_App_DigIn[AppIndex].CountHigh < 40) {
    1674:	88 32       	cpi	r24, 0x28	; 40
    1676:	18 f4       	brcc	.+6      	; 0x167e <Isb_App_Exec+0x4d0>
										Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHSHORT);
    1678:	8d 81       	ldd	r24, Y+5	; 0x05
    167a:	80 62       	ori	r24, 0x20	; 32
    167c:	8d 83       	std	Y+5, r24	; 0x05
									}
								}
								// Global
								Isb_App_DigIn[AppIndex].CountHigh = 0;
    167e:	1f 82       	std	Y+7, r1	; 0x07
							}



// Event auswerten
							switch (Isb_App_DigIn[AppIndex].Cfg1 & ISB_APP_DIGIN_CFG1_MODE_MASK) {
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	c9 01       	movw	r24, r18
    1688:	87 70       	andi	r24, 0x07	; 7
    168a:	90 70       	andi	r25, 0x00	; 0
    168c:	89 2b       	or	r24, r25
    168e:	09 f0       	breq	.+2      	; 0x1692 <Isb_App_Exec+0x4e4>
    1690:	99 c2       	rjmp	.+1330   	; 0x1bc4 <Isb_App_Exec+0xa16>
								case ISB_APP_DIGIN_CFG1_MODE_SWITCH:
									// Betriebsart = Schaltsensor/Störmeldeeingang
									switch (Isb_App_DigIn[AppIndex].Cfg1 & ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_MASK) {
    1692:	c9 01       	movw	r24, r18
    1694:	88 73       	andi	r24, 0x38	; 56
    1696:	90 70       	andi	r25, 0x00	; 0
    1698:	88 30       	cpi	r24, 0x08	; 8
    169a:	91 05       	cpc	r25, r1
    169c:	09 f4       	brne	.+2      	; 0x16a0 <Isb_App_Exec+0x4f2>
    169e:	aa c0       	rjmp	.+340    	; 0x17f4 <Isb_App_Exec+0x646>
    16a0:	89 30       	cpi	r24, 0x09	; 9
    16a2:	91 05       	cpc	r25, r1
    16a4:	1c f4       	brge	.+6      	; 0x16ac <Isb_App_Exec+0x4fe>
    16a6:	89 2b       	or	r24, r25
    16a8:	49 f0       	breq	.+18     	; 0x16bc <Isb_App_Exec+0x50e>
    16aa:	8c c2       	rjmp	.+1304   	; 0x1bc4 <Isb_App_Exec+0xa16>
    16ac:	80 31       	cpi	r24, 0x10	; 16
    16ae:	91 05       	cpc	r25, r1
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <Isb_App_Exec+0x506>
    16b2:	3c c1       	rjmp	.+632    	; 0x192c <Isb_App_Exec+0x77e>
    16b4:	48 97       	sbiw	r24, 0x18	; 24
    16b6:	09 f0       	breq	.+2      	; 0x16ba <Isb_App_Exec+0x50c>
    16b8:	85 c2       	rjmp	.+1290   	; 0x1bc4 <Isb_App_Exec+0xa16>
    16ba:	d4 c1       	rjmp	.+936    	; 0x1a64 <Isb_App_Exec+0x8b6>
										case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_0:
											// 1 Schaltobjekt - Ohne Unterscheidung Kurz/Lang - Ohne Repeat 
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGH)) {
    16bc:	a8 01       	movw	r20, r16
    16be:	23 e0       	ldi	r18, 0x03	; 3
    16c0:	44 0f       	add	r20, r20
    16c2:	55 1f       	adc	r21, r21
    16c4:	2a 95       	dec	r18
    16c6:	e1 f7       	brne	.-8      	; 0x16c0 <Isb_App_Exec+0x512>
    16c8:	40 55       	subi	r20, 0x50	; 80
    16ca:	5f 4f       	sbci	r21, 0xFF	; 255
    16cc:	fa 01       	movw	r30, r20
    16ce:	80 81       	ld	r24, Z
    16d0:	84 ff       	sbrs	r24, 4
    16d2:	46 c0       	rjmp	.+140    	; 0x1760 <Isb_App_Exec+0x5b2>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1) {
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	8f 70       	andi	r24, 0x0F	; 15
    16da:	90 70       	andi	r25, 0x00	; 0
    16dc:	81 30       	cpi	r24, 0x01	; 1
    16de:	91 05       	cpc	r25, r1
    16e0:	71 f4       	brne	.+28     	; 0x16fe <Isb_App_Exec+0x550>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    16e2:	a6 2f       	mov	r26, r22
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	fd 01       	movw	r30, r26
    16e8:	ee 0f       	add	r30, r30
    16ea:	ff 1f       	adc	r31, r31
    16ec:	ee 0f       	add	r30, r30
    16ee:	ff 1f       	adc	r31, r31
    16f0:	ea 55       	subi	r30, 0x5A	; 90
    16f2:	fe 4f       	sbci	r31, 0xFE	; 254
    16f4:	80 81       	ld	r24, Z
    16f6:	88 23       	and	r24, r24
    16f8:	81 f1       	breq	.+96     	; 0x175a <Isb_App_Exec+0x5ac>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    16fa:	10 82       	st	Z, r1
    16fc:	10 c0       	rjmp	.+32     	; 0x171e <Isb_App_Exec+0x570>
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2) {
    16fe:	82 30       	cpi	r24, 0x02	; 2
    1700:	91 05       	cpc	r25, r1
    1702:	b1 f4       	brne	.+44     	; 0x1730 <Isb_App_Exec+0x582>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    1704:	a6 2f       	mov	r26, r22
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	fd 01       	movw	r30, r26
    170a:	ee 0f       	add	r30, r30
    170c:	ff 1f       	adc	r31, r31
    170e:	ee 0f       	add	r30, r30
    1710:	ff 1f       	adc	r31, r31
    1712:	ea 55       	subi	r30, 0x5A	; 90
    1714:	fe 4f       	sbci	r31, 0xFE	; 254
    1716:	80 81       	ld	r24, Z
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	f9 f0       	breq	.+62     	; 0x175a <Isb_App_Exec+0x5ac>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    171c:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    171e:	aa 0f       	add	r26, r26
    1720:	bb 1f       	adc	r27, r27
    1722:	aa 0f       	add	r26, r26
    1724:	bb 1f       	adc	r27, r27
    1726:	ac 55       	subi	r26, 0x5C	; 92
    1728:	be 4f       	sbci	r27, 0xFE	; 254
    172a:	13 96       	adiw	r26, 0x03	; 3
    172c:	7c 93       	st	X, r23
    172e:	15 c0       	rjmp	.+42     	; 0x175a <Isb_App_Exec+0x5ac>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3) {
    1730:	03 97       	sbiw	r24, 0x03	; 3
    1732:	99 f4       	brne	.+38     	; 0x175a <Isb_App_Exec+0x5ac>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    1734:	86 2f       	mov	r24, r22
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	dc 01       	movw	r26, r24
    1742:	aa 55       	subi	r26, 0x5A	; 90
    1744:	be 4f       	sbci	r27, 0xFE	; 254
    1746:	2c 91       	ld	r18, X
    1748:	fc 01       	movw	r30, r24
    174a:	22 23       	and	r18, r18
    174c:	11 f4       	brne	.+4      	; 0x1752 <Isb_App_Exec+0x5a4>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    174e:	7c 93       	st	X, r23
    1750:	01 c0       	rjmp	.+2      	; 0x1754 <Isb_App_Exec+0x5a6>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    1752:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1754:	ec 55       	subi	r30, 0x5C	; 92
    1756:	fe 4f       	sbci	r31, 0xFE	; 254
    1758:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGH);
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	8f 7e       	andi	r24, 0xEF	; 239
    175e:	8d 83       	std	Y+5, r24	; 0x05
											}
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_LOW)) {
    1760:	fa 01       	movw	r30, r20
    1762:	80 81       	ld	r24, Z
    1764:	80 ff       	sbrs	r24, 0
    1766:	2e c2       	rjmp	.+1116   	; 0x1bc4 <Isb_App_Exec+0xa16>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1) {
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	80 7f       	andi	r24, 0xF0	; 240
    176e:	90 70       	andi	r25, 0x00	; 0
    1770:	80 31       	cpi	r24, 0x10	; 16
    1772:	91 05       	cpc	r25, r1
    1774:	71 f4       	brne	.+28     	; 0x1792 <Isb_App_Exec+0x5e4>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    1776:	a6 2f       	mov	r26, r22
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	fd 01       	movw	r30, r26
    177c:	ee 0f       	add	r30, r30
    177e:	ff 1f       	adc	r31, r31
    1780:	ee 0f       	add	r30, r30
    1782:	ff 1f       	adc	r31, r31
    1784:	ea 55       	subi	r30, 0x5A	; 90
    1786:	fe 4f       	sbci	r31, 0xFE	; 254
    1788:	80 81       	ld	r24, Z
    178a:	88 23       	and	r24, r24
    178c:	81 f1       	breq	.+96     	; 0x17ee <Isb_App_Exec+0x640>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    178e:	10 82       	st	Z, r1
    1790:	10 c0       	rjmp	.+32     	; 0x17b2 <Isb_App_Exec+0x604>
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2) {
    1792:	80 32       	cpi	r24, 0x20	; 32
    1794:	91 05       	cpc	r25, r1
    1796:	b1 f4       	brne	.+44     	; 0x17c4 <Isb_App_Exec+0x616>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    1798:	a6 2f       	mov	r26, r22
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	fd 01       	movw	r30, r26
    179e:	ee 0f       	add	r30, r30
    17a0:	ff 1f       	adc	r31, r31
    17a2:	ee 0f       	add	r30, r30
    17a4:	ff 1f       	adc	r31, r31
    17a6:	ea 55       	subi	r30, 0x5A	; 90
    17a8:	fe 4f       	sbci	r31, 0xFE	; 254
    17aa:	80 81       	ld	r24, Z
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	f9 f0       	breq	.+62     	; 0x17ee <Isb_App_Exec+0x640>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    17b0:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    17b2:	aa 0f       	add	r26, r26
    17b4:	bb 1f       	adc	r27, r27
    17b6:	aa 0f       	add	r26, r26
    17b8:	bb 1f       	adc	r27, r27
    17ba:	ac 55       	subi	r26, 0x5C	; 92
    17bc:	be 4f       	sbci	r27, 0xFE	; 254
    17be:	13 96       	adiw	r26, 0x03	; 3
    17c0:	7c 93       	st	X, r23
    17c2:	15 c0       	rjmp	.+42     	; 0x17ee <Isb_App_Exec+0x640>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3) {
    17c4:	c0 97       	sbiw	r24, 0x30	; 48
    17c6:	99 f4       	brne	.+38     	; 0x17ee <Isb_App_Exec+0x640>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    17c8:	86 2f       	mov	r24, r22
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	88 0f       	add	r24, r24
    17d2:	99 1f       	adc	r25, r25
    17d4:	dc 01       	movw	r26, r24
    17d6:	aa 55       	subi	r26, 0x5A	; 90
    17d8:	be 4f       	sbci	r27, 0xFE	; 254
    17da:	2c 91       	ld	r18, X
    17dc:	fc 01       	movw	r30, r24
    17de:	22 23       	and	r18, r18
    17e0:	11 f4       	brne	.+4      	; 0x17e6 <Isb_App_Exec+0x638>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    17e2:	7c 93       	st	X, r23
    17e4:	01 c0       	rjmp	.+2      	; 0x17e8 <Isb_App_Exec+0x63a>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    17e6:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    17e8:	ec 55       	subi	r30, 0x5C	; 92
    17ea:	fe 4f       	sbci	r31, 0xFE	; 254
    17ec:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_LOW);
    17ee:	8d 81       	ldd	r24, Y+5	; 0x05
    17f0:	8e 7f       	andi	r24, 0xFE	; 254
    17f2:	e7 c1       	rjmp	.+974    	; 0x1bc2 <Isb_App_Exec+0xa14>
											}
											break;
										case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_1:
											// 1 Schaltobjekt - Ohne Unterscheidung Kurz/Lang - Mit Repeat 
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGH)) {
    17f4:	a8 01       	movw	r20, r16
    17f6:	23 e0       	ldi	r18, 0x03	; 3
    17f8:	44 0f       	add	r20, r20
    17fa:	55 1f       	adc	r21, r21
    17fc:	2a 95       	dec	r18
    17fe:	e1 f7       	brne	.-8      	; 0x17f8 <Isb_App_Exec+0x64a>
    1800:	40 55       	subi	r20, 0x50	; 80
    1802:	5f 4f       	sbci	r21, 0xFF	; 255
    1804:	fa 01       	movw	r30, r20
    1806:	80 81       	ld	r24, Z
    1808:	84 ff       	sbrs	r24, 4
    180a:	46 c0       	rjmp	.+140    	; 0x1898 <Isb_App_Exec+0x6ea>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1) {
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	8f 70       	andi	r24, 0x0F	; 15
    1812:	90 70       	andi	r25, 0x00	; 0
    1814:	81 30       	cpi	r24, 0x01	; 1
    1816:	91 05       	cpc	r25, r1
    1818:	71 f4       	brne	.+28     	; 0x1836 <Isb_App_Exec+0x688>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    181a:	a6 2f       	mov	r26, r22
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	fd 01       	movw	r30, r26
    1820:	ee 0f       	add	r30, r30
    1822:	ff 1f       	adc	r31, r31
    1824:	ee 0f       	add	r30, r30
    1826:	ff 1f       	adc	r31, r31
    1828:	ea 55       	subi	r30, 0x5A	; 90
    182a:	fe 4f       	sbci	r31, 0xFE	; 254
    182c:	80 81       	ld	r24, Z
    182e:	88 23       	and	r24, r24
    1830:	81 f1       	breq	.+96     	; 0x1892 <Isb_App_Exec+0x6e4>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    1832:	10 82       	st	Z, r1
    1834:	10 c0       	rjmp	.+32     	; 0x1856 <Isb_App_Exec+0x6a8>
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2) {
    1836:	82 30       	cpi	r24, 0x02	; 2
    1838:	91 05       	cpc	r25, r1
    183a:	b1 f4       	brne	.+44     	; 0x1868 <Isb_App_Exec+0x6ba>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    183c:	a6 2f       	mov	r26, r22
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	fd 01       	movw	r30, r26
    1842:	ee 0f       	add	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	ee 0f       	add	r30, r30
    1848:	ff 1f       	adc	r31, r31
    184a:	ea 55       	subi	r30, 0x5A	; 90
    184c:	fe 4f       	sbci	r31, 0xFE	; 254
    184e:	80 81       	ld	r24, Z
    1850:	81 30       	cpi	r24, 0x01	; 1
    1852:	f9 f0       	breq	.+62     	; 0x1892 <Isb_App_Exec+0x6e4>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1854:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1856:	aa 0f       	add	r26, r26
    1858:	bb 1f       	adc	r27, r27
    185a:	aa 0f       	add	r26, r26
    185c:	bb 1f       	adc	r27, r27
    185e:	ac 55       	subi	r26, 0x5C	; 92
    1860:	be 4f       	sbci	r27, 0xFE	; 254
    1862:	13 96       	adiw	r26, 0x03	; 3
    1864:	7c 93       	st	X, r23
    1866:	15 c0       	rjmp	.+42     	; 0x1892 <Isb_App_Exec+0x6e4>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3) {
    1868:	03 97       	sbiw	r24, 0x03	; 3
    186a:	99 f4       	brne	.+38     	; 0x1892 <Isb_App_Exec+0x6e4>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    186c:	86 2f       	mov	r24, r22
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	dc 01       	movw	r26, r24
    187a:	aa 55       	subi	r26, 0x5A	; 90
    187c:	be 4f       	sbci	r27, 0xFE	; 254
    187e:	2c 91       	ld	r18, X
    1880:	fc 01       	movw	r30, r24
    1882:	22 23       	and	r18, r18
    1884:	11 f4       	brne	.+4      	; 0x188a <Isb_App_Exec+0x6dc>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1886:	7c 93       	st	X, r23
    1888:	01 c0       	rjmp	.+2      	; 0x188c <Isb_App_Exec+0x6de>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    188a:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    188c:	ec 55       	subi	r30, 0x5C	; 92
    188e:	fe 4f       	sbci	r31, 0xFE	; 254
    1890:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGH);
    1892:	8d 81       	ldd	r24, Y+5	; 0x05
    1894:	8f 7e       	andi	r24, 0xEF	; 239
    1896:	8d 83       	std	Y+5, r24	; 0x05
											}
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_LOW)) {
    1898:	fa 01       	movw	r30, r20
    189a:	80 81       	ld	r24, Z
    189c:	80 ff       	sbrs	r24, 0
    189e:	8b c1       	rjmp	.+790    	; 0x1bb6 <Isb_App_Exec+0xa08>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1) {
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	80 7f       	andi	r24, 0xF0	; 240
    18a6:	90 70       	andi	r25, 0x00	; 0
    18a8:	80 31       	cpi	r24, 0x10	; 16
    18aa:	91 05       	cpc	r25, r1
    18ac:	71 f4       	brne	.+28     	; 0x18ca <Isb_App_Exec+0x71c>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    18ae:	a6 2f       	mov	r26, r22
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	fd 01       	movw	r30, r26
    18b4:	ee 0f       	add	r30, r30
    18b6:	ff 1f       	adc	r31, r31
    18b8:	ee 0f       	add	r30, r30
    18ba:	ff 1f       	adc	r31, r31
    18bc:	ea 55       	subi	r30, 0x5A	; 90
    18be:	fe 4f       	sbci	r31, 0xFE	; 254
    18c0:	80 81       	ld	r24, Z
    18c2:	88 23       	and	r24, r24
    18c4:	81 f1       	breq	.+96     	; 0x1926 <Isb_App_Exec+0x778>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    18c6:	10 82       	st	Z, r1
    18c8:	10 c0       	rjmp	.+32     	; 0x18ea <Isb_App_Exec+0x73c>
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2) {
    18ca:	80 32       	cpi	r24, 0x20	; 32
    18cc:	91 05       	cpc	r25, r1
    18ce:	b1 f4       	brne	.+44     	; 0x18fc <Isb_App_Exec+0x74e>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    18d0:	a6 2f       	mov	r26, r22
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	fd 01       	movw	r30, r26
    18d6:	ee 0f       	add	r30, r30
    18d8:	ff 1f       	adc	r31, r31
    18da:	ee 0f       	add	r30, r30
    18dc:	ff 1f       	adc	r31, r31
    18de:	ea 55       	subi	r30, 0x5A	; 90
    18e0:	fe 4f       	sbci	r31, 0xFE	; 254
    18e2:	80 81       	ld	r24, Z
    18e4:	81 30       	cpi	r24, 0x01	; 1
    18e6:	f9 f0       	breq	.+62     	; 0x1926 <Isb_App_Exec+0x778>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    18e8:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    18ea:	aa 0f       	add	r26, r26
    18ec:	bb 1f       	adc	r27, r27
    18ee:	aa 0f       	add	r26, r26
    18f0:	bb 1f       	adc	r27, r27
    18f2:	ac 55       	subi	r26, 0x5C	; 92
    18f4:	be 4f       	sbci	r27, 0xFE	; 254
    18f6:	13 96       	adiw	r26, 0x03	; 3
    18f8:	7c 93       	st	X, r23
    18fa:	15 c0       	rjmp	.+42     	; 0x1926 <Isb_App_Exec+0x778>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3) {
    18fc:	c0 97       	sbiw	r24, 0x30	; 48
    18fe:	99 f4       	brne	.+38     	; 0x1926 <Isb_App_Exec+0x778>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    1900:	86 2f       	mov	r24, r22
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	dc 01       	movw	r26, r24
    190e:	aa 55       	subi	r26, 0x5A	; 90
    1910:	be 4f       	sbci	r27, 0xFE	; 254
    1912:	2c 91       	ld	r18, X
    1914:	fc 01       	movw	r30, r24
    1916:	22 23       	and	r18, r18
    1918:	11 f4       	brne	.+4      	; 0x191e <Isb_App_Exec+0x770>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    191a:	7c 93       	st	X, r23
    191c:	01 c0       	rjmp	.+2      	; 0x1920 <Isb_App_Exec+0x772>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    191e:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1920:	ec 55       	subi	r30, 0x5C	; 92
    1922:	fe 4f       	sbci	r31, 0xFE	; 254
    1924:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_LOW);
    1926:	8d 81       	ldd	r24, Y+5	; 0x05
    1928:	8e 7f       	andi	r24, 0xFE	; 254
    192a:	44 c1       	rjmp	.+648    	; 0x1bb4 <Isb_App_Exec+0xa06>
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHREPEAT);
											}
											break;
										case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_2:
											// 2 Schaltobjekte - Mit Unterscheidung Kurz/Lang - Ohne Repeat 
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHSHORT)) {
    192c:	a8 01       	movw	r20, r16
    192e:	93 e0       	ldi	r25, 0x03	; 3
    1930:	44 0f       	add	r20, r20
    1932:	55 1f       	adc	r21, r21
    1934:	9a 95       	dec	r25
    1936:	e1 f7       	brne	.-8      	; 0x1930 <Isb_App_Exec+0x782>
    1938:	40 55       	subi	r20, 0x50	; 80
    193a:	5f 4f       	sbci	r21, 0xFF	; 255
    193c:	fa 01       	movw	r30, r20
    193e:	80 81       	ld	r24, Z
    1940:	85 ff       	sbrs	r24, 5
    1942:	46 c0       	rjmp	.+140    	; 0x19d0 <Isb_App_Exec+0x822>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1) {
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	8f 70       	andi	r24, 0x0F	; 15
    194a:	90 70       	andi	r25, 0x00	; 0
    194c:	81 30       	cpi	r24, 0x01	; 1
    194e:	91 05       	cpc	r25, r1
    1950:	71 f4       	brne	.+28     	; 0x196e <Isb_App_Exec+0x7c0>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    1952:	a6 2f       	mov	r26, r22
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	fd 01       	movw	r30, r26
    1958:	ee 0f       	add	r30, r30
    195a:	ff 1f       	adc	r31, r31
    195c:	ee 0f       	add	r30, r30
    195e:	ff 1f       	adc	r31, r31
    1960:	ea 55       	subi	r30, 0x5A	; 90
    1962:	fe 4f       	sbci	r31, 0xFE	; 254
    1964:	80 81       	ld	r24, Z
    1966:	88 23       	and	r24, r24
    1968:	81 f1       	breq	.+96     	; 0x19ca <Isb_App_Exec+0x81c>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    196a:	10 82       	st	Z, r1
    196c:	10 c0       	rjmp	.+32     	; 0x198e <Isb_App_Exec+0x7e0>
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2) {
    196e:	82 30       	cpi	r24, 0x02	; 2
    1970:	91 05       	cpc	r25, r1
    1972:	b1 f4       	brne	.+44     	; 0x19a0 <Isb_App_Exec+0x7f2>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    1974:	a6 2f       	mov	r26, r22
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	fd 01       	movw	r30, r26
    197a:	ee 0f       	add	r30, r30
    197c:	ff 1f       	adc	r31, r31
    197e:	ee 0f       	add	r30, r30
    1980:	ff 1f       	adc	r31, r31
    1982:	ea 55       	subi	r30, 0x5A	; 90
    1984:	fe 4f       	sbci	r31, 0xFE	; 254
    1986:	80 81       	ld	r24, Z
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	f9 f0       	breq	.+62     	; 0x19ca <Isb_App_Exec+0x81c>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    198c:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    198e:	aa 0f       	add	r26, r26
    1990:	bb 1f       	adc	r27, r27
    1992:	aa 0f       	add	r26, r26
    1994:	bb 1f       	adc	r27, r27
    1996:	ac 55       	subi	r26, 0x5C	; 92
    1998:	be 4f       	sbci	r27, 0xFE	; 254
    199a:	13 96       	adiw	r26, 0x03	; 3
    199c:	7c 93       	st	X, r23
    199e:	15 c0       	rjmp	.+42     	; 0x19ca <Isb_App_Exec+0x81c>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3) {
    19a0:	03 97       	sbiw	r24, 0x03	; 3
    19a2:	99 f4       	brne	.+38     	; 0x19ca <Isb_App_Exec+0x81c>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    19a4:	86 2f       	mov	r24, r22
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	dc 01       	movw	r26, r24
    19b2:	aa 55       	subi	r26, 0x5A	; 90
    19b4:	be 4f       	sbci	r27, 0xFE	; 254
    19b6:	2c 91       	ld	r18, X
    19b8:	fc 01       	movw	r30, r24
    19ba:	22 23       	and	r18, r18
    19bc:	11 f4       	brne	.+4      	; 0x19c2 <Isb_App_Exec+0x814>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    19be:	7c 93       	st	X, r23
    19c0:	01 c0       	rjmp	.+2      	; 0x19c4 <Isb_App_Exec+0x816>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    19c2:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    19c4:	ec 55       	subi	r30, 0x5C	; 92
    19c6:	fe 4f       	sbci	r31, 0xFE	; 254
    19c8:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHSHORT);
    19ca:	8d 81       	ldd	r24, Y+5	; 0x05
    19cc:	8f 7d       	andi	r24, 0xDF	; 223
    19ce:	8d 83       	std	Y+5, r24	; 0x05
											}
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHLONG)) {
    19d0:	fa 01       	movw	r30, r20
    19d2:	80 81       	ld	r24, Z
    19d4:	86 ff       	sbrs	r24, 6
    19d6:	f6 c0       	rjmp	.+492    	; 0x1bc4 <Isb_App_Exec+0xa16>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1) {
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	80 7f       	andi	r24, 0xF0	; 240
    19de:	90 70       	andi	r25, 0x00	; 0
    19e0:	80 31       	cpi	r24, 0x10	; 16
    19e2:	91 05       	cpc	r25, r1
    19e4:	71 f4       	brne	.+28     	; 0x1a02 <Isb_App_Exec+0x854>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 0) {
    19e6:	af 2d       	mov	r26, r15
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	fd 01       	movw	r30, r26
    19ec:	ee 0f       	add	r30, r30
    19ee:	ff 1f       	adc	r31, r31
    19f0:	ee 0f       	add	r30, r30
    19f2:	ff 1f       	adc	r31, r31
    19f4:	ea 55       	subi	r30, 0x5A	; 90
    19f6:	fe 4f       	sbci	r31, 0xFE	; 254
    19f8:	80 81       	ld	r24, Z
    19fa:	88 23       	and	r24, r24
    19fc:	81 f1       	breq	.+96     	; 0x1a5e <Isb_App_Exec+0x8b0>
														Isb_Obj_1Bit[Obj_1Bit_2].Value = 0;
    19fe:	10 82       	st	Z, r1
    1a00:	10 c0       	rjmp	.+32     	; 0x1a22 <Isb_App_Exec+0x874>
														Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2) {
    1a02:	80 32       	cpi	r24, 0x20	; 32
    1a04:	91 05       	cpc	r25, r1
    1a06:	b1 f4       	brne	.+44     	; 0x1a34 <Isb_App_Exec+0x886>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 1) {
    1a08:	af 2d       	mov	r26, r15
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	fd 01       	movw	r30, r26
    1a0e:	ee 0f       	add	r30, r30
    1a10:	ff 1f       	adc	r31, r31
    1a12:	ee 0f       	add	r30, r30
    1a14:	ff 1f       	adc	r31, r31
    1a16:	ea 55       	subi	r30, 0x5A	; 90
    1a18:	fe 4f       	sbci	r31, 0xFE	; 254
    1a1a:	80 81       	ld	r24, Z
    1a1c:	81 30       	cpi	r24, 0x01	; 1
    1a1e:	f9 f0       	breq	.+62     	; 0x1a5e <Isb_App_Exec+0x8b0>
														Isb_Obj_1Bit[Obj_1Bit_2].Value = 1;
    1a20:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
    1a22:	aa 0f       	add	r26, r26
    1a24:	bb 1f       	adc	r27, r27
    1a26:	aa 0f       	add	r26, r26
    1a28:	bb 1f       	adc	r27, r27
    1a2a:	ac 55       	subi	r26, 0x5C	; 92
    1a2c:	be 4f       	sbci	r27, 0xFE	; 254
    1a2e:	13 96       	adiw	r26, 0x03	; 3
    1a30:	7c 93       	st	X, r23
    1a32:	15 c0       	rjmp	.+42     	; 0x1a5e <Isb_App_Exec+0x8b0>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3) {
    1a34:	c0 97       	sbiw	r24, 0x30	; 48
    1a36:	99 f4       	brne	.+38     	; 0x1a5e <Isb_App_Exec+0x8b0>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value == 0) {
    1a38:	8f 2d       	mov	r24, r15
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	dc 01       	movw	r26, r24
    1a46:	aa 55       	subi	r26, 0x5A	; 90
    1a48:	be 4f       	sbci	r27, 0xFE	; 254
    1a4a:	2c 91       	ld	r18, X
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	22 23       	and	r18, r18
    1a50:	11 f4       	brne	.+4      	; 0x1a56 <Isb_App_Exec+0x8a8>
														if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_2].Value = 1;
    1a52:	7c 93       	st	X, r23
    1a54:	01 c0       	rjmp	.+2      	; 0x1a58 <Isb_App_Exec+0x8aa>
															Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_2].Value = 0;
    1a56:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
    1a58:	ec 55       	subi	r30, 0x5C	; 92
    1a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5c:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHLONG);
    1a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a60:	8f 7b       	andi	r24, 0xBF	; 191
    1a62:	af c0       	rjmp	.+350    	; 0x1bc2 <Isb_App_Exec+0xa14>
											}
											break;
										case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_3:
											// 2 Schaltobjekte - Mit Unterscheidung Kurz/Lang - Mit Repeat 
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHSHORT)) {
    1a64:	a8 01       	movw	r20, r16
    1a66:	23 e0       	ldi	r18, 0x03	; 3
    1a68:	44 0f       	add	r20, r20
    1a6a:	55 1f       	adc	r21, r21
    1a6c:	2a 95       	dec	r18
    1a6e:	e1 f7       	brne	.-8      	; 0x1a68 <Isb_App_Exec+0x8ba>
    1a70:	40 55       	subi	r20, 0x50	; 80
    1a72:	5f 4f       	sbci	r21, 0xFF	; 255
    1a74:	fa 01       	movw	r30, r20
    1a76:	80 81       	ld	r24, Z
    1a78:	85 ff       	sbrs	r24, 5
    1a7a:	53 c0       	rjmp	.+166    	; 0x1b22 <Isb_App_Exec+0x974>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1) {
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	8f 70       	andi	r24, 0x0F	; 15
    1a82:	90 70       	andi	r25, 0x00	; 0
    1a84:	81 30       	cpi	r24, 0x01	; 1
    1a86:	91 05       	cpc	r25, r1
    1a88:	71 f4       	brne	.+28     	; 0x1aa6 <Isb_App_Exec+0x8f8>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    1a8a:	a6 2f       	mov	r26, r22
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	fd 01       	movw	r30, r26
    1a90:	ee 0f       	add	r30, r30
    1a92:	ff 1f       	adc	r31, r31
    1a94:	ee 0f       	add	r30, r30
    1a96:	ff 1f       	adc	r31, r31
    1a98:	ea 55       	subi	r30, 0x5A	; 90
    1a9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a9c:	80 81       	ld	r24, Z
    1a9e:	88 23       	and	r24, r24
    1aa0:	e9 f1       	breq	.+122    	; 0x1b1c <Isb_App_Exec+0x96e>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    1aa2:	10 82       	st	Z, r1
    1aa4:	10 c0       	rjmp	.+32     	; 0x1ac6 <Isb_App_Exec+0x918>
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2) {
    1aa6:	82 30       	cpi	r24, 0x02	; 2
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	b1 f4       	brne	.+44     	; 0x1ad8 <Isb_App_Exec+0x92a>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    1aac:	a6 2f       	mov	r26, r22
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	fd 01       	movw	r30, r26
    1ab2:	ee 0f       	add	r30, r30
    1ab4:	ff 1f       	adc	r31, r31
    1ab6:	ee 0f       	add	r30, r30
    1ab8:	ff 1f       	adc	r31, r31
    1aba:	ea 55       	subi	r30, 0x5A	; 90
    1abc:	fe 4f       	sbci	r31, 0xFE	; 254
    1abe:	80 81       	ld	r24, Z
    1ac0:	81 30       	cpi	r24, 0x01	; 1
    1ac2:	61 f1       	breq	.+88     	; 0x1b1c <Isb_App_Exec+0x96e>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1ac4:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1ac6:	aa 0f       	add	r26, r26
    1ac8:	bb 1f       	adc	r27, r27
    1aca:	aa 0f       	add	r26, r26
    1acc:	bb 1f       	adc	r27, r27
    1ace:	ac 55       	subi	r26, 0x5C	; 92
    1ad0:	be 4f       	sbci	r27, 0xFE	; 254
    1ad2:	13 96       	adiw	r26, 0x03	; 3
    1ad4:	7c 93       	st	X, r23
    1ad6:	22 c0       	rjmp	.+68     	; 0x1b1c <Isb_App_Exec+0x96e>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3) {
    1ad8:	03 97       	sbiw	r24, 0x03	; 3
    1ada:	01 f5       	brne	.+64     	; 0x1b1c <Isb_App_Exec+0x96e>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    1adc:	86 2f       	mov	r24, r22
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	aa 0f       	add	r26, r26
    1ae4:	bb 1f       	adc	r27, r27
    1ae6:	fd 01       	movw	r30, r26
    1ae8:	ee 0f       	add	r30, r30
    1aea:	ff 1f       	adc	r31, r31
    1aec:	ea 55       	subi	r30, 0x5A	; 90
    1aee:	fe 4f       	sbci	r31, 0xFE	; 254
    1af0:	20 81       	ld	r18, Z
    1af2:	fc 01       	movw	r30, r24
    1af4:	ee 0f       	add	r30, r30
    1af6:	ff 1f       	adc	r31, r31
    1af8:	ee 0f       	add	r30, r30
    1afa:	ff 1f       	adc	r31, r31
    1afc:	22 23       	and	r18, r18
    1afe:	31 f4       	brne	.+12     	; 0x1b0c <Isb_App_Exec+0x95e>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1b00:	aa 0f       	add	r26, r26
    1b02:	bb 1f       	adc	r27, r27
    1b04:	aa 55       	subi	r26, 0x5A	; 90
    1b06:	be 4f       	sbci	r27, 0xFE	; 254
    1b08:	7c 93       	st	X, r23
    1b0a:	05 c0       	rjmp	.+10     	; 0x1b16 <Isb_App_Exec+0x968>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    1b0c:	aa 0f       	add	r26, r26
    1b0e:	bb 1f       	adc	r27, r27
    1b10:	aa 55       	subi	r26, 0x5A	; 90
    1b12:	be 4f       	sbci	r27, 0xFE	; 254
    1b14:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1b16:	ec 55       	subi	r30, 0x5C	; 92
    1b18:	fe 4f       	sbci	r31, 0xFE	; 254
    1b1a:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHSHORT);
    1b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1e:	8f 7d       	andi	r24, 0xDF	; 223
    1b20:	8d 83       	std	Y+5, r24	; 0x05
											}
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHLONG)) {
    1b22:	fa 01       	movw	r30, r20
    1b24:	80 81       	ld	r24, Z
    1b26:	86 ff       	sbrs	r24, 6
    1b28:	46 c0       	rjmp	.+140    	; 0x1bb6 <Isb_App_Exec+0xa08>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1) {
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	80 7f       	andi	r24, 0xF0	; 240
    1b30:	90 70       	andi	r25, 0x00	; 0
    1b32:	80 31       	cpi	r24, 0x10	; 16
    1b34:	91 05       	cpc	r25, r1
    1b36:	71 f4       	brne	.+28     	; 0x1b54 <Isb_App_Exec+0x9a6>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 0) {
    1b38:	af 2d       	mov	r26, r15
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	fd 01       	movw	r30, r26
    1b3e:	ee 0f       	add	r30, r30
    1b40:	ff 1f       	adc	r31, r31
    1b42:	ee 0f       	add	r30, r30
    1b44:	ff 1f       	adc	r31, r31
    1b46:	ea 55       	subi	r30, 0x5A	; 90
    1b48:	fe 4f       	sbci	r31, 0xFE	; 254
    1b4a:	80 81       	ld	r24, Z
    1b4c:	88 23       	and	r24, r24
    1b4e:	81 f1       	breq	.+96     	; 0x1bb0 <Isb_App_Exec+0xa02>
														Isb_Obj_1Bit[Obj_1Bit_2].Value = 0;
    1b50:	10 82       	st	Z, r1
    1b52:	10 c0       	rjmp	.+32     	; 0x1b74 <Isb_App_Exec+0x9c6>
														Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2) {
    1b54:	80 32       	cpi	r24, 0x20	; 32
    1b56:	91 05       	cpc	r25, r1
    1b58:	b1 f4       	brne	.+44     	; 0x1b86 <Isb_App_Exec+0x9d8>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 1) {
    1b5a:	af 2d       	mov	r26, r15
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	fd 01       	movw	r30, r26
    1b60:	ee 0f       	add	r30, r30
    1b62:	ff 1f       	adc	r31, r31
    1b64:	ee 0f       	add	r30, r30
    1b66:	ff 1f       	adc	r31, r31
    1b68:	ea 55       	subi	r30, 0x5A	; 90
    1b6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b6c:	80 81       	ld	r24, Z
    1b6e:	81 30       	cpi	r24, 0x01	; 1
    1b70:	f9 f0       	breq	.+62     	; 0x1bb0 <Isb_App_Exec+0xa02>
														Isb_Obj_1Bit[Obj_1Bit_2].Value = 1;
    1b72:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
    1b74:	aa 0f       	add	r26, r26
    1b76:	bb 1f       	adc	r27, r27
    1b78:	aa 0f       	add	r26, r26
    1b7a:	bb 1f       	adc	r27, r27
    1b7c:	ac 55       	subi	r26, 0x5C	; 92
    1b7e:	be 4f       	sbci	r27, 0xFE	; 254
    1b80:	13 96       	adiw	r26, 0x03	; 3
    1b82:	7c 93       	st	X, r23
    1b84:	15 c0       	rjmp	.+42     	; 0x1bb0 <Isb_App_Exec+0xa02>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3) {
    1b86:	c0 97       	sbiw	r24, 0x30	; 48
    1b88:	99 f4       	brne	.+38     	; 0x1bb0 <Isb_App_Exec+0xa02>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value == 0) {
    1b8a:	8f 2d       	mov	r24, r15
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	dc 01       	movw	r26, r24
    1b98:	aa 55       	subi	r26, 0x5A	; 90
    1b9a:	be 4f       	sbci	r27, 0xFE	; 254
    1b9c:	2c 91       	ld	r18, X
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	22 23       	and	r18, r18
    1ba2:	11 f4       	brne	.+4      	; 0x1ba8 <Isb_App_Exec+0x9fa>
														if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_2].Value = 1;
    1ba4:	7c 93       	st	X, r23
    1ba6:	01 c0       	rjmp	.+2      	; 0x1baa <Isb_App_Exec+0x9fc>
															Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_2].Value = 0;
    1ba8:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
    1baa:	ec 55       	subi	r30, 0x5C	; 92
    1bac:	fe 4f       	sbci	r31, 0xFE	; 254
    1bae:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHLONG);
    1bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb2:	8f 7b       	andi	r24, 0xBF	; 191
    1bb4:	8d 83       	std	Y+5, r24	; 0x05
											}
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHREPEAT)) {
    1bb6:	fa 01       	movw	r30, r20
    1bb8:	80 81       	ld	r24, Z
    1bba:	87 ff       	sbrs	r24, 7
    1bbc:	03 c0       	rjmp	.+6      	; 0x1bc4 <Isb_App_Exec+0xa16>
// TODO:


												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHREPEAT);
    1bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc0:	8f 77       	andi	r24, 0x7F	; 127
    1bc2:	8d 83       	std	Y+5, r24	; 0x05
    1bc4:	0f 5f       	subi	r16, 0xFF	; 255
    1bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc8:	28 96       	adiw	r28, 0x08	; 8
			}
		#endif /* ISB_APP_DIGOUT_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			if (bit_is_set(Isb_App_DigIn_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++) {
    1bca:	08 30       	cpi	r16, 0x08	; 8
    1bcc:	11 05       	cpc	r17, r1
    1bce:	09 f0       	breq	.+2      	; 0x1bd2 <Isb_App_Exec+0xa24>
    1bd0:	c7 cc       	rjmp	.-1650   	; 0x1560 <Isb_App_Exec+0x3b2>

//						}
// <- TODO:
					}
				}
				Isb_App_DigIn_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    1bd2:	80 91 9f 00 	lds	r24, 0x009F
    1bd6:	8e 7f       	andi	r24, 0xFE	; 254
    1bd8:	80 93 9f 00 	sts	0x009F, r24
//#				}
				Isb_App_Lcd_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
			}
		#endif /* ISB_APP_LCD_MAX */

	}
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	ff 90       	pop	r15
    1be6:	ef 90       	pop	r14
    1be8:	df 90       	pop	r13
    1bea:	cf 90       	pop	r12
    1bec:	bf 90       	pop	r11
    1bee:	af 90       	pop	r10
    1bf0:	9f 90       	pop	r9
    1bf2:	8f 90       	pop	r8
    1bf4:	7f 90       	pop	r7
    1bf6:	6f 90       	pop	r6
    1bf8:	5f 90       	pop	r5
    1bfa:	4f 90       	pop	r4
    1bfc:	3f 90       	pop	r3
    1bfe:	08 95       	ret

00001c00 <Isb_Obj_Init>:
#ifndef ISB_OBJ_C_
	#define ISB_OBJ_C_



	void Isb_Obj_Init(void) {
    1c00:	0f 93       	push	r16
    1c02:	1f 93       	push	r17
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	80 91 96 00 	lds	r24, 0x0096
    1c0c:	08 2f       	mov	r16, r24
    1c0e:	10 e0       	ldi	r17, 0x00	; 0
    1c10:	c4 ea       	ldi	r28, 0xA4	; 164
    1c12:	d1 e0       	ldi	r29, 0x01	; 1
    1c14:	a0 e0       	ldi	r26, 0x00	; 0
    1c16:	b0 e0       	ldi	r27, 0x00	; 0

		#if defined(ISB_OBJ_1BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
				uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_1Bit_Ch_Array[ObjIndex]);
    1c18:	fd 01       	movw	r30, r26
    1c1a:	e4 5f       	subi	r30, 0xF4	; 244
    1c1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c1e:	84 91       	lpm	r24, Z+
				uint16_t eepAddrCtrl = 0;
				uint16_t eepAddrTov = 0;
				uint16_t eepAddrValueInit = 0;
				switch (ObjIndex) {
    1c20:	ea 2f       	mov	r30, r26
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	e8 33       	cpi	r30, 0x38	; 56
    1c26:	f1 05       	cpc	r31, r1
    1c28:	78 f4       	brcc	.+30     	; 0x1c48 <Isb_Obj_Init+0x48>
    1c2a:	e6 5d       	subi	r30, 0xD6	; 214
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	ee 0f       	add	r30, r30
    1c30:	ff 1f       	adc	r31, r31
    1c32:	05 90       	lpm	r0, Z+
    1c34:	f4 91       	lpm	r31, Z+
    1c36:	e0 2d       	mov	r30, r0
    1c38:	09 94       	ijmp
    1c3a:	65 e0       	ldi	r22, 0x05	; 5
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	46 e0       	ldi	r20, 0x06	; 6
    1c40:	50 e0       	ldi	r21, 0x00	; 0
    1c42:	27 e0       	ldi	r18, 0x07	; 7
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	87 c1       	rjmp	.+782    	; 0x1f56 <Isb_Obj_Init+0x356>
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	70 e0       	ldi	r23, 0x00	; 0
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	80 c1       	rjmp	.+768    	; 0x1f56 <Isb_Obj_Init+0x356>
    1c56:	68 e0       	ldi	r22, 0x08	; 8
    1c58:	70 e0       	ldi	r23, 0x00	; 0
    1c5a:	49 e0       	ldi	r20, 0x09	; 9
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	2a e0       	ldi	r18, 0x0A	; 10
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	79 c1       	rjmp	.+754    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_1)
						case 1:
							eepAddrCtrl = ISB_OBJ_1BIT_1_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_1_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_1_EEADDR_VALUEINIT;
							break;
    1c64:	6b e0       	ldi	r22, 0x0B	; 11
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	4c e0       	ldi	r20, 0x0C	; 12
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	2d e0       	ldi	r18, 0x0D	; 13
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	72 c1       	rjmp	.+740    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_2)
						case 2:
							eepAddrCtrl = ISB_OBJ_1BIT_2_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_2_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_2_EEADDR_VALUEINIT;
							break;
    1c72:	6a e1       	ldi	r22, 0x1A	; 26
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	4b e1       	ldi	r20, 0x1B	; 27
    1c78:	50 e0       	ldi	r21, 0x00	; 0
    1c7a:	2c e1       	ldi	r18, 0x1C	; 28
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	6b c1       	rjmp	.+726    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_3)
						case 3:
							eepAddrCtrl = ISB_OBJ_1BIT_3_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_3_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_3_EEADDR_VALUEINIT;
							break;
    1c80:	6d e1       	ldi	r22, 0x1D	; 29
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	4e e1       	ldi	r20, 0x1E	; 30
    1c86:	50 e0       	ldi	r21, 0x00	; 0
    1c88:	2f e1       	ldi	r18, 0x1F	; 31
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	64 c1       	rjmp	.+712    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_4)
						case 4:
							eepAddrCtrl = ISB_OBJ_1BIT_4_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_4_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_4_EEADDR_VALUEINIT;
							break;
    1c8e:	60 e2       	ldi	r22, 0x20	; 32
    1c90:	70 e0       	ldi	r23, 0x00	; 0
    1c92:	41 e2       	ldi	r20, 0x21	; 33
    1c94:	50 e0       	ldi	r21, 0x00	; 0
    1c96:	22 e2       	ldi	r18, 0x22	; 34
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	5d c1       	rjmp	.+698    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_5)
						case 5:
							eepAddrCtrl = ISB_OBJ_1BIT_5_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_5_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_5_EEADDR_VALUEINIT;
							break;
    1c9c:	6f e2       	ldi	r22, 0x2F	; 47
    1c9e:	70 e0       	ldi	r23, 0x00	; 0
    1ca0:	40 e3       	ldi	r20, 0x30	; 48
    1ca2:	50 e0       	ldi	r21, 0x00	; 0
    1ca4:	21 e3       	ldi	r18, 0x31	; 49
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	56 c1       	rjmp	.+684    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_6)
						case 6:
							eepAddrCtrl = ISB_OBJ_1BIT_6_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_6_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_6_EEADDR_VALUEINIT;
							break;
    1caa:	62 e3       	ldi	r22, 0x32	; 50
    1cac:	70 e0       	ldi	r23, 0x00	; 0
    1cae:	43 e3       	ldi	r20, 0x33	; 51
    1cb0:	50 e0       	ldi	r21, 0x00	; 0
    1cb2:	24 e3       	ldi	r18, 0x34	; 52
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	4f c1       	rjmp	.+670    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_7)
						case 7:
							eepAddrCtrl = ISB_OBJ_1BIT_7_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_7_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_7_EEADDR_VALUEINIT;
							break;
    1cb8:	65 e3       	ldi	r22, 0x35	; 53
    1cba:	70 e0       	ldi	r23, 0x00	; 0
    1cbc:	46 e3       	ldi	r20, 0x36	; 54
    1cbe:	50 e0       	ldi	r21, 0x00	; 0
    1cc0:	27 e3       	ldi	r18, 0x37	; 55
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	48 c1       	rjmp	.+656    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_8)
						case 8:
							eepAddrCtrl = ISB_OBJ_1BIT_8_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_8_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_8_EEADDR_VALUEINIT;
							break;
    1cc6:	64 e4       	ldi	r22, 0x44	; 68
    1cc8:	70 e0       	ldi	r23, 0x00	; 0
    1cca:	45 e4       	ldi	r20, 0x45	; 69
    1ccc:	50 e0       	ldi	r21, 0x00	; 0
    1cce:	26 e4       	ldi	r18, 0x46	; 70
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	41 c1       	rjmp	.+642    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_9)
						case 9:
							eepAddrCtrl = ISB_OBJ_1BIT_9_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_9_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_9_EEADDR_VALUEINIT;
							break;
    1cd4:	67 e4       	ldi	r22, 0x47	; 71
    1cd6:	70 e0       	ldi	r23, 0x00	; 0
    1cd8:	48 e4       	ldi	r20, 0x48	; 72
    1cda:	50 e0       	ldi	r21, 0x00	; 0
    1cdc:	29 e4       	ldi	r18, 0x49	; 73
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	3a c1       	rjmp	.+628    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_10)
						case 10:
							eepAddrCtrl = ISB_OBJ_1BIT_10_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_10_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_10_EEADDR_VALUEINIT;
							break;
    1ce2:	6a e4       	ldi	r22, 0x4A	; 74
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	4b e4       	ldi	r20, 0x4B	; 75
    1ce8:	50 e0       	ldi	r21, 0x00	; 0
    1cea:	2c e4       	ldi	r18, 0x4C	; 76
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	33 c1       	rjmp	.+614    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_11)
						case 11:
							eepAddrCtrl = ISB_OBJ_1BIT_11_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_11_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_11_EEADDR_VALUEINIT;
							break;
    1cf0:	69 e5       	ldi	r22, 0x59	; 89
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	4a e5       	ldi	r20, 0x5A	; 90
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	2b e5       	ldi	r18, 0x5B	; 91
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	2c c1       	rjmp	.+600    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_12)
						case 12:
							eepAddrCtrl = ISB_OBJ_1BIT_12_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_12_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_12_EEADDR_VALUEINIT;
							break;
    1cfe:	6c e5       	ldi	r22, 0x5C	; 92
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	4d e5       	ldi	r20, 0x5D	; 93
    1d04:	50 e0       	ldi	r21, 0x00	; 0
    1d06:	2e e5       	ldi	r18, 0x5E	; 94
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	25 c1       	rjmp	.+586    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_13)
						case 13:
							eepAddrCtrl = ISB_OBJ_1BIT_13_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_13_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_13_EEADDR_VALUEINIT;
							break;
    1d0c:	6f e5       	ldi	r22, 0x5F	; 95
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	40 e6       	ldi	r20, 0x60	; 96
    1d12:	50 e0       	ldi	r21, 0x00	; 0
    1d14:	21 e6       	ldi	r18, 0x61	; 97
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	1e c1       	rjmp	.+572    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_14)
						case 14:
							eepAddrCtrl = ISB_OBJ_1BIT_14_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_14_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_14_EEADDR_VALUEINIT;
							break;
    1d1a:	6e e6       	ldi	r22, 0x6E	; 110
    1d1c:	70 e0       	ldi	r23, 0x00	; 0
    1d1e:	4f e6       	ldi	r20, 0x6F	; 111
    1d20:	50 e0       	ldi	r21, 0x00	; 0
    1d22:	20 e7       	ldi	r18, 0x70	; 112
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	17 c1       	rjmp	.+558    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_15)
						case 15:
							eepAddrCtrl = ISB_OBJ_1BIT_15_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_15_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_15_EEADDR_VALUEINIT;
							break;
    1d28:	61 e7       	ldi	r22, 0x71	; 113
    1d2a:	70 e0       	ldi	r23, 0x00	; 0
    1d2c:	42 e7       	ldi	r20, 0x72	; 114
    1d2e:	50 e0       	ldi	r21, 0x00	; 0
    1d30:	23 e7       	ldi	r18, 0x73	; 115
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	10 c1       	rjmp	.+544    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_16)
						case 16:
							eepAddrCtrl = ISB_OBJ_1BIT_16_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_16_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_16_EEADDR_VALUEINIT;
							break;
    1d36:	64 e7       	ldi	r22, 0x74	; 116
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	45 e7       	ldi	r20, 0x75	; 117
    1d3c:	50 e0       	ldi	r21, 0x00	; 0
    1d3e:	26 e7       	ldi	r18, 0x76	; 118
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	09 c1       	rjmp	.+530    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_17)
						case 17:
							eepAddrCtrl = ISB_OBJ_1BIT_17_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_17_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_17_EEADDR_VALUEINIT;
							break;
    1d44:	63 e8       	ldi	r22, 0x83	; 131
    1d46:	70 e0       	ldi	r23, 0x00	; 0
    1d48:	44 e8       	ldi	r20, 0x84	; 132
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	25 e8       	ldi	r18, 0x85	; 133
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	02 c1       	rjmp	.+516    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_18)
						case 18:
							eepAddrCtrl = ISB_OBJ_1BIT_18_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_18_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_18_EEADDR_VALUEINIT;
							break;
    1d52:	66 e8       	ldi	r22, 0x86	; 134
    1d54:	70 e0       	ldi	r23, 0x00	; 0
    1d56:	47 e8       	ldi	r20, 0x87	; 135
    1d58:	50 e0       	ldi	r21, 0x00	; 0
    1d5a:	28 e8       	ldi	r18, 0x88	; 136
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	fb c0       	rjmp	.+502    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_19)
						case 19:
							eepAddrCtrl = ISB_OBJ_1BIT_19_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_19_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_19_EEADDR_VALUEINIT;
							break;
    1d60:	69 e8       	ldi	r22, 0x89	; 137
    1d62:	70 e0       	ldi	r23, 0x00	; 0
    1d64:	4a e8       	ldi	r20, 0x8A	; 138
    1d66:	50 e0       	ldi	r21, 0x00	; 0
    1d68:	2b e8       	ldi	r18, 0x8B	; 139
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	f4 c0       	rjmp	.+488    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_20)
						case 20:
							eepAddrCtrl = ISB_OBJ_1BIT_20_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_20_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_20_EEADDR_VALUEINIT;
							break;
    1d6e:	68 e9       	ldi	r22, 0x98	; 152
    1d70:	70 e0       	ldi	r23, 0x00	; 0
    1d72:	49 e9       	ldi	r20, 0x99	; 153
    1d74:	50 e0       	ldi	r21, 0x00	; 0
    1d76:	2a e9       	ldi	r18, 0x9A	; 154
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	ed c0       	rjmp	.+474    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_21)
						case 21:
							eepAddrCtrl = ISB_OBJ_1BIT_21_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_21_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_21_EEADDR_VALUEINIT;
							break;
    1d7c:	6b e9       	ldi	r22, 0x9B	; 155
    1d7e:	70 e0       	ldi	r23, 0x00	; 0
    1d80:	4c e9       	ldi	r20, 0x9C	; 156
    1d82:	50 e0       	ldi	r21, 0x00	; 0
    1d84:	2d e9       	ldi	r18, 0x9D	; 157
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	e6 c0       	rjmp	.+460    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_22)
						case 22:
							eepAddrCtrl = ISB_OBJ_1BIT_22_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_22_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_22_EEADDR_VALUEINIT;
							break;
    1d8a:	6e e9       	ldi	r22, 0x9E	; 158
    1d8c:	70 e0       	ldi	r23, 0x00	; 0
    1d8e:	4f e9       	ldi	r20, 0x9F	; 159
    1d90:	50 e0       	ldi	r21, 0x00	; 0
    1d92:	20 ea       	ldi	r18, 0xA0	; 160
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	df c0       	rjmp	.+446    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_23)
						case 23:
							eepAddrCtrl = ISB_OBJ_1BIT_23_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_23_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_23_EEADDR_VALUEINIT;
							break;
    1d98:	63 eb       	ldi	r22, 0xB3	; 179
    1d9a:	70 e0       	ldi	r23, 0x00	; 0
    1d9c:	44 eb       	ldi	r20, 0xB4	; 180
    1d9e:	50 e0       	ldi	r21, 0x00	; 0
    1da0:	25 eb       	ldi	r18, 0xB5	; 181
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	d8 c0       	rjmp	.+432    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_24)
						case 24:
							eepAddrCtrl = ISB_OBJ_1BIT_24_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_24_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_24_EEADDR_VALUEINIT;
							break;
    1da6:	66 eb       	ldi	r22, 0xB6	; 182
    1da8:	70 e0       	ldi	r23, 0x00	; 0
    1daa:	47 eb       	ldi	r20, 0xB7	; 183
    1dac:	50 e0       	ldi	r21, 0x00	; 0
    1dae:	28 eb       	ldi	r18, 0xB8	; 184
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	d1 c0       	rjmp	.+418    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_25)
						case 25:
							eepAddrCtrl = ISB_OBJ_1BIT_25_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_25_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_25_EEADDR_VALUEINIT;
							break;
    1db4:	69 eb       	ldi	r22, 0xB9	; 185
    1db6:	70 e0       	ldi	r23, 0x00	; 0
    1db8:	4a eb       	ldi	r20, 0xBA	; 186
    1dba:	50 e0       	ldi	r21, 0x00	; 0
    1dbc:	2b eb       	ldi	r18, 0xBB	; 187
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	ca c0       	rjmp	.+404    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_26)
						case 26:
							eepAddrCtrl = ISB_OBJ_1BIT_26_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_26_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_26_EEADDR_VALUEINIT;
							break;
    1dc2:	6c eb       	ldi	r22, 0xBC	; 188
    1dc4:	70 e0       	ldi	r23, 0x00	; 0
    1dc6:	4d eb       	ldi	r20, 0xBD	; 189
    1dc8:	50 e0       	ldi	r21, 0x00	; 0
    1dca:	2e eb       	ldi	r18, 0xBE	; 190
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	c3 c0       	rjmp	.+390    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_27)
						case 27:
							eepAddrCtrl = ISB_OBJ_1BIT_27_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_27_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_27_EEADDR_VALUEINIT;
							break;
    1dd0:	6b ec       	ldi	r22, 0xCB	; 203
    1dd2:	70 e0       	ldi	r23, 0x00	; 0
    1dd4:	4c ec       	ldi	r20, 0xCC	; 204
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	2d ec       	ldi	r18, 0xCD	; 205
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	bc c0       	rjmp	.+376    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_28)
						case 28:
							eepAddrCtrl = ISB_OBJ_1BIT_28_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_28_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_28_EEADDR_VALUEINIT;
							break;
    1dde:	6e ec       	ldi	r22, 0xCE	; 206
    1de0:	70 e0       	ldi	r23, 0x00	; 0
    1de2:	4f ec       	ldi	r20, 0xCF	; 207
    1de4:	50 e0       	ldi	r21, 0x00	; 0
    1de6:	20 ed       	ldi	r18, 0xD0	; 208
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	b5 c0       	rjmp	.+362    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_29)
						case 29:
							eepAddrCtrl = ISB_OBJ_1BIT_29_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_29_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_29_EEADDR_VALUEINIT;
							break;
    1dec:	61 ed       	ldi	r22, 0xD1	; 209
    1dee:	70 e0       	ldi	r23, 0x00	; 0
    1df0:	42 ed       	ldi	r20, 0xD2	; 210
    1df2:	50 e0       	ldi	r21, 0x00	; 0
    1df4:	23 ed       	ldi	r18, 0xD3	; 211
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	ae c0       	rjmp	.+348    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_30)
						case 30:
							eepAddrCtrl = ISB_OBJ_1BIT_30_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_30_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_30_EEADDR_VALUEINIT;
							break;
    1dfa:	64 ed       	ldi	r22, 0xD4	; 212
    1dfc:	70 e0       	ldi	r23, 0x00	; 0
    1dfe:	45 ed       	ldi	r20, 0xD5	; 213
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	26 ed       	ldi	r18, 0xD6	; 214
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	a7 c0       	rjmp	.+334    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_31)
						case 31:
							eepAddrCtrl = ISB_OBJ_1BIT_31_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_31_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_31_EEADDR_VALUEINIT;
							break;
    1e08:	63 ee       	ldi	r22, 0xE3	; 227
    1e0a:	70 e0       	ldi	r23, 0x00	; 0
    1e0c:	44 ee       	ldi	r20, 0xE4	; 228
    1e0e:	50 e0       	ldi	r21, 0x00	; 0
    1e10:	25 ee       	ldi	r18, 0xE5	; 229
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	a0 c0       	rjmp	.+320    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_32)
						case 32:
							eepAddrCtrl = ISB_OBJ_1BIT_32_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_32_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_32_EEADDR_VALUEINIT;
							break;
    1e16:	66 ee       	ldi	r22, 0xE6	; 230
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	47 ee       	ldi	r20, 0xE7	; 231
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	28 ee       	ldi	r18, 0xE8	; 232
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	99 c0       	rjmp	.+306    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_33)
						case 33:
							eepAddrCtrl = ISB_OBJ_1BIT_33_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_33_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_33_EEADDR_VALUEINIT;
							break;
    1e24:	69 ee       	ldi	r22, 0xE9	; 233
    1e26:	70 e0       	ldi	r23, 0x00	; 0
    1e28:	4a ee       	ldi	r20, 0xEA	; 234
    1e2a:	50 e0       	ldi	r21, 0x00	; 0
    1e2c:	2b ee       	ldi	r18, 0xEB	; 235
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	92 c0       	rjmp	.+292    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_34)
						case 34:
							eepAddrCtrl = ISB_OBJ_1BIT_34_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_34_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_34_EEADDR_VALUEINIT;
							break;
    1e32:	6c ee       	ldi	r22, 0xEC	; 236
    1e34:	70 e0       	ldi	r23, 0x00	; 0
    1e36:	4d ee       	ldi	r20, 0xED	; 237
    1e38:	50 e0       	ldi	r21, 0x00	; 0
    1e3a:	2e ee       	ldi	r18, 0xEE	; 238
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	8b c0       	rjmp	.+278    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_35)
						case 35:
							eepAddrCtrl = ISB_OBJ_1BIT_35_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_35_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_35_EEADDR_VALUEINIT;
							break;
    1e40:	6b ef       	ldi	r22, 0xFB	; 251
    1e42:	70 e0       	ldi	r23, 0x00	; 0
    1e44:	4c ef       	ldi	r20, 0xFC	; 252
    1e46:	50 e0       	ldi	r21, 0x00	; 0
    1e48:	2d ef       	ldi	r18, 0xFD	; 253
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	84 c0       	rjmp	.+264    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_36)
						case 36:
							eepAddrCtrl = ISB_OBJ_1BIT_36_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_36_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_36_EEADDR_VALUEINIT;
							break;
    1e4e:	6e ef       	ldi	r22, 0xFE	; 254
    1e50:	70 e0       	ldi	r23, 0x00	; 0
    1e52:	4f ef       	ldi	r20, 0xFF	; 255
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	31 e0       	ldi	r19, 0x01	; 1
    1e5a:	7d c0       	rjmp	.+250    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_37)
						case 37:
							eepAddrCtrl = ISB_OBJ_1BIT_37_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_37_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_37_EEADDR_VALUEINIT;
							break;
    1e5c:	61 e0       	ldi	r22, 0x01	; 1
    1e5e:	71 e0       	ldi	r23, 0x01	; 1
    1e60:	42 e0       	ldi	r20, 0x02	; 2
    1e62:	51 e0       	ldi	r21, 0x01	; 1
    1e64:	23 e0       	ldi	r18, 0x03	; 3
    1e66:	31 e0       	ldi	r19, 0x01	; 1
    1e68:	76 c0       	rjmp	.+236    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_38)
						case 38:
							eepAddrCtrl = ISB_OBJ_1BIT_38_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_38_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_38_EEADDR_VALUEINIT;
							break;
    1e6a:	64 e0       	ldi	r22, 0x04	; 4
    1e6c:	71 e0       	ldi	r23, 0x01	; 1
    1e6e:	45 e0       	ldi	r20, 0x05	; 5
    1e70:	51 e0       	ldi	r21, 0x01	; 1
    1e72:	26 e0       	ldi	r18, 0x06	; 6
    1e74:	31 e0       	ldi	r19, 0x01	; 1
    1e76:	6f c0       	rjmp	.+222    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_39)
						case 39:
							eepAddrCtrl = ISB_OBJ_1BIT_39_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_39_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_39_EEADDR_VALUEINIT;
							break;
    1e78:	63 e1       	ldi	r22, 0x13	; 19
    1e7a:	71 e0       	ldi	r23, 0x01	; 1
    1e7c:	44 e1       	ldi	r20, 0x14	; 20
    1e7e:	51 e0       	ldi	r21, 0x01	; 1
    1e80:	25 e1       	ldi	r18, 0x15	; 21
    1e82:	31 e0       	ldi	r19, 0x01	; 1
    1e84:	68 c0       	rjmp	.+208    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_40)
						case 40:
							eepAddrCtrl = ISB_OBJ_1BIT_40_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_40_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_40_EEADDR_VALUEINIT;
							break;
    1e86:	66 e1       	ldi	r22, 0x16	; 22
    1e88:	71 e0       	ldi	r23, 0x01	; 1
    1e8a:	47 e1       	ldi	r20, 0x17	; 23
    1e8c:	51 e0       	ldi	r21, 0x01	; 1
    1e8e:	28 e1       	ldi	r18, 0x18	; 24
    1e90:	31 e0       	ldi	r19, 0x01	; 1
    1e92:	61 c0       	rjmp	.+194    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_41)
						case 41:
							eepAddrCtrl = ISB_OBJ_1BIT_41_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_41_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_41_EEADDR_VALUEINIT;
							break;
    1e94:	69 e1       	ldi	r22, 0x19	; 25
    1e96:	71 e0       	ldi	r23, 0x01	; 1
    1e98:	4a e1       	ldi	r20, 0x1A	; 26
    1e9a:	51 e0       	ldi	r21, 0x01	; 1
    1e9c:	2b e1       	ldi	r18, 0x1B	; 27
    1e9e:	31 e0       	ldi	r19, 0x01	; 1
    1ea0:	5a c0       	rjmp	.+180    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_42)
						case 42:
							eepAddrCtrl = ISB_OBJ_1BIT_42_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_42_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_42_EEADDR_VALUEINIT;
							break;
    1ea2:	6c e1       	ldi	r22, 0x1C	; 28
    1ea4:	71 e0       	ldi	r23, 0x01	; 1
    1ea6:	4d e1       	ldi	r20, 0x1D	; 29
    1ea8:	51 e0       	ldi	r21, 0x01	; 1
    1eaa:	2e e1       	ldi	r18, 0x1E	; 30
    1eac:	31 e0       	ldi	r19, 0x01	; 1
    1eae:	53 c0       	rjmp	.+166    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_43)
						case 43:
							eepAddrCtrl = ISB_OBJ_1BIT_43_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_43_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_43_EEADDR_VALUEINIT;
							break;
    1eb0:	6b e2       	ldi	r22, 0x2B	; 43
    1eb2:	71 e0       	ldi	r23, 0x01	; 1
    1eb4:	4c e2       	ldi	r20, 0x2C	; 44
    1eb6:	51 e0       	ldi	r21, 0x01	; 1
    1eb8:	2d e2       	ldi	r18, 0x2D	; 45
    1eba:	31 e0       	ldi	r19, 0x01	; 1
    1ebc:	4c c0       	rjmp	.+152    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_44)
						case 44:
							eepAddrCtrl = ISB_OBJ_1BIT_44_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_44_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_44_EEADDR_VALUEINIT;
							break;
    1ebe:	6e e2       	ldi	r22, 0x2E	; 46
    1ec0:	71 e0       	ldi	r23, 0x01	; 1
    1ec2:	4f e2       	ldi	r20, 0x2F	; 47
    1ec4:	51 e0       	ldi	r21, 0x01	; 1
    1ec6:	20 e3       	ldi	r18, 0x30	; 48
    1ec8:	31 e0       	ldi	r19, 0x01	; 1
    1eca:	45 c0       	rjmp	.+138    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_45)
						case 45:
							eepAddrCtrl = ISB_OBJ_1BIT_45_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_45_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_45_EEADDR_VALUEINIT;
							break;
    1ecc:	61 e3       	ldi	r22, 0x31	; 49
    1ece:	71 e0       	ldi	r23, 0x01	; 1
    1ed0:	42 e3       	ldi	r20, 0x32	; 50
    1ed2:	51 e0       	ldi	r21, 0x01	; 1
    1ed4:	23 e3       	ldi	r18, 0x33	; 51
    1ed6:	31 e0       	ldi	r19, 0x01	; 1
    1ed8:	3e c0       	rjmp	.+124    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_46)
						case 46:
							eepAddrCtrl = ISB_OBJ_1BIT_46_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_46_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_46_EEADDR_VALUEINIT;
							break;
    1eda:	64 e3       	ldi	r22, 0x34	; 52
    1edc:	71 e0       	ldi	r23, 0x01	; 1
    1ede:	45 e3       	ldi	r20, 0x35	; 53
    1ee0:	51 e0       	ldi	r21, 0x01	; 1
    1ee2:	26 e3       	ldi	r18, 0x36	; 54
    1ee4:	31 e0       	ldi	r19, 0x01	; 1
    1ee6:	37 c0       	rjmp	.+110    	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_47)
						case 47:
							eepAddrCtrl = ISB_OBJ_1BIT_47_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_47_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_47_EEADDR_VALUEINIT;
							break;
    1ee8:	63 e4       	ldi	r22, 0x43	; 67
    1eea:	71 e0       	ldi	r23, 0x01	; 1
    1eec:	44 e4       	ldi	r20, 0x44	; 68
    1eee:	51 e0       	ldi	r21, 0x01	; 1
    1ef0:	25 e4       	ldi	r18, 0x45	; 69
    1ef2:	31 e0       	ldi	r19, 0x01	; 1
    1ef4:	30 c0       	rjmp	.+96     	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_48)
						case 48:
							eepAddrCtrl = ISB_OBJ_1BIT_48_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_48_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_48_EEADDR_VALUEINIT;
							break;
    1ef6:	66 e4       	ldi	r22, 0x46	; 70
    1ef8:	71 e0       	ldi	r23, 0x01	; 1
    1efa:	47 e4       	ldi	r20, 0x47	; 71
    1efc:	51 e0       	ldi	r21, 0x01	; 1
    1efe:	28 e4       	ldi	r18, 0x48	; 72
    1f00:	31 e0       	ldi	r19, 0x01	; 1
    1f02:	29 c0       	rjmp	.+82     	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_49)
						case 49:
							eepAddrCtrl = ISB_OBJ_1BIT_49_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_49_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_49_EEADDR_VALUEINIT;
							break;
    1f04:	69 e4       	ldi	r22, 0x49	; 73
    1f06:	71 e0       	ldi	r23, 0x01	; 1
    1f08:	4a e4       	ldi	r20, 0x4A	; 74
    1f0a:	51 e0       	ldi	r21, 0x01	; 1
    1f0c:	2b e4       	ldi	r18, 0x4B	; 75
    1f0e:	31 e0       	ldi	r19, 0x01	; 1
    1f10:	22 c0       	rjmp	.+68     	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_50)
						case 50:
							eepAddrCtrl = ISB_OBJ_1BIT_50_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_50_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_50_EEADDR_VALUEINIT;
							break;
    1f12:	6c e4       	ldi	r22, 0x4C	; 76
    1f14:	71 e0       	ldi	r23, 0x01	; 1
    1f16:	4d e4       	ldi	r20, 0x4D	; 77
    1f18:	51 e0       	ldi	r21, 0x01	; 1
    1f1a:	2e e4       	ldi	r18, 0x4E	; 78
    1f1c:	31 e0       	ldi	r19, 0x01	; 1
    1f1e:	1b c0       	rjmp	.+54     	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_51)
						case 51:
							eepAddrCtrl = ISB_OBJ_1BIT_51_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_51_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_51_EEADDR_VALUEINIT;
							break;
    1f20:	6b e5       	ldi	r22, 0x5B	; 91
    1f22:	71 e0       	ldi	r23, 0x01	; 1
    1f24:	4c e5       	ldi	r20, 0x5C	; 92
    1f26:	51 e0       	ldi	r21, 0x01	; 1
    1f28:	2d e5       	ldi	r18, 0x5D	; 93
    1f2a:	31 e0       	ldi	r19, 0x01	; 1
    1f2c:	14 c0       	rjmp	.+40     	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_52)
						case 52:
							eepAddrCtrl = ISB_OBJ_1BIT_52_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_52_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_52_EEADDR_VALUEINIT;
							break;
    1f2e:	6e e5       	ldi	r22, 0x5E	; 94
    1f30:	71 e0       	ldi	r23, 0x01	; 1
    1f32:	4f e5       	ldi	r20, 0x5F	; 95
    1f34:	51 e0       	ldi	r21, 0x01	; 1
    1f36:	20 e6       	ldi	r18, 0x60	; 96
    1f38:	31 e0       	ldi	r19, 0x01	; 1
    1f3a:	0d c0       	rjmp	.+26     	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_53)
						case 53:
							eepAddrCtrl = ISB_OBJ_1BIT_53_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_53_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_53_EEADDR_VALUEINIT;
							break;
    1f3c:	61 e6       	ldi	r22, 0x61	; 97
    1f3e:	71 e0       	ldi	r23, 0x01	; 1
    1f40:	42 e6       	ldi	r20, 0x62	; 98
    1f42:	51 e0       	ldi	r21, 0x01	; 1
    1f44:	23 e6       	ldi	r18, 0x63	; 99
    1f46:	31 e0       	ldi	r19, 0x01	; 1
    1f48:	06 c0       	rjmp	.+12     	; 0x1f56 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_54)
						case 54:
							eepAddrCtrl = ISB_OBJ_1BIT_54_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_54_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_54_EEADDR_VALUEINIT;
							break;
    1f4a:	64 e6       	ldi	r22, 0x64	; 100
    1f4c:	71 e0       	ldi	r23, 0x01	; 1
    1f4e:	45 e6       	ldi	r20, 0x65	; 101
    1f50:	51 e0       	ldi	r21, 0x01	; 1
    1f52:	26 e6       	ldi	r18, 0x66	; 102
    1f54:	31 e0       	ldi	r19, 0x01	; 1
							eepAddrTov = ISB_OBJ_1BIT_63_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_63_EEADDR_VALUEINIT;
							break;
					#endif /* ISB_OBJ_1BIT_63 */
				}
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    1f56:	e8 2f       	mov	r30, r24
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	ee 0f       	add	r30, r30
    1f5c:	ff 1f       	adc	r31, r31
    1f5e:	ec 5a       	subi	r30, 0xAC	; 172
    1f60:	fc 4f       	sbci	r31, 0xFC	; 252
    1f62:	80 81       	ld	r24, Z
    1f64:	80 ff       	sbrs	r24, 0
    1f66:	26 c0       	rjmp	.+76     	; 0x1fb4 <Isb_Obj_Init+0x3b4>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1f68:	e1 99       	sbic	0x1c, 1	; 28
    1f6a:	fe cf       	rjmp	.-4      	; 0x1f68 <Isb_Obj_Init+0x368>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1f6c:	60 0f       	add	r22, r16
    1f6e:	71 1f       	adc	r23, r17
    1f70:	7f bb       	out	0x1f, r23	; 31
    1f72:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
    1f74:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1f76:	8d b3       	in	r24, 0x1d	; 29
					Isb_Obj_1Bit[ObjIndex].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddrCtrl);
    1f78:	88 83       	st	Y, r24
					if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    1f7a:	fd 01       	movw	r30, r26
    1f7c:	ee 0f       	add	r30, r30
    1f7e:	ff 1f       	adc	r31, r31
    1f80:	ee 0f       	add	r30, r30
    1f82:	ff 1f       	adc	r31, r31
    1f84:	ec 55       	subi	r30, 0x5C	; 92
    1f86:	fe 4f       	sbci	r31, 0xFE	; 254
    1f88:	80 81       	ld	r24, Z
    1f8a:	80 ff       	sbrs	r24, 0
    1f8c:	13 c0       	rjmp	.+38     	; 0x1fb4 <Isb_Obj_Init+0x3b4>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1f8e:	e1 99       	sbic	0x1c, 1	; 28
    1f90:	fe cf       	rjmp	.-4      	; 0x1f8e <Isb_Obj_Init+0x38e>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1f92:	40 0f       	add	r20, r16
    1f94:	51 1f       	adc	r21, r17
    1f96:	5f bb       	out	0x1f, r21	; 31
    1f98:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
    1f9a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1f9c:	8d b3       	in	r24, 0x1d	; 29
						Isb_Obj_1Bit[ObjIndex].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddrTov);
    1f9e:	89 83       	std	Y+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1fa0:	e1 99       	sbic	0x1c, 1	; 28
    1fa2:	fe cf       	rjmp	.-4      	; 0x1fa0 <Isb_Obj_Init+0x3a0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1fa4:	20 0f       	add	r18, r16
    1fa6:	31 1f       	adc	r19, r17
    1fa8:	3f bb       	out	0x1f, r19	; 31
    1faa:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    1fac:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1fae:	8d b3       	in	r24, 0x1d	; 29
						Isb_Obj_1Bit[ObjIndex].Value = lib_eep_fw_read_byte((uint8_t *)eepAddrValueInit);
    1fb0:	8a 83       	std	Y+2, r24	; 0x02
						Isb_Obj_1Bit[ObjIndex].IsChanged = FALSE;
    1fb2:	1b 82       	std	Y+3, r1	; 0x03
    1fb4:	11 96       	adiw	r26, 0x01	; 1
    1fb6:	24 96       	adiw	r28, 0x04	; 4


	void Isb_Obj_Init(void) {

		#if defined(ISB_OBJ_1BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
    1fb8:	a8 33       	cpi	r26, 0x38	; 56
    1fba:	b1 05       	cpc	r27, r1
    1fbc:	09 f0       	breq	.+2      	; 0x1fc0 <Isb_Obj_Init+0x3c0>
    1fbe:	2c ce       	rjmp	.-936    	; 0x1c18 <Isb_Obj_Init+0x18>
    1fc0:	cb ee       	ldi	r28, 0xEB	; 235
    1fc2:	d0 e0       	ldi	r29, 0x00	; 0
    1fc4:	a0 e0       	ldi	r26, 0x00	; 0
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
			}
		#endif /* ISB_OBJ_1BIT_MAX */

		#if defined(ISB_OBJ_4BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
				uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_4Bit_Ch_Array[ObjIndex]);
    1fc8:	fd 01       	movw	r30, r26
    1fca:	ec 5b       	subi	r30, 0xBC	; 188
    1fcc:	fe 4f       	sbci	r31, 0xFE	; 254
    1fce:	e4 91       	lpm	r30, Z+
				uint16_t eepAddrCtrl = 0;
				uint16_t eepAddrTov = 0;
				uint16_t eepAddrValueInit = 0;
				switch (ObjIndex) {
    1fd0:	a3 30       	cpi	r26, 0x03	; 3
    1fd2:	61 f1       	breq	.+88     	; 0x202c <Isb_Obj_Init+0x42c>
    1fd4:	a4 30       	cpi	r26, 0x04	; 4
    1fd6:	28 f4       	brcc	.+10     	; 0x1fe2 <Isb_Obj_Init+0x3e2>
    1fd8:	a1 30       	cpi	r26, 0x01	; 1
    1fda:	d1 f0       	breq	.+52     	; 0x2010 <Isb_Obj_Init+0x410>
    1fdc:	a2 30       	cpi	r26, 0x02	; 2
    1fde:	f8 f4       	brcc	.+62     	; 0x201e <Isb_Obj_Init+0x41e>
    1fe0:	09 c0       	rjmp	.+18     	; 0x1ff4 <Isb_Obj_Init+0x3f4>
    1fe2:	a5 30       	cpi	r26, 0x05	; 5
    1fe4:	89 f1       	breq	.+98     	; 0x2048 <Isb_Obj_Init+0x448>
    1fe6:	a5 30       	cpi	r26, 0x05	; 5
    1fe8:	40 f1       	brcs	.+80     	; 0x203a <Isb_Obj_Init+0x43a>
    1fea:	a6 30       	cpi	r26, 0x06	; 6
    1fec:	a1 f1       	breq	.+104    	; 0x2056 <Isb_Obj_Init+0x456>
    1fee:	a7 30       	cpi	r26, 0x07	; 7
    1ff0:	41 f4       	brne	.+16     	; 0x2002 <Isb_Obj_Init+0x402>
    1ff2:	38 c0       	rjmp	.+112    	; 0x2064 <Isb_Obj_Init+0x464>
    1ff4:	4e e0       	ldi	r20, 0x0E	; 14
    1ff6:	50 e0       	ldi	r21, 0x00	; 0
    1ff8:	6f e0       	ldi	r22, 0x0F	; 15
    1ffa:	70 e0       	ldi	r23, 0x00	; 0
    1ffc:	20 e1       	ldi	r18, 0x10	; 16
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	37 c0       	rjmp	.+110    	; 0x2070 <Isb_Obj_Init+0x470>
    2002:	40 e0       	ldi	r20, 0x00	; 0
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	60 e0       	ldi	r22, 0x00	; 0
    2008:	70 e0       	ldi	r23, 0x00	; 0
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	30 c0       	rjmp	.+96     	; 0x2070 <Isb_Obj_Init+0x470>
    2010:	43 e2       	ldi	r20, 0x23	; 35
    2012:	50 e0       	ldi	r21, 0x00	; 0
    2014:	64 e2       	ldi	r22, 0x24	; 36
    2016:	70 e0       	ldi	r23, 0x00	; 0
    2018:	25 e2       	ldi	r18, 0x25	; 37
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	29 c0       	rjmp	.+82     	; 0x2070 <Isb_Obj_Init+0x470>
					#if defined(ISB_OBJ_4BIT_1)
						case 1:
							eepAddrCtrl = ISB_OBJ_4BIT_1_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_4BIT_1_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_1_EEADDR_VALUEINIT;
							break;
    201e:	48 e3       	ldi	r20, 0x38	; 56
    2020:	50 e0       	ldi	r21, 0x00	; 0
    2022:	69 e3       	ldi	r22, 0x39	; 57
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	2a e3       	ldi	r18, 0x3A	; 58
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	22 c0       	rjmp	.+68     	; 0x2070 <Isb_Obj_Init+0x470>
					#if defined(ISB_OBJ_4BIT_2)
						case 2:
							eepAddrCtrl = ISB_OBJ_4BIT_2_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_4BIT_2_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_2_EEADDR_VALUEINIT;
							break;
    202c:	4d e4       	ldi	r20, 0x4D	; 77
    202e:	50 e0       	ldi	r21, 0x00	; 0
    2030:	6e e4       	ldi	r22, 0x4E	; 78
    2032:	70 e0       	ldi	r23, 0x00	; 0
    2034:	2f e4       	ldi	r18, 0x4F	; 79
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	1b c0       	rjmp	.+54     	; 0x2070 <Isb_Obj_Init+0x470>
					#if defined(ISB_OBJ_4BIT_3)
						case 3:
							eepAddrCtrl = ISB_OBJ_4BIT_3_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_4BIT_3_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_3_EEADDR_VALUEINIT;
							break;
    203a:	42 e6       	ldi	r20, 0x62	; 98
    203c:	50 e0       	ldi	r21, 0x00	; 0
    203e:	63 e6       	ldi	r22, 0x63	; 99
    2040:	70 e0       	ldi	r23, 0x00	; 0
    2042:	24 e6       	ldi	r18, 0x64	; 100
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	14 c0       	rjmp	.+40     	; 0x2070 <Isb_Obj_Init+0x470>
					#if defined(ISB_OBJ_4BIT_4)
						case 4:
							eepAddrCtrl = ISB_OBJ_4BIT_4_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_4BIT_4_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_4_EEADDR_VALUEINIT;
							break;
    2048:	47 e7       	ldi	r20, 0x77	; 119
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	68 e7       	ldi	r22, 0x78	; 120
    204e:	70 e0       	ldi	r23, 0x00	; 0
    2050:	29 e7       	ldi	r18, 0x79	; 121
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	0d c0       	rjmp	.+26     	; 0x2070 <Isb_Obj_Init+0x470>
					#if defined(ISB_OBJ_4BIT_5)
						case 5:
							eepAddrCtrl = ISB_OBJ_4BIT_5_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_4BIT_5_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_5_EEADDR_VALUEINIT;
							break;
    2056:	4c e8       	ldi	r20, 0x8C	; 140
    2058:	50 e0       	ldi	r21, 0x00	; 0
    205a:	6d e8       	ldi	r22, 0x8D	; 141
    205c:	70 e0       	ldi	r23, 0x00	; 0
    205e:	2e e8       	ldi	r18, 0x8E	; 142
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	06 c0       	rjmp	.+12     	; 0x2070 <Isb_Obj_Init+0x470>
					#if defined(ISB_OBJ_4BIT_6)
						case 6:
							eepAddrCtrl = ISB_OBJ_4BIT_6_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_4BIT_6_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_6_EEADDR_VALUEINIT;
							break;
    2064:	41 ea       	ldi	r20, 0xA1	; 161
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	62 ea       	ldi	r22, 0xA2	; 162
    206a:	70 e0       	ldi	r23, 0x00	; 0
    206c:	23 ea       	ldi	r18, 0xA3	; 163
    206e:	30 e0       	ldi	r19, 0x00	; 0
							eepAddrTov = ISB_OBJ_4BIT_31_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_31_EEADDR_VALUEINIT;
							break;
					#endif /* ISB_OBJ_4BIT_31 */
				}
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	ee 0f       	add	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	ec 5a       	subi	r30, 0xAC	; 172
    2078:	fc 4f       	sbci	r31, 0xFC	; 252
    207a:	80 81       	ld	r24, Z
    207c:	80 ff       	sbrs	r24, 0
    207e:	26 c0       	rjmp	.+76     	; 0x20cc <Isb_Obj_Init+0x4cc>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2080:	e1 99       	sbic	0x1c, 1	; 28
    2082:	fe cf       	rjmp	.-4      	; 0x2080 <Isb_Obj_Init+0x480>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2084:	40 0f       	add	r20, r16
    2086:	51 1f       	adc	r21, r17
    2088:	5f bb       	out	0x1f, r21	; 31
    208a:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
    208c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    208e:	8d b3       	in	r24, 0x1d	; 29
					Isb_Obj_4Bit[ObjIndex].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddrCtrl);
    2090:	88 83       	st	Y, r24
					if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    2092:	fd 01       	movw	r30, r26
    2094:	ee 0f       	add	r30, r30
    2096:	ff 1f       	adc	r31, r31
    2098:	ee 0f       	add	r30, r30
    209a:	ff 1f       	adc	r31, r31
    209c:	e5 51       	subi	r30, 0x15	; 21
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	80 81       	ld	r24, Z
    20a2:	80 ff       	sbrs	r24, 0
    20a4:	13 c0       	rjmp	.+38     	; 0x20cc <Isb_Obj_Init+0x4cc>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    20a6:	e1 99       	sbic	0x1c, 1	; 28
    20a8:	fe cf       	rjmp	.-4      	; 0x20a6 <Isb_Obj_Init+0x4a6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    20aa:	60 0f       	add	r22, r16
    20ac:	71 1f       	adc	r23, r17
    20ae:	7f bb       	out	0x1f, r23	; 31
    20b0:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
    20b2:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    20b4:	8d b3       	in	r24, 0x1d	; 29
						Isb_Obj_4Bit[ObjIndex].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddrTov);
    20b6:	89 83       	std	Y+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    20b8:	e1 99       	sbic	0x1c, 1	; 28
    20ba:	fe cf       	rjmp	.-4      	; 0x20b8 <Isb_Obj_Init+0x4b8>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    20bc:	20 0f       	add	r18, r16
    20be:	31 1f       	adc	r19, r17
    20c0:	3f bb       	out	0x1f, r19	; 31
    20c2:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    20c4:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    20c6:	8d b3       	in	r24, 0x1d	; 29
						Isb_Obj_4Bit[ObjIndex].Value = lib_eep_fw_read_byte((uint8_t *)eepAddrValueInit);
    20c8:	8a 83       	std	Y+2, r24	; 0x02
						Isb_Obj_4Bit[ObjIndex].IsChanged = FALSE;
    20ca:	1b 82       	std	Y+3, r1	; 0x03
    20cc:	11 96       	adiw	r26, 0x01	; 1
    20ce:	24 96       	adiw	r28, 0x04	; 4
				}
			}
		#endif /* ISB_OBJ_1BIT_MAX */

		#if defined(ISB_OBJ_4BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
    20d0:	a8 30       	cpi	r26, 0x08	; 8
    20d2:	b1 05       	cpc	r27, r1
    20d4:	09 f0       	breq	.+2      	; 0x20d8 <Isb_Obj_Init+0x4d8>
    20d6:	78 cf       	rjmp	.-272    	; 0x1fc8 <Isb_Obj_Init+0x3c8>
    20d8:	cc e0       	ldi	r28, 0x0C	; 12
    20da:	d1 e0       	ldi	r29, 0x01	; 1
    20dc:	a0 e0       	ldi	r26, 0x00	; 0
    20de:	b0 e0       	ldi	r27, 0x00	; 0
			}
		#endif /* ISB_OBJ_4BIT_MAX */

		#if defined(ISB_OBJ_8BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
				uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_8Bit_Ch_Array[ObjIndex]);
    20e0:	fd 01       	movw	r30, r26
    20e2:	e4 5b       	subi	r30, 0xB4	; 180
    20e4:	fe 4f       	sbci	r31, 0xFE	; 254
    20e6:	e4 91       	lpm	r30, Z+
				uint16_t eepAddrCtrl = 0;
				uint16_t eepAddrTov = 0;
				uint16_t eepAddrValueInit = 0;
				switch (ObjIndex) {
    20e8:	a3 30       	cpi	r26, 0x03	; 3
    20ea:	61 f1       	breq	.+88     	; 0x2144 <Isb_Obj_Init+0x544>
    20ec:	a4 30       	cpi	r26, 0x04	; 4
    20ee:	28 f4       	brcc	.+10     	; 0x20fa <Isb_Obj_Init+0x4fa>
    20f0:	a1 30       	cpi	r26, 0x01	; 1
    20f2:	d1 f0       	breq	.+52     	; 0x2128 <Isb_Obj_Init+0x528>
    20f4:	a2 30       	cpi	r26, 0x02	; 2
    20f6:	f8 f4       	brcc	.+62     	; 0x2136 <Isb_Obj_Init+0x536>
    20f8:	09 c0       	rjmp	.+18     	; 0x210c <Isb_Obj_Init+0x50c>
    20fa:	a5 30       	cpi	r26, 0x05	; 5
    20fc:	89 f1       	breq	.+98     	; 0x2160 <Isb_Obj_Init+0x560>
    20fe:	a5 30       	cpi	r26, 0x05	; 5
    2100:	40 f1       	brcs	.+80     	; 0x2152 <Isb_Obj_Init+0x552>
    2102:	a6 30       	cpi	r26, 0x06	; 6
    2104:	a1 f1       	breq	.+104    	; 0x216e <Isb_Obj_Init+0x56e>
    2106:	a7 30       	cpi	r26, 0x07	; 7
    2108:	41 f4       	brne	.+16     	; 0x211a <Isb_Obj_Init+0x51a>
    210a:	38 c0       	rjmp	.+112    	; 0x217c <Isb_Obj_Init+0x57c>
    210c:	41 e1       	ldi	r20, 0x11	; 17
    210e:	50 e0       	ldi	r21, 0x00	; 0
    2110:	62 e1       	ldi	r22, 0x12	; 18
    2112:	70 e0       	ldi	r23, 0x00	; 0
    2114:	23 e1       	ldi	r18, 0x13	; 19
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	37 c0       	rjmp	.+110    	; 0x2188 <Isb_Obj_Init+0x588>
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	50 e0       	ldi	r21, 0x00	; 0
    211e:	60 e0       	ldi	r22, 0x00	; 0
    2120:	70 e0       	ldi	r23, 0x00	; 0
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	30 c0       	rjmp	.+96     	; 0x2188 <Isb_Obj_Init+0x588>
    2128:	46 e2       	ldi	r20, 0x26	; 38
    212a:	50 e0       	ldi	r21, 0x00	; 0
    212c:	67 e2       	ldi	r22, 0x27	; 39
    212e:	70 e0       	ldi	r23, 0x00	; 0
    2130:	28 e2       	ldi	r18, 0x28	; 40
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	29 c0       	rjmp	.+82     	; 0x2188 <Isb_Obj_Init+0x588>
					#if defined(ISB_OBJ_8BIT_1)
						case 1:
							eepAddrCtrl = ISB_OBJ_8BIT_1_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_8BIT_1_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_1_EEADDR_VALUEINIT;
							break;
    2136:	4b e3       	ldi	r20, 0x3B	; 59
    2138:	50 e0       	ldi	r21, 0x00	; 0
    213a:	6c e3       	ldi	r22, 0x3C	; 60
    213c:	70 e0       	ldi	r23, 0x00	; 0
    213e:	2d e3       	ldi	r18, 0x3D	; 61
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	22 c0       	rjmp	.+68     	; 0x2188 <Isb_Obj_Init+0x588>
					#if defined(ISB_OBJ_8BIT_2)
						case 2:
							eepAddrCtrl = ISB_OBJ_8BIT_2_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_8BIT_2_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_2_EEADDR_VALUEINIT;
							break;
    2144:	40 e5       	ldi	r20, 0x50	; 80
    2146:	50 e0       	ldi	r21, 0x00	; 0
    2148:	61 e5       	ldi	r22, 0x51	; 81
    214a:	70 e0       	ldi	r23, 0x00	; 0
    214c:	22 e5       	ldi	r18, 0x52	; 82
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	1b c0       	rjmp	.+54     	; 0x2188 <Isb_Obj_Init+0x588>
					#if defined(ISB_OBJ_8BIT_3)
						case 3:
							eepAddrCtrl = ISB_OBJ_8BIT_3_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_8BIT_3_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_3_EEADDR_VALUEINIT;
							break;
    2152:	45 e6       	ldi	r20, 0x65	; 101
    2154:	50 e0       	ldi	r21, 0x00	; 0
    2156:	66 e6       	ldi	r22, 0x66	; 102
    2158:	70 e0       	ldi	r23, 0x00	; 0
    215a:	27 e6       	ldi	r18, 0x67	; 103
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	14 c0       	rjmp	.+40     	; 0x2188 <Isb_Obj_Init+0x588>
					#if defined(ISB_OBJ_8BIT_4)
						case 4:
							eepAddrCtrl = ISB_OBJ_8BIT_4_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_8BIT_4_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_4_EEADDR_VALUEINIT;
							break;
    2160:	4a e7       	ldi	r20, 0x7A	; 122
    2162:	50 e0       	ldi	r21, 0x00	; 0
    2164:	6b e7       	ldi	r22, 0x7B	; 123
    2166:	70 e0       	ldi	r23, 0x00	; 0
    2168:	2c e7       	ldi	r18, 0x7C	; 124
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	0d c0       	rjmp	.+26     	; 0x2188 <Isb_Obj_Init+0x588>
					#if defined(ISB_OBJ_8BIT_5)
						case 5:
							eepAddrCtrl = ISB_OBJ_8BIT_5_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_8BIT_5_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_5_EEADDR_VALUEINIT;
							break;
    216e:	4f e8       	ldi	r20, 0x8F	; 143
    2170:	50 e0       	ldi	r21, 0x00	; 0
    2172:	60 e9       	ldi	r22, 0x90	; 144
    2174:	70 e0       	ldi	r23, 0x00	; 0
    2176:	21 e9       	ldi	r18, 0x91	; 145
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	06 c0       	rjmp	.+12     	; 0x2188 <Isb_Obj_Init+0x588>
					#if defined(ISB_OBJ_8BIT_6)
						case 6:
							eepAddrCtrl = ISB_OBJ_8BIT_6_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_8BIT_6_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_6_EEADDR_VALUEINIT;
							break;
    217c:	44 ea       	ldi	r20, 0xA4	; 164
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	65 ea       	ldi	r22, 0xA5	; 165
    2182:	70 e0       	ldi	r23, 0x00	; 0
    2184:	26 ea       	ldi	r18, 0xA6	; 166
    2186:	30 e0       	ldi	r19, 0x00	; 0
							eepAddrTov = ISB_OBJ_8BIT_31_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_31_EEADDR_VALUEINIT;
							break;
					#endif /* ISB_OBJ_8BIT_31 */
				}
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	ee 0f       	add	r30, r30
    218c:	ff 1f       	adc	r31, r31
    218e:	ec 5a       	subi	r30, 0xAC	; 172
    2190:	fc 4f       	sbci	r31, 0xFC	; 252
    2192:	80 81       	ld	r24, Z
    2194:	80 ff       	sbrs	r24, 0
    2196:	26 c0       	rjmp	.+76     	; 0x21e4 <Isb_Obj_Init+0x5e4>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2198:	e1 99       	sbic	0x1c, 1	; 28
    219a:	fe cf       	rjmp	.-4      	; 0x2198 <Isb_Obj_Init+0x598>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    219c:	40 0f       	add	r20, r16
    219e:	51 1f       	adc	r21, r17
    21a0:	5f bb       	out	0x1f, r21	; 31
    21a2:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
    21a4:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    21a6:	8d b3       	in	r24, 0x1d	; 29
					Isb_Obj_8Bit[ObjIndex].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddrCtrl);
    21a8:	88 83       	st	Y, r24
					if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    21aa:	fd 01       	movw	r30, r26
    21ac:	ee 0f       	add	r30, r30
    21ae:	ff 1f       	adc	r31, r31
    21b0:	ee 0f       	add	r30, r30
    21b2:	ff 1f       	adc	r31, r31
    21b4:	e4 5f       	subi	r30, 0xF4	; 244
    21b6:	fe 4f       	sbci	r31, 0xFE	; 254
    21b8:	80 81       	ld	r24, Z
    21ba:	80 ff       	sbrs	r24, 0
    21bc:	13 c0       	rjmp	.+38     	; 0x21e4 <Isb_Obj_Init+0x5e4>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    21be:	e1 99       	sbic	0x1c, 1	; 28
    21c0:	fe cf       	rjmp	.-4      	; 0x21be <Isb_Obj_Init+0x5be>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    21c2:	60 0f       	add	r22, r16
    21c4:	71 1f       	adc	r23, r17
    21c6:	7f bb       	out	0x1f, r23	; 31
    21c8:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
    21ca:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    21cc:	8d b3       	in	r24, 0x1d	; 29
						Isb_Obj_8Bit[ObjIndex].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddrTov);
    21ce:	89 83       	std	Y+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    21d0:	e1 99       	sbic	0x1c, 1	; 28
    21d2:	fe cf       	rjmp	.-4      	; 0x21d0 <Isb_Obj_Init+0x5d0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    21d4:	20 0f       	add	r18, r16
    21d6:	31 1f       	adc	r19, r17
    21d8:	3f bb       	out	0x1f, r19	; 31
    21da:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    21dc:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    21de:	8d b3       	in	r24, 0x1d	; 29
						Isb_Obj_8Bit[ObjIndex].Value = lib_eep_fw_read_byte((uint8_t *)eepAddrValueInit);
    21e0:	8a 83       	std	Y+2, r24	; 0x02
						Isb_Obj_8Bit[ObjIndex].IsChanged = FALSE;
    21e2:	1b 82       	std	Y+3, r1	; 0x03
    21e4:	11 96       	adiw	r26, 0x01	; 1
    21e6:	24 96       	adiw	r28, 0x04	; 4
				}
			}
		#endif /* ISB_OBJ_4BIT_MAX */

		#if defined(ISB_OBJ_8BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
    21e8:	a8 30       	cpi	r26, 0x08	; 8
    21ea:	b1 05       	cpc	r27, r1
    21ec:	09 f0       	breq	.+2      	; 0x21f0 <Isb_Obj_Init+0x5f0>
    21ee:	78 cf       	rjmp	.-272    	; 0x20e0 <Isb_Obj_Init+0x4e0>
					}
				}
			}
		#endif /* ISB_OBJ_FLOAT_MAX */

	}
    21f0:	df 91       	pop	r29
    21f2:	cf 91       	pop	r28
    21f4:	1f 91       	pop	r17
    21f6:	0f 91       	pop	r16
    21f8:	08 95       	ret

000021fa <Isb_Grp_Init>:
#ifndef ISB_GRP_C_
	#define ISB_GRP_C_



	void Isb_Grp_Init(void) {
    21fa:	80 91 96 00 	lds	r24, 0x0096
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	26 59       	subi	r18, 0x96	; 150
    2204:	3e 4f       	sbci	r19, 0xFE	; 254
    2206:	ec e2       	ldi	r30, 0x2C	; 44
    2208:	f1 e0       	ldi	r31, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    220a:	e1 99       	sbic	0x1c, 1	; 28
    220c:	fe cf       	rjmp	.-4      	; 0x220a <Isb_Grp_Init+0x10>
    220e:	22 50       	subi	r18, 0x02	; 2
    2210:	30 40       	sbci	r19, 0x00	; 0
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2212:	3f bb       	out	0x1f, r19	; 31
    2214:	2e bb       	out	0x1e, r18	; 30
    2216:	2e 5f       	subi	r18, 0xFE	; 254
    2218:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
    EECR |= (1 << EERE);
    221a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    221c:	9d b3       	in	r25, 0x1d	; 29
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    221e:	e1 99       	sbic	0x1c, 1	; 28
    2220:	fe cf       	rjmp	.-4      	; 0x221e <Isb_Grp_Init+0x24>
    2222:	21 50       	subi	r18, 0x01	; 1
    2224:	30 40       	sbci	r19, 0x00	; 0
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2226:	3f bb       	out	0x1f, r19	; 31
    2228:	2e bb       	out	0x1e, r18	; 30
    222a:	2f 5f       	subi	r18, 0xFF	; 255
    222c:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
    EECR |= (1 << EERE);
    222e:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2230:	8d b3       	in	r24, 0x1d	; 29
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
			Isb_Grp[GrpIndex].Id = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3));
			Isb_Grp[GrpIndex].Id |= lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 1)) << 8;
    2232:	58 2f       	mov	r21, r24
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	89 2f       	mov	r24, r25
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	84 2b       	or	r24, r20
    223c:	95 2b       	or	r25, r21
    223e:	91 83       	std	Z+1, r25	; 0x01
    2240:	80 83       	st	Z, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2242:	e1 99       	sbic	0x1c, 1	; 28
    2244:	fe cf       	rjmp	.-4      	; 0x2242 <Isb_Grp_Init+0x48>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2246:	3f bb       	out	0x1f, r19	; 31
    2248:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    224a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    224c:	8d b3       	in	r24, 0x1d	; 29
			Isb_Grp[GrpIndex].Obj = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 2));
    224e:	82 83       	std	Z+2, r24	; 0x02
    2250:	2d 5f       	subi	r18, 0xFD	; 253
    2252:	3f 4f       	sbci	r19, 0xFF	; 255
    2254:	33 96       	adiw	r30, 0x03	; 3
	#define ISB_GRP_C_



	void Isb_Grp_Init(void) {
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	e4 3a       	cpi	r30, 0xA4	; 164
    225a:	f8 07       	cpc	r31, r24
    225c:	b1 f6       	brne	.-84     	; 0x220a <Isb_Grp_Init+0x10>
			Isb_Grp[GrpIndex].Id = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3));
			Isb_Grp[GrpIndex].Id |= lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 1)) << 8;
			Isb_Grp[GrpIndex].Obj = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 2));
		}
	}
    225e:	08 95       	ret

00002260 <Node_Reboot>:
	#include "./../lib/isb_obj.c"
	#include "./../lib/isb_grp.c"



	void Node_Reboot(void) {
    2260:	ff cf       	rjmp	.-2      	; 0x2260 <Node_Reboot>

00002262 <Isb_SendMsg>:
		while (1) ;
	}



	void Isb_SendMsg(Isb_Msg_t * aMsg) {
    2262:	cf 93       	push	r28
    2264:	df 93       	push	r29
    2266:	ec 01       	movw	r28, r24
		#endif /* ISB_INF_USART0 == 1 */
		#if ISB_INF_USART1 == 1
			Isb_Inf_Usart_Tx(1, aMsg);
		#endif /* ISB_INF_USART1 == 1 */
		#if ISB_INF_CAN0 == 1
			Isb_Inf_Can_Tx(0, aMsg);
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	be 01       	movw	r22, r28
    226c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <Isb_Inf_Can_Tx>
			Isb_Inf_Can_Tx(1, aMsg);
		#endif /* ISB_INF_CAN1 == 1 */
		#if ISB_INF_CAN2 == 1
			Isb_Inf_Can_Tx(2, aMsg);
		#endif /* ISB_INF_CAN2 == 1 */
		if ((aMsg->Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_MULTICAST) {
    2270:	88 81       	ld	r24, Y
    2272:	80 73       	andi	r24, 0x30	; 48
    2274:	80 32       	cpi	r24, 0x20	; 32
    2276:	39 f4       	brne	.+14     	; 0x2286 <Isb_SendMsg+0x24>
			if (Error == 0) {
    2278:	80 91 98 00 	lds	r24, 0x0098
    227c:	88 23       	and	r24, r24
    227e:	19 f4       	brne	.+6      	; 0x2286 <Isb_SendMsg+0x24>
				Isb_Obj_Rx(aMsg);
    2280:	ce 01       	movw	r24, r28
    2282:	0e 94 46 11 	call	0x228c	; 0x228c <Isb_Obj_Rx>
			}
		}
	}
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	08 95       	ret

0000228c <Isb_Obj_Rx>:

	}



	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg) {
    228c:	3f 92       	push	r3
    228e:	4f 92       	push	r4
    2290:	5f 92       	push	r5
    2292:	6f 92       	push	r6
    2294:	7f 92       	push	r7
    2296:	8f 92       	push	r8
    2298:	9f 92       	push	r9
    229a:	af 92       	push	r10
    229c:	bf 92       	push	r11
    229e:	cf 92       	push	r12
    22a0:	df 92       	push	r13
    22a2:	ef 92       	push	r14
    22a4:	ff 92       	push	r15
    22a6:	0f 93       	push	r16
    22a8:	1f 93       	push	r17
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	2d 97       	sbiw	r28, 0x0d	; 13
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	de bf       	out	0x3e, r29	; 62
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	cd bf       	out	0x3d, r28	; 61
    22be:	8c 01       	movw	r16, r24
    22c0:	fc e2       	ldi	r31, 0x2C	; 44
    22c2:	8f 2e       	mov	r8, r31
    22c4:	f1 e0       	ldi	r31, 0x01	; 1
    22c6:	9f 2e       	mov	r9, r31
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE) {
											if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE)) {
												if (aIsb_Msg->Data[2] == Isb_Obj_1Bit[ObjIndex].Tov) {
													if (Isb_Obj_1Bit[ObjIndex].Value != aIsb_Msg->Data[3]) {
														Isb_Obj_1Bit[ObjIndex].Value = aIsb_Msg->Data[3];
														Isb_Obj_1Bit[ObjIndex].IsChanged = TRUE;
    22c8:	44 24       	eor	r4, r4
    22ca:	43 94       	inc	r4
												TxMsg.SourceId = Isb_Node_Id;
												TxMsg.Data[0] = ISB_MSG_TOP_1BIT;
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
												TxMsg.Data[2] = Isb_Obj_1Bit[ObjIndex].Tov;
												TxMsg.Data[3] = Isb_Obj_1Bit[ObjIndex].Value;
												Isb_SendMsg(&TxMsg);
    22cc:	3e 01       	movw	r6, r28
    22ce:	08 94       	sec
    22d0:	61 1c       	adc	r6, r1
    22d2:	71 1c       	adc	r7, r1
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE) {
											if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE)) {
												if (aIsb_Msg->Data[2] == Isb_Obj_8Bit[ObjIndex].Tov) {
													if (Isb_Obj_8Bit[ObjIndex].Value != aIsb_Msg->Data[3]) {
														Isb_Obj_8Bit[ObjIndex].Value = aIsb_Msg->Data[3];
														Isb_Obj_8Bit[ObjIndex].IsChanged = TRUE;
    22d4:	33 24       	eor	r3, r3
    22d6:	33 94       	inc	r3
								if ((aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK) == ISB_MSG_FLAGS_DLC_4) {
									if (aIsb_Msg->Data[0] == ISB_MSG_TOP_8BIT) {
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ) {
											if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ)) {
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    22d8:	e4 e2       	ldi	r30, 0x24	; 36
    22da:	5e 2e       	mov	r5, r30



	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg) {
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
			if ((aIsb_Msg->DestId == Isb_Grp[GrpIndex].Id) & (aIsb_Msg->DestId != 0)) {
    22dc:	f8 01       	movw	r30, r16
    22de:	21 81       	ldd	r18, Z+1	; 0x01
    22e0:	32 81       	ldd	r19, Z+2	; 0x02
    22e2:	f4 01       	movw	r30, r8
    22e4:	80 81       	ld	r24, Z
    22e6:	91 81       	ldd	r25, Z+1	; 0x01
    22e8:	28 17       	cp	r18, r24
    22ea:	39 07       	cpc	r19, r25
    22ec:	09 f0       	breq	.+2      	; 0x22f0 <Isb_Obj_Rx+0x64>
    22ee:	77 c1       	rjmp	.+750    	; 0x25de <Isb_Obj_Rx+0x352>
    22f0:	23 2b       	or	r18, r19
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <Isb_Obj_Rx+0x6a>
    22f4:	74 c1       	rjmp	.+744    	; 0x25de <Isb_Obj_Rx+0x352>
    22f6:	75 ea       	ldi	r23, 0xA5	; 165
    22f8:	e7 2e       	mov	r14, r23
    22fa:	71 e0       	ldi	r23, 0x01	; 1
    22fc:	f7 2e       	mov	r15, r23
    22fe:	aa 24       	eor	r10, r10
    2300:	bb 24       	eor	r11, r11

				#if defined(ISB_OBJ_1BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
//						uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_1Bit_Ch_Array[ObjIndex]);
						uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_1Bit_Obj_Array[ObjIndex]);
    2302:	f5 01       	movw	r30, r10
    2304:	ec 53       	subi	r30, 0x3C	; 60
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	94 91       	lpm	r25, Z+
						if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    230a:	65 01       	movw	r12, r10
    230c:	cc 0c       	add	r12, r12
    230e:	dd 1c       	adc	r13, r13
    2310:	cc 0c       	add	r12, r12
    2312:	dd 1c       	adc	r13, r13
    2314:	24 ea       	ldi	r18, 0xA4	; 164
    2316:	31 e0       	ldi	r19, 0x01	; 1
    2318:	c2 0e       	add	r12, r18
    231a:	d3 1e       	adc	r13, r19
    231c:	f6 01       	movw	r30, r12
    231e:	80 81       	ld	r24, Z
    2320:	80 ff       	sbrs	r24, 0
    2322:	59 c0       	rjmp	.+178    	; 0x23d6 <Isb_Obj_Rx+0x14a>
							if (Obj == Isb_Grp[GrpIndex].Obj) {
    2324:	f4 01       	movw	r30, r8
    2326:	82 81       	ldd	r24, Z+2	; 0x02
    2328:	98 17       	cp	r25, r24
    232a:	09 f0       	breq	.+2      	; 0x232e <Isb_Obj_Rx+0xa2>
    232c:	54 c0       	rjmp	.+168    	; 0x23d6 <Isb_Obj_Rx+0x14a>
								if ((aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK) == ISB_MSG_FLAGS_DLC_4) {
    232e:	f8 01       	movw	r30, r16
    2330:	80 81       	ld	r24, Z
    2332:	8f 70       	andi	r24, 0x0F	; 15
    2334:	84 30       	cpi	r24, 0x04	; 4
    2336:	09 f0       	breq	.+2      	; 0x233a <Isb_Obj_Rx+0xae>
    2338:	4e c0       	rjmp	.+156    	; 0x23d6 <Isb_Obj_Rx+0x14a>
									if (aIsb_Msg->Data[0] == ISB_MSG_TOP_1BIT) {
    233a:	25 81       	ldd	r18, Z+5	; 0x05
    233c:	21 30       	cpi	r18, 0x01	; 1
    233e:	09 f0       	breq	.+2      	; 0x2342 <Isb_Obj_Rx+0xb6>
    2340:	4a c0       	rjmp	.+148    	; 0x23d6 <Isb_Obj_Rx+0x14a>
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ) {
    2342:	86 81       	ldd	r24, Z+6	; 0x06
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	83 70       	andi	r24, 0x03	; 3
    2348:	90 70       	andi	r25, 0x00	; 0
    234a:	89 2b       	or	r24, r25
    234c:	d1 f4       	brne	.+52     	; 0x2382 <Isb_Obj_Rx+0xf6>
											if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ)) {
    234e:	f6 01       	movw	r30, r12
    2350:	80 81       	ld	r24, Z
    2352:	81 ff       	sbrs	r24, 1
    2354:	16 c0       	rjmp	.+44     	; 0x2382 <Isb_Obj_Rx+0xf6>
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    2356:	59 82       	std	Y+1, r5	; 0x01
												TxMsg.DestId = aIsb_Msg->DestId;
    2358:	f8 01       	movw	r30, r16
    235a:	81 81       	ldd	r24, Z+1	; 0x01
    235c:	92 81       	ldd	r25, Z+2	; 0x02
    235e:	9b 83       	std	Y+3, r25	; 0x03
    2360:	8a 83       	std	Y+2, r24	; 0x02
												TxMsg.SourceId = Isb_Node_Id;
    2362:	80 91 94 00 	lds	r24, 0x0094
    2366:	90 91 95 00 	lds	r25, 0x0095
    236a:	9d 83       	std	Y+5, r25	; 0x05
    236c:	8c 83       	std	Y+4, r24	; 0x04
												TxMsg.Data[0] = ISB_MSG_TOP_1BIT;
    236e:	2e 83       	std	Y+6, r18	; 0x06
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
    2370:	2f 83       	std	Y+7, r18	; 0x07
												TxMsg.Data[2] = Isb_Obj_1Bit[ObjIndex].Tov;
    2372:	f7 01       	movw	r30, r14
    2374:	80 81       	ld	r24, Z
    2376:	88 87       	std	Y+8, r24	; 0x08
												TxMsg.Data[3] = Isb_Obj_1Bit[ObjIndex].Value;
    2378:	81 81       	ldd	r24, Z+1	; 0x01
    237a:	89 87       	std	Y+9, r24	; 0x09
												Isb_SendMsg(&TxMsg);
    237c:	c3 01       	movw	r24, r6
    237e:	0e 94 31 11 	call	0x2262	; 0x2262 <Isb_SendMsg>
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_ANSWER) {
    2382:	f8 01       	movw	r30, r16
    2384:	86 81       	ldd	r24, Z+6	; 0x06
    2386:	83 70       	andi	r24, 0x03	; 3
    2388:	81 30       	cpi	r24, 0x01	; 1
    238a:	71 f4       	brne	.+28     	; 0x23a8 <Isb_Obj_Rx+0x11c>
											if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_UPDATE)) {
    238c:	f6 01       	movw	r30, r12
    238e:	80 81       	ld	r24, Z
    2390:	84 ff       	sbrs	r24, 4
    2392:	0a c0       	rjmp	.+20     	; 0x23a8 <Isb_Obj_Rx+0x11c>
												if (aIsb_Msg->Data[2] == Isb_Obj_1Bit[ObjIndex].Tov) {
    2394:	f8 01       	movw	r30, r16
    2396:	97 81       	ldd	r25, Z+7	; 0x07
    2398:	f7 01       	movw	r30, r14
    239a:	80 81       	ld	r24, Z
    239c:	98 17       	cp	r25, r24
    239e:	21 f4       	brne	.+8      	; 0x23a8 <Isb_Obj_Rx+0x11c>
													Isb_Obj_1Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    23a0:	f8 01       	movw	r30, r16
    23a2:	80 85       	ldd	r24, Z+8	; 0x08
    23a4:	f7 01       	movw	r30, r14
    23a6:	81 83       	std	Z+1, r24	; 0x01
												}
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE) {
    23a8:	f8 01       	movw	r30, r16
    23aa:	86 81       	ldd	r24, Z+6	; 0x06
    23ac:	83 70       	andi	r24, 0x03	; 3
    23ae:	82 30       	cpi	r24, 0x02	; 2
    23b0:	91 f4       	brne	.+36     	; 0x23d6 <Isb_Obj_Rx+0x14a>
											if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE)) {
    23b2:	f6 01       	movw	r30, r12
    23b4:	80 81       	ld	r24, Z
    23b6:	82 ff       	sbrs	r24, 2
    23b8:	0e c0       	rjmp	.+28     	; 0x23d6 <Isb_Obj_Rx+0x14a>
												if (aIsb_Msg->Data[2] == Isb_Obj_1Bit[ObjIndex].Tov) {
    23ba:	f8 01       	movw	r30, r16
    23bc:	97 81       	ldd	r25, Z+7	; 0x07
    23be:	f7 01       	movw	r30, r14
    23c0:	80 81       	ld	r24, Z
    23c2:	98 17       	cp	r25, r24
    23c4:	41 f4       	brne	.+16     	; 0x23d6 <Isb_Obj_Rx+0x14a>
													if (Isb_Obj_1Bit[ObjIndex].Value != aIsb_Msg->Data[3]) {
    23c6:	f8 01       	movw	r30, r16
    23c8:	90 85       	ldd	r25, Z+8	; 0x08
    23ca:	f7 01       	movw	r30, r14
    23cc:	81 81       	ldd	r24, Z+1	; 0x01
    23ce:	89 17       	cp	r24, r25
    23d0:	11 f0       	breq	.+4      	; 0x23d6 <Isb_Obj_Rx+0x14a>
														Isb_Obj_1Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    23d2:	91 83       	std	Z+1, r25	; 0x01
														Isb_Obj_1Bit[ObjIndex].IsChanged = TRUE;
    23d4:	42 82       	std	Z+2, r4	; 0x02
    23d6:	08 94       	sec
    23d8:	a1 1c       	adc	r10, r1
    23da:	b1 1c       	adc	r11, r1
    23dc:	24 e0       	ldi	r18, 0x04	; 4
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	e2 0e       	add	r14, r18
    23e2:	f3 1e       	adc	r15, r19
	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg) {
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
			if ((aIsb_Msg->DestId == Isb_Grp[GrpIndex].Id) & (aIsb_Msg->DestId != 0)) {

				#if defined(ISB_OBJ_1BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
    23e4:	38 e3       	ldi	r19, 0x38	; 56
    23e6:	a3 16       	cp	r10, r19
    23e8:	b1 04       	cpc	r11, r1
    23ea:	09 f0       	breq	.+2      	; 0x23ee <Isb_Obj_Rx+0x162>
    23ec:	8a cf       	rjmp	.-236    	; 0x2302 <Isb_Obj_Rx+0x76>
    23ee:	5c ee       	ldi	r21, 0xEC	; 236
    23f0:	e5 2e       	mov	r14, r21
    23f2:	50 e0       	ldi	r21, 0x00	; 0
    23f4:	f5 2e       	mov	r15, r21
    23f6:	aa 24       	eor	r10, r10
    23f8:	bb 24       	eor	r11, r11
				#endif /* ISB_OBJ_1BIT_MAX */

				#if defined(ISB_OBJ_4BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
//						uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_4Bit_Ch_Array[ObjIndex]);
						uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_4Bit_Obj_Array[ObjIndex]);
    23fa:	f5 01       	movw	r30, r10
    23fc:	e4 50       	subi	r30, 0x04	; 4
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	94 91       	lpm	r25, Z+
						if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    2402:	65 01       	movw	r12, r10
    2404:	cc 0c       	add	r12, r12
    2406:	dd 1c       	adc	r13, r13
    2408:	cc 0c       	add	r12, r12
    240a:	dd 1c       	adc	r13, r13
    240c:	eb ee       	ldi	r30, 0xEB	; 235
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	ce 0e       	add	r12, r30
    2412:	df 1e       	adc	r13, r31
    2414:	f6 01       	movw	r30, r12
    2416:	80 81       	ld	r24, Z
    2418:	80 ff       	sbrs	r24, 0
    241a:	59 c0       	rjmp	.+178    	; 0x24ce <Isb_Obj_Rx+0x242>
							if (Obj == Isb_Grp[GrpIndex].Obj) {
    241c:	f4 01       	movw	r30, r8
    241e:	82 81       	ldd	r24, Z+2	; 0x02
    2420:	98 17       	cp	r25, r24
    2422:	09 f0       	breq	.+2      	; 0x2426 <Isb_Obj_Rx+0x19a>
    2424:	54 c0       	rjmp	.+168    	; 0x24ce <Isb_Obj_Rx+0x242>
								if ((aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK) == ISB_MSG_FLAGS_DLC_4) {
    2426:	f8 01       	movw	r30, r16
    2428:	80 81       	ld	r24, Z
    242a:	8f 70       	andi	r24, 0x0F	; 15
    242c:	84 30       	cpi	r24, 0x04	; 4
    242e:	09 f0       	breq	.+2      	; 0x2432 <Isb_Obj_Rx+0x1a6>
    2430:	4e c0       	rjmp	.+156    	; 0x24ce <Isb_Obj_Rx+0x242>
									if (aIsb_Msg->Data[0] == ISB_MSG_TOP_4BIT) {
    2432:	25 81       	ldd	r18, Z+5	; 0x05
    2434:	22 30       	cpi	r18, 0x02	; 2
    2436:	09 f0       	breq	.+2      	; 0x243a <Isb_Obj_Rx+0x1ae>
    2438:	4a c0       	rjmp	.+148    	; 0x24ce <Isb_Obj_Rx+0x242>
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ) {
    243a:	86 81       	ldd	r24, Z+6	; 0x06
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	83 70       	andi	r24, 0x03	; 3
    2440:	90 70       	andi	r25, 0x00	; 0
    2442:	89 2b       	or	r24, r25
    2444:	d1 f4       	brne	.+52     	; 0x247a <Isb_Obj_Rx+0x1ee>
											if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ)) {
    2446:	f6 01       	movw	r30, r12
    2448:	80 81       	ld	r24, Z
    244a:	81 ff       	sbrs	r24, 1
    244c:	16 c0       	rjmp	.+44     	; 0x247a <Isb_Obj_Rx+0x1ee>
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    244e:	59 82       	std	Y+1, r5	; 0x01
												TxMsg.DestId = aIsb_Msg->DestId;
    2450:	f8 01       	movw	r30, r16
    2452:	81 81       	ldd	r24, Z+1	; 0x01
    2454:	92 81       	ldd	r25, Z+2	; 0x02
    2456:	9b 83       	std	Y+3, r25	; 0x03
    2458:	8a 83       	std	Y+2, r24	; 0x02
												TxMsg.SourceId = Isb_Node_Id;
    245a:	80 91 94 00 	lds	r24, 0x0094
    245e:	90 91 95 00 	lds	r25, 0x0095
    2462:	9d 83       	std	Y+5, r25	; 0x05
    2464:	8c 83       	std	Y+4, r24	; 0x04
												TxMsg.Data[0] = ISB_MSG_TOP_4BIT;
    2466:	2e 83       	std	Y+6, r18	; 0x06
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
    2468:	3f 82       	std	Y+7, r3	; 0x07
												TxMsg.Data[2] = Isb_Obj_4Bit[ObjIndex].Tov;
    246a:	f7 01       	movw	r30, r14
    246c:	80 81       	ld	r24, Z
    246e:	88 87       	std	Y+8, r24	; 0x08
												TxMsg.Data[3] = Isb_Obj_4Bit[ObjIndex].Value;
    2470:	81 81       	ldd	r24, Z+1	; 0x01
    2472:	89 87       	std	Y+9, r24	; 0x09
												Isb_SendMsg(&TxMsg);
    2474:	c3 01       	movw	r24, r6
    2476:	0e 94 31 11 	call	0x2262	; 0x2262 <Isb_SendMsg>
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_ANSWER) {
    247a:	f8 01       	movw	r30, r16
    247c:	86 81       	ldd	r24, Z+6	; 0x06
    247e:	83 70       	andi	r24, 0x03	; 3
    2480:	81 30       	cpi	r24, 0x01	; 1
    2482:	71 f4       	brne	.+28     	; 0x24a0 <Isb_Obj_Rx+0x214>
											if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_UPDATE)) {
    2484:	f6 01       	movw	r30, r12
    2486:	80 81       	ld	r24, Z
    2488:	84 ff       	sbrs	r24, 4
    248a:	0a c0       	rjmp	.+20     	; 0x24a0 <Isb_Obj_Rx+0x214>
												if (aIsb_Msg->Data[2] == Isb_Obj_4Bit[ObjIndex].Tov) {
    248c:	f8 01       	movw	r30, r16
    248e:	97 81       	ldd	r25, Z+7	; 0x07
    2490:	f7 01       	movw	r30, r14
    2492:	80 81       	ld	r24, Z
    2494:	98 17       	cp	r25, r24
    2496:	21 f4       	brne	.+8      	; 0x24a0 <Isb_Obj_Rx+0x214>
													Isb_Obj_4Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    2498:	f8 01       	movw	r30, r16
    249a:	80 85       	ldd	r24, Z+8	; 0x08
    249c:	f7 01       	movw	r30, r14
    249e:	81 83       	std	Z+1, r24	; 0x01
												}
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE) {
    24a0:	f8 01       	movw	r30, r16
    24a2:	86 81       	ldd	r24, Z+6	; 0x06
    24a4:	83 70       	andi	r24, 0x03	; 3
    24a6:	82 30       	cpi	r24, 0x02	; 2
    24a8:	91 f4       	brne	.+36     	; 0x24ce <Isb_Obj_Rx+0x242>
											if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE)) {
    24aa:	f6 01       	movw	r30, r12
    24ac:	80 81       	ld	r24, Z
    24ae:	82 ff       	sbrs	r24, 2
    24b0:	0e c0       	rjmp	.+28     	; 0x24ce <Isb_Obj_Rx+0x242>
												if (aIsb_Msg->Data[2] == Isb_Obj_4Bit[ObjIndex].Tov) {
    24b2:	f8 01       	movw	r30, r16
    24b4:	97 81       	ldd	r25, Z+7	; 0x07
    24b6:	f7 01       	movw	r30, r14
    24b8:	80 81       	ld	r24, Z
    24ba:	98 17       	cp	r25, r24
    24bc:	41 f4       	brne	.+16     	; 0x24ce <Isb_Obj_Rx+0x242>
													if (Isb_Obj_4Bit[ObjIndex].Value != aIsb_Msg->Data[3]) {
    24be:	f8 01       	movw	r30, r16
    24c0:	90 85       	ldd	r25, Z+8	; 0x08
    24c2:	f7 01       	movw	r30, r14
    24c4:	81 81       	ldd	r24, Z+1	; 0x01
    24c6:	89 17       	cp	r24, r25
    24c8:	11 f0       	breq	.+4      	; 0x24ce <Isb_Obj_Rx+0x242>
														Isb_Obj_4Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    24ca:	91 83       	std	Z+1, r25	; 0x01
														Isb_Obj_4Bit[ObjIndex].IsChanged = TRUE;
    24cc:	42 82       	std	Z+2, r4	; 0x02
    24ce:	08 94       	sec
    24d0:	a1 1c       	adc	r10, r1
    24d2:	b1 1c       	adc	r11, r1
    24d4:	24 e0       	ldi	r18, 0x04	; 4
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	e2 0e       	add	r14, r18
    24da:	f3 1e       	adc	r15, r19
						}
					}
				#endif /* ISB_OBJ_1BIT_MAX */

				#if defined(ISB_OBJ_4BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
    24dc:	38 e0       	ldi	r19, 0x08	; 8
    24de:	a3 16       	cp	r10, r19
    24e0:	b1 04       	cpc	r11, r1
    24e2:	09 f0       	breq	.+2      	; 0x24e6 <Isb_Obj_Rx+0x25a>
    24e4:	8a cf       	rjmp	.-236    	; 0x23fa <Isb_Obj_Rx+0x16e>
    24e6:	3d e0       	ldi	r19, 0x0D	; 13
    24e8:	e3 2e       	mov	r14, r19
    24ea:	31 e0       	ldi	r19, 0x01	; 1
    24ec:	f3 2e       	mov	r15, r19
    24ee:	aa 24       	eor	r10, r10
    24f0:	bb 24       	eor	r11, r11
				#endif /* ISB_OBJ_4BIT_MAX */

				#if defined(ISB_OBJ_8BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
//						uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_8Bit_Ch_Array[ObjIndex]);
						uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_8Bit_Obj_Array[ObjIndex]);
    24f2:	f5 01       	movw	r30, r10
    24f4:	ec 5f       	subi	r30, 0xFC	; 252
    24f6:	fe 4f       	sbci	r31, 0xFE	; 254
    24f8:	94 91       	lpm	r25, Z+
						if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    24fa:	65 01       	movw	r12, r10
    24fc:	cc 0c       	add	r12, r12
    24fe:	dd 1c       	adc	r13, r13
    2500:	cc 0c       	add	r12, r12
    2502:	dd 1c       	adc	r13, r13
    2504:	ec e0       	ldi	r30, 0x0C	; 12
    2506:	f1 e0       	ldi	r31, 0x01	; 1
    2508:	ce 0e       	add	r12, r30
    250a:	df 1e       	adc	r13, r31
    250c:	f6 01       	movw	r30, r12
    250e:	80 81       	ld	r24, Z
    2510:	80 ff       	sbrs	r24, 0
    2512:	59 c0       	rjmp	.+178    	; 0x25c6 <Isb_Obj_Rx+0x33a>
							if (Obj == Isb_Grp[GrpIndex].Obj) {
    2514:	f4 01       	movw	r30, r8
    2516:	82 81       	ldd	r24, Z+2	; 0x02
    2518:	98 17       	cp	r25, r24
    251a:	09 f0       	breq	.+2      	; 0x251e <Isb_Obj_Rx+0x292>
    251c:	54 c0       	rjmp	.+168    	; 0x25c6 <Isb_Obj_Rx+0x33a>
								if ((aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK) == ISB_MSG_FLAGS_DLC_4) {
    251e:	f8 01       	movw	r30, r16
    2520:	80 81       	ld	r24, Z
    2522:	8f 70       	andi	r24, 0x0F	; 15
    2524:	84 30       	cpi	r24, 0x04	; 4
    2526:	09 f0       	breq	.+2      	; 0x252a <Isb_Obj_Rx+0x29e>
    2528:	4e c0       	rjmp	.+156    	; 0x25c6 <Isb_Obj_Rx+0x33a>
									if (aIsb_Msg->Data[0] == ISB_MSG_TOP_8BIT) {
    252a:	25 81       	ldd	r18, Z+5	; 0x05
    252c:	23 30       	cpi	r18, 0x03	; 3
    252e:	09 f0       	breq	.+2      	; 0x2532 <Isb_Obj_Rx+0x2a6>
    2530:	4a c0       	rjmp	.+148    	; 0x25c6 <Isb_Obj_Rx+0x33a>
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ) {
    2532:	86 81       	ldd	r24, Z+6	; 0x06
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	83 70       	andi	r24, 0x03	; 3
    2538:	90 70       	andi	r25, 0x00	; 0
    253a:	89 2b       	or	r24, r25
    253c:	d1 f4       	brne	.+52     	; 0x2572 <Isb_Obj_Rx+0x2e6>
											if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ)) {
    253e:	f6 01       	movw	r30, r12
    2540:	80 81       	ld	r24, Z
    2542:	81 ff       	sbrs	r24, 1
    2544:	16 c0       	rjmp	.+44     	; 0x2572 <Isb_Obj_Rx+0x2e6>
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    2546:	59 82       	std	Y+1, r5	; 0x01
												TxMsg.DestId = aIsb_Msg->DestId;
    2548:	f8 01       	movw	r30, r16
    254a:	81 81       	ldd	r24, Z+1	; 0x01
    254c:	92 81       	ldd	r25, Z+2	; 0x02
    254e:	9b 83       	std	Y+3, r25	; 0x03
    2550:	8a 83       	std	Y+2, r24	; 0x02
												TxMsg.SourceId = Isb_Node_Id;
    2552:	80 91 94 00 	lds	r24, 0x0094
    2556:	90 91 95 00 	lds	r25, 0x0095
    255a:	9d 83       	std	Y+5, r25	; 0x05
    255c:	8c 83       	std	Y+4, r24	; 0x04
												TxMsg.Data[0] = ISB_MSG_TOP_8BIT;
    255e:	2e 83       	std	Y+6, r18	; 0x06
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
    2560:	3f 82       	std	Y+7, r3	; 0x07
												TxMsg.Data[2] = Isb_Obj_8Bit[ObjIndex].Tov;
    2562:	f7 01       	movw	r30, r14
    2564:	80 81       	ld	r24, Z
    2566:	88 87       	std	Y+8, r24	; 0x08
												TxMsg.Data[3] = Isb_Obj_8Bit[ObjIndex].Value;
    2568:	81 81       	ldd	r24, Z+1	; 0x01
    256a:	89 87       	std	Y+9, r24	; 0x09
												Isb_SendMsg(&TxMsg);
    256c:	c3 01       	movw	r24, r6
    256e:	0e 94 31 11 	call	0x2262	; 0x2262 <Isb_SendMsg>
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_ANSWER) {
    2572:	f8 01       	movw	r30, r16
    2574:	86 81       	ldd	r24, Z+6	; 0x06
    2576:	83 70       	andi	r24, 0x03	; 3
    2578:	81 30       	cpi	r24, 0x01	; 1
    257a:	71 f4       	brne	.+28     	; 0x2598 <Isb_Obj_Rx+0x30c>
											if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_UPDATE)) {
    257c:	f6 01       	movw	r30, r12
    257e:	80 81       	ld	r24, Z
    2580:	84 ff       	sbrs	r24, 4
    2582:	0a c0       	rjmp	.+20     	; 0x2598 <Isb_Obj_Rx+0x30c>
												if (aIsb_Msg->Data[2] == Isb_Obj_8Bit[ObjIndex].Tov) {
    2584:	f8 01       	movw	r30, r16
    2586:	97 81       	ldd	r25, Z+7	; 0x07
    2588:	f7 01       	movw	r30, r14
    258a:	80 81       	ld	r24, Z
    258c:	98 17       	cp	r25, r24
    258e:	21 f4       	brne	.+8      	; 0x2598 <Isb_Obj_Rx+0x30c>
													Isb_Obj_8Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    2590:	f8 01       	movw	r30, r16
    2592:	80 85       	ldd	r24, Z+8	; 0x08
    2594:	f7 01       	movw	r30, r14
    2596:	81 83       	std	Z+1, r24	; 0x01
												}
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE) {
    2598:	f8 01       	movw	r30, r16
    259a:	86 81       	ldd	r24, Z+6	; 0x06
    259c:	83 70       	andi	r24, 0x03	; 3
    259e:	82 30       	cpi	r24, 0x02	; 2
    25a0:	91 f4       	brne	.+36     	; 0x25c6 <Isb_Obj_Rx+0x33a>
											if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE)) {
    25a2:	f6 01       	movw	r30, r12
    25a4:	80 81       	ld	r24, Z
    25a6:	82 ff       	sbrs	r24, 2
    25a8:	0e c0       	rjmp	.+28     	; 0x25c6 <Isb_Obj_Rx+0x33a>
												if (aIsb_Msg->Data[2] == Isb_Obj_8Bit[ObjIndex].Tov) {
    25aa:	f8 01       	movw	r30, r16
    25ac:	97 81       	ldd	r25, Z+7	; 0x07
    25ae:	f7 01       	movw	r30, r14
    25b0:	80 81       	ld	r24, Z
    25b2:	98 17       	cp	r25, r24
    25b4:	41 f4       	brne	.+16     	; 0x25c6 <Isb_Obj_Rx+0x33a>
													if (Isb_Obj_8Bit[ObjIndex].Value != aIsb_Msg->Data[3]) {
    25b6:	f8 01       	movw	r30, r16
    25b8:	90 85       	ldd	r25, Z+8	; 0x08
    25ba:	f7 01       	movw	r30, r14
    25bc:	81 81       	ldd	r24, Z+1	; 0x01
    25be:	89 17       	cp	r24, r25
    25c0:	11 f0       	breq	.+4      	; 0x25c6 <Isb_Obj_Rx+0x33a>
														Isb_Obj_8Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    25c2:	91 83       	std	Z+1, r25	; 0x01
														Isb_Obj_8Bit[ObjIndex].IsChanged = TRUE;
    25c4:	42 82       	std	Z+2, r4	; 0x02
    25c6:	08 94       	sec
    25c8:	a1 1c       	adc	r10, r1
    25ca:	b1 1c       	adc	r11, r1
    25cc:	24 e0       	ldi	r18, 0x04	; 4
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	e2 0e       	add	r14, r18
    25d2:	f3 1e       	adc	r15, r19
						}
					}
				#endif /* ISB_OBJ_4BIT_MAX */

				#if defined(ISB_OBJ_8BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
    25d4:	38 e0       	ldi	r19, 0x08	; 8
    25d6:	a3 16       	cp	r10, r19
    25d8:	b1 04       	cpc	r11, r1
    25da:	09 f0       	breq	.+2      	; 0x25de <Isb_Obj_Rx+0x352>
    25dc:	8a cf       	rjmp	.-236    	; 0x24f2 <Isb_Obj_Rx+0x266>
    25de:	83 e0       	ldi	r24, 0x03	; 3
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	88 0e       	add	r8, r24
    25e4:	99 1e       	adc	r9, r25
	}



	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg) {
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    25e6:	94 ea       	ldi	r25, 0xA4	; 164
    25e8:	89 16       	cp	r8, r25
    25ea:	91 e0       	ldi	r25, 0x01	; 1
    25ec:	99 06       	cpc	r9, r25
    25ee:	09 f0       	breq	.+2      	; 0x25f2 <Isb_Obj_Rx+0x366>
    25f0:	75 ce       	rjmp	.-790    	; 0x22dc <Isb_Obj_Rx+0x50>
					}
				#endif /* ISB_OBJ_FLOAT_MAX */

			}
		}
	}
    25f2:	2d 96       	adiw	r28, 0x0d	; 13
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	cd bf       	out	0x3d, r28	; 61
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	1f 91       	pop	r17
    2604:	0f 91       	pop	r16
    2606:	ff 90       	pop	r15
    2608:	ef 90       	pop	r14
    260a:	df 90       	pop	r13
    260c:	cf 90       	pop	r12
    260e:	bf 90       	pop	r11
    2610:	af 90       	pop	r10
    2612:	9f 90       	pop	r9
    2614:	8f 90       	pop	r8
    2616:	7f 90       	pop	r7
    2618:	6f 90       	pop	r6
    261a:	5f 90       	pop	r5
    261c:	4f 90       	pop	r4
    261e:	3f 90       	pop	r3
    2620:	08 95       	ret

00002622 <Isb_Obj_Exec>:

	}



	void Isb_Obj_Exec(void) {
    2622:	7f 92       	push	r7
    2624:	8f 92       	push	r8
    2626:	9f 92       	push	r9
    2628:	af 92       	push	r10
    262a:	bf 92       	push	r11
    262c:	cf 92       	push	r12
    262e:	df 92       	push	r13
    2630:	ef 92       	push	r14
    2632:	ff 92       	push	r15
    2634:	0f 93       	push	r16
    2636:	1f 93       	push	r17
    2638:	df 93       	push	r29
    263a:	cf 93       	push	r28
    263c:	cd b7       	in	r28, 0x3d	; 61
    263e:	de b7       	in	r29, 0x3e	; 62
    2640:	2d 97       	sbiw	r28, 0x0d	; 13
    2642:	0f b6       	in	r0, 0x3f	; 63
    2644:	f8 94       	cli
    2646:	de bf       	out	0x3e, r29	; 62
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	cd bf       	out	0x3d, r28	; 61

		#if defined(ISB_OBJ_1BIT_MAX)
			if (bit_is_set(Isb_Obj_1Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
    264c:	80 91 a2 00 	lds	r24, 0x00A2
    2650:	80 ff       	sbrs	r24, 0
    2652:	71 c0       	rjmp	.+226    	; 0x2736 <Isb_Obj_Exec+0x114>
    2654:	04 ea       	ldi	r16, 0xA4	; 164
    2656:	11 e0       	ldi	r17, 0x01	; 1
    2658:	cc 24       	eor	r12, r12
    265a:	dd 24       	eor	r13, r13
								if (Isb_Obj_1Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_1Bit_Obj_Array[ObjIndex]);
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    265c:	84 e2       	ldi	r24, 0x24	; 36
    265e:	78 2e       	mov	r7, r24
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
											TxMsg.SourceId = Isb_Node_Id;
											TxMsg.Data[0] = ISB_MSG_TOP_1BIT;
    2660:	88 24       	eor	r8, r8
    2662:	83 94       	inc	r8
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    2664:	b2 e0       	ldi	r27, 0x02	; 2
    2666:	9b 2e       	mov	r9, r27
											TxMsg.Data[2] = Isb_Obj_1Bit[ObjIndex].Tov;
											TxMsg.Data[3] = Isb_Obj_1Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
    2668:	5e 01       	movw	r10, r28
    266a:	08 94       	sec
    266c:	a1 1c       	adc	r10, r1
    266e:	b1 1c       	adc	r11, r1
	void Isb_Obj_Exec(void) {

		#if defined(ISB_OBJ_1BIT_MAX)
			if (bit_is_set(Isb_Obj_1Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_1Bit_Ch_Array[ObjIndex]);
    2670:	f6 01       	movw	r30, r12
    2672:	e4 5f       	subi	r30, 0xF4	; 244
    2674:	fe 4f       	sbci	r31, 0xFE	; 254
    2676:	e4 91       	lpm	r30, Z+
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	ee 0f       	add	r30, r30
    267c:	ff 1f       	adc	r31, r31
    267e:	ec 5a       	subi	r30, 0xAC	; 172
    2680:	fc 4f       	sbci	r31, 0xFC	; 252
    2682:	80 81       	ld	r24, Z
    2684:	80 ff       	sbrs	r24, 0
    2686:	48 c0       	rjmp	.+144    	; 0x2718 <Isb_Obj_Exec+0xf6>
						if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    2688:	76 01       	movw	r14, r12
    268a:	ee 0c       	add	r14, r14
    268c:	ff 1c       	adc	r15, r15
    268e:	ee 0c       	add	r14, r14
    2690:	ff 1c       	adc	r15, r15
    2692:	84 ea       	ldi	r24, 0xA4	; 164
    2694:	91 e0       	ldi	r25, 0x01	; 1
    2696:	e8 0e       	add	r14, r24
    2698:	f9 1e       	adc	r15, r25
    269a:	f7 01       	movw	r30, r14
    269c:	80 81       	ld	r24, Z
    269e:	80 ff       	sbrs	r24, 0
    26a0:	3b c0       	rjmp	.+118    	; 0x2718 <Isb_Obj_Exec+0xf6>
							if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
    26a2:	80 81       	ld	r24, Z
    26a4:	83 ff       	sbrs	r24, 3
    26a6:	30 c0       	rjmp	.+96     	; 0x2708 <Isb_Obj_Exec+0xe6>
								if (Isb_Obj_1Bit[ObjIndex].IsChanged == TRUE) {
    26a8:	f8 01       	movw	r30, r16
    26aa:	83 81       	ldd	r24, Z+3	; 0x03
    26ac:	81 30       	cpi	r24, 0x01	; 1
    26ae:	61 f5       	brne	.+88     	; 0x2708 <Isb_Obj_Exec+0xe6>
    26b0:	ac e2       	ldi	r26, 0x2C	; 44
    26b2:	b1 e0       	ldi	r27, 0x01	; 1
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_1Bit_Obj_Array[ObjIndex]);
    26b4:	f6 01       	movw	r30, r12
    26b6:	ec 53       	subi	r30, 0x3C	; 60
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	94 91       	lpm	r25, Z+
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
    26bc:	2d 91       	ld	r18, X+
    26be:	3c 91       	ld	r19, X
    26c0:	11 97       	sbiw	r26, 0x01	; 1
    26c2:	12 96       	adiw	r26, 0x02	; 2
    26c4:	8c 91       	ld	r24, X
    26c6:	12 97       	sbiw	r26, 0x02	; 2
    26c8:	89 17       	cp	r24, r25
    26ca:	b9 f4       	brne	.+46     	; 0x26fa <Isb_Obj_Exec+0xd8>
    26cc:	21 15       	cp	r18, r1
    26ce:	31 05       	cpc	r19, r1
    26d0:	a1 f0       	breq	.+40     	; 0x26fa <Isb_Obj_Exec+0xd8>
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    26d2:	79 82       	std	Y+1, r7	; 0x01
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
    26d4:	3b 83       	std	Y+3, r19	; 0x03
    26d6:	2a 83       	std	Y+2, r18	; 0x02
											TxMsg.SourceId = Isb_Node_Id;
    26d8:	80 91 94 00 	lds	r24, 0x0094
    26dc:	90 91 95 00 	lds	r25, 0x0095
    26e0:	9d 83       	std	Y+5, r25	; 0x05
    26e2:	8c 83       	std	Y+4, r24	; 0x04
											TxMsg.Data[0] = ISB_MSG_TOP_1BIT;
    26e4:	8e 82       	std	Y+6, r8	; 0x06
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    26e6:	9f 82       	std	Y+7, r9	; 0x07
											TxMsg.Data[2] = Isb_Obj_1Bit[ObjIndex].Tov;
    26e8:	f8 01       	movw	r30, r16
    26ea:	81 81       	ldd	r24, Z+1	; 0x01
    26ec:	88 87       	std	Y+8, r24	; 0x08
											TxMsg.Data[3] = Isb_Obj_1Bit[ObjIndex].Value;
    26ee:	82 81       	ldd	r24, Z+2	; 0x02
    26f0:	89 87       	std	Y+9, r24	; 0x09
											Isb_SendMsg(&TxMsg);
    26f2:	c5 01       	movw	r24, r10
    26f4:	0e 94 31 11 	call	0x2262	; 0x2262 <Isb_SendMsg>
    26f8:	05 c0       	rjmp	.+10     	; 0x2704 <Isb_Obj_Exec+0xe2>
											break;
    26fa:	13 96       	adiw	r26, 0x03	; 3
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_1Bit_Ch_Array[ObjIndex]);
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
						if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
							if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
								if (Isb_Obj_1Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    26fc:	f1 e0       	ldi	r31, 0x01	; 1
    26fe:	a4 3a       	cpi	r26, 0xA4	; 164
    2700:	bf 07       	cpc	r27, r31
    2702:	e1 f6       	brne	.-72     	; 0x26bc <Isb_Obj_Exec+0x9a>
											TxMsg.Data[3] = Isb_Obj_1Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
											break;
										}
									}
									Isb_Obj_1Bit[ObjIndex].IsChanged = FALSE;
    2704:	f8 01       	movw	r30, r16
    2706:	13 82       	std	Z+3, r1	; 0x03
								}
							}
							if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READONINIT)) {
    2708:	f7 01       	movw	r30, r14
    270a:	80 81       	ld	r24, Z
    270c:	85 ff       	sbrs	r24, 5
    270e:	04 c0       	rjmp	.+8      	; 0x2718 <Isb_Obj_Exec+0xf6>
								// TODO;
								Isb_Obj_1Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    2710:	f8 01       	movw	r30, r16
    2712:	80 81       	ld	r24, Z
    2714:	8f 7d       	andi	r24, 0xDF	; 223
    2716:	80 83       	st	Z, r24
    2718:	08 94       	sec
    271a:	c1 1c       	adc	r12, r1
    271c:	d1 1c       	adc	r13, r1
    271e:	0c 5f       	subi	r16, 0xFC	; 252
    2720:	1f 4f       	sbci	r17, 0xFF	; 255

	void Isb_Obj_Exec(void) {

		#if defined(ISB_OBJ_1BIT_MAX)
			if (bit_is_set(Isb_Obj_1Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
    2722:	f8 e3       	ldi	r31, 0x38	; 56
    2724:	cf 16       	cp	r12, r31
    2726:	d1 04       	cpc	r13, r1
    2728:	09 f0       	breq	.+2      	; 0x272c <Isb_Obj_Exec+0x10a>
    272a:	a2 cf       	rjmp	.-188    	; 0x2670 <Isb_Obj_Exec+0x4e>
								Isb_Obj_1Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
							}
						}
					}
				}
				Isb_Obj_1Bit_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    272c:	80 91 a2 00 	lds	r24, 0x00A2
    2730:	8e 7f       	andi	r24, 0xFE	; 254
    2732:	80 93 a2 00 	sts	0x00A2, r24
			}
		#endif /* ISB_OBJ_1BIT_MAX */

		#if defined(ISB_OBJ_4BIT_MAX)
			if (bit_is_set(Isb_Obj_4Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
    2736:	80 91 a5 00 	lds	r24, 0x00A5
    273a:	80 ff       	sbrs	r24, 0
    273c:	6f c0       	rjmp	.+222    	; 0x281c <Isb_Obj_Exec+0x1fa>
    273e:	0b ee       	ldi	r16, 0xEB	; 235
    2740:	10 e0       	ldi	r17, 0x00	; 0
    2742:	cc 24       	eor	r12, r12
    2744:	dd 24       	eor	r13, r13
								if (Isb_Obj_4Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_4Bit_Obj_Array[ObjIndex]);
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    2746:	64 e2       	ldi	r22, 0x24	; 36
    2748:	86 2e       	mov	r8, r22
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
											TxMsg.SourceId = Isb_Node_Id;
											TxMsg.Data[0] = ISB_MSG_TOP_4BIT;
    274a:	52 e0       	ldi	r21, 0x02	; 2
    274c:	95 2e       	mov	r9, r21
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
											TxMsg.Data[2] = Isb_Obj_4Bit[ObjIndex].Tov;
											TxMsg.Data[3] = Isb_Obj_4Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
    274e:	5e 01       	movw	r10, r28
    2750:	08 94       	sec
    2752:	a1 1c       	adc	r10, r1
    2754:	b1 1c       	adc	r11, r1
		#endif /* ISB_OBJ_1BIT_MAX */

		#if defined(ISB_OBJ_4BIT_MAX)
			if (bit_is_set(Isb_Obj_4Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_4Bit_Ch_Array[ObjIndex]);
    2756:	f6 01       	movw	r30, r12
    2758:	ec 5b       	subi	r30, 0xBC	; 188
    275a:	fe 4f       	sbci	r31, 0xFE	; 254
    275c:	e4 91       	lpm	r30, Z+
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	ee 0f       	add	r30, r30
    2762:	ff 1f       	adc	r31, r31
    2764:	ec 5a       	subi	r30, 0xAC	; 172
    2766:	fc 4f       	sbci	r31, 0xFC	; 252
    2768:	80 81       	ld	r24, Z
    276a:	80 ff       	sbrs	r24, 0
    276c:	48 c0       	rjmp	.+144    	; 0x27fe <Isb_Obj_Exec+0x1dc>
						if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    276e:	76 01       	movw	r14, r12
    2770:	ee 0c       	add	r14, r14
    2772:	ff 1c       	adc	r15, r15
    2774:	ee 0c       	add	r14, r14
    2776:	ff 1c       	adc	r15, r15
    2778:	8b ee       	ldi	r24, 0xEB	; 235
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	e8 0e       	add	r14, r24
    277e:	f9 1e       	adc	r15, r25
    2780:	f7 01       	movw	r30, r14
    2782:	80 81       	ld	r24, Z
    2784:	80 ff       	sbrs	r24, 0
    2786:	3b c0       	rjmp	.+118    	; 0x27fe <Isb_Obj_Exec+0x1dc>
							if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
    2788:	80 81       	ld	r24, Z
    278a:	83 ff       	sbrs	r24, 3
    278c:	30 c0       	rjmp	.+96     	; 0x27ee <Isb_Obj_Exec+0x1cc>
								if (Isb_Obj_4Bit[ObjIndex].IsChanged == TRUE) {
    278e:	f8 01       	movw	r30, r16
    2790:	83 81       	ldd	r24, Z+3	; 0x03
    2792:	81 30       	cpi	r24, 0x01	; 1
    2794:	61 f5       	brne	.+88     	; 0x27ee <Isb_Obj_Exec+0x1cc>
    2796:	ac e2       	ldi	r26, 0x2C	; 44
    2798:	b1 e0       	ldi	r27, 0x01	; 1
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_4Bit_Obj_Array[ObjIndex]);
    279a:	f6 01       	movw	r30, r12
    279c:	e4 50       	subi	r30, 0x04	; 4
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	94 91       	lpm	r25, Z+
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
    27a2:	2d 91       	ld	r18, X+
    27a4:	3c 91       	ld	r19, X
    27a6:	11 97       	sbiw	r26, 0x01	; 1
    27a8:	12 96       	adiw	r26, 0x02	; 2
    27aa:	8c 91       	ld	r24, X
    27ac:	12 97       	sbiw	r26, 0x02	; 2
    27ae:	89 17       	cp	r24, r25
    27b0:	b9 f4       	brne	.+46     	; 0x27e0 <Isb_Obj_Exec+0x1be>
    27b2:	21 15       	cp	r18, r1
    27b4:	31 05       	cpc	r19, r1
    27b6:	a1 f0       	breq	.+40     	; 0x27e0 <Isb_Obj_Exec+0x1be>
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    27b8:	89 82       	std	Y+1, r8	; 0x01
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
    27ba:	3b 83       	std	Y+3, r19	; 0x03
    27bc:	2a 83       	std	Y+2, r18	; 0x02
											TxMsg.SourceId = Isb_Node_Id;
    27be:	80 91 94 00 	lds	r24, 0x0094
    27c2:	90 91 95 00 	lds	r25, 0x0095
    27c6:	9d 83       	std	Y+5, r25	; 0x05
    27c8:	8c 83       	std	Y+4, r24	; 0x04
											TxMsg.Data[0] = ISB_MSG_TOP_4BIT;
    27ca:	9e 82       	std	Y+6, r9	; 0x06
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    27cc:	9f 82       	std	Y+7, r9	; 0x07
											TxMsg.Data[2] = Isb_Obj_4Bit[ObjIndex].Tov;
    27ce:	f8 01       	movw	r30, r16
    27d0:	81 81       	ldd	r24, Z+1	; 0x01
    27d2:	88 87       	std	Y+8, r24	; 0x08
											TxMsg.Data[3] = Isb_Obj_4Bit[ObjIndex].Value;
    27d4:	82 81       	ldd	r24, Z+2	; 0x02
    27d6:	89 87       	std	Y+9, r24	; 0x09
											Isb_SendMsg(&TxMsg);
    27d8:	c5 01       	movw	r24, r10
    27da:	0e 94 31 11 	call	0x2262	; 0x2262 <Isb_SendMsg>
    27de:	05 c0       	rjmp	.+10     	; 0x27ea <Isb_Obj_Exec+0x1c8>
											break;
    27e0:	13 96       	adiw	r26, 0x03	; 3
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_4Bit_Ch_Array[ObjIndex]);
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
						if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
							if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
								if (Isb_Obj_4Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    27e2:	f1 e0       	ldi	r31, 0x01	; 1
    27e4:	a4 3a       	cpi	r26, 0xA4	; 164
    27e6:	bf 07       	cpc	r27, r31
    27e8:	e1 f6       	brne	.-72     	; 0x27a2 <Isb_Obj_Exec+0x180>
											TxMsg.Data[3] = Isb_Obj_4Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
											break;
										}
									}
									Isb_Obj_4Bit[ObjIndex].IsChanged = FALSE;
    27ea:	f8 01       	movw	r30, r16
    27ec:	13 82       	std	Z+3, r1	; 0x03
								}
							}
							if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READONINIT)) {
    27ee:	f7 01       	movw	r30, r14
    27f0:	80 81       	ld	r24, Z
    27f2:	85 ff       	sbrs	r24, 5
    27f4:	04 c0       	rjmp	.+8      	; 0x27fe <Isb_Obj_Exec+0x1dc>
								// TODO;
								Isb_Obj_4Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    27f6:	f8 01       	movw	r30, r16
    27f8:	80 81       	ld	r24, Z
    27fa:	8f 7d       	andi	r24, 0xDF	; 223
    27fc:	80 83       	st	Z, r24
    27fe:	08 94       	sec
    2800:	c1 1c       	adc	r12, r1
    2802:	d1 1c       	adc	r13, r1
    2804:	0c 5f       	subi	r16, 0xFC	; 252
    2806:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		#endif /* ISB_OBJ_1BIT_MAX */

		#if defined(ISB_OBJ_4BIT_MAX)
			if (bit_is_set(Isb_Obj_4Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
    2808:	f8 e0       	ldi	r31, 0x08	; 8
    280a:	cf 16       	cp	r12, r31
    280c:	d1 04       	cpc	r13, r1
    280e:	09 f0       	breq	.+2      	; 0x2812 <Isb_Obj_Exec+0x1f0>
    2810:	a2 cf       	rjmp	.-188    	; 0x2756 <Isb_Obj_Exec+0x134>
								Isb_Obj_4Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
							}
						}
					}
				}
				Isb_Obj_4Bit_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    2812:	80 91 a5 00 	lds	r24, 0x00A5
    2816:	8e 7f       	andi	r24, 0xFE	; 254
    2818:	80 93 a5 00 	sts	0x00A5, r24
			}
		#endif /* ISB_OBJ_4BIT_MAX */

		#if defined(ISB_OBJ_8BIT_MAX)
			if (bit_is_set(Isb_Obj_8Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
    281c:	80 91 a8 00 	lds	r24, 0x00A8
    2820:	80 ff       	sbrs	r24, 0
    2822:	71 c0       	rjmp	.+226    	; 0x2906 <Isb_Obj_Exec+0x2e4>
    2824:	0c e0       	ldi	r16, 0x0C	; 12
    2826:	11 e0       	ldi	r17, 0x01	; 1
    2828:	cc 24       	eor	r12, r12
    282a:	dd 24       	eor	r13, r13
								if (Isb_Obj_8Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_8Bit_Obj_Array[ObjIndex]);
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    282c:	24 e2       	ldi	r18, 0x24	; 36
    282e:	72 2e       	mov	r7, r18
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
											TxMsg.SourceId = Isb_Node_Id;
											TxMsg.Data[0] = ISB_MSG_TOP_8BIT;
    2830:	93 e0       	ldi	r25, 0x03	; 3
    2832:	89 2e       	mov	r8, r25
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    2834:	82 e0       	ldi	r24, 0x02	; 2
    2836:	98 2e       	mov	r9, r24
											TxMsg.Data[2] = Isb_Obj_8Bit[ObjIndex].Tov;
											TxMsg.Data[3] = Isb_Obj_8Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
    2838:	5e 01       	movw	r10, r28
    283a:	08 94       	sec
    283c:	a1 1c       	adc	r10, r1
    283e:	b1 1c       	adc	r11, r1
		#endif /* ISB_OBJ_4BIT_MAX */

		#if defined(ISB_OBJ_8BIT_MAX)
			if (bit_is_set(Isb_Obj_8Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_8Bit_Ch_Array[ObjIndex]);
    2840:	f6 01       	movw	r30, r12
    2842:	e4 5b       	subi	r30, 0xB4	; 180
    2844:	fe 4f       	sbci	r31, 0xFE	; 254
    2846:	e4 91       	lpm	r30, Z+
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	ee 0f       	add	r30, r30
    284c:	ff 1f       	adc	r31, r31
    284e:	ec 5a       	subi	r30, 0xAC	; 172
    2850:	fc 4f       	sbci	r31, 0xFC	; 252
    2852:	80 81       	ld	r24, Z
    2854:	80 ff       	sbrs	r24, 0
    2856:	48 c0       	rjmp	.+144    	; 0x28e8 <Isb_Obj_Exec+0x2c6>
						if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    2858:	76 01       	movw	r14, r12
    285a:	ee 0c       	add	r14, r14
    285c:	ff 1c       	adc	r15, r15
    285e:	ee 0c       	add	r14, r14
    2860:	ff 1c       	adc	r15, r15
    2862:	8c e0       	ldi	r24, 0x0C	; 12
    2864:	91 e0       	ldi	r25, 0x01	; 1
    2866:	e8 0e       	add	r14, r24
    2868:	f9 1e       	adc	r15, r25
    286a:	f7 01       	movw	r30, r14
    286c:	80 81       	ld	r24, Z
    286e:	80 ff       	sbrs	r24, 0
    2870:	3b c0       	rjmp	.+118    	; 0x28e8 <Isb_Obj_Exec+0x2c6>
							if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
    2872:	80 81       	ld	r24, Z
    2874:	83 ff       	sbrs	r24, 3
    2876:	30 c0       	rjmp	.+96     	; 0x28d8 <Isb_Obj_Exec+0x2b6>
								if (Isb_Obj_8Bit[ObjIndex].IsChanged == TRUE) {
    2878:	f8 01       	movw	r30, r16
    287a:	83 81       	ldd	r24, Z+3	; 0x03
    287c:	81 30       	cpi	r24, 0x01	; 1
    287e:	61 f5       	brne	.+88     	; 0x28d8 <Isb_Obj_Exec+0x2b6>
    2880:	ac e2       	ldi	r26, 0x2C	; 44
    2882:	b1 e0       	ldi	r27, 0x01	; 1
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_8Bit_Obj_Array[ObjIndex]);
    2884:	f6 01       	movw	r30, r12
    2886:	ec 5f       	subi	r30, 0xFC	; 252
    2888:	fe 4f       	sbci	r31, 0xFE	; 254
    288a:	94 91       	lpm	r25, Z+
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
    288c:	2d 91       	ld	r18, X+
    288e:	3c 91       	ld	r19, X
    2890:	11 97       	sbiw	r26, 0x01	; 1
    2892:	12 96       	adiw	r26, 0x02	; 2
    2894:	8c 91       	ld	r24, X
    2896:	12 97       	sbiw	r26, 0x02	; 2
    2898:	89 17       	cp	r24, r25
    289a:	b9 f4       	brne	.+46     	; 0x28ca <Isb_Obj_Exec+0x2a8>
    289c:	21 15       	cp	r18, r1
    289e:	31 05       	cpc	r19, r1
    28a0:	a1 f0       	breq	.+40     	; 0x28ca <Isb_Obj_Exec+0x2a8>
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    28a2:	79 82       	std	Y+1, r7	; 0x01
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
    28a4:	3b 83       	std	Y+3, r19	; 0x03
    28a6:	2a 83       	std	Y+2, r18	; 0x02
											TxMsg.SourceId = Isb_Node_Id;
    28a8:	80 91 94 00 	lds	r24, 0x0094
    28ac:	90 91 95 00 	lds	r25, 0x0095
    28b0:	9d 83       	std	Y+5, r25	; 0x05
    28b2:	8c 83       	std	Y+4, r24	; 0x04
											TxMsg.Data[0] = ISB_MSG_TOP_8BIT;
    28b4:	8e 82       	std	Y+6, r8	; 0x06
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    28b6:	9f 82       	std	Y+7, r9	; 0x07
											TxMsg.Data[2] = Isb_Obj_8Bit[ObjIndex].Tov;
    28b8:	f8 01       	movw	r30, r16
    28ba:	81 81       	ldd	r24, Z+1	; 0x01
    28bc:	88 87       	std	Y+8, r24	; 0x08
											TxMsg.Data[3] = Isb_Obj_8Bit[ObjIndex].Value;
    28be:	82 81       	ldd	r24, Z+2	; 0x02
    28c0:	89 87       	std	Y+9, r24	; 0x09
											Isb_SendMsg(&TxMsg);
    28c2:	c5 01       	movw	r24, r10
    28c4:	0e 94 31 11 	call	0x2262	; 0x2262 <Isb_SendMsg>
    28c8:	05 c0       	rjmp	.+10     	; 0x28d4 <Isb_Obj_Exec+0x2b2>
											break;
    28ca:	13 96       	adiw	r26, 0x03	; 3
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_8Bit_Ch_Array[ObjIndex]);
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
						if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
							if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
								if (Isb_Obj_8Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    28cc:	f1 e0       	ldi	r31, 0x01	; 1
    28ce:	a4 3a       	cpi	r26, 0xA4	; 164
    28d0:	bf 07       	cpc	r27, r31
    28d2:	e1 f6       	brne	.-72     	; 0x288c <Isb_Obj_Exec+0x26a>
											TxMsg.Data[3] = Isb_Obj_8Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
											break;
										}
									}
									Isb_Obj_8Bit[ObjIndex].IsChanged = FALSE;
    28d4:	f8 01       	movw	r30, r16
    28d6:	13 82       	std	Z+3, r1	; 0x03
								}
							}
							if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READONINIT)) {
    28d8:	f7 01       	movw	r30, r14
    28da:	80 81       	ld	r24, Z
    28dc:	85 ff       	sbrs	r24, 5
    28de:	04 c0       	rjmp	.+8      	; 0x28e8 <Isb_Obj_Exec+0x2c6>
								// TODO;
								Isb_Obj_8Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    28e0:	f8 01       	movw	r30, r16
    28e2:	80 81       	ld	r24, Z
    28e4:	8f 7d       	andi	r24, 0xDF	; 223
    28e6:	80 83       	st	Z, r24
    28e8:	08 94       	sec
    28ea:	c1 1c       	adc	r12, r1
    28ec:	d1 1c       	adc	r13, r1
    28ee:	0c 5f       	subi	r16, 0xFC	; 252
    28f0:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		#endif /* ISB_OBJ_4BIT_MAX */

		#if defined(ISB_OBJ_8BIT_MAX)
			if (bit_is_set(Isb_Obj_8Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
    28f2:	f8 e0       	ldi	r31, 0x08	; 8
    28f4:	cf 16       	cp	r12, r31
    28f6:	d1 04       	cpc	r13, r1
    28f8:	09 f0       	breq	.+2      	; 0x28fc <Isb_Obj_Exec+0x2da>
    28fa:	a2 cf       	rjmp	.-188    	; 0x2840 <Isb_Obj_Exec+0x21e>
								Isb_Obj_8Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
							}
						}
					}
				}
				Isb_Obj_8Bit_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    28fc:	80 91 a8 00 	lds	r24, 0x00A8
    2900:	8e 7f       	andi	r24, 0xFE	; 254
    2902:	80 93 a8 00 	sts	0x00A8, r24
				}
				Isb_Obj_Float_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
			}
		#endif /* ISB_OBJ_FLOAT_MAX */

	}
    2906:	2d 96       	adiw	r28, 0x0d	; 13
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	f8 94       	cli
    290c:	de bf       	out	0x3e, r29	; 62
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	cd bf       	out	0x3d, r28	; 61
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	1f 91       	pop	r17
    2918:	0f 91       	pop	r16
    291a:	ff 90       	pop	r15
    291c:	ef 90       	pop	r14
    291e:	df 90       	pop	r13
    2920:	cf 90       	pop	r12
    2922:	bf 90       	pop	r11
    2924:	af 90       	pop	r10
    2926:	9f 90       	pop	r9
    2928:	8f 90       	pop	r8
    292a:	7f 90       	pop	r7
    292c:	08 95       	ret

0000292e <Isb_Config_Rx>:
#ifndef ISB_SRV_CONFIG_C_
	#define ISB_SRV_CONFIG_C_



	void Isb_Config_Rx(Isb_Msg_t * aIsb_Msg) {
    292e:	df 92       	push	r13
    2930:	ef 92       	push	r14
    2932:	ff 92       	push	r15
    2934:	0f 93       	push	r16
    2936:	1f 93       	push	r17
    2938:	df 93       	push	r29
    293a:	cf 93       	push	r28
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	2d 97       	sbiw	r28, 0x0d	; 13
    2942:	0f b6       	in	r0, 0x3f	; 63
    2944:	f8 94       	cli
    2946:	de bf       	out	0x3e, r29	; 62
    2948:	0f be       	out	0x3f, r0	; 63
    294a:	cd bf       	out	0x3d, r28	; 61
    294c:	ac 01       	movw	r20, r24
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
    294e:	fc 01       	movw	r30, r24
    2950:	d0 80       	ld	r13, Z
    2952:	6d 2d       	mov	r22, r13
    2954:	6f 70       	andi	r22, 0x0F	; 15
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
    2956:	e3 80       	ldd	r14, Z+3	; 0x03
    2958:	f4 80       	ldd	r15, Z+4	; 0x04
		MsgTx.SourceId = Isb_Node_Id;
    295a:	00 91 94 00 	lds	r16, 0x0094
    295e:	10 91 95 00 	lds	r17, 0x0095
    2962:	dc 01       	movw	r26, r24
    2964:	fe 01       	movw	r30, r28
    2966:	36 96       	adiw	r30, 0x06	; 6
		for (uint8_t i = 0; i < Dlc; i++) {
    2968:	9e 01       	movw	r18, r28
    296a:	26 0f       	add	r18, r22
    296c:	31 1d       	adc	r19, r1
    296e:	2a 5f       	subi	r18, 0xFA	; 250
    2970:	3f 4f       	sbci	r19, 0xFF	; 255
    2972:	04 c0       	rjmp	.+8      	; 0x297c <Isb_Config_Rx+0x4e>
			MsgTx.Data[i] = aIsb_Msg->Data[i];
    2974:	14 96       	adiw	r26, 0x04	; 4
    2976:	8c 91       	ld	r24, X
    2978:	14 97       	sbiw	r26, 0x04	; 4
    297a:	81 93       	st	Z+, r24
    297c:	11 96       	adiw	r26, 0x01	; 1
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
		MsgTx.SourceId = Isb_Node_Id;
		for (uint8_t i = 0; i < Dlc; i++) {
    297e:	e2 17       	cp	r30, r18
    2980:	f3 07       	cpc	r31, r19
    2982:	c1 f7       	brne	.-16     	; 0x2974 <Isb_Config_Rx+0x46>
			MsgTx.Data[i] = aIsb_Msg->Data[i];
		}
		if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_SETMODE) {
    2984:	fa 01       	movw	r30, r20
    2986:	85 81       	ldd	r24, Z+5	; 0x05
    2988:	82 30       	cpi	r24, 0x02	; 2
    298a:	09 f0       	breq	.+2      	; 0x298e <Isb_Config_Rx+0x60>
    298c:	90 c0       	rjmp	.+288    	; 0x2aae <Isb_Config_Rx+0x180>
			if (Dlc == ISB_MSG_FLAGS_DLC_2) {
    298e:	62 30       	cpi	r22, 0x02	; 2
    2990:	09 f0       	breq	.+2      	; 0x2994 <Isb_Config_Rx+0x66>
    2992:	46 c1       	rjmp	.+652    	; 0x2c20 <Isb_Config_Rx+0x2f2>
				MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_2;
				MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    2994:	8e 81       	ldd	r24, Y+6	; 0x06
    2996:	80 6c       	ori	r24, 0xC0	; 192
    2998:	8e 83       	std	Y+6, r24	; 0x06
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__BL_NORM) {
    299a:	26 81       	ldd	r18, Z+6	; 0x06
    299c:	22 23       	and	r18, r18
    299e:	c1 f4       	brne	.+48     	; 0x29d0 <Isb_Config_Rx+0xa2>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    29a0:	e1 99       	sbic	0x1c, 1	; 28
    29a2:	fe cf       	rjmp	.-4      	; 0x29a0 <Isb_Config_Rx+0x72>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    29a4:	82 e1       	ldi	r24, 0x12	; 18
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	9f bb       	out	0x1f, r25	; 31
    29aa:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    29ac:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    29ae:	8d b3       	in	r24, 0x1d	; 29
	}



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
    29b0:	88 23       	and	r24, r24
    29b2:	09 f4       	brne	.+2      	; 0x29b6 <Isb_Config_Rx+0x88>
    29b4:	62 c0       	rjmp	.+196    	; 0x2a7a <Isb_Config_Rx+0x14c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    29b6:	e1 99       	sbic	0x1c, 1	; 28
    29b8:	fe cf       	rjmp	.-4      	; 0x29b6 <Isb_Config_Rx+0x88>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    29ba:	82 e1       	ldi	r24, 0x12	; 18
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	9f bb       	out	0x1f, r25	; 31
    29c0:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    29c2:	1d ba       	out	0x1d, r1	; 29

    __asm__ __volatile__ (
    29c4:	0f b6       	in	r0, 0x3f	; 63
    29c6:	f8 94       	cli
    29c8:	e2 9a       	sbi	0x1c, 2	; 28
    29ca:	e1 9a       	sbi	0x1c, 1	; 28
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	6e c0       	rjmp	.+220    	; 0x2aac <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__BL_FLASH) {
    29d0:	21 30       	cpi	r18, 0x01	; 1
    29d2:	c9 f4       	brne	.+50     	; 0x2a06 <Isb_Config_Rx+0xd8>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    29d4:	e1 99       	sbic	0x1c, 1	; 28
    29d6:	fe cf       	rjmp	.-4      	; 0x29d4 <Isb_Config_Rx+0xa6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    29d8:	82 e1       	ldi	r24, 0x12	; 18
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	9f bb       	out	0x1f, r25	; 31
    29de:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    29e0:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    29e2:	8d b3       	in	r24, 0x1d	; 29
    29e4:	81 30       	cpi	r24, 0x01	; 1
    29e6:	09 f4       	brne	.+2      	; 0x29ea <Isb_Config_Rx+0xbc>
    29e8:	61 c0       	rjmp	.+194    	; 0x2aac <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    29ea:	e1 99       	sbic	0x1c, 1	; 28
    29ec:	fe cf       	rjmp	.-4      	; 0x29ea <Isb_Config_Rx+0xbc>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    29ee:	82 e1       	ldi	r24, 0x12	; 18
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	9f bb       	out	0x1f, r25	; 31
    29f4:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	e2 9a       	sbi	0x1c, 2	; 28
    2a00:	e1 9a       	sbi	0x1c, 1	; 28
    2a02:	0f be       	out	0x3f, r0	; 63
    2a04:	53 c0       	rjmp	.+166    	; 0x2aac <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_FLASH);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__FW_NORM) {
    2a06:	28 30       	cpi	r18, 0x08	; 8
    2a08:	09 f0       	breq	.+2      	; 0x2a0c <Isb_Config_Rx+0xde>
    2a0a:	37 c0       	rjmp	.+110    	; 0x2a7a <Isb_Config_Rx+0x14c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2a0c:	e1 99       	sbic	0x1c, 1	; 28
    2a0e:	fe cf       	rjmp	.-4      	; 0x2a0c <Isb_Config_Rx+0xde>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2a10:	8b e1       	ldi	r24, 0x1B	; 27
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	9f bb       	out	0x1f, r25	; 31
    2a16:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2a18:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2a1a:	2d b3       	in	r18, 0x1d	; 29
					uint8_t crc = lib_eep_read_byte((uint8_t *)EEP__ISB_CONFIG_CRC);
					crc++;
    2a1c:	2f 5f       	subi	r18, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2a1e:	e1 99       	sbic	0x1c, 1	; 28
    2a20:	fe cf       	rjmp	.-4      	; 0x2a1e <Isb_Config_Rx+0xf0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2a22:	8b e1       	ldi	r24, 0x1B	; 27
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	9f bb       	out	0x1f, r25	; 31
    2a28:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2a2a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2a2c:	8d b3       	in	r24, 0x1d	; 29
    2a2e:	82 17       	cp	r24, r18
    2a30:	61 f0       	breq	.+24     	; 0x2a4a <Isb_Config_Rx+0x11c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2a32:	e1 99       	sbic	0x1c, 1	; 28
    2a34:	fe cf       	rjmp	.-4      	; 0x2a32 <Isb_Config_Rx+0x104>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2a36:	8b e1       	ldi	r24, 0x1B	; 27
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	9f bb       	out	0x1f, r25	; 31
    2a3c:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2a3e:	2d bb       	out	0x1d, r18	; 29

    __asm__ __volatile__ (
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	f8 94       	cli
    2a44:	e2 9a       	sbi	0x1c, 2	; 28
    2a46:	e1 9a       	sbi	0x1c, 1	; 28
    2a48:	0f be       	out	0x3f, r0	; 63
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2a4a:	e1 99       	sbic	0x1c, 1	; 28
    2a4c:	fe cf       	rjmp	.-4      	; 0x2a4a <Isb_Config_Rx+0x11c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2a4e:	82 e1       	ldi	r24, 0x12	; 18
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	9f bb       	out	0x1f, r25	; 31
    2a54:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2a56:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2a58:	8d b3       	in	r24, 0x1d	; 29
    2a5a:	88 30       	cpi	r24, 0x08	; 8
    2a5c:	39 f1       	breq	.+78     	; 0x2aac <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2a5e:	e1 99       	sbic	0x1c, 1	; 28
    2a60:	fe cf       	rjmp	.-4      	; 0x2a5e <Isb_Config_Rx+0x130>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2a62:	82 e1       	ldi	r24, 0x12	; 18
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	9f bb       	out	0x1f, r25	; 31
    2a68:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2a6a:	88 e0       	ldi	r24, 0x08	; 8
    2a6c:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	e2 9a       	sbi	0x1c, 2	; 28
    2a74:	e1 9a       	sbi	0x1c, 1	; 28
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	19 c0       	rjmp	.+50     	; 0x2aac <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_CONFIG_CRC, crc);
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__FW_NORM);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__FW_CFG) {
    2a7a:	29 30       	cpi	r18, 0x09	; 9
    2a7c:	b9 f4       	brne	.+46     	; 0x2aac <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2a7e:	e1 99       	sbic	0x1c, 1	; 28
    2a80:	fe cf       	rjmp	.-4      	; 0x2a7e <Isb_Config_Rx+0x150>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2a82:	82 e1       	ldi	r24, 0x12	; 18
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	9f bb       	out	0x1f, r25	; 31
    2a88:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2a8a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2a8c:	8d b3       	in	r24, 0x1d	; 29
    2a8e:	89 30       	cpi	r24, 0x09	; 9
    2a90:	69 f0       	breq	.+26     	; 0x2aac <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2a92:	e1 99       	sbic	0x1c, 1	; 28
    2a94:	fe cf       	rjmp	.-4      	; 0x2a92 <Isb_Config_Rx+0x164>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2a96:	82 e1       	ldi	r24, 0x12	; 18
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	9f bb       	out	0x1f, r25	; 31
    2a9c:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2a9e:	89 e0       	ldi	r24, 0x09	; 9
    2aa0:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	f8 94       	cli
    2aa6:	e2 9a       	sbi	0x1c, 2	; 28
    2aa8:	e1 9a       	sbi	0x1c, 1	; 28
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	ff cf       	rjmp	.-2      	; 0x2aac <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__FW_CFG);
				}
				Node_Reboot();
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_INITEEPROM) {
    2aae:	86 30       	cpi	r24, 0x06	; 6
    2ab0:	09 f0       	breq	.+2      	; 0x2ab4 <Isb_Config_Rx+0x186>
    2ab2:	43 c0       	rjmp	.+134    	; 0x2b3a <Isb_Config_Rx+0x20c>
			if (Dlc == ISB_MSG_FLAGS_DLC_1) {
    2ab4:	61 30       	cpi	r22, 0x01	; 1
    2ab6:	09 f0       	breq	.+2      	; 0x2aba <Isb_Config_Rx+0x18c>
    2ab8:	b3 c0       	rjmp	.+358    	; 0x2c20 <Isb_Config_Rx+0x2f2>
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
    2aba:	80 91 97 00 	lds	r24, 0x0097
    2abe:	89 30       	cpi	r24, 0x09	; 9
    2ac0:	09 f0       	breq	.+2      	; 0x2ac4 <Isb_Config_Rx+0x196>
    2ac2:	ae c0       	rjmp	.+348    	; 0x2c20 <Isb_Config_Rx+0x2f2>
					MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_1;
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
    2ac4:	80 91 96 00 	lds	r24, 0x0096
    2ac8:	28 2f       	mov	r18, r24
    2aca:	30 e0       	ldi	r19, 0x00	; 0
						wdt_reset();
    2acc:	a8 95       	wdr
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2ace:	e1 99       	sbic	0x1c, 1	; 28
    2ad0:	fe cf       	rjmp	.-4      	; 0x2ace <Isb_Config_Rx+0x1a0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2ad2:	3f bb       	out	0x1f, r19	; 31
    2ad4:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2ad6:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2ad8:	8d b3       	in	r24, 0x1d	; 29
    2ada:	88 23       	and	r24, r24
    2adc:	51 f0       	breq	.+20     	; 0x2af2 <Isb_Config_Rx+0x1c4>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2ade:	e1 99       	sbic	0x1c, 1	; 28
    2ae0:	fe cf       	rjmp	.-4      	; 0x2ade <Isb_Config_Rx+0x1b0>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2ae2:	3f bb       	out	0x1f, r19	; 31
    2ae4:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    2ae6:	1d ba       	out	0x1d, r1	; 29

    __asm__ __volatile__ (
    2ae8:	0f b6       	in	r0, 0x3f	; 63
    2aea:	f8 94       	cli
    2aec:	e2 9a       	sbi	0x1c, 2	; 28
    2aee:	e1 9a       	sbi	0x1c, 1	; 28
    2af0:	0f be       	out	0x3f, r0	; 63
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_INITEEPROM) {
			if (Dlc == ISB_MSG_FLAGS_DLC_1) {
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
					MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_1;
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
    2af2:	2f 5f       	subi	r18, 0xFF	; 255
    2af4:	3f 4f       	sbci	r19, 0xFF	; 255
    2af6:	f2 e0       	ldi	r31, 0x02	; 2
    2af8:	20 30       	cpi	r18, 0x00	; 0
    2afa:	3f 07       	cpc	r19, r31
    2afc:	38 f3       	brcs	.-50     	; 0x2acc <Isb_Config_Rx+0x19e>
    2afe:	2c e1       	ldi	r18, 0x1C	; 28
    2b00:	30 e0       	ldi	r19, 0x00	; 0
						wdt_reset();
						lib_eep_write_byte((uint8_t *) ee_Addr, 0x00);
					}
					for (uint8_t i = 0; i < 4; i++) {
						lib_eep_write_byte((uint8_t *)(EEP__ISB_CONFIG_CODE_0 + i), Isb_Firmware_Code[i]);
    2b02:	f9 01       	movw	r30, r18
    2b04:	ec 5b       	subi	r30, 0xBC	; 188
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2b0a:	e1 99       	sbic	0x1c, 1	; 28
    2b0c:	fe cf       	rjmp	.-4      	; 0x2b0a <Isb_Config_Rx+0x1dc>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2b0e:	3f bb       	out	0x1f, r19	; 31
    2b10:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2b12:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2b14:	8d b3       	in	r24, 0x1d	; 29
    2b16:	8e 17       	cp	r24, r30
    2b18:	51 f0       	breq	.+20     	; 0x2b2e <Isb_Config_Rx+0x200>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2b1a:	e1 99       	sbic	0x1c, 1	; 28
    2b1c:	fe cf       	rjmp	.-4      	; 0x2b1a <Isb_Config_Rx+0x1ec>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2b1e:	3f bb       	out	0x1f, r19	; 31
    2b20:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    2b22:	ed bb       	out	0x1d, r30	; 29

    __asm__ __volatile__ (
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	e2 9a       	sbi	0x1c, 2	; 28
    2b2a:	e1 9a       	sbi	0x1c, 1	; 28
    2b2c:	0f be       	out	0x3f, r0	; 63
    2b2e:	2f 5f       	subi	r18, 0xFF	; 255
    2b30:	3f 4f       	sbci	r19, 0xFF	; 255
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
						wdt_reset();
						lib_eep_write_byte((uint8_t *) ee_Addr, 0x00);
					}
					for (uint8_t i = 0; i < 4; i++) {
    2b32:	20 32       	cpi	r18, 0x20	; 32
    2b34:	31 05       	cpc	r19, r1
    2b36:	29 f7       	brne	.-54     	; 0x2b02 <Isb_Config_Rx+0x1d4>
    2b38:	ff cf       	rjmp	.-2      	; 0x2b38 <Isb_Config_Rx+0x20a>
					}
					Node_Reboot();
				}
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_READEEPROMBLOCK) {
    2b3a:	87 30       	cpi	r24, 0x07	; 7
    2b3c:	71 f5       	brne	.+92     	; 0x2b9a <Isb_Config_Rx+0x26c>
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
    2b3e:	64 30       	cpi	r22, 0x04	; 4
    2b40:	08 f4       	brcc	.+2      	; 0x2b44 <Isb_Config_Rx+0x216>
    2b42:	6e c0       	rjmp	.+220    	; 0x2c20 <Isb_Config_Rx+0x2f2>
				Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
    2b44:	fa 01       	movw	r30, r20
    2b46:	97 81       	ldd	r25, Z+7	; 0x07
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	26 81       	ldd	r18, Z+6	; 0x06
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	a2 0f       	add	r26, r18
    2b50:	b1 1d       	adc	r27, r1
				if (Addr < EEP_SIZE) {
    2b52:	f2 e0       	ldi	r31, 0x02	; 2
    2b54:	a0 30       	cpi	r26, 0x00	; 0
    2b56:	bf 07       	cpc	r27, r31
    2b58:	08 f0       	brcs	.+2      	; 0x2b5c <Isb_Config_Rx+0x22e>
    2b5a:	62 c0       	rjmp	.+196    	; 0x2c20 <Isb_Config_Rx+0x2f2>
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    2b5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b5e:	80 6c       	ori	r24, 0xC0	; 192
    2b60:	8e 83       	std	Y+6, r24	; 0x06
    2b62:	40 e0       	ldi	r20, 0x00	; 0
					for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2b64:	26 2f       	mov	r18, r22
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	23 50       	subi	r18, 0x03	; 3
    2b6a:	30 40       	sbci	r19, 0x00	; 0
						MsgTx.Data[3 + i] = lib_eep_read_byte((uint8_t *)(Addr + i));
    2b6c:	be 01       	movw	r22, r28
    2b6e:	67 5f       	subi	r22, 0xF7	; 247
    2b70:	7f 4f       	sbci	r23, 0xFF	; 255
    2b72:	0d c0       	rjmp	.+26     	; 0x2b8e <Isb_Config_Rx+0x260>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2b74:	e1 99       	sbic	0x1c, 1	; 28
    2b76:	fe cf       	rjmp	.-4      	; 0x2b74 <Isb_Config_Rx+0x246>
    2b78:	cd 01       	movw	r24, r26
    2b7a:	84 0f       	add	r24, r20
    2b7c:	91 1d       	adc	r25, r1
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2b7e:	9f bb       	out	0x1f, r25	; 31
    2b80:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2b82:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2b84:	8d b3       	in	r24, 0x1d	; 29
    2b86:	e6 0f       	add	r30, r22
    2b88:	f7 1f       	adc	r31, r23
    2b8a:	80 83       	st	Z, r24
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_READEEPROMBLOCK) {
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
				Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
				if (Addr < EEP_SIZE) {
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2b8c:	4f 5f       	subi	r20, 0xFF	; 255
    2b8e:	e4 2f       	mov	r30, r20
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	e2 17       	cp	r30, r18
    2b94:	f3 07       	cpc	r31, r19
    2b96:	74 f3       	brlt	.-36     	; 0x2b74 <Isb_Config_Rx+0x246>
    2b98:	43 c0       	rjmp	.+134    	; 0x2c20 <Isb_Config_Rx+0x2f2>
						MsgTx.Data[3 + i] = lib_eep_read_byte((uint8_t *)(Addr + i));
					}
				}
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_WRITEEEPROMBLOCK) {
    2b9a:	88 30       	cpi	r24, 0x08	; 8
    2b9c:	09 f0       	breq	.+2      	; 0x2ba0 <Isb_Config_Rx+0x272>
    2b9e:	40 c0       	rjmp	.+128    	; 0x2c20 <Isb_Config_Rx+0x2f2>
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
    2ba0:	64 30       	cpi	r22, 0x04	; 4
    2ba2:	08 f4       	brcc	.+2      	; 0x2ba6 <Isb_Config_Rx+0x278>
    2ba4:	3d c0       	rjmp	.+122    	; 0x2c20 <Isb_Config_Rx+0x2f2>
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
    2ba6:	80 91 97 00 	lds	r24, 0x0097
    2baa:	89 30       	cpi	r24, 0x09	; 9
    2bac:	09 f0       	breq	.+2      	; 0x2bb0 <Isb_Config_Rx+0x282>
    2bae:	38 c0       	rjmp	.+112    	; 0x2c20 <Isb_Config_Rx+0x2f2>
					Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
    2bb0:	fa 01       	movw	r30, r20
    2bb2:	97 81       	ldd	r25, Z+7	; 0x07
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	26 81       	ldd	r18, Z+6	; 0x06
    2bb8:	dc 01       	movw	r26, r24
    2bba:	a2 0f       	add	r26, r18
    2bbc:	b1 1d       	adc	r27, r1
					if ((Addr >= Isb_Firmware_Offset) & (Addr < EEP_SIZE)) {
    2bbe:	80 91 96 00 	lds	r24, 0x0096
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	a8 17       	cp	r26, r24
    2bc6:	b9 07       	cpc	r27, r25
    2bc8:	58 f1       	brcs	.+86     	; 0x2c20 <Isb_Config_Rx+0x2f2>
    2bca:	f2 e0       	ldi	r31, 0x02	; 2
    2bcc:	a0 30       	cpi	r26, 0x00	; 0
    2bce:	bf 07       	cpc	r27, r31
    2bd0:	38 f5       	brcc	.+78     	; 0x2c20 <Isb_Config_Rx+0x2f2>
						MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    2bd2:	8e 81       	ldd	r24, Y+6	; 0x06
    2bd4:	80 6c       	ori	r24, 0xC0	; 192
    2bd6:	8e 83       	std	Y+6, r24	; 0x06
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
						for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2bda:	26 2f       	mov	r18, r22
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	23 50       	subi	r18, 0x03	; 3
    2be0:	30 40       	sbci	r19, 0x00	; 0
    2be2:	19 c0       	rjmp	.+50     	; 0x2c16 <Isb_Config_Rx+0x2e8>
							lib_eep_write_byte((uint8_t *)(Addr + i), aIsb_Msg->Data[3 + i]);
    2be4:	bf 01       	movw	r22, r30
    2be6:	6a 0f       	add	r22, r26
    2be8:	7b 1f       	adc	r23, r27
    2bea:	e4 0f       	add	r30, r20
    2bec:	f5 1f       	adc	r31, r21
    2bee:	e0 85       	ldd	r30, Z+8	; 0x08
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2bf0:	e1 99       	sbic	0x1c, 1	; 28
    2bf2:	fe cf       	rjmp	.-4      	; 0x2bf0 <Isb_Config_Rx+0x2c2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2bf4:	7f bb       	out	0x1f, r23	; 31
    2bf6:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
    2bf8:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2bfa:	8d b3       	in	r24, 0x1d	; 29
    2bfc:	8e 17       	cp	r24, r30
    2bfe:	51 f0       	breq	.+20     	; 0x2c14 <Isb_Config_Rx+0x2e6>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2c00:	e1 99       	sbic	0x1c, 1	; 28
    2c02:	fe cf       	rjmp	.-4      	; 0x2c00 <Isb_Config_Rx+0x2d2>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2c04:	7f bb       	out	0x1f, r23	; 31
    2c06:	6e bb       	out	0x1e, r22	; 30
#endif
    EEDR = __value;
    2c08:	ed bb       	out	0x1d, r30	; 29

    __asm__ __volatile__ (
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	f8 94       	cli
    2c0e:	e2 9a       	sbi	0x1c, 2	; 28
    2c10:	e1 9a       	sbi	0x1c, 1	; 28
    2c12:	0f be       	out	0x3f, r0	; 63
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
					Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
					if ((Addr >= Isb_Firmware_Offset) & (Addr < EEP_SIZE)) {
						MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
						for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2c14:	9f 5f       	subi	r25, 0xFF	; 255
    2c16:	e9 2f       	mov	r30, r25
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	e2 17       	cp	r30, r18
    2c1c:	f3 07       	cpc	r31, r19
    2c1e:	14 f3       	brlt	.-60     	; 0x2be4 <Isb_Config_Rx+0x2b6>
						}
					}
				}
			}
		}
		MsgTx.Data[0] |= ISB_CONFIG_ANSWER_NACK;
    2c20:	8e 81       	ldd	r24, Y+6	; 0x06
    2c22:	80 64       	ori	r24, 0x40	; 64
    2c24:	8e 83       	std	Y+6, r24	; 0x06
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
		MsgTx.SourceId = Isb_Node_Id;
    2c26:	1d 83       	std	Y+5, r17	; 0x05
    2c28:	0c 83       	std	Y+4, r16	; 0x04
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
    2c2a:	fb 82       	std	Y+3, r15	; 0x03
    2c2c:	ea 82       	std	Y+2, r14	; 0x02
	void Isb_Config_Rx(Isb_Msg_t * aIsb_Msg) {
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
    2c2e:	d9 82       	std	Y+1, r13	; 0x01
					}
				}
			}
		}
		MsgTx.Data[0] |= ISB_CONFIG_ANSWER_NACK;
		Isb_SendMsg(&MsgTx);
    2c30:	ce 01       	movw	r24, r28
    2c32:	01 96       	adiw	r24, 0x01	; 1
    2c34:	0e 94 31 11 	call	0x2262	; 0x2262 <Isb_SendMsg>
	}
    2c38:	2d 96       	adiw	r28, 0x0d	; 13
    2c3a:	0f b6       	in	r0, 0x3f	; 63
    2c3c:	f8 94       	cli
    2c3e:	de bf       	out	0x3e, r29	; 62
    2c40:	0f be       	out	0x3f, r0	; 63
    2c42:	cd bf       	out	0x3d, r28	; 61
    2c44:	cf 91       	pop	r28
    2c46:	df 91       	pop	r29
    2c48:	1f 91       	pop	r17
    2c4a:	0f 91       	pop	r16
    2c4c:	ff 90       	pop	r15
    2c4e:	ef 90       	pop	r14
    2c50:	df 90       	pop	r13
    2c52:	08 95       	ret

00002c54 <lib_eep_fw_read_word>:
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    return __eerd_word (__p, eeprom_read_byte);
    2c54:	20 91 96 00 	lds	r18, 0x0096
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	22 0f       	add	r18, r18
    2c5c:	33 1f       	adc	r19, r19
    2c5e:	82 0f       	add	r24, r18
    2c60:	93 1f       	adc	r25, r19
    2c62:	61 ef       	ldi	r22, 0xF1	; 241
    2c64:	70 e0       	ldi	r23, 0x00	; 0
    2c66:	0e 94 56 17 	call	0x2eac	; 0x2eac <__eerd_word>



	uint16_t __attribute__((always_inline)) lib_eep_fw_read_word(uint16_t * aAddr) {
		return eeprom_read_word(Isb_Firmware_Offset + aAddr);;
	}
    2c6a:	08 95       	ret

00002c6c <lib_eep_read_word>:
    2c6c:	61 ef       	ldi	r22, 0xF1	; 241
    2c6e:	70 e0       	ldi	r23, 0x00	; 0
    2c70:	0e 94 56 17 	call	0x2eac	; 0x2eac <__eerd_word>



	uint16_t __attribute__((always_inline)) lib_eep_read_word(uint16_t * aAddr) {
		return eeprom_read_word(aAddr);;
	}
    2c74:	08 95       	ret

00002c76 <main>:



	int main(void) {
    2c76:	ff 92       	push	r15
    2c78:	0f 93       	push	r16
    2c7a:	1f 93       	push	r17
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
    2c84:	2d 97       	sbiw	r28, 0x0d	; 13
    2c86:	0f b6       	in	r0, 0x3f	; 63
    2c88:	f8 94       	cli
    2c8a:	de bf       	out	0x3e, r29	; 62
    2c8c:	0f be       	out	0x3f, r0	; 63
    2c8e:	cd bf       	out	0x3d, r28	; 61
		wdt_enable(WDTO_500MS);
    2c90:	2d e0       	ldi	r18, 0x0D	; 13
    2c92:	88 e1       	ldi	r24, 0x18	; 24
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	0f b6       	in	r0, 0x3f	; 63
    2c98:	f8 94       	cli
    2c9a:	a8 95       	wdr
    2c9c:	81 bd       	out	0x21, r24	; 33
    2c9e:	0f be       	out	0x3f, r0	; 63
    2ca0:	21 bd       	out	0x21, r18	; 33
		wdt_reset();
    2ca2:	a8 95       	wdr
    2ca4:	80 e1       	ldi	r24, 0x10	; 16
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	61 ef       	ldi	r22, 0xF1	; 241
    2caa:	70 e0       	ldi	r23, 0x00	; 0
    2cac:	0e 94 56 17 	call	0x2eac	; 0x2eac <__eerd_word>
		Isb_Node_Id = lib_eep_read_word((uint16_t *)EEP__ISB_NODE_ID_0);
    2cb0:	90 93 95 00 	sts	0x0095, r25
    2cb4:	80 93 94 00 	sts	0x0094, r24
		if ((Isb_Node_Id == 0) | (Isb_Node_Id > 2047)) {
    2cb8:	01 97       	sbiw	r24, 0x01	; 1
    2cba:	8f 5f       	subi	r24, 0xFF	; 255
    2cbc:	97 40       	sbci	r25, 0x07	; 7
    2cbe:	b8 f0       	brcs	.+46     	; 0x2cee <main+0x78>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2cc0:	e1 99       	sbic	0x1c, 1	; 28
    2cc2:	fe cf       	rjmp	.-4      	; 0x2cc0 <main+0x4a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2cc4:	82 e1       	ldi	r24, 0x12	; 18
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	9f bb       	out	0x1f, r25	; 31
    2cca:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2ccc:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2cce:	8d b3       	in	r24, 0x1d	; 29



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
    2cd0:	88 23       	and	r24, r24
    2cd2:	61 f0       	breq	.+24     	; 0x2cec <main+0x76>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2cd4:	e1 99       	sbic	0x1c, 1	; 28
    2cd6:	fe cf       	rjmp	.-4      	; 0x2cd4 <main+0x5e>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2cd8:	82 e1       	ldi	r24, 0x12	; 18
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	9f bb       	out	0x1f, r25	; 31
    2cde:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2ce0:	1d ba       	out	0x1d, r1	; 29

    __asm__ __volatile__ (
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	e2 9a       	sbi	0x1c, 2	; 28
    2ce8:	e1 9a       	sbi	0x1c, 1	; 28
    2cea:	0f be       	out	0x3f, r0	; 63
    2cec:	ff cf       	rjmp	.-2      	; 0x2cec <main+0x76>
    2cee:	2c e0       	ldi	r18, 0x0C	; 12
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
			Node_Reboot();
		}
		for (uint8_t i = 0; i < 4; i++) {
			lib_eep_write_byte((uint8_t *)(EEP__ISB_FIRMWARE_CODE_0 + i), Isb_Firmware_Code[i]);
    2cf2:	f9 01       	movw	r30, r18
    2cf4:	ec 5a       	subi	r30, 0xAC	; 172
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2cfa:	e1 99       	sbic	0x1c, 1	; 28
    2cfc:	fe cf       	rjmp	.-4      	; 0x2cfa <main+0x84>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2cfe:	3f bb       	out	0x1f, r19	; 31
    2d00:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2d02:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2d04:	8d b3       	in	r24, 0x1d	; 29
    2d06:	8e 17       	cp	r24, r30
    2d08:	51 f0       	breq	.+20     	; 0x2d1e <main+0xa8>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2d0a:	e1 99       	sbic	0x1c, 1	; 28
    2d0c:	fe cf       	rjmp	.-4      	; 0x2d0a <main+0x94>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d0e:	3f bb       	out	0x1f, r19	; 31
    2d10:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    2d12:	ed bb       	out	0x1d, r30	; 29

    __asm__ __volatile__ (
    2d14:	0f b6       	in	r0, 0x3f	; 63
    2d16:	f8 94       	cli
    2d18:	e2 9a       	sbi	0x1c, 2	; 28
    2d1a:	e1 9a       	sbi	0x1c, 1	; 28
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	2f 5f       	subi	r18, 0xFF	; 255
    2d20:	3f 4f       	sbci	r19, 0xFF	; 255
		Isb_Node_Id = lib_eep_read_word((uint16_t *)EEP__ISB_NODE_ID_0);
		if ((Isb_Node_Id == 0) | (Isb_Node_Id > 2047)) {
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
			Node_Reboot();
		}
		for (uint8_t i = 0; i < 4; i++) {
    2d22:	20 31       	cpi	r18, 0x10	; 16
    2d24:	31 05       	cpc	r19, r1
    2d26:	29 f7       	brne	.-54     	; 0x2cf2 <main+0x7c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2d28:	e1 99       	sbic	0x1c, 1	; 28
    2d2a:	fe cf       	rjmp	.-4      	; 0x2d28 <main+0xb2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d2c:	8a e1       	ldi	r24, 0x1A	; 26
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	9f bb       	out	0x1f, r25	; 31
    2d32:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2d34:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2d36:	8d b3       	in	r24, 0x1d	; 29
			lib_eep_write_byte((uint8_t *)(EEP__ISB_FIRMWARE_CODE_0 + i), Isb_Firmware_Code[i]);
		}
		Isb_Firmware_Offset = lib_eep_read_byte((uint8_t *)EEP__ISB_FIRMWARE_OFFSET);
    2d38:	80 93 96 00 	sts	0x0096, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2d3c:	e1 99       	sbic	0x1c, 1	; 28
    2d3e:	fe cf       	rjmp	.-4      	; 0x2d3c <main+0xc6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d40:	82 e1       	ldi	r24, 0x12	; 18
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	9f bb       	out	0x1f, r25	; 31
    2d46:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2d48:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2d4a:	8d b3       	in	r24, 0x1d	; 29
		Isb_Node_Operating_Mode = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
    2d4c:	80 93 97 00 	sts	0x0097, r24
		if ((Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_NORM) & (Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_CFG))
    2d50:	88 50       	subi	r24, 0x08	; 8
    2d52:	82 30       	cpi	r24, 0x02	; 2
    2d54:	d0 f0       	brcs	.+52     	; 0x2d8a <main+0x114>
		{
			Isb_Node_Operating_Mode = ISB_NODE_OPERATING_MODE__FW_NORM;
    2d56:	88 e0       	ldi	r24, 0x08	; 8
    2d58:	80 93 97 00 	sts	0x0097, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2d5c:	e1 99       	sbic	0x1c, 1	; 28
    2d5e:	fe cf       	rjmp	.-4      	; 0x2d5c <main+0xe6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d60:	82 e1       	ldi	r24, 0x12	; 18
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	9f bb       	out	0x1f, r25	; 31
    2d66:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2d68:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2d6a:	8d b3       	in	r24, 0x1d	; 29
    2d6c:	88 30       	cpi	r24, 0x08	; 8
    2d6e:	69 f0       	breq	.+26     	; 0x2d8a <main+0x114>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2d70:	e1 99       	sbic	0x1c, 1	; 28
    2d72:	fe cf       	rjmp	.-4      	; 0x2d70 <main+0xfa>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d74:	82 e1       	ldi	r24, 0x12	; 18
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	9f bb       	out	0x1f, r25	; 31
    2d7a:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2d7c:	88 e0       	ldi	r24, 0x08	; 8
    2d7e:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	f8 94       	cli
    2d84:	e2 9a       	sbi	0x1c, 2	; 28
    2d86:	e1 9a       	sbi	0x1c, 1	; 28
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	40 91 98 00 	lds	r20, 0x0098
    2d8e:	2c e1       	ldi	r18, 0x1C	; 28
    2d90:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2d92:	e1 99       	sbic	0x1c, 1	; 28
    2d94:	fe cf       	rjmp	.-4      	; 0x2d92 <main+0x11c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d96:	3f bb       	out	0x1f, r19	; 31
    2d98:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2d9a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2d9c:	8d b3       	in	r24, 0x1d	; 29
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, Isb_Node_Operating_Mode);
		}
		for (uint8_t i = 0; i < 4; i++)
		{
			if (lib_eep_read_byte((uint8_t *)(EEP__ISB_CONFIG_CODE_0 + i)) != Isb_Firmware_Code[i])
    2d9e:	f9 01       	movw	r30, r18
    2da0:	ec 5b       	subi	r30, 0xBC	; 188
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	90 81       	ld	r25, Z
    2da6:	89 13       	cpse	r24, r25
			{
				Error |= ERROR__CONFIG_CODE;
    2da8:	41 60       	ori	r20, 0x01	; 1
    2daa:	2f 5f       	subi	r18, 0xFF	; 255
    2dac:	3f 4f       	sbci	r19, 0xFF	; 255
		if ((Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_NORM) & (Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_CFG))
		{
			Isb_Node_Operating_Mode = ISB_NODE_OPERATING_MODE__FW_NORM;
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, Isb_Node_Operating_Mode);
		}
		for (uint8_t i = 0; i < 4; i++)
    2dae:	20 32       	cpi	r18, 0x20	; 32
    2db0:	31 05       	cpc	r19, r1
    2db2:	79 f7       	brne	.-34     	; 0x2d92 <main+0x11c>
    2db4:	40 93 98 00 	sts	0x0098, r20
		#if defined(INF_TWI_C_)
			Inf_Twi_Init(0, 12);
// TODO:
Lib_Pin_Set(4, 2, LIB_PIN_OUTPUT_HIGH);
		#endif /* INF_TWI_C_ */
		if (Error == 0) {
    2db8:	44 23       	and	r20, r20
    2dba:	99 f4       	brne	.+38     	; 0x2de2 <main+0x16c>



	void Isb_Systick_Init(void) {
		#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__) || defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
			TCCR0 = (1 << WGM01) | (1 << CS01) | (1 << CS00);
    2dbc:	8b e0       	ldi	r24, 0x0B	; 11
    2dbe:	83 bf       	out	0x33, r24	; 51
			TCNT0 = 0;
    2dc0:	12 be       	out	0x32, r1	; 50
			OCR0 = (F_CPU / 64) / 1000;
    2dc2:	8d e7       	ldi	r24, 0x7D	; 125
    2dc4:	8c bf       	out	0x3c, r24	; 60
			TIMSK = (1 << OCIE0);
    2dc6:	82 e0       	ldi	r24, 0x02	; 2
    2dc8:	89 bf       	out	0x39, r24	; 57
			Isb_Systick_Init();
			Isb_Ch_Init();
    2dca:	0e 94 b6 05 	call	0xb6c	; 0xb6c <Isb_Ch_Init>
			Isb_Grp_Init();
    2dce:	0e 94 fd 10 	call	0x21fa	; 0x21fa <Isb_Grp_Init>
			Isb_Obj_Init();
    2dd2:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <Isb_Obj_Init>
			Isb_Obj_Exec();
    2dd6:	0e 94 11 13 	call	0x2622	; 0x2622 <Isb_Obj_Exec>
			Isb_App_Init();
    2dda:	0e 94 57 06 	call	0xcae	; 0xcae <Isb_App_Init>
			Isb_App_Exec();
    2dde:	0e 94 d7 08 	call	0x11ae	; 0x11ae <Isb_App_Exec>
		}
		sei();
    2de2:	78 94       	sei
		#endif /* ISB_INF_USART0 == 1 */
		#if ISB_INF_USART1 == 1
			Isb_Inf_Usart_Init(1);
		#endif /* ISB_INF_USART1 == 1 */
		#if ISB_INF_CAN0 == 1
			Isb_Inf_Can_Init(0);
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <Isb_Inf_Can_Init>
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
    2dea:	40 91 94 00 	lds	r20, 0x0094
    2dee:	50 91 95 00 	lds	r21, 0x0095
		Isb_Msg.Data[0] = ISB_MSG_TOP__SERIAL_NUMBER__MODE__ERROR;
    2df2:	81 e2       	ldi	r24, 0x21	; 33
    2df4:	8e 83       	std	Y+6, r24	; 0x06
    2df6:	fe 01       	movw	r30, r28
    2df8:	37 96       	adiw	r30, 0x07	; 7
    2dfa:	24 e0       	ldi	r18, 0x04	; 4
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2dfe:	e1 99       	sbic	0x1c, 1	; 28
    2e00:	fe cf       	rjmp	.-4      	; 0x2dfe <main+0x188>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2e02:	3f bb       	out	0x1f, r19	; 31
    2e04:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2e06:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2e08:	8d b3       	in	r24, 0x1d	; 29
		for (uint8_t i = 0; i < 4; i++) {
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
    2e0a:	81 93       	st	Z+, r24
    2e0c:	2f 5f       	subi	r18, 0xFF	; 255
    2e0e:	3f 4f       	sbci	r19, 0xFF	; 255
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
		Isb_Msg.Data[0] = ISB_MSG_TOP__SERIAL_NUMBER__MODE__ERROR;
		for (uint8_t i = 0; i < 4; i++) {
    2e10:	28 30       	cpi	r18, 0x08	; 8
    2e12:	31 05       	cpc	r19, r1
    2e14:	a1 f7       	brne	.-24     	; 0x2dfe <main+0x188>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2e16:	e1 99       	sbic	0x1c, 1	; 28
    2e18:	fe cf       	rjmp	.-4      	; 0x2e16 <main+0x1a0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2e1a:	82 e1       	ldi	r24, 0x12	; 18
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	9f bb       	out	0x1f, r25	; 31
    2e20:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2e22:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2e24:	8d b3       	in	r24, 0x1d	; 29
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
    2e26:	8b 87       	std	Y+11, r24	; 0x0b
		Isb_Msg.Data[6] = Error;
    2e28:	80 91 98 00 	lds	r24, 0x0098
    2e2c:	8c 87       	std	Y+12, r24	; 0x0c
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
    2e2e:	5d 83       	std	Y+5, r21	; 0x05
    2e30:	4c 83       	std	Y+4, r20	; 0x04
		#if ISB_INF_USART1_SLAVE == 1
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
    2e32:	82 e0       	ldi	r24, 0x02	; 2
    2e34:	90 ef       	ldi	r25, 0xF0	; 240
    2e36:	9b 83       	std	Y+3, r25	; 0x03
    2e38:	8a 83       	std	Y+2, r24	; 0x02
		#endif /* ISB_INF_USART0_SLAVE == 1 */
		#if ISB_INF_USART1_SLAVE == 1
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
    2e3a:	87 e2       	ldi	r24, 0x27	; 39
    2e3c:	89 83       	std	Y+1, r24	; 0x01
		for (uint8_t i = 0; i < 4; i++) {
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
		Isb_Msg.Data[6] = Error;
		Isb_SendMsg(&Isb_Msg);
    2e3e:	8e 01       	movw	r16, r28
    2e40:	0f 5f       	subi	r16, 0xFF	; 255
    2e42:	1f 4f       	sbci	r17, 0xFF	; 255
    2e44:	c8 01       	movw	r24, r16
    2e46:	0e 94 31 11 	call	0x2262	; 0x2262 <Isb_SendMsg>
						}
					}
				}
			#endif /* ISB_INF_USART1 == 1 */
			#if ISB_INF_CAN0 == 1
				if (Isb_Inf_Can_Rx(0, &Isb_Msg) == TRUE) {
    2e4a:	f0 2e       	mov	r15, r16
    2e4c:	01 2f       	mov	r16, r17
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
		Isb_Msg.Data[6] = Error;
		Isb_SendMsg(&Isb_Msg);
		for (;;) {
			wdt_reset();
    2e4e:	a8 95       	wdr
			if (Error == 0) {
    2e50:	80 91 98 00 	lds	r24, 0x0098
    2e54:	88 23       	and	r24, r24
    2e56:	31 f4       	brne	.+12     	; 0x2e64 <main+0x1ee>
				Isb_Systick_Exec();
    2e58:	0e 94 ee 04 	call	0x9dc	; 0x9dc <Isb_Systick_Exec>
				Isb_Obj_Exec();
    2e5c:	0e 94 11 13 	call	0x2622	; 0x2622 <Isb_Obj_Exec>
				Isb_App_Exec();
    2e60:	0e 94 d7 08 	call	0x11ae	; 0x11ae <Isb_App_Exec>
						}
					}
				}
			#endif /* ISB_INF_USART1 == 1 */
			#if ISB_INF_CAN0 == 1
				if (Isb_Inf_Can_Rx(0, &Isb_Msg) == TRUE) {
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	6f 2d       	mov	r22, r15
    2e68:	70 2f       	mov	r23, r16
    2e6a:	0e 94 ed 03 	call	0x7da	; 0x7da <Isb_Inf_Can_Rx>
    2e6e:	81 30       	cpi	r24, 0x01	; 1
    2e70:	71 f7       	brne	.-36     	; 0x2e4e <main+0x1d8>
						Isb_Inf_Can_Tx(1, &Isb_Msg);
					#endif /* ISB_INF_CAN1 == 1 */
					#if ISB_INF_CAN2 == 1
						Isb_Inf_Can_Tx(2, &Isb_Msg);
					#endif /* ISB_INF_CAN2 == 1 */
					if ((Isb_Msg.Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_UNICAST) {
    2e72:	89 81       	ldd	r24, Y+1	; 0x01
    2e74:	80 73       	andi	r24, 0x30	; 48
    2e76:	69 f4       	brne	.+26     	; 0x2e92 <main+0x21c>
						if (Isb_Msg.DestId == Isb_Node_Id) {
    2e78:	2a 81       	ldd	r18, Y+2	; 0x02
    2e7a:	3b 81       	ldd	r19, Y+3	; 0x03
    2e7c:	80 91 94 00 	lds	r24, 0x0094
    2e80:	90 91 95 00 	lds	r25, 0x0095
    2e84:	28 17       	cp	r18, r24
    2e86:	39 07       	cpc	r19, r25
    2e88:	21 f4       	brne	.+8      	; 0x2e92 <main+0x21c>
							Isb_Config_Rx(&Isb_Msg);
    2e8a:	8f 2d       	mov	r24, r15
    2e8c:	90 2f       	mov	r25, r16
    2e8e:	0e 94 97 14 	call	0x292e	; 0x292e <Isb_Config_Rx>
						}
					}
					if ((Isb_Msg.Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_MULTICAST) {
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	80 73       	andi	r24, 0x30	; 48
    2e96:	80 32       	cpi	r24, 0x20	; 32
    2e98:	d1 f6       	brne	.-76     	; 0x2e4e <main+0x1d8>
						if (Error == 0) {
    2e9a:	80 91 98 00 	lds	r24, 0x0098
    2e9e:	88 23       	and	r24, r24
    2ea0:	b1 f6       	brne	.-84     	; 0x2e4e <main+0x1d8>
							Isb_Obj_Rx(&Isb_Msg);
    2ea2:	8f 2d       	mov	r24, r15
    2ea4:	90 2f       	mov	r25, r16
    2ea6:	0e 94 46 11 	call	0x228c	; 0x228c <Isb_Obj_Rx>
    2eaa:	d1 cf       	rjmp	.-94     	; 0x2e4e <main+0x1d8>

00002eac <__eerd_word>:
    2eac:	df 92       	push	r13
    2eae:	ef 92       	push	r14
    2eb0:	ff 92       	push	r15
    2eb2:	0f 93       	push	r16
    2eb4:	1f 93       	push	r17
    2eb6:	7b 01       	movw	r14, r22
    2eb8:	8c 01       	movw	r16, r24
    2eba:	fb 01       	movw	r30, r22
    2ebc:	09 95       	icall
    2ebe:	d8 2e       	mov	r13, r24
    2ec0:	c8 01       	movw	r24, r16
    2ec2:	01 96       	adiw	r24, 0x01	; 1
    2ec4:	f7 01       	movw	r30, r14
    2ec6:	09 95       	icall
    2ec8:	98 2f       	mov	r25, r24
    2eca:	8d 2d       	mov	r24, r13
    2ecc:	1f 91       	pop	r17
    2ece:	0f 91       	pop	r16
    2ed0:	ff 90       	pop	r15
    2ed2:	ef 90       	pop	r14
    2ed4:	df 90       	pop	r13
    2ed6:	08 95       	ret

00002ed8 <_exit>:
    2ed8:	f8 94       	cli

00002eda <__stop_program>:
    2eda:	ff cf       	rjmp	.-2      	; 0x2eda <__stop_program>
