
fw_27-0.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bd0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00002bd0  00002c44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000289  008000a0  00002c10  00002c84  2**0
                  ALLOC
  3 .stab         000058f8  00000000  00000000  00002c84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002792  00000000  00000000  0000857c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__vector_19>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

00000054 <pgmIsb_Obj_Ch_Array>:
      54:	00 00 00 00 01 01 01 01 02 02 02 02 03 03 03 03     ................
      64:	04 04 04 04 05 05 05 05 06 06 06 06 07 07 07 07     ................

00000074 <pgmIsb_App_DigOut_Ch_Array>:
      74:	00 01 02 03 04 05 06 07                             ........

0000007c <pgmIsb_App_DigOut_Obj_0_Array>:
      7c:	00 04 08 0c 10 14 18 1c                             ........

00000084 <pgmIsb_App_DigOut_Obj_1_Array>:
      84:	01 05 09 0d 11 15 19 1d                             ........

0000008c <pgmIsb_App_DigOut_Obj_2_Array>:
      8c:	02 06 0a 0e 12 16 1a 1e                             ........

00000094 <pgmIsb_App_DigOut_Obj_3_Array>:
      94:	03 07 0b 0f 13 17 1b 1f                             ........

0000009c <pgmIsb_App_DigOut_Pin0_Array>:
      9c:	10 11 1a 1b 1c 1d 1e 1f                             ........

000000a4 <pgmIsb_App_DigOut_Pin1_Array>:
      a4:	48 49 4a 4b 4c 4d 4e 4f                             HIJKLMNO

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf e5       	ldi	r28, 0x5F	; 95
      b2:	d4 e0       	ldi	r29, 0x04	; 4
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	10 e0       	ldi	r17, 0x00	; 0
      ba:	a0 e6       	ldi	r26, 0x60	; 96
      bc:	b0 e0       	ldi	r27, 0x00	; 0
      be:	e0 ed       	ldi	r30, 0xD0	; 208
      c0:	fb e2       	ldi	r31, 0x2B	; 43
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <.do_copy_data_start>

000000c4 <.do_copy_data_loop>:
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0

000000c8 <.do_copy_data_start>:
      c8:	a0 3a       	cpi	r26, 0xA0	; 160
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <.do_copy_data_loop>

000000ce <__do_clear_bss>:
      ce:	13 e0       	ldi	r17, 0x03	; 3
      d0:	a0 ea       	ldi	r26, 0xA0	; 160
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a9 32       	cpi	r26, 0x29	; 41
      da:	b1 07       	cpc	r27, r17
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 9e 14 	call	0x293c	; 0x293c <main>
      e2:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000ea <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
      ea:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
      ec:	e1 99       	sbic	0x1c, 1	; 28
      ee:	fe cf       	rjmp	.-4      	; 0xec <eeprom_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
      f0:	3f bb       	out	0x1f, r19	; 31
      f2:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
      f4:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
      f6:	8d b3       	in	r24, 0x1d	; 29
}
      f8:	08 95       	ret

000000fa <lib_eep_read_byte>:
#ifndef LIB_EEP_C_
	#define LIB_EEP_C_



	uint8_t __attribute__((always_inline)) lib_eep_read_byte(uint8_t * aAddr) {
      fa:	9c 01       	movw	r18, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
      fc:	e1 99       	sbic	0x1c, 1	; 28
      fe:	fe cf       	rjmp	.-4      	; 0xfc <lib_eep_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     100:	3f bb       	out	0x1f, r19	; 31
     102:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
     104:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     106:	8d b3       	in	r24, 0x1d	; 29
		return eeprom_read_byte(aAddr);;
	}
     108:	08 95       	ret

0000010a <lib_eep_write_byte>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     10a:	e1 99       	sbic	0x1c, 1	; 28
     10c:	fe cf       	rjmp	.-4      	; 0x10a <lib_eep_write_byte>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     10e:	9c 01       	movw	r18, r24
     110:	9f bb       	out	0x1f, r25	; 31
     112:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     114:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     116:	8d b3       	in	r24, 0x1d	; 29
	}



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
     118:	86 17       	cp	r24, r22
     11a:	51 f0       	breq	.+20     	; 0x130 <lib_eep_write_byte+0x26>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     11c:	e1 99       	sbic	0x1c, 1	; 28
     11e:	fe cf       	rjmp	.-4      	; 0x11c <lib_eep_write_byte+0x12>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     120:	3f bb       	out	0x1f, r19	; 31
     122:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
     124:	6d bb       	out	0x1d, r22	; 29

    __asm__ __volatile__ (
     126:	0f b6       	in	r0, 0x3f	; 63
     128:	f8 94       	cli
     12a:	e2 9a       	sbi	0x1c, 2	; 28
     12c:	e1 9a       	sbi	0x1c, 1	; 28
     12e:	0f be       	out	0x3f, r0	; 63
     130:	08 95       	ret

00000132 <lib_eep_fw_read_byte>:
	}



	uint8_t __attribute__((always_inline)) lib_eep_fw_read_byte(uint8_t * aAddr) {
		return eeprom_read_byte(Isb_Firmware_Offset + aAddr);;
     132:	20 91 a7 00 	lds	r18, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     136:	e1 99       	sbic	0x1c, 1	; 28
     138:	fe cf       	rjmp	.-4      	; 0x136 <lib_eep_fw_read_byte+0x4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     13a:	82 0f       	add	r24, r18
     13c:	91 1d       	adc	r25, r1
     13e:	9f bb       	out	0x1f, r25	; 31
     140:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     142:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     144:	8d b3       	in	r24, 0x1d	; 29
	}
     146:	08 95       	ret

00000148 <lib_eep_fw_write_byte>:
		return eeprom_read_word(Isb_Firmware_Offset + aAddr);;
	}



	void __attribute__((always_inline)) lib_eep_fw_write_byte(uint8_t * aAddr, uint8_t aData) {
     148:	ac 01       	movw	r20, r24
		if (eeprom_read_byte(Isb_Firmware_Offset + aAddr) != aData) {
     14a:	80 91 a7 00 	lds	r24, 0x00A7
     14e:	28 2f       	mov	r18, r24
     150:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     152:	e1 99       	sbic	0x1c, 1	; 28
     154:	fe cf       	rjmp	.-4      	; 0x152 <lib_eep_fw_write_byte+0xa>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     156:	ca 01       	movw	r24, r20
     158:	82 0f       	add	r24, r18
     15a:	93 1f       	adc	r25, r19
     15c:	9f bb       	out	0x1f, r25	; 31
     15e:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     160:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     162:	8d b3       	in	r24, 0x1d	; 29
     164:	86 17       	cp	r24, r22
     166:	61 f0       	breq	.+24     	; 0x180 <lib_eep_fw_write_byte+0x38>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     168:	e1 99       	sbic	0x1c, 1	; 28
     16a:	fe cf       	rjmp	.-4      	; 0x168 <lib_eep_fw_write_byte+0x20>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     16c:	24 0f       	add	r18, r20
     16e:	35 1f       	adc	r19, r21
     170:	3f bb       	out	0x1f, r19	; 31
     172:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
     174:	6d bb       	out	0x1d, r22	; 29

    __asm__ __volatile__ (
     176:	0f b6       	in	r0, 0x3f	; 63
     178:	f8 94       	cli
     17a:	e2 9a       	sbi	0x1c, 2	; 28
     17c:	e1 9a       	sbi	0x1c, 1	; 28
     17e:	0f be       	out	0x3f, r0	; 63
     180:	08 95       	ret

00000182 <Lib_Pin_Get>:
	#endif



	uint8_t Lib_Pin_Get(const uint8_t aPort, const uint8_t aPin) {
		return (*(PINx[aPort]) >> aPin) & 1;
     182:	e8 2f       	mov	r30, r24
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	ee 0f       	add	r30, r30
     188:	ff 1f       	adc	r31, r31
     18a:	ec 57       	subi	r30, 0x7C	; 124
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	01 90       	ld	r0, Z+
     190:	f0 81       	ld	r31, Z
     192:	e0 2d       	mov	r30, r0
     194:	80 81       	ld	r24, Z
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	02 c0       	rjmp	.+4      	; 0x19e <Lib_Pin_Get+0x1c>
     19a:	95 95       	asr	r25
     19c:	87 95       	ror	r24
     19e:	6a 95       	dec	r22
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <Lib_Pin_Get+0x18>
	}
     1a2:	81 70       	andi	r24, 0x01	; 1
     1a4:	08 95       	ret

000001a6 <Lib_Pin_Set>:



	void __attribute__((noinline)) Lib_Pin_Set(const uint8_t aPort, const uint8_t aPin, const uint8_t aCmd) {
     1a6:	91 e0       	ldi	r25, 0x01	; 1
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <Lib_Pin_Set+0x8>
		uint8_t mask;
		uint8_t tmp;
		volatile uint8_t *reg;
		uint8_t Pxx = aPin;
		for (mask = 1; Pxx--; mask <<= 1) ;
     1aa:	99 0f       	add	r25, r25
     1ac:	61 50       	subi	r22, 0x01	; 1
     1ae:	66 23       	and	r22, r22
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <Lib_Pin_Set+0x4>
		reg = PORTx[aPort];
     1b2:	a8 2f       	mov	r26, r24
     1b4:	b0 e0       	ldi	r27, 0x00	; 0
     1b6:	fd 01       	movw	r30, r26
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	ec 58       	subi	r30, 0x8C	; 140
     1be:	ff 4f       	sbci	r31, 0xFF	; 255
     1c0:	01 90       	ld	r0, Z+
     1c2:	f0 81       	ld	r31, Z
     1c4:	e0 2d       	mov	r30, r0
		tmp = *reg | mask;
     1c6:	80 81       	ld	r24, Z
     1c8:	89 2b       	or	r24, r25
		if (! (aCmd & 2)) {
     1ca:	41 ff       	sbrs	r20, 1
			tmp ^= mask;
     1cc:	89 27       	eor	r24, r25
		}
		*reg = tmp;
     1ce:	80 83       	st	Z, r24
		reg = DDRx[aPort];
     1d0:	aa 0f       	add	r26, r26
     1d2:	bb 1f       	adc	r27, r27
     1d4:	ac 59       	subi	r26, 0x9C	; 156
     1d6:	bf 4f       	sbci	r27, 0xFF	; 255
     1d8:	ed 91       	ld	r30, X+
     1da:	fc 91       	ld	r31, X
		tmp = *reg | mask;
     1dc:	80 81       	ld	r24, Z
     1de:	89 2b       	or	r24, r25
		if (! (aCmd & 1)) {
     1e0:	40 ff       	sbrs	r20, 0
			tmp ^= mask;
     1e2:	89 27       	eor	r24, r25
		}
		*reg = tmp;
     1e4:	80 83       	st	Z, r24
	}
     1e6:	08 95       	ret

000001e8 <Inf_Spi_Init>:
	#endif /* ISYSBUS_LIB */



	void Inf_Spi_Init(const unsigned char aCfg)
	{
     1e8:	df 93       	push	r29
     1ea:	cf 93       	push	r28
     1ec:	0f 92       	push	r0
     1ee:	cd b7       	in	r28, 0x3d	; 61
     1f0:	de b7       	in	r29, 0x3e	; 62
     1f2:	89 83       	std	Y+1, r24	; 0x01

		if (bit_is_set(aCfg, SPE))
     1f4:	89 81       	ldd	r24, Y+1	; 0x01
     1f6:	86 ff       	sbrs	r24, 6
     1f8:	0c c0       	rjmp	.+24     	; 0x212 <Inf_Spi_Init+0x2a>
		{
			if (bit_is_set(aCfg, MSTR))
     1fa:	89 81       	ldd	r24, Y+1	; 0x01
     1fc:	84 ff       	sbrs	r24, 4
     1fe:	05 c0       	rjmp	.+10     	; 0x20a <Inf_Spi_Init+0x22>
			{
				INF_SPI_DDR |= (1 << INF_SPI_DD_MOSI) | (1 << INF_SPI_DD_SCK);
     200:	87 b3       	in	r24, 0x17	; 23
     202:	80 6a       	ori	r24, 0xA0	; 160
     204:	87 bb       	out	0x17, r24	; 23
				INF_SPI_DDR &= ~(1 << INF_SPI_DD_MISO);
     206:	be 98       	cbi	0x17, 6	; 23
     208:	07 c0       	rjmp	.+14     	; 0x218 <Inf_Spi_Init+0x30>
			}
			else
			{
				INF_SPI_DDR |= (1 << INF_SPI_DD_MISO);
     20a:	be 9a       	sbi	0x17, 6	; 23
				INF_SPI_DDR &= ~(1 << INF_SPI_DD_MOSI) & ~(1 << INF_SPI_DD_SCK);
     20c:	87 b3       	in	r24, 0x17	; 23
     20e:	8f 75       	andi	r24, 0x5F	; 95
     210:	02 c0       	rjmp	.+4      	; 0x216 <Inf_Spi_Init+0x2e>
			}
		}
		else
		{
			INF_SPI_DDR &= ~(1 << INF_SPI_DD_MISO) & ~(1 << INF_SPI_DD_MOSI) & ~(1 << INF_SPI_DD_SCK);
     212:	87 b3       	in	r24, 0x17	; 23
     214:	8f 71       	andi	r24, 0x1F	; 31
     216:	87 bb       	out	0x17, r24	; 23
		}

		SPCR = aCfg;
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	8d b9       	out	0x0d, r24	; 13
		SPSR = 0;
     21c:	1e b8       	out	0x0e, r1	; 14

	}
     21e:	0f 90       	pop	r0
     220:	cf 91       	pop	r28
     222:	df 91       	pop	r29
     224:	08 95       	ret

00000226 <Inf_Spi_Rx>:


	unsigned char Inf_Spi_Rx(void)
	{

		SPDR = 0;
     226:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     228:	77 9b       	sbis	0x0e, 7	; 14
     22a:	fe cf       	rjmp	.-4      	; 0x228 <Inf_Spi_Rx+0x2>
		return SPDR;
     22c:	8f b1       	in	r24, 0x0f	; 15

	}
     22e:	08 95       	ret

00000230 <Inf_Spi_Tx>:


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     230:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     232:	77 9b       	sbis	0x0e, 7	; 14
     234:	fe cf       	rjmp	.-4      	; 0x232 <Inf_Spi_Tx+0x2>

	}
     236:	08 95       	ret

00000238 <Inf_Spi_TxRx>:


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     238:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     23a:	77 9b       	sbis	0x0e, 7	; 14
     23c:	fe cf       	rjmp	.-4      	; 0x23a <Inf_Spi_TxRx+0x2>
		return SPDR;
     23e:	8f b1       	in	r24, 0x0f	; 15

	}
     240:	08 95       	ret

00000242 <Lib_Mcp2515_Read>:
#ifndef LIB_MCP2515_C_
	#define LIB_MCP2515_C_



	uint8_t Lib_Mcp2515_Read(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr) {
     242:	ff 92       	push	r15
     244:	0f 93       	push	r16
     246:	1f 93       	push	r17
     248:	08 2f       	mov	r16, r24
     24a:	f6 2e       	mov	r15, r22
     24c:	14 2f       	mov	r17, r20
		uint8_t aData;
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     24e:	41 e0       	ldi	r20, 0x01	; 1
     250:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     254:	83 e0       	ldi	r24, 0x03	; 3
     256:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     258:	77 9b       	sbis	0x0e, 7	; 14
     25a:	fe cf       	rjmp	.-4      	; 0x258 <Lib_Mcp2515_Read+0x16>
		return SPDR;
     25c:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     25e:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     260:	77 9b       	sbis	0x0e, 7	; 14
     262:	fe cf       	rjmp	.-4      	; 0x260 <Lib_Mcp2515_Read+0x1e>
		return SPDR;
     264:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     266:	8f ef       	ldi	r24, 0xFF	; 255
     268:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     26a:	77 9b       	sbis	0x0e, 7	; 14
     26c:	fe cf       	rjmp	.-4      	; 0x26a <Lib_Mcp2515_Read+0x28>
		return SPDR;
     26e:	1f b1       	in	r17, 0x0f	; 15
		Inf_Spi_TxRx(LIB_MCP2515_READ);
		Inf_Spi_TxRx(aAddr);
		aData = Inf_Spi_TxRx(0xff);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     270:	80 2f       	mov	r24, r16
     272:	6f 2d       	mov	r22, r15
     274:	43 e0       	ldi	r20, 0x03	; 3
     276:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>
		return aData;
	}
     27a:	81 2f       	mov	r24, r17
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	ff 90       	pop	r15
     282:	08 95       	ret

00000284 <Lib_Mcp2515_Write>:



	void Lib_Mcp2515_Write(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr, const uint8_t aData) {
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	08 2f       	mov	r16, r24
     28e:	f6 2e       	mov	r15, r22
     290:	14 2f       	mov	r17, r20
     292:	e2 2e       	mov	r14, r18
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     294:	41 e0       	ldi	r20, 0x01	; 1
     296:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     29a:	82 e0       	ldi	r24, 0x02	; 2
     29c:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     29e:	77 9b       	sbis	0x0e, 7	; 14
     2a0:	fe cf       	rjmp	.-4      	; 0x29e <Lib_Mcp2515_Write+0x1a>
		return SPDR;
     2a2:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     2a4:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2a6:	77 9b       	sbis	0x0e, 7	; 14
     2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <Lib_Mcp2515_Write+0x22>
		return SPDR;
     2aa:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     2ac:	ef b8       	out	0x0f, r14	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2ae:	77 9b       	sbis	0x0e, 7	; 14
     2b0:	fe cf       	rjmp	.-4      	; 0x2ae <Lib_Mcp2515_Write+0x2a>
		return SPDR;
     2b2:	8f b1       	in	r24, 0x0f	; 15
		Inf_Spi_TxRx(LIB_MCP2515_WRITE);
		Inf_Spi_TxRx(aAddr);
		Inf_Spi_TxRx(aData);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     2b4:	80 2f       	mov	r24, r16
     2b6:	6f 2d       	mov	r22, r15
     2b8:	43 e0       	ldi	r20, 0x03	; 3
     2ba:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>
	}
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	ff 90       	pop	r15
     2c4:	ef 90       	pop	r14
     2c6:	08 95       	ret

000002c8 <Lib_Mcp2515_Modify>:



	void Lib_Mcp2515_Modify(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr, const uint8_t aMask, const uint8_t aData) {
     2c8:	df 92       	push	r13
     2ca:	ef 92       	push	r14
     2cc:	ff 92       	push	r15
     2ce:	0f 93       	push	r16
     2d0:	1f 93       	push	r17
     2d2:	e8 2e       	mov	r14, r24
     2d4:	d6 2e       	mov	r13, r22
     2d6:	14 2f       	mov	r17, r20
     2d8:	f2 2e       	mov	r15, r18
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     2da:	41 e0       	ldi	r20, 0x01	; 1
     2dc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     2e0:	85 e0       	ldi	r24, 0x05	; 5
     2e2:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2e4:	77 9b       	sbis	0x0e, 7	; 14
     2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <Lib_Mcp2515_Modify+0x1c>
		return SPDR;
     2e8:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     2ea:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2ec:	77 9b       	sbis	0x0e, 7	; 14
     2ee:	fe cf       	rjmp	.-4      	; 0x2ec <Lib_Mcp2515_Modify+0x24>
		return SPDR;
     2f0:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     2f2:	ff b8       	out	0x0f, r15	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2f4:	77 9b       	sbis	0x0e, 7	; 14
     2f6:	fe cf       	rjmp	.-4      	; 0x2f4 <Lib_Mcp2515_Modify+0x2c>
		return SPDR;
     2f8:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     2fa:	0f b9       	out	0x0f, r16	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2fc:	77 9b       	sbis	0x0e, 7	; 14
     2fe:	fe cf       	rjmp	.-4      	; 0x2fc <Lib_Mcp2515_Modify+0x34>
		return SPDR;
     300:	8f b1       	in	r24, 0x0f	; 15
		Inf_Spi_TxRx(LIB_MCP2515_BIT_MODIFY);
		Inf_Spi_TxRx(aAddr);
		Inf_Spi_TxRx(aMask);
		Inf_Spi_TxRx(aData);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     302:	8e 2d       	mov	r24, r14
     304:	6d 2d       	mov	r22, r13
     306:	43 e0       	ldi	r20, 0x03	; 3
     308:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>
	}
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	df 90       	pop	r13
     316:	08 95       	ret

00000318 <Inf_Can_Init>:
	#define INF_CAN_C_



	#if defined(INF_CAN0_TX) || defined(INF_CAN0_RX) || defined(INF_CAN1_TX) || defined(INF_CAN1_RX) || defined(INF_CAN2_TX) || defined(INF_CAN2_RX)
		uint8_t Inf_Can_Init(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aCnf1, const uint8_t aCnf2, const uint8_t aCnf3, const uint8_t aRSPort, const uint8_t aRSPin, const uint8_t aMode) {
     318:	8f 92       	push	r8
     31a:	9f 92       	push	r9
     31c:	af 92       	push	r10
     31e:	bf 92       	push	r11
     320:	cf 92       	push	r12
     322:	df 92       	push	r13
     324:	ef 92       	push	r14
     326:	ff 92       	push	r15
     328:	0f 93       	push	r16
     32a:	1f 93       	push	r17
     32c:	df 93       	push	r29
     32e:	cf 93       	push	r28
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	f8 2e       	mov	r15, r24
     336:	d6 2e       	mov	r13, r22
     338:	14 2f       	mov	r17, r20
     33a:	b2 2e       	mov	r11, r18
     33c:	90 2e       	mov	r9, r16
     33e:	0c 2d       	mov	r16, r12
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     340:	43 e0       	ldi	r20, 0x03	; 3
     342:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     346:	81 2f       	mov	r24, r17
     348:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     34c:	8f 2d       	mov	r24, r15
     34e:	6d 2d       	mov	r22, r13
     350:	41 e0       	ldi	r20, 0x01	; 1
     352:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     356:	80 ec       	ldi	r24, 0xC0	; 192
     358:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     35a:	77 9b       	sbis	0x0e, 7	; 14
     35c:	fe cf       	rjmp	.-4      	; 0x35a <Inf_Can_Init+0x42>
		return SPDR;
     35e:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_TxRx(LIB_MCP2515_RESET);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     360:	8f 2d       	mov	r24, r15
     362:	6d 2d       	mov	r22, r13
     364:	43 e0       	ldi	r20, 0x03	; 3
     366:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     36a:	80 ea       	ldi	r24, 0xA0	; 160
     36c:	9f e0       	ldi	r25, 0x0F	; 15
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <Inf_Can_Init+0x56>
			_delay_ms(2);
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF1, aCnf1);
     372:	8f 2d       	mov	r24, r15
     374:	6d 2d       	mov	r22, r13
     376:	4a e2       	ldi	r20, 0x2A	; 42
     378:	2b 2d       	mov	r18, r11
     37a:	0e 94 42 01 	call	0x284	; 0x284 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF2, aCnf2);
     37e:	8f 2d       	mov	r24, r15
     380:	6d 2d       	mov	r22, r13
     382:	49 e2       	ldi	r20, 0x29	; 41
     384:	29 2d       	mov	r18, r9
     386:	0e 94 42 01 	call	0x284	; 0x284 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF3, aCnf3);
     38a:	8f 2d       	mov	r24, r15
     38c:	6d 2d       	mov	r22, r13
     38e:	48 e2       	ldi	r20, 0x28	; 40
     390:	2e 2d       	mov	r18, r14
     392:	0e 94 42 01 	call	0x284	; 0x284 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_RXB0CTRL, 0x64);
     396:	8f 2d       	mov	r24, r15
     398:	6d 2d       	mov	r22, r13
     39a:	40 e6       	ldi	r20, 0x60	; 96
     39c:	24 e6       	ldi	r18, 0x64	; 100
     39e:	0e 94 42 01 	call	0x284	; 0x284 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_RXB1CTRL, 0x60);
     3a2:	8f 2d       	mov	r24, r15
     3a4:	6d 2d       	mov	r22, r13
     3a6:	40 e7       	ldi	r20, 0x70	; 112
     3a8:	20 e6       	ldi	r18, 0x60	; 96
     3aa:	0e 94 42 01 	call	0x284	; 0x284 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CANINTE, 0x03);
     3ae:	8f 2d       	mov	r24, r15
     3b0:	6d 2d       	mov	r22, r13
     3b2:	4b e2       	ldi	r20, 0x2B	; 43
     3b4:	23 e0       	ldi	r18, 0x03	; 3
     3b6:	0e 94 42 01 	call	0x284	; 0x284 <Lib_Mcp2515_Write>
			if (aRSPort != 0) {
     3ba:	00 23       	and	r16, r16
     3bc:	c9 f0       	breq	.+50     	; 0x3f0 <Inf_Can_Init+0xd8>
				if (aRSPort < 8) {
     3be:	08 30       	cpi	r16, 0x08	; 8
     3c0:	30 f4       	brcc	.+12     	; 0x3ce <Inf_Can_Init+0xb6>
					Lib_Pin_Set(aRSPort, aRSPin, LIB_PIN_OUTPUT_LOW);
     3c2:	80 2f       	mov	r24, r16
     3c4:	6a 2d       	mov	r22, r10
     3c6:	41 e0       	ldi	r20, 0x01	; 1
     3c8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>
     3cc:	11 c0       	rjmp	.+34     	; 0x3f0 <Inf_Can_Init+0xd8>
				}
//				else if (aRSPort < 16) {
//					Lib_Pin_Set(aRSPort, aRSPin, LIB_PIN_OUTPUT_HIGH);
//				}
				else if (aRSPort == 0xFC) {
     3ce:	0c 3f       	cpi	r16, 0xFC	; 252
     3d0:	31 f4       	brne	.+12     	; 0x3de <Inf_Can_Init+0xc6>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x14, 0x04);
     3d2:	8f 2d       	mov	r24, r15
     3d4:	6d 2d       	mov	r22, r13
     3d6:	4c e0       	ldi	r20, 0x0C	; 12
     3d8:	24 e1       	ldi	r18, 0x14	; 20
     3da:	04 e0       	ldi	r16, 0x04	; 4
     3dc:	07 c0       	rjmp	.+14     	; 0x3ec <Inf_Can_Init+0xd4>
				}
				else if (aRSPort == 0xFD) {
     3de:	0d 3f       	cpi	r16, 0xFD	; 253
     3e0:	39 f4       	brne	.+14     	; 0x3f0 <Inf_Can_Init+0xd8>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x28, 0x08);
     3e2:	8f 2d       	mov	r24, r15
     3e4:	6d 2d       	mov	r22, r13
     3e6:	4c e0       	ldi	r20, 0x0C	; 12
     3e8:	28 e2       	ldi	r18, 0x28	; 40
     3ea:	08 e0       	ldi	r16, 0x08	; 8
     3ec:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Lib_Mcp2515_Modify>
//				}
//				else if (aRSPort == 0xFF) {
//					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x28, 0x28);
//				}
			}
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x0C);
     3f0:	8f 2d       	mov	r24, r15
     3f2:	6d 2d       	mov	r22, r13
     3f4:	4c e0       	ldi	r20, 0x0C	; 12
     3f6:	2c e0       	ldi	r18, 0x0C	; 12
     3f8:	0e 94 42 01 	call	0x284	; 0x284 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_CANCTRL, 0xE0, aMode);
     3fc:	8f 2d       	mov	r24, r15
     3fe:	6d 2d       	mov	r22, r13
     400:	4f e0       	ldi	r20, 0x0F	; 15
     402:	20 ee       	ldi	r18, 0xE0	; 224
     404:	08 2d       	mov	r16, r8
     406:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Lib_Mcp2515_Modify>
			if (((Lib_Mcp2515_Read(aSSPort, aSSPin, LIB_MCP2515_CANCTRL)) & 0xE0) == aMode) {
     40a:	8f 2d       	mov	r24, r15
     40c:	6d 2d       	mov	r22, r13
     40e:	4f e0       	ldi	r20, 0x0F	; 15
     410:	0e 94 21 01 	call	0x242	; 0x242 <Lib_Mcp2515_Read>
     414:	40 e0       	ldi	r20, 0x00	; 0
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	80 7e       	andi	r24, 0xE0	; 224
     41a:	90 70       	andi	r25, 0x00	; 0
     41c:	28 2d       	mov	r18, r8
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	82 17       	cp	r24, r18
     422:	93 07       	cpc	r25, r19
     424:	09 f4       	brne	.+2      	; 0x428 <Inf_Can_Init+0x110>
     426:	41 e0       	ldi	r20, 0x01	; 1
				return TRUE;
			}
			return FALSE;
		}
     428:	84 2f       	mov	r24, r20
     42a:	cf 91       	pop	r28
     42c:	df 91       	pop	r29
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	df 90       	pop	r13
     438:	cf 90       	pop	r12
     43a:	bf 90       	pop	r11
     43c:	af 90       	pop	r10
     43e:	9f 90       	pop	r9
     440:	8f 90       	pop	r8
     442:	08 95       	ret

00000444 <Inf_Can_Rx>:
	#endif /* INF_CAN0_TX || INF_CAN0_RX || INF_CAN1_TX || INF_CAN1_RX || INF_CAN2_TX || INF_CAN2_RX */



	#if defined(INF_CAN0_RX) || defined(INF_CAN1_RX) || defined(INF_CAN2_RX)
		uint8_t Inf_Can_Rx(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aRSPort, const uint8_t aRSPin, Inf_Can_Msg_t * aInf_Can_Msg) {
     444:	df 92       	push	r13
     446:	ef 92       	push	r14
     448:	ff 92       	push	r15
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	df 93       	push	r29
     450:	cf 93       	push	r28
     452:	0f 92       	push	r0
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	08 2f       	mov	r16, r24
     45a:	d6 2e       	mov	r13, r22
     45c:	14 2f       	mov	r17, r20
			uint8_t State = 0;
     45e:	19 82       	std	Y+1, r1	; 0x01
			uint8_t CmdSave = 0;
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     460:	43 e0       	ldi	r20, 0x03	; 3
     462:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     466:	81 2f       	mov	r24, r17
     468:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     46c:	80 2f       	mov	r24, r16
     46e:	6d 2d       	mov	r22, r13
     470:	41 e0       	ldi	r20, 0x01	; 1
     472:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     476:	80 eb       	ldi	r24, 0xB0	; 176
     478:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     47a:	77 9b       	sbis	0x0e, 7	; 14
     47c:	fe cf       	rjmp	.-4      	; 0x47a <__stack+0x1b>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     47e:	8f ef       	ldi	r24, 0xFF	; 255
     480:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     482:	77 9b       	sbis	0x0e, 7	; 14
     484:	fe cf       	rjmp	.-4      	; 0x482 <__stack+0x23>
		return SPDR;
     486:	9f b1       	in	r25, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     488:	8f ef       	ldi	r24, 0xFF	; 255
     48a:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     48c:	77 9b       	sbis	0x0e, 7	; 14
     48e:	fe cf       	rjmp	.-4      	; 0x48c <__stack+0x2d>
		return SPDR;
     490:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_Tx(LIB_MCP2515_RX_STATUS);
			State = Inf_Spi_TxRx(0xFF);
     492:	99 83       	std	Y+1, r25	; 0x01
			Inf_Spi_TxRx(0xFF);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     494:	80 2f       	mov	r24, r16
     496:	6d 2d       	mov	r22, r13
     498:	43 e0       	ldi	r20, 0x03	; 3
     49a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>
			if (bit_is_set(State, LIB_MCP2515_RX_STATUS_INSTRUCTION_CANINTF_RX0IF)) {
     49e:	89 81       	ldd	r24, Y+1	; 0x01
     4a0:	86 ff       	sbrs	r24, 6
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__stack+0x49>
     4a4:	10 e9       	ldi	r17, 0x90	; 144
     4a6:	06 c0       	rjmp	.+12     	; 0x4b4 <__stack+0x55>
				CmdSave = LIB_MCP2515_READ_RX_BUFFER0;
			}
			else if (bit_is_set(State, LIB_MCP2515_RX_STATUS_INSTRUCTION_CANINTF_RX1IF)) {
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
     4aa:	87 fd       	sbrc	r24, 7
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__stack+0x53>
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	47 c0       	rjmp	.+142    	; 0x540 <__stack+0xe1>
     4b2:	14 e9       	ldi	r17, 0x94	; 148
				CmdSave = LIB_MCP2515_READ_RX_BUFFER1;
			}
			else {
				return FALSE;
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     4b4:	80 2f       	mov	r24, r16
     4b6:	6d 2d       	mov	r22, r13
     4b8:	41 e0       	ldi	r20, 0x01	; 1
     4ba:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     4be:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4c0:	77 9b       	sbis	0x0e, 7	; 14
     4c2:	fe cf       	rjmp	.-4      	; 0x4c0 <__stack+0x61>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     4c4:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4c6:	77 9b       	sbis	0x0e, 7	; 14
     4c8:	fe cf       	rjmp	.-4      	; 0x4c6 <__stack+0x67>
		return SPDR;
     4ca:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_Tx(CmdSave);
			aInf_Can_Msg->SIdH = Inf_Spi_TxRx(0x00);
     4cc:	f7 01       	movw	r30, r14
     4ce:	81 83       	std	Z+1, r24	; 0x01


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     4d0:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4d2:	77 9b       	sbis	0x0e, 7	; 14
     4d4:	fe cf       	rjmp	.-4      	; 0x4d2 <__stack+0x73>
		return SPDR;
     4d6:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->SIdL = Inf_Spi_TxRx(0x00);
     4d8:	f7 01       	movw	r30, r14
     4da:	80 83       	st	Z, r24


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     4dc:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4de:	77 9b       	sbis	0x0e, 7	; 14
     4e0:	fe cf       	rjmp	.-4      	; 0x4de <__stack+0x7f>
		return SPDR;
     4e2:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->EIdH = Inf_Spi_TxRx(0x00);
     4e4:	f7 01       	movw	r30, r14
     4e6:	83 83       	std	Z+3, r24	; 0x03


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     4e8:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4ea:	77 9b       	sbis	0x0e, 7	; 14
     4ec:	fe cf       	rjmp	.-4      	; 0x4ea <__stack+0x8b>
		return SPDR;
     4ee:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->EIdL = Inf_Spi_TxRx(0x00);
     4f0:	f7 01       	movw	r30, r14
     4f2:	82 83       	std	Z+2, r24	; 0x02


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     4f4:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4f6:	77 9b       	sbis	0x0e, 7	; 14
     4f8:	fe cf       	rjmp	.-4      	; 0x4f6 <__stack+0x97>
		return SPDR;
     4fa:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->Dlc = Inf_Spi_TxRx(0x00);
     4fc:	f7 01       	movw	r30, r14
     4fe:	84 83       	std	Z+4, r24	; 0x04
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
     500:	84 81       	ldd	r24, Z+4	; 0x04
     502:	86 fd       	sbrc	r24, 6
     504:	10 c0       	rjmp	.+32     	; 0x526 <__stack+0xc7>
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	09 c0       	rjmp	.+18     	; 0x51c <__stack+0xbd>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     50a:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     50c:	77 9b       	sbis	0x0e, 7	; 14
     50e:	fe cf       	rjmp	.-4      	; 0x50c <__stack+0xad>
		return SPDR;
     510:	8f b1       	in	r24, 0x0f	; 15
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
     512:	f7 01       	movw	r30, r14
     514:	e9 0f       	add	r30, r25
     516:	f1 1d       	adc	r31, r1
     518:	85 83       	std	Z+5, r24	; 0x05
			aInf_Can_Msg->SIdL = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->EIdH = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->EIdL = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->Dlc = Inf_Spi_TxRx(0x00);
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
     51a:	9f 5f       	subi	r25, 0xFF	; 255
     51c:	f7 01       	movw	r30, r14
     51e:	84 81       	ldd	r24, Z+4	; 0x04
     520:	98 17       	cp	r25, r24
     522:	98 f3       	brcs	.-26     	; 0x50a <__stack+0xab>
     524:	07 c0       	rjmp	.+14     	; 0x534 <__stack+0xd5>
     526:	f7 01       	movw	r30, r14
     528:	80 e0       	ldi	r24, 0x00	; 0
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
				}
			}
			else {
				for (uint8_t i = 0; i < 8; i++) {
					aInf_Can_Msg->Data[i] = 0x00;
     52a:	15 82       	std	Z+5, r1	; 0x05
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
				}
			}
			else {
				for (uint8_t i = 0; i < 8; i++) {
     52c:	8f 5f       	subi	r24, 0xFF	; 255
     52e:	31 96       	adiw	r30, 0x01	; 1
     530:	88 30       	cpi	r24, 0x08	; 8
     532:	d9 f7       	brne	.-10     	; 0x52a <__stack+0xcb>
					aInf_Can_Msg->Data[i] = 0x00;
				}
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     534:	80 2f       	mov	r24, r16
     536:	6d 2d       	mov	r22, r13
     538:	43 e0       	ldi	r20, 0x03	; 3
     53a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>
     53e:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
		}
     540:	0f 90       	pop	r0
     542:	cf 91       	pop	r28
     544:	df 91       	pop	r29
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	ff 90       	pop	r15
     54c:	ef 90       	pop	r14
     54e:	df 90       	pop	r13
     550:	08 95       	ret

00000552 <Inf_Can_Tx>:
	#endif /* INF_CAN0_RX || INF_CAN1_RX || INF_CAN2_RX */



	#if defined(INF_CAN0_TX) || defined(INF_CAN1_TX) || defined(INF_CAN2_TX)
		uint8_t Inf_Can_Tx(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aRSPort, const uint8_t aRSPin, Inf_Can_Msg_t * aInf_Can_Msg) {
     552:	cf 92       	push	r12
     554:	df 92       	push	r13
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	df 93       	push	r29
     560:	cf 93       	push	r28
     562:	0f 92       	push	r0
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	08 2f       	mov	r16, r24
     56a:	d6 2e       	mov	r13, r22
     56c:	14 2f       	mov	r17, r20
			uint8_t State = 0;
     56e:	19 82       	std	Y+1, r1	; 0x01
			uint8_t CmdLoad = 0;
			uint8_t CmdSend = 0;
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     570:	43 e0       	ldi	r20, 0x03	; 3
     572:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     576:	81 2f       	mov	r24, r17
     578:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     57c:	80 2f       	mov	r24, r16
     57e:	6d 2d       	mov	r22, r13
     580:	41 e0       	ldi	r20, 0x01	; 1
     582:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     586:	80 ea       	ldi	r24, 0xA0	; 160
     588:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     58a:	77 9b       	sbis	0x0e, 7	; 14
     58c:	fe cf       	rjmp	.-4      	; 0x58a <Inf_Can_Tx+0x38>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     58e:	8f ef       	ldi	r24, 0xFF	; 255
     590:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     592:	77 9b       	sbis	0x0e, 7	; 14
     594:	fe cf       	rjmp	.-4      	; 0x592 <Inf_Can_Tx+0x40>
		return SPDR;
     596:	9f b1       	in	r25, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     598:	8f ef       	ldi	r24, 0xFF	; 255
     59a:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     59c:	77 9b       	sbis	0x0e, 7	; 14
     59e:	fe cf       	rjmp	.-4      	; 0x59c <Inf_Can_Tx+0x4a>
		return SPDR;
     5a0:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_Tx(LIB_MCP2515_READ_STATUS);
			State = Inf_Spi_TxRx(0xFF);
     5a2:	99 83       	std	Y+1, r25	; 0x01
			Inf_Spi_TxRx(0xFF);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     5a4:	80 2f       	mov	r24, r16
     5a6:	6d 2d       	mov	r22, r13
     5a8:	43 e0       	ldi	r20, 0x03	; 3
     5aa:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>
			if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB0CTRL_TXREQ)) {
     5ae:	89 81       	ldd	r24, Y+1	; 0x01
     5b0:	82 fd       	sbrc	r24, 2
     5b2:	04 c0       	rjmp	.+8      	; 0x5bc <Inf_Can_Tx+0x6a>
     5b4:	10 e4       	ldi	r17, 0x40	; 64
     5b6:	61 e8       	ldi	r22, 0x81	; 129
     5b8:	c6 2e       	mov	r12, r22
     5ba:	0f c0       	rjmp	.+30     	; 0x5da <Inf_Can_Tx+0x88>
				CmdLoad = LIB_MCP2515_LOAD_TX_BUFFER0;
				CmdSend = LIB_MCP2515_RTS_TX0;
			}
			else if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB1CTRL_TXREQ)) {
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	84 fd       	sbrc	r24, 4
     5c0:	04 c0       	rjmp	.+8      	; 0x5ca <Inf_Can_Tx+0x78>
     5c2:	12 e4       	ldi	r17, 0x42	; 66
     5c4:	52 e8       	ldi	r21, 0x82	; 130
     5c6:	c5 2e       	mov	r12, r21
     5c8:	08 c0       	rjmp	.+16     	; 0x5da <Inf_Can_Tx+0x88>
				CmdLoad = LIB_MCP2515_LOAD_TX_BUFFER1;
				CmdSend = LIB_MCP2515_RTS_TX1;
			}
			else if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB2CTRL_TXREQ)) {
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	86 ff       	sbrs	r24, 6
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <Inf_Can_Tx+0x82>
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	48 c0       	rjmp	.+144    	; 0x664 <Inf_Can_Tx+0x112>
     5d4:	14 e4       	ldi	r17, 0x44	; 68
     5d6:	44 e8       	ldi	r20, 0x84	; 132
     5d8:	c4 2e       	mov	r12, r20
				CmdSend = LIB_MCP2515_RTS_TX2;
			}
			else {
				return FALSE;
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     5da:	80 2f       	mov	r24, r16
     5dc:	6d 2d       	mov	r22, r13
     5de:	41 e0       	ldi	r20, 0x01	; 1
     5e0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     5e4:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5e6:	77 9b       	sbis	0x0e, 7	; 14
     5e8:	fe cf       	rjmp	.-4      	; 0x5e6 <Inf_Can_Tx+0x94>
			Inf_Spi_Tx(CmdLoad);
			Inf_Spi_Tx(aInf_Can_Msg->SIdH);
     5ea:	f7 01       	movw	r30, r14
     5ec:	81 81       	ldd	r24, Z+1	; 0x01


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     5ee:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5f0:	77 9b       	sbis	0x0e, 7	; 14
     5f2:	fe cf       	rjmp	.-4      	; 0x5f0 <Inf_Can_Tx+0x9e>
			Inf_Spi_Tx(aInf_Can_Msg->SIdL);
     5f4:	f7 01       	movw	r30, r14
     5f6:	80 81       	ld	r24, Z


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     5f8:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5fa:	77 9b       	sbis	0x0e, 7	; 14
     5fc:	fe cf       	rjmp	.-4      	; 0x5fa <Inf_Can_Tx+0xa8>
			Inf_Spi_Tx(aInf_Can_Msg->EIdH);
     5fe:	f7 01       	movw	r30, r14
     600:	83 81       	ldd	r24, Z+3	; 0x03


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     602:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     604:	77 9b       	sbis	0x0e, 7	; 14
     606:	fe cf       	rjmp	.-4      	; 0x604 <Inf_Can_Tx+0xb2>
			Inf_Spi_Tx(aInf_Can_Msg->EIdL);
     608:	f7 01       	movw	r30, r14
     60a:	82 81       	ldd	r24, Z+2	; 0x02


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     60c:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     60e:	77 9b       	sbis	0x0e, 7	; 14
     610:	fe cf       	rjmp	.-4      	; 0x60e <Inf_Can_Tx+0xbc>
			Inf_Spi_Tx(aInf_Can_Msg->Dlc);
     612:	f7 01       	movw	r30, r14
     614:	24 81       	ldd	r18, Z+4	; 0x04


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     616:	2f b9       	out	0x0f, r18	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     618:	77 9b       	sbis	0x0e, 7	; 14
     61a:	fe cf       	rjmp	.-4      	; 0x618 <Inf_Can_Tx+0xc6>
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
     61c:	f7 01       	movw	r30, r14
     61e:	84 81       	ldd	r24, Z+4	; 0x04
     620:	86 fd       	sbrc	r24, 6
     622:	0c c0       	rjmp	.+24     	; 0x63c <Inf_Can_Tx+0xea>
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	08 c0       	rjmp	.+16     	; 0x638 <Inf_Can_Tx+0xe6>
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++)
				{
					Inf_Spi_Tx(aInf_Can_Msg->Data[i]);
     628:	f7 01       	movw	r30, r14
     62a:	e9 0f       	add	r30, r25
     62c:	f1 1d       	adc	r31, r1
     62e:	85 81       	ldd	r24, Z+5	; 0x05


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     630:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     632:	77 9b       	sbis	0x0e, 7	; 14
     634:	fe cf       	rjmp	.-4      	; 0x632 <Inf_Can_Tx+0xe0>
			Inf_Spi_Tx(aInf_Can_Msg->SIdL);
			Inf_Spi_Tx(aInf_Can_Msg->EIdH);
			Inf_Spi_Tx(aInf_Can_Msg->EIdL);
			Inf_Spi_Tx(aInf_Can_Msg->Dlc);
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++)
     636:	9f 5f       	subi	r25, 0xFF	; 255
     638:	92 17       	cp	r25, r18
     63a:	b0 f3       	brcs	.-20     	; 0x628 <Inf_Can_Tx+0xd6>
				{
					Inf_Spi_Tx(aInf_Can_Msg->Data[i]);
				}
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     63c:	80 2f       	mov	r24, r16
     63e:	6d 2d       	mov	r22, r13
     640:	43 e0       	ldi	r20, 0x03	; 3
     642:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>
			asm volatile("nop");
     646:	00 00       	nop
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     648:	80 2f       	mov	r24, r16
     64a:	6d 2d       	mov	r22, r13
     64c:	41 e0       	ldi	r20, 0x01	; 1
     64e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     652:	cf b8       	out	0x0f, r12	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     654:	77 9b       	sbis	0x0e, 7	; 14
     656:	fe cf       	rjmp	.-4      	; 0x654 <Inf_Can_Tx+0x102>
			Inf_Spi_Tx(CmdSend);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     658:	80 2f       	mov	r24, r16
     65a:	6d 2d       	mov	r22, r13
     65c:	43 e0       	ldi	r20, 0x03	; 3
     65e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>
     662:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
		}
     664:	0f 90       	pop	r0
     666:	cf 91       	pop	r28
     668:	df 91       	pop	r29
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	df 90       	pop	r13
     674:	cf 90       	pop	r12
     676:	08 95       	ret

00000678 <Isb_Inf_Can_Init>:
#ifndef ISB_INF_CAN_C_
	#define ISB_INF_CAN_C_



	uint8_t Isb_Inf_Can_Init(const uint8_t aInf) {
     678:	8f 92       	push	r8
     67a:	af 92       	push	r10
     67c:	cf 92       	push	r12
     67e:	ef 92       	push	r14
     680:	0f 93       	push	r16
		uint8_t Result = FALSE;
		switch (aInf) {
     682:	88 23       	and	r24, r24
     684:	11 f0       	breq	.+4      	; 0x68a <Isb_Inf_Can_Init+0x12>
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	0c c0       	rjmp	.+24     	; 0x6a2 <Isb_Inf_Can_Init+0x2a>
			#if ISB_INF_CAN0 == 1
				case 0:
					Result = Inf_Can_Init(INF_CAN0_SSPORT, INF_CAN0_SSPIN, INF_CAN0_SPICFG, INF_CAN0_CNF1, INF_CAN0_CNF2, INF_CAN0_CNF3, INF_CAN0_RSPORT, INF_CAN0_RSPIN, INF_CAN0_MODE);
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	64 e0       	ldi	r22, 0x04	; 4
     68e:	41 e5       	ldi	r20, 0x51	; 81
     690:	23 e0       	ldi	r18, 0x03	; 3
     692:	06 eb       	ldi	r16, 0xB6	; 182
     694:	74 e0       	ldi	r23, 0x04	; 4
     696:	e7 2e       	mov	r14, r23
     698:	cc 24       	eor	r12, r12
     69a:	aa 24       	eor	r10, r10
     69c:	88 24       	eor	r8, r8
     69e:	0e 94 8c 01 	call	0x318	; 0x318 <Inf_Can_Init>
					Result = Inf_Can_Init(INF_CAN2_SSPORT, INF_CAN2_SSPIN, INF_CAN2_SPICFG, INF_CAN2_CNF1, INF_CAN2_CNF2, INF_CAN2_CNF3, INF_CAN2_RSPORT, INF_CAN2_RSPIN, INF_CAN2_MODE);
					break;
			#endif /* ISB_INF_CAN2 == 1 */
		}
		return Result;
	}
     6a2:	0f 91       	pop	r16
     6a4:	ef 90       	pop	r14
     6a6:	cf 90       	pop	r12
     6a8:	af 90       	pop	r10
     6aa:	8f 90       	pop	r8
     6ac:	08 95       	ret

000006ae <Isb_Inf_Can_Rx>:



	uint8_t Isb_Inf_Can_Rx(const uint8_t aInf, Isb_Msg_t * aIsb_Msg) {
     6ae:	af 92       	push	r10
     6b0:	bf 92       	push	r11
     6b2:	cf 92       	push	r12
     6b4:	df 92       	push	r13
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	df 93       	push	r29
     6be:	cf 93       	push	r28
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
     6c4:	2d 97       	sbiw	r28, 0x0d	; 13
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	6b 01       	movw	r12, r22
		uint8_t aSSPort;
		uint8_t aSSPin;
		uint8_t aSpiCfg;
		uint8_t aRSPort;
		uint8_t aRSPin;
		switch (aInf) {
     6d2:	88 23       	and	r24, r24
     6d4:	09 f0       	breq	.+2      	; 0x6d8 <Isb_Inf_Can_Rx+0x2a>
     6d6:	66 c0       	rjmp	.+204    	; 0x7a4 <Isb_Inf_Can_Rx+0xf6>
			default:
				return FALSE;
				break;
		}
		Inf_Can_Msg_t aCanMsg;
		if (Inf_Can_Rx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	64 e0       	ldi	r22, 0x04	; 4
     6dc:	41 e5       	ldi	r20, 0x51	; 81
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	00 e0       	ldi	r16, 0x00	; 0
     6e2:	5e 01       	movw	r10, r28
     6e4:	08 94       	sec
     6e6:	a1 1c       	adc	r10, r1
     6e8:	b1 1c       	adc	r11, r1
     6ea:	75 01       	movw	r14, r10
     6ec:	0e 94 22 02 	call	0x444	; 0x444 <Inf_Can_Rx>
     6f0:	81 30       	cpi	r24, 0x01	; 1
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <Isb_Inf_Can_Rx+0x48>
     6f4:	57 c0       	rjmp	.+174    	; 0x7a4 <Isb_Inf_Can_Rx+0xf6>
			aIsb_Msg->Flags = ((aCanMsg.SIdH & 0xC0) >> 2) | (aCanMsg.Dlc & ISB_MSG_FLAGS_DLC_MASK);
     6f6:	ea 81       	ldd	r30, Y+2	; 0x02
     6f8:	8e 2f       	mov	r24, r30
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	80 7c       	andi	r24, 0xC0	; 192
     6fe:	90 70       	andi	r25, 0x00	; 0
     700:	95 95       	asr	r25
     702:	87 95       	ror	r24
     704:	95 95       	asr	r25
     706:	87 95       	ror	r24
     708:	0d 81       	ldd	r16, Y+5	; 0x05
     70a:	f0 2f       	mov	r31, r16
     70c:	ff 70       	andi	r31, 0x0F	; 15
     70e:	f8 2b       	or	r31, r24
     710:	d6 01       	movw	r26, r12
     712:	fc 93       	st	X, r31
			aIsb_Msg->DestId = (uint16_t)((aCanMsg.EIdH & 0xF8) >> 3) + (uint16_t)((aCanMsg.SIdL & 0x03) << 5) + (uint16_t)((aCanMsg.SIdL & 0xE0) << 2) + (uint16_t)((aCanMsg.SIdH & 0x3F) << 10);
     714:	6c 81       	ldd	r22, Y+4	; 0x04
     716:	49 81       	ldd	r20, Y+1	; 0x01
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	3e 2f       	mov	r19, r30
     71c:	33 0f       	add	r19, r19
     71e:	33 0f       	add	r19, r19
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	86 2f       	mov	r24, r22
     724:	86 95       	lsr	r24
     726:	86 95       	lsr	r24
     728:	86 95       	lsr	r24
     72a:	28 0f       	add	r18, r24
     72c:	31 1d       	adc	r19, r1
     72e:	ca 01       	movw	r24, r20
     730:	83 70       	andi	r24, 0x03	; 3
     732:	90 70       	andi	r25, 0x00	; 0
     734:	75 e0       	ldi	r23, 0x05	; 5
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	7a 95       	dec	r23
     73c:	e1 f7       	brne	.-8      	; 0x736 <Isb_Inf_Can_Rx+0x88>
     73e:	28 0f       	add	r18, r24
     740:	39 1f       	adc	r19, r25
     742:	40 7e       	andi	r20, 0xE0	; 224
     744:	50 70       	andi	r21, 0x00	; 0
     746:	44 0f       	add	r20, r20
     748:	55 1f       	adc	r21, r21
     74a:	44 0f       	add	r20, r20
     74c:	55 1f       	adc	r21, r21
     74e:	24 0f       	add	r18, r20
     750:	35 1f       	adc	r19, r21
     752:	12 96       	adiw	r26, 0x02	; 2
     754:	3c 93       	st	X, r19
     756:	2e 93       	st	-X, r18
     758:	11 97       	sbiw	r26, 0x01	; 1
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	67 70       	andi	r22, 0x07	; 7
     75e:	70 70       	andi	r23, 0x00	; 0
     760:	76 2f       	mov	r23, r22
     762:	66 27       	eor	r22, r22
     764:	8b 81       	ldd	r24, Y+3	; 0x03
     766:	68 0f       	add	r22, r24
     768:	71 1d       	adc	r23, r1
     76a:	14 96       	adiw	r26, 0x04	; 4
     76c:	7c 93       	st	X, r23
     76e:	6e 93       	st	-X, r22
     770:	13 97       	sbiw	r26, 0x03	; 3
			if (bit_is_set(aCanMsg.Dlc, 6)) {
     772:	8d 81       	ldd	r24, Y+5	; 0x05
     774:	86 fd       	sbrc	r24, 6
     776:	0a c0       	rjmp	.+20     	; 0x78c <Isb_Inf_Can_Rx+0xde>
				aIsb_Msg->Flags |= 0x40;
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     778:	de 01       	movw	r26, r28
     77a:	16 96       	adiw	r26, 0x06	; 6
     77c:	f6 01       	movw	r30, r12
     77e:	20 2f       	mov	r18, r16
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	2b 5f       	subi	r18, 0xFB	; 251
     784:	3f 4f       	sbci	r19, 0xFF	; 255
     786:	2a 0d       	add	r18, r10
     788:	3b 1d       	adc	r19, r11
     78a:	06 c0       	rjmp	.+12     	; 0x798 <Isb_Inf_Can_Rx+0xea>
		if (Inf_Can_Rx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
			aIsb_Msg->Flags = ((aCanMsg.SIdH & 0xC0) >> 2) | (aCanMsg.Dlc & ISB_MSG_FLAGS_DLC_MASK);
			aIsb_Msg->DestId = (uint16_t)((aCanMsg.EIdH & 0xF8) >> 3) + (uint16_t)((aCanMsg.SIdL & 0x03) << 5) + (uint16_t)((aCanMsg.SIdL & 0xE0) << 2) + (uint16_t)((aCanMsg.SIdH & 0x3F) << 10);
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
			if (bit_is_set(aCanMsg.Dlc, 6)) {
				aIsb_Msg->Flags |= 0x40;
     78c:	f0 64       	ori	r31, 0x40	; 64
     78e:	d6 01       	movw	r26, r12
     790:	fc 93       	st	X, r31
     792:	06 c0       	rjmp	.+12     	; 0x7a0 <Isb_Inf_Can_Rx+0xf2>
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
					aIsb_Msg->Data[i] = aCanMsg.Data[i];
     794:	8d 91       	ld	r24, X+
     796:	84 83       	std	Z+4, r24	; 0x04
     798:	31 96       	adiw	r30, 0x01	; 1
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
			if (bit_is_set(aCanMsg.Dlc, 6)) {
				aIsb_Msg->Flags |= 0x40;
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     79a:	a2 17       	cp	r26, r18
     79c:	b3 07       	cpc	r27, r19
     79e:	d1 f7       	brne	.-12     	; 0x794 <Isb_Inf_Can_Rx+0xe6>
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <Isb_Inf_Can_Rx+0xf8>
     7a4:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			return TRUE;
		}
		return FALSE;
	}
     7a6:	2d 96       	adiw	r28, 0x0d	; 13
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	cd bf       	out	0x3d, r28	; 61
     7b2:	cf 91       	pop	r28
     7b4:	df 91       	pop	r29
     7b6:	0f 91       	pop	r16
     7b8:	ff 90       	pop	r15
     7ba:	ef 90       	pop	r14
     7bc:	df 90       	pop	r13
     7be:	cf 90       	pop	r12
     7c0:	bf 90       	pop	r11
     7c2:	af 90       	pop	r10
     7c4:	08 95       	ret

000007c6 <Isb_Inf_Can_Tx>:



	uint8_t Isb_Inf_Can_Tx(const uint8_t aInf, const Isb_Msg_t * aIsb_Msg) {
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	df 93       	push	r29
     7ce:	cf 93       	push	r28
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	2d 97       	sbiw	r28, 0x0d	; 13
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	cd bf       	out	0x3d, r28	; 61
     7e0:	fb 01       	movw	r30, r22
		uint8_t aSSPort;
		uint8_t aSSPin;
		uint8_t aSpiCfg;
		uint8_t aRSPort;
		uint8_t aRSPin;
		switch (aInf) {
     7e2:	88 23       	and	r24, r24
     7e4:	11 f0       	breq	.+4      	; 0x7ea <Isb_Inf_Can_Tx+0x24>
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	4e c0       	rjmp	.+156    	; 0x886 <Isb_Inf_Can_Tx+0xc0>
		}
		Inf_Can_Msg_t aCanMsg;
		// Write Message to SendBuffer - TXBnSIDH:
		//	[7..6] = Type
		//	[5..0] = Dest[15..10]
		aCanMsg.SIdH = ((aIsb_Msg->Flags << 2) & 0xC0) | (aIsb_Msg->DestId >> 10);
     7ea:	92 81       	ldd	r25, Z+2	; 0x02
     7ec:	96 95       	lsr	r25
     7ee:	96 95       	lsr	r25
     7f0:	60 81       	ld	r22, Z
     7f2:	86 2f       	mov	r24, r22
     7f4:	88 0f       	add	r24, r24
     7f6:	88 0f       	add	r24, r24
     7f8:	80 7c       	andi	r24, 0xC0	; 192
     7fa:	89 2b       	or	r24, r25
     7fc:	8a 83       	std	Y+2, r24	; 0x02
		//	[7..5] = Dest[9..7]
		//	[4] = 0
		//	[3] = 1
		//	[2] = 0
		//	[1..0] = Dest[6..5]
		aCanMsg.SIdL = ((uint8_t)(aIsb_Msg->DestId >> 2) & 0xE0) | 0x08 | ((uint8_t)(aIsb_Msg->DestId >> 5) & 0x03);
     7fe:	41 81       	ldd	r20, Z+1	; 0x01
     800:	52 81       	ldd	r21, Z+2	; 0x02
     802:	ca 01       	movw	r24, r20
     804:	96 95       	lsr	r25
     806:	87 95       	ror	r24
     808:	96 95       	lsr	r25
     80a:	87 95       	ror	r24
     80c:	80 7e       	andi	r24, 0xE0	; 224
     80e:	9a 01       	movw	r18, r20
     810:	a5 e0       	ldi	r26, 0x05	; 5
     812:	36 95       	lsr	r19
     814:	27 95       	ror	r18
     816:	aa 95       	dec	r26
     818:	e1 f7       	brne	.-8      	; 0x812 <Isb_Inf_Can_Tx+0x4c>
     81a:	23 70       	andi	r18, 0x03	; 3
     81c:	82 2b       	or	r24, r18
     81e:	88 60       	ori	r24, 0x08	; 8
     820:	89 83       	std	Y+1, r24	; 0x01
		// Write Message to SendBuffer - TXBnEID8:
		//	[7..3] = Dest[4..0]
		//	[2..0] = Source[10..8]
		aCanMsg.EIdH = ((uint8_t)((aIsb_Msg->DestId << 3) & 0xF8)) | ((uint8_t)((aIsb_Msg->SourceId >> 8) & 0x07));
     822:	84 81       	ldd	r24, Z+4	; 0x04
     824:	87 70       	andi	r24, 0x07	; 7
     826:	44 0f       	add	r20, r20
     828:	44 0f       	add	r20, r20
     82a:	44 0f       	add	r20, r20
     82c:	84 2b       	or	r24, r20
     82e:	8c 83       	std	Y+4, r24	; 0x04
		// Write Message to SendBuffer - TXBnEID0:
		//	[7..0] = Source[7..0]
		aCanMsg.EIdL = (uint8_t)aIsb_Msg->SourceId;
     830:	83 81       	ldd	r24, Z+3	; 0x03
     832:	8b 83       	std	Y+3, r24	; 0x03
		// Write Message to SendBuffer - DataLength
		aCanMsg.Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
     834:	6f 70       	andi	r22, 0x0F	; 15
     836:	6d 83       	std	Y+5, r22	; 0x05
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
     838:	80 81       	ld	r24, Z
     83a:	86 fd       	sbrc	r24, 6
     83c:	0a c0       	rjmp	.+20     	; 0x852 <Isb_Inf_Can_Tx+0x8c>
     83e:	df 01       	movw	r26, r30
     840:	fe 01       	movw	r30, r28
     842:	36 96       	adiw	r30, 0x06	; 6
			aCanMsg.Dlc |= 0x40;
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     844:	ce 01       	movw	r24, r28
     846:	86 0f       	add	r24, r22
     848:	91 1d       	adc	r25, r1
     84a:	bc 01       	movw	r22, r24
     84c:	6a 5f       	subi	r22, 0xFA	; 250
     84e:	7f 4f       	sbci	r23, 0xFF	; 255
     850:	07 c0       	rjmp	.+14     	; 0x860 <Isb_Inf_Can_Tx+0x9a>
		aCanMsg.EIdL = (uint8_t)aIsb_Msg->SourceId;
		// Write Message to SendBuffer - DataLength
		aCanMsg.Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
			aCanMsg.Dlc |= 0x40;
     852:	60 64       	ori	r22, 0x40	; 64
     854:	6d 83       	std	Y+5, r22	; 0x05
     856:	08 c0       	rjmp	.+16     	; 0x868 <Isb_Inf_Can_Tx+0xa2>
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
				aCanMsg.Data[i] = aIsb_Msg->Data[i];
     858:	14 96       	adiw	r26, 0x04	; 4
     85a:	8c 91       	ld	r24, X
     85c:	14 97       	sbiw	r26, 0x04	; 4
     85e:	81 93       	st	Z+, r24
     860:	11 96       	adiw	r26, 0x01	; 1
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
			aCanMsg.Dlc |= 0x40;
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     862:	e6 17       	cp	r30, r22
     864:	f7 07       	cpc	r31, r23
     866:	c1 f7       	brne	.-16     	; 0x858 <Isb_Inf_Can_Tx+0x92>
				aCanMsg.Data[i] = aIsb_Msg->Data[i];
			}
		}
		if (Inf_Can_Tx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
     868:	82 e0       	ldi	r24, 0x02	; 2
     86a:	64 e0       	ldi	r22, 0x04	; 4
     86c:	41 e5       	ldi	r20, 0x51	; 81
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	00 e0       	ldi	r16, 0x00	; 0
     872:	7e 01       	movw	r14, r28
     874:	08 94       	sec
     876:	e1 1c       	adc	r14, r1
     878:	f1 1c       	adc	r15, r1
     87a:	0e 94 a9 02 	call	0x552	; 0x552 <Inf_Can_Tx>
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	81 30       	cpi	r24, 0x01	; 1
     882:	09 f4       	brne	.+2      	; 0x886 <Isb_Inf_Can_Tx+0xc0>
     884:	91 e0       	ldi	r25, 0x01	; 1
			return TRUE;
		}
		return FALSE;
	}
     886:	89 2f       	mov	r24, r25
     888:	2d 96       	adiw	r28, 0x0d	; 13
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	f8 94       	cli
     88e:	de bf       	out	0x3e, r29	; 62
     890:	0f be       	out	0x3f, r0	; 63
     892:	cd bf       	out	0x3d, r28	; 61
     894:	cf 91       	pop	r28
     896:	df 91       	pop	r29
     898:	0f 91       	pop	r16
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	08 95       	ret

000008a0 <Isb_Systick_Init>:

	#if defined(__AVR_ATmega8__)
		#warning "TIMER0_COMP_vect missing."
		#error "No definition for this MCU available."
	#elif defined(__AVR_ATmega16__)
	TCCR0 = (1 << WGM01) | (1 << CS01) | (1 << CS00);
     8a0:	8b e0       	ldi	r24, 0x0B	; 11
     8a2:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
     8a4:	12 be       	out	0x32, r1	; 50
	OCR0 = (F_CPU / 64) / 1000;
     8a6:	8d e7       	ldi	r24, 0x7D	; 125
     8a8:	8c bf       	out	0x3c, r24	; 60
	TIMSK = (1 << OCIE0);
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	89 bf       	out	0x39, r24	; 57
	TIMSK0 = (1 << OCIE0A);
	#else
		#error "No definition for this MCU available."
	#endif

	Isb_Systick_Clock.Seconds = 0;
     8ae:	10 92 c0 02 	sts	0x02C0, r1
	Isb_Systick_Clock.Minutes = 0;
     8b2:	10 92 c1 02 	sts	0x02C1, r1
	Isb_Systick_Clock.Hour = 0;
     8b6:	10 92 c2 02 	sts	0x02C2, r1
	Isb_Systick_Clock.Dow = 1;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	80 93 c4 02 	sts	0x02C4, r24
	Isb_Systick_Clock.Day = 1;
     8c0:	80 93 c3 02 	sts	0x02C3, r24
	Isb_Systick_Clock.Month = 1;
     8c4:	80 93 c5 02 	sts	0x02C5, r24
	Isb_Systick_Clock.Year = 0;;
     8c8:	10 92 c7 02 	sts	0x02C7, r1
     8cc:	10 92 c6 02 	sts	0x02C6, r1

}
     8d0:	08 95       	ret

000008d2 <Isb_Systick_Exec>:



void Isb_Systick_Exec(void)
{
     8d2:	1f 93       	push	r17

	if (bit_is_set(Isb_Systick_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
     8d4:	80 91 a0 00 	lds	r24, 0x00A0
     8d8:	80 ff       	sbrs	r24, 0
     8da:	bb c0       	rjmp	.+374    	; 0xa52 <Isb_Systick_Exec+0x180>
	{

		if (Isb_Systick_IrqClock >= 1000)
     8dc:	80 91 a1 00 	lds	r24, 0x00A1
     8e0:	90 91 a2 00 	lds	r25, 0x00A2
     8e4:	88 5e       	subi	r24, 0xE8	; 232
     8e6:	93 40       	sbci	r25, 0x03	; 3
     8e8:	08 f4       	brcc	.+2      	; 0x8ec <Isb_Systick_Exec+0x1a>
     8ea:	72 c0       	rjmp	.+228    	; 0x9d0 <Isb_Systick_Exec+0xfe>
		{
			Isb_Systick_IrqClock = 0;
     8ec:	10 92 a2 00 	sts	0x00A2, r1
     8f0:	10 92 a1 00 	sts	0x00A1, r1
			Isb_Systick_Clock.Seconds++;
     8f4:	80 91 c0 02 	lds	r24, 0x02C0
     8f8:	8f 5f       	subi	r24, 0xFF	; 255
     8fa:	80 93 c0 02 	sts	0x02C0, r24
			if (Isb_Systick_Clock.Seconds == 60)
     8fe:	8c 33       	cpi	r24, 0x3C	; 60
     900:	09 f0       	breq	.+2      	; 0x904 <Isb_Systick_Exec+0x32>
     902:	66 c0       	rjmp	.+204    	; 0x9d0 <Isb_Systick_Exec+0xfe>
			{
				Isb_Systick_Clock.Seconds = 0;
     904:	10 92 c0 02 	sts	0x02C0, r1
				Isb_Systick_Clock.Minutes++;
     908:	80 91 c1 02 	lds	r24, 0x02C1
     90c:	8f 5f       	subi	r24, 0xFF	; 255
     90e:	80 93 c1 02 	sts	0x02C1, r24
				if (Isb_Systick_Clock.Minutes == 60)
     912:	8c 33       	cpi	r24, 0x3C	; 60
     914:	09 f0       	breq	.+2      	; 0x918 <Isb_Systick_Exec+0x46>
     916:	5c c0       	rjmp	.+184    	; 0x9d0 <Isb_Systick_Exec+0xfe>
				{
					Isb_Systick_Clock.Minutes = 0;
     918:	10 92 c1 02 	sts	0x02C1, r1
					Isb_Systick_Clock.Hour++;
     91c:	80 91 c2 02 	lds	r24, 0x02C2
     920:	8f 5f       	subi	r24, 0xFF	; 255
     922:	80 93 c2 02 	sts	0x02C2, r24
					if (Isb_Systick_Clock.Hour == 24)
     926:	88 31       	cpi	r24, 0x18	; 24
     928:	09 f0       	breq	.+2      	; 0x92c <Isb_Systick_Exec+0x5a>
     92a:	52 c0       	rjmp	.+164    	; 0x9d0 <Isb_Systick_Exec+0xfe>
					{
						Isb_Systick_Clock.Hour = 0;
     92c:	10 92 c2 02 	sts	0x02C2, r1
						Isb_Systick_Clock.Day++;
     930:	40 91 c3 02 	lds	r20, 0x02C3
     934:	4f 5f       	subi	r20, 0xFF	; 255
     936:	40 93 c3 02 	sts	0x02C3, r20
						Isb_Systick_Clock.Dow++;
     93a:	80 91 c4 02 	lds	r24, 0x02C4
     93e:	8f 5f       	subi	r24, 0xFF	; 255
     940:	80 93 c4 02 	sts	0x02C4, r24
						if (Isb_Systick_Clock.Dow == 8)
     944:	88 30       	cpi	r24, 0x08	; 8
     946:	19 f4       	brne	.+6      	; 0x94e <Isb_Systick_Exec+0x7c>
						{
							Isb_Systick_Clock.Dow = 1;
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	80 93 c4 02 	sts	0x02C4, r24
						}
						uint8_t newMonth = 0;
						if (Isb_Systick_Clock.Month == 2)
     94e:	10 91 c5 02 	lds	r17, 0x02C5
     952:	12 30       	cpi	r17, 0x02	; 2
     954:	e1 f4       	brne	.+56     	; 0x98e <Isb_Systick_Exec+0xbc>
						{
							if ((Isb_Systick_Clock.Year % 4) == 0)
     956:	20 91 c6 02 	lds	r18, 0x02C6
     95a:	30 91 c7 02 	lds	r19, 0x02C7
     95e:	c9 01       	movw	r24, r18
     960:	83 70       	andi	r24, 0x03	; 3
     962:	90 70       	andi	r25, 0x00	; 0
     964:	89 2b       	or	r24, r25
     966:	81 f4       	brne	.+32     	; 0x988 <Isb_Systick_Exec+0xb6>
							{
								newMonth = 1;
								if ((Isb_Systick_Clock.Year % 100) == 0)
     968:	c9 01       	movw	r24, r18
     96a:	64 e6       	ldi	r22, 0x64	; 100
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <__udivmodhi4>
     972:	89 2b       	or	r24, r25
     974:	09 f0       	breq	.+2      	; 0x978 <Isb_Systick_Exec+0xa6>
     976:	67 c0       	rjmp	.+206    	; 0xa46 <Isb_Systick_Exec+0x174>
								{
									newMonth = 0;
									if ((Isb_Systick_Clock.Year % 400) == 0)
     978:	c9 01       	movw	r24, r18
     97a:	60 e9       	ldi	r22, 0x90	; 144
     97c:	71 e0       	ldi	r23, 0x01	; 1
     97e:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <__udivmodhi4>
     982:	89 2b       	or	r24, r25
     984:	09 f4       	brne	.+2      	; 0x988 <Isb_Systick_Exec+0xb6>
     986:	5f c0       	rjmp	.+190    	; 0xa46 <Isb_Systick_Exec+0x174>
									newMonth = 0;
								}
							}
							else
							{
								if (Isb_Systick_Clock.Day == (daysPerMonth[Isb_Systick_Clock.Month] + 1))
     988:	40 32       	cpi	r20, 0x20	; 32
     98a:	11 f5       	brne	.+68     	; 0x9d0 <Isb_Systick_Exec+0xfe>
     98c:	0d c0       	rjmp	.+26     	; 0x9a8 <Isb_Systick_Exec+0xd6>
								}
							}
						}
						else
						{
							if (Isb_Systick_Clock.Day == (daysPerMonth[Isb_Systick_Clock.Month] + 1))
     98e:	84 2f       	mov	r24, r20
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	e1 2f       	mov	r30, r17
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	ec 56       	subi	r30, 0x6C	; 108
     998:	ff 4f       	sbci	r31, 0xFF	; 255
     99a:	20 81       	ld	r18, Z
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	2f 5f       	subi	r18, 0xFF	; 255
     9a0:	3f 4f       	sbci	r19, 0xFF	; 255
     9a2:	82 17       	cp	r24, r18
     9a4:	93 07       	cpc	r25, r19
     9a6:	a1 f4       	brne	.+40     	; 0x9d0 <Isb_Systick_Exec+0xfe>
								newMonth = 1;
							}
						}
						if (newMonth)
						{
							Isb_Systick_Clock.Day = 1;
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	90 93 c3 02 	sts	0x02C3, r25
							Isb_Systick_Clock.Month++;
     9ae:	81 2f       	mov	r24, r17
     9b0:	8f 5f       	subi	r24, 0xFF	; 255
     9b2:	80 93 c5 02 	sts	0x02C5, r24
							if (Isb_Systick_Clock.Month == 13)
     9b6:	8d 30       	cpi	r24, 0x0D	; 13
     9b8:	59 f4       	brne	.+22     	; 0x9d0 <Isb_Systick_Exec+0xfe>
							{
								Isb_Systick_Clock.Month = 1;
     9ba:	90 93 c5 02 	sts	0x02C5, r25
								Isb_Systick_Clock.Year++;
     9be:	80 91 c6 02 	lds	r24, 0x02C6
     9c2:	90 91 c7 02 	lds	r25, 0x02C7
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	90 93 c7 02 	sts	0x02C7, r25
     9cc:	80 93 c6 02 	sts	0x02C6, r24
					}
				}
			}
		}

		if (bit_is_clear(Isb_Systick_Ctrl, ISB_CTRL_RUNNING))
     9d0:	80 91 a0 00 	lds	r24, 0x00A0
     9d4:	86 fd       	sbrc	r24, 6
     9d6:	13 c0       	rjmp	.+38     	; 0x9fe <Isb_Systick_Exec+0x12c>
		{
			uint16_t Isb_Systick_Delay = 1000;
			if (Isb_Systick_Delay_Counter == Isb_Systick_Delay)
     9d8:	20 91 a3 00 	lds	r18, 0x00A3
     9dc:	30 91 a4 00 	lds	r19, 0x00A4
     9e0:	83 e0       	ldi	r24, 0x03	; 3
     9e2:	28 3e       	cpi	r18, 0xE8	; 232
     9e4:	38 07       	cpc	r19, r24
     9e6:	29 f4       	brne	.+10     	; 0x9f2 <Isb_Systick_Exec+0x120>
			{
				Isb_Systick_Ctrl |= (1<<ISB_CTRL_RUNNING);
     9e8:	80 91 a0 00 	lds	r24, 0x00A0
     9ec:	80 64       	ori	r24, 0x40	; 64
     9ee:	80 93 a0 00 	sts	0x00A0, r24
			}
			Isb_Systick_Delay_Counter++;
     9f2:	2f 5f       	subi	r18, 0xFF	; 255
     9f4:	3f 4f       	sbci	r19, 0xFF	; 255
     9f6:	30 93 a4 00 	sts	0x00A4, r19
     9fa:	20 93 a3 00 	sts	0x00A3, r18
			If_Rf_Rfm12_Ctrl |= (1 << IF_RF_RFM12_CTRL_SOFTIRQ_EXEC);
		}
	#endif /* IF_RF_RFM12 */

	#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
		if (Isb_App_DigOut_IrqExec >= ISB_APP_DIGOUT_EXECTIME)
     9fe:	80 91 ac 00 	lds	r24, 0x00AC
     a02:	90 91 ad 00 	lds	r25, 0x00AD
     a06:	0a 97       	sbiw	r24, 0x0a	; 10
     a08:	48 f0       	brcs	.+18     	; 0xa1c <Isb_Systick_Exec+0x14a>
		{
			Isb_App_DigOut_IrqExec = 0;
     a0a:	10 92 ad 00 	sts	0x00AD, r1
     a0e:	10 92 ac 00 	sts	0x00AC, r1
			Isb_App_DigOut_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a12:	80 91 ab 00 	lds	r24, 0x00AB
     a16:	81 60       	ori	r24, 0x01	; 1
     a18:	80 93 ab 00 	sts	0x00AB, r24
			Isb_App_Clock_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
		}
	#endif /* ISB_APP_CLOCK_MAX && ISB_APP_H_ */

	#if defined(ISB_OBJ_MAX) && defined(ISB_OBJ_H_)
		if (Isb_Obj_IrqExec >= ISB_OBJ_EXECTIME)
     a1c:	80 91 ae 00 	lds	r24, 0x00AE
     a20:	90 91 af 00 	lds	r25, 0x00AF
     a24:	0a 97       	sbiw	r24, 0x0a	; 10
     a26:	48 f0       	brcs	.+18     	; 0xa3a <Isb_Systick_Exec+0x168>
		{
			Isb_Obj_IrqExec = 0;
     a28:	10 92 af 00 	sts	0x00AF, r1
     a2c:	10 92 ae 00 	sts	0x00AE, r1
			Isb_Obj_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a30:	80 91 aa 00 	lds	r24, 0x00AA
     a34:	81 60       	ori	r24, 0x01	; 1
     a36:	80 93 aa 00 	sts	0x00AA, r24
			Isb_Obj_Float_IrqExec = 0;
			Isb_Obj_Float_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
		}
	#endif /* ISB_OBJ_FLOAT_MAX && ISB_OBJ_H_ */

	Isb_Systick_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
     a3a:	80 91 a0 00 	lds	r24, 0x00A0
     a3e:	8e 7f       	andi	r24, 0xFE	; 254
     a40:	80 93 a0 00 	sts	0x00A0, r24
     a44:	06 c0       	rjmp	.+12     	; 0xa52 <Isb_Systick_Exec+0x180>
									}
								}
							}
							if (newMonth)
							{
								if (Isb_Systick_Clock.Day < (daysPerMonth[Isb_Systick_Clock.Month] + 2))
     a46:	84 2f       	mov	r24, r20
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	81 97       	sbiw	r24, 0x21	; 33
     a4c:	0c f4       	brge	.+2      	; 0xa50 <Isb_Systick_Exec+0x17e>
     a4e:	c0 cf       	rjmp	.-128    	; 0x9d0 <Isb_Systick_Exec+0xfe>
     a50:	ab cf       	rjmp	.-170    	; 0x9a8 <Isb_Systick_Exec+0xd6>
	#endif /* ISB_OBJ_FLOAT_MAX && ISB_OBJ_H_ */

	Isb_Systick_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
	}

}
     a52:	1f 91       	pop	r17
     a54:	08 95       	ret

00000a56 <Isb_Systick_Irq_Timer>:


void Isb_Systick_Irq_Timer(void)
{

	Isb_Systick_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a56:	80 91 a0 00 	lds	r24, 0x00A0
     a5a:	81 60       	ori	r24, 0x01	; 1
     a5c:	80 93 a0 00 	sts	0x00A0, r24
	Isb_Systick_IrqClock++;
     a60:	80 91 a1 00 	lds	r24, 0x00A1
     a64:	90 91 a2 00 	lds	r25, 0x00A2
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	90 93 a2 00 	sts	0x00A2, r25
     a6e:	80 93 a1 00 	sts	0x00A1, r24
	#if defined(IF_RF_RFM12)
	If_Rf_Rfm12_IrqExec++;
	#endif /* IF_RF_RFM12 */

	#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
	Isb_App_DigOut_IrqExec++;
     a72:	80 91 ac 00 	lds	r24, 0x00AC
     a76:	90 91 ad 00 	lds	r25, 0x00AD
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	90 93 ad 00 	sts	0x00AD, r25
     a80:	80 93 ac 00 	sts	0x00AC, r24
	#if defined(ISB_APP_CLOCK_MAX) && defined(ISB_APP_H_)
	Isb_App_Clock_IrqExec++;
	#endif /* ISB_APP_CLOCK_MAX && ISB_APP_H_ */

	#if defined(ISB_OBJ_MAX) && defined(ISB_OBJ_H_)
	Isb_Obj_IrqExec++;
     a84:	80 91 ae 00 	lds	r24, 0x00AE
     a88:	90 91 af 00 	lds	r25, 0x00AF
     a8c:	01 96       	adiw	r24, 0x01	; 1
     a8e:	90 93 af 00 	sts	0x00AF, r25
     a92:	80 93 ae 00 	sts	0x00AE, r24

	#if defined(HW_EUROTRONIC_SPARMATIC_ZERO_H_) && defined(HW_EUROTRONIC_SPARMATIC_ZERO_H_)
	Hw_Eurotronic_Sparmatic_Zero_MotorUeberwachungCount++;
	#endif /* HW_EUROTRONIC_SPARMATIC_ZERO_H_ && HW_EUROTRONIC_SPARMATIC_ZERO_H_ */

}
     a96:	08 95       	ret

00000a98 <__vector_19>:
	#if defined(__AVR_ATmega8__)
		#warning "TIMER0_COMP_vect missing."
		#error "No definition for this MCU available."
	#elif defined(__AVR_ATmega16__)
ISR(TIMER0_COMP_vect)
{
     a98:	1f 92       	push	r1
     a9a:	0f 92       	push	r0
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	0f 92       	push	r0
     aa0:	11 24       	eor	r1, r1
     aa2:	8f 93       	push	r24
     aa4:	9f 93       	push	r25


void Isb_Systick_Irq_Timer(void)
{

	Isb_Systick_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     aa6:	80 91 a0 00 	lds	r24, 0x00A0
     aaa:	81 60       	ori	r24, 0x01	; 1
     aac:	80 93 a0 00 	sts	0x00A0, r24
	Isb_Systick_IrqClock++;
     ab0:	80 91 a1 00 	lds	r24, 0x00A1
     ab4:	90 91 a2 00 	lds	r25, 0x00A2
     ab8:	01 96       	adiw	r24, 0x01	; 1
     aba:	90 93 a2 00 	sts	0x00A2, r25
     abe:	80 93 a1 00 	sts	0x00A1, r24
	#if defined(IF_RF_RFM12)
	If_Rf_Rfm12_IrqExec++;
	#endif /* IF_RF_RFM12 */

	#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
	Isb_App_DigOut_IrqExec++;
     ac2:	80 91 ac 00 	lds	r24, 0x00AC
     ac6:	90 91 ad 00 	lds	r25, 0x00AD
     aca:	01 96       	adiw	r24, 0x01	; 1
     acc:	90 93 ad 00 	sts	0x00AD, r25
     ad0:	80 93 ac 00 	sts	0x00AC, r24
	#if defined(ISB_APP_CLOCK_MAX) && defined(ISB_APP_H_)
	Isb_App_Clock_IrqExec++;
	#endif /* ISB_APP_CLOCK_MAX && ISB_APP_H_ */

	#if defined(ISB_OBJ_MAX) && defined(ISB_OBJ_H_)
	Isb_Obj_IrqExec++;
     ad4:	80 91 ae 00 	lds	r24, 0x00AE
     ad8:	90 91 af 00 	lds	r25, 0x00AF
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	90 93 af 00 	sts	0x00AF, r25
     ae2:	80 93 ae 00 	sts	0x00AE, r24
		#error "No definition for this MCU available."
	#elif defined(__AVR_ATmega16__)
ISR(TIMER0_COMP_vect)
{
	Isb_Systick_Irq_Timer();
}
     ae6:	9f 91       	pop	r25
     ae8:	8f 91       	pop	r24
     aea:	0f 90       	pop	r0
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	0f 90       	pop	r0
     af0:	1f 90       	pop	r1
     af2:	18 95       	reti

00000af4 <Isb_App_Init>:
//			}
// TODO: Alles
// TODO: <-
		#endif /* ISB_APP_LCD_MAX */

	}
     af4:	08 95       	ret

00000af6 <Isb_App_Convert_None>:



	void Isb_App_Convert_None(uint16_t Value, void *Destination)
	{
     af6:	fb 01       	movw	r30, r22

		*(uint16_t *)Destination = Value;
     af8:	91 83       	std	Z+1, r25	; 0x01
     afa:	80 83       	st	Z, r24

	}
     afc:	08 95       	ret

00000afe <Isb_App_Convert_PT100>:



	void Isb_App_Convert_PT100(uint16_t Value, void *Destination)
	{
     afe:	fb 01       	movw	r30, r22

		Value = Value << 1;
		*(uint16_t *)Destination = Value;
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	91 83       	std	Z+1, r25	; 0x01
     b06:	80 83       	st	Z, r24

	}
     b08:	08 95       	ret

00000b0a <Lib_FloatToInteger>:



	int32_t Lib_FloatToInteger(uint16_t Float)
	{
     b0a:	df 93       	push	r29
     b0c:	cf 93       	push	r28
     b0e:	00 d0       	rcall	.+0      	; 0xb10 <Lib_FloatToInteger+0x6>
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	9a 83       	std	Y+2, r25	; 0x02
     b16:	89 83       	std	Y+1, r24	; 0x01

		uint32_t Integer = 0;
		uint16_t Exponent = (Float & 0x7C00)>>11;
     b18:	9c 01       	movw	r18, r24
		uint16_t Mantisse = Float & 0x03FF;

		if (bit_is_set(Float, 15))
     b1a:	89 81       	ldd	r24, Y+1	; 0x01
     b1c:	c9 01       	movw	r24, r18
     b1e:	80 70       	andi	r24, 0x00	; 0
     b20:	9c 77       	andi	r25, 0x7C	; 124
     b22:	89 2f       	mov	r24, r25
     b24:	86 95       	lsr	r24
     b26:	86 95       	lsr	r24
     b28:	86 95       	lsr	r24
     b2a:	33 70       	andi	r19, 0x03	; 3
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <Lib_FloatToInteger+0x28>
     b2e:	22 0f       	add	r18, r18
     b30:	33 1f       	adc	r19, r19
     b32:	8a 95       	dec	r24
     b34:	e2 f7       	brpl	.-8      	; 0xb2e <Lib_FloatToInteger+0x24>
     b36:	40 e0       	ldi	r20, 0x00	; 0
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	50 95       	com	r21
     b3c:	40 95       	com	r20
     b3e:	30 95       	com	r19
     b40:	21 95       	neg	r18
     b42:	3f 4f       	sbci	r19, 0xFF	; 255
     b44:	4f 4f       	sbci	r20, 0xFF	; 255
     b46:	5f 4f       	sbci	r21, 0xFF	; 255
			Integer -= Mantisse * (1<<Exponent);
		}

		return Integer;

	}
     b48:	b9 01       	movw	r22, r18
     b4a:	ca 01       	movw	r24, r20
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	cf 91       	pop	r28
     b52:	df 91       	pop	r29
     b54:	08 95       	ret

00000b56 <Lib_IntegerToFloat>:
	{

		uint16_t Float = 0;

		// Vorzeichen
		if (Integer >= 0)
     b56:	97 fd       	sbrc	r25, 7
     b58:	03 c0       	rjmp	.+6      	; 0xb60 <Lib_IntegerToFloat+0xa>
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	50 e8       	ldi	r21, 0x80	; 128
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <Lib_IntegerToFloat+0xe>
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	06 c0       	rjmp	.+12     	; 0xb76 <Lib_IntegerToFloat+0x20>
		}

		uint16_t Exponent = 0;
		while (Integer > 2047)
		{
			Exponent++;
     b6a:	2f 5f       	subi	r18, 0xFF	; 255
     b6c:	3f 4f       	sbci	r19, 0xFF	; 255
			Integer = Integer >> 1;
     b6e:	95 95       	asr	r25
     b70:	87 95       	ror	r24
     b72:	77 95       	ror	r23
     b74:	67 95       	ror	r22
		{
			Float |= 0x8000;
		}

		uint16_t Exponent = 0;
		while (Integer > 2047)
     b76:	60 30       	cpi	r22, 0x00	; 0
     b78:	e8 e0       	ldi	r30, 0x08	; 8
     b7a:	7e 07       	cpc	r23, r30
     b7c:	e0 e0       	ldi	r30, 0x00	; 0
     b7e:	8e 07       	cpc	r24, r30
     b80:	e0 e0       	ldi	r30, 0x00	; 0
     b82:	9e 07       	cpc	r25, r30
     b84:	94 f7       	brge	.-28     	; 0xb6a <Lib_IntegerToFloat+0x14>
			Exponent++;
			Integer = Integer >> 1;
		}
		Exponent = Exponent << 11;

		Float |= Exponent;
     b86:	32 2f       	mov	r19, r18
     b88:	22 27       	eor	r18, r18
     b8a:	33 0f       	add	r19, r19
     b8c:	33 0f       	add	r19, r19
     b8e:	33 0f       	add	r19, r19
     b90:	26 2b       	or	r18, r22
     b92:	37 2b       	or	r19, r23
     b94:	24 2b       	or	r18, r20
     b96:	35 2b       	or	r19, r21
		Float |= (uint16_t)Integer;

		return Float;

	}
     b98:	c9 01       	movw	r24, r18
     b9a:	08 95       	ret

00000b9c <Isb_App_Exec>:



	void Isb_App_Exec(void)
	{
     b9c:	2f 92       	push	r2
     b9e:	3f 92       	push	r3
     ba0:	4f 92       	push	r4
     ba2:	5f 92       	push	r5
     ba4:	6f 92       	push	r6
     ba6:	7f 92       	push	r7
     ba8:	8f 92       	push	r8
     baa:	9f 92       	push	r9
     bac:	af 92       	push	r10
     bae:	bf 92       	push	r11
     bb0:	cf 92       	push	r12
     bb2:	df 92       	push	r13
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	ac 97       	sbiw	r28, 0x2c	; 44
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
				Isb_App_DigIn_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
			}
		#endif /* ISB_APP_DIGIN_MAX */

		#if defined(ISB_APP_DIGOUT_MAX)
			if (bit_is_set(Isb_App_DigOut_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
     bd0:	80 91 ab 00 	lds	r24, 0x00AB
     bd4:	80 fd       	sbrc	r24, 0
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <Isb_App_Exec+0x40>
     bd8:	0c 94 0e 10 	jmp	0x201c	; 0x201c <Isb_App_Exec+0x1480>
	}



	uint8_t __attribute__((always_inline)) lib_eep_fw_read_byte(uint8_t * aAddr) {
		return eeprom_read_byte(Isb_Firmware_Offset + aAddr);;
     bdc:	80 91 a7 00 	lds	r24, 0x00A7
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	3e 83       	std	Y+6, r19	; 0x06
     be6:	2d 83       	std	Y+5, r18	; 0x05
     be8:	40 ec       	ldi	r20, 0xC0	; 192
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	5c a7       	std	Y+44, r21	; 0x2c
     bee:	4b a7       	std	Y+43, r20	; 0x2b
     bf0:	5a 83       	std	Y+2, r21	; 0x02
     bf2:	49 83       	std	Y+1, r20	; 0x01
     bf4:	1c 82       	std	Y+4, r1	; 0x04
     bf6:	1b 82       	std	Y+3, r1	; 0x03
     bf8:	9b 81       	ldd	r25, Y+3	; 0x03
			{
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGOUT_MAX; AppIndex++)
				{
					uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigOut_Ch_Array[AppIndex]);
     bfa:	eb 81       	ldd	r30, Y+3	; 0x03
     bfc:	fc 81       	ldd	r31, Y+4	; 0x04
     bfe:	ec 58       	subi	r30, 0x8C	; 140
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	24 91       	lpm	r18, Z+
					uint8_t Obj_0 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_0_Array[AppIndex]);
     c04:	eb 81       	ldd	r30, Y+3	; 0x03
     c06:	fc 81       	ldd	r31, Y+4	; 0x04
     c08:	e4 58       	subi	r30, 0x84	; 132
     c0a:	ff 4f       	sbci	r31, 0xFF	; 255
     c0c:	54 91       	lpm	r21, Z+
     c0e:	5c a3       	std	Y+36, r21	; 0x24
					#if ISB_APP_DIGOUT_FEATURE_RESULT == TRUE
						uint8_t Obj_1 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_1_Array[AppIndex]);
     c10:	eb 81       	ldd	r30, Y+3	; 0x03
     c12:	fc 81       	ldd	r31, Y+4	; 0x04
     c14:	ec 57       	subi	r30, 0x7C	; 124
     c16:	ff 4f       	sbci	r31, 0xFF	; 255
     c18:	84 91       	lpm	r24, Z+
     c1a:	8b a3       	std	Y+35, r24	; 0x23
					#endif /* ISB_APP_DIGOUT_FEATURE_RESULT == TRUE */
					#if ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION == TRUE
						uint8_t Obj_2 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_2_Array[AppIndex]);
     c1c:	eb 81       	ldd	r30, Y+3	; 0x03
     c1e:	fc 81       	ldd	r31, Y+4	; 0x04
     c20:	e4 57       	subi	r30, 0x74	; 116
     c22:	ff 4f       	sbci	r31, 0xFF	; 255
     c24:	a4 91       	lpm	r26, Z+
     c26:	aa a3       	std	Y+34, r26	; 0x22
					#endif /* ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION == TRUE */
					#if ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE
						uint8_t Obj_3 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_3_Array[AppIndex]);
     c28:	eb 81       	ldd	r30, Y+3	; 0x03
     c2a:	fc 81       	ldd	r31, Y+4	; 0x04
     c2c:	ec 56       	subi	r30, 0x6C	; 108
     c2e:	ff 4f       	sbci	r31, 0xFF	; 255
     c30:	b4 91       	lpm	r27, Z+
     c32:	b9 a3       	std	Y+33, r27	; 0x21
					#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
					// Initialize
					if (bit_is_clear(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_INITIALIZED))
     c34:	e2 2f       	mov	r30, r18
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	fa a7       	std	Y+42, r31	; 0x2a
     c3a:	e9 a7       	std	Y+41, r30	; 0x29
     c3c:	ee 0f       	add	r30, r30
     c3e:	ff 1f       	adc	r31, r31
     c40:	e0 55       	subi	r30, 0x50	; 80
     c42:	ff 4f       	sbci	r31, 0xFF	; 255
     c44:	f8 a7       	std	Y+40, r31	; 0x28
     c46:	ef a3       	std	Y+39, r30	; 0x27
     c48:	80 81       	ld	r24, Z
     c4a:	86 fd       	sbrc	r24, 6
     c4c:	1b c5       	rjmp	.+2614   	; 0x1684 <Isb_App_Exec+0xae8>
							uint16_t eepAddr_Cfg10 = 0;
							uint16_t eepAddr_Obj_3_Ctrl = 0;
							uint16_t eepAddr_Obj_3_Tov = 0;
							uint16_t eepAddr_Obj_3_InitValue = 0;
						#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
						switch (AppIndex)
     c4e:	93 30       	cpi	r25, 0x03	; 3
     c50:	09 f4       	brne	.+2      	; 0xc54 <Isb_App_Exec+0xb8>
     c52:	2f c1       	rjmp	.+606    	; 0xeb2 <Isb_App_Exec+0x316>
     c54:	94 30       	cpi	r25, 0x04	; 4
     c56:	38 f4       	brcc	.+14     	; 0xc66 <Isb_App_Exec+0xca>
     c58:	91 30       	cpi	r25, 0x01	; 1
     c5a:	09 f4       	brne	.+2      	; 0xc5e <Isb_App_Exec+0xc2>
     c5c:	8e c0       	rjmp	.+284    	; 0xd7a <Isb_App_Exec+0x1de>
     c5e:	92 30       	cpi	r25, 0x02	; 2
     c60:	08 f0       	brcs	.+2      	; 0xc64 <Isb_App_Exec+0xc8>
     c62:	d9 c0       	rjmp	.+434    	; 0xe16 <Isb_App_Exec+0x27a>
     c64:	0d c0       	rjmp	.+26     	; 0xc80 <Isb_App_Exec+0xe4>
     c66:	95 30       	cpi	r25, 0x05	; 5
     c68:	09 f4       	brne	.+2      	; 0xc6c <Isb_App_Exec+0xd0>
     c6a:	c1 c1       	rjmp	.+898    	; 0xfee <Isb_App_Exec+0x452>
     c6c:	95 30       	cpi	r25, 0x05	; 5
     c6e:	08 f4       	brcc	.+2      	; 0xc72 <Isb_App_Exec+0xd6>
     c70:	70 c1       	rjmp	.+736    	; 0xf52 <Isb_App_Exec+0x3b6>
     c72:	96 30       	cpi	r25, 0x06	; 6
     c74:	09 f4       	brne	.+2      	; 0xc78 <Isb_App_Exec+0xdc>
     c76:	0b c2       	rjmp	.+1046   	; 0x108e <Isb_App_Exec+0x4f2>
     c78:	97 30       	cpi	r25, 0x07	; 7
     c7a:	09 f0       	breq	.+2      	; 0xc7e <Isb_App_Exec+0xe2>
     c7c:	4f c0       	rjmp	.+158    	; 0xd1c <Isb_App_Exec+0x180>
     c7e:	58 c2       	rjmp	.+1200   	; 0x1130 <Isb_App_Exec+0x594>
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	f2 e0       	ldi	r31, 0x02	; 2
     c86:	cf 2e       	mov	r12, r31
     c88:	d1 2c       	mov	r13, r1
     c8a:	e3 e0       	ldi	r30, 0x03	; 3
     c8c:	ae 2e       	mov	r10, r30
     c8e:	b1 2c       	mov	r11, r1
     c90:	44 e0       	ldi	r20, 0x04	; 4
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	58 a3       	std	Y+32, r21	; 0x20
     c96:	4f 8f       	std	Y+31, r20	; 0x1f
     c98:	89 e0       	ldi	r24, 0x09	; 9
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	9e 8f       	std	Y+30, r25	; 0x1e
     c9e:	8d 8f       	std	Y+29, r24	; 0x1d
     ca0:	5a e0       	ldi	r21, 0x0A	; 10
     ca2:	45 2e       	mov	r4, r21
     ca4:	51 2c       	mov	r5, r1
     ca6:	4b e0       	ldi	r20, 0x0B	; 11
     ca8:	24 2e       	mov	r2, r20
     caa:	31 2c       	mov	r3, r1
     cac:	ac e0       	ldi	r26, 0x0C	; 12
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	bc 8f       	std	Y+28, r27	; 0x1c
     cb2:	ab 8f       	std	Y+27, r26	; 0x1b
     cb4:	e1 e1       	ldi	r30, 0x11	; 17
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	fa 8f       	std	Y+26, r31	; 0x1a
     cba:	e9 8f       	std	Y+25, r30	; 0x19
     cbc:	42 e1       	ldi	r20, 0x12	; 18
     cbe:	50 e0       	ldi	r21, 0x00	; 0
     cc0:	58 8f       	std	Y+24, r21	; 0x18
     cc2:	4f 8b       	std	Y+23, r20	; 0x17
     cc4:	83 e1       	ldi	r24, 0x13	; 19
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	9e 8b       	std	Y+22, r25	; 0x16
     cca:	8d 8b       	std	Y+21, r24	; 0x15
     ccc:	a4 e1       	ldi	r26, 0x14	; 20
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	bc 8b       	std	Y+20, r27	; 0x14
     cd2:	ab 8b       	std	Y+19, r26	; 0x13
     cd4:	e9 e1       	ldi	r30, 0x19	; 25
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	fa 8b       	std	Y+18, r31	; 0x12
     cda:	e9 8b       	std	Y+17, r30	; 0x11
     cdc:	4a e1       	ldi	r20, 0x1A	; 26
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	58 8b       	std	Y+16, r21	; 0x10
     ce2:	4f 87       	std	Y+15, r20	; 0x0f
     ce4:	8b e1       	ldi	r24, 0x1B	; 27
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	9e 87       	std	Y+14, r25	; 0x0e
     cea:	8d 87       	std	Y+13, r24	; 0x0d
     cec:	ac e1       	ldi	r26, 0x1C	; 28
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	bc 87       	std	Y+12, r27	; 0x0c
     cf2:	ab 87       	std	Y+11, r26	; 0x0b
     cf4:	ed e1       	ldi	r30, 0x1D	; 29
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	fa 87       	std	Y+10, r31	; 0x0a
     cfa:	e9 87       	std	Y+9, r30	; 0x09
     cfc:	3e e1       	ldi	r19, 0x1E	; 30
     cfe:	63 2e       	mov	r6, r19
     d00:	71 2c       	mov	r7, r1
     d02:	9f e1       	ldi	r25, 0x1F	; 31
     d04:	89 2e       	mov	r8, r25
     d06:	91 2c       	mov	r9, r1
     d08:	80 e2       	ldi	r24, 0x20	; 32
     d0a:	e8 2e       	mov	r14, r24
     d0c:	f1 2c       	mov	r15, r1
     d0e:	a1 e2       	ldi	r26, 0x21	; 33
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	02 e2       	ldi	r16, 0x22	; 34
     d14:	10 e0       	ldi	r17, 0x00	; 0
     d16:	43 e2       	ldi	r20, 0x23	; 35
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	18 c1       	rjmp	.+560    	; 0xf4c <Isb_App_Exec+0x3b0>
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	cc 24       	eor	r12, r12
     d22:	dd 24       	eor	r13, r13
     d24:	aa 24       	eor	r10, r10
     d26:	bb 24       	eor	r11, r11
     d28:	18 a2       	std	Y+32, r1	; 0x20
     d2a:	1f 8e       	std	Y+31, r1	; 0x1f
     d2c:	1e 8e       	std	Y+30, r1	; 0x1e
     d2e:	1d 8e       	std	Y+29, r1	; 0x1d
     d30:	44 24       	eor	r4, r4
     d32:	55 24       	eor	r5, r5
     d34:	22 24       	eor	r2, r2
     d36:	33 24       	eor	r3, r3
     d38:	1c 8e       	std	Y+28, r1	; 0x1c
     d3a:	1b 8e       	std	Y+27, r1	; 0x1b
     d3c:	1a 8e       	std	Y+26, r1	; 0x1a
     d3e:	19 8e       	std	Y+25, r1	; 0x19
     d40:	18 8e       	std	Y+24, r1	; 0x18
     d42:	1f 8a       	std	Y+23, r1	; 0x17
     d44:	1e 8a       	std	Y+22, r1	; 0x16
     d46:	1d 8a       	std	Y+21, r1	; 0x15
     d48:	1c 8a       	std	Y+20, r1	; 0x14
     d4a:	1b 8a       	std	Y+19, r1	; 0x13
     d4c:	1a 8a       	std	Y+18, r1	; 0x12
     d4e:	19 8a       	std	Y+17, r1	; 0x11
     d50:	18 8a       	std	Y+16, r1	; 0x10
     d52:	1f 86       	std	Y+15, r1	; 0x0f
     d54:	1e 86       	std	Y+14, r1	; 0x0e
     d56:	1d 86       	std	Y+13, r1	; 0x0d
     d58:	1c 86       	std	Y+12, r1	; 0x0c
     d5a:	1b 86       	std	Y+11, r1	; 0x0b
     d5c:	1a 86       	std	Y+10, r1	; 0x0a
     d5e:	19 86       	std	Y+9, r1	; 0x09
     d60:	66 24       	eor	r6, r6
     d62:	77 24       	eor	r7, r7
     d64:	88 24       	eor	r8, r8
     d66:	99 24       	eor	r9, r9
     d68:	ee 24       	eor	r14, r14
     d6a:	ff 24       	eor	r15, r15
     d6c:	a0 e0       	ldi	r26, 0x00	; 0
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	00 e0       	ldi	r16, 0x00	; 0
     d72:	10 e0       	ldi	r17, 0x00	; 0
     d74:	18 86       	std	Y+8, r1	; 0x08
     d76:	1f 82       	std	Y+7, r1	; 0x07
     d78:	31 c2       	rjmp	.+1122   	; 0x11dc <Isb_App_Exec+0x640>
     d7a:	6a e2       	ldi	r22, 0x2A	; 42
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	0b e2       	ldi	r16, 0x2B	; 43
     d80:	c0 2e       	mov	r12, r16
     d82:	d1 2c       	mov	r13, r1
     d84:	1c e2       	ldi	r17, 0x2C	; 44
     d86:	a1 2e       	mov	r10, r17
     d88:	b1 2c       	mov	r11, r1
     d8a:	8d e2       	ldi	r24, 0x2D	; 45
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	98 a3       	std	Y+32, r25	; 0x20
     d90:	8f 8f       	std	Y+31, r24	; 0x1f
     d92:	a2 e3       	ldi	r26, 0x32	; 50
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	be 8f       	std	Y+30, r27	; 0x1e
     d98:	ad 8f       	std	Y+29, r26	; 0x1d
     d9a:	b3 e3       	ldi	r27, 0x33	; 51
     d9c:	4b 2e       	mov	r4, r27
     d9e:	51 2c       	mov	r5, r1
     da0:	a4 e3       	ldi	r26, 0x34	; 52
     da2:	2a 2e       	mov	r2, r26
     da4:	31 2c       	mov	r3, r1
     da6:	e5 e3       	ldi	r30, 0x35	; 53
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	fc 8f       	std	Y+28, r31	; 0x1c
     dac:	eb 8f       	std	Y+27, r30	; 0x1b
     dae:	4a e3       	ldi	r20, 0x3A	; 58
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	5a 8f       	std	Y+26, r21	; 0x1a
     db4:	49 8f       	std	Y+25, r20	; 0x19
     db6:	8b e3       	ldi	r24, 0x3B	; 59
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	98 8f       	std	Y+24, r25	; 0x18
     dbc:	8f 8b       	std	Y+23, r24	; 0x17
     dbe:	ac e3       	ldi	r26, 0x3C	; 60
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	be 8b       	std	Y+22, r27	; 0x16
     dc4:	ad 8b       	std	Y+21, r26	; 0x15
     dc6:	ed e3       	ldi	r30, 0x3D	; 61
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	fc 8b       	std	Y+20, r31	; 0x14
     dcc:	eb 8b       	std	Y+19, r30	; 0x13
     dce:	42 e4       	ldi	r20, 0x42	; 66
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	5a 8b       	std	Y+18, r21	; 0x12
     dd4:	49 8b       	std	Y+17, r20	; 0x11
     dd6:	83 e4       	ldi	r24, 0x43	; 67
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	98 8b       	std	Y+16, r25	; 0x10
     ddc:	8f 87       	std	Y+15, r24	; 0x0f
     dde:	a4 e4       	ldi	r26, 0x44	; 68
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	be 87       	std	Y+14, r27	; 0x0e
     de4:	ad 87       	std	Y+13, r26	; 0x0d
     de6:	e5 e4       	ldi	r30, 0x45	; 69
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	fc 87       	std	Y+12, r31	; 0x0c
     dec:	eb 87       	std	Y+11, r30	; 0x0b
     dee:	46 e4       	ldi	r20, 0x46	; 70
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	5a 87       	std	Y+10, r21	; 0x0a
     df4:	49 87       	std	Y+9, r20	; 0x09
     df6:	f7 e4       	ldi	r31, 0x47	; 71
     df8:	6f 2e       	mov	r6, r31
     dfa:	71 2c       	mov	r7, r1
     dfc:	e8 e4       	ldi	r30, 0x48	; 72
     dfe:	8e 2e       	mov	r8, r30
     e00:	91 2c       	mov	r9, r1
     e02:	59 e4       	ldi	r21, 0x49	; 73
     e04:	e5 2e       	mov	r14, r21
     e06:	f1 2c       	mov	r15, r1
     e08:	aa e4       	ldi	r26, 0x4A	; 74
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	0b e4       	ldi	r16, 0x4B	; 75
     e0e:	10 e0       	ldi	r17, 0x00	; 0
     e10:	8c e4       	ldi	r24, 0x4C	; 76
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	e1 c1       	rjmp	.+962    	; 0x11d8 <Isb_App_Exec+0x63c>
										eepAddr_Cfg10 = ISB_APP_DIGOUT_1_EEADDR_CFG10;
										eepAddr_Obj_3_Ctrl = ISB_APP_DIGOUT_1_OBJ_3_EEADDR_CTRL;
										eepAddr_Obj_3_Tov = ISB_APP_DIGOUT_1_OBJ_3_EEADDR_TOV;
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_1_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
     e16:	63 e5       	ldi	r22, 0x53	; 83
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	44 e5       	ldi	r20, 0x54	; 84
     e1c:	c4 2e       	mov	r12, r20
     e1e:	d1 2c       	mov	r13, r1
     e20:	35 e5       	ldi	r19, 0x55	; 85
     e22:	a3 2e       	mov	r10, r19
     e24:	b1 2c       	mov	r11, r1
     e26:	a6 e5       	ldi	r26, 0x56	; 86
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	b8 a3       	std	Y+32, r27	; 0x20
     e2c:	af 8f       	std	Y+31, r26	; 0x1f
     e2e:	eb e5       	ldi	r30, 0x5B	; 91
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	fe 8f       	std	Y+30, r31	; 0x1e
     e34:	ed 8f       	std	Y+29, r30	; 0x1d
     e36:	9c e5       	ldi	r25, 0x5C	; 92
     e38:	49 2e       	mov	r4, r25
     e3a:	51 2c       	mov	r5, r1
     e3c:	8d e5       	ldi	r24, 0x5D	; 93
     e3e:	28 2e       	mov	r2, r24
     e40:	31 2c       	mov	r3, r1
     e42:	4e e5       	ldi	r20, 0x5E	; 94
     e44:	50 e0       	ldi	r21, 0x00	; 0
     e46:	5c 8f       	std	Y+28, r21	; 0x1c
     e48:	4b 8f       	std	Y+27, r20	; 0x1b
     e4a:	83 e6       	ldi	r24, 0x63	; 99
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	9a 8f       	std	Y+26, r25	; 0x1a
     e50:	89 8f       	std	Y+25, r24	; 0x19
     e52:	a4 e6       	ldi	r26, 0x64	; 100
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	b8 8f       	std	Y+24, r27	; 0x18
     e58:	af 8b       	std	Y+23, r26	; 0x17
     e5a:	e5 e6       	ldi	r30, 0x65	; 101
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	fe 8b       	std	Y+22, r31	; 0x16
     e60:	ed 8b       	std	Y+21, r30	; 0x15
     e62:	46 e6       	ldi	r20, 0x66	; 102
     e64:	50 e0       	ldi	r21, 0x00	; 0
     e66:	5c 8b       	std	Y+20, r21	; 0x14
     e68:	4b 8b       	std	Y+19, r20	; 0x13
     e6a:	8b e6       	ldi	r24, 0x6B	; 107
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	9a 8b       	std	Y+18, r25	; 0x12
     e70:	89 8b       	std	Y+17, r24	; 0x11
     e72:	ac e6       	ldi	r26, 0x6C	; 108
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	b8 8b       	std	Y+16, r27	; 0x10
     e78:	af 87       	std	Y+15, r26	; 0x0f
     e7a:	ed e6       	ldi	r30, 0x6D	; 109
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	fe 87       	std	Y+14, r31	; 0x0e
     e80:	ed 87       	std	Y+13, r30	; 0x0d
     e82:	4e e6       	ldi	r20, 0x6E	; 110
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	5c 87       	std	Y+12, r21	; 0x0c
     e88:	4b 87       	std	Y+11, r20	; 0x0b
     e8a:	8f e6       	ldi	r24, 0x6F	; 111
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	9a 87       	std	Y+10, r25	; 0x0a
     e90:	89 87       	std	Y+9, r24	; 0x09
     e92:	00 e7       	ldi	r16, 0x70	; 112
     e94:	60 2e       	mov	r6, r16
     e96:	71 2c       	mov	r7, r1
     e98:	11 e7       	ldi	r17, 0x71	; 113
     e9a:	81 2e       	mov	r8, r17
     e9c:	91 2c       	mov	r9, r1
     e9e:	b2 e7       	ldi	r27, 0x72	; 114
     ea0:	eb 2e       	mov	r14, r27
     ea2:	f1 2c       	mov	r15, r1
     ea4:	a3 e7       	ldi	r26, 0x73	; 115
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	04 e7       	ldi	r16, 0x74	; 116
     eaa:	10 e0       	ldi	r17, 0x00	; 0
     eac:	e5 e7       	ldi	r30, 0x75	; 117
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	eb c0       	rjmp	.+470    	; 0x1088 <Isb_App_Exec+0x4ec>
										eepAddr_Cfg10 = ISB_APP_DIGOUT_2_EEADDR_CFG10;
										eepAddr_Obj_3_Ctrl = ISB_APP_DIGOUT_2_OBJ_3_EEADDR_CTRL;
										eepAddr_Obj_3_Tov = ISB_APP_DIGOUT_2_OBJ_3_EEADDR_TOV;
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_2_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
     eb2:	6c e7       	ldi	r22, 0x7C	; 124
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	ad e7       	ldi	r26, 0x7D	; 125
     eb8:	ca 2e       	mov	r12, r26
     eba:	d1 2c       	mov	r13, r1
     ebc:	fe e7       	ldi	r31, 0x7E	; 126
     ebe:	af 2e       	mov	r10, r31
     ec0:	b1 2c       	mov	r11, r1
     ec2:	4f e7       	ldi	r20, 0x7F	; 127
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	58 a3       	std	Y+32, r21	; 0x20
     ec8:	4f 8f       	std	Y+31, r20	; 0x1f
     eca:	84 e8       	ldi	r24, 0x84	; 132
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	9e 8f       	std	Y+30, r25	; 0x1e
     ed0:	8d 8f       	std	Y+29, r24	; 0x1d
     ed2:	e5 e8       	ldi	r30, 0x85	; 133
     ed4:	4e 2e       	mov	r4, r30
     ed6:	51 2c       	mov	r5, r1
     ed8:	56 e8       	ldi	r21, 0x86	; 134
     eda:	25 2e       	mov	r2, r21
     edc:	31 2c       	mov	r3, r1
     ede:	a7 e8       	ldi	r26, 0x87	; 135
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	bc 8f       	std	Y+28, r27	; 0x1c
     ee4:	ab 8f       	std	Y+27, r26	; 0x1b
     ee6:	ec e8       	ldi	r30, 0x8C	; 140
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	fa 8f       	std	Y+26, r31	; 0x1a
     eec:	e9 8f       	std	Y+25, r30	; 0x19
     eee:	4d e8       	ldi	r20, 0x8D	; 141
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	58 8f       	std	Y+24, r21	; 0x18
     ef4:	4f 8b       	std	Y+23, r20	; 0x17
     ef6:	8e e8       	ldi	r24, 0x8E	; 142
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	9e 8b       	std	Y+22, r25	; 0x16
     efc:	8d 8b       	std	Y+21, r24	; 0x15
     efe:	af e8       	ldi	r26, 0x8F	; 143
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	bc 8b       	std	Y+20, r27	; 0x14
     f04:	ab 8b       	std	Y+19, r26	; 0x13
     f06:	e4 e9       	ldi	r30, 0x94	; 148
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	fa 8b       	std	Y+18, r31	; 0x12
     f0c:	e9 8b       	std	Y+17, r30	; 0x11
     f0e:	45 e9       	ldi	r20, 0x95	; 149
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	58 8b       	std	Y+16, r21	; 0x10
     f14:	4f 87       	std	Y+15, r20	; 0x0f
     f16:	86 e9       	ldi	r24, 0x96	; 150
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	9e 87       	std	Y+14, r25	; 0x0e
     f1c:	8d 87       	std	Y+13, r24	; 0x0d
     f1e:	a7 e9       	ldi	r26, 0x97	; 151
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	bc 87       	std	Y+12, r27	; 0x0c
     f24:	ab 87       	std	Y+11, r26	; 0x0b
     f26:	e8 e9       	ldi	r30, 0x98	; 152
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	fa 87       	std	Y+10, r31	; 0x0a
     f2c:	e9 87       	std	Y+9, r30	; 0x09
     f2e:	49 e9       	ldi	r20, 0x99	; 153
     f30:	64 2e       	mov	r6, r20
     f32:	71 2c       	mov	r7, r1
     f34:	3a e9       	ldi	r19, 0x9A	; 154
     f36:	83 2e       	mov	r8, r19
     f38:	91 2c       	mov	r9, r1
     f3a:	9b e9       	ldi	r25, 0x9B	; 155
     f3c:	e9 2e       	mov	r14, r25
     f3e:	f1 2c       	mov	r15, r1
     f40:	ac e9       	ldi	r26, 0x9C	; 156
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	0d e9       	ldi	r16, 0x9D	; 157
     f46:	10 e0       	ldi	r17, 0x00	; 0
     f48:	4e e9       	ldi	r20, 0x9E	; 158
     f4a:	50 e0       	ldi	r21, 0x00	; 0
     f4c:	58 87       	std	Y+8, r21	; 0x08
     f4e:	4f 83       	std	Y+7, r20	; 0x07
     f50:	45 c1       	rjmp	.+650    	; 0x11dc <Isb_App_Exec+0x640>
										eepAddr_Cfg10 = ISB_APP_DIGOUT_3_EEADDR_CFG10;
										eepAddr_Obj_3_Ctrl = ISB_APP_DIGOUT_3_OBJ_3_EEADDR_CTRL;
										eepAddr_Obj_3_Tov = ISB_APP_DIGOUT_3_OBJ_3_EEADDR_TOV;
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_3_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
     f52:	65 ea       	ldi	r22, 0xA5	; 165
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	86 ea       	ldi	r24, 0xA6	; 166
     f58:	c8 2e       	mov	r12, r24
     f5a:	d1 2c       	mov	r13, r1
     f5c:	07 ea       	ldi	r16, 0xA7	; 167
     f5e:	a0 2e       	mov	r10, r16
     f60:	b1 2c       	mov	r11, r1
     f62:	88 ea       	ldi	r24, 0xA8	; 168
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	98 a3       	std	Y+32, r25	; 0x20
     f68:	8f 8f       	std	Y+31, r24	; 0x1f
     f6a:	ad ea       	ldi	r26, 0xAD	; 173
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	be 8f       	std	Y+30, r27	; 0x1e
     f70:	ad 8f       	std	Y+29, r26	; 0x1d
     f72:	1e ea       	ldi	r17, 0xAE	; 174
     f74:	41 2e       	mov	r4, r17
     f76:	51 2c       	mov	r5, r1
     f78:	bf ea       	ldi	r27, 0xAF	; 175
     f7a:	2b 2e       	mov	r2, r27
     f7c:	31 2c       	mov	r3, r1
     f7e:	e0 eb       	ldi	r30, 0xB0	; 176
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	fc 8f       	std	Y+28, r31	; 0x1c
     f84:	eb 8f       	std	Y+27, r30	; 0x1b
     f86:	45 eb       	ldi	r20, 0xB5	; 181
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	5a 8f       	std	Y+26, r21	; 0x1a
     f8c:	49 8f       	std	Y+25, r20	; 0x19
     f8e:	86 eb       	ldi	r24, 0xB6	; 182
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	98 8f       	std	Y+24, r25	; 0x18
     f94:	8f 8b       	std	Y+23, r24	; 0x17
     f96:	a7 eb       	ldi	r26, 0xB7	; 183
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	be 8b       	std	Y+22, r27	; 0x16
     f9c:	ad 8b       	std	Y+21, r26	; 0x15
     f9e:	e8 eb       	ldi	r30, 0xB8	; 184
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	fc 8b       	std	Y+20, r31	; 0x14
     fa4:	eb 8b       	std	Y+19, r30	; 0x13
     fa6:	4d eb       	ldi	r20, 0xBD	; 189
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	5a 8b       	std	Y+18, r21	; 0x12
     fac:	49 8b       	std	Y+17, r20	; 0x11
     fae:	8e eb       	ldi	r24, 0xBE	; 190
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	98 8b       	std	Y+16, r25	; 0x10
     fb4:	8f 87       	std	Y+15, r24	; 0x0f
     fb6:	af eb       	ldi	r26, 0xBF	; 191
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	be 87       	std	Y+14, r27	; 0x0e
     fbc:	ad 87       	std	Y+13, r26	; 0x0d
     fbe:	e0 ec       	ldi	r30, 0xC0	; 192
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	fc 87       	std	Y+12, r31	; 0x0c
     fc4:	eb 87       	std	Y+11, r30	; 0x0b
     fc6:	41 ec       	ldi	r20, 0xC1	; 193
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	5a 87       	std	Y+10, r21	; 0x0a
     fcc:	49 87       	std	Y+9, r20	; 0x09
     fce:	a2 ec       	ldi	r26, 0xC2	; 194
     fd0:	6a 2e       	mov	r6, r26
     fd2:	71 2c       	mov	r7, r1
     fd4:	f3 ec       	ldi	r31, 0xC3	; 195
     fd6:	8f 2e       	mov	r8, r31
     fd8:	91 2c       	mov	r9, r1
     fda:	e4 ec       	ldi	r30, 0xC4	; 196
     fdc:	ee 2e       	mov	r14, r30
     fde:	f1 2c       	mov	r15, r1
     fe0:	a5 ec       	ldi	r26, 0xC5	; 197
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	06 ec       	ldi	r16, 0xC6	; 198
     fe6:	10 e0       	ldi	r17, 0x00	; 0
     fe8:	87 ec       	ldi	r24, 0xC7	; 199
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	f5 c0       	rjmp	.+490    	; 0x11d8 <Isb_App_Exec+0x63c>
										eepAddr_Cfg10 = ISB_APP_DIGOUT_4_EEADDR_CFG10;
										eepAddr_Obj_3_Ctrl = ISB_APP_DIGOUT_4_OBJ_3_EEADDR_CTRL;
										eepAddr_Obj_3_Tov = ISB_APP_DIGOUT_4_OBJ_3_EEADDR_TOV;
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_4_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
     fee:	6e ec       	ldi	r22, 0xCE	; 206
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	5f ec       	ldi	r21, 0xCF	; 207
     ff4:	c5 2e       	mov	r12, r21
     ff6:	d1 2c       	mov	r13, r1
     ff8:	40 ed       	ldi	r20, 0xD0	; 208
     ffa:	a4 2e       	mov	r10, r20
     ffc:	b1 2c       	mov	r11, r1
     ffe:	a1 ed       	ldi	r26, 0xD1	; 209
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	b8 a3       	std	Y+32, r27	; 0x20
    1004:	af 8f       	std	Y+31, r26	; 0x1f
    1006:	e6 ed       	ldi	r30, 0xD6	; 214
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	fe 8f       	std	Y+30, r31	; 0x1e
    100c:	ed 8f       	std	Y+29, r30	; 0x1d
    100e:	37 ed       	ldi	r19, 0xD7	; 215
    1010:	43 2e       	mov	r4, r19
    1012:	51 2c       	mov	r5, r1
    1014:	98 ed       	ldi	r25, 0xD8	; 216
    1016:	29 2e       	mov	r2, r25
    1018:	31 2c       	mov	r3, r1
    101a:	49 ed       	ldi	r20, 0xD9	; 217
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	5c 8f       	std	Y+28, r21	; 0x1c
    1020:	4b 8f       	std	Y+27, r20	; 0x1b
    1022:	8e ed       	ldi	r24, 0xDE	; 222
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	9a 8f       	std	Y+26, r25	; 0x1a
    1028:	89 8f       	std	Y+25, r24	; 0x19
    102a:	af ed       	ldi	r26, 0xDF	; 223
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	b8 8f       	std	Y+24, r27	; 0x18
    1030:	af 8b       	std	Y+23, r26	; 0x17
    1032:	e0 ee       	ldi	r30, 0xE0	; 224
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	fe 8b       	std	Y+22, r31	; 0x16
    1038:	ed 8b       	std	Y+21, r30	; 0x15
    103a:	41 ee       	ldi	r20, 0xE1	; 225
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	5c 8b       	std	Y+20, r21	; 0x14
    1040:	4b 8b       	std	Y+19, r20	; 0x13
    1042:	86 ee       	ldi	r24, 0xE6	; 230
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	9a 8b       	std	Y+18, r25	; 0x12
    1048:	89 8b       	std	Y+17, r24	; 0x11
    104a:	a7 ee       	ldi	r26, 0xE7	; 231
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	b8 8b       	std	Y+16, r27	; 0x10
    1050:	af 87       	std	Y+15, r26	; 0x0f
    1052:	e8 ee       	ldi	r30, 0xE8	; 232
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	fe 87       	std	Y+14, r31	; 0x0e
    1058:	ed 87       	std	Y+13, r30	; 0x0d
    105a:	49 ee       	ldi	r20, 0xE9	; 233
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	5c 87       	std	Y+12, r21	; 0x0c
    1060:	4b 87       	std	Y+11, r20	; 0x0b
    1062:	8a ee       	ldi	r24, 0xEA	; 234
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	9a 87       	std	Y+10, r25	; 0x0a
    1068:	89 87       	std	Y+9, r24	; 0x09
    106a:	8b ee       	ldi	r24, 0xEB	; 235
    106c:	68 2e       	mov	r6, r24
    106e:	71 2c       	mov	r7, r1
    1070:	0c ee       	ldi	r16, 0xEC	; 236
    1072:	80 2e       	mov	r8, r16
    1074:	91 2c       	mov	r9, r1
    1076:	1d ee       	ldi	r17, 0xED	; 237
    1078:	e1 2e       	mov	r14, r17
    107a:	f1 2c       	mov	r15, r1
    107c:	ae ee       	ldi	r26, 0xEE	; 238
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	0f ee       	ldi	r16, 0xEF	; 239
    1082:	10 e0       	ldi	r17, 0x00	; 0
    1084:	e0 ef       	ldi	r30, 0xF0	; 240
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	f8 87       	std	Y+8, r31	; 0x08
    108a:	ef 83       	std	Y+7, r30	; 0x07
    108c:	a7 c0       	rjmp	.+334    	; 0x11dc <Isb_App_Exec+0x640>
										eepAddr_Cfg10 = ISB_APP_DIGOUT_5_EEADDR_CFG10;
										eepAddr_Obj_3_Ctrl = ISB_APP_DIGOUT_5_OBJ_3_EEADDR_CTRL;
										eepAddr_Obj_3_Tov = ISB_APP_DIGOUT_5_OBJ_3_EEADDR_TOV;
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_5_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
    108e:	67 ef       	ldi	r22, 0xF7	; 247
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	b8 ef       	ldi	r27, 0xF8	; 248
    1094:	cb 2e       	mov	r12, r27
    1096:	d1 2c       	mov	r13, r1
    1098:	a9 ef       	ldi	r26, 0xF9	; 249
    109a:	aa 2e       	mov	r10, r26
    109c:	b1 2c       	mov	r11, r1
    109e:	4a ef       	ldi	r20, 0xFA	; 250
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	58 a3       	std	Y+32, r21	; 0x20
    10a4:	4f 8f       	std	Y+31, r20	; 0x1f
    10a6:	8f ef       	ldi	r24, 0xFF	; 255
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	9e 8f       	std	Y+30, r25	; 0x1e
    10ac:	8d 8f       	std	Y+29, r24	; 0x1d
    10ae:	41 2c       	mov	r4, r1
    10b0:	f1 e0       	ldi	r31, 0x01	; 1
    10b2:	5f 2e       	mov	r5, r31
    10b4:	e1 e0       	ldi	r30, 0x01	; 1
    10b6:	2e 2e       	mov	r2, r30
    10b8:	3e 2e       	mov	r3, r30
    10ba:	a2 e0       	ldi	r26, 0x02	; 2
    10bc:	b1 e0       	ldi	r27, 0x01	; 1
    10be:	bc 8f       	std	Y+28, r27	; 0x1c
    10c0:	ab 8f       	std	Y+27, r26	; 0x1b
    10c2:	e7 e0       	ldi	r30, 0x07	; 7
    10c4:	f1 e0       	ldi	r31, 0x01	; 1
    10c6:	fa 8f       	std	Y+26, r31	; 0x1a
    10c8:	e9 8f       	std	Y+25, r30	; 0x19
    10ca:	48 e0       	ldi	r20, 0x08	; 8
    10cc:	51 e0       	ldi	r21, 0x01	; 1
    10ce:	58 8f       	std	Y+24, r21	; 0x18
    10d0:	4f 8b       	std	Y+23, r20	; 0x17
    10d2:	89 e0       	ldi	r24, 0x09	; 9
    10d4:	91 e0       	ldi	r25, 0x01	; 1
    10d6:	9e 8b       	std	Y+22, r25	; 0x16
    10d8:	8d 8b       	std	Y+21, r24	; 0x15
    10da:	aa e0       	ldi	r26, 0x0A	; 10
    10dc:	b1 e0       	ldi	r27, 0x01	; 1
    10de:	bc 8b       	std	Y+20, r27	; 0x14
    10e0:	ab 8b       	std	Y+19, r26	; 0x13
    10e2:	ef e0       	ldi	r30, 0x0F	; 15
    10e4:	f1 e0       	ldi	r31, 0x01	; 1
    10e6:	fa 8b       	std	Y+18, r31	; 0x12
    10e8:	e9 8b       	std	Y+17, r30	; 0x11
    10ea:	40 e1       	ldi	r20, 0x10	; 16
    10ec:	51 e0       	ldi	r21, 0x01	; 1
    10ee:	58 8b       	std	Y+16, r21	; 0x10
    10f0:	4f 87       	std	Y+15, r20	; 0x0f
    10f2:	81 e1       	ldi	r24, 0x11	; 17
    10f4:	91 e0       	ldi	r25, 0x01	; 1
    10f6:	9e 87       	std	Y+14, r25	; 0x0e
    10f8:	8d 87       	std	Y+13, r24	; 0x0d
    10fa:	a2 e1       	ldi	r26, 0x12	; 18
    10fc:	b1 e0       	ldi	r27, 0x01	; 1
    10fe:	bc 87       	std	Y+12, r27	; 0x0c
    1100:	ab 87       	std	Y+11, r26	; 0x0b
    1102:	e3 e1       	ldi	r30, 0x13	; 19
    1104:	f1 e0       	ldi	r31, 0x01	; 1
    1106:	fa 87       	std	Y+10, r31	; 0x0a
    1108:	e9 87       	std	Y+9, r30	; 0x09
    110a:	54 e1       	ldi	r21, 0x14	; 20
    110c:	65 2e       	mov	r6, r21
    110e:	51 e0       	ldi	r21, 0x01	; 1
    1110:	75 2e       	mov	r7, r21
    1112:	45 e1       	ldi	r20, 0x15	; 21
    1114:	84 2e       	mov	r8, r20
    1116:	41 e0       	ldi	r20, 0x01	; 1
    1118:	94 2e       	mov	r9, r20
    111a:	36 e1       	ldi	r19, 0x16	; 22
    111c:	e3 2e       	mov	r14, r19
    111e:	31 e0       	ldi	r19, 0x01	; 1
    1120:	f3 2e       	mov	r15, r19
    1122:	a7 e1       	ldi	r26, 0x17	; 23
    1124:	b1 e0       	ldi	r27, 0x01	; 1
    1126:	08 e1       	ldi	r16, 0x18	; 24
    1128:	11 e0       	ldi	r17, 0x01	; 1
    112a:	49 e1       	ldi	r20, 0x19	; 25
    112c:	51 e0       	ldi	r21, 0x01	; 1
    112e:	0e cf       	rjmp	.-484    	; 0xf4c <Isb_App_Exec+0x3b0>
										eepAddr_Cfg10 = ISB_APP_DIGOUT_6_EEADDR_CFG10;
										eepAddr_Obj_3_Ctrl = ISB_APP_DIGOUT_6_OBJ_3_EEADDR_CTRL;
										eepAddr_Obj_3_Tov = ISB_APP_DIGOUT_6_OBJ_3_EEADDR_TOV;
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_6_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
    1130:	60 e2       	ldi	r22, 0x20	; 32
    1132:	71 e0       	ldi	r23, 0x01	; 1
    1134:	91 e2       	ldi	r25, 0x21	; 33
    1136:	c9 2e       	mov	r12, r25
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	d9 2e       	mov	r13, r25
    113c:	82 e2       	ldi	r24, 0x22	; 34
    113e:	a8 2e       	mov	r10, r24
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	b8 2e       	mov	r11, r24
    1144:	83 e2       	ldi	r24, 0x23	; 35
    1146:	91 e0       	ldi	r25, 0x01	; 1
    1148:	98 a3       	std	Y+32, r25	; 0x20
    114a:	8f 8f       	std	Y+31, r24	; 0x1f
    114c:	a8 e2       	ldi	r26, 0x28	; 40
    114e:	b1 e0       	ldi	r27, 0x01	; 1
    1150:	be 8f       	std	Y+30, r27	; 0x1e
    1152:	ad 8f       	std	Y+29, r26	; 0x1d
    1154:	09 e2       	ldi	r16, 0x29	; 41
    1156:	40 2e       	mov	r4, r16
    1158:	01 e0       	ldi	r16, 0x01	; 1
    115a:	50 2e       	mov	r5, r16
    115c:	1a e2       	ldi	r17, 0x2A	; 42
    115e:	21 2e       	mov	r2, r17
    1160:	11 e0       	ldi	r17, 0x01	; 1
    1162:	31 2e       	mov	r3, r17
    1164:	eb e2       	ldi	r30, 0x2B	; 43
    1166:	f1 e0       	ldi	r31, 0x01	; 1
    1168:	fc 8f       	std	Y+28, r31	; 0x1c
    116a:	eb 8f       	std	Y+27, r30	; 0x1b
    116c:	40 e3       	ldi	r20, 0x30	; 48
    116e:	51 e0       	ldi	r21, 0x01	; 1
    1170:	5a 8f       	std	Y+26, r21	; 0x1a
    1172:	49 8f       	std	Y+25, r20	; 0x19
    1174:	81 e3       	ldi	r24, 0x31	; 49
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	98 8f       	std	Y+24, r25	; 0x18
    117a:	8f 8b       	std	Y+23, r24	; 0x17
    117c:	a2 e3       	ldi	r26, 0x32	; 50
    117e:	b1 e0       	ldi	r27, 0x01	; 1
    1180:	be 8b       	std	Y+22, r27	; 0x16
    1182:	ad 8b       	std	Y+21, r26	; 0x15
    1184:	e3 e3       	ldi	r30, 0x33	; 51
    1186:	f1 e0       	ldi	r31, 0x01	; 1
    1188:	fc 8b       	std	Y+20, r31	; 0x14
    118a:	eb 8b       	std	Y+19, r30	; 0x13
    118c:	48 e3       	ldi	r20, 0x38	; 56
    118e:	51 e0       	ldi	r21, 0x01	; 1
    1190:	5a 8b       	std	Y+18, r21	; 0x12
    1192:	49 8b       	std	Y+17, r20	; 0x11
    1194:	89 e3       	ldi	r24, 0x39	; 57
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	98 8b       	std	Y+16, r25	; 0x10
    119a:	8f 87       	std	Y+15, r24	; 0x0f
    119c:	aa e3       	ldi	r26, 0x3A	; 58
    119e:	b1 e0       	ldi	r27, 0x01	; 1
    11a0:	be 87       	std	Y+14, r27	; 0x0e
    11a2:	ad 87       	std	Y+13, r26	; 0x0d
    11a4:	eb e3       	ldi	r30, 0x3B	; 59
    11a6:	f1 e0       	ldi	r31, 0x01	; 1
    11a8:	fc 87       	std	Y+12, r31	; 0x0c
    11aa:	eb 87       	std	Y+11, r30	; 0x0b
    11ac:	4c e3       	ldi	r20, 0x3C	; 60
    11ae:	51 e0       	ldi	r21, 0x01	; 1
    11b0:	5a 87       	std	Y+10, r21	; 0x0a
    11b2:	49 87       	std	Y+9, r20	; 0x09
    11b4:	bd e3       	ldi	r27, 0x3D	; 61
    11b6:	6b 2e       	mov	r6, r27
    11b8:	b1 e0       	ldi	r27, 0x01	; 1
    11ba:	7b 2e       	mov	r7, r27
    11bc:	ae e3       	ldi	r26, 0x3E	; 62
    11be:	8a 2e       	mov	r8, r26
    11c0:	a1 e0       	ldi	r26, 0x01	; 1
    11c2:	9a 2e       	mov	r9, r26
    11c4:	ff e3       	ldi	r31, 0x3F	; 63
    11c6:	ef 2e       	mov	r14, r31
    11c8:	f1 e0       	ldi	r31, 0x01	; 1
    11ca:	ff 2e       	mov	r15, r31
    11cc:	a0 e4       	ldi	r26, 0x40	; 64
    11ce:	b1 e0       	ldi	r27, 0x01	; 1
    11d0:	01 e4       	ldi	r16, 0x41	; 65
    11d2:	11 e0       	ldi	r17, 0x01	; 1
    11d4:	82 e4       	ldi	r24, 0x42	; 66
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	98 87       	std	Y+8, r25	; 0x08
    11da:	8f 83       	std	Y+7, r24	; 0x07
		uint8_t Isb_Ch_Ctrl_Get(uint8_t Ch)
		{
			uint8_t Ctrl = 0;
			uint16_t eepAddrCtrl = 0;
			uint16_t eepAddrCrc = 0;
			switch (Ch)
    11dc:	23 30       	cpi	r18, 0x03	; 3
    11de:	f9 f0       	breq	.+62     	; 0x121e <Isb_App_Exec+0x682>
    11e0:	24 30       	cpi	r18, 0x04	; 4
    11e2:	28 f4       	brcc	.+10     	; 0x11ee <Isb_App_Exec+0x652>
    11e4:	21 30       	cpi	r18, 0x01	; 1
    11e6:	89 f0       	breq	.+34     	; 0x120a <Isb_App_Exec+0x66e>
    11e8:	22 30       	cpi	r18, 0x02	; 2
    11ea:	a0 f4       	brcc	.+40     	; 0x1214 <Isb_App_Exec+0x678>
    11ec:	09 c0       	rjmp	.+18     	; 0x1200 <Isb_App_Exec+0x664>
    11ee:	25 30       	cpi	r18, 0x05	; 5
    11f0:	01 f1       	breq	.+64     	; 0x1232 <Isb_App_Exec+0x696>
    11f2:	25 30       	cpi	r18, 0x05	; 5
    11f4:	c8 f0       	brcs	.+50     	; 0x1228 <Isb_App_Exec+0x68c>
    11f6:	26 30       	cpi	r18, 0x06	; 6
    11f8:	09 f1       	breq	.+66     	; 0x123c <Isb_App_Exec+0x6a0>
    11fa:	27 30       	cpi	r18, 0x07	; 7
    11fc:	59 f5       	brne	.+86     	; 0x1254 <Isb_App_Exec+0x6b8>
    11fe:	23 c0       	rjmp	.+70     	; 0x1246 <Isb_App_Exec+0x6aa>
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	88 e2       	ldi	r24, 0x28	; 40
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	22 c0       	rjmp	.+68     	; 0x124e <Isb_App_Exec+0x6b2>
    120a:	49 e2       	ldi	r20, 0x29	; 41
    120c:	50 e0       	ldi	r21, 0x00	; 0
    120e:	81 e5       	ldi	r24, 0x51	; 81
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	1d c0       	rjmp	.+58     	; 0x124e <Isb_App_Exec+0x6b2>
    1214:	42 e5       	ldi	r20, 0x52	; 82
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	8a e7       	ldi	r24, 0x7A	; 122
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	18 c0       	rjmp	.+48     	; 0x124e <Isb_App_Exec+0x6b2>
    121e:	4b e7       	ldi	r20, 0x7B	; 123
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	83 ea       	ldi	r24, 0xA3	; 163
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	13 c0       	rjmp	.+38     	; 0x124e <Isb_App_Exec+0x6b2>
    1228:	44 ea       	ldi	r20, 0xA4	; 164
    122a:	50 e0       	ldi	r21, 0x00	; 0
    122c:	8c ec       	ldi	r24, 0xCC	; 204
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	0e c0       	rjmp	.+28     	; 0x124e <Isb_App_Exec+0x6b2>
    1232:	4d ec       	ldi	r20, 0xCD	; 205
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	85 ef       	ldi	r24, 0xF5	; 245
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	09 c0       	rjmp	.+18     	; 0x124e <Isb_App_Exec+0x6b2>
    123c:	46 ef       	ldi	r20, 0xF6	; 246
    123e:	50 e0       	ldi	r21, 0x00	; 0
    1240:	8e e1       	ldi	r24, 0x1E	; 30
    1242:	91 e0       	ldi	r25, 0x01	; 1
    1244:	04 c0       	rjmp	.+8      	; 0x124e <Isb_App_Exec+0x6b2>
    1246:	4f e1       	ldi	r20, 0x1F	; 31
    1248:	51 e0       	ldi	r21, 0x01	; 1
    124a:	87 e4       	ldi	r24, 0x47	; 71
    124c:	91 e0       	ldi	r25, 0x01	; 1
//-				default:
//-					eepAddrCtrl = 0;
//-					eepAddrCrc = 0;
//-					break;
			}
			if ((eepAddrCrc != 0) & (eepAddrCtrl < eepAddrCrc))
    124e:	48 17       	cp	r20, r24
    1250:	59 07       	cpc	r21, r25
    1252:	10 f0       	brcs	.+4      	; 0x1258 <Isb_App_Exec+0x6bc>
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	12 c0       	rjmp	.+36     	; 0x127c <Isb_App_Exec+0x6e0>
    1258:	9a 01       	movw	r18, r20
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <Isb_App_Exec+0x6c4>
			{
				uint8_t Crc = 0;
				for (uint16_t eepAddr = eepAddrCtrl; eepAddr <= eepAddrCrc; eepAddr++)
    125c:	2f 5f       	subi	r18, 0xFF	; 255
    125e:	3f 4f       	sbci	r19, 0xFF	; 255
    1260:	82 17       	cp	r24, r18
    1262:	93 07       	cpc	r25, r19
    1264:	d8 f7       	brcc	.-10     	; 0x125c <Isb_App_Exec+0x6c0>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1266:	e1 99       	sbic	0x1c, 1	; 28
    1268:	fe cf       	rjmp	.-4      	; 0x1266 <Isb_App_Exec+0x6ca>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    126a:	ed 81       	ldd	r30, Y+5	; 0x05
    126c:	fe 81       	ldd	r31, Y+6	; 0x06
    126e:	4e 0f       	add	r20, r30
    1270:	5f 1f       	adc	r21, r31
    1272:	5f bb       	out	0x1f, r21	; 31
    1274:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
    1276:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1278:	8d b3       	in	r24, 0x1d	; 29
				}
				else
				{
					Ctrl = (1<<ISB_CH_CTRL_ERROR_CRC);
				}
				Ctrl &= ~(1<<ISB_CH_CTRL_INITIALIZED);
    127a:	8f 73       	andi	r24, 0x3F	; 63
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_15_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
							#endif /* ISB_APP_DIGOUT_15 */
						}
						Isb_Ch[Ch].Ctrl = Isb_Ch_Ctrl_Get(Ch);
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	3e a3       	std	Y+38, r19	; 0x26
    1282:	2d a3       	std	Y+37, r18	; 0x25
    1284:	29 a5       	ldd	r18, Y+41	; 0x29
    1286:	3a a5       	ldd	r19, Y+42	; 0x2a
    1288:	22 0f       	add	r18, r18
    128a:	33 1f       	adc	r19, r19
    128c:	20 55       	subi	r18, 0x50	; 80
    128e:	3f 4f       	sbci	r19, 0xFF	; 255
    1290:	4d a1       	ldd	r20, Y+37	; 0x25
    1292:	5e a1       	ldd	r21, Y+38	; 0x26
    1294:	f9 01       	movw	r30, r18
    1296:	51 83       	std	Z+1, r21	; 0x01
    1298:	40 83       	st	Z, r20
						if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED))
    129a:	ef a1       	ldd	r30, Y+39	; 0x27
    129c:	f8 a5       	ldd	r31, Y+40	; 0x28
    129e:	80 81       	ld	r24, Z
    12a0:	80 ff       	sbrs	r24, 0
    12a2:	e5 c1       	rjmp	.+970    	; 0x166e <Isb_App_Exec+0xad2>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    12a4:	e1 99       	sbic	0x1c, 1	; 28
    12a6:	fe cf       	rjmp	.-4      	; 0x12a4 <Isb_App_Exec+0x708>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    12a8:	2d 81       	ldd	r18, Y+5	; 0x05
    12aa:	3e 81       	ldd	r19, Y+6	; 0x06
    12ac:	62 0f       	add	r22, r18
    12ae:	73 1f       	adc	r23, r19
    12b0:	7f bb       	out	0x1f, r23	; 31
    12b2:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
    12b4:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    12b6:	8d b3       	in	r24, 0x1d	; 29
						{
							Isb_App_DigOut[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg0);
    12b8:	e9 81       	ldd	r30, Y+1	; 0x01
    12ba:	fa 81       	ldd	r31, Y+2	; 0x02
    12bc:	80 83       	st	Z, r24
							Isb_Obj[Obj_0].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Ctrl);
    12be:	fc a1       	ldd	r31, Y+36	; 0x24
    12c0:	6f 2f       	mov	r22, r31
    12c2:	70 e0       	ldi	r23, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    12c4:	e1 99       	sbic	0x1c, 1	; 28
    12c6:	fe cf       	rjmp	.-4      	; 0x12c4 <Isb_App_Exec+0x728>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    12c8:	2d 81       	ldd	r18, Y+5	; 0x05
    12ca:	3e 81       	ldd	r19, Y+6	; 0x06
    12cc:	c2 0e       	add	r12, r18
    12ce:	d3 1e       	adc	r13, r19
    12d0:	df ba       	out	0x1f, r13	; 31
    12d2:	ce ba       	out	0x1e, r12	; 30
#endif
    EECR |= (1 << EERE);
    12d4:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    12d6:	8d b3       	in	r24, 0x1d	; 29
    12d8:	fb 01       	movw	r30, r22
    12da:	53 e0       	ldi	r21, 0x03	; 3
    12dc:	ee 0f       	add	r30, r30
    12de:	ff 1f       	adc	r31, r31
    12e0:	5a 95       	dec	r21
    12e2:	e1 f7       	brne	.-8      	; 0x12dc <Isb_App_Exec+0x740>
    12e4:	e6 0f       	add	r30, r22
    12e6:	f7 1f       	adc	r31, r23
    12e8:	e0 56       	subi	r30, 0x60	; 96
    12ea:	fe 4f       	sbci	r31, 0xFE	; 254
    12ec:	80 83       	st	Z, r24
							Isb_Obj[Obj_0].Top = ISB_MSG_TOP_1BIT;
    12ee:	31 e0       	ldi	r19, 0x01	; 1
    12f0:	31 83       	std	Z+1, r19	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    12f2:	e1 99       	sbic	0x1c, 1	; 28
    12f4:	fe cf       	rjmp	.-4      	; 0x12f2 <Isb_App_Exec+0x756>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    12f6:	4d 81       	ldd	r20, Y+5	; 0x05
    12f8:	5e 81       	ldd	r21, Y+6	; 0x06
    12fa:	a4 0e       	add	r10, r20
    12fc:	b5 1e       	adc	r11, r21
    12fe:	bf ba       	out	0x1f, r11	; 31
    1300:	ae ba       	out	0x1e, r10	; 30
#endif
    EECR |= (1 << EERE);
    1302:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1304:	8d b3       	in	r24, 0x1d	; 29
							Isb_Obj[Obj_0].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Tov);
    1306:	9b 01       	movw	r18, r22
    1308:	43 e0       	ldi	r20, 0x03	; 3
    130a:	22 0f       	add	r18, r18
    130c:	33 1f       	adc	r19, r19
    130e:	4a 95       	dec	r20
    1310:	e1 f7       	brne	.-8      	; 0x130a <Isb_App_Exec+0x76e>
    1312:	26 0f       	add	r18, r22
    1314:	37 1f       	adc	r19, r23
    1316:	f9 01       	movw	r30, r18
    1318:	e0 56       	subi	r30, 0x60	; 96
    131a:	fe 4f       	sbci	r31, 0xFE	; 254
    131c:	82 83       	std	Z+2, r24	; 0x02
    131e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1320:	58 a1       	ldd	r21, Y+32	; 0x20
    1322:	8d 81       	ldd	r24, Y+5	; 0x05
    1324:	9e 81       	ldd	r25, Y+6	; 0x06
    1326:	48 0f       	add	r20, r24
    1328:	59 1f       	adc	r21, r25
    132a:	f9 01       	movw	r30, r18
    132c:	ed 55       	subi	r30, 0x5D	; 93
    132e:	fe 4f       	sbci	r31, 0xFE	; 254
    1330:	90 e0       	ldi	r25, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1332:	e1 99       	sbic	0x1c, 1	; 28
    1334:	fe cf       	rjmp	.-4      	; 0x1332 <Isb_App_Exec+0x796>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1336:	5f bb       	out	0x1f, r21	; 31
    1338:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
    133a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    133c:	8d b3       	in	r24, 0x1d	; 29
							for (uint8_t i = 0; i < 5; i++)
							{
								Isb_Obj[Obj_0].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_0_InitValue + i));
    133e:	81 93       	st	Z+, r24
						{
							Isb_App_DigOut[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg0);
							Isb_Obj[Obj_0].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Ctrl);
							Isb_Obj[Obj_0].Top = ISB_MSG_TOP_1BIT;
							Isb_Obj[Obj_0].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Tov);
							for (uint8_t i = 0; i < 5; i++)
    1340:	9f 5f       	subi	r25, 0xFF	; 255
    1342:	4f 5f       	subi	r20, 0xFF	; 255
    1344:	5f 4f       	sbci	r21, 0xFF	; 255
    1346:	95 30       	cpi	r25, 0x05	; 5
    1348:	a1 f7       	brne	.-24     	; 0x1332 <Isb_App_Exec+0x796>
							{
								Isb_Obj[Obj_0].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_0_InitValue + i));
							}
							Isb_Obj[Obj_0].IsChanged = FALSE;
    134a:	fb 01       	movw	r30, r22
    134c:	33 e0       	ldi	r19, 0x03	; 3
    134e:	ee 0f       	add	r30, r30
    1350:	ff 1f       	adc	r31, r31
    1352:	3a 95       	dec	r19
    1354:	e1 f7       	brne	.-8      	; 0x134e <Isb_App_Exec+0x7b2>
    1356:	e6 0f       	add	r30, r22
    1358:	f7 1f       	adc	r31, r23
    135a:	e0 56       	subi	r30, 0x60	; 96
    135c:	fe 4f       	sbci	r31, 0xFE	; 254
    135e:	10 86       	std	Z+8, r1	; 0x08
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1360:	e1 99       	sbic	0x1c, 1	; 28
    1362:	fe cf       	rjmp	.-4      	; 0x1360 <Isb_App_Exec+0x7c4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1364:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1366:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1368:	2d 81       	ldd	r18, Y+5	; 0x05
    136a:	3e 81       	ldd	r19, Y+6	; 0x06
    136c:	e2 0f       	add	r30, r18
    136e:	f3 1f       	adc	r31, r19
    1370:	ff bb       	out	0x1f, r31	; 31
    1372:	ee bb       	out	0x1e, r30	; 30
#endif
    EECR |= (1 << EERE);
    1374:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1376:	8d b3       	in	r24, 0x1d	; 29
							#if ISB_APP_DIGOUT_FEATURE_RESULT == TRUE
								Isb_App_DigOut[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg1);
    1378:	eb a5       	ldd	r30, Y+43	; 0x2b
    137a:	fc a5       	ldd	r31, Y+44	; 0x2c
    137c:	85 83       	std	Z+5, r24	; 0x05
								Isb_Obj[Obj_1].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_1_Ctrl);
    137e:	fb a1       	ldd	r31, Y+35	; 0x23
    1380:	6f 2f       	mov	r22, r31
    1382:	70 e0       	ldi	r23, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1384:	e1 99       	sbic	0x1c, 1	; 28
    1386:	fe cf       	rjmp	.-4      	; 0x1384 <Isb_App_Exec+0x7e8>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1388:	2d 81       	ldd	r18, Y+5	; 0x05
    138a:	3e 81       	ldd	r19, Y+6	; 0x06
    138c:	42 0e       	add	r4, r18
    138e:	53 1e       	adc	r5, r19
    1390:	5f ba       	out	0x1f, r5	; 31
    1392:	4e ba       	out	0x1e, r4	; 30
#endif
    EECR |= (1 << EERE);
    1394:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1396:	8d b3       	in	r24, 0x1d	; 29
    1398:	fb 01       	movw	r30, r22
    139a:	23 e0       	ldi	r18, 0x03	; 3
    139c:	ee 0f       	add	r30, r30
    139e:	ff 1f       	adc	r31, r31
    13a0:	2a 95       	dec	r18
    13a2:	e1 f7       	brne	.-8      	; 0x139c <Isb_App_Exec+0x800>
    13a4:	e6 0f       	add	r30, r22
    13a6:	f7 1f       	adc	r31, r23
    13a8:	e0 56       	subi	r30, 0x60	; 96
    13aa:	fe 4f       	sbci	r31, 0xFE	; 254
    13ac:	80 83       	st	Z, r24
								Isb_Obj[Obj_1].Top = ISB_MSG_TOP_1BIT;
    13ae:	31 e0       	ldi	r19, 0x01	; 1
    13b0:	31 83       	std	Z+1, r19	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    13b2:	e1 99       	sbic	0x1c, 1	; 28
    13b4:	fe cf       	rjmp	.-4      	; 0x13b2 <Isb_App_Exec+0x816>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    13b6:	4d 81       	ldd	r20, Y+5	; 0x05
    13b8:	5e 81       	ldd	r21, Y+6	; 0x06
    13ba:	24 0e       	add	r2, r20
    13bc:	35 1e       	adc	r3, r21
    13be:	3f ba       	out	0x1f, r3	; 31
    13c0:	2e ba       	out	0x1e, r2	; 30
#endif
    EECR |= (1 << EERE);
    13c2:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    13c4:	8d b3       	in	r24, 0x1d	; 29
								Isb_Obj[Obj_1].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_1_Tov);
    13c6:	9b 01       	movw	r18, r22
    13c8:	93 e0       	ldi	r25, 0x03	; 3
    13ca:	22 0f       	add	r18, r18
    13cc:	33 1f       	adc	r19, r19
    13ce:	9a 95       	dec	r25
    13d0:	e1 f7       	brne	.-8      	; 0x13ca <Isb_App_Exec+0x82e>
    13d2:	26 0f       	add	r18, r22
    13d4:	37 1f       	adc	r19, r23
    13d6:	f9 01       	movw	r30, r18
    13d8:	e0 56       	subi	r30, 0x60	; 96
    13da:	fe 4f       	sbci	r31, 0xFE	; 254
    13dc:	82 83       	std	Z+2, r24	; 0x02
    13de:	4b 8d       	ldd	r20, Y+27	; 0x1b
    13e0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	48 0f       	add	r20, r24
    13e8:	59 1f       	adc	r21, r25
    13ea:	f9 01       	movw	r30, r18
    13ec:	ed 55       	subi	r30, 0x5D	; 93
    13ee:	fe 4f       	sbci	r31, 0xFE	; 254
    13f0:	90 e0       	ldi	r25, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    13f2:	e1 99       	sbic	0x1c, 1	; 28
    13f4:	fe cf       	rjmp	.-4      	; 0x13f2 <Isb_App_Exec+0x856>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    13f6:	5f bb       	out	0x1f, r21	; 31
    13f8:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
    13fa:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    13fc:	8d b3       	in	r24, 0x1d	; 29
								for (uint8_t i = 0; i < 5; i++)
								{
									Isb_Obj[Obj_1].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_1_InitValue + i));
    13fe:	81 93       	st	Z+, r24
							#if ISB_APP_DIGOUT_FEATURE_RESULT == TRUE
								Isb_App_DigOut[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg1);
								Isb_Obj[Obj_1].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_1_Ctrl);
								Isb_Obj[Obj_1].Top = ISB_MSG_TOP_1BIT;
								Isb_Obj[Obj_1].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_1_Tov);
								for (uint8_t i = 0; i < 5; i++)
    1400:	9f 5f       	subi	r25, 0xFF	; 255
    1402:	4f 5f       	subi	r20, 0xFF	; 255
    1404:	5f 4f       	sbci	r21, 0xFF	; 255
    1406:	95 30       	cpi	r25, 0x05	; 5
    1408:	a1 f7       	brne	.-24     	; 0x13f2 <Isb_App_Exec+0x856>
								{
									Isb_Obj[Obj_1].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_1_InitValue + i));
								}
								Isb_Obj[Obj_1].IsChanged = FALSE;
    140a:	fb 01       	movw	r30, r22
    140c:	83 e0       	ldi	r24, 0x03	; 3
    140e:	ee 0f       	add	r30, r30
    1410:	ff 1f       	adc	r31, r31
    1412:	8a 95       	dec	r24
    1414:	e1 f7       	brne	.-8      	; 0x140e <Isb_App_Exec+0x872>
    1416:	e6 0f       	add	r30, r22
    1418:	f7 1f       	adc	r31, r23
    141a:	e0 56       	subi	r30, 0x60	; 96
    141c:	fe 4f       	sbci	r31, 0xFE	; 254
    141e:	10 86       	std	Z+8, r1	; 0x08
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1420:	e1 99       	sbic	0x1c, 1	; 28
    1422:	fe cf       	rjmp	.-4      	; 0x1420 <Isb_App_Exec+0x884>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1424:	e9 8d       	ldd	r30, Y+25	; 0x19
    1426:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1428:	2d 81       	ldd	r18, Y+5	; 0x05
    142a:	3e 81       	ldd	r19, Y+6	; 0x06
    142c:	e2 0f       	add	r30, r18
    142e:	f3 1f       	adc	r31, r19
    1430:	ff bb       	out	0x1f, r31	; 31
    1432:	ee bb       	out	0x1e, r30	; 30
#endif
    EECR |= (1 << EERE);
    1434:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1436:	8d b3       	in	r24, 0x1d	; 29
							#endif /* ISB_APP_DIGOUT_FEATURE_RESULT == TRUE */
							#if ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION == TRUE
								Isb_App_DigOut[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg2);
    1438:	eb a5       	ldd	r30, Y+43	; 0x2b
    143a:	fc a5       	ldd	r31, Y+44	; 0x2c
    143c:	86 83       	std	Z+6, r24	; 0x06
								Isb_Obj[Obj_2].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_2_Ctrl);
    143e:	fa a1       	ldd	r31, Y+34	; 0x22
    1440:	6f 2f       	mov	r22, r31
    1442:	70 e0       	ldi	r23, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1444:	e1 99       	sbic	0x1c, 1	; 28
    1446:	fe cf       	rjmp	.-4      	; 0x1444 <Isb_App_Exec+0x8a8>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1448:	2f 89       	ldd	r18, Y+23	; 0x17
    144a:	38 8d       	ldd	r19, Y+24	; 0x18
    144c:	4d 81       	ldd	r20, Y+5	; 0x05
    144e:	5e 81       	ldd	r21, Y+6	; 0x06
    1450:	24 0f       	add	r18, r20
    1452:	35 1f       	adc	r19, r21
    1454:	3f bb       	out	0x1f, r19	; 31
    1456:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    1458:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    145a:	8d b3       	in	r24, 0x1d	; 29
    145c:	fb 01       	movw	r30, r22
    145e:	53 e0       	ldi	r21, 0x03	; 3
    1460:	ee 0f       	add	r30, r30
    1462:	ff 1f       	adc	r31, r31
    1464:	5a 95       	dec	r21
    1466:	e1 f7       	brne	.-8      	; 0x1460 <Isb_App_Exec+0x8c4>
    1468:	e6 0f       	add	r30, r22
    146a:	f7 1f       	adc	r31, r23
    146c:	e0 56       	subi	r30, 0x60	; 96
    146e:	fe 4f       	sbci	r31, 0xFE	; 254
    1470:	80 83       	st	Z, r24
								Isb_Obj[Obj_2].Top = ISB_MSG_TOP_1BIT;
    1472:	51 e0       	ldi	r21, 0x01	; 1
    1474:	51 83       	std	Z+1, r21	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1476:	e1 99       	sbic	0x1c, 1	; 28
    1478:	fe cf       	rjmp	.-4      	; 0x1476 <Isb_App_Exec+0x8da>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    147a:	8d 89       	ldd	r24, Y+21	; 0x15
    147c:	9e 89       	ldd	r25, Y+22	; 0x16
    147e:	ed 81       	ldd	r30, Y+5	; 0x05
    1480:	fe 81       	ldd	r31, Y+6	; 0x06
    1482:	8e 0f       	add	r24, r30
    1484:	9f 1f       	adc	r25, r31
    1486:	9f bb       	out	0x1f, r25	; 31
    1488:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    148a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    148c:	8d b3       	in	r24, 0x1d	; 29
								Isb_Obj[Obj_2].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_2_Tov);
    148e:	9b 01       	movw	r18, r22
    1490:	43 e0       	ldi	r20, 0x03	; 3
    1492:	22 0f       	add	r18, r18
    1494:	33 1f       	adc	r19, r19
    1496:	4a 95       	dec	r20
    1498:	e1 f7       	brne	.-8      	; 0x1492 <Isb_App_Exec+0x8f6>
    149a:	26 0f       	add	r18, r22
    149c:	37 1f       	adc	r19, r23
    149e:	f9 01       	movw	r30, r18
    14a0:	e0 56       	subi	r30, 0x60	; 96
    14a2:	fe 4f       	sbci	r31, 0xFE	; 254
    14a4:	82 83       	std	Z+2, r24	; 0x02
    14a6:	4b 89       	ldd	r20, Y+19	; 0x13
    14a8:	5c 89       	ldd	r21, Y+20	; 0x14
    14aa:	8d 81       	ldd	r24, Y+5	; 0x05
    14ac:	9e 81       	ldd	r25, Y+6	; 0x06
    14ae:	48 0f       	add	r20, r24
    14b0:	59 1f       	adc	r21, r25
    14b2:	f9 01       	movw	r30, r18
    14b4:	ed 55       	subi	r30, 0x5D	; 93
    14b6:	fe 4f       	sbci	r31, 0xFE	; 254
    14b8:	90 e0       	ldi	r25, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    14ba:	e1 99       	sbic	0x1c, 1	; 28
    14bc:	fe cf       	rjmp	.-4      	; 0x14ba <Isb_App_Exec+0x91e>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    14be:	5f bb       	out	0x1f, r21	; 31
    14c0:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
    14c2:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    14c4:	8d b3       	in	r24, 0x1d	; 29
								for (uint8_t i = 0; i < 5; i++)
								{
									Isb_Obj[Obj_2].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_2_InitValue + i));
    14c6:	81 93       	st	Z+, r24
							#if ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION == TRUE
								Isb_App_DigOut[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg2);
								Isb_Obj[Obj_2].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_2_Ctrl);
								Isb_Obj[Obj_2].Top = ISB_MSG_TOP_1BIT;
								Isb_Obj[Obj_2].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_2_Tov);
								for (uint8_t i = 0; i < 5; i++)
    14c8:	9f 5f       	subi	r25, 0xFF	; 255
    14ca:	4f 5f       	subi	r20, 0xFF	; 255
    14cc:	5f 4f       	sbci	r21, 0xFF	; 255
    14ce:	95 30       	cpi	r25, 0x05	; 5
    14d0:	a1 f7       	brne	.-24     	; 0x14ba <Isb_App_Exec+0x91e>
								{
									Isb_Obj[Obj_2].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_2_InitValue + i));
								}
								Isb_Obj[Obj_2].IsChanged = FALSE;
    14d2:	fb 01       	movw	r30, r22
    14d4:	33 e0       	ldi	r19, 0x03	; 3
    14d6:	ee 0f       	add	r30, r30
    14d8:	ff 1f       	adc	r31, r31
    14da:	3a 95       	dec	r19
    14dc:	e1 f7       	brne	.-8      	; 0x14d6 <Isb_App_Exec+0x93a>
    14de:	e6 0f       	add	r30, r22
    14e0:	f7 1f       	adc	r31, r23
    14e2:	e0 56       	subi	r30, 0x60	; 96
    14e4:	fe 4f       	sbci	r31, 0xFE	; 254
    14e6:	10 86       	std	Z+8, r1	; 0x08
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    14e8:	e1 99       	sbic	0x1c, 1	; 28
    14ea:	fe cf       	rjmp	.-4      	; 0x14e8 <Isb_App_Exec+0x94c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    14ec:	e9 89       	ldd	r30, Y+17	; 0x11
    14ee:	fa 89       	ldd	r31, Y+18	; 0x12
    14f0:	2d 81       	ldd	r18, Y+5	; 0x05
    14f2:	3e 81       	ldd	r19, Y+6	; 0x06
    14f4:	e2 0f       	add	r30, r18
    14f6:	f3 1f       	adc	r31, r19
    14f8:	ff bb       	out	0x1f, r31	; 31
    14fa:	ee bb       	out	0x1e, r30	; 30
#endif
    EECR |= (1 << EERE);
    14fc:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    14fe:	8d b3       	in	r24, 0x1d	; 29
							#endif /* ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION == TRUE */
							#if ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION == TRUE
								Isb_App_DigOut[AppIndex].Cfg3 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg3);
    1500:	eb a5       	ldd	r30, Y+43	; 0x2b
    1502:	fc a5       	ldd	r31, Y+44	; 0x2c
    1504:	81 87       	std	Z+9, r24	; 0x09
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1506:	e1 99       	sbic	0x1c, 1	; 28
    1508:	fe cf       	rjmp	.-4      	; 0x1506 <Isb_App_Exec+0x96a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    150a:	2f 85       	ldd	r18, Y+15	; 0x0f
    150c:	38 89       	ldd	r19, Y+16	; 0x10
    150e:	4d 81       	ldd	r20, Y+5	; 0x05
    1510:	5e 81       	ldd	r21, Y+6	; 0x06
    1512:	24 0f       	add	r18, r20
    1514:	35 1f       	adc	r19, r21
    1516:	3f bb       	out	0x1f, r19	; 31
    1518:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    151a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    151c:	8d b3       	in	r24, 0x1d	; 29
								Isb_App_DigOut[AppIndex].Cfg4 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg4);
    151e:	eb a5       	ldd	r30, Y+43	; 0x2b
    1520:	fc a5       	ldd	r31, Y+44	; 0x2c
    1522:	82 87       	std	Z+10, r24	; 0x0a
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1524:	e1 99       	sbic	0x1c, 1	; 28
    1526:	fe cf       	rjmp	.-4      	; 0x1524 <Isb_App_Exec+0x988>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1528:	2d 85       	ldd	r18, Y+13	; 0x0d
    152a:	3e 85       	ldd	r19, Y+14	; 0x0e
    152c:	4d 81       	ldd	r20, Y+5	; 0x05
    152e:	5e 81       	ldd	r21, Y+6	; 0x06
    1530:	24 0f       	add	r18, r20
    1532:	35 1f       	adc	r19, r21
    1534:	3f bb       	out	0x1f, r19	; 31
    1536:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    1538:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    153a:	8d b3       	in	r24, 0x1d	; 29
								Isb_App_DigOut[AppIndex].Cfg5 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg5);
    153c:	eb a5       	ldd	r30, Y+43	; 0x2b
    153e:	fc a5       	ldd	r31, Y+44	; 0x2c
    1540:	83 87       	std	Z+11, r24	; 0x0b
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1542:	e1 99       	sbic	0x1c, 1	; 28
    1544:	fe cf       	rjmp	.-4      	; 0x1542 <Isb_App_Exec+0x9a6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1546:	2b 85       	ldd	r18, Y+11	; 0x0b
    1548:	3c 85       	ldd	r19, Y+12	; 0x0c
    154a:	4d 81       	ldd	r20, Y+5	; 0x05
    154c:	5e 81       	ldd	r21, Y+6	; 0x06
    154e:	24 0f       	add	r18, r20
    1550:	35 1f       	adc	r19, r21
    1552:	3f bb       	out	0x1f, r19	; 31
    1554:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    1556:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1558:	8d b3       	in	r24, 0x1d	; 29
								Isb_App_DigOut[AppIndex].Cfg6 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg6);
    155a:	eb a5       	ldd	r30, Y+43	; 0x2b
    155c:	fc a5       	ldd	r31, Y+44	; 0x2c
    155e:	84 87       	std	Z+12, r24	; 0x0c
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1560:	e1 99       	sbic	0x1c, 1	; 28
    1562:	fe cf       	rjmp	.-4      	; 0x1560 <Isb_App_Exec+0x9c4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1564:	29 85       	ldd	r18, Y+9	; 0x09
    1566:	3a 85       	ldd	r19, Y+10	; 0x0a
    1568:	4d 81       	ldd	r20, Y+5	; 0x05
    156a:	5e 81       	ldd	r21, Y+6	; 0x06
    156c:	24 0f       	add	r18, r20
    156e:	35 1f       	adc	r19, r21
    1570:	3f bb       	out	0x1f, r19	; 31
    1572:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    1574:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1576:	8d b3       	in	r24, 0x1d	; 29
								Isb_App_DigOut[AppIndex].Cfg7 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg7);
    1578:	eb a5       	ldd	r30, Y+43	; 0x2b
    157a:	fc a5       	ldd	r31, Y+44	; 0x2c
    157c:	85 87       	std	Z+13, r24	; 0x0d
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    157e:	e1 99       	sbic	0x1c, 1	; 28
    1580:	fe cf       	rjmp	.-4      	; 0x157e <Isb_App_Exec+0x9e2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1582:	2d 81       	ldd	r18, Y+5	; 0x05
    1584:	3e 81       	ldd	r19, Y+6	; 0x06
    1586:	62 0e       	add	r6, r18
    1588:	73 1e       	adc	r7, r19
    158a:	7f ba       	out	0x1f, r7	; 31
    158c:	6e ba       	out	0x1e, r6	; 30
#endif
    EECR |= (1 << EERE);
    158e:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1590:	8d b3       	in	r24, 0x1d	; 29
								Isb_App_DigOut[AppIndex].Cfg8 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg8);
    1592:	eb a5       	ldd	r30, Y+43	; 0x2b
    1594:	fc a5       	ldd	r31, Y+44	; 0x2c
    1596:	86 87       	std	Z+14, r24	; 0x0e
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1598:	e1 99       	sbic	0x1c, 1	; 28
    159a:	fe cf       	rjmp	.-4      	; 0x1598 <Isb_App_Exec+0x9fc>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    159c:	2d 81       	ldd	r18, Y+5	; 0x05
    159e:	3e 81       	ldd	r19, Y+6	; 0x06
    15a0:	82 0e       	add	r8, r18
    15a2:	93 1e       	adc	r9, r19
    15a4:	9f ba       	out	0x1f, r9	; 31
    15a6:	8e ba       	out	0x1e, r8	; 30
#endif
    EECR |= (1 << EERE);
    15a8:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    15aa:	8d b3       	in	r24, 0x1d	; 29
								Isb_App_DigOut[AppIndex].Cfg9 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg9);
    15ac:	eb a5       	ldd	r30, Y+43	; 0x2b
    15ae:	fc a5       	ldd	r31, Y+44	; 0x2c
    15b0:	87 87       	std	Z+15, r24	; 0x0f
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    15b2:	e1 99       	sbic	0x1c, 1	; 28
    15b4:	fe cf       	rjmp	.-4      	; 0x15b2 <Isb_App_Exec+0xa16>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    15b6:	2d 81       	ldd	r18, Y+5	; 0x05
    15b8:	3e 81       	ldd	r19, Y+6	; 0x06
    15ba:	e2 0e       	add	r14, r18
    15bc:	f3 1e       	adc	r15, r19
    15be:	ff ba       	out	0x1f, r15	; 31
    15c0:	ee ba       	out	0x1e, r14	; 30
#endif
    EECR |= (1 << EERE);
    15c2:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    15c4:	8d b3       	in	r24, 0x1d	; 29
							#endif /* ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION == TRUE */
							#if ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE
								Isb_App_DigOut[AppIndex].Cfg10 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg10);
    15c6:	eb a5       	ldd	r30, Y+43	; 0x2b
    15c8:	fc a5       	ldd	r31, Y+44	; 0x2c
    15ca:	82 8f       	std	Z+26, r24	; 0x1a
								Isb_Obj[Obj_3].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_3_Ctrl);
    15cc:	f9 a1       	ldd	r31, Y+33	; 0x21
    15ce:	6f 2f       	mov	r22, r31
    15d0:	70 e0       	ldi	r23, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    15d2:	e1 99       	sbic	0x1c, 1	; 28
    15d4:	fe cf       	rjmp	.-4      	; 0x15d2 <Isb_App_Exec+0xa36>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    15d6:	2d 81       	ldd	r18, Y+5	; 0x05
    15d8:	3e 81       	ldd	r19, Y+6	; 0x06
    15da:	a2 0f       	add	r26, r18
    15dc:	b3 1f       	adc	r27, r19
    15de:	bf bb       	out	0x1f, r27	; 31
    15e0:	ae bb       	out	0x1e, r26	; 30
#endif
    EECR |= (1 << EERE);
    15e2:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    15e4:	8d b3       	in	r24, 0x1d	; 29
    15e6:	fb 01       	movw	r30, r22
    15e8:	23 e0       	ldi	r18, 0x03	; 3
    15ea:	ee 0f       	add	r30, r30
    15ec:	ff 1f       	adc	r31, r31
    15ee:	2a 95       	dec	r18
    15f0:	e1 f7       	brne	.-8      	; 0x15ea <Isb_App_Exec+0xa4e>
    15f2:	e6 0f       	add	r30, r22
    15f4:	f7 1f       	adc	r31, r23
    15f6:	e0 56       	subi	r30, 0x60	; 96
    15f8:	fe 4f       	sbci	r31, 0xFE	; 254
    15fa:	80 83       	st	Z, r24
								Isb_Obj[Obj_3].Top = ISB_MSG_TOP_1BIT;
    15fc:	31 e0       	ldi	r19, 0x01	; 1
    15fe:	31 83       	std	Z+1, r19	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1600:	e1 99       	sbic	0x1c, 1	; 28
    1602:	fe cf       	rjmp	.-4      	; 0x1600 <Isb_App_Exec+0xa64>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1604:	4d 81       	ldd	r20, Y+5	; 0x05
    1606:	5e 81       	ldd	r21, Y+6	; 0x06
    1608:	04 0f       	add	r16, r20
    160a:	15 1f       	adc	r17, r21
    160c:	1f bb       	out	0x1f, r17	; 31
    160e:	0e bb       	out	0x1e, r16	; 30
#endif
    EECR |= (1 << EERE);
    1610:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1612:	8d b3       	in	r24, 0x1d	; 29
								Isb_Obj[Obj_3].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_3_Tov);
    1614:	9b 01       	movw	r18, r22
    1616:	93 e0       	ldi	r25, 0x03	; 3
    1618:	22 0f       	add	r18, r18
    161a:	33 1f       	adc	r19, r19
    161c:	9a 95       	dec	r25
    161e:	e1 f7       	brne	.-8      	; 0x1618 <Isb_App_Exec+0xa7c>
    1620:	26 0f       	add	r18, r22
    1622:	37 1f       	adc	r19, r23
    1624:	f9 01       	movw	r30, r18
    1626:	e0 56       	subi	r30, 0x60	; 96
    1628:	fe 4f       	sbci	r31, 0xFE	; 254
    162a:	82 83       	std	Z+2, r24	; 0x02
    162c:	4f 81       	ldd	r20, Y+7	; 0x07
    162e:	58 85       	ldd	r21, Y+8	; 0x08
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
    1632:	9e 81       	ldd	r25, Y+6	; 0x06
    1634:	48 0f       	add	r20, r24
    1636:	59 1f       	adc	r21, r25
    1638:	f9 01       	movw	r30, r18
    163a:	ed 55       	subi	r30, 0x5D	; 93
    163c:	fe 4f       	sbci	r31, 0xFE	; 254
    163e:	90 e0       	ldi	r25, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1640:	e1 99       	sbic	0x1c, 1	; 28
    1642:	fe cf       	rjmp	.-4      	; 0x1640 <Isb_App_Exec+0xaa4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1644:	5f bb       	out	0x1f, r21	; 31
    1646:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
    1648:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    164a:	8d b3       	in	r24, 0x1d	; 29
								for (uint8_t i = 0; i < 5; i++)
								{
									Isb_Obj[Obj_3].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_3_InitValue + i));
    164c:	81 93       	st	Z+, r24
							#if ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE
								Isb_App_DigOut[AppIndex].Cfg10 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg10);
								Isb_Obj[Obj_3].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_3_Ctrl);
								Isb_Obj[Obj_3].Top = ISB_MSG_TOP_1BIT;
								Isb_Obj[Obj_3].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_3_Tov);
								for (uint8_t i = 0; i < 5; i++)
    164e:	9f 5f       	subi	r25, 0xFF	; 255
    1650:	4f 5f       	subi	r20, 0xFF	; 255
    1652:	5f 4f       	sbci	r21, 0xFF	; 255
    1654:	95 30       	cpi	r25, 0x05	; 5
    1656:	a1 f7       	brne	.-24     	; 0x1640 <Isb_App_Exec+0xaa4>
								{
									Isb_Obj[Obj_3].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_3_InitValue + i));
								}
								Isb_Obj[Obj_3].IsChanged = FALSE;
    1658:	fb 01       	movw	r30, r22
    165a:	83 e0       	ldi	r24, 0x03	; 3
    165c:	ee 0f       	add	r30, r30
    165e:	ff 1f       	adc	r31, r31
    1660:	8a 95       	dec	r24
    1662:	e1 f7       	brne	.-8      	; 0x165c <Isb_App_Exec+0xac0>
    1664:	e6 0f       	add	r30, r22
    1666:	f7 1f       	adc	r31, r23
    1668:	e0 56       	subi	r30, 0x60	; 96
    166a:	fe 4f       	sbci	r31, 0xFE	; 254
    166c:	10 86       	std	Z+8, r1	; 0x08
							#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
						}
						Isb_Ch[Ch].Ctrl |= (1<<ISB_CH_CTRL_INITIALIZED);
    166e:	a9 a5       	ldd	r26, Y+41	; 0x29
    1670:	ba a5       	ldd	r27, Y+42	; 0x2a
    1672:	aa 0f       	add	r26, r26
    1674:	bb 1f       	adc	r27, r27
    1676:	a0 55       	subi	r26, 0x50	; 80
    1678:	bf 4f       	sbci	r27, 0xFF	; 255
    167a:	ed a1       	ldd	r30, Y+37	; 0x25
    167c:	fe a1       	ldd	r31, Y+38	; 0x26
    167e:	e0 64       	ori	r30, 0x40	; 64
    1680:	ed 93       	st	X+, r30
    1682:	fc 93       	st	X, r31
					}
					// Exec
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED))
    1684:	af a1       	ldd	r26, Y+39	; 0x27
    1686:	b8 a5       	ldd	r27, Y+40	; 0x28
    1688:	8c 91       	ld	r24, X
    168a:	80 ff       	sbrs	r24, 0
    168c:	ac c4       	rjmp	.+2392   	; 0x1fe6 <Isb_App_Exec+0x144a>
					{
						uint8_t Value = Isb_App_DigOut[AppIndex].Value;
						uint8_t IsChanged = Isb_App_DigOut[AppIndex].IsChanged;
						// Logikfunktion
						#if ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION == TRUE
							switch (Isb_App_DigOut[AppIndex].Cfg2 & ISB_APP_DIGOUT_CFG2_LOGIC_MODE_MASK)
    168e:	eb a5       	ldd	r30, Y+43	; 0x2b
    1690:	fc a5       	ldd	r31, Y+44	; 0x2c
    1692:	86 81       	ldd	r24, Z+6	; 0x06
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	87 70       	andi	r24, 0x07	; 7
    1698:	90 70       	andi	r25, 0x00	; 0
    169a:	81 30       	cpi	r24, 0x01	; 1
    169c:	91 05       	cpc	r25, r1
    169e:	39 f0       	breq	.+14     	; 0x16ae <Isb_App_Exec+0xb12>
    16a0:	fc a1       	ldd	r31, Y+36	; 0x24
    16a2:	2f 2f       	mov	r18, r31
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	02 97       	sbiw	r24, 0x02	; 2
    16a8:	09 f0       	breq	.+2      	; 0x16ac <Isb_App_Exec+0xb10>
    16aa:	62 c0       	rjmp	.+196    	; 0x1770 <Isb_App_Exec+0xbd4>
    16ac:	14 c0       	rjmp	.+40     	; 0x16d6 <Isb_App_Exec+0xb3a>
							{
								#if ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION_AND == TRUE
									case ISB_APP_DIGOUT_CFG2_LOGIC_MODE_AND:
										if ((Isb_Obj[Obj_0].Data[0] != FALSE) & (Isb_Obj[Obj_2].Data[0] != FALSE))
    16ae:	4c a1       	ldd	r20, Y+36	; 0x24
    16b0:	24 2f       	mov	r18, r20
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	8a a1       	ldd	r24, Y+34	; 0x22
    16b6:	48 2f       	mov	r20, r24
    16b8:	50 e0       	ldi	r21, 0x00	; 0
    16ba:	f9 01       	movw	r30, r18
    16bc:	13 e0       	ldi	r17, 0x03	; 3
    16be:	ee 0f       	add	r30, r30
    16c0:	ff 1f       	adc	r31, r31
    16c2:	1a 95       	dec	r17
    16c4:	e1 f7       	brne	.-8      	; 0x16be <Isb_App_Exec+0xb22>
    16c6:	e2 0f       	add	r30, r18
    16c8:	f3 1f       	adc	r31, r19
    16ca:	e0 56       	subi	r30, 0x60	; 96
    16cc:	fe 4f       	sbci	r31, 0xFE	; 254
    16ce:	83 81       	ldd	r24, Z+3	; 0x03
    16d0:	88 23       	and	r24, r24
    16d2:	69 f1       	breq	.+90     	; 0x172e <Isb_App_Exec+0xb92>
    16d4:	10 c0       	rjmp	.+32     	; 0x16f6 <Isb_App_Exec+0xb5a>
										Isb_Obj[Obj_2].IsChanged = FALSE;
										break;
								#endif /* ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION_AND == TRUE */
								#if ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION_OR == TRUE
									case ISB_APP_DIGOUT_CFG2_LOGIC_MODE_OR:
										if ((Isb_Obj[Obj_0].Data[0] != FALSE) | (Isb_Obj[Obj_2].Data[0] != FALSE))
    16d6:	fa a1       	ldd	r31, Y+34	; 0x22
    16d8:	4f 2f       	mov	r20, r31
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	f9 01       	movw	r30, r18
    16de:	b3 e0       	ldi	r27, 0x03	; 3
    16e0:	ee 0f       	add	r30, r30
    16e2:	ff 1f       	adc	r31, r31
    16e4:	ba 95       	dec	r27
    16e6:	e1 f7       	brne	.-8      	; 0x16e0 <Isb_App_Exec+0xb44>
    16e8:	e2 0f       	add	r30, r18
    16ea:	f3 1f       	adc	r31, r19
    16ec:	e0 56       	subi	r30, 0x60	; 96
    16ee:	fe 4f       	sbci	r31, 0xFE	; 254
    16f0:	83 81       	ldd	r24, Z+3	; 0x03
    16f2:	88 23       	and	r24, r24
    16f4:	69 f4       	brne	.+26     	; 0x1710 <Isb_App_Exec+0xb74>
    16f6:	fa 01       	movw	r30, r20
    16f8:	a3 e0       	ldi	r26, 0x03	; 3
    16fa:	ee 0f       	add	r30, r30
    16fc:	ff 1f       	adc	r31, r31
    16fe:	aa 95       	dec	r26
    1700:	e1 f7       	brne	.-8      	; 0x16fa <Isb_App_Exec+0xb5e>
    1702:	e4 0f       	add	r30, r20
    1704:	f5 1f       	adc	r31, r21
    1706:	e0 56       	subi	r30, 0x60	; 96
    1708:	fe 4f       	sbci	r31, 0xFE	; 254
    170a:	83 81       	ldd	r24, Z+3	; 0x03
    170c:	88 23       	and	r24, r24
    170e:	79 f0       	breq	.+30     	; 0x172e <Isb_App_Exec+0xb92>
										{
											if (Isb_App_DigOut[AppIndex].LogicValue != TRUE)
    1710:	ab a5       	ldd	r26, Y+43	; 0x2b
    1712:	bc a5       	ldd	r27, Y+44	; 0x2c
    1714:	17 96       	adiw	r26, 0x07	; 7
    1716:	8c 91       	ld	r24, X
    1718:	17 97       	sbiw	r26, 0x07	; 7
    171a:	81 30       	cpi	r24, 0x01	; 1
    171c:	a9 f0       	breq	.+42     	; 0x1748 <Isb_App_Exec+0xbac>
											{
												Isb_App_DigOut[AppIndex].LogicValue = TRUE;
    171e:	e1 e0       	ldi	r30, 0x01	; 1
    1720:	17 96       	adiw	r26, 0x07	; 7
    1722:	ec 93       	st	X, r30
    1724:	17 97       	sbiw	r26, 0x07	; 7
												Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
    1726:	f1 e0       	ldi	r31, 0x01	; 1
    1728:	18 96       	adiw	r26, 0x08	; 8
    172a:	fc 93       	st	X, r31
    172c:	0d c0       	rjmp	.+26     	; 0x1748 <Isb_App_Exec+0xbac>
											}
										}
										else
										{
											if (Isb_App_DigOut[AppIndex].LogicValue != FALSE)
    172e:	ab a5       	ldd	r26, Y+43	; 0x2b
    1730:	bc a5       	ldd	r27, Y+44	; 0x2c
    1732:	17 96       	adiw	r26, 0x07	; 7
    1734:	8c 91       	ld	r24, X
    1736:	17 97       	sbiw	r26, 0x07	; 7
    1738:	88 23       	and	r24, r24
    173a:	31 f0       	breq	.+12     	; 0x1748 <Isb_App_Exec+0xbac>
											{
												Isb_App_DigOut[AppIndex].LogicValue = FALSE;
    173c:	17 96       	adiw	r26, 0x07	; 7
    173e:	1c 92       	st	X, r1
    1740:	17 97       	sbiw	r26, 0x07	; 7
												Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
    1742:	e1 e0       	ldi	r30, 0x01	; 1
    1744:	18 96       	adiw	r26, 0x08	; 8
    1746:	ec 93       	st	X, r30
											}
										}
										Isb_Obj[Obj_0].IsChanged = FALSE;
    1748:	f9 01       	movw	r30, r18
    174a:	73 e0       	ldi	r23, 0x03	; 3
    174c:	ee 0f       	add	r30, r30
    174e:	ff 1f       	adc	r31, r31
    1750:	7a 95       	dec	r23
    1752:	e1 f7       	brne	.-8      	; 0x174c <Isb_App_Exec+0xbb0>
    1754:	e2 0f       	add	r30, r18
    1756:	f3 1f       	adc	r31, r19
    1758:	e0 56       	subi	r30, 0x60	; 96
    175a:	fe 4f       	sbci	r31, 0xFE	; 254
    175c:	10 86       	std	Z+8, r1	; 0x08
										Isb_Obj[Obj_2].IsChanged = FALSE;
    175e:	fa 01       	movw	r30, r20
    1760:	63 e0       	ldi	r22, 0x03	; 3
    1762:	ee 0f       	add	r30, r30
    1764:	ff 1f       	adc	r31, r31
    1766:	6a 95       	dec	r22
    1768:	e1 f7       	brne	.-8      	; 0x1762 <Isb_App_Exec+0xbc6>
    176a:	e4 0f       	add	r30, r20
    176c:	f5 1f       	adc	r31, r21
    176e:	20 c0       	rjmp	.+64     	; 0x17b0 <Isb_App_Exec+0xc14>
										break;
								#endif /* ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION_OR == TRUE */
								default:
									if (Isb_App_DigOut[AppIndex].LogicValue != Isb_Obj[Obj_0].Data[0])
    1770:	f9 01       	movw	r30, r18
    1772:	43 e0       	ldi	r20, 0x03	; 3
    1774:	ee 0f       	add	r30, r30
    1776:	ff 1f       	adc	r31, r31
    1778:	4a 95       	dec	r20
    177a:	e1 f7       	brne	.-8      	; 0x1774 <Isb_App_Exec+0xbd8>
    177c:	e2 0f       	add	r30, r18
    177e:	f3 1f       	adc	r31, r19
    1780:	e0 56       	subi	r30, 0x60	; 96
    1782:	fe 4f       	sbci	r31, 0xFE	; 254
    1784:	93 81       	ldd	r25, Z+3	; 0x03
    1786:	ab a5       	ldd	r26, Y+43	; 0x2b
    1788:	bc a5       	ldd	r27, Y+44	; 0x2c
    178a:	17 96       	adiw	r26, 0x07	; 7
    178c:	8c 91       	ld	r24, X
    178e:	17 97       	sbiw	r26, 0x07	; 7
    1790:	89 17       	cp	r24, r25
    1792:	31 f0       	breq	.+12     	; 0x17a0 <Isb_App_Exec+0xc04>
									{
										Isb_App_DigOut[AppIndex].LogicValue = Isb_Obj[Obj_0].Data[0];
    1794:	17 96       	adiw	r26, 0x07	; 7
    1796:	9c 93       	st	X, r25
    1798:	17 97       	sbiw	r26, 0x07	; 7
										Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
    179a:	e1 e0       	ldi	r30, 0x01	; 1
    179c:	18 96       	adiw	r26, 0x08	; 8
    179e:	ec 93       	st	X, r30
									}
									Isb_Obj[Obj_0].IsChanged = FALSE;
    17a0:	f9 01       	movw	r30, r18
    17a2:	93 e0       	ldi	r25, 0x03	; 3
    17a4:	ee 0f       	add	r30, r30
    17a6:	ff 1f       	adc	r31, r31
    17a8:	9a 95       	dec	r25
    17aa:	e1 f7       	brne	.-8      	; 0x17a4 <Isb_App_Exec+0xc08>
    17ac:	e2 0f       	add	r30, r18
    17ae:	f3 1f       	adc	r31, r19
    17b0:	e0 56       	subi	r30, 0x60	; 96
    17b2:	fe 4f       	sbci	r31, 0xFE	; 254
    17b4:	10 86       	std	Z+8, r1	; 0x08
									break;
							}
							Value = Isb_App_DigOut[AppIndex].LogicValue;
    17b6:	ab a5       	ldd	r26, Y+43	; 0x2b
    17b8:	bc a5       	ldd	r27, Y+44	; 0x2c
    17ba:	17 96       	adiw	r26, 0x07	; 7
    17bc:	1c 91       	ld	r17, X
    17be:	17 97       	sbiw	r26, 0x07	; 7
							IsChanged = Isb_App_DigOut[AppIndex].LogicIsChanged;
    17c0:	18 96       	adiw	r26, 0x08	; 8
    17c2:	0c 91       	ld	r16, X
    17c4:	18 97       	sbiw	r26, 0x08	; 8
							}
							Isb_Obj[Obj_0].IsChanged = FALSE;
						#endif /* ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION == TRUE */
						// Zeitfunktion
						#if ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION == TRUE
							switch (Isb_App_DigOut[AppIndex].Cfg3 & ISB_APP_DIGOUT_CFG3_TIME_MODE_MASK)
    17c6:	19 96       	adiw	r26, 0x09	; 9
    17c8:	8c 91       	ld	r24, X
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	83 70       	andi	r24, 0x03	; 3
    17ce:	90 70       	andi	r25, 0x00	; 0
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	91 05       	cpc	r25, r1
    17d4:	21 f0       	breq	.+8      	; 0x17de <Isb_App_Exec+0xc42>
    17d6:	02 97       	sbiw	r24, 0x02	; 2
    17d8:	09 f0       	breq	.+2      	; 0x17dc <Isb_App_Exec+0xc40>
    17da:	39 c1       	rjmp	.+626    	; 0x1a4e <Isb_App_Exec+0xeb2>
    17dc:	72 c0       	rjmp	.+228    	; 0x18c2 <Isb_App_Exec+0xd26>
							{
								#if ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION_POWERUPDELAY == TRUE | ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION_POWERDOWNDELAY == TRUE
									case ISB_APP_DIGOUT_CFG3_TIME_MODE_DELAY:
										#if ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION_POWERUPDELAY == TRUE
											if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg3, ISB_APP_DIGOUT_CFG3_TIME_POWERUPDELAY_ENABLED))
    17de:	8c e1       	ldi	r24, 0x1C	; 28
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	eb 81       	ldd	r30, Y+3	; 0x03
    17e4:	fc 81       	ldd	r31, Y+4	; 0x04
    17e6:	e8 9f       	mul	r30, r24
    17e8:	b0 01       	movw	r22, r0
    17ea:	e9 9f       	mul	r30, r25
    17ec:	70 0d       	add	r23, r0
    17ee:	f8 9f       	mul	r31, r24
    17f0:	70 0d       	add	r23, r0
    17f2:	11 24       	eor	r1, r1
    17f4:	67 53       	subi	r22, 0x37	; 55
    17f6:	7f 4f       	sbci	r23, 0xFF	; 255
    17f8:	db 01       	movw	r26, r22
    17fa:	8c 91       	ld	r24, X
    17fc:	82 ff       	sbrs	r24, 2
    17fe:	46 c0       	rjmp	.+140    	; 0x188c <Isb_App_Exec+0xcf0>
											{
												if (Value == TRUE)
    1800:	11 30       	cpi	r17, 0x01	; 1
    1802:	99 f4       	brne	.+38     	; 0x182a <Isb_App_Exec+0xc8e>
												{
													if (Isb_App_DigOut[AppIndex].TimeOnCount != 0)
    1804:	eb a5       	ldd	r30, Y+43	; 0x2b
    1806:	fc a5       	ldd	r31, Y+44	; 0x2c
    1808:	80 89       	ldd	r24, Z+16	; 0x10
    180a:	91 89       	ldd	r25, Z+17	; 0x11
    180c:	a2 89       	ldd	r26, Z+18	; 0x12
    180e:	b3 89       	ldd	r27, Z+19	; 0x13
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	a1 05       	cpc	r26, r1
    1814:	b1 05       	cpc	r27, r1
    1816:	d1 f1       	breq	.+116    	; 0x188c <Isb_App_Exec+0xcf0>
													{
														Isb_App_DigOut[AppIndex].TimeOnCount--;
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	a1 09       	sbc	r26, r1
    181c:	b1 09       	sbc	r27, r1
    181e:	80 8b       	std	Z+16, r24	; 0x10
    1820:	91 8b       	std	Z+17, r25	; 0x11
    1822:	a2 8b       	std	Z+18, r26	; 0x12
    1824:	b3 8b       	std	Z+19, r27	; 0x13
    1826:	10 e0       	ldi	r17, 0x00	; 0
    1828:	31 c0       	rjmp	.+98     	; 0x188c <Isb_App_Exec+0xcf0>
														Value = FALSE;
													}
												}
												else
												{
													Isb_App_DigOut[AppIndex].TimeOnCount = (Isb_App_DigOut[AppIndex].Cfg4 + Isb_App_DigOut[AppIndex].Cfg5 * 60 + Isb_App_DigOut[AppIndex].Cfg6 * 60 * 60) * 1000 / ISB_APP_DIGOUT_EXECTIME;
    182a:	ab a5       	ldd	r26, Y+43	; 0x2b
    182c:	bc a5       	ldd	r27, Y+44	; 0x2c
    182e:	1c 96       	adiw	r26, 0x0c	; 12
    1830:	8c 91       	ld	r24, X
    1832:	1c 97       	sbiw	r26, 0x0c	; 12
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	20 e1       	ldi	r18, 0x10	; 16
    1838:	3e e0       	ldi	r19, 0x0E	; 14
    183a:	f9 01       	movw	r30, r18
    183c:	8e 9f       	mul	r24, r30
    183e:	90 01       	movw	r18, r0
    1840:	8f 9f       	mul	r24, r31
    1842:	30 0d       	add	r19, r0
    1844:	9e 9f       	mul	r25, r30
    1846:	30 0d       	add	r19, r0
    1848:	11 24       	eor	r1, r1
    184a:	1b 96       	adiw	r26, 0x0b	; 11
    184c:	8c 91       	ld	r24, X
    184e:	1b 97       	sbiw	r26, 0x0b	; 11
    1850:	4c e3       	ldi	r20, 0x3C	; 60
    1852:	84 9f       	mul	r24, r20
    1854:	c0 01       	movw	r24, r0
    1856:	11 24       	eor	r1, r1
    1858:	28 0f       	add	r18, r24
    185a:	39 1f       	adc	r19, r25
    185c:	1a 96       	adiw	r26, 0x0a	; 10
    185e:	8c 91       	ld	r24, X
    1860:	28 0f       	add	r18, r24
    1862:	31 1d       	adc	r19, r1
    1864:	84 e6       	ldi	r24, 0x64	; 100
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	ac 01       	movw	r20, r24
    186a:	24 9f       	mul	r18, r20
    186c:	c0 01       	movw	r24, r0
    186e:	25 9f       	mul	r18, r21
    1870:	90 0d       	add	r25, r0
    1872:	34 9f       	mul	r19, r20
    1874:	90 0d       	add	r25, r0
    1876:	11 24       	eor	r1, r1
    1878:	aa 27       	eor	r26, r26
    187a:	97 fd       	sbrc	r25, 7
    187c:	a0 95       	com	r26
    187e:	ba 2f       	mov	r27, r26
    1880:	eb a5       	ldd	r30, Y+43	; 0x2b
    1882:	fc a5       	ldd	r31, Y+44	; 0x2c
    1884:	80 8b       	std	Z+16, r24	; 0x10
    1886:	91 8b       	std	Z+17, r25	; 0x11
    1888:	a2 8b       	std	Z+18, r26	; 0x12
    188a:	b3 8b       	std	Z+19, r27	; 0x13
												}
											}
										#endif /* ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION_POWERUPDELAY == TRUE */
										#if ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION_POWERDOWNDELAY == TRUE
											if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg3, ISB_APP_DIGOUT_CFG3_TIME_POWERDOWNDELAY_ENABLED))
    188c:	db 01       	movw	r26, r22
    188e:	8c 91       	ld	r24, X
    1890:	83 ff       	sbrs	r24, 3
    1892:	dd c0       	rjmp	.+442    	; 0x1a4e <Isb_App_Exec+0xeb2>
											{
												if (Value == FALSE)
    1894:	11 23       	and	r17, r17
    1896:	09 f0       	breq	.+2      	; 0x189a <Isb_App_Exec+0xcfe>
    1898:	a9 c0       	rjmp	.+338    	; 0x19ec <Isb_App_Exec+0xe50>
												{
													if (Isb_App_DigOut[AppIndex].TimeOffCount != 0)
    189a:	eb a5       	ldd	r30, Y+43	; 0x2b
    189c:	fc a5       	ldd	r31, Y+44	; 0x2c
    189e:	84 89       	ldd	r24, Z+20	; 0x14
    18a0:	95 89       	ldd	r25, Z+21	; 0x15
    18a2:	a6 89       	ldd	r26, Z+22	; 0x16
    18a4:	b7 89       	ldd	r27, Z+23	; 0x17
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	a1 05       	cpc	r26, r1
    18aa:	b1 05       	cpc	r27, r1
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <Isb_App_Exec+0xd14>
    18ae:	cf c0       	rjmp	.+414    	; 0x1a4e <Isb_App_Exec+0xeb2>
													{
														Isb_App_DigOut[AppIndex].TimeOffCount--;
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	a1 09       	sbc	r26, r1
    18b4:	b1 09       	sbc	r27, r1
    18b6:	84 8b       	std	Z+20, r24	; 0x14
    18b8:	95 8b       	std	Z+21, r25	; 0x15
    18ba:	a6 8b       	std	Z+22, r26	; 0x16
    18bc:	b7 8b       	std	Z+23, r27	; 0x17
    18be:	11 e0       	ldi	r17, 0x01	; 1
    18c0:	c6 c0       	rjmp	.+396    	; 0x1a4e <Isb_App_Exec+0xeb2>
										#endif /* ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION_POWERDOWNDELAY == TRUE */
									break;
								#endif /* ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION_POWERUPDELAY == TRUE | ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION_POWERDOWNDELAY == TRUE */
								#if ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION_STAIRCASEFUNCTION == TRUE
									case ISB_APP_DIGOUT_CFG3_TIME_MODE_STAIRCASEFUNCTION:
										if (Value == FALSE)
    18c2:	11 23       	and	r17, r17
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <Isb_App_Exec+0xd2c>
    18c6:	92 c0       	rjmp	.+292    	; 0x19ec <Isb_App_Exec+0xe50>
										{
											if (Isb_App_DigOut[AppIndex].TimeOffCount != 0)
    18c8:	eb a5       	ldd	r30, Y+43	; 0x2b
    18ca:	fc a5       	ldd	r31, Y+44	; 0x2c
    18cc:	84 89       	ldd	r24, Z+20	; 0x14
    18ce:	95 89       	ldd	r25, Z+21	; 0x15
    18d0:	a6 89       	ldd	r26, Z+22	; 0x16
    18d2:	b7 89       	ldd	r27, Z+23	; 0x17
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	a1 05       	cpc	r26, r1
    18d8:	b1 05       	cpc	r27, r1
    18da:	41 f0       	breq	.+16     	; 0x18ec <Isb_App_Exec+0xd50>
											{
												Isb_App_DigOut[AppIndex].TimeOffCount--;
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	a1 09       	sbc	r26, r1
    18e0:	b1 09       	sbc	r27, r1
    18e2:	84 8b       	std	Z+20, r24	; 0x14
    18e4:	95 8b       	std	Z+21, r25	; 0x15
    18e6:	a6 8b       	std	Z+22, r26	; 0x16
    18e8:	b7 8b       	std	Z+23, r27	; 0x17
    18ea:	11 e0       	ldi	r17, 0x01	; 1
												Value = TRUE;
											}
											if ((bit_is_set(Isb_App_DigOut[AppIndex].Cfg3, ISB_APP_DIGOUT_CFG3_TIME_RETRIGGER_ENABLED)) | (Isb_App_DigOut[AppIndex].TimeOnCount == 0))
    18ec:	8c e1       	ldi	r24, 0x1C	; 28
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	2b 81       	ldd	r18, Y+3	; 0x03
    18f2:	3c 81       	ldd	r19, Y+4	; 0x04
    18f4:	28 9f       	mul	r18, r24
    18f6:	f0 01       	movw	r30, r0
    18f8:	29 9f       	mul	r18, r25
    18fa:	f0 0d       	add	r31, r0
    18fc:	38 9f       	mul	r19, r24
    18fe:	f0 0d       	add	r31, r0
    1900:	11 24       	eor	r1, r1
    1902:	e7 53       	subi	r30, 0x37	; 55
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	80 81       	ld	r24, Z
    1908:	ab a5       	ldd	r26, Y+43	; 0x2b
    190a:	bc a5       	ldd	r27, Y+44	; 0x2c
    190c:	50 96       	adiw	r26, 0x10	; 16
    190e:	4d 91       	ld	r20, X+
    1910:	5d 91       	ld	r21, X+
    1912:	6d 91       	ld	r22, X+
    1914:	7c 91       	ld	r23, X
    1916:	53 97       	sbiw	r26, 0x13	; 19
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	84 70       	andi	r24, 0x04	; 4
    191c:	90 70       	andi	r25, 0x00	; 0
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	41 15       	cp	r20, r1
    1924:	51 05       	cpc	r21, r1
    1926:	61 05       	cpc	r22, r1
    1928:	71 05       	cpc	r23, r1
    192a:	11 f4       	brne	.+4      	; 0x1930 <Isb_App_Exec+0xd94>
    192c:	21 e0       	ldi	r18, 0x01	; 1
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	82 2b       	or	r24, r18
    1932:	93 2b       	or	r25, r19
    1934:	89 2b       	or	r24, r25
    1936:	09 f4       	brne	.+2      	; 0x193a <Isb_App_Exec+0xd9e>
    1938:	8a c0       	rjmp	.+276    	; 0x1a4e <Isb_App_Exec+0xeb2>
											{
												if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg3, ISB_APP_DIGOUT_CFG3_TIME_PUMP_ENABLED))
    193a:	80 81       	ld	r24, Z
    193c:	eb a5       	ldd	r30, Y+43	; 0x2b
    193e:	fc a5       	ldd	r31, Y+44	; 0x2c
    1940:	24 85       	ldd	r18, Z+12	; 0x0c
    1942:	e3 85       	ldd	r30, Z+11	; 0x0b
    1944:	ab a5       	ldd	r26, Y+43	; 0x2b
    1946:	bc a5       	ldd	r27, Y+44	; 0x2c
    1948:	1a 96       	adiw	r26, 0x0a	; 10
    194a:	fc 91       	ld	r31, X
    194c:	83 ff       	sbrs	r24, 3
    194e:	26 c0       	rjmp	.+76     	; 0x199c <Isb_App_Exec+0xe00>
												{
													Isb_App_DigOut[AppIndex].TimeOnCount += (Isb_App_DigOut[AppIndex].Cfg4 + Isb_App_DigOut[AppIndex].Cfg5 * 60 + Isb_App_DigOut[AppIndex].Cfg6 * 60 * 60) * 1000 / ISB_APP_DIGOUT_EXECTIME;
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	80 e1       	ldi	r24, 0x10	; 16
    1954:	9e e0       	ldi	r25, 0x0E	; 14
    1956:	d9 01       	movw	r26, r18
    1958:	a8 9f       	mul	r26, r24
    195a:	90 01       	movw	r18, r0
    195c:	a9 9f       	mul	r26, r25
    195e:	30 0d       	add	r19, r0
    1960:	b8 9f       	mul	r27, r24
    1962:	30 0d       	add	r19, r0
    1964:	11 24       	eor	r1, r1
    1966:	8c e3       	ldi	r24, 0x3C	; 60
    1968:	e8 9f       	mul	r30, r24
    196a:	c0 01       	movw	r24, r0
    196c:	11 24       	eor	r1, r1
    196e:	28 0f       	add	r18, r24
    1970:	39 1f       	adc	r19, r25
    1972:	2f 0f       	add	r18, r31
    1974:	31 1d       	adc	r19, r1
    1976:	84 e6       	ldi	r24, 0x64	; 100
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	fc 01       	movw	r30, r24
    197c:	2e 9f       	mul	r18, r30
    197e:	c0 01       	movw	r24, r0
    1980:	2f 9f       	mul	r18, r31
    1982:	90 0d       	add	r25, r0
    1984:	3e 9f       	mul	r19, r30
    1986:	90 0d       	add	r25, r0
    1988:	11 24       	eor	r1, r1
    198a:	aa 27       	eor	r26, r26
    198c:	97 fd       	sbrc	r25, 7
    198e:	a0 95       	com	r26
    1990:	ba 2f       	mov	r27, r26
    1992:	84 0f       	add	r24, r20
    1994:	95 1f       	adc	r25, r21
    1996:	a6 1f       	adc	r26, r22
    1998:	b7 1f       	adc	r27, r23
    199a:	21 c0       	rjmp	.+66     	; 0x19de <Isb_App_Exec+0xe42>
												}
												else
												{
													Isb_App_DigOut[AppIndex].TimeOnCount = (Isb_App_DigOut[AppIndex].Cfg4 + Isb_App_DigOut[AppIndex].Cfg5 * 60 + Isb_App_DigOut[AppIndex].Cfg6 * 60 * 60) * 1000 / ISB_APP_DIGOUT_EXECTIME;
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	80 e1       	ldi	r24, 0x10	; 16
    19a0:	9e e0       	ldi	r25, 0x0E	; 14
    19a2:	a9 01       	movw	r20, r18
    19a4:	48 9f       	mul	r20, r24
    19a6:	90 01       	movw	r18, r0
    19a8:	49 9f       	mul	r20, r25
    19aa:	30 0d       	add	r19, r0
    19ac:	58 9f       	mul	r21, r24
    19ae:	30 0d       	add	r19, r0
    19b0:	11 24       	eor	r1, r1
    19b2:	8c e3       	ldi	r24, 0x3C	; 60
    19b4:	e8 9f       	mul	r30, r24
    19b6:	c0 01       	movw	r24, r0
    19b8:	11 24       	eor	r1, r1
    19ba:	28 0f       	add	r18, r24
    19bc:	39 1f       	adc	r19, r25
    19be:	2f 0f       	add	r18, r31
    19c0:	31 1d       	adc	r19, r1
    19c2:	84 e6       	ldi	r24, 0x64	; 100
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	dc 01       	movw	r26, r24
    19c8:	2a 9f       	mul	r18, r26
    19ca:	c0 01       	movw	r24, r0
    19cc:	2b 9f       	mul	r18, r27
    19ce:	90 0d       	add	r25, r0
    19d0:	3a 9f       	mul	r19, r26
    19d2:	90 0d       	add	r25, r0
    19d4:	11 24       	eor	r1, r1
    19d6:	aa 27       	eor	r26, r26
    19d8:	97 fd       	sbrc	r25, 7
    19da:	a0 95       	com	r26
    19dc:	ba 2f       	mov	r27, r26
    19de:	eb a5       	ldd	r30, Y+43	; 0x2b
    19e0:	fc a5       	ldd	r31, Y+44	; 0x2c
    19e2:	80 8b       	std	Z+16, r24	; 0x10
    19e4:	91 8b       	std	Z+17, r25	; 0x11
    19e6:	a2 8b       	std	Z+18, r26	; 0x12
    19e8:	b3 8b       	std	Z+19, r27	; 0x13
    19ea:	31 c0       	rjmp	.+98     	; 0x1a4e <Isb_App_Exec+0xeb2>
												}
											}
										}
										else
										{
											Isb_App_DigOut[AppIndex].TimeOffCount = (Isb_App_DigOut[AppIndex].Cfg7 + Isb_App_DigOut[AppIndex].Cfg8 * 60 + Isb_App_DigOut[AppIndex].Cfg9 * 60 * 60) * 1000 / ISB_APP_DIGOUT_EXECTIME;
    19ec:	ab a5       	ldd	r26, Y+43	; 0x2b
    19ee:	bc a5       	ldd	r27, Y+44	; 0x2c
    19f0:	1f 96       	adiw	r26, 0x0f	; 15
    19f2:	8c 91       	ld	r24, X
    19f4:	1f 97       	sbiw	r26, 0x0f	; 15
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	20 e1       	ldi	r18, 0x10	; 16
    19fa:	3e e0       	ldi	r19, 0x0E	; 14
    19fc:	f9 01       	movw	r30, r18
    19fe:	8e 9f       	mul	r24, r30
    1a00:	90 01       	movw	r18, r0
    1a02:	8f 9f       	mul	r24, r31
    1a04:	30 0d       	add	r19, r0
    1a06:	9e 9f       	mul	r25, r30
    1a08:	30 0d       	add	r19, r0
    1a0a:	11 24       	eor	r1, r1
    1a0c:	1e 96       	adiw	r26, 0x0e	; 14
    1a0e:	8c 91       	ld	r24, X
    1a10:	1e 97       	sbiw	r26, 0x0e	; 14
    1a12:	4c e3       	ldi	r20, 0x3C	; 60
    1a14:	84 9f       	mul	r24, r20
    1a16:	c0 01       	movw	r24, r0
    1a18:	11 24       	eor	r1, r1
    1a1a:	28 0f       	add	r18, r24
    1a1c:	39 1f       	adc	r19, r25
    1a1e:	1d 96       	adiw	r26, 0x0d	; 13
    1a20:	8c 91       	ld	r24, X
    1a22:	28 0f       	add	r18, r24
    1a24:	31 1d       	adc	r19, r1
    1a26:	84 e6       	ldi	r24, 0x64	; 100
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	ac 01       	movw	r20, r24
    1a2c:	24 9f       	mul	r18, r20
    1a2e:	c0 01       	movw	r24, r0
    1a30:	25 9f       	mul	r18, r21
    1a32:	90 0d       	add	r25, r0
    1a34:	34 9f       	mul	r19, r20
    1a36:	90 0d       	add	r25, r0
    1a38:	11 24       	eor	r1, r1
    1a3a:	aa 27       	eor	r26, r26
    1a3c:	97 fd       	sbrc	r25, 7
    1a3e:	a0 95       	com	r26
    1a40:	ba 2f       	mov	r27, r26
    1a42:	eb a5       	ldd	r30, Y+43	; 0x2b
    1a44:	fc a5       	ldd	r31, Y+44	; 0x2c
    1a46:	84 8b       	std	Z+20, r24	; 0x14
    1a48:	95 8b       	std	Z+21, r25	; 0x15
    1a4a:	a6 8b       	std	Z+22, r26	; 0x16
    1a4c:	b7 8b       	std	Z+23, r27	; 0x17
										break;
								#endif /* ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION_STAIRCASEFUNCTION == TRUE */
								default:
									break;
							}
							if (Isb_App_DigOut[AppIndex].TimeValue != Value)
    1a4e:	ab a5       	ldd	r26, Y+43	; 0x2b
    1a50:	bc a5       	ldd	r27, Y+44	; 0x2c
    1a52:	58 96       	adiw	r26, 0x18	; 24
    1a54:	8c 91       	ld	r24, X
    1a56:	58 97       	sbiw	r26, 0x18	; 24
    1a58:	81 17       	cp	r24, r17
    1a5a:	31 f0       	breq	.+12     	; 0x1a68 <Isb_App_Exec+0xecc>
							{
								Isb_App_DigOut[AppIndex].TimeValue = Value;
    1a5c:	58 96       	adiw	r26, 0x18	; 24
    1a5e:	1c 93       	st	X, r17
    1a60:	58 97       	sbiw	r26, 0x18	; 24
								Isb_App_DigOut[AppIndex].TimeIsChanged = TRUE;
    1a62:	e1 e0       	ldi	r30, 0x01	; 1
    1a64:	59 96       	adiw	r26, 0x19	; 25
    1a66:	ec 93       	st	X, r30
							}
						#endif /* ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION == TRUE */
						// Spezialfunktion
						#if ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE
							if (Isb_Obj[Obj_3].IsChanged == TRUE)
    1a68:	f9 a1       	ldd	r31, Y+33	; 0x21
    1a6a:	6f 2f       	mov	r22, r31
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	fb 01       	movw	r30, r22
    1a70:	83 e0       	ldi	r24, 0x03	; 3
    1a72:	ee 0f       	add	r30, r30
    1a74:	ff 1f       	adc	r31, r31
    1a76:	8a 95       	dec	r24
    1a78:	e1 f7       	brne	.-8      	; 0x1a72 <Isb_App_Exec+0xed6>
    1a7a:	e6 0f       	add	r30, r22
    1a7c:	f7 1f       	adc	r31, r23
    1a7e:	e0 56       	subi	r30, 0x60	; 96
    1a80:	fe 4f       	sbci	r31, 0xFE	; 254
    1a82:	80 85       	ldd	r24, Z+8	; 0x08
    1a84:	81 30       	cpi	r24, 0x01	; 1
    1a86:	09 f0       	breq	.+2      	; 0x1a8a <Isb_App_Exec+0xeee>
    1a88:	d8 c0       	rjmp	.+432    	; 0x1c3a <Isb_App_Exec+0x109e>
							{
								switch (Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_MODE_MASK)
    1a8a:	ab a5       	ldd	r26, Y+43	; 0x2b
    1a8c:	bc a5       	ldd	r27, Y+44	; 0x2c
    1a8e:	5a 96       	adiw	r26, 0x1a	; 26
    1a90:	8c 91       	ld	r24, X
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	c9 01       	movw	r24, r18
    1a98:	83 70       	andi	r24, 0x03	; 3
    1a9a:	90 70       	andi	r25, 0x00	; 0
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	21 f0       	breq	.+8      	; 0x1aaa <Isb_App_Exec+0xf0e>
    1aa2:	02 97       	sbiw	r24, 0x02	; 2
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <Isb_App_Exec+0xf0c>
    1aa6:	bb c0       	rjmp	.+374    	; 0x1c1e <Isb_App_Exec+0x1082>
    1aa8:	72 c0       	rjmp	.+228    	; 0x1b8e <Isb_App_Exec+0xff2>
								{
									#if ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION_BLOCKING == TRUE
										// Sperrfunktion
										case ISB_APP_DIGOUT_CFG10_SPECIAL_MODE_BLOCKINGFUNCTION:
											if (((Isb_Obj[Obj_3].Data[0] == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg10, ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_INVERTED))) | ((Isb_Obj[Obj_3].Data[0] == 0) & (bit_is_set(Isb_App_DigOut[AppIndex].Cfg10, ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_INVERTED))))
    1aaa:	43 81       	ldd	r20, Z+3	; 0x03
    1aac:	8c e1       	ldi	r24, 0x1C	; 28
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	ab 81       	ldd	r26, Y+3	; 0x03
    1ab2:	bc 81       	ldd	r27, Y+4	; 0x04
    1ab4:	a8 9f       	mul	r26, r24
    1ab6:	f0 01       	movw	r30, r0
    1ab8:	a9 9f       	mul	r26, r25
    1aba:	f0 0d       	add	r31, r0
    1abc:	b8 9f       	mul	r27, r24
    1abe:	f0 0d       	add	r31, r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	e6 52       	subi	r30, 0x26	; 38
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	80 81       	ld	r24, Z
    1ac8:	e0 81       	ld	r30, Z
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	41 30       	cpi	r20, 0x01	; 1
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <Isb_App_Exec+0xf36>
    1ad0:	91 e0       	ldi	r25, 0x01	; 1
    1ad2:	86 95       	lsr	r24
    1ad4:	86 95       	lsr	r24
    1ad6:	80 95       	com	r24
    1ad8:	89 23       	and	r24, r25
    1ada:	e8 2f       	mov	r30, r24
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	ef 2b       	or	r30, r31
    1ae0:	41 f1       	breq	.+80     	; 0x1b32 <Isb_App_Exec+0xf96>
											{
												// Activiert
												// Verhalten zu Beginn der Sperrfunktion
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_ON_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_ON_NONE)
    1ae2:	28 71       	andi	r18, 0x18	; 24
    1ae4:	30 70       	andi	r19, 0x00	; 0
    1ae6:	23 2b       	or	r18, r19
    1ae8:	21 f4       	brne	.+8      	; 0x1af2 <Isb_App_Exec+0xf56>
												{
													// -> keine Änderung des Schaltzustandes
													Isb_App_DigOut[AppIndex].Special_Action = 11;
    1aea:	8b e0       	ldi	r24, 0x0B	; 11
    1aec:	eb a5       	ldd	r30, Y+43	; 0x2b
    1aee:	fc a5       	ldd	r31, Y+44	; 0x2c
    1af0:	83 8f       	std	Z+27, r24	; 0x1b
												}
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_ON_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_ON_OFF)
    1af2:	ab a5       	ldd	r26, Y+43	; 0x2b
    1af4:	bc a5       	ldd	r27, Y+44	; 0x2c
    1af6:	5a 96       	adiw	r26, 0x1a	; 26
    1af8:	8c 91       	ld	r24, X
    1afa:	5a 97       	sbiw	r26, 0x1a	; 26
    1afc:	88 71       	andi	r24, 0x18	; 24
    1afe:	88 30       	cpi	r24, 0x08	; 8
    1b00:	19 f4       	brne	.+6      	; 0x1b08 <Isb_App_Exec+0xf6c>
												{
													// -> ausschalten
													Isb_App_DigOut[AppIndex].Special_Action = 12;
    1b02:	8c e0       	ldi	r24, 0x0C	; 12
    1b04:	5b 96       	adiw	r26, 0x1b	; 27
    1b06:	8c 93       	st	X, r24
												}
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_ON_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_ON_ON)
    1b08:	eb a5       	ldd	r30, Y+43	; 0x2b
    1b0a:	fc a5       	ldd	r31, Y+44	; 0x2c
    1b0c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b0e:	88 71       	andi	r24, 0x18	; 24
    1b10:	80 31       	cpi	r24, 0x10	; 16
    1b12:	11 f4       	brne	.+4      	; 0x1b18 <Isb_App_Exec+0xf7c>
												{
													// -> einschalten
													Isb_App_DigOut[AppIndex].Special_Action = 13;
    1b14:	8d e0       	ldi	r24, 0x0D	; 13
    1b16:	83 8f       	std	Z+27, r24	; 0x1b
												}
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_ON_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_ON_BLINK)
    1b18:	ab a5       	ldd	r26, Y+43	; 0x2b
    1b1a:	bc a5       	ldd	r27, Y+44	; 0x2c
    1b1c:	5a 96       	adiw	r26, 0x1a	; 26
    1b1e:	8c 91       	ld	r24, X
    1b20:	5a 97       	sbiw	r26, 0x1a	; 26
    1b22:	88 71       	andi	r24, 0x18	; 24
    1b24:	88 31       	cpi	r24, 0x18	; 24
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <Isb_App_Exec+0xf8e>
    1b28:	7d c0       	rjmp	.+250    	; 0x1c24 <Isb_App_Exec+0x1088>
												{
													// -> blinken
													Isb_App_DigOut[AppIndex].Special_Action = 14;
    1b2a:	8e e0       	ldi	r24, 0x0E	; 14
    1b2c:	5b 96       	adiw	r26, 0x1b	; 27
    1b2e:	8c 93       	st	X, r24
    1b30:	79 c0       	rjmp	.+242    	; 0x1c24 <Isb_App_Exec+0x1088>
											}
											else
											{
												// Deaktiviert
												// Verhalten am Ende der Sperrfunktion
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_OFF_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_OFF_NONE)
    1b32:	82 2f       	mov	r24, r18
    1b34:	80 7e       	andi	r24, 0xE0	; 224
    1b36:	21 f4       	brne	.+8      	; 0x1b40 <Isb_App_Exec+0xfa4>
												{
													// -> keine Änderung des Schaltzustandes
													Isb_App_DigOut[AppIndex].Special_Action = 01;
    1b38:	21 e0       	ldi	r18, 0x01	; 1
    1b3a:	eb a5       	ldd	r30, Y+43	; 0x2b
    1b3c:	fc a5       	ldd	r31, Y+44	; 0x2c
    1b3e:	23 8f       	std	Z+27, r18	; 0x1b
												}
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_OFF_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_OFF_OFF)
    1b40:	ab a5       	ldd	r26, Y+43	; 0x2b
    1b42:	bc a5       	ldd	r27, Y+44	; 0x2c
    1b44:	5a 96       	adiw	r26, 0x1a	; 26
    1b46:	8c 91       	ld	r24, X
    1b48:	5a 97       	sbiw	r26, 0x1a	; 26
    1b4a:	80 7e       	andi	r24, 0xE0	; 224
    1b4c:	80 32       	cpi	r24, 0x20	; 32
    1b4e:	19 f4       	brne	.+6      	; 0x1b56 <Isb_App_Exec+0xfba>
												{
													// -> ausschalten
													Isb_App_DigOut[AppIndex].Special_Action = 02;
    1b50:	82 e0       	ldi	r24, 0x02	; 2
    1b52:	5b 96       	adiw	r26, 0x1b	; 27
    1b54:	8c 93       	st	X, r24
												}
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_OFF_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_OFF_ON)
    1b56:	eb a5       	ldd	r30, Y+43	; 0x2b
    1b58:	fc a5       	ldd	r31, Y+44	; 0x2c
    1b5a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b5c:	80 7e       	andi	r24, 0xE0	; 224
    1b5e:	80 34       	cpi	r24, 0x40	; 64
    1b60:	11 f4       	brne	.+4      	; 0x1b66 <Isb_App_Exec+0xfca>
												{
													// -> einschalten
													Isb_App_DigOut[AppIndex].Special_Action = 03;
    1b62:	83 e0       	ldi	r24, 0x03	; 3
    1b64:	83 8f       	std	Z+27, r24	; 0x1b
												}
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_OFF_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_OFFF_REAL)
    1b66:	ab a5       	ldd	r26, Y+43	; 0x2b
    1b68:	bc a5       	ldd	r27, Y+44	; 0x2c
    1b6a:	5a 96       	adiw	r26, 0x1a	; 26
    1b6c:	8c 91       	ld	r24, X
    1b6e:	5a 97       	sbiw	r26, 0x1a	; 26
    1b70:	80 7e       	andi	r24, 0xE0	; 224
    1b72:	80 36       	cpi	r24, 0x60	; 96
    1b74:	11 f4       	brne	.+4      	; 0x1b7a <Isb_App_Exec+0xfde>
												{
													// -> nachgeführten Zustand einstellen
													Isb_App_DigOut[AppIndex].Special_Action = 00;
    1b76:	5b 96       	adiw	r26, 0x1b	; 27
    1b78:	1c 92       	st	X, r1
												}
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_OFF_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_OFF_BLINK)
    1b7a:	eb a5       	ldd	r30, Y+43	; 0x2b
    1b7c:	fc a5       	ldd	r31, Y+44	; 0x2c
    1b7e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b80:	80 7e       	andi	r24, 0xE0	; 224
    1b82:	80 38       	cpi	r24, 0x80	; 128
    1b84:	09 f0       	breq	.+2      	; 0x1b88 <Isb_App_Exec+0xfec>
    1b86:	4e c0       	rjmp	.+156    	; 0x1c24 <Isb_App_Exec+0x1088>
												{
													// -> blinken
													Isb_App_DigOut[AppIndex].Special_Action = 04;
    1b88:	84 e0       	ldi	r24, 0x04	; 4
    1b8a:	83 8f       	std	Z+27, r24	; 0x1b
    1b8c:	4b c0       	rjmp	.+150    	; 0x1c24 <Isb_App_Exec+0x1088>
											break;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION_BLOCKING == TRUE */
									#if ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION_BONDAGE == TRUE
										// Zwangsstellungsfunktion
										case ISB_APP_DIGOUT_CFG10_SPECIAL_MODE_BONDAGEFUNCTION:
											if (((Isb_Obj[Obj_3].Data[0] == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg10, ISB_APP_DIGOUT_CFG10_SPECIAL_BONDAGEFUNCTION_INVERTED))) | ((Isb_Obj[Obj_3].Data[0] == 0) & (bit_is_set(Isb_App_DigOut[AppIndex].Cfg10, ISB_APP_DIGOUT_CFG10_SPECIAL_BONDAGEFUNCTION_INVERTED))))
    1b8e:	43 81       	ldd	r20, Z+3	; 0x03
    1b90:	8c e1       	ldi	r24, 0x1C	; 28
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	ab 81       	ldd	r26, Y+3	; 0x03
    1b96:	bc 81       	ldd	r27, Y+4	; 0x04
    1b98:	a8 9f       	mul	r26, r24
    1b9a:	f0 01       	movw	r30, r0
    1b9c:	a9 9f       	mul	r26, r25
    1b9e:	f0 0d       	add	r31, r0
    1ba0:	b8 9f       	mul	r27, r24
    1ba2:	f0 0d       	add	r31, r0
    1ba4:	11 24       	eor	r1, r1
    1ba6:	e6 52       	subi	r30, 0x26	; 38
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	80 81       	ld	r24, Z
    1bac:	e0 81       	ld	r30, Z
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	41 30       	cpi	r20, 0x01	; 1
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <Isb_App_Exec+0x101a>
    1bb4:	91 e0       	ldi	r25, 0x01	; 1
    1bb6:	86 95       	lsr	r24
    1bb8:	86 95       	lsr	r24
    1bba:	80 95       	com	r24
    1bbc:	89 23       	and	r24, r25
    1bbe:	e8 2f       	mov	r30, r24
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	ef 2b       	or	r30, r31
    1bc4:	29 f0       	breq	.+10     	; 0x1bd0 <Isb_App_Exec+0x1034>
											{
												// Aktiviert
												// Verhalten am Anfang der Zwangsstellung
												// -> keine Änderung des Schaltzustandes
												Isb_App_DigOut[AppIndex].Special_Action = 01;
    1bc6:	21 e0       	ldi	r18, 0x01	; 1
    1bc8:	eb a5       	ldd	r30, Y+43	; 0x2b
    1bca:	fc a5       	ldd	r31, Y+44	; 0x2c
    1bcc:	23 8f       	std	Z+27, r18	; 0x1b
    1bce:	2a c0       	rjmp	.+84     	; 0x1c24 <Isb_App_Exec+0x1088>
											}
											else
											{
												// Deaktiviert
												// Verhalten am Ende der Zwangsstellung
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BONDAGEFUNCTION_ACTION_OFF_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BONDAGEFUNCTION_ACTION_OFF_NONE)
    1bd0:	28 71       	andi	r18, 0x18	; 24
    1bd2:	30 70       	andi	r19, 0x00	; 0
    1bd4:	23 2b       	or	r18, r19
    1bd6:	29 f4       	brne	.+10     	; 0x1be2 <Isb_App_Exec+0x1046>
												{
													// -> keine Änderung des Schaltzustandes
													Isb_App_DigOut[AppIndex].Special_Action = 01;
    1bd8:	e1 e0       	ldi	r30, 0x01	; 1
    1bda:	ab a5       	ldd	r26, Y+43	; 0x2b
    1bdc:	bc a5       	ldd	r27, Y+44	; 0x2c
    1bde:	5b 96       	adiw	r26, 0x1b	; 27
    1be0:	ec 93       	st	X, r30
												}
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BONDAGEFUNCTION_ACTION_OFF_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BONDAGEFUNCTION_ACTION_OFF_OFF)
    1be2:	ab a5       	ldd	r26, Y+43	; 0x2b
    1be4:	bc a5       	ldd	r27, Y+44	; 0x2c
    1be6:	5a 96       	adiw	r26, 0x1a	; 26
    1be8:	8c 91       	ld	r24, X
    1bea:	5a 97       	sbiw	r26, 0x1a	; 26
    1bec:	88 71       	andi	r24, 0x18	; 24
    1bee:	88 30       	cpi	r24, 0x08	; 8
    1bf0:	19 f4       	brne	.+6      	; 0x1bf8 <Isb_App_Exec+0x105c>
												{
													// -> ausschalten
													Isb_App_DigOut[AppIndex].Special_Action = 02;
    1bf2:	82 e0       	ldi	r24, 0x02	; 2
    1bf4:	5b 96       	adiw	r26, 0x1b	; 27
    1bf6:	8c 93       	st	X, r24
												}
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BONDAGEFUNCTION_ACTION_OFF_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BONDAGEFUNCTION_ACTION_OFF_ON)
    1bf8:	eb a5       	ldd	r30, Y+43	; 0x2b
    1bfa:	fc a5       	ldd	r31, Y+44	; 0x2c
    1bfc:	82 8d       	ldd	r24, Z+26	; 0x1a
    1bfe:	88 71       	andi	r24, 0x18	; 24
    1c00:	80 31       	cpi	r24, 0x10	; 16
    1c02:	11 f4       	brne	.+4      	; 0x1c08 <Isb_App_Exec+0x106c>
												{
													// -> einschalten
													Isb_App_DigOut[AppIndex].Special_Action = 03;
    1c04:	83 e0       	ldi	r24, 0x03	; 3
    1c06:	83 8f       	std	Z+27, r24	; 0x1b
												}
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BONDAGEFUNCTION_ACTION_OFF_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BONDAGEFUNCTION_ACTION_OFF_REAL)
    1c08:	ab a5       	ldd	r26, Y+43	; 0x2b
    1c0a:	bc a5       	ldd	r27, Y+44	; 0x2c
    1c0c:	5a 96       	adiw	r26, 0x1a	; 26
    1c0e:	8c 91       	ld	r24, X
    1c10:	5a 97       	sbiw	r26, 0x1a	; 26
    1c12:	88 71       	andi	r24, 0x18	; 24
    1c14:	88 31       	cpi	r24, 0x18	; 24
    1c16:	31 f4       	brne	.+12     	; 0x1c24 <Isb_App_Exec+0x1088>
												{
													// -> nachgeführten Zustand einstellen
													Isb_App_DigOut[AppIndex].Special_Action = 00;
    1c18:	5b 96       	adiw	r26, 0x1b	; 27
    1c1a:	1c 92       	st	X, r1
    1c1c:	03 c0       	rjmp	.+6      	; 0x1c24 <Isb_App_Exec+0x1088>
												}
											}
											break;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION_BONDAGE == TRUE */
									default:
										Isb_App_DigOut[AppIndex].Special_Action = 00;
    1c1e:	eb a5       	ldd	r30, Y+43	; 0x2b
    1c20:	fc a5       	ldd	r31, Y+44	; 0x2c
    1c22:	13 8e       	std	Z+27, r1	; 0x1b
										break;
								}
								Isb_Obj[Obj_3].IsChanged = FALSE;
    1c24:	fb 01       	movw	r30, r22
    1c26:	b3 e0       	ldi	r27, 0x03	; 3
    1c28:	ee 0f       	add	r30, r30
    1c2a:	ff 1f       	adc	r31, r31
    1c2c:	ba 95       	dec	r27
    1c2e:	e1 f7       	brne	.-8      	; 0x1c28 <Isb_App_Exec+0x108c>
    1c30:	e6 0f       	add	r30, r22
    1c32:	f7 1f       	adc	r31, r23
    1c34:	e0 56       	subi	r30, 0x60	; 96
    1c36:	fe 4f       	sbci	r31, 0xFE	; 254
    1c38:	10 86       	std	Z+8, r1	; 0x08
							}
							switch (Isb_App_DigOut[AppIndex].Special_Action)
    1c3a:	ab a5       	ldd	r26, Y+43	; 0x2b
    1c3c:	bc a5       	ldd	r27, Y+44	; 0x2c
    1c3e:	5b 96       	adiw	r26, 0x1b	; 27
    1c40:	8c 91       	ld	r24, X
    1c42:	84 30       	cpi	r24, 0x04	; 4
    1c44:	69 f1       	breq	.+90     	; 0x1ca0 <Isb_App_Exec+0x1104>
    1c46:	85 30       	cpi	r24, 0x05	; 5
    1c48:	40 f4       	brcc	.+16     	; 0x1c5a <Isb_App_Exec+0x10be>
    1c4a:	82 30       	cpi	r24, 0x02	; 2
    1c4c:	c1 f0       	breq	.+48     	; 0x1c7e <Isb_App_Exec+0x10e2>
    1c4e:	83 30       	cpi	r24, 0x03	; 3
    1c50:	f0 f4       	brcc	.+60     	; 0x1c8e <Isb_App_Exec+0x10f2>
    1c52:	81 30       	cpi	r24, 0x01	; 1
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <Isb_App_Exec+0x10bc>
    1c56:	49 c0       	rjmp	.+146    	; 0x1cea <Isb_App_Exec+0x114e>
    1c58:	0d c0       	rjmp	.+26     	; 0x1c74 <Isb_App_Exec+0x10d8>
    1c5a:	8c 30       	cpi	r24, 0x0C	; 12
    1c5c:	79 f1       	breq	.+94     	; 0x1cbc <Isb_App_Exec+0x1120>
    1c5e:	8d 30       	cpi	r24, 0x0D	; 13
    1c60:	20 f4       	brcc	.+8      	; 0x1c6a <Isb_App_Exec+0x10ce>
    1c62:	8b 30       	cpi	r24, 0x0B	; 11
    1c64:	09 f0       	breq	.+2      	; 0x1c68 <Isb_App_Exec+0x10cc>
    1c66:	41 c0       	rjmp	.+130    	; 0x1cea <Isb_App_Exec+0x114e>
    1c68:	21 c0       	rjmp	.+66     	; 0x1cac <Isb_App_Exec+0x1110>
    1c6a:	8d 30       	cpi	r24, 0x0D	; 13
    1c6c:	79 f1       	breq	.+94     	; 0x1ccc <Isb_App_Exec+0x1130>
    1c6e:	8e 30       	cpi	r24, 0x0E	; 14
    1c70:	e1 f5       	brne	.+120    	; 0x1cea <Isb_App_Exec+0x114e>
    1c72:	36 c0       	rjmp	.+108    	; 0x1ce0 <Isb_App_Exec+0x1144>
							{
								case 01:
									//  Ende - keine Änderung des Schaltzustandes
									Value = Isb_App_DigOut[AppIndex].Value;
    1c74:	eb a5       	ldd	r30, Y+43	; 0x2b
    1c76:	fc a5       	ldd	r31, Y+44	; 0x2c
    1c78:	13 81       	ldd	r17, Z+3	; 0x03
									IsChanged = Isb_App_DigOut[AppIndex].IsChanged;
    1c7a:	04 81       	ldd	r16, Z+4	; 0x04
    1c7c:	36 c0       	rjmp	.+108    	; 0x1cea <Isb_App_Exec+0x114e>
									break;
								case 02:
									// Ende - ausschalten
									if (Value != FALSE)
    1c7e:	11 11       	cpse	r17, r1
    1c80:	01 e0       	ldi	r16, 0x01	; 1
									{
										Value = FALSE;
										IsChanged = TRUE;
									}
									Isb_App_DigOut[AppIndex].Special_Action = 01;
    1c82:	e1 e0       	ldi	r30, 0x01	; 1
    1c84:	ab a5       	ldd	r26, Y+43	; 0x2b
    1c86:	bc a5       	ldd	r27, Y+44	; 0x2c
    1c88:	5b 96       	adiw	r26, 0x1b	; 27
    1c8a:	ec 93       	st	X, r30
    1c8c:	1d c0       	rjmp	.+58     	; 0x1cc8 <Isb_App_Exec+0x112c>
									break;
								case 03:
									// Ende - einschalten
									if (Value != TRUE)
    1c8e:	11 30       	cpi	r17, 0x01	; 1
    1c90:	09 f0       	breq	.+2      	; 0x1c94 <Isb_App_Exec+0x10f8>
    1c92:	01 e0       	ldi	r16, 0x01	; 1
									{
										Value = TRUE;
										IsChanged = TRUE;
									}
									Isb_App_DigOut[AppIndex].Special_Action = 01;
    1c94:	e1 e0       	ldi	r30, 0x01	; 1
    1c96:	ab a5       	ldd	r26, Y+43	; 0x2b
    1c98:	bc a5       	ldd	r27, Y+44	; 0x2c
    1c9a:	5b 96       	adiw	r26, 0x1b	; 27
    1c9c:	ec 93       	st	X, r30
    1c9e:	1e c0       	rjmp	.+60     	; 0x1cdc <Isb_App_Exec+0x1140>
//									if (Value != Blinker_Value)
//									{
//										Value = Blinker_Value;
										IsChanged = TRUE;
//									}
									Isb_App_DigOut[AppIndex].Special_Action = 01;
    1ca0:	e1 e0       	ldi	r30, 0x01	; 1
    1ca2:	ab a5       	ldd	r26, Y+43	; 0x2b
    1ca4:	bc a5       	ldd	r27, Y+44	; 0x2c
    1ca6:	5b 96       	adiw	r26, 0x1b	; 27
    1ca8:	ec 93       	st	X, r30
    1caa:	1e c0       	rjmp	.+60     	; 0x1ce8 <Isb_App_Exec+0x114c>
									break;
								case 11:
									//  Beginn - keine Änderung des Schaltzustandes
									Value = Isb_App_DigOut[AppIndex].Value;
    1cac:	ab a5       	ldd	r26, Y+43	; 0x2b
    1cae:	bc a5       	ldd	r27, Y+44	; 0x2c
    1cb0:	13 96       	adiw	r26, 0x03	; 3
    1cb2:	1c 91       	ld	r17, X
    1cb4:	13 97       	sbiw	r26, 0x03	; 3
									IsChanged = Isb_App_DigOut[AppIndex].IsChanged;
    1cb6:	14 96       	adiw	r26, 0x04	; 4
    1cb8:	0c 91       	ld	r16, X
    1cba:	17 c0       	rjmp	.+46     	; 0x1cea <Isb_App_Exec+0x114e>
									break;
								case 12:
									// Beginn - ausschalten
									if (Value != FALSE)
    1cbc:	11 11       	cpse	r17, r1
    1cbe:	01 e0       	ldi	r16, 0x01	; 1
									{
										Value = FALSE;
										IsChanged = TRUE;
									}
									Isb_App_DigOut[AppIndex].Special_Action = 11;
    1cc0:	8b e0       	ldi	r24, 0x0B	; 11
    1cc2:	eb a5       	ldd	r30, Y+43	; 0x2b
    1cc4:	fc a5       	ldd	r31, Y+44	; 0x2c
    1cc6:	83 8f       	std	Z+27, r24	; 0x1b
    1cc8:	10 e0       	ldi	r17, 0x00	; 0
    1cca:	0f c0       	rjmp	.+30     	; 0x1cea <Isb_App_Exec+0x114e>
									break;
								case 13:
									// Beginn - einschalten
									if (Value != TRUE)
    1ccc:	11 30       	cpi	r17, 0x01	; 1
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <Isb_App_Exec+0x1136>
    1cd0:	01 e0       	ldi	r16, 0x01	; 1
									{
										Value = TRUE;
										IsChanged = TRUE;
									}
									Isb_App_DigOut[AppIndex].Special_Action = 11;
    1cd2:	8b e0       	ldi	r24, 0x0B	; 11
    1cd4:	ab a5       	ldd	r26, Y+43	; 0x2b
    1cd6:	bc a5       	ldd	r27, Y+44	; 0x2c
    1cd8:	5b 96       	adiw	r26, 0x1b	; 27
    1cda:	8c 93       	st	X, r24
    1cdc:	11 e0       	ldi	r17, 0x01	; 1
    1cde:	05 c0       	rjmp	.+10     	; 0x1cea <Isb_App_Exec+0x114e>
//									if (Value != Blinker_Value)
//									{
//										Value = Blinker_Value;
										IsChanged = TRUE;
//									}
									Isb_App_DigOut[AppIndex].Special_Action = 11;
    1ce0:	8b e0       	ldi	r24, 0x0B	; 11
    1ce2:	eb a5       	ldd	r30, Y+43	; 0x2b
    1ce4:	fc a5       	ldd	r31, Y+44	; 0x2c
    1ce6:	83 8f       	std	Z+27, r24	; 0x1b
    1ce8:	01 e0       	ldi	r16, 0x01	; 1
									// nachgeführten Zustand einstellen
									break;
							}
						#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
						// Ausgang
						Isb_App_DigOut[AppIndex].Value = Value;
    1cea:	ab a5       	ldd	r26, Y+43	; 0x2b
    1cec:	bc a5       	ldd	r27, Y+44	; 0x2c
    1cee:	13 96       	adiw	r26, 0x03	; 3
    1cf0:	1c 93       	st	X, r17
    1cf2:	13 97       	sbiw	r26, 0x03	; 3
						Isb_App_DigOut[AppIndex].IsChanged = IsChanged;
    1cf4:	14 96       	adiw	r26, 0x04	; 4
    1cf6:	0c 93       	st	X, r16
						uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigOut_Pin0_Array[AppIndex]);
    1cf8:	eb 81       	ldd	r30, Y+3	; 0x03
    1cfa:	fc 81       	ldd	r31, Y+4	; 0x04
    1cfc:	e4 56       	subi	r30, 0x64	; 100
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	d4 90       	lpm	r13, Z+
						#if (ISB_APP_DIGOUT_DESTINATION_FEATURE_SSR == TRUE) | (ISB_APP_DIGOUT_FEATURE_RESULT == TRUE)
							uint8_t Pin1 = pgm_read_byte(&pgmIsb_App_DigOut_Pin1_Array[AppIndex]);
    1d02:	eb 81       	ldd	r30, Y+3	; 0x03
    1d04:	fc 81       	ldd	r31, Y+4	; 0x04
    1d06:	ec 55       	subi	r30, 0x5C	; 92
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	c4 90       	lpm	r12, Z+
						#endif /* (ISB_APP_DIGOUT_DESTINATION_FEATURE_SSR == TRUE) | (ISB_APP_DIGOUT_FEATURE_RESULT == TRUE) */
						switch (Isb_App_DigOut[AppIndex].Cfg0 & ISB_APP_DIGOUT_CFG0_OPERATION_MASK)
    1d0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d10:	80 81       	ld	r24, Z
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	87 70       	andi	r24, 0x07	; 7
    1d16:	90 70       	andi	r25, 0x00	; 0
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	21 f0       	breq	.+8      	; 0x1d24 <Isb_App_Exec+0x1188>
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	09 f0       	breq	.+2      	; 0x1d22 <Isb_App_Exec+0x1186>
    1d20:	eb c0       	rjmp	.+470    	; 0x1ef8 <Isb_App_Exec+0x135c>
    1d22:	45 c0       	rjmp	.+138    	; 0x1dae <Isb_App_Exec+0x1212>
						{
							#if ISB_APP_DIGOUT_DESTINATION_FEATURE_RELAIS == TRUE
								case ISB_APP_DIGOUT_CFG0_OPERATION_STD:
									if (Isb_App_DigOut[AppIndex].IsChanged == TRUE)
    1d24:	01 30       	cpi	r16, 0x01	; 1
    1d26:	09 f0       	breq	.+2      	; 0x1d2a <Isb_App_Exec+0x118e>
    1d28:	e7 c0       	rjmp	.+462    	; 0x1ef8 <Isb_App_Exec+0x135c>
									{
										if (bit_is_set(Isb_App_DigOut[AppIndex].Value, 0))
    1d2a:	8c e1       	ldi	r24, 0x1C	; 28
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d30:	3c 81       	ldd	r19, Y+4	; 0x04
    1d32:	28 9f       	mul	r18, r24
    1d34:	a0 01       	movw	r20, r0
    1d36:	29 9f       	mul	r18, r25
    1d38:	50 0d       	add	r21, r0
    1d3a:	38 9f       	mul	r19, r24
    1d3c:	50 0d       	add	r21, r0
    1d3e:	11 24       	eor	r1, r1
    1d40:	fa 01       	movw	r30, r20
    1d42:	ed 53       	subi	r30, 0x3D	; 61
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	80 81       	ld	r24, Z
    1d48:	2d 2d       	mov	r18, r13
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	80 ff       	sbrs	r24, 0
    1d4e:	12 c0       	rjmp	.+36     	; 0x1d74 <Isb_App_Exec+0x11d8>
										{
											uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
    1d50:	28 73       	andi	r18, 0x38	; 56
    1d52:	30 70       	andi	r19, 0x00	; 0
    1d54:	a3 e0       	ldi	r26, 0x03	; 3
    1d56:	35 95       	asr	r19
    1d58:	27 95       	ror	r18
    1d5a:	aa 95       	dec	r26
    1d5c:	e1 f7       	brne	.-8      	; 0x1d56 <Isb_App_Exec+0x11ba>
											uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
											if (Port != 0)
    1d5e:	22 23       	and	r18, r18
    1d60:	09 f1       	breq	.+66     	; 0x1da4 <Isb_App_Exec+0x1208>
									if (Isb_App_DigOut[AppIndex].IsChanged == TRUE)
									{
										if (bit_is_set(Isb_App_DigOut[AppIndex].Value, 0))
										{
											uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
											uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
    1d62:	6d 2d       	mov	r22, r13
    1d64:	67 70       	andi	r22, 0x07	; 7
											if (Port != 0)
											{
												if (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN0_INVERTED))
    1d66:	fa 01       	movw	r30, r20
    1d68:	e0 54       	subi	r30, 0x40	; 64
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	80 81       	ld	r24, Z
    1d6e:	84 fd       	sbrc	r24, 4
    1d70:	12 c0       	rjmp	.+36     	; 0x1d96 <Isb_App_Exec+0x11fa>
    1d72:	14 c0       	rjmp	.+40     	; 0x1d9c <Isb_App_Exec+0x1200>
												}
											}
										}
										else
										{
											uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
    1d74:	28 73       	andi	r18, 0x38	; 56
    1d76:	30 70       	andi	r19, 0x00	; 0
    1d78:	f3 e0       	ldi	r31, 0x03	; 3
    1d7a:	35 95       	asr	r19
    1d7c:	27 95       	ror	r18
    1d7e:	fa 95       	dec	r31
    1d80:	e1 f7       	brne	.-8      	; 0x1d7a <Isb_App_Exec+0x11de>
											uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
											if (Port != 0)
    1d82:	22 23       	and	r18, r18
    1d84:	79 f0       	breq	.+30     	; 0x1da4 <Isb_App_Exec+0x1208>
											}
										}
										else
										{
											uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
											uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
    1d86:	6d 2d       	mov	r22, r13
    1d88:	67 70       	andi	r22, 0x07	; 7
											if (Port != 0)
											{
												if (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN0_INVERTED))
    1d8a:	fa 01       	movw	r30, r20
    1d8c:	e0 54       	subi	r30, 0x40	; 64
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	80 81       	ld	r24, Z
    1d92:	84 fd       	sbrc	r24, 4
    1d94:	03 c0       	rjmp	.+6      	; 0x1d9c <Isb_App_Exec+0x1200>
												{
													Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_HIGH);
    1d96:	82 2f       	mov	r24, r18
    1d98:	43 e0       	ldi	r20, 0x03	; 3
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <Isb_App_Exec+0x1204>
												}
												else
												{
													Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_LOW);
    1d9c:	82 2f       	mov	r24, r18
    1d9e:	41 e0       	ldi	r20, 0x01	; 1
    1da0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>
												}
											}
										}
										Isb_App_DigOut[AppIndex].IsChanged = FALSE;
    1da4:	ab a5       	ldd	r26, Y+43	; 0x2b
    1da6:	bc a5       	ldd	r27, Y+44	; 0x2c
    1da8:	14 96       	adiw	r26, 0x04	; 4
    1daa:	1c 92       	st	X, r1
    1dac:	a5 c0       	rjmp	.+330    	; 0x1ef8 <Isb_App_Exec+0x135c>
									}
									break;
							#endif /* ISB_APP_DIGOUT_DESTINATION_FEATURE_RELAIS == TRUE */
							#if ISB_APP_DIGOUT_DESTINATION_FEATURE_SSR == TRUE
								case ISB_APP_DIGOUT_CFG0_OPERATION_SSR:
									if (Isb_App_DigOut[AppIndex].IsChanged == TRUE)
    1dae:	01 30       	cpi	r16, 0x01	; 1
    1db0:	19 f5       	brne	.+70     	; 0x1df8 <Isb_App_Exec+0x125c>
									{
										if (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN1_ENABLED))
    1db2:	8c e1       	ldi	r24, 0x1C	; 28
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	2b 81       	ldd	r18, Y+3	; 0x03
    1db8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dba:	28 9f       	mul	r18, r24
    1dbc:	f0 01       	movw	r30, r0
    1dbe:	29 9f       	mul	r18, r25
    1dc0:	f0 0d       	add	r31, r0
    1dc2:	38 9f       	mul	r19, r24
    1dc4:	f0 0d       	add	r31, r0
    1dc6:	11 24       	eor	r1, r1
    1dc8:	e0 54       	subi	r30, 0x40	; 64
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	80 81       	ld	r24, Z
    1dce:	85 fd       	sbrc	r24, 5
    1dd0:	09 c0       	rjmp	.+18     	; 0x1de4 <Isb_App_Exec+0x1248>
										{
											Isb_App_DigOut[AppIndex].Counter = 1000 / ISB_APP_DIGOUT_EXECTIME;
    1dd2:	84 e6       	ldi	r24, 0x64	; 100
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	ab a5       	ldd	r26, Y+43	; 0x2b
    1dd8:	bc a5       	ldd	r27, Y+44	; 0x2c
    1dda:	12 96       	adiw	r26, 0x02	; 2
    1ddc:	9c 93       	st	X, r25
    1dde:	8e 93       	st	-X, r24
    1de0:	11 97       	sbiw	r26, 0x01	; 1
    1de2:	06 c0       	rjmp	.+12     	; 0x1df0 <Isb_App_Exec+0x1254>
										}
										else
										{
											Isb_App_DigOut[AppIndex].Counter = 5000 / ISB_APP_DIGOUT_EXECTIME;
    1de4:	84 ef       	ldi	r24, 0xF4	; 244
    1de6:	91 e0       	ldi	r25, 0x01	; 1
    1de8:	eb a5       	ldd	r30, Y+43	; 0x2b
    1dea:	fc a5       	ldd	r31, Y+44	; 0x2c
    1dec:	92 83       	std	Z+2, r25	; 0x02
    1dee:	81 83       	std	Z+1, r24	; 0x01
										}
										Isb_App_DigOut[AppIndex].IsChanged = FALSE;
    1df0:	ab a5       	ldd	r26, Y+43	; 0x2b
    1df2:	bc a5       	ldd	r27, Y+44	; 0x2c
    1df4:	14 96       	adiw	r26, 0x04	; 4
    1df6:	1c 92       	st	X, r1
									}
									// Impuls
									if (Isb_App_DigOut[AppIndex].Counter != 0)
    1df8:	eb a5       	ldd	r30, Y+43	; 0x2b
    1dfa:	fc a5       	ldd	r31, Y+44	; 0x2c
    1dfc:	81 81       	ldd	r24, Z+1	; 0x01
    1dfe:	92 81       	ldd	r25, Z+2	; 0x02
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <Isb_App_Exec+0x126a>
    1e04:	79 c0       	rjmp	.+242    	; 0x1ef8 <Isb_App_Exec+0x135c>
									{
										Isb_App_DigOut[AppIndex].Counter--;
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	92 83       	std	Z+2, r25	; 0x02
    1e0a:	81 83       	std	Z+1, r24	; 0x01
										// Kontrolleingang
										if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN1_ENABLED))
    1e0c:	8c e1       	ldi	r24, 0x1C	; 28
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	2b 81       	ldd	r18, Y+3	; 0x03
    1e12:	3c 81       	ldd	r19, Y+4	; 0x04
    1e14:	28 9f       	mul	r18, r24
    1e16:	80 01       	movw	r16, r0
    1e18:	29 9f       	mul	r18, r25
    1e1a:	10 0d       	add	r17, r0
    1e1c:	38 9f       	mul	r19, r24
    1e1e:	10 0d       	add	r17, r0
    1e20:	11 24       	eor	r1, r1
    1e22:	00 54       	subi	r16, 0x40	; 64
    1e24:	1f 4f       	sbci	r17, 0xFF	; 255
    1e26:	d8 01       	movw	r26, r16
    1e28:	8c 91       	ld	r24, X
    1e2a:	85 ff       	sbrs	r24, 5
    1e2c:	3f c0       	rjmp	.+126    	; 0x1eac <Isb_App_Exec+0x1310>
										{
											uint8_t Port = (Pin1 & ISB_APP_DIGOUT_PIN1_MASKPORT) >> 3;
    1e2e:	2c 2d       	mov	r18, r12
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	28 73       	andi	r18, 0x38	; 56
    1e34:	30 70       	andi	r19, 0x00	; 0
    1e36:	e3 e0       	ldi	r30, 0x03	; 3
    1e38:	35 95       	asr	r19
    1e3a:	27 95       	ror	r18
    1e3c:	ea 95       	dec	r30
    1e3e:	e1 f7       	brne	.-8      	; 0x1e38 <Isb_App_Exec+0x129c>
    1e40:	e2 2e       	mov	r14, r18
											uint8_t Pin = Pin1 & ISB_APP_DIGOUT_PIN1_MASKPIN;
    1e42:	77 e0       	ldi	r23, 0x07	; 7
    1e44:	f7 2e       	mov	r15, r23
    1e46:	fc 20       	and	r15, r12
											if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN1_PULLUP))
    1e48:	8c 91       	ld	r24, X
    1e4a:	87 ff       	sbrs	r24, 7
    1e4c:	04 c0       	rjmp	.+8      	; 0x1e56 <Isb_App_Exec+0x12ba>
											{
												Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT_PULLUP);
    1e4e:	82 2f       	mov	r24, r18
    1e50:	6f 2d       	mov	r22, r15
    1e52:	42 e0       	ldi	r20, 0x02	; 2
    1e54:	03 c0       	rjmp	.+6      	; 0x1e5c <Isb_App_Exec+0x12c0>
											}
											else
											{
												Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT);
    1e56:	82 2f       	mov	r24, r18
    1e58:	6f 2d       	mov	r22, r15
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>
	#endif



	uint8_t Lib_Pin_Get(const uint8_t aPort, const uint8_t aPin) {
		return (*(PINx[aPort]) >> aPin) & 1;
    1e60:	ee 2d       	mov	r30, r14
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	ee 0f       	add	r30, r30
    1e66:	ff 1f       	adc	r31, r31
    1e68:	ec 57       	subi	r30, 0x7C	; 124
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	01 90       	ld	r0, Z+
    1e6e:	f0 81       	ld	r31, Z
    1e70:	e0 2d       	mov	r30, r0
    1e72:	80 81       	ld	r24, Z
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <Isb_App_Exec+0x12e0>
    1e78:	95 95       	asr	r25
    1e7a:	87 95       	ror	r24
    1e7c:	fa 94       	dec	r15
    1e7e:	e2 f7       	brpl	.-8      	; 0x1e78 <Isb_App_Exec+0x12dc>
    1e80:	e8 2f       	mov	r30, r24
    1e82:	e1 70       	andi	r30, 0x01	; 1
											}
											uint8_t State = 0;
											State = Lib_Pin_Get(Port, Pin);
											if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN1_INVERTED))
    1e84:	d8 01       	movw	r26, r16
    1e86:	8c 91       	ld	r24, X
    1e88:	86 ff       	sbrs	r24, 6
    1e8a:	05 c0       	rjmp	.+10     	; 0x1e96 <Isb_App_Exec+0x12fa>
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	ee 23       	and	r30, r30
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <Isb_App_Exec+0x12f8>
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	e8 2f       	mov	r30, r24
												else
												{
													State = 1;
												}
											}
											if (State == Isb_App_DigOut[AppIndex].Value)
    1e96:	ab a5       	ldd	r26, Y+43	; 0x2b
    1e98:	bc a5       	ldd	r27, Y+44	; 0x2c
    1e9a:	13 96       	adiw	r26, 0x03	; 3
    1e9c:	8c 91       	ld	r24, X
    1e9e:	13 97       	sbiw	r26, 0x03	; 3
    1ea0:	e8 17       	cp	r30, r24
    1ea2:	21 f4       	brne	.+8      	; 0x1eac <Isb_App_Exec+0x1310>
											{
												Isb_App_DigOut[AppIndex].Counter = 0;
    1ea4:	12 96       	adiw	r26, 0x02	; 2
    1ea6:	1c 92       	st	X, r1
    1ea8:	1e 92       	st	-X, r1
    1eaa:	11 97       	sbiw	r26, 0x01	; 1
											}
										}
										// Impuls
										uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
    1eac:	2d 2d       	mov	r18, r13
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	28 73       	andi	r18, 0x38	; 56
    1eb2:	30 70       	andi	r19, 0x00	; 0
    1eb4:	53 e0       	ldi	r21, 0x03	; 3
    1eb6:	35 95       	asr	r19
    1eb8:	27 95       	ror	r18
    1eba:	5a 95       	dec	r21
    1ebc:	e1 f7       	brne	.-8      	; 0x1eb6 <Isb_App_Exec+0x131a>
										uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
    1ebe:	4d 2d       	mov	r20, r13
    1ec0:	47 70       	andi	r20, 0x07	; 7
										if ((Isb_App_DigOut[AppIndex].Counter / (500 / ISB_APP_DIGOUT_EXECTIME)) % 2 != 0)
    1ec2:	eb a5       	ldd	r30, Y+43	; 0x2b
    1ec4:	fc a5       	ldd	r31, Y+44	; 0x2c
    1ec6:	81 81       	ldd	r24, Z+1	; 0x01
    1ec8:	92 81       	ldd	r25, Z+2	; 0x02
    1eca:	62 e3       	ldi	r22, 0x32	; 50
    1ecc:	70 e0       	ldi	r23, 0x00	; 0
    1ece:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <__udivmodhi4>
    1ed2:	60 ff       	sbrs	r22, 0
    1ed4:	0c c0       	rjmp	.+24     	; 0x1eee <Isb_App_Exec+0x1352>
										{
											// Impuls Start
											if (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN0_INVERTED))
    1ed6:	d8 01       	movw	r26, r16
    1ed8:	8c 91       	ld	r24, X
    1eda:	84 fd       	sbrc	r24, 4
    1edc:	04 c0       	rjmp	.+8      	; 0x1ee6 <Isb_App_Exec+0x134a>
											{
												Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_LOW);
    1ede:	82 2f       	mov	r24, r18
    1ee0:	64 2f       	mov	r22, r20
    1ee2:	41 e0       	ldi	r20, 0x01	; 1
    1ee4:	07 c0       	rjmp	.+14     	; 0x1ef4 <Isb_App_Exec+0x1358>
											}
											else
											{
												Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_HIGH);
    1ee6:	82 2f       	mov	r24, r18
    1ee8:	64 2f       	mov	r22, r20
    1eea:	43 e0       	ldi	r20, 0x03	; 3
    1eec:	03 c0       	rjmp	.+6      	; 0x1ef4 <Isb_App_Exec+0x1358>
											}
										}
										else
										{
											// Impuls Ende
											Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_TRISTATE);
    1eee:	82 2f       	mov	r24, r18
    1ef0:	64 2f       	mov	r22, r20
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>
								break;
						}
						// Rückmeldungsfunktion
						#if ISB_APP_DIGOUT_FEATURE_RESULT == TRUE
							uint8_t Result = 0;
							if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN1_ENABLED))
    1ef8:	8c e1       	ldi	r24, 0x1C	; 28
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	2b 81       	ldd	r18, Y+3	; 0x03
    1efe:	3c 81       	ldd	r19, Y+4	; 0x04
    1f00:	28 9f       	mul	r18, r24
    1f02:	f0 01       	movw	r30, r0
    1f04:	29 9f       	mul	r18, r25
    1f06:	f0 0d       	add	r31, r0
    1f08:	38 9f       	mul	r19, r24
    1f0a:	f0 0d       	add	r31, r0
    1f0c:	11 24       	eor	r1, r1
    1f0e:	8f 01       	movw	r16, r30
    1f10:	00 54       	subi	r16, 0x40	; 64
    1f12:	1f 4f       	sbci	r17, 0xFF	; 255
    1f14:	d8 01       	movw	r26, r16
    1f16:	8c 91       	ld	r24, X
    1f18:	85 ff       	sbrs	r24, 5
    1f1a:	38 c0       	rjmp	.+112    	; 0x1f8c <Isb_App_Exec+0x13f0>
							{
								uint8_t Port = (Pin1 & ISB_APP_DIGOUT_PIN1_MASKPORT) >> 3;
    1f1c:	2c 2d       	mov	r18, r12
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	28 73       	andi	r18, 0x38	; 56
    1f22:	30 70       	andi	r19, 0x00	; 0
    1f24:	43 e0       	ldi	r20, 0x03	; 3
    1f26:	35 95       	asr	r19
    1f28:	27 95       	ror	r18
    1f2a:	4a 95       	dec	r20
    1f2c:	e1 f7       	brne	.-8      	; 0x1f26 <Isb_App_Exec+0x138a>
    1f2e:	e2 2e       	mov	r14, r18
								uint8_t Pin = Pin1 & ISB_APP_DIGOUT_PIN1_MASKPIN;
    1f30:	97 e0       	ldi	r25, 0x07	; 7
    1f32:	f9 2e       	mov	r15, r25
    1f34:	fc 20       	and	r15, r12
								if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN1_PULLUP))
    1f36:	8c 91       	ld	r24, X
    1f38:	87 ff       	sbrs	r24, 7
    1f3a:	04 c0       	rjmp	.+8      	; 0x1f44 <Isb_App_Exec+0x13a8>
								{
									Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT_PULLUP);
    1f3c:	82 2f       	mov	r24, r18
    1f3e:	6f 2d       	mov	r22, r15
    1f40:	42 e0       	ldi	r20, 0x02	; 2
    1f42:	03 c0       	rjmp	.+6      	; 0x1f4a <Isb_App_Exec+0x13ae>
								}
								else
								{
									Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT);
    1f44:	82 2f       	mov	r24, r18
    1f46:	6f 2d       	mov	r22, r15
    1f48:	40 e0       	ldi	r20, 0x00	; 0
    1f4a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>
								}
								Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT_PULLUP);
    1f4e:	8e 2d       	mov	r24, r14
    1f50:	6f 2d       	mov	r22, r15
    1f52:	42 e0       	ldi	r20, 0x02	; 2
    1f54:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lib_Pin_Set>
    1f58:	ee 2d       	mov	r30, r14
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	ee 0f       	add	r30, r30
    1f5e:	ff 1f       	adc	r31, r31
    1f60:	ec 57       	subi	r30, 0x7C	; 124
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	01 90       	ld	r0, Z+
    1f66:	f0 81       	ld	r31, Z
    1f68:	e0 2d       	mov	r30, r0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	02 c0       	rjmp	.+4      	; 0x1f74 <Isb_App_Exec+0x13d8>
    1f70:	95 95       	asr	r25
    1f72:	87 95       	ror	r24
    1f74:	fa 94       	dec	r15
    1f76:	e2 f7       	brpl	.-8      	; 0x1f70 <Isb_App_Exec+0x13d4>
    1f78:	e8 2f       	mov	r30, r24
    1f7a:	e1 70       	andi	r30, 0x01	; 1
								Result = Lib_Pin_Get(Port, Pin);
								if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN1_INVERTED))
    1f7c:	d8 01       	movw	r26, r16
    1f7e:	8c 91       	ld	r24, X
    1f80:	86 ff       	sbrs	r24, 6
    1f82:	19 c0       	rjmp	.+50     	; 0x1fb6 <Isb_App_Exec+0x141a>
								{
									if (Result != 0)
    1f84:	ee 23       	and	r30, r30
    1f86:	b1 f0       	breq	.+44     	; 0x1fb4 <Isb_App_Exec+0x1418>
    1f88:	e0 e0       	ldi	r30, 0x00	; 0
    1f8a:	15 c0       	rjmp	.+42     	; 0x1fb6 <Isb_App_Exec+0x141a>
								}
							}
							else
							{
								Result = 0;
								if ((Isb_App_DigOut[AppIndex].Value == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg1, ISB_APP_DIGOUT_CFG1_RESULT_INVERTED)))
    1f8c:	ab a5       	ldd	r26, Y+43	; 0x2b
    1f8e:	bc a5       	ldd	r27, Y+44	; 0x2c
    1f90:	13 96       	adiw	r26, 0x03	; 3
    1f92:	2c 91       	ld	r18, X
    1f94:	eb 53       	subi	r30, 0x3B	; 59
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	80 81       	ld	r24, Z
								{
									Result = 1;
								}
								if ((Isb_App_DigOut[AppIndex].Value == 0) & (bit_is_set(Isb_App_DigOut[AppIndex].Cfg1, ISB_APP_DIGOUT_CFG1_RESULT_INVERTED)))
    1f9a:	e0 81       	ld	r30, Z
    1f9c:	22 23       	and	r18, r18
    1f9e:	11 f4       	brne	.+4      	; 0x1fa4 <Isb_App_Exec+0x1408>
    1fa0:	e0 fd       	sbrc	r30, 0
    1fa2:	08 c0       	rjmp	.+16     	; 0x1fb4 <Isb_App_Exec+0x1418>
								}
							}
							else
							{
								Result = 0;
								if ((Isb_App_DigOut[AppIndex].Value == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg1, ISB_APP_DIGOUT_CFG1_RESULT_INVERTED)))
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	21 30       	cpi	r18, 0x01	; 1
    1fa8:	09 f4       	brne	.+2      	; 0x1fac <Isb_App_Exec+0x1410>
    1faa:	91 e0       	ldi	r25, 0x01	; 1
    1fac:	e8 2f       	mov	r30, r24
    1fae:	e0 95       	com	r30
    1fb0:	e9 23       	and	r30, r25
    1fb2:	01 c0       	rjmp	.+2      	; 0x1fb6 <Isb_App_Exec+0x141a>
    1fb4:	e1 e0       	ldi	r30, 0x01	; 1
								if ((Isb_App_DigOut[AppIndex].Value == 0) & (bit_is_set(Isb_App_DigOut[AppIndex].Cfg1, ISB_APP_DIGOUT_CFG1_RESULT_INVERTED)))
								{
									Result = 1;
								}
							}
							if (Isb_Obj[Obj_1].Data[0] != Result)
    1fb6:	bb a1       	ldd	r27, Y+35	; 0x23
    1fb8:	8b 2f       	mov	r24, r27
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	13 e0       	ldi	r17, 0x03	; 3
    1fc0:	aa 0f       	add	r26, r26
    1fc2:	bb 1f       	adc	r27, r27
    1fc4:	1a 95       	dec	r17
    1fc6:	e1 f7       	brne	.-8      	; 0x1fc0 <Isb_App_Exec+0x1424>
    1fc8:	a8 0f       	add	r26, r24
    1fca:	b9 1f       	adc	r27, r25
    1fcc:	a0 56       	subi	r26, 0x60	; 96
    1fce:	be 4f       	sbci	r27, 0xFE	; 254
    1fd0:	13 96       	adiw	r26, 0x03	; 3
    1fd2:	8c 91       	ld	r24, X
    1fd4:	13 97       	sbiw	r26, 0x03	; 3
    1fd6:	8e 17       	cp	r24, r30
    1fd8:	31 f0       	breq	.+12     	; 0x1fe6 <Isb_App_Exec+0x144a>
							{
								Isb_Obj[Obj_1].Data[0] = Result;
    1fda:	13 96       	adiw	r26, 0x03	; 3
    1fdc:	ec 93       	st	X, r30
    1fde:	13 97       	sbiw	r26, 0x03	; 3
								Isb_Obj[Obj_1].IsChanged = TRUE;
    1fe0:	e1 e0       	ldi	r30, 0x01	; 1
    1fe2:	18 96       	adiw	r26, 0x08	; 8
    1fe4:	ec 93       	st	X, r30
    1fe6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe8:	3c 81       	ldd	r19, Y+4	; 0x04
    1fea:	2f 5f       	subi	r18, 0xFF	; 255
    1fec:	3f 4f       	sbci	r19, 0xFF	; 255
    1fee:	3c 83       	std	Y+4, r19	; 0x04
    1ff0:	2b 83       	std	Y+3, r18	; 0x03
    1ff2:	4b a5       	ldd	r20, Y+43	; 0x2b
    1ff4:	5c a5       	ldd	r21, Y+44	; 0x2c
    1ff6:	44 5e       	subi	r20, 0xE4	; 228
    1ff8:	5f 4f       	sbci	r21, 0xFF	; 255
    1ffa:	5c a7       	std	Y+44, r21	; 0x2c
    1ffc:	4b a7       	std	Y+43, r20	; 0x2b
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
    2002:	4c 96       	adiw	r24, 0x1c	; 28
    2004:	9a 83       	std	Y+2, r25	; 0x02
    2006:	89 83       	std	Y+1, r24	; 0x01
		#endif /* ISB_APP_DIGIN_MAX */

		#if defined(ISB_APP_DIGOUT_MAX)
			if (bit_is_set(Isb_App_DigOut_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
			{
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGOUT_MAX; AppIndex++)
    2008:	28 30       	cpi	r18, 0x08	; 8
    200a:	31 05       	cpc	r19, r1
    200c:	11 f0       	breq	.+4      	; 0x2012 <Isb_App_Exec+0x1476>
    200e:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <Isb_App_Exec+0x5c>
								Isb_Obj[Obj_1].IsChanged = TRUE;
							}
						#endif /* ISB_APP_DIGOUT_FEATURE_RESULT == TRUE */
					}
				}
				Isb_App_DigOut_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    2012:	80 91 ab 00 	lds	r24, 0x00AB
    2016:	8e 7f       	andi	r24, 0xFE	; 254
    2018:	80 93 ab 00 	sts	0x00AB, r24
				}
				Isb_App_HotWater_Circulation_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
			}
		#endif /* ISB_APP_HOTWATER_CIRCULATION_MAX */

	}
    201c:	ac 96       	adiw	r28, 0x2c	; 44
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	1f 91       	pop	r17
    202e:	0f 91       	pop	r16
    2030:	ff 90       	pop	r15
    2032:	ef 90       	pop	r14
    2034:	df 90       	pop	r13
    2036:	cf 90       	pop	r12
    2038:	bf 90       	pop	r11
    203a:	af 90       	pop	r10
    203c:	9f 90       	pop	r9
    203e:	8f 90       	pop	r8
    2040:	7f 90       	pop	r7
    2042:	6f 90       	pop	r6
    2044:	5f 90       	pop	r5
    2046:	4f 90       	pop	r4
    2048:	3f 90       	pop	r3
    204a:	2f 90       	pop	r2
    204c:	08 95       	ret

0000204e <Isb_Obj_getDlc>:
	uint8_t Isb_Obj_getDlc(uint8_t aTop)
	{

		uint8_t Dlc = 0;

		switch (aTop)
    204e:	85 30       	cpi	r24, 0x05	; 5
    2050:	71 f0       	breq	.+28     	; 0x206e <Isb_Obj_getDlc+0x20>
    2052:	86 30       	cpi	r24, 0x06	; 6
    2054:	18 f4       	brcc	.+6      	; 0x205c <Isb_Obj_getDlc+0xe>
    2056:	81 30       	cpi	r24, 0x01	; 1
    2058:	41 f4       	brne	.+16     	; 0x206a <Isb_Obj_getDlc+0x1c>
    205a:	05 c0       	rjmp	.+10     	; 0x2066 <Isb_Obj_getDlc+0x18>
    205c:	86 30       	cpi	r24, 0x06	; 6
    205e:	49 f0       	breq	.+18     	; 0x2072 <Isb_Obj_getDlc+0x24>
    2060:	87 30       	cpi	r24, 0x07	; 7
    2062:	19 f4       	brne	.+6      	; 0x206a <Isb_Obj_getDlc+0x1c>
    2064:	08 c0       	rjmp	.+16     	; 0x2076 <Isb_Obj_getDlc+0x28>
    2066:	84 e0       	ldi	r24, 0x04	; 4
    2068:	08 95       	ret
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	08 95       	ret
    206e:	85 e0       	ldi	r24, 0x05	; 5
    2070:	08 95       	ret
//			case ISB_MSG_TOP_4BIT:
//				Dlc = 4;
//				break;
			case ISB_MSG_TOP_FLOAT:
				Dlc = 5;
				break;
    2072:	86 e0       	ldi	r24, 0x06	; 6
    2074:	08 95       	ret
			case ISB_MSG_TOP_TIME:
				Dlc = 6;
				break;
    2076:	88 e0       	ldi	r24, 0x08	; 8
//				break;
		}

		return Dlc;

	}
    2078:	08 95       	ret

0000207a <Isb_Grp_Init>:
#ifndef ISB_GRP_C_
	#define ISB_GRP_C_



	void Isb_Grp_Init(void) {
    207a:	80 91 a7 00 	lds	r24, 0x00A7
    207e:	28 2f       	mov	r18, r24
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	26 5b       	subi	r18, 0xB6	; 182
    2084:	3e 4f       	sbci	r19, 0xFE	; 254
    2086:	e9 ec       	ldi	r30, 0xC9	; 201
    2088:	f2 e0       	ldi	r31, 0x02	; 2
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    208a:	e1 99       	sbic	0x1c, 1	; 28
    208c:	fe cf       	rjmp	.-4      	; 0x208a <Isb_Grp_Init+0x10>
    208e:	22 50       	subi	r18, 0x02	; 2
    2090:	30 40       	sbci	r19, 0x00	; 0
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2092:	3f bb       	out	0x1f, r19	; 31
    2094:	2e bb       	out	0x1e, r18	; 30
    2096:	2e 5f       	subi	r18, 0xFE	; 254
    2098:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
    EECR |= (1 << EERE);
    209a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    209c:	9d b3       	in	r25, 0x1d	; 29
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    209e:	e1 99       	sbic	0x1c, 1	; 28
    20a0:	fe cf       	rjmp	.-4      	; 0x209e <Isb_Grp_Init+0x24>
    20a2:	21 50       	subi	r18, 0x01	; 1
    20a4:	30 40       	sbci	r19, 0x00	; 0
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    20a6:	3f bb       	out	0x1f, r19	; 31
    20a8:	2e bb       	out	0x1e, r18	; 30
    20aa:	2f 5f       	subi	r18, 0xFF	; 255
    20ac:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
    EECR |= (1 << EERE);
    20ae:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    20b0:	8d b3       	in	r24, 0x1d	; 29
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
			Isb_Grp[GrpIndex].Id = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3));
			Isb_Grp[GrpIndex].Id |= lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 1)) << 8;
    20b2:	58 2f       	mov	r21, r24
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	89 2f       	mov	r24, r25
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	84 2b       	or	r24, r20
    20bc:	95 2b       	or	r25, r21
    20be:	91 83       	std	Z+1, r25	; 0x01
    20c0:	80 83       	st	Z, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    20c2:	e1 99       	sbic	0x1c, 1	; 28
    20c4:	fe cf       	rjmp	.-4      	; 0x20c2 <Isb_Grp_Init+0x48>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    20c6:	3f bb       	out	0x1f, r19	; 31
    20c8:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    20ca:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    20cc:	8d b3       	in	r24, 0x1d	; 29
			Isb_Grp[GrpIndex].Obj = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 2));
    20ce:	82 83       	std	Z+2, r24	; 0x02
    20d0:	2d 5f       	subi	r18, 0xFD	; 253
    20d2:	3f 4f       	sbci	r19, 0xFF	; 255
    20d4:	33 96       	adiw	r30, 0x03	; 3
	#define ISB_GRP_C_



	void Isb_Grp_Init(void) {
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    20d6:	83 e0       	ldi	r24, 0x03	; 3
    20d8:	e9 32       	cpi	r30, 0x29	; 41
    20da:	f8 07       	cpc	r31, r24
    20dc:	b1 f6       	brne	.-84     	; 0x208a <Isb_Grp_Init+0x10>
			Isb_Grp[GrpIndex].Id = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3));
			Isb_Grp[GrpIndex].Id |= lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 1)) << 8;
			Isb_Grp[GrpIndex].Obj = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 2));
		}
	}
    20de:	08 95       	ret

000020e0 <Node_Reboot>:
	#include "./../lib/isb_obj.c"
	#include "./../lib/isb_grp.c"



	void Node_Reboot(void) {
    20e0:	ff cf       	rjmp	.-2      	; 0x20e0 <Node_Reboot>

000020e2 <Isb_SendMsg>:
		while (1) ;
	}



	void Isb_SendMsg(Isb_Msg_t * aMsg) {
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	ec 01       	movw	r28, r24
		#endif /* ISB_INF_USART0 == 1 */
		#if ISB_INF_USART1 == 1
			Isb_Inf_Usart_Tx(1, aMsg);
		#endif /* ISB_INF_USART1 == 1 */
		#if ISB_INF_CAN0 == 1
			Isb_Inf_Can_Tx(0, aMsg);
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	be 01       	movw	r22, r28
    20ec:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <Isb_Inf_Can_Tx>
			Isb_Inf_Can_Tx(1, aMsg);
		#endif /* ISB_INF_CAN1 == 1 */
		#if ISB_INF_CAN2 == 1
			Isb_Inf_Can_Tx(2, aMsg);
		#endif /* ISB_INF_CAN2 == 1 */
		if ((aMsg->Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_MULTICAST) {
    20f0:	88 81       	ld	r24, Y
    20f2:	80 73       	andi	r24, 0x30	; 48
    20f4:	80 32       	cpi	r24, 0x20	; 32
    20f6:	39 f4       	brne	.+14     	; 0x2106 <Isb_SendMsg+0x24>
			if (Error == 0) {
    20f8:	80 91 a9 00 	lds	r24, 0x00A9
    20fc:	88 23       	and	r24, r24
    20fe:	19 f4       	brne	.+6      	; 0x2106 <Isb_SendMsg+0x24>
				Isb_Obj_Rx(aMsg);
    2100:	ce 01       	movw	r24, r28
    2102:	0e 94 86 10 	call	0x210c	; 0x210c <Isb_Obj_Rx>
			}
		}
	}
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	08 95       	ret

0000210c <Isb_Obj_Rx>:
	}



	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg)
	{
    210c:	2f 92       	push	r2
    210e:	3f 92       	push	r3
    2110:	4f 92       	push	r4
    2112:	5f 92       	push	r5
    2114:	6f 92       	push	r6
    2116:	7f 92       	push	r7
    2118:	8f 92       	push	r8
    211a:	9f 92       	push	r9
    211c:	af 92       	push	r10
    211e:	bf 92       	push	r11
    2120:	cf 92       	push	r12
    2122:	df 92       	push	r13
    2124:	ef 92       	push	r14
    2126:	ff 92       	push	r15
    2128:	0f 93       	push	r16
    212a:	1f 93       	push	r17
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	2d 97       	sbiw	r28, 0x0d	; 13
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	5c 01       	movw	r10, r24
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ))
											{
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
												TxMsg.DestId = aIsb_Msg->DestId;
												TxMsg.SourceId = Isb_Node_Id;
    2142:	20 90 a5 00 	lds	r2, 0x00A5
    2146:	30 90 a6 00 	lds	r3, 0x00A6
    214a:	e9 ec       	ldi	r30, 0xC9	; 201
    214c:	4e 2e       	mov	r4, r30
    214e:	e2 e0       	ldi	r30, 0x02	; 2
    2150:	5e 2e       	mov	r5, r30

	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg)
	{
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
		{
			if ((aIsb_Msg->DestId == Isb_Grp[GrpIndex].Id) & (aIsb_Msg->DestId != 0))
    2152:	f5 01       	movw	r30, r10
    2154:	21 81       	ldd	r18, Z+1	; 0x01
    2156:	32 81       	ldd	r19, Z+2	; 0x02
    2158:	f2 01       	movw	r30, r4
    215a:	80 81       	ld	r24, Z
    215c:	91 81       	ldd	r25, Z+1	; 0x01
    215e:	28 17       	cp	r18, r24
    2160:	39 07       	cpc	r19, r25
    2162:	09 f0       	breq	.+2      	; 0x2166 <Isb_Obj_Rx+0x5a>
    2164:	f0 c0       	rjmp	.+480    	; 0x2346 <Isb_Obj_Rx+0x23a>
    2166:	23 2b       	or	r18, r19
    2168:	09 f4       	brne	.+2      	; 0x216c <Isb_Obj_Rx+0x60>
    216a:	ed c0       	rjmp	.+474    	; 0x2346 <Isb_Obj_Rx+0x23a>
    216c:	70 ea       	ldi	r23, 0xA0	; 160
    216e:	e7 2e       	mov	r14, r23
    2170:	71 e0       	ldi	r23, 0x01	; 1
    2172:	f7 2e       	mov	r15, r23
    2174:	00 e0       	ldi	r16, 0x00	; 0
    2176:	10 e0       	ldi	r17, 0x00	; 0
					{
//						uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_Ch_Array[ObjIndex]);
//						uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_Obj_Array[ObjIndex]);
// TODO:
uint8_t Obj = ObjIndex;
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED))
    2178:	68 01       	movw	r12, r16
    217a:	63 e0       	ldi	r22, 0x03	; 3
    217c:	cc 0c       	add	r12, r12
    217e:	dd 1c       	adc	r13, r13
    2180:	6a 95       	dec	r22
    2182:	e1 f7       	brne	.-8      	; 0x217c <Isb_Obj_Rx+0x70>
    2184:	c0 0e       	add	r12, r16
    2186:	d1 1e       	adc	r13, r17
    2188:	20 ea       	ldi	r18, 0xA0	; 160
    218a:	31 e0       	ldi	r19, 0x01	; 1
    218c:	c2 0e       	add	r12, r18
    218e:	d3 1e       	adc	r13, r19
    2190:	f6 01       	movw	r30, r12
    2192:	80 81       	ld	r24, Z
    2194:	80 ff       	sbrs	r24, 0
    2196:	cd c0       	rjmp	.+410    	; 0x2332 <Isb_Obj_Rx+0x226>
						{
							if (Obj == Isb_Grp[GrpIndex].Obj)
    2198:	f2 01       	movw	r30, r4
    219a:	82 81       	ldd	r24, Z+2	; 0x02
    219c:	08 17       	cp	r16, r24
    219e:	09 f0       	breq	.+2      	; 0x21a2 <Isb_Obj_Rx+0x96>
    21a0:	c8 c0       	rjmp	.+400    	; 0x2332 <Isb_Obj_Rx+0x226>
							{
								uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
    21a2:	f7 01       	movw	r30, r14
    21a4:	21 81       	ldd	r18, Z+1	; 0x01
	uint8_t Isb_Obj_getDlc(uint8_t aTop)
	{

		uint8_t Dlc = 0;

		switch (aTop)
    21a6:	25 30       	cpi	r18, 0x05	; 5
    21a8:	69 f0       	breq	.+26     	; 0x21c4 <Isb_Obj_Rx+0xb8>
    21aa:	26 30       	cpi	r18, 0x06	; 6
    21ac:	18 f4       	brcc	.+6      	; 0x21b4 <Isb_Obj_Rx+0xa8>
    21ae:	21 30       	cpi	r18, 0x01	; 1
    21b0:	29 f4       	brne	.+10     	; 0x21bc <Isb_Obj_Rx+0xb0>
    21b2:	06 c0       	rjmp	.+12     	; 0x21c0 <Isb_Obj_Rx+0xb4>
    21b4:	26 30       	cpi	r18, 0x06	; 6
    21b6:	41 f0       	breq	.+16     	; 0x21c8 <Isb_Obj_Rx+0xbc>
    21b8:	27 30       	cpi	r18, 0x07	; 7
    21ba:	41 f0       	breq	.+16     	; 0x21cc <Isb_Obj_Rx+0xc0>
    21bc:	40 e0       	ldi	r20, 0x00	; 0
    21be:	07 c0       	rjmp	.+14     	; 0x21ce <Isb_Obj_Rx+0xc2>
    21c0:	44 e0       	ldi	r20, 0x04	; 4
    21c2:	05 c0       	rjmp	.+10     	; 0x21ce <Isb_Obj_Rx+0xc2>
    21c4:	45 e0       	ldi	r20, 0x05	; 5
    21c6:	03 c0       	rjmp	.+6      	; 0x21ce <Isb_Obj_Rx+0xc2>
    21c8:	46 e0       	ldi	r20, 0x06	; 6
    21ca:	01 c0       	rjmp	.+2      	; 0x21ce <Isb_Obj_Rx+0xc2>
    21cc:	48 e0       	ldi	r20, 0x08	; 8
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED))
						{
							if (Obj == Isb_Grp[GrpIndex].Obj)
							{
								uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
								if ((aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK) == Dlc)
    21ce:	f5 01       	movw	r30, r10
    21d0:	80 81       	ld	r24, Z
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	8f 70       	andi	r24, 0x0F	; 15
    21d6:	90 70       	andi	r25, 0x00	; 0
    21d8:	84 2e       	mov	r8, r20
    21da:	99 24       	eor	r9, r9
    21dc:	88 15       	cp	r24, r8
    21de:	99 05       	cpc	r25, r9
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <Isb_Obj_Rx+0xd8>
    21e2:	a7 c0       	rjmp	.+334    	; 0x2332 <Isb_Obj_Rx+0x226>
								{
									if (aIsb_Msg->Data[0] == Isb_Obj[ObjIndex].Top)
    21e4:	85 81       	ldd	r24, Z+5	; 0x05
    21e6:	82 17       	cp	r24, r18
    21e8:	09 f0       	breq	.+2      	; 0x21ec <Isb_Obj_Rx+0xe0>
    21ea:	a3 c0       	rjmp	.+326    	; 0x2332 <Isb_Obj_Rx+0x226>
									{
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ)
    21ec:	86 81       	ldd	r24, Z+6	; 0x06
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	83 70       	andi	r24, 0x03	; 3
    21f2:	90 70       	andi	r25, 0x00	; 0
    21f4:	89 2b       	or	r24, r25
    21f6:	b9 f5       	brne	.+110    	; 0x2266 <Isb_Obj_Rx+0x15a>
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ))
    21f8:	f6 01       	movw	r30, r12
    21fa:	80 81       	ld	r24, Z
    21fc:	81 ff       	sbrs	r24, 1
    21fe:	33 c0       	rjmp	.+102    	; 0x2266 <Isb_Obj_Rx+0x15a>
											{
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
												TxMsg.DestId = aIsb_Msg->DestId;
    2200:	f5 01       	movw	r30, r10
    2202:	61 80       	ldd	r6, Z+1	; 0x01
    2204:	72 80       	ldd	r7, Z+2	; 0x02
												TxMsg.SourceId = Isb_Node_Id;
												TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
    2206:	2e 83       	std	Y+6, r18	; 0x06
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
    2208:	f1 e0       	ldi	r31, 0x01	; 1
    220a:	ff 83       	std	Y+7, r31	; 0x07
												TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
    220c:	f7 01       	movw	r30, r14
    220e:	82 81       	ldd	r24, Z+2	; 0x02
    2210:	88 87       	std	Y+8, r24	; 0x08
    2212:	90 e0       	ldi	r25, 0x00	; 0
												for (uint8_t i = 0; i < (Dlc - 3); i++)
    2214:	b4 01       	movw	r22, r8
    2216:	63 50       	subi	r22, 0x03	; 3
    2218:	70 40       	sbci	r23, 0x00	; 0
												{
													TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
    221a:	98 01       	movw	r18, r16
    221c:	53 e0       	ldi	r21, 0x03	; 3
    221e:	22 0f       	add	r18, r18
    2220:	33 1f       	adc	r19, r19
    2222:	5a 95       	dec	r21
    2224:	e1 f7       	brne	.-8      	; 0x221e <Isb_Obj_Rx+0x112>
    2226:	20 0f       	add	r18, r16
    2228:	31 1f       	adc	r19, r17
    222a:	20 56       	subi	r18, 0x60	; 96
    222c:	3e 4f       	sbci	r19, 0xFE	; 254
    222e:	0c c0       	rjmp	.+24     	; 0x2248 <Isb_Obj_Rx+0x13c>
    2230:	e9 e0       	ldi	r30, 0x09	; 9
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	ec 0f       	add	r30, r28
    2236:	fd 1f       	adc	r31, r29
    2238:	ea 0f       	add	r30, r26
    223a:	fb 1f       	adc	r31, r27
    223c:	a2 0f       	add	r26, r18
    223e:	b3 1f       	adc	r27, r19
    2240:	13 96       	adiw	r26, 0x03	; 3
    2242:	8c 91       	ld	r24, X
    2244:	80 83       	st	Z, r24
												TxMsg.DestId = aIsb_Msg->DestId;
												TxMsg.SourceId = Isb_Node_Id;
												TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
												TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
												for (uint8_t i = 0; i < (Dlc - 3); i++)
    2246:	9f 5f       	subi	r25, 0xFF	; 255
    2248:	a9 2f       	mov	r26, r25
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	a6 17       	cp	r26, r22
    224e:	b7 07       	cpc	r27, r23
    2250:	7c f3       	brlt	.-34     	; 0x2230 <Isb_Obj_Rx+0x124>
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ))
											{
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
												TxMsg.DestId = aIsb_Msg->DestId;
												TxMsg.SourceId = Isb_Node_Id;
    2252:	3d 82       	std	Y+5, r3	; 0x05
    2254:	2c 82       	std	Y+4, r2	; 0x04
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ))
											{
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
												TxMsg.DestId = aIsb_Msg->DestId;
    2256:	7b 82       	std	Y+3, r7	; 0x03
    2258:	6a 82       	std	Y+2, r6	; 0x02
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ)
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ))
											{
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
    225a:	40 62       	ori	r20, 0x20	; 32
    225c:	49 83       	std	Y+1, r20	; 0x01
												TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
												for (uint8_t i = 0; i < (Dlc - 3); i++)
												{
													TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
												}
												Isb_SendMsg(&TxMsg);
    225e:	ce 01       	movw	r24, r28
    2260:	01 96       	adiw	r24, 0x01	; 1
    2262:	0e 94 71 10 	call	0x20e2	; 0x20e2 <Isb_SendMsg>
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_ANSWER)
    2266:	f5 01       	movw	r30, r10
    2268:	86 81       	ldd	r24, Z+6	; 0x06
    226a:	83 70       	andi	r24, 0x03	; 3
    226c:	81 30       	cpi	r24, 0x01	; 1
    226e:	59 f5       	brne	.+86     	; 0x22c6 <Isb_Obj_Rx+0x1ba>
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_UPDATE))
    2270:	f6 01       	movw	r30, r12
    2272:	80 81       	ld	r24, Z
    2274:	84 ff       	sbrs	r24, 4
    2276:	27 c0       	rjmp	.+78     	; 0x22c6 <Isb_Obj_Rx+0x1ba>
											{
												if (aIsb_Msg->Data[2] == Isb_Obj[ObjIndex].Tov)
    2278:	f5 01       	movw	r30, r10
    227a:	97 81       	ldd	r25, Z+7	; 0x07
    227c:	f7 01       	movw	r30, r14
    227e:	82 81       	ldd	r24, Z+2	; 0x02
    2280:	98 17       	cp	r25, r24
    2282:	09 f5       	brne	.+66     	; 0x22c6 <Isb_Obj_Rx+0x1ba>
    2284:	90 e0       	ldi	r25, 0x00	; 0
												{
													for (uint8_t i = 0; i < (Dlc - 3); i++)
    2286:	a4 01       	movw	r20, r8
    2288:	43 50       	subi	r20, 0x03	; 3
    228a:	50 40       	sbci	r21, 0x00	; 0
													{
														Isb_Obj[ObjIndex].Data[i] = aIsb_Msg->Data[i + 3];
    228c:	98 01       	movw	r18, r16
    228e:	83 e0       	ldi	r24, 0x03	; 3
    2290:	22 0f       	add	r18, r18
    2292:	33 1f       	adc	r19, r19
    2294:	8a 95       	dec	r24
    2296:	e1 f7       	brne	.-8      	; 0x2290 <Isb_Obj_Rx+0x184>
    2298:	20 0f       	add	r18, r16
    229a:	31 1f       	adc	r19, r17
    229c:	20 56       	subi	r18, 0x60	; 96
    229e:	3e 4f       	sbci	r19, 0xFE	; 254
    22a0:	09 c0       	rjmp	.+18     	; 0x22b4 <Isb_Obj_Rx+0x1a8>
    22a2:	f9 01       	movw	r30, r18
    22a4:	ea 0f       	add	r30, r26
    22a6:	fb 1f       	adc	r31, r27
    22a8:	aa 0d       	add	r26, r10
    22aa:	bb 1d       	adc	r27, r11
    22ac:	18 96       	adiw	r26, 0x08	; 8
    22ae:	8c 91       	ld	r24, X
    22b0:	83 83       	std	Z+3, r24	; 0x03
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_UPDATE))
											{
												if (aIsb_Msg->Data[2] == Isb_Obj[ObjIndex].Tov)
												{
													for (uint8_t i = 0; i < (Dlc - 3); i++)
    22b2:	9f 5f       	subi	r25, 0xFF	; 255
    22b4:	a9 2f       	mov	r26, r25
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	a4 17       	cp	r26, r20
    22ba:	b5 07       	cpc	r27, r21
    22bc:	94 f3       	brlt	.-28     	; 0x22a2 <Isb_Obj_Rx+0x196>
													{
														Isb_Obj[ObjIndex].Data[i] = aIsb_Msg->Data[i + 3];
													}
													Isb_Obj[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    22be:	f7 01       	movw	r30, r14
    22c0:	80 81       	ld	r24, Z
    22c2:	8f 7d       	andi	r24, 0xDF	; 223
    22c4:	80 83       	st	Z, r24
												}
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE)
    22c6:	f5 01       	movw	r30, r10
    22c8:	86 81       	ldd	r24, Z+6	; 0x06
    22ca:	83 70       	andi	r24, 0x03	; 3
    22cc:	82 30       	cpi	r24, 0x02	; 2
    22ce:	89 f5       	brne	.+98     	; 0x2332 <Isb_Obj_Rx+0x226>
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE))
    22d0:	f6 01       	movw	r30, r12
    22d2:	80 81       	ld	r24, Z
    22d4:	82 ff       	sbrs	r24, 2
    22d6:	2d c0       	rjmp	.+90     	; 0x2332 <Isb_Obj_Rx+0x226>
											{
												if (aIsb_Msg->Data[2] == Isb_Obj[ObjIndex].Tov)
    22d8:	f5 01       	movw	r30, r10
    22da:	97 81       	ldd	r25, Z+7	; 0x07
    22dc:	f7 01       	movw	r30, r14
    22de:	82 81       	ldd	r24, Z+2	; 0x02
    22e0:	98 17       	cp	r25, r24
    22e2:	39 f5       	brne	.+78     	; 0x2332 <Isb_Obj_Rx+0x226>
    22e4:	50 e0       	ldi	r21, 0x00	; 0
												{
													for (uint8_t i = 0; i < (Dlc - 3); i++)
    22e6:	b4 01       	movw	r22, r8
    22e8:	63 50       	subi	r22, 0x03	; 3
    22ea:	70 40       	sbci	r23, 0x00	; 0
													{
														if (Isb_Obj[ObjIndex].Data[i] != aIsb_Msg->Data[i + 3])
    22ec:	98 01       	movw	r18, r16
    22ee:	b3 e0       	ldi	r27, 0x03	; 3
    22f0:	22 0f       	add	r18, r18
    22f2:	33 1f       	adc	r19, r19
    22f4:	ba 95       	dec	r27
    22f6:	e1 f7       	brne	.-8      	; 0x22f0 <Isb_Obj_Rx+0x1e4>
    22f8:	20 0f       	add	r18, r16
    22fa:	31 1f       	adc	r19, r17
    22fc:	20 56       	subi	r18, 0x60	; 96
    22fe:	3e 4f       	sbci	r19, 0xFE	; 254
    2300:	0f c0       	rjmp	.+30     	; 0x2320 <Isb_Obj_Rx+0x214>
    2302:	f5 01       	movw	r30, r10
    2304:	e8 0f       	add	r30, r24
    2306:	f9 1f       	adc	r31, r25
    2308:	40 85       	ldd	r20, Z+8	; 0x08
    230a:	f9 01       	movw	r30, r18
    230c:	e8 0f       	add	r30, r24
    230e:	f9 1f       	adc	r31, r25
    2310:	83 81       	ldd	r24, Z+3	; 0x03
    2312:	84 17       	cp	r24, r20
    2314:	21 f0       	breq	.+8      	; 0x231e <Isb_Obj_Rx+0x212>
														{
															Isb_Obj[ObjIndex].Data[i] = aIsb_Msg->Data[i + 3];
    2316:	43 83       	std	Z+3, r20	; 0x03
															Isb_Obj[ObjIndex].IsChanged = TRUE;
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	f7 01       	movw	r30, r14
    231c:	80 87       	std	Z+8, r24	; 0x08
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE))
											{
												if (aIsb_Msg->Data[2] == Isb_Obj[ObjIndex].Tov)
												{
													for (uint8_t i = 0; i < (Dlc - 3); i++)
    231e:	5f 5f       	subi	r21, 0xFF	; 255
    2320:	85 2f       	mov	r24, r21
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	86 17       	cp	r24, r22
    2326:	97 07       	cpc	r25, r23
    2328:	64 f3       	brlt	.-40     	; 0x2302 <Isb_Obj_Rx+0x1f6>
														{
															Isb_Obj[ObjIndex].Data[i] = aIsb_Msg->Data[i + 3];
															Isb_Obj[ObjIndex].IsChanged = TRUE;
														}
													}
													Isb_Obj[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    232a:	f7 01       	movw	r30, r14
    232c:	80 81       	ld	r24, Z
    232e:	8f 7d       	andi	r24, 0xDF	; 223
    2330:	80 83       	st	Z, r24
    2332:	0f 5f       	subi	r16, 0xFF	; 255
    2334:	1f 4f       	sbci	r17, 0xFF	; 255
    2336:	29 e0       	ldi	r18, 0x09	; 9
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	e2 0e       	add	r14, r18
    233c:	f3 1e       	adc	r15, r19
		{
			if ((aIsb_Msg->DestId == Isb_Grp[GrpIndex].Id) & (aIsb_Msg->DestId != 0))
			{

				#if defined(ISB_OBJ_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_MAX; ObjIndex++)
    233e:	00 32       	cpi	r16, 0x20	; 32
    2340:	11 05       	cpc	r17, r1
    2342:	09 f0       	breq	.+2      	; 0x2346 <Isb_Obj_Rx+0x23a>
    2344:	19 cf       	rjmp	.-462    	; 0x2178 <Isb_Obj_Rx+0x6c>
    2346:	83 e0       	ldi	r24, 0x03	; 3
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	48 0e       	add	r4, r24
    234c:	59 1e       	adc	r5, r25



	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg)
	{
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
    234e:	99 e2       	ldi	r25, 0x29	; 41
    2350:	49 16       	cp	r4, r25
    2352:	93 e0       	ldi	r25, 0x03	; 3
    2354:	59 06       	cpc	r5, r25
    2356:	09 f0       	breq	.+2      	; 0x235a <Isb_Obj_Rx+0x24e>
    2358:	fc ce       	rjmp	.-520    	; 0x2152 <Isb_Obj_Rx+0x46>
					}
				#endif /* ISB_OBJ_MAX */

			}
		}
	}
    235a:	2d 96       	adiw	r28, 0x0d	; 13
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	de bf       	out	0x3e, r29	; 62
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	1f 91       	pop	r17
    236c:	0f 91       	pop	r16
    236e:	ff 90       	pop	r15
    2370:	ef 90       	pop	r14
    2372:	df 90       	pop	r13
    2374:	cf 90       	pop	r12
    2376:	bf 90       	pop	r11
    2378:	af 90       	pop	r10
    237a:	9f 90       	pop	r9
    237c:	8f 90       	pop	r8
    237e:	7f 90       	pop	r7
    2380:	6f 90       	pop	r6
    2382:	5f 90       	pop	r5
    2384:	4f 90       	pop	r4
    2386:	3f 90       	pop	r3
    2388:	2f 90       	pop	r2
    238a:	08 95       	ret

0000238c <Isb_Obj_Exec>:
	#define ISB_OBJ_C_



	void Isb_Obj_Exec(void)
	{
    238c:	2f 92       	push	r2
    238e:	3f 92       	push	r3
    2390:	4f 92       	push	r4
    2392:	5f 92       	push	r5
    2394:	6f 92       	push	r6
    2396:	7f 92       	push	r7
    2398:	8f 92       	push	r8
    239a:	9f 92       	push	r9
    239c:	af 92       	push	r10
    239e:	bf 92       	push	r11
    23a0:	cf 92       	push	r12
    23a2:	df 92       	push	r13
    23a4:	ef 92       	push	r14
    23a6:	ff 92       	push	r15
    23a8:	0f 93       	push	r16
    23aa:	1f 93       	push	r17
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	2d 97       	sbiw	r28, 0x0d	; 13
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61

		#if defined(ISB_OBJ_MAX)
		if (bit_is_set(Isb_Obj_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
    23c0:	80 91 aa 00 	lds	r24, 0x00AA
    23c4:	80 ff       	sbrs	r24, 0
    23c6:	fd c0       	rjmp	.+506    	; 0x25c2 <Isb_Obj_Exec+0x236>
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
    23c8:	80 90 a5 00 	lds	r8, 0x00A5
    23cc:	90 90 a6 00 	lds	r9, 0x00A6
    23d0:	90 ea       	ldi	r25, 0xA0	; 160
    23d2:	c9 2e       	mov	r12, r25
    23d4:	91 e0       	ldi	r25, 0x01	; 1
    23d6:	d9 2e       	mov	r13, r25
    23d8:	ee 24       	eor	r14, r14
    23da:	ff 24       	eor	r15, r15
									TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
									TxMsg.Data[1] = ISB_MSG_CTRL_CMD_READ;
									TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
									for (uint8_t i = 0; i < (Dlc - 3); i++)
									{
										TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
    23dc:	89 e0       	ldi	r24, 0x09	; 9
    23de:	28 2e       	mov	r2, r24
    23e0:	31 2c       	mov	r3, r1
    23e2:	2c 0e       	add	r2, r28
    23e4:	3d 1e       	adc	r3, r29
									}
									Isb_SendMsg(&TxMsg);
    23e6:	2e 01       	movw	r4, r28
    23e8:	08 94       	sec
    23ea:	41 1c       	adc	r4, r1
    23ec:	51 1c       	adc	r5, r1
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
										TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
										TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    23ee:	02 e0       	ldi	r16, 0x02	; 2
    23f0:	60 2e       	mov	r6, r16
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
    23f2:	7e 2c       	mov	r7, r14
		#if defined(ISB_OBJ_MAX)
		if (bit_is_set(Isb_Obj_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
		{
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_MAX; ObjIndex++)
			{
				uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_Ch_Array[ObjIndex]);
    23f4:	f7 01       	movw	r30, r14
    23f6:	ec 5a       	subi	r30, 0xAC	; 172
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	e4 91       	lpm	r30, Z+
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED))
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	ee 0f       	add	r30, r30
    2400:	ff 1f       	adc	r31, r31
    2402:	e0 55       	subi	r30, 0x50	; 80
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	80 81       	ld	r24, Z
    2408:	80 ff       	sbrs	r24, 0
    240a:	ca c0       	rjmp	.+404    	; 0x25a0 <Isb_Obj_Exec+0x214>
				{
					if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED))
    240c:	87 01       	movw	r16, r14
    240e:	b3 e0       	ldi	r27, 0x03	; 3
    2410:	00 0f       	add	r16, r16
    2412:	11 1f       	adc	r17, r17
    2414:	ba 95       	dec	r27
    2416:	e1 f7       	brne	.-8      	; 0x2410 <Isb_Obj_Exec+0x84>
    2418:	0e 0d       	add	r16, r14
    241a:	1f 1d       	adc	r17, r15
    241c:	00 56       	subi	r16, 0x60	; 96
    241e:	1e 4f       	sbci	r17, 0xFE	; 254
    2420:	f8 01       	movw	r30, r16
    2422:	80 81       	ld	r24, Z
    2424:	80 ff       	sbrs	r24, 0
    2426:	bc c0       	rjmp	.+376    	; 0x25a0 <Isb_Obj_Exec+0x214>
					{
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND))
    2428:	80 81       	ld	r24, Z
    242a:	83 ff       	sbrs	r24, 3
    242c:	5c c0       	rjmp	.+184    	; 0x24e6 <Isb_Obj_Exec+0x15a>
						{
							if (Isb_Obj[ObjIndex].IsChanged == TRUE)
    242e:	f6 01       	movw	r30, r12
    2430:	80 85       	ldd	r24, Z+8	; 0x08
    2432:	81 30       	cpi	r24, 0x01	; 1
    2434:	09 f0       	breq	.+2      	; 0x2438 <Isb_Obj_Exec+0xac>
    2436:	57 c0       	rjmp	.+174    	; 0x24e6 <Isb_Obj_Exec+0x15a>
    2438:	e9 ec       	ldi	r30, 0xC9	; 201
    243a:	f2 e0       	ldi	r31, 0x02	; 2
								for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
								{
//									uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_Obj_Array[ObjIndex]);
// TODO:
uint8_t Obj = ObjIndex;
									if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
    243c:	a0 80       	ld	r10, Z
    243e:	b1 80       	ldd	r11, Z+1	; 0x01
    2440:	82 81       	ldd	r24, Z+2	; 0x02
    2442:	87 15       	cp	r24, r7
    2444:	09 f0       	breq	.+2      	; 0x2448 <Isb_Obj_Exec+0xbc>
    2446:	47 c0       	rjmp	.+142    	; 0x24d6 <Isb_Obj_Exec+0x14a>
    2448:	a1 14       	cp	r10, r1
    244a:	b1 04       	cpc	r11, r1
    244c:	09 f4       	brne	.+2      	; 0x2450 <Isb_Obj_Exec+0xc4>
    244e:	43 c0       	rjmp	.+134    	; 0x24d6 <Isb_Obj_Exec+0x14a>
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
    2450:	f6 01       	movw	r30, r12
    2452:	81 81       	ldd	r24, Z+1	; 0x01
	uint8_t Isb_Obj_getDlc(uint8_t aTop)
	{

		uint8_t Dlc = 0;

		switch (aTop)
    2454:	85 30       	cpi	r24, 0x05	; 5
    2456:	69 f0       	breq	.+26     	; 0x2472 <Isb_Obj_Exec+0xe6>
    2458:	86 30       	cpi	r24, 0x06	; 6
    245a:	18 f4       	brcc	.+6      	; 0x2462 <Isb_Obj_Exec+0xd6>
    245c:	81 30       	cpi	r24, 0x01	; 1
    245e:	29 f4       	brne	.+10     	; 0x246a <Isb_Obj_Exec+0xde>
    2460:	06 c0       	rjmp	.+12     	; 0x246e <Isb_Obj_Exec+0xe2>
    2462:	86 30       	cpi	r24, 0x06	; 6
    2464:	41 f0       	breq	.+16     	; 0x2476 <Isb_Obj_Exec+0xea>
    2466:	87 30       	cpi	r24, 0x07	; 7
    2468:	41 f0       	breq	.+16     	; 0x247a <Isb_Obj_Exec+0xee>
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	07 c0       	rjmp	.+14     	; 0x247c <Isb_Obj_Exec+0xf0>
    246e:	94 e0       	ldi	r25, 0x04	; 4
    2470:	05 c0       	rjmp	.+10     	; 0x247c <Isb_Obj_Exec+0xf0>
    2472:	95 e0       	ldi	r25, 0x05	; 5
    2474:	03 c0       	rjmp	.+6      	; 0x247c <Isb_Obj_Exec+0xf0>
    2476:	96 e0       	ldi	r25, 0x06	; 6
    2478:	01 c0       	rjmp	.+2      	; 0x247c <Isb_Obj_Exec+0xf0>
    247a:	98 e0       	ldi	r25, 0x08	; 8
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
										TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
    247c:	8e 83       	std	Y+6, r24	; 0x06
										TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    247e:	6f 82       	std	Y+7, r6	; 0x07
										TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
    2480:	f6 01       	movw	r30, r12
    2482:	82 81       	ldd	r24, Z+2	; 0x02
    2484:	88 87       	std	Y+8, r24	; 0x08
    2486:	60 e0       	ldi	r22, 0x00	; 0
										for (uint8_t i = 0; i < (Dlc - 3); i++)
    2488:	49 2f       	mov	r20, r25
    248a:	50 e0       	ldi	r21, 0x00	; 0
    248c:	43 50       	subi	r20, 0x03	; 3
    248e:	50 40       	sbci	r21, 0x00	; 0
										{
											TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
    2490:	97 01       	movw	r18, r14
    2492:	a3 e0       	ldi	r26, 0x03	; 3
    2494:	22 0f       	add	r18, r18
    2496:	33 1f       	adc	r19, r19
    2498:	aa 95       	dec	r26
    249a:	e1 f7       	brne	.-8      	; 0x2494 <Isb_Obj_Exec+0x108>
    249c:	2e 0d       	add	r18, r14
    249e:	3f 1d       	adc	r19, r15
    24a0:	20 56       	subi	r18, 0x60	; 96
    24a2:	3e 4f       	sbci	r19, 0xFE	; 254
    24a4:	09 c0       	rjmp	.+18     	; 0x24b8 <Isb_Obj_Exec+0x12c>
    24a6:	f1 01       	movw	r30, r2
    24a8:	ea 0f       	add	r30, r26
    24aa:	fb 1f       	adc	r31, r27
    24ac:	a2 0f       	add	r26, r18
    24ae:	b3 1f       	adc	r27, r19
    24b0:	13 96       	adiw	r26, 0x03	; 3
    24b2:	8c 91       	ld	r24, X
    24b4:	80 83       	st	Z, r24
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
										TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
										TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
										TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
										for (uint8_t i = 0; i < (Dlc - 3); i++)
    24b6:	6f 5f       	subi	r22, 0xFF	; 255
    24b8:	a6 2f       	mov	r26, r22
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	a4 17       	cp	r26, r20
    24be:	b5 07       	cpc	r27, r21
    24c0:	94 f3       	brlt	.-28     	; 0x24a6 <Isb_Obj_Exec+0x11a>
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
    24c2:	9d 82       	std	Y+5, r9	; 0x05
    24c4:	8c 82       	std	Y+4, r8	; 0x04
									if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
    24c6:	bb 82       	std	Y+3, r11	; 0x03
    24c8:	aa 82       	std	Y+2, r10	; 0x02
uint8_t Obj = ObjIndex;
									if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
    24ca:	90 62       	ori	r25, 0x20	; 32
    24cc:	99 83       	std	Y+1, r25	; 0x01
										TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
										for (uint8_t i = 0; i < (Dlc - 3); i++)
										{
											TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
										}
										Isb_SendMsg(&TxMsg);
    24ce:	c2 01       	movw	r24, r4
    24d0:	0e 94 71 10 	call	0x20e2	; 0x20e2 <Isb_SendMsg>
    24d4:	06 c0       	rjmp	.+12     	; 0x24e2 <Isb_Obj_Exec+0x156>
										break;
    24d6:	33 96       	adiw	r30, 0x03	; 3
					{
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND))
						{
							if (Isb_Obj[ObjIndex].IsChanged == TRUE)
							{
								for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
    24d8:	83 e0       	ldi	r24, 0x03	; 3
    24da:	e9 32       	cpi	r30, 0x29	; 41
    24dc:	f8 07       	cpc	r31, r24
    24de:	09 f0       	breq	.+2      	; 0x24e2 <Isb_Obj_Exec+0x156>
    24e0:	ad cf       	rjmp	.-166    	; 0x243c <Isb_Obj_Exec+0xb0>
										}
										Isb_SendMsg(&TxMsg);
										break;
									}
								}
								Isb_Obj[ObjIndex].IsChanged = FALSE;
    24e2:	f6 01       	movw	r30, r12
    24e4:	10 86       	std	Z+8, r1	; 0x08
							}
						}
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READONINIT))
    24e6:	f8 01       	movw	r30, r16
    24e8:	80 81       	ld	r24, Z
    24ea:	85 ff       	sbrs	r24, 5
    24ec:	59 c0       	rjmp	.+178    	; 0x25a0 <Isb_Obj_Exec+0x214>
    24ee:	e9 ec       	ldi	r30, 0xC9	; 201
    24f0:	f2 e0       	ldi	r31, 0x02	; 2
							for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
							{
//								uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_Obj_Array[ObjIndex]);
// TODO:
uint8_t Obj = ObjIndex;
								if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
    24f2:	00 81       	ld	r16, Z
    24f4:	11 81       	ldd	r17, Z+1	; 0x01
    24f6:	82 81       	ldd	r24, Z+2	; 0x02
    24f8:	87 15       	cp	r24, r7
    24fa:	09 f0       	breq	.+2      	; 0x24fe <Isb_Obj_Exec+0x172>
    24fc:	4b c0       	rjmp	.+150    	; 0x2594 <Isb_Obj_Exec+0x208>
    24fe:	01 15       	cp	r16, r1
    2500:	11 05       	cpc	r17, r1
    2502:	09 f4       	brne	.+2      	; 0x2506 <Isb_Obj_Exec+0x17a>
    2504:	47 c0       	rjmp	.+142    	; 0x2594 <Isb_Obj_Exec+0x208>
								{
									Isb_Msg_t TxMsg;
									uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
    2506:	f6 01       	movw	r30, r12
    2508:	81 81       	ldd	r24, Z+1	; 0x01
	uint8_t Isb_Obj_getDlc(uint8_t aTop)
	{

		uint8_t Dlc = 0;

		switch (aTop)
    250a:	85 30       	cpi	r24, 0x05	; 5
    250c:	69 f0       	breq	.+26     	; 0x2528 <Isb_Obj_Exec+0x19c>
    250e:	86 30       	cpi	r24, 0x06	; 6
    2510:	18 f4       	brcc	.+6      	; 0x2518 <Isb_Obj_Exec+0x18c>
    2512:	81 30       	cpi	r24, 0x01	; 1
    2514:	29 f4       	brne	.+10     	; 0x2520 <Isb_Obj_Exec+0x194>
    2516:	06 c0       	rjmp	.+12     	; 0x2524 <Isb_Obj_Exec+0x198>
    2518:	86 30       	cpi	r24, 0x06	; 6
    251a:	41 f0       	breq	.+16     	; 0x252c <Isb_Obj_Exec+0x1a0>
    251c:	87 30       	cpi	r24, 0x07	; 7
    251e:	41 f0       	breq	.+16     	; 0x2530 <Isb_Obj_Exec+0x1a4>
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	07 c0       	rjmp	.+14     	; 0x2532 <Isb_Obj_Exec+0x1a6>
    2524:	94 e0       	ldi	r25, 0x04	; 4
    2526:	05 c0       	rjmp	.+10     	; 0x2532 <Isb_Obj_Exec+0x1a6>
    2528:	95 e0       	ldi	r25, 0x05	; 5
    252a:	03 c0       	rjmp	.+6      	; 0x2532 <Isb_Obj_Exec+0x1a6>
    252c:	96 e0       	ldi	r25, 0x06	; 6
    252e:	01 c0       	rjmp	.+2      	; 0x2532 <Isb_Obj_Exec+0x1a6>
    2530:	98 e0       	ldi	r25, 0x08	; 8
									Isb_Msg_t TxMsg;
									uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
									TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
									TxMsg.DestId = Isb_Grp[GrpIndex].Id;
									TxMsg.SourceId = Isb_Node_Id;
									TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
    2532:	8e 83       	std	Y+6, r24	; 0x06
									TxMsg.Data[1] = ISB_MSG_CTRL_CMD_READ;
    2534:	1f 82       	std	Y+7, r1	; 0x07
									TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
    2536:	f6 01       	movw	r30, r12
    2538:	82 81       	ldd	r24, Z+2	; 0x02
    253a:	88 87       	std	Y+8, r24	; 0x08
    253c:	60 e0       	ldi	r22, 0x00	; 0
									for (uint8_t i = 0; i < (Dlc - 3); i++)
    253e:	49 2f       	mov	r20, r25
    2540:	50 e0       	ldi	r21, 0x00	; 0
    2542:	43 50       	subi	r20, 0x03	; 3
    2544:	50 40       	sbci	r21, 0x00	; 0
									{
										TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
    2546:	97 01       	movw	r18, r14
    2548:	f3 e0       	ldi	r31, 0x03	; 3
    254a:	22 0f       	add	r18, r18
    254c:	33 1f       	adc	r19, r19
    254e:	fa 95       	dec	r31
    2550:	e1 f7       	brne	.-8      	; 0x254a <Isb_Obj_Exec+0x1be>
    2552:	2e 0d       	add	r18, r14
    2554:	3f 1d       	adc	r19, r15
    2556:	20 56       	subi	r18, 0x60	; 96
    2558:	3e 4f       	sbci	r19, 0xFE	; 254
    255a:	09 c0       	rjmp	.+18     	; 0x256e <Isb_Obj_Exec+0x1e2>
    255c:	f1 01       	movw	r30, r2
    255e:	ea 0f       	add	r30, r26
    2560:	fb 1f       	adc	r31, r27
    2562:	a2 0f       	add	r26, r18
    2564:	b3 1f       	adc	r27, r19
    2566:	13 96       	adiw	r26, 0x03	; 3
    2568:	8c 91       	ld	r24, X
    256a:	80 83       	st	Z, r24
									TxMsg.DestId = Isb_Grp[GrpIndex].Id;
									TxMsg.SourceId = Isb_Node_Id;
									TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
									TxMsg.Data[1] = ISB_MSG_CTRL_CMD_READ;
									TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
									for (uint8_t i = 0; i < (Dlc - 3); i++)
    256c:	6f 5f       	subi	r22, 0xFF	; 255
    256e:	a6 2f       	mov	r26, r22
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	a4 17       	cp	r26, r20
    2574:	b5 07       	cpc	r27, r21
    2576:	94 f3       	brlt	.-28     	; 0x255c <Isb_Obj_Exec+0x1d0>
								{
									Isb_Msg_t TxMsg;
									uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
									TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
									TxMsg.DestId = Isb_Grp[GrpIndex].Id;
									TxMsg.SourceId = Isb_Node_Id;
    2578:	9d 82       	std	Y+5, r9	; 0x05
    257a:	8c 82       	std	Y+4, r8	; 0x04
								if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
								{
									Isb_Msg_t TxMsg;
									uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
									TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
									TxMsg.DestId = Isb_Grp[GrpIndex].Id;
    257c:	1b 83       	std	Y+3, r17	; 0x03
    257e:	0a 83       	std	Y+2, r16	; 0x02
uint8_t Obj = ObjIndex;
								if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
								{
									Isb_Msg_t TxMsg;
									uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
									TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
    2580:	90 62       	ori	r25, 0x20	; 32
    2582:	99 83       	std	Y+1, r25	; 0x01
									TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
									for (uint8_t i = 0; i < (Dlc - 3); i++)
									{
										TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
									}
									Isb_SendMsg(&TxMsg);
    2584:	c2 01       	movw	r24, r4
    2586:	0e 94 71 10 	call	0x20e2	; 0x20e2 <Isb_SendMsg>
									Isb_Obj[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    258a:	f6 01       	movw	r30, r12
    258c:	80 81       	ld	r24, Z
    258e:	8f 7d       	andi	r24, 0xDF	; 223
    2590:	80 83       	st	Z, r24
    2592:	06 c0       	rjmp	.+12     	; 0x25a0 <Isb_Obj_Exec+0x214>
									break;
    2594:	33 96       	adiw	r30, 0x03	; 3
								Isb_Obj[ObjIndex].IsChanged = FALSE;
							}
						}
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READONINIT))
						{
							for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
    2596:	83 e0       	ldi	r24, 0x03	; 3
    2598:	e9 32       	cpi	r30, 0x29	; 41
    259a:	f8 07       	cpc	r31, r24
    259c:	09 f0       	breq	.+2      	; 0x25a0 <Isb_Obj_Exec+0x214>
    259e:	a9 cf       	rjmp	.-174    	; 0x24f2 <Isb_Obj_Exec+0x166>
    25a0:	08 94       	sec
    25a2:	e1 1c       	adc	r14, r1
    25a4:	f1 1c       	adc	r15, r1
    25a6:	e9 e0       	ldi	r30, 0x09	; 9
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	ce 0e       	add	r12, r30
    25ac:	df 1e       	adc	r13, r31
	{

		#if defined(ISB_OBJ_MAX)
		if (bit_is_set(Isb_Obj_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
		{
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_MAX; ObjIndex++)
    25ae:	f0 e2       	ldi	r31, 0x20	; 32
    25b0:	ef 16       	cp	r14, r31
    25b2:	f1 04       	cpc	r15, r1
    25b4:	09 f0       	breq	.+2      	; 0x25b8 <Isb_Obj_Exec+0x22c>
    25b6:	1d cf       	rjmp	.-454    	; 0x23f2 <Isb_Obj_Exec+0x66>
							}
						}
					}
				}
			}
			Isb_Obj_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    25b8:	80 91 aa 00 	lds	r24, 0x00AA
    25bc:	8e 7f       	andi	r24, 0xFE	; 254
    25be:	80 93 aa 00 	sts	0x00AA, r24
		}
		#endif /* ISB_OBJ_MAX */

	}
    25c2:	2d 96       	adiw	r28, 0x0d	; 13
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	1f 91       	pop	r17
    25d4:	0f 91       	pop	r16
    25d6:	ff 90       	pop	r15
    25d8:	ef 90       	pop	r14
    25da:	df 90       	pop	r13
    25dc:	cf 90       	pop	r12
    25de:	bf 90       	pop	r11
    25e0:	af 90       	pop	r10
    25e2:	9f 90       	pop	r9
    25e4:	8f 90       	pop	r8
    25e6:	7f 90       	pop	r7
    25e8:	6f 90       	pop	r6
    25ea:	5f 90       	pop	r5
    25ec:	4f 90       	pop	r4
    25ee:	3f 90       	pop	r3
    25f0:	2f 90       	pop	r2
    25f2:	08 95       	ret

000025f4 <Isb_Config_Rx>:
#ifndef ISB_SRV_CONFIG_C_
	#define ISB_SRV_CONFIG_C_



	void Isb_Config_Rx(Isb_Msg_t * aIsb_Msg) {
    25f4:	df 92       	push	r13
    25f6:	ef 92       	push	r14
    25f8:	ff 92       	push	r15
    25fa:	0f 93       	push	r16
    25fc:	1f 93       	push	r17
    25fe:	df 93       	push	r29
    2600:	cf 93       	push	r28
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	2d 97       	sbiw	r28, 0x0d	; 13
    2608:	0f b6       	in	r0, 0x3f	; 63
    260a:	f8 94       	cli
    260c:	de bf       	out	0x3e, r29	; 62
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	cd bf       	out	0x3d, r28	; 61
    2612:	ac 01       	movw	r20, r24
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
    2614:	fc 01       	movw	r30, r24
    2616:	d0 80       	ld	r13, Z
    2618:	6d 2d       	mov	r22, r13
    261a:	6f 70       	andi	r22, 0x0F	; 15
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
    261c:	e3 80       	ldd	r14, Z+3	; 0x03
    261e:	f4 80       	ldd	r15, Z+4	; 0x04
		MsgTx.SourceId = Isb_Node_Id;
    2620:	00 91 a5 00 	lds	r16, 0x00A5
    2624:	10 91 a6 00 	lds	r17, 0x00A6
    2628:	dc 01       	movw	r26, r24
    262a:	fe 01       	movw	r30, r28
    262c:	36 96       	adiw	r30, 0x06	; 6
		for (uint8_t i = 0; i < Dlc; i++) {
    262e:	9e 01       	movw	r18, r28
    2630:	26 0f       	add	r18, r22
    2632:	31 1d       	adc	r19, r1
    2634:	2a 5f       	subi	r18, 0xFA	; 250
    2636:	3f 4f       	sbci	r19, 0xFF	; 255
    2638:	04 c0       	rjmp	.+8      	; 0x2642 <Isb_Config_Rx+0x4e>
			MsgTx.Data[i] = aIsb_Msg->Data[i];
    263a:	14 96       	adiw	r26, 0x04	; 4
    263c:	8c 91       	ld	r24, X
    263e:	14 97       	sbiw	r26, 0x04	; 4
    2640:	81 93       	st	Z+, r24
    2642:	11 96       	adiw	r26, 0x01	; 1
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
		MsgTx.SourceId = Isb_Node_Id;
		for (uint8_t i = 0; i < Dlc; i++) {
    2644:	e2 17       	cp	r30, r18
    2646:	f3 07       	cpc	r31, r19
    2648:	c1 f7       	brne	.-16     	; 0x263a <Isb_Config_Rx+0x46>
			MsgTx.Data[i] = aIsb_Msg->Data[i];
		}
		if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_SETMODE) {
    264a:	fa 01       	movw	r30, r20
    264c:	85 81       	ldd	r24, Z+5	; 0x05
    264e:	82 30       	cpi	r24, 0x02	; 2
    2650:	09 f0       	breq	.+2      	; 0x2654 <Isb_Config_Rx+0x60>
    2652:	90 c0       	rjmp	.+288    	; 0x2774 <Isb_Config_Rx+0x180>
			if (Dlc == ISB_MSG_FLAGS_DLC_2) {
    2654:	62 30       	cpi	r22, 0x02	; 2
    2656:	09 f0       	breq	.+2      	; 0x265a <Isb_Config_Rx+0x66>
    2658:	46 c1       	rjmp	.+652    	; 0x28e6 <Isb_Config_Rx+0x2f2>
				MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_2;
				MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    265a:	8e 81       	ldd	r24, Y+6	; 0x06
    265c:	80 6c       	ori	r24, 0xC0	; 192
    265e:	8e 83       	std	Y+6, r24	; 0x06
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__BL_NORM) {
    2660:	26 81       	ldd	r18, Z+6	; 0x06
    2662:	22 23       	and	r18, r18
    2664:	c1 f4       	brne	.+48     	; 0x2696 <Isb_Config_Rx+0xa2>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2666:	e1 99       	sbic	0x1c, 1	; 28
    2668:	fe cf       	rjmp	.-4      	; 0x2666 <Isb_Config_Rx+0x72>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    266a:	82 e1       	ldi	r24, 0x12	; 18
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	9f bb       	out	0x1f, r25	; 31
    2670:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2672:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2674:	8d b3       	in	r24, 0x1d	; 29
	}



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
    2676:	88 23       	and	r24, r24
    2678:	09 f4       	brne	.+2      	; 0x267c <Isb_Config_Rx+0x88>
    267a:	62 c0       	rjmp	.+196    	; 0x2740 <Isb_Config_Rx+0x14c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    267c:	e1 99       	sbic	0x1c, 1	; 28
    267e:	fe cf       	rjmp	.-4      	; 0x267c <Isb_Config_Rx+0x88>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2680:	82 e1       	ldi	r24, 0x12	; 18
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	9f bb       	out	0x1f, r25	; 31
    2686:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2688:	1d ba       	out	0x1d, r1	; 29

    __asm__ __volatile__ (
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	e2 9a       	sbi	0x1c, 2	; 28
    2690:	e1 9a       	sbi	0x1c, 1	; 28
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	6e c0       	rjmp	.+220    	; 0x2772 <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__BL_FLASH) {
    2696:	21 30       	cpi	r18, 0x01	; 1
    2698:	c9 f4       	brne	.+50     	; 0x26cc <Isb_Config_Rx+0xd8>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    269a:	e1 99       	sbic	0x1c, 1	; 28
    269c:	fe cf       	rjmp	.-4      	; 0x269a <Isb_Config_Rx+0xa6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    269e:	82 e1       	ldi	r24, 0x12	; 18
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	9f bb       	out	0x1f, r25	; 31
    26a4:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    26a6:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    26a8:	8d b3       	in	r24, 0x1d	; 29
    26aa:	81 30       	cpi	r24, 0x01	; 1
    26ac:	09 f4       	brne	.+2      	; 0x26b0 <Isb_Config_Rx+0xbc>
    26ae:	61 c0       	rjmp	.+194    	; 0x2772 <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    26b0:	e1 99       	sbic	0x1c, 1	; 28
    26b2:	fe cf       	rjmp	.-4      	; 0x26b0 <Isb_Config_Rx+0xbc>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    26b4:	82 e1       	ldi	r24, 0x12	; 18
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	9f bb       	out	0x1f, r25	; 31
    26ba:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	f8 94       	cli
    26c4:	e2 9a       	sbi	0x1c, 2	; 28
    26c6:	e1 9a       	sbi	0x1c, 1	; 28
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	53 c0       	rjmp	.+166    	; 0x2772 <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_FLASH);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__FW_NORM) {
    26cc:	28 30       	cpi	r18, 0x08	; 8
    26ce:	09 f0       	breq	.+2      	; 0x26d2 <Isb_Config_Rx+0xde>
    26d0:	37 c0       	rjmp	.+110    	; 0x2740 <Isb_Config_Rx+0x14c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    26d2:	e1 99       	sbic	0x1c, 1	; 28
    26d4:	fe cf       	rjmp	.-4      	; 0x26d2 <Isb_Config_Rx+0xde>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    26d6:	8b e1       	ldi	r24, 0x1B	; 27
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	9f bb       	out	0x1f, r25	; 31
    26dc:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    26de:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    26e0:	2d b3       	in	r18, 0x1d	; 29
					uint8_t crc = lib_eep_read_byte((uint8_t *)EEP__ISB_CONFIG_CRC);
					crc++;
    26e2:	2f 5f       	subi	r18, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    26e4:	e1 99       	sbic	0x1c, 1	; 28
    26e6:	fe cf       	rjmp	.-4      	; 0x26e4 <Isb_Config_Rx+0xf0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    26e8:	8b e1       	ldi	r24, 0x1B	; 27
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	9f bb       	out	0x1f, r25	; 31
    26ee:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    26f0:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    26f2:	8d b3       	in	r24, 0x1d	; 29
    26f4:	82 17       	cp	r24, r18
    26f6:	61 f0       	breq	.+24     	; 0x2710 <Isb_Config_Rx+0x11c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    26f8:	e1 99       	sbic	0x1c, 1	; 28
    26fa:	fe cf       	rjmp	.-4      	; 0x26f8 <Isb_Config_Rx+0x104>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    26fc:	8b e1       	ldi	r24, 0x1B	; 27
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	9f bb       	out	0x1f, r25	; 31
    2702:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2704:	2d bb       	out	0x1d, r18	; 29

    __asm__ __volatile__ (
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	e2 9a       	sbi	0x1c, 2	; 28
    270c:	e1 9a       	sbi	0x1c, 1	; 28
    270e:	0f be       	out	0x3f, r0	; 63
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2710:	e1 99       	sbic	0x1c, 1	; 28
    2712:	fe cf       	rjmp	.-4      	; 0x2710 <Isb_Config_Rx+0x11c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2714:	82 e1       	ldi	r24, 0x12	; 18
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	9f bb       	out	0x1f, r25	; 31
    271a:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    271c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    271e:	8d b3       	in	r24, 0x1d	; 29
    2720:	88 30       	cpi	r24, 0x08	; 8
    2722:	39 f1       	breq	.+78     	; 0x2772 <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2724:	e1 99       	sbic	0x1c, 1	; 28
    2726:	fe cf       	rjmp	.-4      	; 0x2724 <Isb_Config_Rx+0x130>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2728:	82 e1       	ldi	r24, 0x12	; 18
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	9f bb       	out	0x1f, r25	; 31
    272e:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2730:	88 e0       	ldi	r24, 0x08	; 8
    2732:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	e2 9a       	sbi	0x1c, 2	; 28
    273a:	e1 9a       	sbi	0x1c, 1	; 28
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	19 c0       	rjmp	.+50     	; 0x2772 <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_CONFIG_CRC, crc);
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__FW_NORM);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__FW_CFG) {
    2740:	29 30       	cpi	r18, 0x09	; 9
    2742:	b9 f4       	brne	.+46     	; 0x2772 <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2744:	e1 99       	sbic	0x1c, 1	; 28
    2746:	fe cf       	rjmp	.-4      	; 0x2744 <Isb_Config_Rx+0x150>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2748:	82 e1       	ldi	r24, 0x12	; 18
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	9f bb       	out	0x1f, r25	; 31
    274e:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2750:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2752:	8d b3       	in	r24, 0x1d	; 29
    2754:	89 30       	cpi	r24, 0x09	; 9
    2756:	69 f0       	breq	.+26     	; 0x2772 <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2758:	e1 99       	sbic	0x1c, 1	; 28
    275a:	fe cf       	rjmp	.-4      	; 0x2758 <Isb_Config_Rx+0x164>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    275c:	82 e1       	ldi	r24, 0x12	; 18
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	9f bb       	out	0x1f, r25	; 31
    2762:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2764:	89 e0       	ldi	r24, 0x09	; 9
    2766:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    2768:	0f b6       	in	r0, 0x3f	; 63
    276a:	f8 94       	cli
    276c:	e2 9a       	sbi	0x1c, 2	; 28
    276e:	e1 9a       	sbi	0x1c, 1	; 28
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	ff cf       	rjmp	.-2      	; 0x2772 <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__FW_CFG);
				}
				Node_Reboot();
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_INITEEPROM) {
    2774:	86 30       	cpi	r24, 0x06	; 6
    2776:	09 f0       	breq	.+2      	; 0x277a <Isb_Config_Rx+0x186>
    2778:	43 c0       	rjmp	.+134    	; 0x2800 <Isb_Config_Rx+0x20c>
			if (Dlc == ISB_MSG_FLAGS_DLC_1) {
    277a:	61 30       	cpi	r22, 0x01	; 1
    277c:	09 f0       	breq	.+2      	; 0x2780 <Isb_Config_Rx+0x18c>
    277e:	b3 c0       	rjmp	.+358    	; 0x28e6 <Isb_Config_Rx+0x2f2>
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
    2780:	80 91 a8 00 	lds	r24, 0x00A8
    2784:	89 30       	cpi	r24, 0x09	; 9
    2786:	09 f0       	breq	.+2      	; 0x278a <Isb_Config_Rx+0x196>
    2788:	ae c0       	rjmp	.+348    	; 0x28e6 <Isb_Config_Rx+0x2f2>
					MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_1;
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
    278a:	80 91 a7 00 	lds	r24, 0x00A7
    278e:	28 2f       	mov	r18, r24
    2790:	30 e0       	ldi	r19, 0x00	; 0
						wdt_reset();
    2792:	a8 95       	wdr
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2794:	e1 99       	sbic	0x1c, 1	; 28
    2796:	fe cf       	rjmp	.-4      	; 0x2794 <Isb_Config_Rx+0x1a0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2798:	3f bb       	out	0x1f, r19	; 31
    279a:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    279c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    279e:	8d b3       	in	r24, 0x1d	; 29
    27a0:	88 23       	and	r24, r24
    27a2:	51 f0       	breq	.+20     	; 0x27b8 <Isb_Config_Rx+0x1c4>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    27a4:	e1 99       	sbic	0x1c, 1	; 28
    27a6:	fe cf       	rjmp	.-4      	; 0x27a4 <Isb_Config_Rx+0x1b0>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    27a8:	3f bb       	out	0x1f, r19	; 31
    27aa:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    27ac:	1d ba       	out	0x1d, r1	; 29

    __asm__ __volatile__ (
    27ae:	0f b6       	in	r0, 0x3f	; 63
    27b0:	f8 94       	cli
    27b2:	e2 9a       	sbi	0x1c, 2	; 28
    27b4:	e1 9a       	sbi	0x1c, 1	; 28
    27b6:	0f be       	out	0x3f, r0	; 63
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_INITEEPROM) {
			if (Dlc == ISB_MSG_FLAGS_DLC_1) {
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
					MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_1;
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
    27b8:	2f 5f       	subi	r18, 0xFF	; 255
    27ba:	3f 4f       	sbci	r19, 0xFF	; 255
    27bc:	f2 e0       	ldi	r31, 0x02	; 2
    27be:	20 30       	cpi	r18, 0x00	; 0
    27c0:	3f 07       	cpc	r19, r31
    27c2:	38 f3       	brcs	.-50     	; 0x2792 <Isb_Config_Rx+0x19e>
    27c4:	2c e1       	ldi	r18, 0x1C	; 28
    27c6:	30 e0       	ldi	r19, 0x00	; 0
						wdt_reset();
						lib_eep_write_byte((uint8_t *) ee_Addr, 0x00);
					}
					for (uint8_t i = 0; i < 4; i++) {
						lib_eep_write_byte((uint8_t *)(EEP__ISB_CONFIG_CODE_0 + i), Isb_Firmware_Code[i]);
    27c8:	f9 01       	movw	r30, r18
    27ca:	ec 5b       	subi	r30, 0xBC	; 188
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    27d0:	e1 99       	sbic	0x1c, 1	; 28
    27d2:	fe cf       	rjmp	.-4      	; 0x27d0 <Isb_Config_Rx+0x1dc>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    27d4:	3f bb       	out	0x1f, r19	; 31
    27d6:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    27d8:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    27da:	8d b3       	in	r24, 0x1d	; 29
    27dc:	8e 17       	cp	r24, r30
    27de:	51 f0       	breq	.+20     	; 0x27f4 <Isb_Config_Rx+0x200>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    27e0:	e1 99       	sbic	0x1c, 1	; 28
    27e2:	fe cf       	rjmp	.-4      	; 0x27e0 <Isb_Config_Rx+0x1ec>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    27e4:	3f bb       	out	0x1f, r19	; 31
    27e6:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    27e8:	ed bb       	out	0x1d, r30	; 29

    __asm__ __volatile__ (
    27ea:	0f b6       	in	r0, 0x3f	; 63
    27ec:	f8 94       	cli
    27ee:	e2 9a       	sbi	0x1c, 2	; 28
    27f0:	e1 9a       	sbi	0x1c, 1	; 28
    27f2:	0f be       	out	0x3f, r0	; 63
    27f4:	2f 5f       	subi	r18, 0xFF	; 255
    27f6:	3f 4f       	sbci	r19, 0xFF	; 255
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
						wdt_reset();
						lib_eep_write_byte((uint8_t *) ee_Addr, 0x00);
					}
					for (uint8_t i = 0; i < 4; i++) {
    27f8:	20 32       	cpi	r18, 0x20	; 32
    27fa:	31 05       	cpc	r19, r1
    27fc:	29 f7       	brne	.-54     	; 0x27c8 <Isb_Config_Rx+0x1d4>
    27fe:	ff cf       	rjmp	.-2      	; 0x27fe <Isb_Config_Rx+0x20a>
					}
					Node_Reboot();
				}
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_READEEPROMBLOCK) {
    2800:	87 30       	cpi	r24, 0x07	; 7
    2802:	71 f5       	brne	.+92     	; 0x2860 <Isb_Config_Rx+0x26c>
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
    2804:	64 30       	cpi	r22, 0x04	; 4
    2806:	08 f4       	brcc	.+2      	; 0x280a <Isb_Config_Rx+0x216>
    2808:	6e c0       	rjmp	.+220    	; 0x28e6 <Isb_Config_Rx+0x2f2>
				Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
    280a:	fa 01       	movw	r30, r20
    280c:	97 81       	ldd	r25, Z+7	; 0x07
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	26 81       	ldd	r18, Z+6	; 0x06
    2812:	dc 01       	movw	r26, r24
    2814:	a2 0f       	add	r26, r18
    2816:	b1 1d       	adc	r27, r1
				if (Addr < EEP_SIZE) {
    2818:	f2 e0       	ldi	r31, 0x02	; 2
    281a:	a0 30       	cpi	r26, 0x00	; 0
    281c:	bf 07       	cpc	r27, r31
    281e:	08 f0       	brcs	.+2      	; 0x2822 <Isb_Config_Rx+0x22e>
    2820:	62 c0       	rjmp	.+196    	; 0x28e6 <Isb_Config_Rx+0x2f2>
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    2822:	8e 81       	ldd	r24, Y+6	; 0x06
    2824:	80 6c       	ori	r24, 0xC0	; 192
    2826:	8e 83       	std	Y+6, r24	; 0x06
    2828:	40 e0       	ldi	r20, 0x00	; 0
					for (uint8_t i = 0; i < (Dlc - 3); i++) {
    282a:	26 2f       	mov	r18, r22
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	23 50       	subi	r18, 0x03	; 3
    2830:	30 40       	sbci	r19, 0x00	; 0
						MsgTx.Data[3 + i] = lib_eep_read_byte((uint8_t *)(Addr + i));
    2832:	be 01       	movw	r22, r28
    2834:	67 5f       	subi	r22, 0xF7	; 247
    2836:	7f 4f       	sbci	r23, 0xFF	; 255
    2838:	0d c0       	rjmp	.+26     	; 0x2854 <Isb_Config_Rx+0x260>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    283a:	e1 99       	sbic	0x1c, 1	; 28
    283c:	fe cf       	rjmp	.-4      	; 0x283a <Isb_Config_Rx+0x246>
    283e:	cd 01       	movw	r24, r26
    2840:	84 0f       	add	r24, r20
    2842:	91 1d       	adc	r25, r1
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2844:	9f bb       	out	0x1f, r25	; 31
    2846:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2848:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    284a:	8d b3       	in	r24, 0x1d	; 29
    284c:	e6 0f       	add	r30, r22
    284e:	f7 1f       	adc	r31, r23
    2850:	80 83       	st	Z, r24
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_READEEPROMBLOCK) {
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
				Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
				if (Addr < EEP_SIZE) {
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2852:	4f 5f       	subi	r20, 0xFF	; 255
    2854:	e4 2f       	mov	r30, r20
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	e2 17       	cp	r30, r18
    285a:	f3 07       	cpc	r31, r19
    285c:	74 f3       	brlt	.-36     	; 0x283a <Isb_Config_Rx+0x246>
    285e:	43 c0       	rjmp	.+134    	; 0x28e6 <Isb_Config_Rx+0x2f2>
						MsgTx.Data[3 + i] = lib_eep_read_byte((uint8_t *)(Addr + i));
					}
				}
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_WRITEEEPROMBLOCK) {
    2860:	88 30       	cpi	r24, 0x08	; 8
    2862:	09 f0       	breq	.+2      	; 0x2866 <Isb_Config_Rx+0x272>
    2864:	40 c0       	rjmp	.+128    	; 0x28e6 <Isb_Config_Rx+0x2f2>
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
    2866:	64 30       	cpi	r22, 0x04	; 4
    2868:	08 f4       	brcc	.+2      	; 0x286c <Isb_Config_Rx+0x278>
    286a:	3d c0       	rjmp	.+122    	; 0x28e6 <Isb_Config_Rx+0x2f2>
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
    286c:	80 91 a8 00 	lds	r24, 0x00A8
    2870:	89 30       	cpi	r24, 0x09	; 9
    2872:	09 f0       	breq	.+2      	; 0x2876 <Isb_Config_Rx+0x282>
    2874:	38 c0       	rjmp	.+112    	; 0x28e6 <Isb_Config_Rx+0x2f2>
					Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
    2876:	fa 01       	movw	r30, r20
    2878:	97 81       	ldd	r25, Z+7	; 0x07
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	26 81       	ldd	r18, Z+6	; 0x06
    287e:	dc 01       	movw	r26, r24
    2880:	a2 0f       	add	r26, r18
    2882:	b1 1d       	adc	r27, r1
					if ((Addr >= Isb_Firmware_Offset) & (Addr < EEP_SIZE)) {
    2884:	80 91 a7 00 	lds	r24, 0x00A7
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	a8 17       	cp	r26, r24
    288c:	b9 07       	cpc	r27, r25
    288e:	58 f1       	brcs	.+86     	; 0x28e6 <Isb_Config_Rx+0x2f2>
    2890:	f2 e0       	ldi	r31, 0x02	; 2
    2892:	a0 30       	cpi	r26, 0x00	; 0
    2894:	bf 07       	cpc	r27, r31
    2896:	38 f5       	brcc	.+78     	; 0x28e6 <Isb_Config_Rx+0x2f2>
						MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    2898:	8e 81       	ldd	r24, Y+6	; 0x06
    289a:	80 6c       	ori	r24, 0xC0	; 192
    289c:	8e 83       	std	Y+6, r24	; 0x06
    289e:	90 e0       	ldi	r25, 0x00	; 0
						for (uint8_t i = 0; i < (Dlc - 3); i++) {
    28a0:	26 2f       	mov	r18, r22
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	23 50       	subi	r18, 0x03	; 3
    28a6:	30 40       	sbci	r19, 0x00	; 0
    28a8:	19 c0       	rjmp	.+50     	; 0x28dc <Isb_Config_Rx+0x2e8>
							lib_eep_write_byte((uint8_t *)(Addr + i), aIsb_Msg->Data[3 + i]);
    28aa:	bf 01       	movw	r22, r30
    28ac:	6a 0f       	add	r22, r26
    28ae:	7b 1f       	adc	r23, r27
    28b0:	e4 0f       	add	r30, r20
    28b2:	f5 1f       	adc	r31, r21
    28b4:	e0 85       	ldd	r30, Z+8	; 0x08
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    28b6:	e1 99       	sbic	0x1c, 1	; 28
    28b8:	fe cf       	rjmp	.-4      	; 0x28b6 <Isb_Config_Rx+0x2c2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    28ba:	7f bb       	out	0x1f, r23	; 31
    28bc:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
    28be:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    28c0:	8d b3       	in	r24, 0x1d	; 29
    28c2:	8e 17       	cp	r24, r30
    28c4:	51 f0       	breq	.+20     	; 0x28da <Isb_Config_Rx+0x2e6>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    28c6:	e1 99       	sbic	0x1c, 1	; 28
    28c8:	fe cf       	rjmp	.-4      	; 0x28c6 <Isb_Config_Rx+0x2d2>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    28ca:	7f bb       	out	0x1f, r23	; 31
    28cc:	6e bb       	out	0x1e, r22	; 30
#endif
    EEDR = __value;
    28ce:	ed bb       	out	0x1d, r30	; 29

    __asm__ __volatile__ (
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	f8 94       	cli
    28d4:	e2 9a       	sbi	0x1c, 2	; 28
    28d6:	e1 9a       	sbi	0x1c, 1	; 28
    28d8:	0f be       	out	0x3f, r0	; 63
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
					Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
					if ((Addr >= Isb_Firmware_Offset) & (Addr < EEP_SIZE)) {
						MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
						for (uint8_t i = 0; i < (Dlc - 3); i++) {
    28da:	9f 5f       	subi	r25, 0xFF	; 255
    28dc:	e9 2f       	mov	r30, r25
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	e2 17       	cp	r30, r18
    28e2:	f3 07       	cpc	r31, r19
    28e4:	14 f3       	brlt	.-60     	; 0x28aa <Isb_Config_Rx+0x2b6>
						}
					}
				}
			}
		}
		MsgTx.Data[0] |= ISB_CONFIG_ANSWER_NACK;
    28e6:	8e 81       	ldd	r24, Y+6	; 0x06
    28e8:	80 64       	ori	r24, 0x40	; 64
    28ea:	8e 83       	std	Y+6, r24	; 0x06
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
		MsgTx.SourceId = Isb_Node_Id;
    28ec:	1d 83       	std	Y+5, r17	; 0x05
    28ee:	0c 83       	std	Y+4, r16	; 0x04
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
    28f0:	fb 82       	std	Y+3, r15	; 0x03
    28f2:	ea 82       	std	Y+2, r14	; 0x02
	void Isb_Config_Rx(Isb_Msg_t * aIsb_Msg) {
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
    28f4:	d9 82       	std	Y+1, r13	; 0x01
					}
				}
			}
		}
		MsgTx.Data[0] |= ISB_CONFIG_ANSWER_NACK;
		Isb_SendMsg(&MsgTx);
    28f6:	ce 01       	movw	r24, r28
    28f8:	01 96       	adiw	r24, 0x01	; 1
    28fa:	0e 94 71 10 	call	0x20e2	; 0x20e2 <Isb_SendMsg>
	}
    28fe:	2d 96       	adiw	r28, 0x0d	; 13
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	f8 94       	cli
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	cd bf       	out	0x3d, r28	; 61
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	1f 91       	pop	r17
    2910:	0f 91       	pop	r16
    2912:	ff 90       	pop	r15
    2914:	ef 90       	pop	r14
    2916:	df 90       	pop	r13
    2918:	08 95       	ret

0000291a <lib_eep_fw_read_word>:
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    return __eerd_word (__p, eeprom_read_byte);
    291a:	20 91 a7 00 	lds	r18, 0x00A7
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	22 0f       	add	r18, r18
    2922:	33 1f       	adc	r19, r19
    2924:	82 0f       	add	r24, r18
    2926:	93 1f       	adc	r25, r19
    2928:	65 e7       	ldi	r22, 0x75	; 117
    292a:	70 e0       	ldi	r23, 0x00	; 0
    292c:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__eerd_word>



	uint16_t __attribute__((always_inline)) lib_eep_fw_read_word(uint16_t * aAddr) {
		return eeprom_read_word(Isb_Firmware_Offset + aAddr);;
	}
    2930:	08 95       	ret

00002932 <lib_eep_read_word>:
    2932:	65 e7       	ldi	r22, 0x75	; 117
    2934:	70 e0       	ldi	r23, 0x00	; 0
    2936:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__eerd_word>



	uint16_t __attribute__((always_inline)) lib_eep_read_word(uint16_t * aAddr) {
		return eeprom_read_word(aAddr);;
	}
    293a:	08 95       	ret

0000293c <main>:



	int main(void)
	{
    293c:	cf 92       	push	r12
    293e:	df 92       	push	r13
    2940:	ef 92       	push	r14
    2942:	ff 92       	push	r15
    2944:	0f 93       	push	r16
    2946:	1f 93       	push	r17
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	2d 97       	sbiw	r28, 0x0d	; 13
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	f8 94       	cli
    2956:	de bf       	out	0x3e, r29	; 62
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	cd bf       	out	0x3d, r28	; 61
		wdt_enable(WDTO_500MS);
    295c:	8d e0       	ldi	r24, 0x0D	; 13
    295e:	28 e1       	ldi	r18, 0x18	; 24
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	f8 94       	cli
    2966:	a8 95       	wdr
    2968:	21 bd       	out	0x21, r18	; 33
    296a:	0f be       	out	0x3f, r0	; 63
    296c:	81 bd       	out	0x21, r24	; 33
		wdt_reset();
    296e:	a8 95       	wdr
    2970:	80 e1       	ldi	r24, 0x10	; 16
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	65 e7       	ldi	r22, 0x75	; 117
    2976:	70 e0       	ldi	r23, 0x00	; 0
    2978:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__eerd_word>
    297c:	6c 01       	movw	r12, r24
		Isb_Node_Id = lib_eep_read_word((uint16_t *)EEP__ISB_NODE_ID_0);
    297e:	90 93 a6 00 	sts	0x00A6, r25
    2982:	80 93 a5 00 	sts	0x00A5, r24
		if ((Isb_Node_Id == 0) | (Isb_Node_Id > 2047)) {
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	8f 5f       	subi	r24, 0xFF	; 255
    298a:	97 40       	sbci	r25, 0x07	; 7
    298c:	b8 f0       	brcs	.+46     	; 0x29bc <main+0x80>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    298e:	e1 99       	sbic	0x1c, 1	; 28
    2990:	fe cf       	rjmp	.-4      	; 0x298e <main+0x52>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2992:	82 e1       	ldi	r24, 0x12	; 18
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	9f bb       	out	0x1f, r25	; 31
    2998:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    299a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    299c:	8d b3       	in	r24, 0x1d	; 29



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
    299e:	88 23       	and	r24, r24
    29a0:	61 f0       	breq	.+24     	; 0x29ba <main+0x7e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    29a2:	e1 99       	sbic	0x1c, 1	; 28
    29a4:	fe cf       	rjmp	.-4      	; 0x29a2 <main+0x66>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    29a6:	82 e1       	ldi	r24, 0x12	; 18
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	9f bb       	out	0x1f, r25	; 31
    29ac:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    29ae:	1d ba       	out	0x1d, r1	; 29

    __asm__ __volatile__ (
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	e2 9a       	sbi	0x1c, 2	; 28
    29b6:	e1 9a       	sbi	0x1c, 1	; 28
    29b8:	0f be       	out	0x3f, r0	; 63
    29ba:	ff cf       	rjmp	.-2      	; 0x29ba <main+0x7e>
    29bc:	2c e0       	ldi	r18, 0x0C	; 12
    29be:	30 e0       	ldi	r19, 0x00	; 0
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
			Node_Reboot();
		}
		for (uint8_t i = 0; i < 4; i++) {
			lib_eep_write_byte((uint8_t *)(EEP__ISB_FIRMWARE_CODE_0 + i), Isb_Firmware_Code[i]);
    29c0:	f9 01       	movw	r30, r18
    29c2:	ec 5a       	subi	r30, 0xAC	; 172
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    29c8:	e1 99       	sbic	0x1c, 1	; 28
    29ca:	fe cf       	rjmp	.-4      	; 0x29c8 <main+0x8c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    29cc:	3f bb       	out	0x1f, r19	; 31
    29ce:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    29d0:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    29d2:	8d b3       	in	r24, 0x1d	; 29
    29d4:	8e 17       	cp	r24, r30
    29d6:	51 f0       	breq	.+20     	; 0x29ec <main+0xb0>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    29d8:	e1 99       	sbic	0x1c, 1	; 28
    29da:	fe cf       	rjmp	.-4      	; 0x29d8 <main+0x9c>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    29dc:	3f bb       	out	0x1f, r19	; 31
    29de:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    29e0:	ed bb       	out	0x1d, r30	; 29

    __asm__ __volatile__ (
    29e2:	0f b6       	in	r0, 0x3f	; 63
    29e4:	f8 94       	cli
    29e6:	e2 9a       	sbi	0x1c, 2	; 28
    29e8:	e1 9a       	sbi	0x1c, 1	; 28
    29ea:	0f be       	out	0x3f, r0	; 63
    29ec:	2f 5f       	subi	r18, 0xFF	; 255
    29ee:	3f 4f       	sbci	r19, 0xFF	; 255
		Isb_Node_Id = lib_eep_read_word((uint16_t *)EEP__ISB_NODE_ID_0);
		if ((Isb_Node_Id == 0) | (Isb_Node_Id > 2047)) {
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
			Node_Reboot();
		}
		for (uint8_t i = 0; i < 4; i++) {
    29f0:	20 31       	cpi	r18, 0x10	; 16
    29f2:	31 05       	cpc	r19, r1
    29f4:	29 f7       	brne	.-54     	; 0x29c0 <main+0x84>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    29f6:	e1 99       	sbic	0x1c, 1	; 28
    29f8:	fe cf       	rjmp	.-4      	; 0x29f6 <main+0xba>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    29fa:	8a e1       	ldi	r24, 0x1A	; 26
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	9f bb       	out	0x1f, r25	; 31
    2a00:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2a02:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2a04:	8d b3       	in	r24, 0x1d	; 29
			lib_eep_write_byte((uint8_t *)(EEP__ISB_FIRMWARE_CODE_0 + i), Isb_Firmware_Code[i]);
		}
		Isb_Firmware_Offset = lib_eep_read_byte((uint8_t *)EEP__ISB_FIRMWARE_OFFSET);
    2a06:	80 93 a7 00 	sts	0x00A7, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2a0a:	e1 99       	sbic	0x1c, 1	; 28
    2a0c:	fe cf       	rjmp	.-4      	; 0x2a0a <main+0xce>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2a0e:	82 e1       	ldi	r24, 0x12	; 18
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	9f bb       	out	0x1f, r25	; 31
    2a14:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2a16:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2a18:	8d b3       	in	r24, 0x1d	; 29
		Isb_Node_Operating_Mode = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
    2a1a:	80 93 a8 00 	sts	0x00A8, r24
		if ((Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_NORM) & (Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_CFG))
    2a1e:	88 50       	subi	r24, 0x08	; 8
    2a20:	82 30       	cpi	r24, 0x02	; 2
    2a22:	d0 f0       	brcs	.+52     	; 0x2a58 <main+0x11c>
		{
			Isb_Node_Operating_Mode = ISB_NODE_OPERATING_MODE__FW_NORM;
    2a24:	88 e0       	ldi	r24, 0x08	; 8
    2a26:	80 93 a8 00 	sts	0x00A8, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2a2a:	e1 99       	sbic	0x1c, 1	; 28
    2a2c:	fe cf       	rjmp	.-4      	; 0x2a2a <main+0xee>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2a2e:	82 e1       	ldi	r24, 0x12	; 18
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	9f bb       	out	0x1f, r25	; 31
    2a34:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2a36:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2a38:	8d b3       	in	r24, 0x1d	; 29
    2a3a:	88 30       	cpi	r24, 0x08	; 8
    2a3c:	69 f0       	breq	.+26     	; 0x2a58 <main+0x11c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2a3e:	e1 99       	sbic	0x1c, 1	; 28
    2a40:	fe cf       	rjmp	.-4      	; 0x2a3e <main+0x102>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2a42:	82 e1       	ldi	r24, 0x12	; 18
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	9f bb       	out	0x1f, r25	; 31
    2a48:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2a4a:	88 e0       	ldi	r24, 0x08	; 8
    2a4c:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    2a4e:	0f b6       	in	r0, 0x3f	; 63
    2a50:	f8 94       	cli
    2a52:	e2 9a       	sbi	0x1c, 2	; 28
    2a54:	e1 9a       	sbi	0x1c, 1	; 28
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	f0 90 a9 00 	lds	r15, 0x00A9
    2a5c:	2c e1       	ldi	r18, 0x1C	; 28
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2a60:	e1 99       	sbic	0x1c, 1	; 28
    2a62:	fe cf       	rjmp	.-4      	; 0x2a60 <main+0x124>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2a64:	3f bb       	out	0x1f, r19	; 31
    2a66:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2a68:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2a6a:	8d b3       	in	r24, 0x1d	; 29
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, Isb_Node_Operating_Mode);
		}
		for (uint8_t i = 0; i < 4; i++)
		{
			if (lib_eep_read_byte((uint8_t *)(EEP__ISB_CONFIG_CODE_0 + i)) != Isb_Firmware_Code[i])
    2a6c:	f9 01       	movw	r30, r18
    2a6e:	ec 5b       	subi	r30, 0xBC	; 188
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	90 81       	ld	r25, Z
    2a74:	89 17       	cp	r24, r25
    2a76:	11 f0       	breq	.+4      	; 0x2a7c <main+0x140>
			{
				Error |= ERROR__CONFIG_CODE;
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	f8 2a       	or	r15, r24
    2a7c:	2f 5f       	subi	r18, 0xFF	; 255
    2a7e:	3f 4f       	sbci	r19, 0xFF	; 255
		if ((Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_NORM) & (Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_CFG))
		{
			Isb_Node_Operating_Mode = ISB_NODE_OPERATING_MODE__FW_NORM;
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, Isb_Node_Operating_Mode);
		}
		for (uint8_t i = 0; i < 4; i++)
    2a80:	20 32       	cpi	r18, 0x20	; 32
    2a82:	31 05       	cpc	r19, r1
    2a84:	69 f7       	brne	.-38     	; 0x2a60 <main+0x124>
    2a86:	f0 92 a9 00 	sts	0x00A9, r15
//			Inf_Twi_Init(0, 12);
			Inf_Twi_Init(0, 255);
// TODO:
Lib_Pin_Set(4, 2, LIB_PIN_OUTPUT_HIGH);
		#endif /* INF_TWI_C_ */
		if (Error == 0) {
    2a8a:	ff 20       	and	r15, r15
    2a8c:	f1 f4       	brne	.+60     	; 0x2aca <main+0x18e>

	#if defined(__AVR_ATmega8__)
		#warning "TIMER0_COMP_vect missing."
		#error "No definition for this MCU available."
	#elif defined(__AVR_ATmega16__)
	TCCR0 = (1 << WGM01) | (1 << CS01) | (1 << CS00);
    2a8e:	8b e0       	ldi	r24, 0x0B	; 11
    2a90:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
    2a92:	12 be       	out	0x32, r1	; 50
	OCR0 = (F_CPU / 64) / 1000;
    2a94:	8d e7       	ldi	r24, 0x7D	; 125
    2a96:	8c bf       	out	0x3c, r24	; 60
	TIMSK = (1 << OCIE0);
    2a98:	82 e0       	ldi	r24, 0x02	; 2
    2a9a:	89 bf       	out	0x39, r24	; 57
	TIMSK0 = (1 << OCIE0A);
	#else
		#error "No definition for this MCU available."
	#endif

	Isb_Systick_Clock.Seconds = 0;
    2a9c:	10 92 c0 02 	sts	0x02C0, r1
	Isb_Systick_Clock.Minutes = 0;
    2aa0:	10 92 c1 02 	sts	0x02C1, r1
	Isb_Systick_Clock.Hour = 0;
    2aa4:	10 92 c2 02 	sts	0x02C2, r1
	Isb_Systick_Clock.Dow = 1;
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	80 93 c4 02 	sts	0x02C4, r24
	Isb_Systick_Clock.Day = 1;
    2aae:	80 93 c3 02 	sts	0x02C3, r24
	Isb_Systick_Clock.Month = 1;
    2ab2:	80 93 c5 02 	sts	0x02C5, r24
	Isb_Systick_Clock.Year = 0;;
    2ab6:	10 92 c7 02 	sts	0x02C7, r1
    2aba:	10 92 c6 02 	sts	0x02C6, r1
			Isb_Systick_Init();
//			Isb_Ch_Init();
			Isb_Grp_Init();
    2abe:	0e 94 3d 10 	call	0x207a	; 0x207a <Isb_Grp_Init>
//			Isb_Obj_Init();
			Isb_Obj_Exec();
    2ac2:	0e 94 c6 11 	call	0x238c	; 0x238c <Isb_Obj_Exec>
//			Isb_App_Init();
			Isb_App_Exec();
    2ac6:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Isb_App_Exec>
		}
		sei();
    2aca:	78 94       	sei
		#endif /* ISB_INF_USART0 == 1 */
		#if ISB_INF_USART1 == 1
			Isb_Inf_Usart_Init(1);
		#endif /* ISB_INF_USART1 == 1 */
		#if ISB_INF_CAN0 == 1
			Isb_Inf_Can_Init(0);
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	0e 94 3c 03 	call	0x678	; 0x678 <Isb_Inf_Can_Init>
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
		Isb_Msg.Data[0] = ISB_MSG_TOP__SERIAL_NUMBER__MODE__ERROR;
    2ad2:	81 e2       	ldi	r24, 0x21	; 33
    2ad4:	8e 83       	std	Y+6, r24	; 0x06
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	37 96       	adiw	r30, 0x07	; 7
    2ada:	24 e0       	ldi	r18, 0x04	; 4
    2adc:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2ade:	e1 99       	sbic	0x1c, 1	; 28
    2ae0:	fe cf       	rjmp	.-4      	; 0x2ade <main+0x1a2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2ae2:	3f bb       	out	0x1f, r19	; 31
    2ae4:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2ae6:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2ae8:	8d b3       	in	r24, 0x1d	; 29
		for (uint8_t i = 0; i < 4; i++) {
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
    2aea:	81 93       	st	Z+, r24
    2aec:	2f 5f       	subi	r18, 0xFF	; 255
    2aee:	3f 4f       	sbci	r19, 0xFF	; 255
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
		Isb_Msg.Data[0] = ISB_MSG_TOP__SERIAL_NUMBER__MODE__ERROR;
		for (uint8_t i = 0; i < 4; i++) {
    2af0:	28 30       	cpi	r18, 0x08	; 8
    2af2:	31 05       	cpc	r19, r1
    2af4:	a1 f7       	brne	.-24     	; 0x2ade <main+0x1a2>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2af6:	e1 99       	sbic	0x1c, 1	; 28
    2af8:	fe cf       	rjmp	.-4      	; 0x2af6 <main+0x1ba>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2afa:	82 e1       	ldi	r24, 0x12	; 18
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	9f bb       	out	0x1f, r25	; 31
    2b00:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2b02:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2b04:	8d b3       	in	r24, 0x1d	; 29
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
    2b06:	8b 87       	std	Y+11, r24	; 0x0b
		Isb_Msg.Data[6] = Error;
    2b08:	fc 86       	std	Y+12, r15	; 0x0c
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
    2b0a:	dd 82       	std	Y+5, r13	; 0x05
    2b0c:	cc 82       	std	Y+4, r12	; 0x04
		#if ISB_INF_USART1_SLAVE == 1
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
    2b0e:	82 e0       	ldi	r24, 0x02	; 2
    2b10:	90 ef       	ldi	r25, 0xF0	; 240
    2b12:	9b 83       	std	Y+3, r25	; 0x03
    2b14:	8a 83       	std	Y+2, r24	; 0x02
		#endif /* ISB_INF_USART0_SLAVE == 1 */
		#if ISB_INF_USART1_SLAVE == 1
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
    2b16:	87 e2       	ldi	r24, 0x27	; 39
    2b18:	89 83       	std	Y+1, r24	; 0x01
		for (uint8_t i = 0; i < 4; i++) {
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
		Isb_Msg.Data[6] = Error;
		Isb_SendMsg(&Isb_Msg);
    2b1a:	8e 01       	movw	r16, r28
    2b1c:	0f 5f       	subi	r16, 0xFF	; 255
    2b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b20:	c8 01       	movw	r24, r16
    2b22:	0e 94 71 10 	call	0x20e2	; 0x20e2 <Isb_SendMsg>
						}
					}
				}
			#endif /* ISB_INF_USART1 == 1 */
			#if ISB_INF_CAN0 == 1
				if (Isb_Inf_Can_Rx(0, &Isb_Msg) == TRUE) {
    2b26:	e0 2e       	mov	r14, r16
    2b28:	01 2f       	mov	r16, r17
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
		Isb_Msg.Data[6] = Error;
		Isb_SendMsg(&Isb_Msg);
		for (;;) {
			wdt_reset();
    2b2a:	a8 95       	wdr
			if (Error == 0) {
    2b2c:	ff 20       	and	r15, r15
    2b2e:	31 f4       	brne	.+12     	; 0x2b3c <main+0x200>
				Isb_Systick_Exec();
    2b30:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Isb_Systick_Exec>
				Isb_Obj_Exec();
    2b34:	0e 94 c6 11 	call	0x238c	; 0x238c <Isb_Obj_Exec>
				Isb_App_Exec();
    2b38:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Isb_App_Exec>
						}
					}
				}
			#endif /* ISB_INF_USART1 == 1 */
			#if ISB_INF_CAN0 == 1
				if (Isb_Inf_Can_Rx(0, &Isb_Msg) == TRUE) {
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	6e 2d       	mov	r22, r14
    2b40:	70 2f       	mov	r23, r16
    2b42:	0e 94 57 03 	call	0x6ae	; 0x6ae <Isb_Inf_Can_Rx>
    2b46:	81 30       	cpi	r24, 0x01	; 1
    2b48:	81 f7       	brne	.-32     	; 0x2b2a <main+0x1ee>
						Isb_Inf_Can_Tx(1, &Isb_Msg);
					#endif /* ISB_INF_CAN1 == 1 */
					#if ISB_INF_CAN2 == 1
						Isb_Inf_Can_Tx(2, &Isb_Msg);
					#endif /* ISB_INF_CAN2 == 1 */
					if ((Isb_Msg.Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_UNICAST) {
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	80 73       	andi	r24, 0x30	; 48
    2b4e:	49 f4       	brne	.+18     	; 0x2b62 <main+0x226>
						if (Isb_Msg.DestId == Isb_Node_Id) {
    2b50:	8a 81       	ldd	r24, Y+2	; 0x02
    2b52:	9b 81       	ldd	r25, Y+3	; 0x03
    2b54:	8c 15       	cp	r24, r12
    2b56:	9d 05       	cpc	r25, r13
    2b58:	21 f4       	brne	.+8      	; 0x2b62 <main+0x226>
							Isb_Config_Rx(&Isb_Msg);
    2b5a:	8e 2d       	mov	r24, r14
    2b5c:	90 2f       	mov	r25, r16
    2b5e:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <Isb_Config_Rx>
						}
					}
					if ((Isb_Msg.Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_MULTICAST) {
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	80 73       	andi	r24, 0x30	; 48
    2b66:	80 32       	cpi	r24, 0x20	; 32
    2b68:	01 f7       	brne	.-64     	; 0x2b2a <main+0x1ee>
						if (Error == 0) {
    2b6a:	ff 20       	and	r15, r15
    2b6c:	f1 f6       	brne	.-68     	; 0x2b2a <main+0x1ee>
							Isb_Obj_Rx(&Isb_Msg);
    2b6e:	8e 2d       	mov	r24, r14
    2b70:	90 2f       	mov	r25, r16
    2b72:	0e 94 86 10 	call	0x210c	; 0x210c <Isb_Obj_Rx>
    2b76:	d9 cf       	rjmp	.-78     	; 0x2b2a <main+0x1ee>

00002b78 <__eerd_word>:
    2b78:	df 92       	push	r13
    2b7a:	ef 92       	push	r14
    2b7c:	ff 92       	push	r15
    2b7e:	0f 93       	push	r16
    2b80:	1f 93       	push	r17
    2b82:	7b 01       	movw	r14, r22
    2b84:	8c 01       	movw	r16, r24
    2b86:	fb 01       	movw	r30, r22
    2b88:	09 95       	icall
    2b8a:	d8 2e       	mov	r13, r24
    2b8c:	c8 01       	movw	r24, r16
    2b8e:	01 96       	adiw	r24, 0x01	; 1
    2b90:	f7 01       	movw	r30, r14
    2b92:	09 95       	icall
    2b94:	98 2f       	mov	r25, r24
    2b96:	8d 2d       	mov	r24, r13
    2b98:	1f 91       	pop	r17
    2b9a:	0f 91       	pop	r16
    2b9c:	ff 90       	pop	r15
    2b9e:	ef 90       	pop	r14
    2ba0:	df 90       	pop	r13
    2ba2:	08 95       	ret

00002ba4 <__udivmodhi4>:
    2ba4:	aa 1b       	sub	r26, r26
    2ba6:	bb 1b       	sub	r27, r27
    2ba8:	51 e1       	ldi	r21, 0x11	; 17
    2baa:	07 c0       	rjmp	.+14     	; 0x2bba <__udivmodhi4_ep>

00002bac <__udivmodhi4_loop>:
    2bac:	aa 1f       	adc	r26, r26
    2bae:	bb 1f       	adc	r27, r27
    2bb0:	a6 17       	cp	r26, r22
    2bb2:	b7 07       	cpc	r27, r23
    2bb4:	10 f0       	brcs	.+4      	; 0x2bba <__udivmodhi4_ep>
    2bb6:	a6 1b       	sub	r26, r22
    2bb8:	b7 0b       	sbc	r27, r23

00002bba <__udivmodhi4_ep>:
    2bba:	88 1f       	adc	r24, r24
    2bbc:	99 1f       	adc	r25, r25
    2bbe:	5a 95       	dec	r21
    2bc0:	a9 f7       	brne	.-22     	; 0x2bac <__udivmodhi4_loop>
    2bc2:	80 95       	com	r24
    2bc4:	90 95       	com	r25
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	cd 01       	movw	r24, r26
    2bca:	08 95       	ret

00002bcc <_exit>:
    2bcc:	f8 94       	cli

00002bce <__stop_program>:
    2bce:	ff cf       	rjmp	.-2      	; 0x2bce <__stop_program>
