
fw_27-1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ed8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00002ed8  00002f4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002e0  00800094  00002f0c  00002f80  2**0
                  ALLOC
  3 .stab         00005fc4  00000000  00000000  00002f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000026f1  00000000  00000000  00008f44  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__ctors_end>
       4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       8:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
       c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      10:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      14:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      18:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      1c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      20:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      24:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      28:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      2c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      30:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      34:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      38:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      3c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      40:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      44:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      48:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      4c:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__vector_19>
      50:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
      54:	1b 0e       	add	r1, r27
      56:	29 0e       	add	r2, r25
      58:	30 0e       	add	r3, r16
      5a:	37 0e       	add	r3, r23
      5c:	3e 0e       	add	r3, r30
      5e:	45 0e       	add	r4, r21
      60:	4c 0e       	add	r4, r28
      62:	53 0e       	add	r5, r19
      64:	5a 0e       	add	r5, r26
      66:	61 0e       	add	r6, r17
      68:	68 0e       	add	r6, r24
      6a:	6f 0e       	add	r6, r31
      6c:	76 0e       	add	r7, r22
      6e:	7d 0e       	add	r7, r29
      70:	84 0e       	add	r8, r20
      72:	8b 0e       	add	r8, r27
      74:	92 0e       	add	r9, r18
      76:	99 0e       	add	r9, r25
      78:	a0 0e       	add	r10, r16
      7a:	a7 0e       	add	r10, r23
      7c:	ae 0e       	add	r10, r30
      7e:	b5 0e       	add	r11, r21
      80:	bc 0e       	add	r11, r28
      82:	c3 0e       	add	r12, r19
      84:	ca 0e       	add	r12, r26
      86:	d1 0e       	add	r13, r17
      88:	d8 0e       	add	r13, r24
      8a:	df 0e       	add	r13, r31
      8c:	e6 0e       	add	r14, r22
      8e:	ed 0e       	add	r14, r29
      90:	f4 0e       	add	r15, r20
      92:	fb 0e       	add	r15, r27
      94:	02 0f       	add	r16, r18
      96:	09 0f       	add	r16, r25
      98:	10 0f       	add	r17, r16
      9a:	17 0f       	add	r17, r23
      9c:	1e 0f       	add	r17, r30
      9e:	25 0f       	add	r18, r21
      a0:	2c 0f       	add	r18, r28
      a2:	33 0f       	add	r19, r19
      a4:	3a 0f       	add	r19, r26
      a6:	41 0f       	add	r20, r17
      a8:	48 0f       	add	r20, r24
      aa:	4f 0f       	add	r20, r31
      ac:	56 0f       	add	r21, r22
      ae:	5d 0f       	add	r21, r29
      b0:	64 0f       	add	r22, r20
      b2:	6b 0f       	add	r22, r27
      b4:	72 0f       	add	r23, r18
      b6:	79 0f       	add	r23, r25
      b8:	80 0f       	add	r24, r16
      ba:	87 0f       	add	r24, r23
      bc:	8e 0f       	add	r24, r30
      be:	95 0f       	add	r25, r21
      c0:	9c 0f       	add	r25, r28
      c2:	a3 0f       	add	r26, r19

000000c4 <pgmIsb_Obj_1Bit_Obj_Array>:
      c4:	00 01 02 05 06 07 0a 0b 0c 0f 10 11 14 15 16 19     ................
      d4:	1a 1b 1e 1f 20 23 24 25 28 29 2a 2b 2c 2d 2e 2f     .... #$%()*+,-./
      e4:	30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f     0123456789:;<=>?
      f4:	40 41 42 43 44 45 46 47                             @ABCDEFG

000000fc <pgmIsb_Obj_4Bit_Obj_Array>:
      fc:	03 08 0d 12 17 1c 21 26                             ......!&

00000104 <pgmIsb_Obj_8Bit_Obj_Array>:
     104:	04 09 0e 13 18 1d 22 27                             ......"'

0000010c <pgmIsb_Obj_1Bit_Ch_Array>:
     10c:	00 00 00 01 01 01 02 02 02 03 03 03 04 04 04 05     ................
     11c:	05 05 06 06 06 07 07 07 08 08 08 08 09 09 09 09     ................
     12c:	0a 0a 0a 0a 0b 0b 0b 0b 0c 0c 0c 0c 0d 0d 0d 0d     ................
     13c:	0e 0e 0e 0e 0f 0f 0f 0f                             ........

00000144 <pgmIsb_Obj_4Bit_Ch_Array>:
     144:	00 01 02 03 04 05 06 07                             ........

0000014c <pgmIsb_Obj_8Bit_Ch_Array>:
     14c:	00 01 02 03 04 05 06 07                             ........

00000154 <pgmIsb_App_DigOut_Ch_Array>:
     154:	08 09 0a 0b 0c 0d 0e 0f                             ........

0000015c <pgmIsb_App_DigOut_Obj_1Bit_0_Array>:
     15c:	18 1c 20 24 28 2c 30 34                             .. $(,04

00000164 <pgmIsb_App_DigOut_Obj_1Bit_1_Array>:
     164:	19 1d 21 25 29 2d 31 35                             ..!%)-15

0000016c <pgmIsb_App_DigOut_Obj_1Bit_2_Array>:
     16c:	1a 1e 22 26 2a 2e 32 36                             .."&*.26

00000174 <pgmIsb_App_DigOut_Obj_1Bit_3_Array>:
     174:	1b 1f 23 27 2b 2f 33 37                             ..#'+/37

0000017c <pgmIsb_App_DigOut_Pin0_Array>:
     17c:	10 11 1a 1b 1c 1d 1e 1f                             ........

00000184 <pgmIsb_App_DigIn_Ch_Array>:
     184:	00 01 02 03 04 05 06 07                             ........

0000018c <pgmIsb_App_DigIn_Pin0_Array>:
     18c:	48 49 4a 4b 4c 4d 4e 4f                             HIJKLMNO

00000194 <pgmIsb_App_DigIn_Obj_1Bit_1_Array>:
     194:	01 04 07 0a 0d 10 13 16                             ........

0000019c <pgmIsb_App_DigIn_Obj_1Bit_2_Array>:
     19c:	02 05 08 0b 0e 11 14 17                             ........

000001a4 <__ctors_end>:
     1a4:	11 24       	eor	r1, r1
     1a6:	1f be       	out	0x3f, r1	; 63
     1a8:	cf e5       	ldi	r28, 0x5F	; 95
     1aa:	d4 e0       	ldi	r29, 0x04	; 4
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	cd bf       	out	0x3d, r28	; 61

000001b0 <__do_copy_data>:
     1b0:	10 e0       	ldi	r17, 0x00	; 0
     1b2:	a0 e6       	ldi	r26, 0x60	; 96
     1b4:	b0 e0       	ldi	r27, 0x00	; 0
     1b6:	e8 ed       	ldi	r30, 0xD8	; 216
     1b8:	fe e2       	ldi	r31, 0x2E	; 46
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <.do_copy_data_start>

000001bc <.do_copy_data_loop>:
     1bc:	05 90       	lpm	r0, Z+
     1be:	0d 92       	st	X+, r0

000001c0 <.do_copy_data_start>:
     1c0:	a4 39       	cpi	r26, 0x94	; 148
     1c2:	b1 07       	cpc	r27, r17
     1c4:	d9 f7       	brne	.-10     	; 0x1bc <.do_copy_data_loop>

000001c6 <__do_clear_bss>:
     1c6:	13 e0       	ldi	r17, 0x03	; 3
     1c8:	a4 e9       	ldi	r26, 0x94	; 148
     1ca:	b0 e0       	ldi	r27, 0x00	; 0
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <.do_clear_bss_start>

000001ce <.do_clear_bss_loop>:
     1ce:	1d 92       	st	X+, r1

000001d0 <.do_clear_bss_start>:
     1d0:	a4 37       	cpi	r26, 0x74	; 116
     1d2:	b1 07       	cpc	r27, r17
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <.do_clear_bss_loop>
     1d6:	0e 94 39 16 	call	0x2c72	; 0x2c72 <main>
     1da:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <_exit>

000001de <__bad_interrupt>:
     1de:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000001e2 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
     1e2:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
     1e4:	e1 99       	sbic	0x1c, 1	; 28
     1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <eeprom_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     1e8:	3f bb       	out	0x1f, r19	; 31
     1ea:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
     1ec:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     1ee:	8d b3       	in	r24, 0x1d	; 29
}
     1f0:	08 95       	ret

000001f2 <lib_eep_read_byte>:
#ifndef LIB_EEP_C_
	#define LIB_EEP_C_



	uint8_t __attribute__((always_inline)) lib_eep_read_byte(uint8_t * aAddr) {
     1f2:	9c 01       	movw	r18, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     1f4:	e1 99       	sbic	0x1c, 1	; 28
     1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <lib_eep_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     1f8:	3f bb       	out	0x1f, r19	; 31
     1fa:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
     1fc:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     1fe:	8d b3       	in	r24, 0x1d	; 29
		return eeprom_read_byte(aAddr);;
	}
     200:	08 95       	ret

00000202 <lib_eep_write_byte>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     202:	e1 99       	sbic	0x1c, 1	; 28
     204:	fe cf       	rjmp	.-4      	; 0x202 <lib_eep_write_byte>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     206:	9c 01       	movw	r18, r24
     208:	9f bb       	out	0x1f, r25	; 31
     20a:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     20c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     20e:	8d b3       	in	r24, 0x1d	; 29
	}



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
     210:	86 17       	cp	r24, r22
     212:	51 f0       	breq	.+20     	; 0x228 <lib_eep_write_byte+0x26>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     214:	e1 99       	sbic	0x1c, 1	; 28
     216:	fe cf       	rjmp	.-4      	; 0x214 <lib_eep_write_byte+0x12>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     218:	3f bb       	out	0x1f, r19	; 31
     21a:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
     21c:	6d bb       	out	0x1d, r22	; 29

    __asm__ __volatile__ (
     21e:	0f b6       	in	r0, 0x3f	; 63
     220:	f8 94       	cli
     222:	e2 9a       	sbi	0x1c, 2	; 28
     224:	e1 9a       	sbi	0x1c, 1	; 28
     226:	0f be       	out	0x3f, r0	; 63
     228:	08 95       	ret

0000022a <lib_eep_fw_read_byte>:
	}



	uint8_t __attribute__((always_inline)) lib_eep_fw_read_byte(uint8_t * aAddr) {
		return eeprom_read_byte(Isb_Firmware_Offset + aAddr);;
     22a:	20 91 96 00 	lds	r18, 0x0096
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     22e:	e1 99       	sbic	0x1c, 1	; 28
     230:	fe cf       	rjmp	.-4      	; 0x22e <lib_eep_fw_read_byte+0x4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     232:	82 0f       	add	r24, r18
     234:	91 1d       	adc	r25, r1
     236:	9f bb       	out	0x1f, r25	; 31
     238:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     23a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     23c:	8d b3       	in	r24, 0x1d	; 29
	}
     23e:	08 95       	ret

00000240 <lib_eep_fw_write_byte>:
		return eeprom_read_word(Isb_Firmware_Offset + aAddr);;
	}



	void __attribute__((always_inline)) lib_eep_fw_write_byte(uint8_t * aAddr, uint8_t aData) {
     240:	ac 01       	movw	r20, r24
		if (eeprom_read_byte(Isb_Firmware_Offset + aAddr) != aData) {
     242:	80 91 96 00 	lds	r24, 0x0096
     246:	28 2f       	mov	r18, r24
     248:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     24a:	e1 99       	sbic	0x1c, 1	; 28
     24c:	fe cf       	rjmp	.-4      	; 0x24a <lib_eep_fw_write_byte+0xa>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     24e:	ca 01       	movw	r24, r20
     250:	82 0f       	add	r24, r18
     252:	93 1f       	adc	r25, r19
     254:	9f bb       	out	0x1f, r25	; 31
     256:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     258:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     25a:	8d b3       	in	r24, 0x1d	; 29
     25c:	86 17       	cp	r24, r22
     25e:	61 f0       	breq	.+24     	; 0x278 <lib_eep_fw_write_byte+0x38>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     260:	e1 99       	sbic	0x1c, 1	; 28
     262:	fe cf       	rjmp	.-4      	; 0x260 <lib_eep_fw_write_byte+0x20>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     264:	24 0f       	add	r18, r20
     266:	35 1f       	adc	r19, r21
     268:	3f bb       	out	0x1f, r19	; 31
     26a:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
     26c:	6d bb       	out	0x1d, r22	; 29

    __asm__ __volatile__ (
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	f8 94       	cli
     272:	e2 9a       	sbi	0x1c, 2	; 28
     274:	e1 9a       	sbi	0x1c, 1	; 28
     276:	0f be       	out	0x3f, r0	; 63
     278:	08 95       	ret

0000027a <Lib_Pin_Get>:
	#endif



	uint8_t Lib_Pin_Get(const uint8_t aPort, const uint8_t aPin) {
		return (*(PINx[aPort]) >> aPin) & 1;
     27a:	e8 2f       	mov	r30, r24
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	ee 0f       	add	r30, r30
     280:	ff 1f       	adc	r31, r31
     282:	ec 57       	subi	r30, 0x7C	; 124
     284:	ff 4f       	sbci	r31, 0xFF	; 255
     286:	01 90       	ld	r0, Z+
     288:	f0 81       	ld	r31, Z
     28a:	e0 2d       	mov	r30, r0
     28c:	80 81       	ld	r24, Z
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	02 c0       	rjmp	.+4      	; 0x296 <Lib_Pin_Get+0x1c>
     292:	95 95       	asr	r25
     294:	87 95       	ror	r24
     296:	6a 95       	dec	r22
     298:	e2 f7       	brpl	.-8      	; 0x292 <Lib_Pin_Get+0x18>
	}
     29a:	81 70       	andi	r24, 0x01	; 1
     29c:	08 95       	ret

0000029e <Lib_Pin_Set>:



	void __attribute__((noinline)) Lib_Pin_Set(const uint8_t aPort, const uint8_t aPin, const uint8_t aCmd) {
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <Lib_Pin_Set+0x8>
		uint8_t mask;
		uint8_t tmp;
		volatile uint8_t *reg;
		uint8_t Pxx = aPin;
		for (mask = 1; Pxx--; mask <<= 1) ;
     2a2:	99 0f       	add	r25, r25
     2a4:	61 50       	subi	r22, 0x01	; 1
     2a6:	66 23       	and	r22, r22
     2a8:	e1 f7       	brne	.-8      	; 0x2a2 <Lib_Pin_Set+0x4>
		reg = PORTx[aPort];
     2aa:	a8 2f       	mov	r26, r24
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	fd 01       	movw	r30, r26
     2b0:	ee 0f       	add	r30, r30
     2b2:	ff 1f       	adc	r31, r31
     2b4:	ec 58       	subi	r30, 0x8C	; 140
     2b6:	ff 4f       	sbci	r31, 0xFF	; 255
     2b8:	01 90       	ld	r0, Z+
     2ba:	f0 81       	ld	r31, Z
     2bc:	e0 2d       	mov	r30, r0
		tmp = *reg | mask;
     2be:	80 81       	ld	r24, Z
     2c0:	89 2b       	or	r24, r25
		if (! (aCmd & 2)) {
     2c2:	41 ff       	sbrs	r20, 1
			tmp ^= mask;
     2c4:	89 27       	eor	r24, r25
		}
		*reg = tmp;
     2c6:	80 83       	st	Z, r24
		reg = DDRx[aPort];
     2c8:	aa 0f       	add	r26, r26
     2ca:	bb 1f       	adc	r27, r27
     2cc:	ac 59       	subi	r26, 0x9C	; 156
     2ce:	bf 4f       	sbci	r27, 0xFF	; 255
     2d0:	ed 91       	ld	r30, X+
     2d2:	fc 91       	ld	r31, X
		tmp = *reg | mask;
     2d4:	80 81       	ld	r24, Z
     2d6:	89 2b       	or	r24, r25
		if (! (aCmd & 1)) {
     2d8:	40 ff       	sbrs	r20, 0
			tmp ^= mask;
     2da:	89 27       	eor	r24, r25
		}
		*reg = tmp;
     2dc:	80 83       	st	Z, r24
	}
     2de:	08 95       	ret

000002e0 <Inf_Spi_Init>:
#ifndef INF_SPI_C_
	#define INF_SPI_C_



	void Inf_Spi_Init(const uint8_t aCfg) {
     2e0:	df 93       	push	r29
     2e2:	cf 93       	push	r28
     2e4:	0f 92       	push	r0
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	89 83       	std	Y+1, r24	; 0x01
		// Bit 3	CPOL (Clock Polarity)
		// Bit 4	CPHA (Clock Phase)
		// Bit 5	SPR0
		// Bit 6	SPR1
		// Bit 7	SPI2X
		SPCR &= ~(1 << SPE);
     2ec:	6e 98       	cbi	0x0d, 6	; 13
		if (bit_is_set(aCfg, 0)) {
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	80 ff       	sbrs	r24, 0
     2f2:	10 c0       	rjmp	.+32     	; 0x314 <Inf_Spi_Init+0x34>
			if (bit_is_set(aCfg, 1)) {
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	81 ff       	sbrs	r24, 1
     2f8:	06 c0       	rjmp	.+12     	; 0x306 <Inf_Spi_Init+0x26>
				INF_SPI_DDR |= (1 << INF_SPI_DD_MOSI) | (1 << INF_SPI_DD_SCK);
     2fa:	87 b3       	in	r24, 0x17	; 23
     2fc:	80 6a       	ori	r24, 0xA0	; 160
     2fe:	87 bb       	out	0x17, r24	; 23
				INF_SPI_DDR &= ~(1 << INF_SPI_DD_MISO);
     300:	be 98       	cbi	0x17, 6	; 23
				SPCR |= (1 << MSTR);
     302:	6c 9a       	sbi	0x0d, 4	; 13
     304:	05 c0       	rjmp	.+10     	; 0x310 <Inf_Spi_Init+0x30>
			}
			else {
				INF_SPI_DDR |= (1 << INF_SPI_DD_MISO);
     306:	be 9a       	sbi	0x17, 6	; 23
				INF_SPI_DDR &= ~(1 << INF_SPI_DD_MOSI) & ~(1 << INF_SPI_DD_SCK);
     308:	87 b3       	in	r24, 0x17	; 23
     30a:	8f 75       	andi	r24, 0x5F	; 95
     30c:	87 bb       	out	0x17, r24	; 23
				SPCR &= ~(1 << MSTR);
     30e:	6c 98       	cbi	0x0d, 4	; 13
			}
			SPCR |= (1 << SPE);
     310:	6e 9a       	sbi	0x0d, 6	; 13
     312:	03 c0       	rjmp	.+6      	; 0x31a <Inf_Spi_Init+0x3a>
		}
		else {
			INF_SPI_DDR &= ~(1 << INF_SPI_DD_MISO) & ~(1 << INF_SPI_DD_MOSI) & ~(1 << INF_SPI_DD_SCK);
     314:	87 b3       	in	r24, 0x17	; 23
     316:	8f 71       	andi	r24, 0x1F	; 31
     318:	87 bb       	out	0x17, r24	; 23
		}
	}
     31a:	0f 90       	pop	r0
     31c:	cf 91       	pop	r28
     31e:	df 91       	pop	r29
     320:	08 95       	ret

00000322 <Inf_Spi_Rx>:



	uint8_t Inf_Spi_Rx(void) {
		SPDR = 0;
     322:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     324:	77 9b       	sbis	0x0e, 7	; 14
     326:	fe cf       	rjmp	.-4      	; 0x324 <Inf_Spi_Rx+0x2>
		return SPDR;
     328:	8f b1       	in	r24, 0x0f	; 15
	}
     32a:	08 95       	ret

0000032c <Inf_Spi_Tx>:
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     32c:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     32e:	77 9b       	sbis	0x0e, 7	; 14
     330:	fe cf       	rjmp	.-4      	; 0x32e <Inf_Spi_Tx+0x2>
	}
     332:	08 95       	ret

00000334 <Inf_Spi_TxRx>:



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     334:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     336:	77 9b       	sbis	0x0e, 7	; 14
     338:	fe cf       	rjmp	.-4      	; 0x336 <Inf_Spi_TxRx+0x2>
		return SPDR;
     33a:	8f b1       	in	r24, 0x0f	; 15
	}
     33c:	08 95       	ret

0000033e <Lib_Mcp2515_Read>:
#ifndef LIB_MCP2515_C_
	#define LIB_MCP2515_C_



	uint8_t Lib_Mcp2515_Read(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr) {
     33e:	ff 92       	push	r15
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
     344:	08 2f       	mov	r16, r24
     346:	f6 2e       	mov	r15, r22
     348:	14 2f       	mov	r17, r20
		uint8_t aData;
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     34a:	41 e0       	ldi	r20, 0x01	; 1
     34c:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     350:	83 e0       	ldi	r24, 0x03	; 3
     352:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     354:	77 9b       	sbis	0x0e, 7	; 14
     356:	fe cf       	rjmp	.-4      	; 0x354 <Lib_Mcp2515_Read+0x16>
		return SPDR;
     358:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     35a:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     35c:	77 9b       	sbis	0x0e, 7	; 14
     35e:	fe cf       	rjmp	.-4      	; 0x35c <Lib_Mcp2515_Read+0x1e>
		return SPDR;
     360:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     362:	8f ef       	ldi	r24, 0xFF	; 255
     364:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     366:	77 9b       	sbis	0x0e, 7	; 14
     368:	fe cf       	rjmp	.-4      	; 0x366 <Lib_Mcp2515_Read+0x28>
		return SPDR;
     36a:	1f b1       	in	r17, 0x0f	; 15
		Inf_Spi_TxRx(LIB_MCP2515_READ);
		Inf_Spi_TxRx(aAddr);
		aData = Inf_Spi_TxRx(0xff);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     36c:	80 2f       	mov	r24, r16
     36e:	6f 2d       	mov	r22, r15
     370:	43 e0       	ldi	r20, 0x03	; 3
     372:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
		return aData;
	}
     376:	81 2f       	mov	r24, r17
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	ff 90       	pop	r15
     37e:	08 95       	ret

00000380 <Lib_Mcp2515_Write>:



	void Lib_Mcp2515_Write(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr, const uint8_t aData) {
     380:	ef 92       	push	r14
     382:	ff 92       	push	r15
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	08 2f       	mov	r16, r24
     38a:	f6 2e       	mov	r15, r22
     38c:	14 2f       	mov	r17, r20
     38e:	e2 2e       	mov	r14, r18
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     390:	41 e0       	ldi	r20, 0x01	; 1
     392:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     396:	82 e0       	ldi	r24, 0x02	; 2
     398:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     39a:	77 9b       	sbis	0x0e, 7	; 14
     39c:	fe cf       	rjmp	.-4      	; 0x39a <Lib_Mcp2515_Write+0x1a>
		return SPDR;
     39e:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     3a0:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     3a2:	77 9b       	sbis	0x0e, 7	; 14
     3a4:	fe cf       	rjmp	.-4      	; 0x3a2 <Lib_Mcp2515_Write+0x22>
		return SPDR;
     3a6:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     3a8:	ef b8       	out	0x0f, r14	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     3aa:	77 9b       	sbis	0x0e, 7	; 14
     3ac:	fe cf       	rjmp	.-4      	; 0x3aa <Lib_Mcp2515_Write+0x2a>
		return SPDR;
     3ae:	8f b1       	in	r24, 0x0f	; 15
		Inf_Spi_TxRx(LIB_MCP2515_WRITE);
		Inf_Spi_TxRx(aAddr);
		Inf_Spi_TxRx(aData);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     3b0:	80 2f       	mov	r24, r16
     3b2:	6f 2d       	mov	r22, r15
     3b4:	43 e0       	ldi	r20, 0x03	; 3
     3b6:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	08 95       	ret

000003c4 <Lib_Mcp2515_Modify>:



	void Lib_Mcp2515_Modify(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr, const uint8_t aMask, const uint8_t aData) {
     3c4:	df 92       	push	r13
     3c6:	ef 92       	push	r14
     3c8:	ff 92       	push	r15
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	e8 2e       	mov	r14, r24
     3d0:	d6 2e       	mov	r13, r22
     3d2:	14 2f       	mov	r17, r20
     3d4:	f2 2e       	mov	r15, r18
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     3d6:	41 e0       	ldi	r20, 0x01	; 1
     3d8:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     3dc:	85 e0       	ldi	r24, 0x05	; 5
     3de:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     3e0:	77 9b       	sbis	0x0e, 7	; 14
     3e2:	fe cf       	rjmp	.-4      	; 0x3e0 <Lib_Mcp2515_Modify+0x1c>
		return SPDR;
     3e4:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     3e6:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     3e8:	77 9b       	sbis	0x0e, 7	; 14
     3ea:	fe cf       	rjmp	.-4      	; 0x3e8 <Lib_Mcp2515_Modify+0x24>
		return SPDR;
     3ec:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     3ee:	ff b8       	out	0x0f, r15	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     3f0:	77 9b       	sbis	0x0e, 7	; 14
     3f2:	fe cf       	rjmp	.-4      	; 0x3f0 <Lib_Mcp2515_Modify+0x2c>
		return SPDR;
     3f4:	8f b1       	in	r24, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     3f6:	0f b9       	out	0x0f, r16	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     3f8:	77 9b       	sbis	0x0e, 7	; 14
     3fa:	fe cf       	rjmp	.-4      	; 0x3f8 <Lib_Mcp2515_Modify+0x34>
		return SPDR;
     3fc:	8f b1       	in	r24, 0x0f	; 15
		Inf_Spi_TxRx(LIB_MCP2515_BIT_MODIFY);
		Inf_Spi_TxRx(aAddr);
		Inf_Spi_TxRx(aMask);
		Inf_Spi_TxRx(aData);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     3fe:	8e 2d       	mov	r24, r14
     400:	6d 2d       	mov	r22, r13
     402:	43 e0       	ldi	r20, 0x03	; 3
     404:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	ff 90       	pop	r15
     40e:	ef 90       	pop	r14
     410:	df 90       	pop	r13
     412:	08 95       	ret

00000414 <Inf_Can_Init>:
	#define INF_CAN_C_



	#if defined(INF_CAN0_TX) || defined(INF_CAN0_RX) || defined(INF_CAN1_TX) || defined(INF_CAN1_RX) || defined(INF_CAN2_TX) || defined(INF_CAN2_RX)
		uint8_t Inf_Can_Init(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aCnf1, const uint8_t aCnf2, const uint8_t aCnf3, const uint8_t aRSPort, const uint8_t aRSPin, const uint8_t aMode) {
     414:	8f 92       	push	r8
     416:	9f 92       	push	r9
     418:	af 92       	push	r10
     41a:	bf 92       	push	r11
     41c:	cf 92       	push	r12
     41e:	df 92       	push	r13
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	df 93       	push	r29
     42a:	cf 93       	push	r28
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
     430:	f8 2e       	mov	r15, r24
     432:	d6 2e       	mov	r13, r22
     434:	14 2f       	mov	r17, r20
     436:	b2 2e       	mov	r11, r18
     438:	90 2e       	mov	r9, r16
     43a:	0c 2d       	mov	r16, r12
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     43c:	43 e0       	ldi	r20, 0x03	; 3
     43e:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     442:	81 2f       	mov	r24, r17
     444:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     448:	8f 2d       	mov	r24, r15
     44a:	6d 2d       	mov	r22, r13
     44c:	41 e0       	ldi	r20, 0x01	; 1
     44e:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     452:	80 ec       	ldi	r24, 0xC0	; 192
     454:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     456:	77 9b       	sbis	0x0e, 7	; 14
     458:	fe cf       	rjmp	.-4      	; 0x456 <Inf_Can_Init+0x42>
		return SPDR;
     45a:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_TxRx(LIB_MCP2515_RESET);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     45c:	8f 2d       	mov	r24, r15
     45e:	6d 2d       	mov	r22, r13
     460:	43 e0       	ldi	r20, 0x03	; 3
     462:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     466:	80 ea       	ldi	r24, 0xA0	; 160
     468:	9f e0       	ldi	r25, 0x0F	; 15
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <__stack+0xb>
			_delay_ms(2);
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF1, aCnf1);
     46e:	8f 2d       	mov	r24, r15
     470:	6d 2d       	mov	r22, r13
     472:	4a e2       	ldi	r20, 0x2A	; 42
     474:	2b 2d       	mov	r18, r11
     476:	0e 94 c0 01 	call	0x380	; 0x380 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF2, aCnf2);
     47a:	8f 2d       	mov	r24, r15
     47c:	6d 2d       	mov	r22, r13
     47e:	49 e2       	ldi	r20, 0x29	; 41
     480:	29 2d       	mov	r18, r9
     482:	0e 94 c0 01 	call	0x380	; 0x380 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF3, aCnf3);
     486:	8f 2d       	mov	r24, r15
     488:	6d 2d       	mov	r22, r13
     48a:	48 e2       	ldi	r20, 0x28	; 40
     48c:	2e 2d       	mov	r18, r14
     48e:	0e 94 c0 01 	call	0x380	; 0x380 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_RXB0CTRL, 0x64);
     492:	8f 2d       	mov	r24, r15
     494:	6d 2d       	mov	r22, r13
     496:	40 e6       	ldi	r20, 0x60	; 96
     498:	24 e6       	ldi	r18, 0x64	; 100
     49a:	0e 94 c0 01 	call	0x380	; 0x380 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_RXB1CTRL, 0x60);
     49e:	8f 2d       	mov	r24, r15
     4a0:	6d 2d       	mov	r22, r13
     4a2:	40 e7       	ldi	r20, 0x70	; 112
     4a4:	20 e6       	ldi	r18, 0x60	; 96
     4a6:	0e 94 c0 01 	call	0x380	; 0x380 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CANINTE, 0x03);
     4aa:	8f 2d       	mov	r24, r15
     4ac:	6d 2d       	mov	r22, r13
     4ae:	4b e2       	ldi	r20, 0x2B	; 43
     4b0:	23 e0       	ldi	r18, 0x03	; 3
     4b2:	0e 94 c0 01 	call	0x380	; 0x380 <Lib_Mcp2515_Write>
			if (aRSPort != 0) {
     4b6:	00 23       	and	r16, r16
     4b8:	79 f1       	breq	.+94     	; 0x518 <__stack+0xb9>
				if (aRSPort < 8) {
     4ba:	08 30       	cpi	r16, 0x08	; 8
     4bc:	20 f4       	brcc	.+8      	; 0x4c6 <__stack+0x67>
					Lib_Pin_Set(aRSPort, aRSPin, LIB_PIN_OUTPUT_LOW);
     4be:	80 2f       	mov	r24, r16
     4c0:	6a 2d       	mov	r22, r10
     4c2:	41 e0       	ldi	r20, 0x01	; 1
     4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <__stack+0x71>
				}
				else if (aRSPort < 16) {
     4c6:	00 31       	cpi	r16, 0x10	; 16
     4c8:	30 f4       	brcc	.+12     	; 0x4d6 <__stack+0x77>
					Lib_Pin_Set(aRSPort, aRSPin, LIB_PIN_OUTPUT_HIGH);
     4ca:	80 2f       	mov	r24, r16
     4cc:	6a 2d       	mov	r22, r10
     4ce:	43 e0       	ldi	r20, 0x03	; 3
     4d0:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
     4d4:	21 c0       	rjmp	.+66     	; 0x518 <__stack+0xb9>
				}
				else if (aRSPort == 0xFC) {
     4d6:	0c 3f       	cpi	r16, 0xFC	; 252
     4d8:	31 f4       	brne	.+12     	; 0x4e6 <__stack+0x87>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x14, 0x04);
     4da:	8f 2d       	mov	r24, r15
     4dc:	6d 2d       	mov	r22, r13
     4de:	4c e0       	ldi	r20, 0x0C	; 12
     4e0:	24 e1       	ldi	r18, 0x14	; 20
     4e2:	04 e0       	ldi	r16, 0x04	; 4
     4e4:	17 c0       	rjmp	.+46     	; 0x514 <__stack+0xb5>
				}
				else if (aRSPort == 0xFD) {
     4e6:	0d 3f       	cpi	r16, 0xFD	; 253
     4e8:	31 f4       	brne	.+12     	; 0x4f6 <__stack+0x97>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x28, 0x08);
     4ea:	8f 2d       	mov	r24, r15
     4ec:	6d 2d       	mov	r22, r13
     4ee:	4c e0       	ldi	r20, 0x0C	; 12
     4f0:	28 e2       	ldi	r18, 0x28	; 40
     4f2:	08 e0       	ldi	r16, 0x08	; 8
     4f4:	0f c0       	rjmp	.+30     	; 0x514 <__stack+0xb5>
				}
				else if (aRSPort == 0xFE) {
     4f6:	0e 3f       	cpi	r16, 0xFE	; 254
     4f8:	31 f4       	brne	.+12     	; 0x506 <__stack+0xa7>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x14, 0x14);
     4fa:	8f 2d       	mov	r24, r15
     4fc:	6d 2d       	mov	r22, r13
     4fe:	4c e0       	ldi	r20, 0x0C	; 12
     500:	24 e1       	ldi	r18, 0x14	; 20
     502:	04 e1       	ldi	r16, 0x14	; 20
     504:	07 c0       	rjmp	.+14     	; 0x514 <__stack+0xb5>
				}
				else if (aRSPort == 0xFF) {
     506:	0f 3f       	cpi	r16, 0xFF	; 255
     508:	39 f4       	brne	.+14     	; 0x518 <__stack+0xb9>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x28, 0x28);
     50a:	8f 2d       	mov	r24, r15
     50c:	6d 2d       	mov	r22, r13
     50e:	4c e0       	ldi	r20, 0x0C	; 12
     510:	28 e2       	ldi	r18, 0x28	; 40
     512:	08 e2       	ldi	r16, 0x28	; 40
     514:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Lib_Mcp2515_Modify>
				}
			}
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x0C);
     518:	8f 2d       	mov	r24, r15
     51a:	6d 2d       	mov	r22, r13
     51c:	4c e0       	ldi	r20, 0x0C	; 12
     51e:	2c e0       	ldi	r18, 0x0C	; 12
     520:	0e 94 c0 01 	call	0x380	; 0x380 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_CANCTRL, 0xE0, aMode);
     524:	8f 2d       	mov	r24, r15
     526:	6d 2d       	mov	r22, r13
     528:	4f e0       	ldi	r20, 0x0F	; 15
     52a:	20 ee       	ldi	r18, 0xE0	; 224
     52c:	08 2d       	mov	r16, r8
     52e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Lib_Mcp2515_Modify>
			if (((Lib_Mcp2515_Read(aSSPort, aSSPin, LIB_MCP2515_CANCTRL)) & 0xE0) == aMode) {
     532:	8f 2d       	mov	r24, r15
     534:	6d 2d       	mov	r22, r13
     536:	4f e0       	ldi	r20, 0x0F	; 15
     538:	0e 94 9f 01 	call	0x33e	; 0x33e <Lib_Mcp2515_Read>
     53c:	40 e0       	ldi	r20, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	80 7e       	andi	r24, 0xE0	; 224
     542:	90 70       	andi	r25, 0x00	; 0
     544:	28 2d       	mov	r18, r8
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	82 17       	cp	r24, r18
     54a:	93 07       	cpc	r25, r19
     54c:	09 f4       	brne	.+2      	; 0x550 <__stack+0xf1>
     54e:	41 e0       	ldi	r20, 0x01	; 1
				return TRUE;
			}
			return FALSE;
		}
     550:	84 2f       	mov	r24, r20
     552:	cf 91       	pop	r28
     554:	df 91       	pop	r29
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	cf 90       	pop	r12
     562:	bf 90       	pop	r11
     564:	af 90       	pop	r10
     566:	9f 90       	pop	r9
     568:	8f 90       	pop	r8
     56a:	08 95       	ret

0000056c <Inf_Can_Rx>:
	#endif /* INF_CAN0_TX || INF_CAN0_RX || INF_CAN1_TX || INF_CAN1_RX || INF_CAN2_TX || INF_CAN2_RX */



	#if defined(INF_CAN0_RX) || defined(INF_CAN1_RX) || defined(INF_CAN2_RX)
		uint8_t Inf_Can_Rx(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aRSPort, const uint8_t aRSPin, Inf_Can_Msg_t * aInf_Can_Msg) {
     56c:	df 92       	push	r13
     56e:	ef 92       	push	r14
     570:	ff 92       	push	r15
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	df 93       	push	r29
     578:	cf 93       	push	r28
     57a:	0f 92       	push	r0
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	08 2f       	mov	r16, r24
     582:	d6 2e       	mov	r13, r22
     584:	14 2f       	mov	r17, r20
			uint8_t State = 0;
     586:	19 82       	std	Y+1, r1	; 0x01
			uint8_t CmdSave = 0;
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     588:	43 e0       	ldi	r20, 0x03	; 3
     58a:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     58e:	81 2f       	mov	r24, r17
     590:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     594:	80 2f       	mov	r24, r16
     596:	6d 2d       	mov	r22, r13
     598:	41 e0       	ldi	r20, 0x01	; 1
     59a:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     59e:	80 eb       	ldi	r24, 0xB0	; 176
     5a0:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5a2:	77 9b       	sbis	0x0e, 7	; 14
     5a4:	fe cf       	rjmp	.-4      	; 0x5a2 <Inf_Can_Rx+0x36>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     5a6:	8f ef       	ldi	r24, 0xFF	; 255
     5a8:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5aa:	77 9b       	sbis	0x0e, 7	; 14
     5ac:	fe cf       	rjmp	.-4      	; 0x5aa <Inf_Can_Rx+0x3e>
		return SPDR;
     5ae:	9f b1       	in	r25, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     5b0:	8f ef       	ldi	r24, 0xFF	; 255
     5b2:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5b4:	77 9b       	sbis	0x0e, 7	; 14
     5b6:	fe cf       	rjmp	.-4      	; 0x5b4 <Inf_Can_Rx+0x48>
		return SPDR;
     5b8:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_Tx(LIB_MCP2515_RX_STATUS);
			State = Inf_Spi_TxRx(0xFF);
     5ba:	99 83       	std	Y+1, r25	; 0x01
			Inf_Spi_TxRx(0xFF);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     5bc:	80 2f       	mov	r24, r16
     5be:	6d 2d       	mov	r22, r13
     5c0:	43 e0       	ldi	r20, 0x03	; 3
     5c2:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
			if (bit_is_set(State, LIB_MCP2515_RX_STATUS_INSTRUCTION_CANINTF_RX0IF)) {
     5c6:	89 81       	ldd	r24, Y+1	; 0x01
     5c8:	86 ff       	sbrs	r24, 6
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <Inf_Can_Rx+0x64>
     5cc:	10 e9       	ldi	r17, 0x90	; 144
     5ce:	06 c0       	rjmp	.+12     	; 0x5dc <Inf_Can_Rx+0x70>
				CmdSave = LIB_MCP2515_READ_RX_BUFFER0;
			}
			else if (bit_is_set(State, LIB_MCP2515_RX_STATUS_INSTRUCTION_CANINTF_RX1IF)) {
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	87 fd       	sbrc	r24, 7
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <Inf_Can_Rx+0x6e>
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	47 c0       	rjmp	.+142    	; 0x668 <Inf_Can_Rx+0xfc>
     5da:	14 e9       	ldi	r17, 0x94	; 148
				CmdSave = LIB_MCP2515_READ_RX_BUFFER1;
			}
			else {
				return FALSE;
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     5dc:	80 2f       	mov	r24, r16
     5de:	6d 2d       	mov	r22, r13
     5e0:	41 e0       	ldi	r20, 0x01	; 1
     5e2:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     5e6:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5e8:	77 9b       	sbis	0x0e, 7	; 14
     5ea:	fe cf       	rjmp	.-4      	; 0x5e8 <Inf_Can_Rx+0x7c>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     5ec:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5ee:	77 9b       	sbis	0x0e, 7	; 14
     5f0:	fe cf       	rjmp	.-4      	; 0x5ee <Inf_Can_Rx+0x82>
		return SPDR;
     5f2:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_Tx(CmdSave);
			aInf_Can_Msg->SIdH = Inf_Spi_TxRx(0x00);
     5f4:	f7 01       	movw	r30, r14
     5f6:	81 83       	std	Z+1, r24	; 0x01
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     5f8:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5fa:	77 9b       	sbis	0x0e, 7	; 14
     5fc:	fe cf       	rjmp	.-4      	; 0x5fa <Inf_Can_Rx+0x8e>
		return SPDR;
     5fe:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->SIdL = Inf_Spi_TxRx(0x00);
     600:	f7 01       	movw	r30, r14
     602:	80 83       	st	Z, r24
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     604:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     606:	77 9b       	sbis	0x0e, 7	; 14
     608:	fe cf       	rjmp	.-4      	; 0x606 <Inf_Can_Rx+0x9a>
		return SPDR;
     60a:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->EIdH = Inf_Spi_TxRx(0x00);
     60c:	f7 01       	movw	r30, r14
     60e:	83 83       	std	Z+3, r24	; 0x03
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     610:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     612:	77 9b       	sbis	0x0e, 7	; 14
     614:	fe cf       	rjmp	.-4      	; 0x612 <Inf_Can_Rx+0xa6>
		return SPDR;
     616:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->EIdL = Inf_Spi_TxRx(0x00);
     618:	f7 01       	movw	r30, r14
     61a:	82 83       	std	Z+2, r24	; 0x02
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     61c:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     61e:	77 9b       	sbis	0x0e, 7	; 14
     620:	fe cf       	rjmp	.-4      	; 0x61e <Inf_Can_Rx+0xb2>
		return SPDR;
     622:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->Dlc = Inf_Spi_TxRx(0x00);
     624:	f7 01       	movw	r30, r14
     626:	84 83       	std	Z+4, r24	; 0x04
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
     628:	84 81       	ldd	r24, Z+4	; 0x04
     62a:	86 fd       	sbrc	r24, 6
     62c:	10 c0       	rjmp	.+32     	; 0x64e <Inf_Can_Rx+0xe2>
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	09 c0       	rjmp	.+18     	; 0x644 <Inf_Can_Rx+0xd8>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     632:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     634:	77 9b       	sbis	0x0e, 7	; 14
     636:	fe cf       	rjmp	.-4      	; 0x634 <Inf_Can_Rx+0xc8>
		return SPDR;
     638:	8f b1       	in	r24, 0x0f	; 15
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
     63a:	f7 01       	movw	r30, r14
     63c:	e9 0f       	add	r30, r25
     63e:	f1 1d       	adc	r31, r1
     640:	85 83       	std	Z+5, r24	; 0x05
			aInf_Can_Msg->SIdL = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->EIdH = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->EIdL = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->Dlc = Inf_Spi_TxRx(0x00);
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
     642:	9f 5f       	subi	r25, 0xFF	; 255
     644:	f7 01       	movw	r30, r14
     646:	84 81       	ldd	r24, Z+4	; 0x04
     648:	98 17       	cp	r25, r24
     64a:	98 f3       	brcs	.-26     	; 0x632 <Inf_Can_Rx+0xc6>
     64c:	07 c0       	rjmp	.+14     	; 0x65c <Inf_Can_Rx+0xf0>
     64e:	f7 01       	movw	r30, r14
     650:	80 e0       	ldi	r24, 0x00	; 0
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
				}
			}
			else {
				for (uint8_t i = 0; i < 8; i++) {
					aInf_Can_Msg->Data[i] = 0x00;
     652:	15 82       	std	Z+5, r1	; 0x05
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
				}
			}
			else {
				for (uint8_t i = 0; i < 8; i++) {
     654:	8f 5f       	subi	r24, 0xFF	; 255
     656:	31 96       	adiw	r30, 0x01	; 1
     658:	88 30       	cpi	r24, 0x08	; 8
     65a:	d9 f7       	brne	.-10     	; 0x652 <Inf_Can_Rx+0xe6>
					aInf_Can_Msg->Data[i] = 0x00;
				}
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     65c:	80 2f       	mov	r24, r16
     65e:	6d 2d       	mov	r22, r13
     660:	43 e0       	ldi	r20, 0x03	; 3
     662:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
     666:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
		}
     668:	0f 90       	pop	r0
     66a:	cf 91       	pop	r28
     66c:	df 91       	pop	r29
     66e:	1f 91       	pop	r17
     670:	0f 91       	pop	r16
     672:	ff 90       	pop	r15
     674:	ef 90       	pop	r14
     676:	df 90       	pop	r13
     678:	08 95       	ret

0000067a <Inf_Can_Tx>:
	#endif /* INF_CAN0_RX || INF_CAN1_RX || INF_CAN2_RX */



	#if defined(INF_CAN0_TX) || defined(INF_CAN1_TX) || defined(INF_CAN2_TX)
		uint8_t Inf_Can_Tx(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aRSPort, const uint8_t aRSPin, Inf_Can_Msg_t * aInf_Can_Msg) {
     67a:	cf 92       	push	r12
     67c:	df 92       	push	r13
     67e:	ef 92       	push	r14
     680:	ff 92       	push	r15
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	df 93       	push	r29
     688:	cf 93       	push	r28
     68a:	0f 92       	push	r0
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	08 2f       	mov	r16, r24
     692:	d6 2e       	mov	r13, r22
     694:	14 2f       	mov	r17, r20
			uint8_t State = 0;
     696:	19 82       	std	Y+1, r1	; 0x01
			uint8_t CmdLoad = 0;
			uint8_t CmdSend = 0;
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     698:	43 e0       	ldi	r20, 0x03	; 3
     69a:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     69e:	81 2f       	mov	r24, r17
     6a0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     6a4:	80 2f       	mov	r24, r16
     6a6:	6d 2d       	mov	r22, r13
     6a8:	41 e0       	ldi	r20, 0x01	; 1
     6aa:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     6ae:	80 ea       	ldi	r24, 0xA0	; 160
     6b0:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     6b2:	77 9b       	sbis	0x0e, 7	; 14
     6b4:	fe cf       	rjmp	.-4      	; 0x6b2 <Inf_Can_Tx+0x38>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     6ba:	77 9b       	sbis	0x0e, 7	; 14
     6bc:	fe cf       	rjmp	.-4      	; 0x6ba <Inf_Can_Tx+0x40>
		return SPDR;
     6be:	9f b1       	in	r25, 0x0f	; 15
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     6c0:	8f ef       	ldi	r24, 0xFF	; 255
     6c2:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     6c4:	77 9b       	sbis	0x0e, 7	; 14
     6c6:	fe cf       	rjmp	.-4      	; 0x6c4 <Inf_Can_Tx+0x4a>
		return SPDR;
     6c8:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_Tx(LIB_MCP2515_READ_STATUS);
			State = Inf_Spi_TxRx(0xFF);
     6ca:	99 83       	std	Y+1, r25	; 0x01
			Inf_Spi_TxRx(0xFF);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     6cc:	80 2f       	mov	r24, r16
     6ce:	6d 2d       	mov	r22, r13
     6d0:	43 e0       	ldi	r20, 0x03	; 3
     6d2:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
			if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB0CTRL_TXREQ)) {
     6d6:	89 81       	ldd	r24, Y+1	; 0x01
     6d8:	82 fd       	sbrc	r24, 2
     6da:	04 c0       	rjmp	.+8      	; 0x6e4 <Inf_Can_Tx+0x6a>
     6dc:	10 e4       	ldi	r17, 0x40	; 64
     6de:	61 e8       	ldi	r22, 0x81	; 129
     6e0:	c6 2e       	mov	r12, r22
     6e2:	0f c0       	rjmp	.+30     	; 0x702 <Inf_Can_Tx+0x88>
				CmdLoad = LIB_MCP2515_LOAD_TX_BUFFER0;
				CmdSend = LIB_MCP2515_RTS_TX0;
			}
			else if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB1CTRL_TXREQ)) {
     6e4:	89 81       	ldd	r24, Y+1	; 0x01
     6e6:	84 fd       	sbrc	r24, 4
     6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <Inf_Can_Tx+0x78>
     6ea:	12 e4       	ldi	r17, 0x42	; 66
     6ec:	52 e8       	ldi	r21, 0x82	; 130
     6ee:	c5 2e       	mov	r12, r21
     6f0:	08 c0       	rjmp	.+16     	; 0x702 <Inf_Can_Tx+0x88>
				CmdLoad = LIB_MCP2515_LOAD_TX_BUFFER1;
				CmdSend = LIB_MCP2515_RTS_TX1;
			}
			else if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB2CTRL_TXREQ)) {
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	86 ff       	sbrs	r24, 6
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <Inf_Can_Tx+0x82>
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	48 c0       	rjmp	.+144    	; 0x78c <Inf_Can_Tx+0x112>
     6fc:	14 e4       	ldi	r17, 0x44	; 68
     6fe:	44 e8       	ldi	r20, 0x84	; 132
     700:	c4 2e       	mov	r12, r20
				CmdSend = LIB_MCP2515_RTS_TX2;
			}
			else {
				return FALSE;
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     702:	80 2f       	mov	r24, r16
     704:	6d 2d       	mov	r22, r13
     706:	41 e0       	ldi	r20, 0x01	; 1
     708:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     70c:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     70e:	77 9b       	sbis	0x0e, 7	; 14
     710:	fe cf       	rjmp	.-4      	; 0x70e <Inf_Can_Tx+0x94>
			Inf_Spi_Tx(CmdLoad);
			Inf_Spi_Tx(aInf_Can_Msg->SIdH);
     712:	f7 01       	movw	r30, r14
     714:	81 81       	ldd	r24, Z+1	; 0x01
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     716:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     718:	77 9b       	sbis	0x0e, 7	; 14
     71a:	fe cf       	rjmp	.-4      	; 0x718 <Inf_Can_Tx+0x9e>
			Inf_Spi_Tx(aInf_Can_Msg->SIdL);
     71c:	f7 01       	movw	r30, r14
     71e:	80 81       	ld	r24, Z
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     720:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     722:	77 9b       	sbis	0x0e, 7	; 14
     724:	fe cf       	rjmp	.-4      	; 0x722 <Inf_Can_Tx+0xa8>
			Inf_Spi_Tx(aInf_Can_Msg->EIdH);
     726:	f7 01       	movw	r30, r14
     728:	83 81       	ldd	r24, Z+3	; 0x03
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     72a:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     72c:	77 9b       	sbis	0x0e, 7	; 14
     72e:	fe cf       	rjmp	.-4      	; 0x72c <Inf_Can_Tx+0xb2>
			Inf_Spi_Tx(aInf_Can_Msg->EIdL);
     730:	f7 01       	movw	r30, r14
     732:	82 81       	ldd	r24, Z+2	; 0x02
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     734:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     736:	77 9b       	sbis	0x0e, 7	; 14
     738:	fe cf       	rjmp	.-4      	; 0x736 <Inf_Can_Tx+0xbc>
			Inf_Spi_Tx(aInf_Can_Msg->Dlc);
     73a:	f7 01       	movw	r30, r14
     73c:	24 81       	ldd	r18, Z+4	; 0x04
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     73e:	2f b9       	out	0x0f, r18	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     740:	77 9b       	sbis	0x0e, 7	; 14
     742:	fe cf       	rjmp	.-4      	; 0x740 <Inf_Can_Tx+0xc6>
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
     744:	f7 01       	movw	r30, r14
     746:	84 81       	ldd	r24, Z+4	; 0x04
     748:	86 fd       	sbrc	r24, 6
     74a:	0c c0       	rjmp	.+24     	; 0x764 <Inf_Can_Tx+0xea>
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	08 c0       	rjmp	.+16     	; 0x760 <Inf_Can_Tx+0xe6>
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++)
				{
					Inf_Spi_Tx(aInf_Can_Msg->Data[i]);
     750:	f7 01       	movw	r30, r14
     752:	e9 0f       	add	r30, r25
     754:	f1 1d       	adc	r31, r1
     756:	85 81       	ldd	r24, Z+5	; 0x05
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     758:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     75a:	77 9b       	sbis	0x0e, 7	; 14
     75c:	fe cf       	rjmp	.-4      	; 0x75a <Inf_Can_Tx+0xe0>
			Inf_Spi_Tx(aInf_Can_Msg->SIdL);
			Inf_Spi_Tx(aInf_Can_Msg->EIdH);
			Inf_Spi_Tx(aInf_Can_Msg->EIdL);
			Inf_Spi_Tx(aInf_Can_Msg->Dlc);
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++)
     75e:	9f 5f       	subi	r25, 0xFF	; 255
     760:	92 17       	cp	r25, r18
     762:	b0 f3       	brcs	.-20     	; 0x750 <Inf_Can_Tx+0xd6>
				{
					Inf_Spi_Tx(aInf_Can_Msg->Data[i]);
				}
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     764:	80 2f       	mov	r24, r16
     766:	6d 2d       	mov	r22, r13
     768:	43 e0       	ldi	r20, 0x03	; 3
     76a:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
			asm volatile("nop");
     76e:	00 00       	nop
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     770:	80 2f       	mov	r24, r16
     772:	6d 2d       	mov	r22, r13
     774:	41 e0       	ldi	r20, 0x01	; 1
     776:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     77a:	cf b8       	out	0x0f, r12	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     77c:	77 9b       	sbis	0x0e, 7	; 14
     77e:	fe cf       	rjmp	.-4      	; 0x77c <Inf_Can_Tx+0x102>
			Inf_Spi_Tx(CmdSend);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     780:	80 2f       	mov	r24, r16
     782:	6d 2d       	mov	r22, r13
     784:	43 e0       	ldi	r20, 0x03	; 3
     786:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
     78a:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
		}
     78c:	0f 90       	pop	r0
     78e:	cf 91       	pop	r28
     790:	df 91       	pop	r29
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	ff 90       	pop	r15
     798:	ef 90       	pop	r14
     79a:	df 90       	pop	r13
     79c:	cf 90       	pop	r12
     79e:	08 95       	ret

000007a0 <Isb_Inf_Can_Init>:
#ifndef ISB_INF_CAN_C_
	#define ISB_INF_CAN_C_



	uint8_t Isb_Inf_Can_Init(const uint8_t aInf) {
     7a0:	8f 92       	push	r8
     7a2:	af 92       	push	r10
     7a4:	cf 92       	push	r12
     7a6:	ef 92       	push	r14
     7a8:	0f 93       	push	r16
		uint8_t Result = FALSE;
		switch (aInf) {
     7aa:	88 23       	and	r24, r24
     7ac:	11 f0       	breq	.+4      	; 0x7b2 <Isb_Inf_Can_Init+0x12>
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	0c c0       	rjmp	.+24     	; 0x7ca <Isb_Inf_Can_Init+0x2a>
			#if ISB_INF_CAN0 == 1
				case 0:
					Result = Inf_Can_Init(INF_CAN0_SSPORT, INF_CAN0_SSPIN, INF_CAN0_SPICFG, INF_CAN0_CNF1, INF_CAN0_CNF2, INF_CAN0_CNF3, INF_CAN0_RSPORT, INF_CAN0_RSPIN, INF_CAN0_MODE);
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	64 e0       	ldi	r22, 0x04	; 4
     7b6:	43 e0       	ldi	r20, 0x03	; 3
     7b8:	23 e0       	ldi	r18, 0x03	; 3
     7ba:	06 eb       	ldi	r16, 0xB6	; 182
     7bc:	74 e0       	ldi	r23, 0x04	; 4
     7be:	e7 2e       	mov	r14, r23
     7c0:	cc 24       	eor	r12, r12
     7c2:	aa 24       	eor	r10, r10
     7c4:	88 24       	eor	r8, r8
     7c6:	0e 94 0a 02 	call	0x414	; 0x414 <Inf_Can_Init>
					Result = Inf_Can_Init(INF_CAN2_SSPORT, INF_CAN2_SSPIN, INF_CAN2_SPICFG, INF_CAN2_CNF1, INF_CAN2_CNF2, INF_CAN2_CNF3, INF_CAN2_RSPORT, INF_CAN2_RSPIN, INF_CAN2_MODE);
					break;
			#endif /* ISB_INF_CAN2 == 1 */
		}
		return Result;
	}
     7ca:	0f 91       	pop	r16
     7cc:	ef 90       	pop	r14
     7ce:	cf 90       	pop	r12
     7d0:	af 90       	pop	r10
     7d2:	8f 90       	pop	r8
     7d4:	08 95       	ret

000007d6 <Isb_Inf_Can_Rx>:



	uint8_t Isb_Inf_Can_Rx(const uint8_t aInf, Isb_Msg_t * aIsb_Msg) {
     7d6:	af 92       	push	r10
     7d8:	bf 92       	push	r11
     7da:	cf 92       	push	r12
     7dc:	df 92       	push	r13
     7de:	ef 92       	push	r14
     7e0:	ff 92       	push	r15
     7e2:	0f 93       	push	r16
     7e4:	df 93       	push	r29
     7e6:	cf 93       	push	r28
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
     7ec:	2d 97       	sbiw	r28, 0x0d	; 13
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	6b 01       	movw	r12, r22
		uint8_t aSSPort;
		uint8_t aSSPin;
		uint8_t aSpiCfg;
		uint8_t aRSPort;
		uint8_t aRSPin;
		switch (aInf) {
     7fa:	88 23       	and	r24, r24
     7fc:	09 f0       	breq	.+2      	; 0x800 <Isb_Inf_Can_Rx+0x2a>
     7fe:	66 c0       	rjmp	.+204    	; 0x8cc <Isb_Inf_Can_Rx+0xf6>
			default:
				return FALSE;
				break;
		}
		Inf_Can_Msg_t aCanMsg;
		if (Inf_Can_Rx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
     800:	82 e0       	ldi	r24, 0x02	; 2
     802:	64 e0       	ldi	r22, 0x04	; 4
     804:	43 e0       	ldi	r20, 0x03	; 3
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	00 e0       	ldi	r16, 0x00	; 0
     80a:	5e 01       	movw	r10, r28
     80c:	08 94       	sec
     80e:	a1 1c       	adc	r10, r1
     810:	b1 1c       	adc	r11, r1
     812:	75 01       	movw	r14, r10
     814:	0e 94 b6 02 	call	0x56c	; 0x56c <Inf_Can_Rx>
     818:	81 30       	cpi	r24, 0x01	; 1
     81a:	09 f0       	breq	.+2      	; 0x81e <Isb_Inf_Can_Rx+0x48>
     81c:	57 c0       	rjmp	.+174    	; 0x8cc <Isb_Inf_Can_Rx+0xf6>
			aIsb_Msg->Flags = ((aCanMsg.SIdH & 0xC0) >> 2) | (aCanMsg.Dlc & ISB_MSG_FLAGS_DLC_MASK);
     81e:	ea 81       	ldd	r30, Y+2	; 0x02
     820:	8e 2f       	mov	r24, r30
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	80 7c       	andi	r24, 0xC0	; 192
     826:	90 70       	andi	r25, 0x00	; 0
     828:	95 95       	asr	r25
     82a:	87 95       	ror	r24
     82c:	95 95       	asr	r25
     82e:	87 95       	ror	r24
     830:	0d 81       	ldd	r16, Y+5	; 0x05
     832:	f0 2f       	mov	r31, r16
     834:	ff 70       	andi	r31, 0x0F	; 15
     836:	f8 2b       	or	r31, r24
     838:	d6 01       	movw	r26, r12
     83a:	fc 93       	st	X, r31
			aIsb_Msg->DestId = (uint16_t)((aCanMsg.EIdH & 0xF8) >> 3) + (uint16_t)((aCanMsg.SIdL & 0x03) << 5) + (uint16_t)((aCanMsg.SIdL & 0xE0) << 2) + (uint16_t)((aCanMsg.SIdH & 0x3F) << 10);
     83c:	6c 81       	ldd	r22, Y+4	; 0x04
     83e:	49 81       	ldd	r20, Y+1	; 0x01
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	3e 2f       	mov	r19, r30
     844:	33 0f       	add	r19, r19
     846:	33 0f       	add	r19, r19
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	86 2f       	mov	r24, r22
     84c:	86 95       	lsr	r24
     84e:	86 95       	lsr	r24
     850:	86 95       	lsr	r24
     852:	28 0f       	add	r18, r24
     854:	31 1d       	adc	r19, r1
     856:	ca 01       	movw	r24, r20
     858:	83 70       	andi	r24, 0x03	; 3
     85a:	90 70       	andi	r25, 0x00	; 0
     85c:	75 e0       	ldi	r23, 0x05	; 5
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	7a 95       	dec	r23
     864:	e1 f7       	brne	.-8      	; 0x85e <Isb_Inf_Can_Rx+0x88>
     866:	28 0f       	add	r18, r24
     868:	39 1f       	adc	r19, r25
     86a:	40 7e       	andi	r20, 0xE0	; 224
     86c:	50 70       	andi	r21, 0x00	; 0
     86e:	44 0f       	add	r20, r20
     870:	55 1f       	adc	r21, r21
     872:	44 0f       	add	r20, r20
     874:	55 1f       	adc	r21, r21
     876:	24 0f       	add	r18, r20
     878:	35 1f       	adc	r19, r21
     87a:	12 96       	adiw	r26, 0x02	; 2
     87c:	3c 93       	st	X, r19
     87e:	2e 93       	st	-X, r18
     880:	11 97       	sbiw	r26, 0x01	; 1
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	67 70       	andi	r22, 0x07	; 7
     886:	70 70       	andi	r23, 0x00	; 0
     888:	76 2f       	mov	r23, r22
     88a:	66 27       	eor	r22, r22
     88c:	8b 81       	ldd	r24, Y+3	; 0x03
     88e:	68 0f       	add	r22, r24
     890:	71 1d       	adc	r23, r1
     892:	14 96       	adiw	r26, 0x04	; 4
     894:	7c 93       	st	X, r23
     896:	6e 93       	st	-X, r22
     898:	13 97       	sbiw	r26, 0x03	; 3
			if (bit_is_set(aCanMsg.Dlc, 6)) {
     89a:	8d 81       	ldd	r24, Y+5	; 0x05
     89c:	86 fd       	sbrc	r24, 6
     89e:	0a c0       	rjmp	.+20     	; 0x8b4 <Isb_Inf_Can_Rx+0xde>
				aIsb_Msg->Flags |= 0x40;
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     8a0:	de 01       	movw	r26, r28
     8a2:	16 96       	adiw	r26, 0x06	; 6
     8a4:	f6 01       	movw	r30, r12
     8a6:	20 2f       	mov	r18, r16
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	2b 5f       	subi	r18, 0xFB	; 251
     8ac:	3f 4f       	sbci	r19, 0xFF	; 255
     8ae:	2a 0d       	add	r18, r10
     8b0:	3b 1d       	adc	r19, r11
     8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <Isb_Inf_Can_Rx+0xea>
		if (Inf_Can_Rx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
			aIsb_Msg->Flags = ((aCanMsg.SIdH & 0xC0) >> 2) | (aCanMsg.Dlc & ISB_MSG_FLAGS_DLC_MASK);
			aIsb_Msg->DestId = (uint16_t)((aCanMsg.EIdH & 0xF8) >> 3) + (uint16_t)((aCanMsg.SIdL & 0x03) << 5) + (uint16_t)((aCanMsg.SIdL & 0xE0) << 2) + (uint16_t)((aCanMsg.SIdH & 0x3F) << 10);
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
			if (bit_is_set(aCanMsg.Dlc, 6)) {
				aIsb_Msg->Flags |= 0x40;
     8b4:	f0 64       	ori	r31, 0x40	; 64
     8b6:	d6 01       	movw	r26, r12
     8b8:	fc 93       	st	X, r31
     8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <Isb_Inf_Can_Rx+0xf2>
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
					aIsb_Msg->Data[i] = aCanMsg.Data[i];
     8bc:	8d 91       	ld	r24, X+
     8be:	84 83       	std	Z+4, r24	; 0x04
     8c0:	31 96       	adiw	r30, 0x01	; 1
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
			if (bit_is_set(aCanMsg.Dlc, 6)) {
				aIsb_Msg->Flags |= 0x40;
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     8c2:	a2 17       	cp	r26, r18
     8c4:	b3 07       	cpc	r27, r19
     8c6:	d1 f7       	brne	.-12     	; 0x8bc <Isb_Inf_Can_Rx+0xe6>
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	01 c0       	rjmp	.+2      	; 0x8ce <Isb_Inf_Can_Rx+0xf8>
     8cc:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			return TRUE;
		}
		return FALSE;
	}
     8ce:	2d 96       	adiw	r28, 0x0d	; 13
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	cd bf       	out	0x3d, r28	; 61
     8da:	cf 91       	pop	r28
     8dc:	df 91       	pop	r29
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	cf 90       	pop	r12
     8e8:	bf 90       	pop	r11
     8ea:	af 90       	pop	r10
     8ec:	08 95       	ret

000008ee <Isb_Inf_Can_Tx>:



	uint8_t Isb_Inf_Can_Tx(const uint8_t aInf, const Isb_Msg_t * aIsb_Msg) {
     8ee:	ef 92       	push	r14
     8f0:	ff 92       	push	r15
     8f2:	0f 93       	push	r16
     8f4:	df 93       	push	r29
     8f6:	cf 93       	push	r28
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	2d 97       	sbiw	r28, 0x0d	; 13
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	de bf       	out	0x3e, r29	; 62
     904:	0f be       	out	0x3f, r0	; 63
     906:	cd bf       	out	0x3d, r28	; 61
     908:	fb 01       	movw	r30, r22
		uint8_t aSSPort;
		uint8_t aSSPin;
		uint8_t aSpiCfg;
		uint8_t aRSPort;
		uint8_t aRSPin;
		switch (aInf) {
     90a:	88 23       	and	r24, r24
     90c:	11 f0       	breq	.+4      	; 0x912 <Isb_Inf_Can_Tx+0x24>
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	4e c0       	rjmp	.+156    	; 0x9ae <Isb_Inf_Can_Tx+0xc0>
		}
		Inf_Can_Msg_t aCanMsg;
		// Write Message to SendBuffer - TXBnSIDH:
		//	[7..6] = Type
		//	[5..0] = Dest[15..10]
		aCanMsg.SIdH = ((aIsb_Msg->Flags << 2) & 0xC0) | (aIsb_Msg->DestId >> 10);
     912:	92 81       	ldd	r25, Z+2	; 0x02
     914:	96 95       	lsr	r25
     916:	96 95       	lsr	r25
     918:	60 81       	ld	r22, Z
     91a:	86 2f       	mov	r24, r22
     91c:	88 0f       	add	r24, r24
     91e:	88 0f       	add	r24, r24
     920:	80 7c       	andi	r24, 0xC0	; 192
     922:	89 2b       	or	r24, r25
     924:	8a 83       	std	Y+2, r24	; 0x02
		//	[7..5] = Dest[9..7]
		//	[4] = 0
		//	[3] = 1
		//	[2] = 0
		//	[1..0] = Dest[6..5]
		aCanMsg.SIdL = ((uint8_t)(aIsb_Msg->DestId >> 2) & 0xE0) | 0x08 | ((uint8_t)(aIsb_Msg->DestId >> 5) & 0x03);
     926:	41 81       	ldd	r20, Z+1	; 0x01
     928:	52 81       	ldd	r21, Z+2	; 0x02
     92a:	ca 01       	movw	r24, r20
     92c:	96 95       	lsr	r25
     92e:	87 95       	ror	r24
     930:	96 95       	lsr	r25
     932:	87 95       	ror	r24
     934:	80 7e       	andi	r24, 0xE0	; 224
     936:	9a 01       	movw	r18, r20
     938:	a5 e0       	ldi	r26, 0x05	; 5
     93a:	36 95       	lsr	r19
     93c:	27 95       	ror	r18
     93e:	aa 95       	dec	r26
     940:	e1 f7       	brne	.-8      	; 0x93a <Isb_Inf_Can_Tx+0x4c>
     942:	23 70       	andi	r18, 0x03	; 3
     944:	82 2b       	or	r24, r18
     946:	88 60       	ori	r24, 0x08	; 8
     948:	89 83       	std	Y+1, r24	; 0x01
		// Write Message to SendBuffer - TXBnEID8:
		//	[7..3] = Dest[4..0]
		//	[2..0] = Source[10..8]
		aCanMsg.EIdH = ((uint8_t)((aIsb_Msg->DestId << 3) & 0xF8)) | ((uint8_t)((aIsb_Msg->SourceId >> 8) & 0x07));
     94a:	84 81       	ldd	r24, Z+4	; 0x04
     94c:	87 70       	andi	r24, 0x07	; 7
     94e:	44 0f       	add	r20, r20
     950:	44 0f       	add	r20, r20
     952:	44 0f       	add	r20, r20
     954:	84 2b       	or	r24, r20
     956:	8c 83       	std	Y+4, r24	; 0x04
		// Write Message to SendBuffer - TXBnEID0:
		//	[7..0] = Source[7..0]
		aCanMsg.EIdL = (uint8_t)aIsb_Msg->SourceId;
     958:	83 81       	ldd	r24, Z+3	; 0x03
     95a:	8b 83       	std	Y+3, r24	; 0x03
		// Write Message to SendBuffer - DataLength
		aCanMsg.Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
     95c:	6f 70       	andi	r22, 0x0F	; 15
     95e:	6d 83       	std	Y+5, r22	; 0x05
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
     960:	80 81       	ld	r24, Z
     962:	86 fd       	sbrc	r24, 6
     964:	0a c0       	rjmp	.+20     	; 0x97a <Isb_Inf_Can_Tx+0x8c>
     966:	df 01       	movw	r26, r30
     968:	fe 01       	movw	r30, r28
     96a:	36 96       	adiw	r30, 0x06	; 6
			aCanMsg.Dlc |= 0x40;
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     96c:	ce 01       	movw	r24, r28
     96e:	86 0f       	add	r24, r22
     970:	91 1d       	adc	r25, r1
     972:	bc 01       	movw	r22, r24
     974:	6a 5f       	subi	r22, 0xFA	; 250
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	07 c0       	rjmp	.+14     	; 0x988 <Isb_Inf_Can_Tx+0x9a>
		aCanMsg.EIdL = (uint8_t)aIsb_Msg->SourceId;
		// Write Message to SendBuffer - DataLength
		aCanMsg.Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
			aCanMsg.Dlc |= 0x40;
     97a:	60 64       	ori	r22, 0x40	; 64
     97c:	6d 83       	std	Y+5, r22	; 0x05
     97e:	08 c0       	rjmp	.+16     	; 0x990 <Isb_Inf_Can_Tx+0xa2>
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
				aCanMsg.Data[i] = aIsb_Msg->Data[i];
     980:	14 96       	adiw	r26, 0x04	; 4
     982:	8c 91       	ld	r24, X
     984:	14 97       	sbiw	r26, 0x04	; 4
     986:	81 93       	st	Z+, r24
     988:	11 96       	adiw	r26, 0x01	; 1
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
			aCanMsg.Dlc |= 0x40;
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     98a:	e6 17       	cp	r30, r22
     98c:	f7 07       	cpc	r31, r23
     98e:	c1 f7       	brne	.-16     	; 0x980 <Isb_Inf_Can_Tx+0x92>
				aCanMsg.Data[i] = aIsb_Msg->Data[i];
			}
		}
		if (Inf_Can_Tx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
     990:	82 e0       	ldi	r24, 0x02	; 2
     992:	64 e0       	ldi	r22, 0x04	; 4
     994:	43 e0       	ldi	r20, 0x03	; 3
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	00 e0       	ldi	r16, 0x00	; 0
     99a:	7e 01       	movw	r14, r28
     99c:	08 94       	sec
     99e:	e1 1c       	adc	r14, r1
     9a0:	f1 1c       	adc	r15, r1
     9a2:	0e 94 3d 03 	call	0x67a	; 0x67a <Inf_Can_Tx>
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	81 30       	cpi	r24, 0x01	; 1
     9aa:	09 f4       	brne	.+2      	; 0x9ae <Isb_Inf_Can_Tx+0xc0>
     9ac:	91 e0       	ldi	r25, 0x01	; 1
			return TRUE;
		}
		return FALSE;
	}
     9ae:	89 2f       	mov	r24, r25
     9b0:	2d 96       	adiw	r28, 0x0d	; 13
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	cf 91       	pop	r28
     9be:	df 91       	pop	r29
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	ef 90       	pop	r14
     9c6:	08 95       	ret

000009c8 <Isb_Systick_Init>:



	void Isb_Systick_Init(void) {
		#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__) || defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
			TCCR0 = (1 << WGM01) | (1 << CS01) | (1 << CS00);
     9c8:	8b e0       	ldi	r24, 0x0B	; 11
     9ca:	83 bf       	out	0x33, r24	; 51
			TCNT0 = 0;
     9cc:	12 be       	out	0x32, r1	; 50
			OCR0 = (F_CPU / 64) / 1000;
     9ce:	8d e7       	ldi	r24, 0x7D	; 125
     9d0:	8c bf       	out	0x3c, r24	; 60
			TIMSK = (1 << OCIE0);
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	89 bf       	out	0x39, r24	; 57
			OCR0A = (F_CPU / 64) / 1000;
			TIMSK0 = (1 << OCIE0A);
		#else
			#error "No definition for this MCU available."
		#endif
	}
     9d6:	08 95       	ret

000009d8 <Isb_Systick_Exec>:



	void Isb_Systick_Exec(void) {
		if (bit_is_set(Isb_Systick_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
     9d8:	80 91 99 00 	lds	r24, 0x0099
     9dc:	80 ff       	sbrs	r24, 0
     9de:	50 c0       	rjmp	.+160    	; 0xa80 <Isb_Systick_Exec+0xa8>

			#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
				if (Isb_App_DigOut_IrqExec >= ISB_APP_DIGOUT_EXECTIME) {
     9e0:	80 91 9b 00 	lds	r24, 0x009B
     9e4:	90 91 9c 00 	lds	r25, 0x009C
     9e8:	0a 97       	sbiw	r24, 0x0a	; 10
     9ea:	48 f0       	brcs	.+18     	; 0x9fe <Isb_Systick_Exec+0x26>
					Isb_App_DigOut_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     9ec:	80 91 9a 00 	lds	r24, 0x009A
     9f0:	81 60       	ori	r24, 0x01	; 1
     9f2:	80 93 9a 00 	sts	0x009A, r24
					Isb_App_DigOut_IrqExec = 0;
     9f6:	10 92 9c 00 	sts	0x009C, r1
     9fa:	10 92 9b 00 	sts	0x009B, r1
				}
			#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

			#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
				if (Isb_App_DigIn_IrqExec >= ISB_APP_DIGIN_EXECTIME) {
     9fe:	80 91 a0 00 	lds	r24, 0x00A0
     a02:	90 91 a1 00 	lds	r25, 0x00A1
     a06:	0a 97       	sbiw	r24, 0x0a	; 10
     a08:	48 f0       	brcs	.+18     	; 0xa1c <Isb_Systick_Exec+0x44>
					Isb_App_DigIn_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a0a:	80 91 9f 00 	lds	r24, 0x009F
     a0e:	81 60       	ori	r24, 0x01	; 1
     a10:	80 93 9f 00 	sts	0x009F, r24
					Isb_App_DigIn_IrqExec = 0;
     a14:	10 92 a1 00 	sts	0x00A1, r1
     a18:	10 92 a0 00 	sts	0x00A0, r1
					Isb_App_Lcd_IrqExec = 0;
				}
			#endif /* ISB_APP_LCD_MAX && ISB_APP_H_ */

			#if defined(ISB_OBJ_1BIT_MAX) && defined(ISB_OBJ_H_)
				if (Isb_Obj_1Bit_IrqExec >= ISB_OBJ_1BIT_EXECTIME) {
     a1c:	80 91 a3 00 	lds	r24, 0x00A3
     a20:	90 91 a4 00 	lds	r25, 0x00A4
     a24:	0a 97       	sbiw	r24, 0x0a	; 10
     a26:	48 f0       	brcs	.+18     	; 0xa3a <Isb_Systick_Exec+0x62>
					Isb_Obj_1Bit_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a28:	80 91 a2 00 	lds	r24, 0x00A2
     a2c:	81 60       	ori	r24, 0x01	; 1
     a2e:	80 93 a2 00 	sts	0x00A2, r24
					Isb_Obj_1Bit_IrqExec = 0;
     a32:	10 92 a4 00 	sts	0x00A4, r1
     a36:	10 92 a3 00 	sts	0x00A3, r1
				}
			#endif /* ISB_OBJ_1BIT_MAX && ISB_OBJ_H_ */

			#if defined(ISB_OBJ_4BIT_MAX) && defined(ISB_OBJ_H_)
				if (Isb_Obj_4Bit_IrqExec >= ISB_OBJ_4BIT_EXECTIME) {
     a3a:	80 91 a6 00 	lds	r24, 0x00A6
     a3e:	90 91 a7 00 	lds	r25, 0x00A7
     a42:	0a 97       	sbiw	r24, 0x0a	; 10
     a44:	48 f0       	brcs	.+18     	; 0xa58 <Isb_Systick_Exec+0x80>
					Isb_Obj_4Bit_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a46:	80 91 a5 00 	lds	r24, 0x00A5
     a4a:	81 60       	ori	r24, 0x01	; 1
     a4c:	80 93 a5 00 	sts	0x00A5, r24
					Isb_Obj_4Bit_IrqExec = 0;
     a50:	10 92 a7 00 	sts	0x00A7, r1
     a54:	10 92 a6 00 	sts	0x00A6, r1
				}
			#endif /* ISB_OBJ_4BIT_MAX && ISB_OBJ_H_ */

			#if defined(ISB_OBJ_8BIT_MAX) && defined(ISB_OBJ_H_)
				if (Isb_Obj_8Bit_IrqExec >= ISB_OBJ_8BIT_EXECTIME) {
     a58:	80 91 a9 00 	lds	r24, 0x00A9
     a5c:	90 91 aa 00 	lds	r25, 0x00AA
     a60:	0a 97       	sbiw	r24, 0x0a	; 10
     a62:	48 f0       	brcs	.+18     	; 0xa76 <Isb_Systick_Exec+0x9e>
					Isb_Obj_8Bit_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a64:	80 91 a8 00 	lds	r24, 0x00A8
     a68:	81 60       	ori	r24, 0x01	; 1
     a6a:	80 93 a8 00 	sts	0x00A8, r24
					Isb_Obj_8Bit_IrqExec = 0;
     a6e:	10 92 aa 00 	sts	0x00AA, r1
     a72:	10 92 a9 00 	sts	0x00A9, r1
					Isb_Obj_Float_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
					Isb_Obj_Float_IrqExec = 0;
				}
			#endif /* ISB_OBJ_FLOAT_MAX && ISB_OBJ_H_ */

			Isb_Systick_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
     a76:	80 91 99 00 	lds	r24, 0x0099
     a7a:	8e 7f       	andi	r24, 0xFE	; 254
     a7c:	80 93 99 00 	sts	0x0099, r24
     a80:	08 95       	ret

00000a82 <Isb_Systick_Irq_Timer>:
	}



	void Isb_Systick_Irq_Timer(void) {
		Isb_Systick_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a82:	80 91 99 00 	lds	r24, 0x0099
     a86:	81 60       	ori	r24, 0x01	; 1
     a88:	80 93 99 00 	sts	0x0099, r24

		#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
			Isb_App_DigOut_IrqExec++;
     a8c:	80 91 9b 00 	lds	r24, 0x009B
     a90:	90 91 9c 00 	lds	r25, 0x009C
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	90 93 9c 00 	sts	0x009C, r25
     a9a:	80 93 9b 00 	sts	0x009B, r24
		#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

		#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
			Isb_App_DigIn_IrqExec++;
     a9e:	80 91 a0 00 	lds	r24, 0x00A0
     aa2:	90 91 a1 00 	lds	r25, 0x00A1
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	90 93 a1 00 	sts	0x00A1, r25
     aac:	80 93 a0 00 	sts	0x00A0, r24
		#if defined(ISB_APP_LCD_MAX) && defined(ISB_APP_H_)
			Isb_App_Lcd_IrqExec++;
		#endif /* ISB_APP_LCD_MAX && ISB_APP_H_ */

		#if defined(ISB_OBJ_1BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_1Bit_IrqExec++;
     ab0:	80 91 a3 00 	lds	r24, 0x00A3
     ab4:	90 91 a4 00 	lds	r25, 0x00A4
     ab8:	01 96       	adiw	r24, 0x01	; 1
     aba:	90 93 a4 00 	sts	0x00A4, r25
     abe:	80 93 a3 00 	sts	0x00A3, r24
		#endif /* ISB_OBJ_1BIT_MAX && ISB_OBJ_H_ */

		#if defined(ISB_OBJ_4BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_4Bit_IrqExec++;
     ac2:	80 91 a6 00 	lds	r24, 0x00A6
     ac6:	90 91 a7 00 	lds	r25, 0x00A7
     aca:	01 96       	adiw	r24, 0x01	; 1
     acc:	90 93 a7 00 	sts	0x00A7, r25
     ad0:	80 93 a6 00 	sts	0x00A6, r24
		#endif /* ISB_OBJ_4BIT_MAX && ISB_OBJ_H_ */

		#if defined(ISB_OBJ_8BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_8Bit_IrqExec++;
     ad4:	80 91 a9 00 	lds	r24, 0x00A9
     ad8:	90 91 aa 00 	lds	r25, 0x00AA
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	90 93 aa 00 	sts	0x00AA, r25
     ae2:	80 93 a9 00 	sts	0x00A9, r24

		#if defined(ISB_OBJ_FLOAT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_Float_IrqExec++;
		#endif /* ISB_OBJ_FLOAT_MAX && ISB_OBJ_H_ */

	}
     ae6:	08 95       	ret

00000ae8 <__vector_19>:



	#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__) || defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
		ISR(TIMER0_COMP_vect) {
     ae8:	1f 92       	push	r1
     aea:	0f 92       	push	r0
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	0f 92       	push	r0
     af0:	11 24       	eor	r1, r1
     af2:	8f 93       	push	r24
     af4:	9f 93       	push	r25
	}



	void Isb_Systick_Irq_Timer(void) {
		Isb_Systick_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     af6:	80 91 99 00 	lds	r24, 0x0099
     afa:	81 60       	ori	r24, 0x01	; 1
     afc:	80 93 99 00 	sts	0x0099, r24

		#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
			Isb_App_DigOut_IrqExec++;
     b00:	80 91 9b 00 	lds	r24, 0x009B
     b04:	90 91 9c 00 	lds	r25, 0x009C
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	90 93 9c 00 	sts	0x009C, r25
     b0e:	80 93 9b 00 	sts	0x009B, r24
		#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

		#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
			Isb_App_DigIn_IrqExec++;
     b12:	80 91 a0 00 	lds	r24, 0x00A0
     b16:	90 91 a1 00 	lds	r25, 0x00A1
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	90 93 a1 00 	sts	0x00A1, r25
     b20:	80 93 a0 00 	sts	0x00A0, r24
		#if defined(ISB_APP_LCD_MAX) && defined(ISB_APP_H_)
			Isb_App_Lcd_IrqExec++;
		#endif /* ISB_APP_LCD_MAX && ISB_APP_H_ */

		#if defined(ISB_OBJ_1BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_1Bit_IrqExec++;
     b24:	80 91 a3 00 	lds	r24, 0x00A3
     b28:	90 91 a4 00 	lds	r25, 0x00A4
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	90 93 a4 00 	sts	0x00A4, r25
     b32:	80 93 a3 00 	sts	0x00A3, r24
		#endif /* ISB_OBJ_1BIT_MAX && ISB_OBJ_H_ */

		#if defined(ISB_OBJ_4BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_4Bit_IrqExec++;
     b36:	80 91 a6 00 	lds	r24, 0x00A6
     b3a:	90 91 a7 00 	lds	r25, 0x00A7
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	90 93 a7 00 	sts	0x00A7, r25
     b44:	80 93 a6 00 	sts	0x00A6, r24
		#endif /* ISB_OBJ_4BIT_MAX && ISB_OBJ_H_ */

		#if defined(ISB_OBJ_8BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_8Bit_IrqExec++;
     b48:	80 91 a9 00 	lds	r24, 0x00A9
     b4c:	90 91 aa 00 	lds	r25, 0x00AA
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	90 93 aa 00 	sts	0x00AA, r25
     b56:	80 93 a9 00 	sts	0x00A9, r24


	#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__) || defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
		ISR(TIMER0_COMP_vect) {
			Isb_Systick_Irq_Timer();
		}
     b5a:	9f 91       	pop	r25
     b5c:	8f 91       	pop	r24
     b5e:	0f 90       	pop	r0
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	0f 90       	pop	r0
     b64:	1f 90       	pop	r1
     b66:	18 95       	reti

00000b68 <Isb_Ch_Init>:
	}



	uint8_t __attribute__((always_inline)) lib_eep_fw_read_byte(uint8_t * aAddr) {
		return eeprom_read_byte(Isb_Firmware_Offset + aAddr);;
     b68:	80 91 96 00 	lds	r24, 0x0096
     b6c:	a8 2f       	mov	r26, r24
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	e4 e5       	ldi	r30, 0x54	; 84
     b72:	f3 e0       	ldi	r31, 0x03	; 3
     b74:	60 e0       	ldi	r22, 0x00	; 0

	void Isb_Ch_Init(void) {
		for (uint8_t ChIndex = 0; ChIndex < ISB_CH_MAX; ChIndex++) {
			uint16_t eepAddrCtrl = 0;
			uint16_t eepAddrCrc = 0;
			switch (ChIndex) {
     b76:	67 30       	cpi	r22, 0x07	; 7
     b78:	09 f4       	brne	.+2      	; 0xb7c <Isb_Ch_Init+0x14>
     b7a:	4b c0       	rjmp	.+150    	; 0xc12 <Isb_Ch_Init+0xaa>
     b7c:	68 30       	cpi	r22, 0x08	; 8
     b7e:	70 f4       	brcc	.+28     	; 0xb9c <Isb_Ch_Init+0x34>
     b80:	63 30       	cpi	r22, 0x03	; 3
     b82:	99 f1       	breq	.+102    	; 0xbea <Isb_Ch_Init+0x82>
     b84:	64 30       	cpi	r22, 0x04	; 4
     b86:	28 f4       	brcc	.+10     	; 0xb92 <Isb_Ch_Init+0x2a>
     b88:	61 30       	cpi	r22, 0x01	; 1
     b8a:	01 f1       	breq	.+64     	; 0xbcc <Isb_Ch_Init+0x64>
     b8c:	62 30       	cpi	r22, 0x02	; 2
     b8e:	40 f5       	brcc	.+80     	; 0xbe0 <Isb_Ch_Init+0x78>
     b90:	22 c0       	rjmp	.+68     	; 0xbd6 <Isb_Ch_Init+0x6e>
     b92:	65 30       	cpi	r22, 0x05	; 5
     b94:	a1 f1       	breq	.+104    	; 0xbfe <Isb_Ch_Init+0x96>
     b96:	66 30       	cpi	r22, 0x06	; 6
     b98:	b8 f5       	brcc	.+110    	; 0xc08 <Isb_Ch_Init+0xa0>
     b9a:	2c c0       	rjmp	.+88     	; 0xbf4 <Isb_Ch_Init+0x8c>
     b9c:	6b 30       	cpi	r22, 0x0B	; 11
     b9e:	09 f4       	brne	.+2      	; 0xba2 <Isb_Ch_Init+0x3a>
     ba0:	4c c0       	rjmp	.+152    	; 0xc3a <Isb_Ch_Init+0xd2>
     ba2:	6c 30       	cpi	r22, 0x0C	; 12
     ba4:	30 f4       	brcc	.+12     	; 0xbb2 <Isb_Ch_Init+0x4a>
     ba6:	69 30       	cpi	r22, 0x09	; 9
     ba8:	f1 f1       	breq	.+124    	; 0xc26 <Isb_Ch_Init+0xbe>
     baa:	6a 30       	cpi	r22, 0x0A	; 10
     bac:	08 f0       	brcs	.+2      	; 0xbb0 <Isb_Ch_Init+0x48>
     bae:	40 c0       	rjmp	.+128    	; 0xc30 <Isb_Ch_Init+0xc8>
     bb0:	35 c0       	rjmp	.+106    	; 0xc1c <Isb_Ch_Init+0xb4>
     bb2:	6d 30       	cpi	r22, 0x0D	; 13
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <Isb_Ch_Init+0x50>
     bb6:	4b c0       	rjmp	.+150    	; 0xc4e <Isb_Ch_Init+0xe6>
     bb8:	6d 30       	cpi	r22, 0x0D	; 13
     bba:	08 f4       	brcc	.+2      	; 0xbbe <Isb_Ch_Init+0x56>
     bbc:	43 c0       	rjmp	.+134    	; 0xc44 <Isb_Ch_Init+0xdc>
     bbe:	6e 30       	cpi	r22, 0x0E	; 14
     bc0:	09 f4       	brne	.+2      	; 0xbc4 <Isb_Ch_Init+0x5c>
     bc2:	4a c0       	rjmp	.+148    	; 0xc58 <Isb_Ch_Init+0xf0>
     bc4:	6f 30       	cpi	r22, 0x0F	; 15
     bc6:	09 f0       	breq	.+2      	; 0xbca <Isb_Ch_Init+0x62>
     bc8:	51 c0       	rjmp	.+162    	; 0xc6c <Isb_Ch_Init+0x104>
     bca:	4b c0       	rjmp	.+150    	; 0xc62 <Isb_Ch_Init+0xfa>
     bcc:	45 e1       	ldi	r20, 0x15	; 21
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	89 e2       	ldi	r24, 0x29	; 41
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	4f c0       	rjmp	.+158    	; 0xc74 <Isb_Ch_Init+0x10c>
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	84 e1       	ldi	r24, 0x14	; 20
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	4a c0       	rjmp	.+148    	; 0xc74 <Isb_Ch_Init+0x10c>
     be0:	4a e2       	ldi	r20, 0x2A	; 42
     be2:	50 e0       	ldi	r21, 0x00	; 0
     be4:	8e e3       	ldi	r24, 0x3E	; 62
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	45 c0       	rjmp	.+138    	; 0xc74 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_1 */
				#if defined(ISB_CH_2)
					case 2:
						eepAddrCtrl = ISB_CH_2_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_2_EEADDR_CRC;
						break;
     bea:	4f e3       	ldi	r20, 0x3F	; 63
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	83 e5       	ldi	r24, 0x53	; 83
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	40 c0       	rjmp	.+128    	; 0xc74 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_2 */
				#if defined(ISB_CH_3)
					case 3:
						eepAddrCtrl = ISB_CH_3_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_3_EEADDR_CRC;
						break;
     bf4:	44 e5       	ldi	r20, 0x54	; 84
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	88 e6       	ldi	r24, 0x68	; 104
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	3b c0       	rjmp	.+118    	; 0xc74 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_3 */
				#if defined(ISB_CH_4)
					case 4:
						eepAddrCtrl = ISB_CH_4_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_4_EEADDR_CRC;
						break;
     bfe:	49 e6       	ldi	r20, 0x69	; 105
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	8d e7       	ldi	r24, 0x7D	; 125
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	36 c0       	rjmp	.+108    	; 0xc74 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_4 */
				#if defined(ISB_CH_5)
					case 5:
						eepAddrCtrl = ISB_CH_5_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_5_EEADDR_CRC;
						break;
     c08:	4e e7       	ldi	r20, 0x7E	; 126
     c0a:	50 e0       	ldi	r21, 0x00	; 0
     c0c:	82 e9       	ldi	r24, 0x92	; 146
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	31 c0       	rjmp	.+98     	; 0xc74 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_5 */
				#if defined(ISB_CH_6)
					case 6:
						eepAddrCtrl = ISB_CH_6_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_6_EEADDR_CRC;
						break;
     c12:	43 e9       	ldi	r20, 0x93	; 147
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	87 ea       	ldi	r24, 0xA7	; 167
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	2c c0       	rjmp	.+88     	; 0xc74 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_6 */
				#if defined(ISB_CH_7)
					case 7:
						eepAddrCtrl = ISB_CH_7_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_7_EEADDR_CRC;
						break;
     c1c:	48 ea       	ldi	r20, 0xA8	; 168
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	8f eb       	ldi	r24, 0xBF	; 191
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	27 c0       	rjmp	.+78     	; 0xc74 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_7 */
				#if defined(ISB_CH_8)
					case 8:
						eepAddrCtrl = ISB_CH_8_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_8_EEADDR_CRC;
						break;
     c26:	40 ec       	ldi	r20, 0xC0	; 192
     c28:	50 e0       	ldi	r21, 0x00	; 0
     c2a:	87 ed       	ldi	r24, 0xD7	; 215
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	22 c0       	rjmp	.+68     	; 0xc74 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_8 */
				#if defined(ISB_CH_9)
					case 9:
						eepAddrCtrl = ISB_CH_9_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_9_EEADDR_CRC;
						break;
     c30:	48 ed       	ldi	r20, 0xD8	; 216
     c32:	50 e0       	ldi	r21, 0x00	; 0
     c34:	8f ee       	ldi	r24, 0xEF	; 239
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	1d c0       	rjmp	.+58     	; 0xc74 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_9 */
				#if defined(ISB_CH_10)
					case 10:
						eepAddrCtrl = ISB_CH_10_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_10_EEADDR_CRC;
						break;
     c3a:	40 ef       	ldi	r20, 0xF0	; 240
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	87 e0       	ldi	r24, 0x07	; 7
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	18 c0       	rjmp	.+48     	; 0xc74 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_10 */
				#if defined(ISB_CH_11)
					case 11:
						eepAddrCtrl = ISB_CH_11_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_11_EEADDR_CRC;
						break;
     c44:	48 e0       	ldi	r20, 0x08	; 8
     c46:	51 e0       	ldi	r21, 0x01	; 1
     c48:	8f e1       	ldi	r24, 0x1F	; 31
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	13 c0       	rjmp	.+38     	; 0xc74 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_11 */
				#if defined(ISB_CH_12)
					case 12:
						eepAddrCtrl = ISB_CH_12_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_12_EEADDR_CRC;
						break;
     c4e:	40 e2       	ldi	r20, 0x20	; 32
     c50:	51 e0       	ldi	r21, 0x01	; 1
     c52:	87 e3       	ldi	r24, 0x37	; 55
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	0e c0       	rjmp	.+28     	; 0xc74 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_12 */
				#if defined(ISB_CH_13)
					case 13:
						eepAddrCtrl = ISB_CH_13_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_13_EEADDR_CRC;
						break;
     c58:	48 e3       	ldi	r20, 0x38	; 56
     c5a:	51 e0       	ldi	r21, 0x01	; 1
     c5c:	8f e4       	ldi	r24, 0x4F	; 79
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	09 c0       	rjmp	.+18     	; 0xc74 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_13 */
				#if defined(ISB_CH_14)
					case 14:
						eepAddrCtrl = ISB_CH_14_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_14_EEADDR_CRC;
						break;
     c62:	40 e5       	ldi	r20, 0x50	; 80
     c64:	51 e0       	ldi	r21, 0x01	; 1
     c66:	87 e6       	ldi	r24, 0x67	; 103
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	04 c0       	rjmp	.+8      	; 0xc74 <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_14 */
				#if defined(ISB_CH_15)
					case 15:
						eepAddrCtrl = ISB_CH_15_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_15_EEADDR_CRC;
						break;
     c6c:	40 e0       	ldi	r20, 0x00	; 0
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
				default:
					eepAddrCtrl = 0;
					eepAddrCrc = 0;
					break;
			}
			Isb_Ch[ChIndex].Ctrl = 0;
     c74:	11 82       	std	Z+1, r1	; 0x01
     c76:	10 82       	st	Z, r1
			if (eepAddrCtrl < eepAddrCrc) {
     c78:	48 17       	cp	r20, r24
     c7a:	59 07       	cpc	r21, r25
     c7c:	80 f4       	brcc	.+32     	; 0xc9e <Isb_Ch_Init+0x136>
     c7e:	9a 01       	movw	r18, r20
				uint8_t Crc = 0;
				for (uint16_t eepAddr = eepAddrCtrl; eepAddr <= eepAddrCrc; eepAddr++) {
     c80:	2f 5f       	subi	r18, 0xFF	; 255
     c82:	3f 4f       	sbci	r19, 0xFF	; 255
     c84:	82 17       	cp	r24, r18
     c86:	93 07       	cpc	r25, r19
     c88:	d8 f7       	brcc	.-10     	; 0xc80 <Isb_Ch_Init+0x118>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     c8a:	e1 99       	sbic	0x1c, 1	; 28
     c8c:	fe cf       	rjmp	.-4      	; 0xc8a <Isb_Ch_Init+0x122>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     c8e:	4a 0f       	add	r20, r26
     c90:	5b 1f       	adc	r21, r27
     c92:	5f bb       	out	0x1f, r21	; 31
     c94:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
     c96:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     c98:	8d b3       	in	r24, 0x1d	; 29
//					Crc += lib_eep_fw_read_byte((uint8_t *)eepAddr);
				}
				if (Crc == 0) {
					Isb_Ch[ChIndex].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddrCtrl);
     c9a:	80 83       	st	Z, r24
     c9c:	11 82       	std	Z+1, r1	; 0x01
	#define ISB_CH_C_



	void Isb_Ch_Init(void) {
		for (uint8_t ChIndex = 0; ChIndex < ISB_CH_MAX; ChIndex++) {
     c9e:	6f 5f       	subi	r22, 0xFF	; 255
     ca0:	32 96       	adiw	r30, 0x02	; 2
     ca2:	60 31       	cpi	r22, 0x10	; 16
     ca4:	09 f0       	breq	.+2      	; 0xca8 <Isb_Ch_Init+0x140>
     ca6:	67 cf       	rjmp	.-306    	; 0xb76 <Isb_Ch_Init+0xe>
				if (Crc == 0) {
					Isb_Ch[ChIndex].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddrCtrl);
				}
			}
		}
	}
     ca8:	08 95       	ret

00000caa <Isb_App_Init>:
#ifndef ISB_APP_C_
	#define ISB_APP_C_



	void Isb_App_Init(void) {
     caa:	2f 92       	push	r2
     cac:	3f 92       	push	r3
     cae:	4f 92       	push	r4
     cb0:	5f 92       	push	r5
     cb2:	6f 92       	push	r6
     cb4:	7f 92       	push	r7
     cb6:	8f 92       	push	r8
     cb8:	9f 92       	push	r9
     cba:	af 92       	push	r10
     cbc:	bf 92       	push	r11
     cbe:	cf 92       	push	r12
     cc0:	df 92       	push	r13
     cc2:	ef 92       	push	r14
     cc4:	ff 92       	push	r15
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	80 91 96 00 	lds	r24, 0x0096
     cd2:	28 2e       	mov	r2, r24
     cd4:	33 24       	eor	r3, r3
     cd6:	64 e8       	ldi	r22, 0x84	; 132
     cd8:	46 2e       	mov	r4, r22
     cda:	62 e0       	ldi	r22, 0x02	; 2
     cdc:	56 2e       	mov	r5, r22
     cde:	66 24       	eor	r6, r6
     ce0:	77 24       	eor	r7, r7
				uint16_t eeAddrCfg5 = 0;
				uint16_t eeAddrCfg6 = 0;
				uint16_t eeAddrCfg7 = 0;
				uint16_t eeAddrCfg8 = 0;
				uint16_t eeAddrCfg9 = 0;
				switch (AppIndex) {
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	68 16       	cp	r6, r24
     ce6:	09 f4       	brne	.+2      	; 0xcea <Isb_App_Init+0x40>
     ce8:	79 c0       	rjmp	.+242    	; 0xddc <Isb_App_Init+0x132>
     cea:	86 15       	cp	r24, r6
     cec:	40 f0       	brcs	.+16     	; 0xcfe <Isb_App_Init+0x54>
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	69 16       	cp	r6, r25
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <Isb_App_Init+0x4c>
     cf4:	41 c0       	rjmp	.+130    	; 0xd78 <Isb_App_Init+0xce>
     cf6:	96 15       	cp	r25, r6
     cf8:	08 f4       	brcc	.+2      	; 0xcfc <Isb_App_Init+0x52>
     cfa:	57 c0       	rjmp	.+174    	; 0xdaa <Isb_App_Init+0x100>
     cfc:	0f c0       	rjmp	.+30     	; 0xd1c <Isb_App_Init+0x72>
     cfe:	a5 e0       	ldi	r26, 0x05	; 5
     d00:	6a 16       	cp	r6, r26
     d02:	09 f4       	brne	.+2      	; 0xd06 <Isb_App_Init+0x5c>
     d04:	a1 c0       	rjmp	.+322    	; 0xe48 <Isb_App_Init+0x19e>
     d06:	6a 16       	cp	r6, r26
     d08:	08 f4       	brcc	.+2      	; 0xd0c <Isb_App_Init+0x62>
     d0a:	81 c0       	rjmp	.+258    	; 0xe0e <Isb_App_Init+0x164>
     d0c:	b6 e0       	ldi	r27, 0x06	; 6
     d0e:	6b 16       	cp	r6, r27
     d10:	09 f4       	brne	.+2      	; 0xd14 <Isb_App_Init+0x6a>
     d12:	b7 c0       	rjmp	.+366    	; 0xe82 <Isb_App_Init+0x1d8>
     d14:	e7 e0       	ldi	r30, 0x07	; 7
     d16:	6e 16       	cp	r6, r30
     d18:	d1 f4       	brne	.+52     	; 0xd4e <Isb_App_Init+0xa4>
     d1a:	d0 c0       	rjmp	.+416    	; 0xebc <Isb_App_Init+0x212>
     d1c:	59 ea       	ldi	r21, 0xA9	; 169
     d1e:	85 2e       	mov	r8, r21
     d20:	91 2c       	mov	r9, r1
     d22:	4a ea       	ldi	r20, 0xAA	; 170
     d24:	a4 2e       	mov	r10, r20
     d26:	b1 2c       	mov	r11, r1
     d28:	3b ea       	ldi	r19, 0xAB	; 171
     d2a:	c3 2e       	mov	r12, r19
     d2c:	d1 2c       	mov	r13, r1
     d2e:	2c ea       	ldi	r18, 0xAC	; 172
     d30:	e2 2e       	mov	r14, r18
     d32:	f1 2c       	mov	r15, r1
     d34:	0d ea       	ldi	r16, 0xAD	; 173
     d36:	10 e0       	ldi	r17, 0x00	; 0
     d38:	ce ea       	ldi	r28, 0xAE	; 174
     d3a:	d0 e0       	ldi	r29, 0x00	; 0
     d3c:	af ea       	ldi	r26, 0xAF	; 175
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	60 eb       	ldi	r22, 0xB0	; 176
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	41 eb       	ldi	r20, 0xB1	; 177
     d46:	50 e0       	ldi	r21, 0x00	; 0
     d48:	22 eb       	ldi	r18, 0xB2	; 178
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	d3 c0       	rjmp	.+422    	; 0xef4 <Isb_App_Init+0x24a>
     d4e:	88 24       	eor	r8, r8
     d50:	99 24       	eor	r9, r9
     d52:	aa 24       	eor	r10, r10
     d54:	bb 24       	eor	r11, r11
     d56:	cc 24       	eor	r12, r12
     d58:	dd 24       	eor	r13, r13
     d5a:	ee 24       	eor	r14, r14
     d5c:	ff 24       	eor	r15, r15
     d5e:	00 e0       	ldi	r16, 0x00	; 0
     d60:	10 e0       	ldi	r17, 0x00	; 0
     d62:	c0 e0       	ldi	r28, 0x00	; 0
     d64:	d0 e0       	ldi	r29, 0x00	; 0
     d66:	a0 e0       	ldi	r26, 0x00	; 0
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	40 e0       	ldi	r20, 0x00	; 0
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	be c0       	rjmp	.+380    	; 0xef4 <Isb_App_Init+0x24a>
     d78:	91 ec       	ldi	r25, 0xC1	; 193
     d7a:	89 2e       	mov	r8, r25
     d7c:	91 2c       	mov	r9, r1
     d7e:	82 ec       	ldi	r24, 0xC2	; 194
     d80:	a8 2e       	mov	r10, r24
     d82:	b1 2c       	mov	r11, r1
     d84:	03 ec       	ldi	r16, 0xC3	; 195
     d86:	c0 2e       	mov	r12, r16
     d88:	d1 2c       	mov	r13, r1
     d8a:	14 ec       	ldi	r17, 0xC4	; 196
     d8c:	e1 2e       	mov	r14, r17
     d8e:	f1 2c       	mov	r15, r1
     d90:	05 ec       	ldi	r16, 0xC5	; 197
     d92:	10 e0       	ldi	r17, 0x00	; 0
     d94:	c6 ec       	ldi	r28, 0xC6	; 198
     d96:	d0 e0       	ldi	r29, 0x00	; 0
     d98:	a7 ec       	ldi	r26, 0xC7	; 199
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	68 ec       	ldi	r22, 0xC8	; 200
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	49 ec       	ldi	r20, 0xC9	; 201
     da2:	50 e0       	ldi	r21, 0x00	; 0
     da4:	2a ec       	ldi	r18, 0xCA	; 202
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	a5 c0       	rjmp	.+330    	; 0xef4 <Isb_App_Init+0x24a>
							eeAddrCfg5 = ISB_APP_DIGOUT_1_EEADDR_CFG5;
							eeAddrCfg6 = ISB_APP_DIGOUT_1_EEADDR_CFG6;
							eeAddrCfg7 = ISB_APP_DIGOUT_1_EEADDR_CFG7;
							eeAddrCfg8 = ISB_APP_DIGOUT_1_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_1_EEADDR_CFG9;
							break;
     daa:	b9 ed       	ldi	r27, 0xD9	; 217
     dac:	8b 2e       	mov	r8, r27
     dae:	91 2c       	mov	r9, r1
     db0:	aa ed       	ldi	r26, 0xDA	; 218
     db2:	aa 2e       	mov	r10, r26
     db4:	b1 2c       	mov	r11, r1
     db6:	fb ed       	ldi	r31, 0xDB	; 219
     db8:	cf 2e       	mov	r12, r31
     dba:	d1 2c       	mov	r13, r1
     dbc:	ec ed       	ldi	r30, 0xDC	; 220
     dbe:	ee 2e       	mov	r14, r30
     dc0:	f1 2c       	mov	r15, r1
     dc2:	0d ed       	ldi	r16, 0xDD	; 221
     dc4:	10 e0       	ldi	r17, 0x00	; 0
     dc6:	ce ed       	ldi	r28, 0xDE	; 222
     dc8:	d0 e0       	ldi	r29, 0x00	; 0
     dca:	af ed       	ldi	r26, 0xDF	; 223
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	60 ee       	ldi	r22, 0xE0	; 224
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	41 ee       	ldi	r20, 0xE1	; 225
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	22 ee       	ldi	r18, 0xE2	; 226
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	8c c0       	rjmp	.+280    	; 0xef4 <Isb_App_Init+0x24a>
							eeAddrCfg5 = ISB_APP_DIGOUT_2_EEADDR_CFG5;
							eeAddrCfg6 = ISB_APP_DIGOUT_2_EEADDR_CFG6;
							eeAddrCfg7 = ISB_APP_DIGOUT_2_EEADDR_CFG7;
							eeAddrCfg8 = ISB_APP_DIGOUT_2_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_2_EEADDR_CFG9;
							break;
     ddc:	71 ef       	ldi	r23, 0xF1	; 241
     dde:	87 2e       	mov	r8, r23
     de0:	91 2c       	mov	r9, r1
     de2:	62 ef       	ldi	r22, 0xF2	; 242
     de4:	a6 2e       	mov	r10, r22
     de6:	b1 2c       	mov	r11, r1
     de8:	53 ef       	ldi	r21, 0xF3	; 243
     dea:	c5 2e       	mov	r12, r21
     dec:	d1 2c       	mov	r13, r1
     dee:	44 ef       	ldi	r20, 0xF4	; 244
     df0:	e4 2e       	mov	r14, r20
     df2:	f1 2c       	mov	r15, r1
     df4:	05 ef       	ldi	r16, 0xF5	; 245
     df6:	10 e0       	ldi	r17, 0x00	; 0
     df8:	c6 ef       	ldi	r28, 0xF6	; 246
     dfa:	d0 e0       	ldi	r29, 0x00	; 0
     dfc:	a7 ef       	ldi	r26, 0xF7	; 247
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	68 ef       	ldi	r22, 0xF8	; 248
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	49 ef       	ldi	r20, 0xF9	; 249
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	2a ef       	ldi	r18, 0xFA	; 250
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	73 c0       	rjmp	.+230    	; 0xef4 <Isb_App_Init+0x24a>
							eeAddrCfg5 = ISB_APP_DIGOUT_3_EEADDR_CFG5;
							eeAddrCfg6 = ISB_APP_DIGOUT_3_EEADDR_CFG6;
							eeAddrCfg7 = ISB_APP_DIGOUT_3_EEADDR_CFG7;
							eeAddrCfg8 = ISB_APP_DIGOUT_3_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_3_EEADDR_CFG9;
							break;
     e0e:	39 e0       	ldi	r19, 0x09	; 9
     e10:	83 2e       	mov	r8, r19
     e12:	31 e0       	ldi	r19, 0x01	; 1
     e14:	93 2e       	mov	r9, r19
     e16:	2a e0       	ldi	r18, 0x0A	; 10
     e18:	a2 2e       	mov	r10, r18
     e1a:	21 e0       	ldi	r18, 0x01	; 1
     e1c:	b2 2e       	mov	r11, r18
     e1e:	9b e0       	ldi	r25, 0x0B	; 11
     e20:	c9 2e       	mov	r12, r25
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	d9 2e       	mov	r13, r25
     e26:	8c e0       	ldi	r24, 0x0C	; 12
     e28:	e8 2e       	mov	r14, r24
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	f8 2e       	mov	r15, r24
     e2e:	0d e0       	ldi	r16, 0x0D	; 13
     e30:	11 e0       	ldi	r17, 0x01	; 1
     e32:	ce e0       	ldi	r28, 0x0E	; 14
     e34:	d1 e0       	ldi	r29, 0x01	; 1
     e36:	af e0       	ldi	r26, 0x0F	; 15
     e38:	b1 e0       	ldi	r27, 0x01	; 1
     e3a:	60 e1       	ldi	r22, 0x10	; 16
     e3c:	71 e0       	ldi	r23, 0x01	; 1
     e3e:	41 e1       	ldi	r20, 0x11	; 17
     e40:	51 e0       	ldi	r21, 0x01	; 1
     e42:	22 e1       	ldi	r18, 0x12	; 18
     e44:	31 e0       	ldi	r19, 0x01	; 1
     e46:	56 c0       	rjmp	.+172    	; 0xef4 <Isb_App_Init+0x24a>
							eeAddrCfg5 = ISB_APP_DIGOUT_4_EEADDR_CFG5;
							eeAddrCfg6 = ISB_APP_DIGOUT_4_EEADDR_CFG6;
							eeAddrCfg7 = ISB_APP_DIGOUT_4_EEADDR_CFG7;
							eeAddrCfg8 = ISB_APP_DIGOUT_4_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_4_EEADDR_CFG9;
							break;
     e48:	01 e2       	ldi	r16, 0x21	; 33
     e4a:	80 2e       	mov	r8, r16
     e4c:	01 e0       	ldi	r16, 0x01	; 1
     e4e:	90 2e       	mov	r9, r16
     e50:	12 e2       	ldi	r17, 0x22	; 34
     e52:	a1 2e       	mov	r10, r17
     e54:	11 e0       	ldi	r17, 0x01	; 1
     e56:	b1 2e       	mov	r11, r17
     e58:	b3 e2       	ldi	r27, 0x23	; 35
     e5a:	cb 2e       	mov	r12, r27
     e5c:	b1 e0       	ldi	r27, 0x01	; 1
     e5e:	db 2e       	mov	r13, r27
     e60:	a4 e2       	ldi	r26, 0x24	; 36
     e62:	ea 2e       	mov	r14, r26
     e64:	a1 e0       	ldi	r26, 0x01	; 1
     e66:	fa 2e       	mov	r15, r26
     e68:	05 e2       	ldi	r16, 0x25	; 37
     e6a:	11 e0       	ldi	r17, 0x01	; 1
     e6c:	c6 e2       	ldi	r28, 0x26	; 38
     e6e:	d1 e0       	ldi	r29, 0x01	; 1
     e70:	a7 e2       	ldi	r26, 0x27	; 39
     e72:	b1 e0       	ldi	r27, 0x01	; 1
     e74:	68 e2       	ldi	r22, 0x28	; 40
     e76:	71 e0       	ldi	r23, 0x01	; 1
     e78:	49 e2       	ldi	r20, 0x29	; 41
     e7a:	51 e0       	ldi	r21, 0x01	; 1
     e7c:	2a e2       	ldi	r18, 0x2A	; 42
     e7e:	31 e0       	ldi	r19, 0x01	; 1
     e80:	39 c0       	rjmp	.+114    	; 0xef4 <Isb_App_Init+0x24a>
							eeAddrCfg5 = ISB_APP_DIGOUT_5_EEADDR_CFG5;
							eeAddrCfg6 = ISB_APP_DIGOUT_5_EEADDR_CFG6;
							eeAddrCfg7 = ISB_APP_DIGOUT_5_EEADDR_CFG7;
							eeAddrCfg8 = ISB_APP_DIGOUT_5_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_5_EEADDR_CFG9;
							break;
     e82:	f9 e3       	ldi	r31, 0x39	; 57
     e84:	8f 2e       	mov	r8, r31
     e86:	f1 e0       	ldi	r31, 0x01	; 1
     e88:	9f 2e       	mov	r9, r31
     e8a:	ea e3       	ldi	r30, 0x3A	; 58
     e8c:	ae 2e       	mov	r10, r30
     e8e:	e1 e0       	ldi	r30, 0x01	; 1
     e90:	be 2e       	mov	r11, r30
     e92:	7b e3       	ldi	r23, 0x3B	; 59
     e94:	c7 2e       	mov	r12, r23
     e96:	71 e0       	ldi	r23, 0x01	; 1
     e98:	d7 2e       	mov	r13, r23
     e9a:	6c e3       	ldi	r22, 0x3C	; 60
     e9c:	e6 2e       	mov	r14, r22
     e9e:	61 e0       	ldi	r22, 0x01	; 1
     ea0:	f6 2e       	mov	r15, r22
     ea2:	0d e3       	ldi	r16, 0x3D	; 61
     ea4:	11 e0       	ldi	r17, 0x01	; 1
     ea6:	ce e3       	ldi	r28, 0x3E	; 62
     ea8:	d1 e0       	ldi	r29, 0x01	; 1
     eaa:	af e3       	ldi	r26, 0x3F	; 63
     eac:	b1 e0       	ldi	r27, 0x01	; 1
     eae:	60 e4       	ldi	r22, 0x40	; 64
     eb0:	71 e0       	ldi	r23, 0x01	; 1
     eb2:	41 e4       	ldi	r20, 0x41	; 65
     eb4:	51 e0       	ldi	r21, 0x01	; 1
     eb6:	22 e4       	ldi	r18, 0x42	; 66
     eb8:	31 e0       	ldi	r19, 0x01	; 1
     eba:	1c c0       	rjmp	.+56     	; 0xef4 <Isb_App_Init+0x24a>
							eeAddrCfg5 = ISB_APP_DIGOUT_6_EEADDR_CFG5;
							eeAddrCfg6 = ISB_APP_DIGOUT_6_EEADDR_CFG6;
							eeAddrCfg7 = ISB_APP_DIGOUT_6_EEADDR_CFG7;
							eeAddrCfg8 = ISB_APP_DIGOUT_6_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_6_EEADDR_CFG9;
							break;
     ebc:	51 e5       	ldi	r21, 0x51	; 81
     ebe:	85 2e       	mov	r8, r21
     ec0:	51 e0       	ldi	r21, 0x01	; 1
     ec2:	95 2e       	mov	r9, r21
     ec4:	42 e5       	ldi	r20, 0x52	; 82
     ec6:	a4 2e       	mov	r10, r20
     ec8:	41 e0       	ldi	r20, 0x01	; 1
     eca:	b4 2e       	mov	r11, r20
     ecc:	33 e5       	ldi	r19, 0x53	; 83
     ece:	c3 2e       	mov	r12, r19
     ed0:	31 e0       	ldi	r19, 0x01	; 1
     ed2:	d3 2e       	mov	r13, r19
     ed4:	24 e5       	ldi	r18, 0x54	; 84
     ed6:	e2 2e       	mov	r14, r18
     ed8:	21 e0       	ldi	r18, 0x01	; 1
     eda:	f2 2e       	mov	r15, r18
     edc:	05 e5       	ldi	r16, 0x55	; 85
     ede:	11 e0       	ldi	r17, 0x01	; 1
     ee0:	c6 e5       	ldi	r28, 0x56	; 86
     ee2:	d1 e0       	ldi	r29, 0x01	; 1
     ee4:	a7 e5       	ldi	r26, 0x57	; 87
     ee6:	b1 e0       	ldi	r27, 0x01	; 1
     ee8:	68 e5       	ldi	r22, 0x58	; 88
     eea:	71 e0       	ldi	r23, 0x01	; 1
     eec:	49 e5       	ldi	r20, 0x59	; 89
     eee:	51 e0       	ldi	r21, 0x01	; 1
     ef0:	2a e5       	ldi	r18, 0x5A	; 90
     ef2:	31 e0       	ldi	r19, 0x01	; 1
							eeAddrCfg8 = ISB_APP_DIGOUT_15_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_15_EEADDR_CFG9;
							break;
					#endif /* ISB_APP_DIGOUT_15 */
				}
				uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigOut_Ch_Array[AppIndex]);
     ef4:	f3 01       	movw	r30, r6
     ef6:	ec 5a       	subi	r30, 0xAC	; 172
     ef8:	fe 4f       	sbci	r31, 0xFE	; 254
     efa:	e4 91       	lpm	r30, Z+
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	ee 0f       	add	r30, r30
     f00:	ff 1f       	adc	r31, r31
     f02:	ec 5a       	subi	r30, 0xAC	; 172
     f04:	fc 4f       	sbci	r31, 0xFC	; 252
     f06:	80 81       	ld	r24, Z
     f08:	80 ff       	sbrs	r24, 0
     f0a:	66 c0       	rjmp	.+204    	; 0xfd8 <Isb_App_Init+0x32e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f0c:	e1 99       	sbic	0x1c, 1	; 28
     f0e:	fe cf       	rjmp	.-4      	; 0xf0c <Isb_App_Init+0x262>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     f10:	82 0c       	add	r8, r2
     f12:	93 1c       	adc	r9, r3
     f14:	9f ba       	out	0x1f, r9	; 31
     f16:	8e ba       	out	0x1e, r8	; 30
#endif
    EECR |= (1 << EERE);
     f18:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     f1a:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg0);
     f1c:	f2 01       	movw	r30, r4
     f1e:	80 83       	st	Z, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f20:	e1 99       	sbic	0x1c, 1	; 28
     f22:	fe cf       	rjmp	.-4      	; 0xf20 <Isb_App_Init+0x276>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     f24:	a2 0c       	add	r10, r2
     f26:	b3 1c       	adc	r11, r3
     f28:	bf ba       	out	0x1f, r11	; 31
     f2a:	ae ba       	out	0x1e, r10	; 30
#endif
    EECR |= (1 << EERE);
     f2c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     f2e:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg1);
     f30:	f2 01       	movw	r30, r4
     f32:	81 83       	std	Z+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f34:	e1 99       	sbic	0x1c, 1	; 28
     f36:	fe cf       	rjmp	.-4      	; 0xf34 <Isb_App_Init+0x28a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     f38:	c2 0c       	add	r12, r2
     f3a:	d3 1c       	adc	r13, r3
     f3c:	df ba       	out	0x1f, r13	; 31
     f3e:	ce ba       	out	0x1e, r12	; 30
#endif
    EECR |= (1 << EERE);
     f40:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     f42:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg2);
     f44:	f2 01       	movw	r30, r4
     f46:	82 83       	std	Z+2, r24	; 0x02
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f48:	e1 99       	sbic	0x1c, 1	; 28
     f4a:	fe cf       	rjmp	.-4      	; 0xf48 <Isb_App_Init+0x29e>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     f4c:	e2 0c       	add	r14, r2
     f4e:	f3 1c       	adc	r15, r3
     f50:	ff ba       	out	0x1f, r15	; 31
     f52:	ee ba       	out	0x1e, r14	; 30
#endif
    EECR |= (1 << EERE);
     f54:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     f56:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg3 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg3);
     f58:	f2 01       	movw	r30, r4
     f5a:	83 83       	std	Z+3, r24	; 0x03
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f5c:	e1 99       	sbic	0x1c, 1	; 28
     f5e:	fe cf       	rjmp	.-4      	; 0xf5c <Isb_App_Init+0x2b2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     f60:	02 0d       	add	r16, r2
     f62:	13 1d       	adc	r17, r3
     f64:	1f bb       	out	0x1f, r17	; 31
     f66:	0e bb       	out	0x1e, r16	; 30
#endif
    EECR |= (1 << EERE);
     f68:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     f6a:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg4 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg4);
     f6c:	f2 01       	movw	r30, r4
     f6e:	84 83       	std	Z+4, r24	; 0x04
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f70:	e1 99       	sbic	0x1c, 1	; 28
     f72:	fe cf       	rjmp	.-4      	; 0xf70 <Isb_App_Init+0x2c6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     f74:	c2 0d       	add	r28, r2
     f76:	d3 1d       	adc	r29, r3
     f78:	df bb       	out	0x1f, r29	; 31
     f7a:	ce bb       	out	0x1e, r28	; 30
#endif
    EECR |= (1 << EERE);
     f7c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     f7e:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg5 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg5);
     f80:	f2 01       	movw	r30, r4
     f82:	85 83       	std	Z+5, r24	; 0x05
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f84:	e1 99       	sbic	0x1c, 1	; 28
     f86:	fe cf       	rjmp	.-4      	; 0xf84 <Isb_App_Init+0x2da>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     f88:	a2 0d       	add	r26, r2
     f8a:	b3 1d       	adc	r27, r3
     f8c:	bf bb       	out	0x1f, r27	; 31
     f8e:	ae bb       	out	0x1e, r26	; 30
#endif
    EECR |= (1 << EERE);
     f90:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     f92:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg6 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg6);
     f94:	d2 01       	movw	r26, r4
     f96:	16 96       	adiw	r26, 0x06	; 6
     f98:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f9a:	e1 99       	sbic	0x1c, 1	; 28
     f9c:	fe cf       	rjmp	.-4      	; 0xf9a <Isb_App_Init+0x2f0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     f9e:	62 0d       	add	r22, r2
     fa0:	73 1d       	adc	r23, r3
     fa2:	7f bb       	out	0x1f, r23	; 31
     fa4:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
     fa6:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     fa8:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg7 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg7);
     faa:	f2 01       	movw	r30, r4
     fac:	87 83       	std	Z+7, r24	; 0x07
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     fae:	e1 99       	sbic	0x1c, 1	; 28
     fb0:	fe cf       	rjmp	.-4      	; 0xfae <Isb_App_Init+0x304>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     fb2:	42 0d       	add	r20, r2
     fb4:	53 1d       	adc	r21, r3
     fb6:	5f bb       	out	0x1f, r21	; 31
     fb8:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
     fba:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     fbc:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg8 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg8);
     fbe:	d2 01       	movw	r26, r4
     fc0:	18 96       	adiw	r26, 0x08	; 8
     fc2:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     fc4:	e1 99       	sbic	0x1c, 1	; 28
     fc6:	fe cf       	rjmp	.-4      	; 0xfc4 <Isb_App_Init+0x31a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     fc8:	22 0d       	add	r18, r2
     fca:	33 1d       	adc	r19, r3
     fcc:	3f bb       	out	0x1f, r19	; 31
     fce:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
     fd0:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     fd2:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigOut[AppIndex].Cfg9 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg9);
     fd4:	f2 01       	movw	r30, r4
     fd6:	81 87       	std	Z+9, r24	; 0x09
     fd8:	08 94       	sec
     fda:	61 1c       	adc	r6, r1
     fdc:	71 1c       	adc	r7, r1
     fde:	8a e1       	ldi	r24, 0x1A	; 26
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	48 0e       	add	r4, r24
     fe4:	59 1e       	adc	r5, r25


	void Isb_App_Init(void) {

		#if defined(ISB_APP_DIGOUT_MAX)
			for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGOUT_MAX; AppIndex++) {
     fe6:	98 e0       	ldi	r25, 0x08	; 8
     fe8:	69 16       	cp	r6, r25
     fea:	71 04       	cpc	r7, r1
     fec:	09 f0       	breq	.+2      	; 0xff0 <Isb_App_Init+0x346>
     fee:	79 ce       	rjmp	.-782    	; 0xce2 <Isb_App_Init+0x38>
     ff0:	0b ea       	ldi	r16, 0xAB	; 171
     ff2:	10 e0       	ldi	r17, 0x00	; 0
     ff4:	c0 e0       	ldi	r28, 0x00	; 0
     ff6:	d0 e0       	ldi	r29, 0x00	; 0
			for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++) {
				uint16_t eeAddrCfg0 = 0;
				uint16_t eeAddrCfg1 = 0;
				uint16_t eeAddrCfg2 = 0;
				uint16_t eeAddrCfg3 = 0;
				switch (AppIndex) {
     ff8:	c3 30       	cpi	r28, 0x03	; 3
     ffa:	a9 f1       	breq	.+106    	; 0x1066 <Isb_App_Init+0x3bc>
     ffc:	c4 30       	cpi	r28, 0x04	; 4
     ffe:	28 f4       	brcc	.+10     	; 0x100a <Isb_App_Init+0x360>
    1000:	c1 30       	cpi	r28, 0x01	; 1
    1002:	f9 f0       	breq	.+62     	; 0x1042 <Isb_App_Init+0x398>
    1004:	c2 30       	cpi	r28, 0x02	; 2
    1006:	30 f5       	brcc	.+76     	; 0x1054 <Isb_App_Init+0x3aa>
    1008:	0a c0       	rjmp	.+20     	; 0x101e <Isb_App_Init+0x374>
    100a:	c5 30       	cpi	r28, 0x05	; 5
    100c:	f1 f1       	breq	.+124    	; 0x108a <Isb_App_Init+0x3e0>
    100e:	c5 30       	cpi	r28, 0x05	; 5
    1010:	98 f1       	brcs	.+102    	; 0x1078 <Isb_App_Init+0x3ce>
    1012:	c6 30       	cpi	r28, 0x06	; 6
    1014:	09 f4       	brne	.+2      	; 0x1018 <Isb_App_Init+0x36e>
    1016:	42 c0       	rjmp	.+132    	; 0x109c <Isb_App_Init+0x3f2>
    1018:	c7 30       	cpi	r28, 0x07	; 7
    101a:	51 f4       	brne	.+20     	; 0x1030 <Isb_App_Init+0x386>
    101c:	48 c0       	rjmp	.+144    	; 0x10ae <Isb_App_Init+0x404>
    101e:	a1 e0       	ldi	r26, 0x01	; 1
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	62 e0       	ldi	r22, 0x02	; 2
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	43 e0       	ldi	r20, 0x03	; 3
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	24 e0       	ldi	r18, 0x04	; 4
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	47 c0       	rjmp	.+142    	; 0x10be <Isb_App_Init+0x414>
    1030:	a0 e0       	ldi	r26, 0x00	; 0
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	3e c0       	rjmp	.+124    	; 0x10be <Isb_App_Init+0x414>
    1042:	a6 e1       	ldi	r26, 0x16	; 22
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	67 e1       	ldi	r22, 0x17	; 23
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	48 e1       	ldi	r20, 0x18	; 24
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	29 e1       	ldi	r18, 0x19	; 25
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	35 c0       	rjmp	.+106    	; 0x10be <Isb_App_Init+0x414>
						case 1:
							eeAddrCfg0 = ISB_APP_DIGIN_1_EEADDR_CFG0;
							eeAddrCfg1 = ISB_APP_DIGIN_1_EEADDR_CFG1;
							eeAddrCfg2 = ISB_APP_DIGIN_1_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_1_EEADDR_CFG3;
							break;
    1054:	ab e2       	ldi	r26, 0x2B	; 43
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	6c e2       	ldi	r22, 0x2C	; 44
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	4d e2       	ldi	r20, 0x2D	; 45
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	2e e2       	ldi	r18, 0x2E	; 46
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	2c c0       	rjmp	.+88     	; 0x10be <Isb_App_Init+0x414>
						case 2:
							eeAddrCfg0 = ISB_APP_DIGIN_2_EEADDR_CFG0;
							eeAddrCfg1 = ISB_APP_DIGIN_2_EEADDR_CFG1;
							eeAddrCfg2 = ISB_APP_DIGIN_2_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_2_EEADDR_CFG3;
							break;
    1066:	a0 e4       	ldi	r26, 0x40	; 64
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	61 e4       	ldi	r22, 0x41	; 65
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	42 e4       	ldi	r20, 0x42	; 66
    1070:	50 e0       	ldi	r21, 0x00	; 0
    1072:	23 e4       	ldi	r18, 0x43	; 67
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	23 c0       	rjmp	.+70     	; 0x10be <Isb_App_Init+0x414>
						case 3:
							eeAddrCfg0 = ISB_APP_DIGIN_3_EEADDR_CFG0;
							eeAddrCfg1 = ISB_APP_DIGIN_3_EEADDR_CFG1;
							eeAddrCfg2 = ISB_APP_DIGIN_3_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_3_EEADDR_CFG3;
							break;
    1078:	a5 e5       	ldi	r26, 0x55	; 85
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	66 e5       	ldi	r22, 0x56	; 86
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	47 e5       	ldi	r20, 0x57	; 87
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	28 e5       	ldi	r18, 0x58	; 88
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	1a c0       	rjmp	.+52     	; 0x10be <Isb_App_Init+0x414>
						case 4:
							eeAddrCfg0 = ISB_APP_DIGIN_4_EEADDR_CFG0;
							eeAddrCfg1 = ISB_APP_DIGIN_4_EEADDR_CFG1;
							eeAddrCfg2 = ISB_APP_DIGIN_4_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_4_EEADDR_CFG3;
							break;
    108a:	aa e6       	ldi	r26, 0x6A	; 106
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	6b e6       	ldi	r22, 0x6B	; 107
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	4c e6       	ldi	r20, 0x6C	; 108
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	2d e6       	ldi	r18, 0x6D	; 109
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	11 c0       	rjmp	.+34     	; 0x10be <Isb_App_Init+0x414>
						case 5:
							eeAddrCfg0 = ISB_APP_DIGIN_5_EEADDR_CFG0;
							eeAddrCfg1 = ISB_APP_DIGIN_5_EEADDR_CFG1;
							eeAddrCfg2 = ISB_APP_DIGIN_5_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_5_EEADDR_CFG3;
							break;
    109c:	af e7       	ldi	r26, 0x7F	; 127
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	60 e8       	ldi	r22, 0x80	; 128
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	41 e8       	ldi	r20, 0x81	; 129
    10a6:	50 e0       	ldi	r21, 0x00	; 0
    10a8:	22 e8       	ldi	r18, 0x82	; 130
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	08 c0       	rjmp	.+16     	; 0x10be <Isb_App_Init+0x414>
						case 6:
							eeAddrCfg0 = ISB_APP_DIGIN_6_EEADDR_CFG0;
							eeAddrCfg1 = ISB_APP_DIGIN_6_EEADDR_CFG1;
							eeAddrCfg2 = ISB_APP_DIGIN_6_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_6_EEADDR_CFG3;
							break;
    10ae:	a4 e9       	ldi	r26, 0x94	; 148
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	65 e9       	ldi	r22, 0x95	; 149
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	46 e9       	ldi	r20, 0x96	; 150
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	27 e9       	ldi	r18, 0x97	; 151
    10bc:	30 e0       	ldi	r19, 0x00	; 0
							eeAddrCfg2 = ISB_APP_DIGIN_15_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_15_EEADDR_CFG3;
							break;
					#endif /* ISB_APP_DIGIN_15 */
				}
				uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigIn_Ch_Array[AppIndex]);
    10be:	fe 01       	movw	r30, r28
    10c0:	ec 57       	subi	r30, 0x7C	; 124
    10c2:	fe 4f       	sbci	r31, 0xFE	; 254
    10c4:	e4 91       	lpm	r30, Z+
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	ec 5a       	subi	r30, 0xAC	; 172
    10ce:	fc 4f       	sbci	r31, 0xFC	; 252
    10d0:	80 81       	ld	r24, Z
    10d2:	80 ff       	sbrs	r24, 0
    10d4:	46 c0       	rjmp	.+140    	; 0x1162 <Isb_App_Init+0x4b8>
    10d6:	80 91 96 00 	lds	r24, 0x0096
    10da:	e8 2f       	mov	r30, r24
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    10de:	e1 99       	sbic	0x1c, 1	; 28
    10e0:	fe cf       	rjmp	.-4      	; 0x10de <Isb_App_Init+0x434>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    10e2:	ae 0f       	add	r26, r30
    10e4:	bf 1f       	adc	r27, r31
    10e6:	bf bb       	out	0x1f, r27	; 31
    10e8:	ae bb       	out	0x1e, r26	; 30
#endif
    EECR |= (1 << EERE);
    10ea:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    10ec:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigIn[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg0);
    10ee:	d8 01       	movw	r26, r16
    10f0:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    10f2:	e1 99       	sbic	0x1c, 1	; 28
    10f4:	fe cf       	rjmp	.-4      	; 0x10f2 <Isb_App_Init+0x448>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    10f6:	6e 0f       	add	r22, r30
    10f8:	7f 1f       	adc	r23, r31
    10fa:	7f bb       	out	0x1f, r23	; 31
    10fc:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
    10fe:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1100:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigIn[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg1);
    1102:	d8 01       	movw	r26, r16
    1104:	11 96       	adiw	r26, 0x01	; 1
    1106:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1108:	e1 99       	sbic	0x1c, 1	; 28
    110a:	fe cf       	rjmp	.-4      	; 0x1108 <Isb_App_Init+0x45e>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    110c:	4e 0f       	add	r20, r30
    110e:	5f 1f       	adc	r21, r31
    1110:	5f bb       	out	0x1f, r21	; 31
    1112:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
    1114:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1116:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigIn[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg2);
    1118:	d8 01       	movw	r26, r16
    111a:	12 96       	adiw	r26, 0x02	; 2
    111c:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    111e:	e1 99       	sbic	0x1c, 1	; 28
    1120:	fe cf       	rjmp	.-4      	; 0x111e <Isb_App_Init+0x474>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1122:	2e 0f       	add	r18, r30
    1124:	3f 1f       	adc	r19, r31
    1126:	3f bb       	out	0x1f, r19	; 31
    1128:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    112a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    112c:	8d b3       	in	r24, 0x1d	; 29
					Isb_App_DigIn[AppIndex].Cfg3 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg3);
    112e:	f8 01       	movw	r30, r16
    1130:	83 83       	std	Z+3, r24	; 0x03
					uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigIn_Pin0_Array[AppIndex]);
    1132:	fe 01       	movw	r30, r28
    1134:	e4 57       	subi	r30, 0x74	; 116
    1136:	fe 4f       	sbci	r31, 0xFE	; 254
    1138:	64 91       	lpm	r22, Z+
					uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
    113a:	26 2f       	mov	r18, r22
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	c9 01       	movw	r24, r18
    1140:	88 73       	andi	r24, 0x38	; 56
    1142:	90 70       	andi	r25, 0x00	; 0
    1144:	33 e0       	ldi	r19, 0x03	; 3
    1146:	95 95       	asr	r25
    1148:	87 95       	ror	r24
    114a:	3a 95       	dec	r19
    114c:	e1 f7       	brne	.-8      	; 0x1146 <Isb_App_Init+0x49c>
					uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
					if (Port != 0) {
    114e:	88 23       	and	r24, r24
    1150:	41 f0       	breq	.+16     	; 0x1162 <Isb_App_Init+0x4b8>
					Isb_App_DigIn[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg1);
					Isb_App_DigIn[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg2);
					Isb_App_DigIn[AppIndex].Cfg3 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg3);
					uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigIn_Pin0_Array[AppIndex]);
					uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
					uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
    1152:	67 70       	andi	r22, 0x07	; 7
					if (Port != 0) {
						if ((Pin0 & PULLUP) == 0) {
    1154:	26 fd       	sbrc	r18, 6
    1156:	02 c0       	rjmp	.+4      	; 0x115c <Isb_App_Init+0x4b2>
							Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT);
    1158:	40 e0       	ldi	r20, 0x00	; 0
    115a:	01 c0       	rjmp	.+2      	; 0x115e <Isb_App_Init+0x4b4>
						}
						else {
							Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT_PULLUP);
    115c:	42 e0       	ldi	r20, 0x02	; 2
    115e:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
    1162:	21 96       	adiw	r28, 0x01	; 1
    1164:	08 5f       	subi	r16, 0xF8	; 248
    1166:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
		#endif /* ISB_APP_DIGOUT_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++) {
    1168:	c8 30       	cpi	r28, 0x08	; 8
    116a:	d1 05       	cpc	r29, r1
    116c:	09 f0       	breq	.+2      	; 0x1170 <Isb_App_Init+0x4c6>
    116e:	44 cf       	rjmp	.-376    	; 0xff8 <Isb_App_Init+0x34e>
//						break;
//				}
//			}
		#endif /* ISB_APP_LCD_MAX */

	}
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	ef 90       	pop	r14
    117c:	df 90       	pop	r13
    117e:	cf 90       	pop	r12
    1180:	bf 90       	pop	r11
    1182:	af 90       	pop	r10
    1184:	9f 90       	pop	r9
    1186:	8f 90       	pop	r8
    1188:	7f 90       	pop	r7
    118a:	6f 90       	pop	r6
    118c:	5f 90       	pop	r5
    118e:	4f 90       	pop	r4
    1190:	3f 90       	pop	r3
    1192:	2f 90       	pop	r2
    1194:	08 95       	ret

00001196 <Isb_App_Convert_None>:



	void Isb_App_Convert_None(uint16_t Value, void *Destination) {
    1196:	fb 01       	movw	r30, r22
		*(uint16_t *)Destination = Value;
    1198:	91 83       	std	Z+1, r25	; 0x01
    119a:	80 83       	st	Z, r24
	}
    119c:	08 95       	ret

0000119e <Isb_App_Convert_PT100>:



	void Isb_App_Convert_PT100(uint16_t Value, void *Destination) {
    119e:	fb 01       	movw	r30, r22
		Value = Value << 1;
		*(uint16_t *)Destination = Value;
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	91 83       	std	Z+1, r25	; 0x01
    11a6:	80 83       	st	Z, r24
	}
    11a8:	08 95       	ret

000011aa <Isb_App_Exec>:



	void Isb_App_Exec(void) {
    11aa:	3f 92       	push	r3
    11ac:	4f 92       	push	r4
    11ae:	5f 92       	push	r5
    11b0:	6f 92       	push	r6
    11b2:	7f 92       	push	r7
    11b4:	8f 92       	push	r8
    11b6:	9f 92       	push	r9
    11b8:	af 92       	push	r10
    11ba:	bf 92       	push	r11
    11bc:	cf 92       	push	r12
    11be:	df 92       	push	r13
    11c0:	ef 92       	push	r14
    11c2:	ff 92       	push	r15
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29

		#if defined(ISB_APP_DIGOUT_MAX)
			if (bit_is_set(Isb_App_DigOut_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
    11cc:	80 91 9a 00 	lds	r24, 0x009A
    11d0:	80 ff       	sbrs	r24, 0
    11d2:	b9 c1       	rjmp	.+882    	; 0x1546 <Isb_App_Exec+0x39c>
    11d4:	c4 e8       	ldi	r28, 0x84	; 132
    11d6:	d2 e0       	ldi	r29, 0x02	; 2
    11d8:	7e 01       	movw	r14, r28
    11da:	00 e0       	ldi	r16, 0x00	; 0
    11dc:	10 e0       	ldi	r17, 0x00	; 0



						// Rückmeldungsfunktion
						Value = 0;
						if ((Isb_App_DigOut[AppIndex].Value == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
    11de:	7a e1       	ldi	r23, 0x1A	; 26
    11e0:	a7 2e       	mov	r10, r23
    11e2:	b1 2c       	mov	r11, r1
						if ((Isb_App_DigOut[AppIndex].Value == 0) & (bit_is_set(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
							Value = 1;
						}
						if (Isb_Obj_1Bit[Obj_1Bit_3].Value != Value) {
							Isb_Obj_1Bit[Obj_1Bit_3].Value = Value;
							Isb_Obj_1Bit[Obj_1Bit_3].IsChanged = TRUE;
    11e4:	dd 24       	eor	r13, r13
    11e6:	d3 94       	inc	r13



						// Rückmeldungsfunktion
						Value = 0;
						if ((Isb_App_DigOut[AppIndex].Value == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
    11e8:	61 e0       	ldi	r22, 0x01	; 1
    11ea:	46 2e       	mov	r4, r22
    11ec:	51 2c       	mov	r5, r1
											Isb_App_DigOut[AppIndex].TimeOffCount--;
											Value = 1;
										}
									}
									else {
										Isb_App_DigOut[AppIndex].TimeOffCount = (Isb_App_DigOut[AppIndex].Cfg5 + Isb_App_DigOut[AppIndex].Cfg6 * 60 + Isb_App_DigOut[AppIndex].Cfg7 * 60 * 60) * 1000;
    11ee:	50 e1       	ldi	r21, 0x10	; 16
    11f0:	65 2e       	mov	r6, r21
    11f2:	5e e0       	ldi	r21, 0x0E	; 14
    11f4:	75 2e       	mov	r7, r21
    11f6:	4c e3       	ldi	r20, 0x3C	; 60
    11f8:	34 2e       	mov	r3, r20
    11fa:	38 ee       	ldi	r19, 0xE8	; 232
    11fc:	83 2e       	mov	r8, r19
    11fe:	33 e0       	ldi	r19, 0x03	; 3
    1200:	93 2e       	mov	r9, r19
	void Isb_App_Exec(void) {

		#if defined(ISB_APP_DIGOUT_MAX)
			if (bit_is_set(Isb_App_DigOut_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGOUT_MAX; AppIndex++) {
					uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigOut_Ch_Array[AppIndex]);
    1202:	f8 01       	movw	r30, r16
    1204:	ec 5a       	subi	r30, 0xAC	; 172
    1206:	fe 4f       	sbci	r31, 0xFE	; 254
    1208:	e4 91       	lpm	r30, Z+
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	ee 0f       	add	r30, r30
    120e:	ff 1f       	adc	r31, r31
    1210:	ec 5a       	subi	r30, 0xAC	; 172
    1212:	fc 4f       	sbci	r31, 0xFC	; 252
    1214:	80 81       	ld	r24, Z
    1216:	80 ff       	sbrs	r24, 0
    1218:	86 c1       	rjmp	.+780    	; 0x1526 <Isb_App_Exec+0x37c>
						uint8_t Obj_1Bit_0 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_1Bit_0_Array[AppIndex]);
    121a:	f8 01       	movw	r30, r16
    121c:	e4 5a       	subi	r30, 0xA4	; 164
    121e:	fe 4f       	sbci	r31, 0xFE	; 254
    1220:	24 91       	lpm	r18, Z+
						uint8_t Obj_1Bit_1 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_1Bit_1_Array[AppIndex]);
    1222:	f8 01       	movw	r30, r16
    1224:	ec 59       	subi	r30, 0x9C	; 156
    1226:	fe 4f       	sbci	r31, 0xFE	; 254
    1228:	34 91       	lpm	r19, Z+
						uint8_t Obj_1Bit_2 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_1Bit_2_Array[AppIndex]);
						uint8_t Obj_1Bit_3 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_1Bit_3_Array[AppIndex]);
    122a:	f8 01       	movw	r30, r16
    122c:	ec 58       	subi	r30, 0x8C	; 140
    122e:	fe 4f       	sbci	r31, 0xFE	; 254
    1230:	c4 90       	lpm	r12, Z+
						// Verknüpfungsfunktion
						switch (Isb_App_DigOut[AppIndex].Cfg0 & ISB_APP_DIGOUT_CFG0_LOGIC_MODE_MASK) {
    1232:	f7 01       	movw	r30, r14
    1234:	80 81       	ld	r24, Z
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	80 76       	andi	r24, 0x60	; 96
    123a:	90 70       	andi	r25, 0x00	; 0
    123c:	80 32       	cpi	r24, 0x20	; 32
    123e:	91 05       	cpc	r25, r1
    1240:	39 f0       	breq	.+14     	; 0x1250 <Isb_App_Exec+0xa6>
    1242:	a2 2f       	mov	r26, r18
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	80 34       	cpi	r24, 0x40	; 64
    1248:	91 05       	cpc	r25, r1
    124a:	09 f0       	breq	.+2      	; 0x124e <Isb_App_Exec+0xa4>
    124c:	52 c0       	rjmp	.+164    	; 0x12f2 <Isb_App_Exec+0x148>
    124e:	23 c0       	rjmp	.+70     	; 0x1296 <Isb_App_Exec+0xec>
							case ISB_APP_DIGOUT_CFG0_LOGIC_MODE_AND:
								if ((Isb_Obj_1Bit[Obj_1Bit_0].IsChanged == TRUE) | (Isb_Obj_1Bit[Obj_1Bit_1].IsChanged == TRUE)) {
    1250:	a2 2f       	mov	r26, r18
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	23 2f       	mov	r18, r19
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	fd 01       	movw	r30, r26
    125a:	ee 0f       	add	r30, r30
    125c:	ff 1f       	adc	r31, r31
    125e:	ee 0f       	add	r30, r30
    1260:	ff 1f       	adc	r31, r31
    1262:	ec 55       	subi	r30, 0x5C	; 92
    1264:	fe 4f       	sbci	r31, 0xFE	; 254
    1266:	83 81       	ldd	r24, Z+3	; 0x03
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	59 f0       	breq	.+22     	; 0x1282 <Isb_App_Exec+0xd8>
    126c:	f9 01       	movw	r30, r18
    126e:	ee 0f       	add	r30, r30
    1270:	ff 1f       	adc	r31, r31
    1272:	ee 0f       	add	r30, r30
    1274:	ff 1f       	adc	r31, r31
    1276:	ec 55       	subi	r30, 0x5C	; 92
    1278:	fe 4f       	sbci	r31, 0xFE	; 254
    127a:	83 81       	ldd	r24, Z+3	; 0x03
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	09 f0       	breq	.+2      	; 0x1282 <Isb_App_Exec+0xd8>
    1280:	4b c0       	rjmp	.+150    	; 0x1318 <Isb_App_Exec+0x16e>
									if ((Isb_Obj_1Bit[Obj_1Bit_0].Value != 0) & (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0)) {
    1282:	aa 0f       	add	r26, r26
    1284:	bb 1f       	adc	r27, r27
    1286:	aa 0f       	add	r26, r26
    1288:	bb 1f       	adc	r27, r27
    128a:	aa 55       	subi	r26, 0x5A	; 90
    128c:	be 4f       	sbci	r27, 0xFE	; 254
    128e:	8c 91       	ld	r24, X
    1290:	88 23       	and	r24, r24
    1292:	69 f1       	breq	.+90     	; 0x12ee <Isb_App_Exec+0x144>
    1294:	1f c0       	rjmp	.+62     	; 0x12d4 <Isb_App_Exec+0x12a>
										Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
									}
								}
								break;
							case ISB_APP_DIGOUT_CFG0_LOGIC_MODE_OR:
								if ((Isb_Obj_1Bit[Obj_1Bit_0].IsChanged == TRUE) | (Isb_Obj_1Bit[Obj_1Bit_1].IsChanged == TRUE)) {
    1296:	23 2f       	mov	r18, r19
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	fd 01       	movw	r30, r26
    129c:	ee 0f       	add	r30, r30
    129e:	ff 1f       	adc	r31, r31
    12a0:	ee 0f       	add	r30, r30
    12a2:	ff 1f       	adc	r31, r31
    12a4:	ec 55       	subi	r30, 0x5C	; 92
    12a6:	fe 4f       	sbci	r31, 0xFE	; 254
    12a8:	83 81       	ldd	r24, Z+3	; 0x03
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	51 f0       	breq	.+20     	; 0x12c2 <Isb_App_Exec+0x118>
    12ae:	f9 01       	movw	r30, r18
    12b0:	ee 0f       	add	r30, r30
    12b2:	ff 1f       	adc	r31, r31
    12b4:	ee 0f       	add	r30, r30
    12b6:	ff 1f       	adc	r31, r31
    12b8:	ec 55       	subi	r30, 0x5C	; 92
    12ba:	fe 4f       	sbci	r31, 0xFE	; 254
    12bc:	83 81       	ldd	r24, Z+3	; 0x03
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	59 f5       	brne	.+86     	; 0x1318 <Isb_App_Exec+0x16e>
									if ((Isb_Obj_1Bit[Obj_1Bit_0].Value != 0) | (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0)) {
    12c2:	aa 0f       	add	r26, r26
    12c4:	bb 1f       	adc	r27, r27
    12c6:	aa 0f       	add	r26, r26
    12c8:	bb 1f       	adc	r27, r27
    12ca:	aa 55       	subi	r26, 0x5A	; 90
    12cc:	be 4f       	sbci	r27, 0xFE	; 254
    12ce:	8c 91       	ld	r24, X
    12d0:	88 23       	and	r24, r24
    12d2:	51 f4       	brne	.+20     	; 0x12e8 <Isb_App_Exec+0x13e>
    12d4:	22 0f       	add	r18, r18
    12d6:	33 1f       	adc	r19, r19
    12d8:	22 0f       	add	r18, r18
    12da:	33 1f       	adc	r19, r19
    12dc:	2a 55       	subi	r18, 0x5A	; 90
    12de:	3e 4f       	sbci	r19, 0xFE	; 254
    12e0:	f9 01       	movw	r30, r18
    12e2:	80 81       	ld	r24, Z
    12e4:	88 23       	and	r24, r24
    12e6:	19 f0       	breq	.+6      	; 0x12ee <Isb_App_Exec+0x144>
										Isb_App_DigOut[AppIndex].LogicValue = 1;
    12e8:	da 8a       	std	Y+18, r13	; 0x12
										Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
    12ea:	db 8a       	std	Y+19, r13	; 0x13
    12ec:	15 c0       	rjmp	.+42     	; 0x1318 <Isb_App_Exec+0x16e>
									}
									else {
										Isb_App_DigOut[AppIndex].LogicValue = 0;
    12ee:	1a 8a       	std	Y+18, r1	; 0x12
    12f0:	fc cf       	rjmp	.-8      	; 0x12ea <Isb_App_Exec+0x140>
										Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
									}
								}
								break;
							default:
								if (Isb_Obj_1Bit[Obj_1Bit_0].IsChanged == TRUE) {
    12f2:	fd 01       	movw	r30, r26
    12f4:	ee 0f       	add	r30, r30
    12f6:	ff 1f       	adc	r31, r31
    12f8:	ee 0f       	add	r30, r30
    12fa:	ff 1f       	adc	r31, r31
    12fc:	ec 55       	subi	r30, 0x5C	; 92
    12fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1300:	93 81       	ldd	r25, Z+3	; 0x03
    1302:	91 30       	cpi	r25, 0x01	; 1
    1304:	49 f4       	brne	.+18     	; 0x1318 <Isb_App_Exec+0x16e>
									Isb_App_DigOut[AppIndex].LogicValue = Isb_Obj_1Bit[Obj_1Bit_0].Value;
    1306:	aa 0f       	add	r26, r26
    1308:	bb 1f       	adc	r27, r27
    130a:	aa 0f       	add	r26, r26
    130c:	bb 1f       	adc	r27, r27
    130e:	aa 55       	subi	r26, 0x5A	; 90
    1310:	be 4f       	sbci	r27, 0xFE	; 254
    1312:	8c 91       	ld	r24, X
    1314:	8a 8b       	std	Y+18, r24	; 0x12
									Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
    1316:	9b 8b       	std	Y+19, r25	; 0x13
								}						
								break;
						}
						// Zeitfunktion
						uint8_t Value = Isb_App_DigOut[AppIndex].LogicValue;
    1318:	4a 89       	ldd	r20, Y+18	; 0x12
						if ((Isb_App_DigOut[AppIndex].Cfg1 & ISB_APP_DIGOUT_CFG1_TIME_MODE_MASK) != ISB_APP_DIGOUT_CFG1_TIME_MODE_NONE) {
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	83 70       	andi	r24, 0x03	; 3
    1320:	90 70       	andi	r25, 0x00	; 0
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	09 f4       	brne	.+2      	; 0x1328 <Isb_App_Exec+0x17e>
    1326:	7a c0       	rjmp	.+244    	; 0x141c <Isb_App_Exec+0x272>
							if ((Isb_App_DigOut[AppIndex].Cfg1 & ISB_APP_DIGOUT_CFG1_TIME_MODE_MASK) == ISB_APP_DIGOUT_CFG1_TIME_MODE_DELAY) {
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	09 f0       	breq	.+2      	; 0x132e <Isb_App_Exec+0x184>
    132c:	77 c0       	rjmp	.+238    	; 0x141c <Isb_App_Exec+0x272>
								if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg1, ISB_APP_DIGOUT_CFG1_TIME_POWERUPDELAY_ENABLED)) {
    132e:	0a 9d       	mul	r16, r10
    1330:	f0 01       	movw	r30, r0
    1332:	0b 9d       	mul	r16, r11
    1334:	f0 0d       	add	r31, r0
    1336:	1a 9d       	mul	r17, r10
    1338:	f0 0d       	add	r31, r0
    133a:	11 24       	eor	r1, r1
    133c:	eb 57       	subi	r30, 0x7B	; 123
    133e:	fd 4f       	sbci	r31, 0xFD	; 253
    1340:	80 81       	ld	r24, Z
    1342:	82 ff       	sbrs	r24, 2
    1344:	34 c0       	rjmp	.+104    	; 0x13ae <Isb_App_Exec+0x204>
									if (Value == 1) {
    1346:	41 30       	cpi	r20, 0x01	; 1
    1348:	89 f4       	brne	.+34     	; 0x136c <Isb_App_Exec+0x1c2>
										if (Isb_App_DigOut[AppIndex].TimeOnCount != 0) {
    134a:	8a 85       	ldd	r24, Y+10	; 0x0a
    134c:	9b 85       	ldd	r25, Y+11	; 0x0b
    134e:	ac 85       	ldd	r26, Y+12	; 0x0c
    1350:	bd 85       	ldd	r27, Y+13	; 0x0d
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	a1 05       	cpc	r26, r1
    1356:	b1 05       	cpc	r27, r1
    1358:	51 f1       	breq	.+84     	; 0x13ae <Isb_App_Exec+0x204>
											Isb_App_DigOut[AppIndex].TimeOnCount--;
    135a:	01 97       	sbiw	r24, 0x01	; 1
    135c:	a1 09       	sbc	r26, r1
    135e:	b1 09       	sbc	r27, r1
    1360:	8a 87       	std	Y+10, r24	; 0x0a
    1362:	9b 87       	std	Y+11, r25	; 0x0b
    1364:	ac 87       	std	Y+12, r26	; 0x0c
    1366:	bd 87       	std	Y+13, r27	; 0x0d
    1368:	40 e0       	ldi	r20, 0x00	; 0
    136a:	21 c0       	rjmp	.+66     	; 0x13ae <Isb_App_Exec+0x204>
											Value = 0;
										}
									}
									else {
										Isb_App_DigOut[AppIndex].TimeOnCount = (Isb_App_DigOut[AppIndex].Cfg2 + Isb_App_DigOut[AppIndex].Cfg3 * 60 + Isb_App_DigOut[AppIndex].Cfg4 * 60 * 60) * 1000;
    136c:	8c 81       	ldd	r24, Y+4	; 0x04
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	86 9d       	mul	r24, r6
    1372:	90 01       	movw	r18, r0
    1374:	87 9d       	mul	r24, r7
    1376:	30 0d       	add	r19, r0
    1378:	96 9d       	mul	r25, r6
    137a:	30 0d       	add	r19, r0
    137c:	11 24       	eor	r1, r1
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	83 9d       	mul	r24, r3
    1382:	c0 01       	movw	r24, r0
    1384:	11 24       	eor	r1, r1
    1386:	28 0f       	add	r18, r24
    1388:	39 1f       	adc	r19, r25
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	28 0f       	add	r18, r24
    138e:	31 1d       	adc	r19, r1
    1390:	28 9d       	mul	r18, r8
    1392:	c0 01       	movw	r24, r0
    1394:	29 9d       	mul	r18, r9
    1396:	90 0d       	add	r25, r0
    1398:	38 9d       	mul	r19, r8
    139a:	90 0d       	add	r25, r0
    139c:	11 24       	eor	r1, r1
    139e:	aa 27       	eor	r26, r26
    13a0:	97 fd       	sbrc	r25, 7
    13a2:	a0 95       	com	r26
    13a4:	ba 2f       	mov	r27, r26
    13a6:	8a 87       	std	Y+10, r24	; 0x0a
    13a8:	9b 87       	std	Y+11, r25	; 0x0b
    13aa:	ac 87       	std	Y+12, r26	; 0x0c
    13ac:	bd 87       	std	Y+13, r27	; 0x0d
									}
								}
								if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg1, ISB_APP_DIGOUT_CFG1_TIME_POWERDOWNDELAY_ENABLED)) {
    13ae:	80 81       	ld	r24, Z
    13b0:	83 ff       	sbrs	r24, 3
    13b2:	34 c0       	rjmp	.+104    	; 0x141c <Isb_App_Exec+0x272>
									if (Value == 0) {
    13b4:	44 23       	and	r20, r20
    13b6:	89 f4       	brne	.+34     	; 0x13da <Isb_App_Exec+0x230>
										if (Isb_App_DigOut[AppIndex].TimeOffCount != 0) {
    13b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    13ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    13bc:	a8 89       	ldd	r26, Y+16	; 0x10
    13be:	b9 89       	ldd	r27, Y+17	; 0x11
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	a1 05       	cpc	r26, r1
    13c4:	b1 05       	cpc	r27, r1
    13c6:	51 f1       	breq	.+84     	; 0x141c <Isb_App_Exec+0x272>
											Isb_App_DigOut[AppIndex].TimeOffCount--;
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	a1 09       	sbc	r26, r1
    13cc:	b1 09       	sbc	r27, r1
    13ce:	8e 87       	std	Y+14, r24	; 0x0e
    13d0:	9f 87       	std	Y+15, r25	; 0x0f
    13d2:	a8 8b       	std	Y+16, r26	; 0x10
    13d4:	b9 8b       	std	Y+17, r27	; 0x11
    13d6:	41 e0       	ldi	r20, 0x01	; 1
    13d8:	21 c0       	rjmp	.+66     	; 0x141c <Isb_App_Exec+0x272>
											Value = 1;
										}
									}
									else {
										Isb_App_DigOut[AppIndex].TimeOffCount = (Isb_App_DigOut[AppIndex].Cfg5 + Isb_App_DigOut[AppIndex].Cfg6 * 60 + Isb_App_DigOut[AppIndex].Cfg7 * 60 * 60) * 1000;
    13da:	8f 81       	ldd	r24, Y+7	; 0x07
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	86 9d       	mul	r24, r6
    13e0:	90 01       	movw	r18, r0
    13e2:	87 9d       	mul	r24, r7
    13e4:	30 0d       	add	r19, r0
    13e6:	96 9d       	mul	r25, r6
    13e8:	30 0d       	add	r19, r0
    13ea:	11 24       	eor	r1, r1
    13ec:	8e 81       	ldd	r24, Y+6	; 0x06
    13ee:	83 9d       	mul	r24, r3
    13f0:	c0 01       	movw	r24, r0
    13f2:	11 24       	eor	r1, r1
    13f4:	28 0f       	add	r18, r24
    13f6:	39 1f       	adc	r19, r25
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	28 0f       	add	r18, r24
    13fc:	31 1d       	adc	r19, r1
    13fe:	28 9d       	mul	r18, r8
    1400:	c0 01       	movw	r24, r0
    1402:	29 9d       	mul	r18, r9
    1404:	90 0d       	add	r25, r0
    1406:	38 9d       	mul	r19, r8
    1408:	90 0d       	add	r25, r0
    140a:	11 24       	eor	r1, r1
    140c:	aa 27       	eor	r26, r26
    140e:	97 fd       	sbrc	r25, 7
    1410:	a0 95       	com	r26
    1412:	ba 2f       	mov	r27, r26
    1414:	8e 87       	std	Y+14, r24	; 0x0e
    1416:	9f 87       	std	Y+15, r25	; 0x0f
    1418:	a8 8b       	std	Y+16, r26	; 0x10
    141a:	b9 8b       	std	Y+17, r27	; 0x11
									Isb_App_DigOut[AppIndex].TimeOffCount = (Isb_App_DigOut[AppIndex].Cfg5 + Isb_App_DigOut[AppIndex].Cfg6 * 60 + Isb_App_DigOut[AppIndex].Cfg7 * 60 * 60) * 1000;
								}
							}
*/
						}
						if (Isb_App_DigOut[AppIndex].TimeValue != Value) {
    141c:	8c 89       	ldd	r24, Y+20	; 0x14
    141e:	84 17       	cp	r24, r20
    1420:	11 f0       	breq	.+4      	; 0x1426 <Isb_App_Exec+0x27c>
							Isb_App_DigOut[AppIndex].TimeValue = Value;
    1422:	4c 8b       	std	Y+20, r20	; 0x14
							Isb_App_DigOut[AppIndex].TimeIsChanged = TRUE;
    1424:	dd 8a       	std	Y+21, r13	; 0x15
//									}
//								}
//							}
//						}
//						else {
							if (Isb_App_DigOut[AppIndex].TimeIsChanged == TRUE) {
    1426:	9d 89       	ldd	r25, Y+21	; 0x15
    1428:	91 30       	cpi	r25, 0x01	; 1
    142a:	19 f4       	brne	.+6      	; 0x1432 <Isb_App_Exec+0x288>
								Isb_App_DigOut[AppIndex].SpecialValue = Isb_App_DigOut[AppIndex].TimeValue;
    142c:	8c 89       	ldd	r24, Y+20	; 0x14
    142e:	8e 8b       	std	Y+22, r24	; 0x16
								Isb_App_DigOut[AppIndex].SpecialIsChanged = TRUE;
    1430:	9f 8b       	std	Y+23, r25	; 0x17
//								}
//
//							}
//						}
//						else {
							if (Isb_App_DigOut[AppIndex].SpecialIsChanged == TRUE) {
    1432:	9f 89       	ldd	r25, Y+23	; 0x17
    1434:	91 30       	cpi	r25, 0x01	; 1
    1436:	19 f4       	brne	.+6      	; 0x143e <Isb_App_Exec+0x294>
								Isb_App_DigOut[AppIndex].Value = Isb_App_DigOut[AppIndex].SpecialValue;
    1438:	8e 89       	ldd	r24, Y+22	; 0x16
    143a:	88 8f       	std	Y+24, r24	; 0x18
								Isb_App_DigOut[AppIndex].IsChanged = TRUE;
    143c:	99 8f       	std	Y+25, r25	; 0x19
							}						
//						}
						// Ausgang
// -> TODO:
						if (Isb_App_DigOut[AppIndex].IsChanged == TRUE) {
    143e:	89 8d       	ldd	r24, Y+25	; 0x19
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	09 f0       	breq	.+2      	; 0x1446 <Isb_App_Exec+0x29c>
    1444:	43 c0       	rjmp	.+134    	; 0x14cc <Isb_App_Exec+0x322>
							uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigOut_Pin0_Array[AppIndex]);
    1446:	f8 01       	movw	r30, r16
    1448:	e4 58       	subi	r30, 0x84	; 132
    144a:	fe 4f       	sbci	r31, 0xFE	; 254
    144c:	64 91       	lpm	r22, Z+
//							uint8_t Pin1 = pgm_read_byte(&pgmIsb_App_DigOut_Pin1_Array[AppIndex]);
							switch (Isb_App_DigOut[AppIndex].Cfg0 & ISB_APP_DIGOUT_CFG0_OPERATION_MASK) {
    144e:	f7 01       	movw	r30, r14
    1450:	80 81       	ld	r24, Z
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	83 70       	andi	r24, 0x03	; 3
    1456:	90 70       	andi	r25, 0x00	; 0
    1458:	89 2b       	or	r24, r25
    145a:	c1 f5       	brne	.+112    	; 0x14cc <Isb_App_Exec+0x322>
								case ISB_APP_DIGOUT_CFG0_OPERATION_STD:
									if (bit_is_set(Isb_App_DigOut[AppIndex].Value, 0)) {
    145c:	0a 9d       	mul	r16, r10
    145e:	a0 01       	movw	r20, r0
    1460:	0b 9d       	mul	r16, r11
    1462:	50 0d       	add	r21, r0
    1464:	1a 9d       	mul	r17, r10
    1466:	50 0d       	add	r21, r0
    1468:	11 24       	eor	r1, r1
    146a:	fa 01       	movw	r30, r20
    146c:	e4 56       	subi	r30, 0x64	; 100
    146e:	fd 4f       	sbci	r31, 0xFD	; 253
    1470:	80 81       	ld	r24, Z
    1472:	26 2f       	mov	r18, r22
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	80 ff       	sbrs	r24, 0
    1478:	11 c0       	rjmp	.+34     	; 0x149c <Isb_App_Exec+0x2f2>
										uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
    147a:	28 73       	andi	r18, 0x38	; 56
    147c:	30 70       	andi	r19, 0x00	; 0
    147e:	e3 e0       	ldi	r30, 0x03	; 3
    1480:	35 95       	asr	r19
    1482:	27 95       	ror	r18
    1484:	ea 95       	dec	r30
    1486:	e1 f7       	brne	.-8      	; 0x1480 <Isb_App_Exec+0x2d6>
										uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
										if (Port != 0) {
    1488:	22 23       	and	r18, r18
    148a:	f9 f0       	breq	.+62     	; 0x14ca <Isb_App_Exec+0x320>
//							uint8_t Pin1 = pgm_read_byte(&pgmIsb_App_DigOut_Pin1_Array[AppIndex]);
							switch (Isb_App_DigOut[AppIndex].Cfg0 & ISB_APP_DIGOUT_CFG0_OPERATION_MASK) {
								case ISB_APP_DIGOUT_CFG0_OPERATION_STD:
									if (bit_is_set(Isb_App_DigOut[AppIndex].Value, 0)) {
										uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
										uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
    148c:	67 70       	andi	r22, 0x07	; 7
										if (Port != 0) {
											if (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN0_INVERTED)) {
    148e:	fa 01       	movw	r30, r20
    1490:	ec 57       	subi	r30, 0x7C	; 124
    1492:	fd 4f       	sbci	r31, 0xFD	; 253
    1494:	80 81       	ld	r24, Z
    1496:	82 fd       	sbrc	r24, 2
    1498:	11 c0       	rjmp	.+34     	; 0x14bc <Isb_App_Exec+0x312>
    149a:	13 c0       	rjmp	.+38     	; 0x14c2 <Isb_App_Exec+0x318>
												Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_HIGH);
											}
										}
									}
									else {
										uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
    149c:	28 73       	andi	r18, 0x38	; 56
    149e:	30 70       	andi	r19, 0x00	; 0
    14a0:	73 e0       	ldi	r23, 0x03	; 3
    14a2:	35 95       	asr	r19
    14a4:	27 95       	ror	r18
    14a6:	7a 95       	dec	r23
    14a8:	e1 f7       	brne	.-8      	; 0x14a2 <Isb_App_Exec+0x2f8>
										uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
										if (Port != 0) {
    14aa:	22 23       	and	r18, r18
    14ac:	71 f0       	breq	.+28     	; 0x14ca <Isb_App_Exec+0x320>
											}
										}
									}
									else {
										uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
										uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
    14ae:	67 70       	andi	r22, 0x07	; 7
										if (Port != 0) {
											if (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN0_INVERTED)) {
    14b0:	fa 01       	movw	r30, r20
    14b2:	ec 57       	subi	r30, 0x7C	; 124
    14b4:	fd 4f       	sbci	r31, 0xFD	; 253
    14b6:	80 81       	ld	r24, Z
    14b8:	82 fd       	sbrc	r24, 2
    14ba:	03 c0       	rjmp	.+6      	; 0x14c2 <Isb_App_Exec+0x318>
												Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_HIGH);
    14bc:	82 2f       	mov	r24, r18
    14be:	43 e0       	ldi	r20, 0x03	; 3
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <Isb_App_Exec+0x31c>
											}
											else {
												Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_LOW);
    14c2:	82 2f       	mov	r24, r18
    14c4:	41 e0       	ldi	r20, 0x01	; 1
    14c6:	0e 94 4f 01 	call	0x29e	; 0x29e <Lib_Pin_Set>
											}
										}
									}
									Isb_App_DigOut[AppIndex].IsChanged = FALSE;
    14ca:	19 8e       	std	Y+25, r1	; 0x19



						// Rückmeldungsfunktion
						Value = 0;
						if ((Isb_App_DigOut[AppIndex].Value == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
    14cc:	98 8d       	ldd	r25, Y+24	; 0x18
    14ce:	0a 9d       	mul	r16, r10
    14d0:	f0 01       	movw	r30, r0
    14d2:	0b 9d       	mul	r16, r11
    14d4:	f0 0d       	add	r31, r0
    14d6:	1a 9d       	mul	r17, r10
    14d8:	f0 0d       	add	r31, r0
    14da:	11 24       	eor	r1, r1
    14dc:	e3 57       	subi	r30, 0x73	; 115
    14de:	fd 4f       	sbci	r31, 0xFD	; 253
    14e0:	20 81       	ld	r18, Z
							Value = 1;
						}
						if ((Isb_App_DigOut[AppIndex].Value == 0) & (bit_is_set(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
    14e2:	e0 81       	ld	r30, Z
    14e4:	99 23       	and	r25, r25
    14e6:	21 f4       	brne	.+8      	; 0x14f0 <Isb_App_Exec+0x346>
    14e8:	e0 ff       	sbrs	r30, 0
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <Isb_App_Exec+0x346>
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	07 c0       	rjmp	.+14     	; 0x14fe <Isb_App_Exec+0x354>



						// Rückmeldungsfunktion
						Value = 0;
						if ((Isb_App_DigOut[AppIndex].Value == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	91 30       	cpi	r25, 0x01	; 1
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <Isb_App_Exec+0x34e>
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	92 2f       	mov	r25, r18
    14fa:	94 25       	eor	r25, r4
    14fc:	98 23       	and	r25, r24
							Value = 1;
						}
						if ((Isb_App_DigOut[AppIndex].Value == 0) & (bit_is_set(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
							Value = 1;
						}
						if (Isb_Obj_1Bit[Obj_1Bit_3].Value != Value) {
    14fe:	ec 2d       	mov	r30, r12
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	df 01       	movw	r26, r30
    1504:	aa 0f       	add	r26, r26
    1506:	bb 1f       	adc	r27, r27
    1508:	aa 0f       	add	r26, r26
    150a:	bb 1f       	adc	r27, r27
    150c:	aa 55       	subi	r26, 0x5A	; 90
    150e:	be 4f       	sbci	r27, 0xFE	; 254
    1510:	8c 91       	ld	r24, X
    1512:	89 17       	cp	r24, r25
    1514:	41 f0       	breq	.+16     	; 0x1526 <Isb_App_Exec+0x37c>
							Isb_Obj_1Bit[Obj_1Bit_3].Value = Value;
    1516:	9c 93       	st	X, r25
							Isb_Obj_1Bit[Obj_1Bit_3].IsChanged = TRUE;
    1518:	ee 0f       	add	r30, r30
    151a:	ff 1f       	adc	r31, r31
    151c:	ee 0f       	add	r30, r30
    151e:	ff 1f       	adc	r31, r31
    1520:	ec 55       	subi	r30, 0x5C	; 92
    1522:	fe 4f       	sbci	r31, 0xFE	; 254
    1524:	d3 82       	std	Z+3, r13	; 0x03
    1526:	0f 5f       	subi	r16, 0xFF	; 255
    1528:	1f 4f       	sbci	r17, 0xFF	; 255
    152a:	6a 96       	adiw	r28, 0x1a	; 26
    152c:	8a e1       	ldi	r24, 0x1A	; 26
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	e8 0e       	add	r14, r24
    1532:	f9 1e       	adc	r15, r25

	void Isb_App_Exec(void) {

		#if defined(ISB_APP_DIGOUT_MAX)
			if (bit_is_set(Isb_App_DigOut_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGOUT_MAX; AppIndex++) {
    1534:	08 30       	cpi	r16, 0x08	; 8
    1536:	11 05       	cpc	r17, r1
    1538:	09 f0       	breq	.+2      	; 0x153c <Isb_App_Exec+0x392>
    153a:	63 ce       	rjmp	.-826    	; 0x1202 <Isb_App_Exec+0x58>
							Isb_Obj_1Bit[Obj_1Bit_3].Value = Value;
							Isb_Obj_1Bit[Obj_1Bit_3].IsChanged = TRUE;
						}
					}
				}
				Isb_App_DigOut_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    153c:	80 91 9a 00 	lds	r24, 0x009A
    1540:	8e 7f       	andi	r24, 0xFE	; 254
    1542:	80 93 9a 00 	sts	0x009A, r24
			}
		#endif /* ISB_APP_DIGOUT_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			if (bit_is_set(Isb_App_DigIn_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
    1546:	80 91 9f 00 	lds	r24, 0x009F
    154a:	80 ff       	sbrs	r24, 0
    154c:	45 c3       	rjmp	.+1674   	; 0x1bd8 <Isb_App_Exec+0xa2e>
    154e:	cb ea       	ldi	r28, 0xAB	; 171
    1550:	d0 e0       	ldi	r29, 0x00	; 0
    1552:	00 e0       	ldi	r16, 0x00	; 0
    1554:	10 e0       	ldi	r17, 0x00	; 0
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1556:	71 e0       	ldi	r23, 0x01	; 1
								if (Isb_App_DigIn[AppIndex].CountHigh == 40) {
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHLONG);
								}
								// Event "High Repeat"
								if (Isb_App_DigIn[AppIndex].CountHigh == 100) {
									Isb_App_DigIn[AppIndex].CountHigh = 90;
    1558:	ba e5       	ldi	r27, 0x5A	; 90
    155a:	eb 2e       	mov	r14, r27
		#endif /* ISB_APP_DIGOUT_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			if (bit_is_set(Isb_App_DigIn_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++) {
					uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigIn_Ch_Array[AppIndex]);
    155c:	f8 01       	movw	r30, r16
    155e:	ec 57       	subi	r30, 0x7C	; 124
    1560:	fe 4f       	sbci	r31, 0xFE	; 254
    1562:	e4 91       	lpm	r30, Z+
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	ee 0f       	add	r30, r30
    1568:	ff 1f       	adc	r31, r31
    156a:	ec 5a       	subi	r30, 0xAC	; 172
    156c:	fc 4f       	sbci	r31, 0xFC	; 252
    156e:	80 81       	ld	r24, Z
    1570:	80 ff       	sbrs	r24, 0
    1572:	26 c3       	rjmp	.+1612   	; 0x1bc0 <Isb_App_Exec+0xa16>
						uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigIn_Pin0_Array[AppIndex]);
    1574:	f8 01       	movw	r30, r16
    1576:	e4 57       	subi	r30, 0x74	; 116
    1578:	fe 4f       	sbci	r31, 0xFE	; 254
    157a:	24 91       	lpm	r18, Z+
//						uint8_t Obj_1Bit_0 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_1Bit_0_Array[AppIndex]);
						uint8_t Obj_1Bit_1 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_1Bit_1_Array[AppIndex]);
    157c:	f8 01       	movw	r30, r16
    157e:	ec 56       	subi	r30, 0x6C	; 108
    1580:	fe 4f       	sbci	r31, 0xFE	; 254
    1582:	64 91       	lpm	r22, Z+
						uint8_t Obj_1Bit_2 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_1Bit_2_Array[AppIndex]);
    1584:	f8 01       	movw	r30, r16
    1586:	e4 56       	subi	r30, 0x64	; 100
    1588:	fe 4f       	sbci	r31, 0xFE	; 254
    158a:	f4 90       	lpm	r15, Z+
//						if (Isb_Obj_1Bit[Obj_1Bit_0].Value == 0) {



// Pin einlesen
							switch (Isb_App_DigIn[AppIndex].Cfg0 & ISB_APP_DIGIN_CFG0_MODE_MASK) {
    158c:	88 81       	ld	r24, Y
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	83 70       	andi	r24, 0x03	; 3
    1592:	90 70       	andi	r25, 0x00	; 0
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	91 05       	cpc	r25, r1
    1598:	09 f4       	brne	.+2      	; 0x159c <Isb_App_Exec+0x3f2>
    159a:	44 c0       	rjmp	.+136    	; 0x1624 <Isb_App_Exec+0x47a>
    159c:	82 30       	cpi	r24, 0x02	; 2
    159e:	91 05       	cpc	r25, r1
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <Isb_App_Exec+0x3fa>
    15a2:	40 c0       	rjmp	.+128    	; 0x1624 <Isb_App_Exec+0x47a>
    15a4:	89 2b       	or	r24, r25
    15a6:	09 f0       	breq	.+2      	; 0x15aa <Isb_App_Exec+0x400>
    15a8:	3e c0       	rjmp	.+124    	; 0x1626 <Isb_App_Exec+0x47c>
								case ISB_APP_DIGIN_CFG0_MODE_STD:
									;
									uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
    15aa:	82 2f       	mov	r24, r18
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	88 73       	andi	r24, 0x38	; 56
    15b0:	90 70       	andi	r25, 0x00	; 0
    15b2:	e3 e0       	ldi	r30, 0x03	; 3
    15b4:	95 95       	asr	r25
    15b6:	87 95       	ror	r24
    15b8:	ea 95       	dec	r30
    15ba:	e1 f7       	brne	.-8      	; 0x15b4 <Isb_App_Exec+0x40a>
    15bc:	98 2f       	mov	r25, r24
									uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
									if (Port != 0) {
    15be:	88 23       	and	r24, r24
    15c0:	91 f1       	breq	.+100    	; 0x1626 <Isb_App_Exec+0x47c>
// Pin einlesen
							switch (Isb_App_DigIn[AppIndex].Cfg0 & ISB_APP_DIGIN_CFG0_MODE_MASK) {
								case ISB_APP_DIGIN_CFG0_MODE_STD:
									;
									uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
									uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
    15c2:	27 70       	andi	r18, 0x07	; 7
									if (Port != 0) {
										if (bit_is_clear(Isb_App_DigIn[AppIndex].Cfg0, ISB_APP_DIGIN_CFG0_PIN0_INVERTED)) {
    15c4:	f8 01       	movw	r30, r16
    15c6:	53 e0       	ldi	r21, 0x03	; 3
    15c8:	ee 0f       	add	r30, r30
    15ca:	ff 1f       	adc	r31, r31
    15cc:	5a 95       	dec	r21
    15ce:	e1 f7       	brne	.-8      	; 0x15c8 <Isb_App_Exec+0x41e>
    15d0:	e5 55       	subi	r30, 0x55	; 85
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	80 81       	ld	r24, Z
    15d6:	e9 2f       	mov	r30, r25
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	82 fd       	sbrc	r24, 2
    15dc:	11 c0       	rjmp	.+34     	; 0x1600 <Isb_App_Exec+0x456>
	#endif



	uint8_t Lib_Pin_Get(const uint8_t aPort, const uint8_t aPin) {
		return (*(PINx[aPort]) >> aPin) & 1;
    15de:	ee 0f       	add	r30, r30
    15e0:	ff 1f       	adc	r31, r31
    15e2:	ec 57       	subi	r30, 0x7C	; 124
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	01 90       	ld	r0, Z+
    15e8:	f0 81       	ld	r31, Z
    15ea:	e0 2d       	mov	r30, r0
    15ec:	80 81       	ld	r24, Z
											if (Lib_Pin_Get(Port, Pin) != 0) {
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <Isb_App_Exec+0x44c>
    15f2:	95 95       	asr	r25
    15f4:	87 95       	ror	r24
    15f6:	2a 95       	dec	r18
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <Isb_App_Exec+0x448>
    15fa:	80 ff       	sbrs	r24, 0
    15fc:	13 c0       	rjmp	.+38     	; 0x1624 <Isb_App_Exec+0x47a>
    15fe:	10 c0       	rjmp	.+32     	; 0x1620 <Isb_App_Exec+0x476>
    1600:	ee 0f       	add	r30, r30
    1602:	ff 1f       	adc	r31, r31
    1604:	ec 57       	subi	r30, 0x7C	; 124
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	01 90       	ld	r0, Z+
    160a:	f0 81       	ld	r31, Z
    160c:	e0 2d       	mov	r30, r0
    160e:	80 81       	ld	r24, Z
											else {
												Isb_App_DigIn[AppIndex].Value = 0;
											}
										}
										else {
											if (Lib_Pin_Get(Port, Pin) != 0) {
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <Isb_App_Exec+0x46e>
    1614:	95 95       	asr	r25
    1616:	87 95       	ror	r24
    1618:	2a 95       	dec	r18
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <Isb_App_Exec+0x46a>
    161c:	80 fd       	sbrc	r24, 0
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <Isb_App_Exec+0x47a>
												Isb_App_DigIn[AppIndex].Value = 0;
											}
											else {
												Isb_App_DigIn[AppIndex].Value = 1;
    1620:	7c 83       	std	Y+4, r23	; 0x04
    1622:	01 c0       	rjmp	.+2      	; 0x1626 <Isb_App_Exec+0x47c>
									Isb_App_DigIn[AppIndex].Value = 0;
// <- TODO:
									break;
								case ISB_APP_DIGIN_CFG0_MODE_SLAVEUSART1:
// -> TODO:
									Isb_App_DigIn[AppIndex].Value = 0;
    1624:	1c 82       	std	Y+4, r1	; 0x04
							}



// Pin auswerten
							if (Isb_App_DigIn[AppIndex].Value != 0) {
    1626:	8c 81       	ldd	r24, Y+4	; 0x04
    1628:	88 23       	and	r24, r24
    162a:	b9 f0       	breq	.+46     	; 0x165a <Isb_App_Exec+0x4b0>
								// Global
								Isb_App_DigIn[AppIndex].CountHigh++;
    162c:	8f 81       	ldd	r24, Y+7	; 0x07
    162e:	8f 5f       	subi	r24, 0xFF	; 255
    1630:	8f 83       	std	Y+7, r24	; 0x07
								// Event "High" > 40ms
								if (Isb_App_DigIn[AppIndex].CountHigh == 4) {
    1632:	84 30       	cpi	r24, 0x04	; 4
    1634:	19 f4       	brne	.+6      	; 0x163c <Isb_App_Exec+0x492>
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGH);
    1636:	8d 81       	ldd	r24, Y+5	; 0x05
    1638:	80 61       	ori	r24, 0x10	; 16
    163a:	8d 83       	std	Y+5, r24	; 0x05
								}
								// Event "High Long" > 400ms
								if (Isb_App_DigIn[AppIndex].CountHigh == 40) {
    163c:	8f 81       	ldd	r24, Y+7	; 0x07
    163e:	88 32       	cpi	r24, 0x28	; 40
    1640:	19 f4       	brne	.+6      	; 0x1648 <Isb_App_Exec+0x49e>
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHLONG);
    1642:	8d 81       	ldd	r24, Y+5	; 0x05
    1644:	80 64       	ori	r24, 0x40	; 64
    1646:	8d 83       	std	Y+5, r24	; 0x05
								}
								// Event "High Repeat"
								if (Isb_App_DigIn[AppIndex].CountHigh == 100) {
    1648:	8f 81       	ldd	r24, Y+7	; 0x07
    164a:	84 36       	cpi	r24, 0x64	; 100
    164c:	21 f4       	brne	.+8      	; 0x1656 <Isb_App_Exec+0x4ac>
									Isb_App_DigIn[AppIndex].CountHigh = 90;
    164e:	ef 82       	std	Y+7, r14	; 0x07
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHREPEAT);
    1650:	8d 81       	ldd	r24, Y+5	; 0x05
    1652:	80 68       	ori	r24, 0x80	; 128
    1654:	8d 83       	std	Y+5, r24	; 0x05
//									if (Isb_App_DigIn[AppIndex].CountLow < 40) {
//										Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOWSHORT);
//									}
//								}
								// Global
								Isb_App_DigIn[AppIndex].CountLow = 0;
    1656:	1e 82       	std	Y+6, r1	; 0x06
    1658:	11 c0       	rjmp	.+34     	; 0x167c <Isb_App_Exec+0x4d2>
							}
							else {
								// Global
								Isb_App_DigIn[AppIndex].CountLow++;
    165a:	8e 81       	ldd	r24, Y+6	; 0x06
    165c:	8f 5f       	subi	r24, 0xFF	; 255
    165e:	8e 83       	std	Y+6, r24	; 0x06
								// Event "Low" > 40ms
								if (Isb_App_DigIn[AppIndex].CountLow == 4) {
    1660:	84 30       	cpi	r24, 0x04	; 4
    1662:	19 f4       	brne	.+6      	; 0x166a <Isb_App_Exec+0x4c0>
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOW);
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	81 60       	ori	r24, 0x01	; 1
    1668:	8d 83       	std	Y+5, r24	; 0x05
//								if (Isb_App_DigIn[AppIndex].CountLow == 100) {
//									Isb_App_DigIn[AppIndex].CountLow = 90;
//									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOWREPEAT);
//								}
								// Event "High Short" = 40-400ms
								if (Isb_App_DigIn[AppIndex].CountHigh != 0) {
    166a:	8f 81       	ldd	r24, Y+7	; 0x07
    166c:	88 23       	and	r24, r24
    166e:	29 f0       	breq	.+10     	; 0x167a <Isb_App_Exec+0x4d0>
									if (Isb_App_DigIn[AppIndex].CountHigh < 40) {
    1670:	88 32       	cpi	r24, 0x28	; 40
    1672:	18 f4       	brcc	.+6      	; 0x167a <Isb_App_Exec+0x4d0>
										Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHSHORT);
    1674:	8d 81       	ldd	r24, Y+5	; 0x05
    1676:	80 62       	ori	r24, 0x20	; 32
    1678:	8d 83       	std	Y+5, r24	; 0x05
									}
								}
								// Global
								Isb_App_DigIn[AppIndex].CountHigh = 0;
    167a:	1f 82       	std	Y+7, r1	; 0x07
							}



// Event auswerten
							switch (Isb_App_DigIn[AppIndex].Cfg1 & ISB_APP_DIGIN_CFG1_MODE_MASK) {
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	c9 01       	movw	r24, r18
    1684:	87 70       	andi	r24, 0x07	; 7
    1686:	90 70       	andi	r25, 0x00	; 0
    1688:	89 2b       	or	r24, r25
    168a:	09 f0       	breq	.+2      	; 0x168e <Isb_App_Exec+0x4e4>
    168c:	99 c2       	rjmp	.+1330   	; 0x1bc0 <Isb_App_Exec+0xa16>
								case ISB_APP_DIGIN_CFG1_MODE_SWITCH:
									// Betriebsart = Schaltsensor/Störmeldeeingang
									switch (Isb_App_DigIn[AppIndex].Cfg1 & ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_MASK) {
    168e:	c9 01       	movw	r24, r18
    1690:	88 73       	andi	r24, 0x38	; 56
    1692:	90 70       	andi	r25, 0x00	; 0
    1694:	88 30       	cpi	r24, 0x08	; 8
    1696:	91 05       	cpc	r25, r1
    1698:	09 f4       	brne	.+2      	; 0x169c <Isb_App_Exec+0x4f2>
    169a:	aa c0       	rjmp	.+340    	; 0x17f0 <Isb_App_Exec+0x646>
    169c:	89 30       	cpi	r24, 0x09	; 9
    169e:	91 05       	cpc	r25, r1
    16a0:	1c f4       	brge	.+6      	; 0x16a8 <Isb_App_Exec+0x4fe>
    16a2:	89 2b       	or	r24, r25
    16a4:	49 f0       	breq	.+18     	; 0x16b8 <Isb_App_Exec+0x50e>
    16a6:	8c c2       	rjmp	.+1304   	; 0x1bc0 <Isb_App_Exec+0xa16>
    16a8:	80 31       	cpi	r24, 0x10	; 16
    16aa:	91 05       	cpc	r25, r1
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <Isb_App_Exec+0x506>
    16ae:	3c c1       	rjmp	.+632    	; 0x1928 <Isb_App_Exec+0x77e>
    16b0:	48 97       	sbiw	r24, 0x18	; 24
    16b2:	09 f0       	breq	.+2      	; 0x16b6 <Isb_App_Exec+0x50c>
    16b4:	85 c2       	rjmp	.+1290   	; 0x1bc0 <Isb_App_Exec+0xa16>
    16b6:	d4 c1       	rjmp	.+936    	; 0x1a60 <Isb_App_Exec+0x8b6>
										case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_0:
											// 1 Schaltobjekt - Ohne Unterscheidung Kurz/Lang - Ohne Repeat 
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGH)) {
    16b8:	a8 01       	movw	r20, r16
    16ba:	23 e0       	ldi	r18, 0x03	; 3
    16bc:	44 0f       	add	r20, r20
    16be:	55 1f       	adc	r21, r21
    16c0:	2a 95       	dec	r18
    16c2:	e1 f7       	brne	.-8      	; 0x16bc <Isb_App_Exec+0x512>
    16c4:	40 55       	subi	r20, 0x50	; 80
    16c6:	5f 4f       	sbci	r21, 0xFF	; 255
    16c8:	fa 01       	movw	r30, r20
    16ca:	80 81       	ld	r24, Z
    16cc:	84 ff       	sbrs	r24, 4
    16ce:	46 c0       	rjmp	.+140    	; 0x175c <Isb_App_Exec+0x5b2>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1) {
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	8f 70       	andi	r24, 0x0F	; 15
    16d6:	90 70       	andi	r25, 0x00	; 0
    16d8:	81 30       	cpi	r24, 0x01	; 1
    16da:	91 05       	cpc	r25, r1
    16dc:	71 f4       	brne	.+28     	; 0x16fa <Isb_App_Exec+0x550>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    16de:	a6 2f       	mov	r26, r22
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	fd 01       	movw	r30, r26
    16e4:	ee 0f       	add	r30, r30
    16e6:	ff 1f       	adc	r31, r31
    16e8:	ee 0f       	add	r30, r30
    16ea:	ff 1f       	adc	r31, r31
    16ec:	ea 55       	subi	r30, 0x5A	; 90
    16ee:	fe 4f       	sbci	r31, 0xFE	; 254
    16f0:	80 81       	ld	r24, Z
    16f2:	88 23       	and	r24, r24
    16f4:	81 f1       	breq	.+96     	; 0x1756 <Isb_App_Exec+0x5ac>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    16f6:	10 82       	st	Z, r1
    16f8:	10 c0       	rjmp	.+32     	; 0x171a <Isb_App_Exec+0x570>
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2) {
    16fa:	82 30       	cpi	r24, 0x02	; 2
    16fc:	91 05       	cpc	r25, r1
    16fe:	b1 f4       	brne	.+44     	; 0x172c <Isb_App_Exec+0x582>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    1700:	a6 2f       	mov	r26, r22
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	fd 01       	movw	r30, r26
    1706:	ee 0f       	add	r30, r30
    1708:	ff 1f       	adc	r31, r31
    170a:	ee 0f       	add	r30, r30
    170c:	ff 1f       	adc	r31, r31
    170e:	ea 55       	subi	r30, 0x5A	; 90
    1710:	fe 4f       	sbci	r31, 0xFE	; 254
    1712:	80 81       	ld	r24, Z
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	f9 f0       	breq	.+62     	; 0x1756 <Isb_App_Exec+0x5ac>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1718:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    171a:	aa 0f       	add	r26, r26
    171c:	bb 1f       	adc	r27, r27
    171e:	aa 0f       	add	r26, r26
    1720:	bb 1f       	adc	r27, r27
    1722:	ac 55       	subi	r26, 0x5C	; 92
    1724:	be 4f       	sbci	r27, 0xFE	; 254
    1726:	13 96       	adiw	r26, 0x03	; 3
    1728:	7c 93       	st	X, r23
    172a:	15 c0       	rjmp	.+42     	; 0x1756 <Isb_App_Exec+0x5ac>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3) {
    172c:	03 97       	sbiw	r24, 0x03	; 3
    172e:	99 f4       	brne	.+38     	; 0x1756 <Isb_App_Exec+0x5ac>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    1730:	86 2f       	mov	r24, r22
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	dc 01       	movw	r26, r24
    173e:	aa 55       	subi	r26, 0x5A	; 90
    1740:	be 4f       	sbci	r27, 0xFE	; 254
    1742:	2c 91       	ld	r18, X
    1744:	fc 01       	movw	r30, r24
    1746:	22 23       	and	r18, r18
    1748:	11 f4       	brne	.+4      	; 0x174e <Isb_App_Exec+0x5a4>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    174a:	7c 93       	st	X, r23
    174c:	01 c0       	rjmp	.+2      	; 0x1750 <Isb_App_Exec+0x5a6>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    174e:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1750:	ec 55       	subi	r30, 0x5C	; 92
    1752:	fe 4f       	sbci	r31, 0xFE	; 254
    1754:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGH);
    1756:	8d 81       	ldd	r24, Y+5	; 0x05
    1758:	8f 7e       	andi	r24, 0xEF	; 239
    175a:	8d 83       	std	Y+5, r24	; 0x05
											}
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_LOW)) {
    175c:	fa 01       	movw	r30, r20
    175e:	80 81       	ld	r24, Z
    1760:	80 ff       	sbrs	r24, 0
    1762:	2e c2       	rjmp	.+1116   	; 0x1bc0 <Isb_App_Exec+0xa16>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1) {
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	80 7f       	andi	r24, 0xF0	; 240
    176a:	90 70       	andi	r25, 0x00	; 0
    176c:	80 31       	cpi	r24, 0x10	; 16
    176e:	91 05       	cpc	r25, r1
    1770:	71 f4       	brne	.+28     	; 0x178e <Isb_App_Exec+0x5e4>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    1772:	a6 2f       	mov	r26, r22
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	fd 01       	movw	r30, r26
    1778:	ee 0f       	add	r30, r30
    177a:	ff 1f       	adc	r31, r31
    177c:	ee 0f       	add	r30, r30
    177e:	ff 1f       	adc	r31, r31
    1780:	ea 55       	subi	r30, 0x5A	; 90
    1782:	fe 4f       	sbci	r31, 0xFE	; 254
    1784:	80 81       	ld	r24, Z
    1786:	88 23       	and	r24, r24
    1788:	81 f1       	breq	.+96     	; 0x17ea <Isb_App_Exec+0x640>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    178a:	10 82       	st	Z, r1
    178c:	10 c0       	rjmp	.+32     	; 0x17ae <Isb_App_Exec+0x604>
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2) {
    178e:	80 32       	cpi	r24, 0x20	; 32
    1790:	91 05       	cpc	r25, r1
    1792:	b1 f4       	brne	.+44     	; 0x17c0 <Isb_App_Exec+0x616>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    1794:	a6 2f       	mov	r26, r22
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	fd 01       	movw	r30, r26
    179a:	ee 0f       	add	r30, r30
    179c:	ff 1f       	adc	r31, r31
    179e:	ee 0f       	add	r30, r30
    17a0:	ff 1f       	adc	r31, r31
    17a2:	ea 55       	subi	r30, 0x5A	; 90
    17a4:	fe 4f       	sbci	r31, 0xFE	; 254
    17a6:	80 81       	ld	r24, Z
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	f9 f0       	breq	.+62     	; 0x17ea <Isb_App_Exec+0x640>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    17ac:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    17ae:	aa 0f       	add	r26, r26
    17b0:	bb 1f       	adc	r27, r27
    17b2:	aa 0f       	add	r26, r26
    17b4:	bb 1f       	adc	r27, r27
    17b6:	ac 55       	subi	r26, 0x5C	; 92
    17b8:	be 4f       	sbci	r27, 0xFE	; 254
    17ba:	13 96       	adiw	r26, 0x03	; 3
    17bc:	7c 93       	st	X, r23
    17be:	15 c0       	rjmp	.+42     	; 0x17ea <Isb_App_Exec+0x640>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3) {
    17c0:	c0 97       	sbiw	r24, 0x30	; 48
    17c2:	99 f4       	brne	.+38     	; 0x17ea <Isb_App_Exec+0x640>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    17c4:	86 2f       	mov	r24, r22
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	dc 01       	movw	r26, r24
    17d2:	aa 55       	subi	r26, 0x5A	; 90
    17d4:	be 4f       	sbci	r27, 0xFE	; 254
    17d6:	2c 91       	ld	r18, X
    17d8:	fc 01       	movw	r30, r24
    17da:	22 23       	and	r18, r18
    17dc:	11 f4       	brne	.+4      	; 0x17e2 <Isb_App_Exec+0x638>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    17de:	7c 93       	st	X, r23
    17e0:	01 c0       	rjmp	.+2      	; 0x17e4 <Isb_App_Exec+0x63a>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    17e2:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    17e4:	ec 55       	subi	r30, 0x5C	; 92
    17e6:	fe 4f       	sbci	r31, 0xFE	; 254
    17e8:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_LOW);
    17ea:	8d 81       	ldd	r24, Y+5	; 0x05
    17ec:	8e 7f       	andi	r24, 0xFE	; 254
    17ee:	e7 c1       	rjmp	.+974    	; 0x1bbe <Isb_App_Exec+0xa14>
											}
											break;
										case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_1:
											// 1 Schaltobjekt - Ohne Unterscheidung Kurz/Lang - Mit Repeat 
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGH)) {
    17f0:	a8 01       	movw	r20, r16
    17f2:	23 e0       	ldi	r18, 0x03	; 3
    17f4:	44 0f       	add	r20, r20
    17f6:	55 1f       	adc	r21, r21
    17f8:	2a 95       	dec	r18
    17fa:	e1 f7       	brne	.-8      	; 0x17f4 <Isb_App_Exec+0x64a>
    17fc:	40 55       	subi	r20, 0x50	; 80
    17fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1800:	fa 01       	movw	r30, r20
    1802:	80 81       	ld	r24, Z
    1804:	84 ff       	sbrs	r24, 4
    1806:	46 c0       	rjmp	.+140    	; 0x1894 <Isb_App_Exec+0x6ea>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1) {
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	8f 70       	andi	r24, 0x0F	; 15
    180e:	90 70       	andi	r25, 0x00	; 0
    1810:	81 30       	cpi	r24, 0x01	; 1
    1812:	91 05       	cpc	r25, r1
    1814:	71 f4       	brne	.+28     	; 0x1832 <Isb_App_Exec+0x688>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    1816:	a6 2f       	mov	r26, r22
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	fd 01       	movw	r30, r26
    181c:	ee 0f       	add	r30, r30
    181e:	ff 1f       	adc	r31, r31
    1820:	ee 0f       	add	r30, r30
    1822:	ff 1f       	adc	r31, r31
    1824:	ea 55       	subi	r30, 0x5A	; 90
    1826:	fe 4f       	sbci	r31, 0xFE	; 254
    1828:	80 81       	ld	r24, Z
    182a:	88 23       	and	r24, r24
    182c:	81 f1       	breq	.+96     	; 0x188e <Isb_App_Exec+0x6e4>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    182e:	10 82       	st	Z, r1
    1830:	10 c0       	rjmp	.+32     	; 0x1852 <Isb_App_Exec+0x6a8>
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2) {
    1832:	82 30       	cpi	r24, 0x02	; 2
    1834:	91 05       	cpc	r25, r1
    1836:	b1 f4       	brne	.+44     	; 0x1864 <Isb_App_Exec+0x6ba>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    1838:	a6 2f       	mov	r26, r22
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	fd 01       	movw	r30, r26
    183e:	ee 0f       	add	r30, r30
    1840:	ff 1f       	adc	r31, r31
    1842:	ee 0f       	add	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	ea 55       	subi	r30, 0x5A	; 90
    1848:	fe 4f       	sbci	r31, 0xFE	; 254
    184a:	80 81       	ld	r24, Z
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	f9 f0       	breq	.+62     	; 0x188e <Isb_App_Exec+0x6e4>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1850:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1852:	aa 0f       	add	r26, r26
    1854:	bb 1f       	adc	r27, r27
    1856:	aa 0f       	add	r26, r26
    1858:	bb 1f       	adc	r27, r27
    185a:	ac 55       	subi	r26, 0x5C	; 92
    185c:	be 4f       	sbci	r27, 0xFE	; 254
    185e:	13 96       	adiw	r26, 0x03	; 3
    1860:	7c 93       	st	X, r23
    1862:	15 c0       	rjmp	.+42     	; 0x188e <Isb_App_Exec+0x6e4>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3) {
    1864:	03 97       	sbiw	r24, 0x03	; 3
    1866:	99 f4       	brne	.+38     	; 0x188e <Isb_App_Exec+0x6e4>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    1868:	86 2f       	mov	r24, r22
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	dc 01       	movw	r26, r24
    1876:	aa 55       	subi	r26, 0x5A	; 90
    1878:	be 4f       	sbci	r27, 0xFE	; 254
    187a:	2c 91       	ld	r18, X
    187c:	fc 01       	movw	r30, r24
    187e:	22 23       	and	r18, r18
    1880:	11 f4       	brne	.+4      	; 0x1886 <Isb_App_Exec+0x6dc>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1882:	7c 93       	st	X, r23
    1884:	01 c0       	rjmp	.+2      	; 0x1888 <Isb_App_Exec+0x6de>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    1886:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1888:	ec 55       	subi	r30, 0x5C	; 92
    188a:	fe 4f       	sbci	r31, 0xFE	; 254
    188c:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGH);
    188e:	8d 81       	ldd	r24, Y+5	; 0x05
    1890:	8f 7e       	andi	r24, 0xEF	; 239
    1892:	8d 83       	std	Y+5, r24	; 0x05
											}
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_LOW)) {
    1894:	fa 01       	movw	r30, r20
    1896:	80 81       	ld	r24, Z
    1898:	80 ff       	sbrs	r24, 0
    189a:	8b c1       	rjmp	.+790    	; 0x1bb2 <Isb_App_Exec+0xa08>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1) {
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	80 7f       	andi	r24, 0xF0	; 240
    18a2:	90 70       	andi	r25, 0x00	; 0
    18a4:	80 31       	cpi	r24, 0x10	; 16
    18a6:	91 05       	cpc	r25, r1
    18a8:	71 f4       	brne	.+28     	; 0x18c6 <Isb_App_Exec+0x71c>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    18aa:	a6 2f       	mov	r26, r22
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	fd 01       	movw	r30, r26
    18b0:	ee 0f       	add	r30, r30
    18b2:	ff 1f       	adc	r31, r31
    18b4:	ee 0f       	add	r30, r30
    18b6:	ff 1f       	adc	r31, r31
    18b8:	ea 55       	subi	r30, 0x5A	; 90
    18ba:	fe 4f       	sbci	r31, 0xFE	; 254
    18bc:	80 81       	ld	r24, Z
    18be:	88 23       	and	r24, r24
    18c0:	81 f1       	breq	.+96     	; 0x1922 <Isb_App_Exec+0x778>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    18c2:	10 82       	st	Z, r1
    18c4:	10 c0       	rjmp	.+32     	; 0x18e6 <Isb_App_Exec+0x73c>
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2) {
    18c6:	80 32       	cpi	r24, 0x20	; 32
    18c8:	91 05       	cpc	r25, r1
    18ca:	b1 f4       	brne	.+44     	; 0x18f8 <Isb_App_Exec+0x74e>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    18cc:	a6 2f       	mov	r26, r22
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	fd 01       	movw	r30, r26
    18d2:	ee 0f       	add	r30, r30
    18d4:	ff 1f       	adc	r31, r31
    18d6:	ee 0f       	add	r30, r30
    18d8:	ff 1f       	adc	r31, r31
    18da:	ea 55       	subi	r30, 0x5A	; 90
    18dc:	fe 4f       	sbci	r31, 0xFE	; 254
    18de:	80 81       	ld	r24, Z
    18e0:	81 30       	cpi	r24, 0x01	; 1
    18e2:	f9 f0       	breq	.+62     	; 0x1922 <Isb_App_Exec+0x778>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    18e4:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    18e6:	aa 0f       	add	r26, r26
    18e8:	bb 1f       	adc	r27, r27
    18ea:	aa 0f       	add	r26, r26
    18ec:	bb 1f       	adc	r27, r27
    18ee:	ac 55       	subi	r26, 0x5C	; 92
    18f0:	be 4f       	sbci	r27, 0xFE	; 254
    18f2:	13 96       	adiw	r26, 0x03	; 3
    18f4:	7c 93       	st	X, r23
    18f6:	15 c0       	rjmp	.+42     	; 0x1922 <Isb_App_Exec+0x778>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3) {
    18f8:	c0 97       	sbiw	r24, 0x30	; 48
    18fa:	99 f4       	brne	.+38     	; 0x1922 <Isb_App_Exec+0x778>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    18fc:	86 2f       	mov	r24, r22
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	dc 01       	movw	r26, r24
    190a:	aa 55       	subi	r26, 0x5A	; 90
    190c:	be 4f       	sbci	r27, 0xFE	; 254
    190e:	2c 91       	ld	r18, X
    1910:	fc 01       	movw	r30, r24
    1912:	22 23       	and	r18, r18
    1914:	11 f4       	brne	.+4      	; 0x191a <Isb_App_Exec+0x770>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1916:	7c 93       	st	X, r23
    1918:	01 c0       	rjmp	.+2      	; 0x191c <Isb_App_Exec+0x772>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    191a:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    191c:	ec 55       	subi	r30, 0x5C	; 92
    191e:	fe 4f       	sbci	r31, 0xFE	; 254
    1920:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_LOW);
    1922:	8d 81       	ldd	r24, Y+5	; 0x05
    1924:	8e 7f       	andi	r24, 0xFE	; 254
    1926:	44 c1       	rjmp	.+648    	; 0x1bb0 <Isb_App_Exec+0xa06>
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHREPEAT);
											}
											break;
										case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_2:
											// 2 Schaltobjekte - Mit Unterscheidung Kurz/Lang - Ohne Repeat 
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHSHORT)) {
    1928:	a8 01       	movw	r20, r16
    192a:	93 e0       	ldi	r25, 0x03	; 3
    192c:	44 0f       	add	r20, r20
    192e:	55 1f       	adc	r21, r21
    1930:	9a 95       	dec	r25
    1932:	e1 f7       	brne	.-8      	; 0x192c <Isb_App_Exec+0x782>
    1934:	40 55       	subi	r20, 0x50	; 80
    1936:	5f 4f       	sbci	r21, 0xFF	; 255
    1938:	fa 01       	movw	r30, r20
    193a:	80 81       	ld	r24, Z
    193c:	85 ff       	sbrs	r24, 5
    193e:	46 c0       	rjmp	.+140    	; 0x19cc <Isb_App_Exec+0x822>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1) {
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	8f 70       	andi	r24, 0x0F	; 15
    1946:	90 70       	andi	r25, 0x00	; 0
    1948:	81 30       	cpi	r24, 0x01	; 1
    194a:	91 05       	cpc	r25, r1
    194c:	71 f4       	brne	.+28     	; 0x196a <Isb_App_Exec+0x7c0>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    194e:	a6 2f       	mov	r26, r22
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	fd 01       	movw	r30, r26
    1954:	ee 0f       	add	r30, r30
    1956:	ff 1f       	adc	r31, r31
    1958:	ee 0f       	add	r30, r30
    195a:	ff 1f       	adc	r31, r31
    195c:	ea 55       	subi	r30, 0x5A	; 90
    195e:	fe 4f       	sbci	r31, 0xFE	; 254
    1960:	80 81       	ld	r24, Z
    1962:	88 23       	and	r24, r24
    1964:	81 f1       	breq	.+96     	; 0x19c6 <Isb_App_Exec+0x81c>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    1966:	10 82       	st	Z, r1
    1968:	10 c0       	rjmp	.+32     	; 0x198a <Isb_App_Exec+0x7e0>
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2) {
    196a:	82 30       	cpi	r24, 0x02	; 2
    196c:	91 05       	cpc	r25, r1
    196e:	b1 f4       	brne	.+44     	; 0x199c <Isb_App_Exec+0x7f2>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    1970:	a6 2f       	mov	r26, r22
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	fd 01       	movw	r30, r26
    1976:	ee 0f       	add	r30, r30
    1978:	ff 1f       	adc	r31, r31
    197a:	ee 0f       	add	r30, r30
    197c:	ff 1f       	adc	r31, r31
    197e:	ea 55       	subi	r30, 0x5A	; 90
    1980:	fe 4f       	sbci	r31, 0xFE	; 254
    1982:	80 81       	ld	r24, Z
    1984:	81 30       	cpi	r24, 0x01	; 1
    1986:	f9 f0       	breq	.+62     	; 0x19c6 <Isb_App_Exec+0x81c>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1988:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    198a:	aa 0f       	add	r26, r26
    198c:	bb 1f       	adc	r27, r27
    198e:	aa 0f       	add	r26, r26
    1990:	bb 1f       	adc	r27, r27
    1992:	ac 55       	subi	r26, 0x5C	; 92
    1994:	be 4f       	sbci	r27, 0xFE	; 254
    1996:	13 96       	adiw	r26, 0x03	; 3
    1998:	7c 93       	st	X, r23
    199a:	15 c0       	rjmp	.+42     	; 0x19c6 <Isb_App_Exec+0x81c>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3) {
    199c:	03 97       	sbiw	r24, 0x03	; 3
    199e:	99 f4       	brne	.+38     	; 0x19c6 <Isb_App_Exec+0x81c>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    19a0:	86 2f       	mov	r24, r22
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	dc 01       	movw	r26, r24
    19ae:	aa 55       	subi	r26, 0x5A	; 90
    19b0:	be 4f       	sbci	r27, 0xFE	; 254
    19b2:	2c 91       	ld	r18, X
    19b4:	fc 01       	movw	r30, r24
    19b6:	22 23       	and	r18, r18
    19b8:	11 f4       	brne	.+4      	; 0x19be <Isb_App_Exec+0x814>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    19ba:	7c 93       	st	X, r23
    19bc:	01 c0       	rjmp	.+2      	; 0x19c0 <Isb_App_Exec+0x816>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    19be:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    19c0:	ec 55       	subi	r30, 0x5C	; 92
    19c2:	fe 4f       	sbci	r31, 0xFE	; 254
    19c4:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHSHORT);
    19c6:	8d 81       	ldd	r24, Y+5	; 0x05
    19c8:	8f 7d       	andi	r24, 0xDF	; 223
    19ca:	8d 83       	std	Y+5, r24	; 0x05
											}
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHLONG)) {
    19cc:	fa 01       	movw	r30, r20
    19ce:	80 81       	ld	r24, Z
    19d0:	86 ff       	sbrs	r24, 6
    19d2:	f6 c0       	rjmp	.+492    	; 0x1bc0 <Isb_App_Exec+0xa16>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1) {
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	80 7f       	andi	r24, 0xF0	; 240
    19da:	90 70       	andi	r25, 0x00	; 0
    19dc:	80 31       	cpi	r24, 0x10	; 16
    19de:	91 05       	cpc	r25, r1
    19e0:	71 f4       	brne	.+28     	; 0x19fe <Isb_App_Exec+0x854>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 0) {
    19e2:	af 2d       	mov	r26, r15
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	fd 01       	movw	r30, r26
    19e8:	ee 0f       	add	r30, r30
    19ea:	ff 1f       	adc	r31, r31
    19ec:	ee 0f       	add	r30, r30
    19ee:	ff 1f       	adc	r31, r31
    19f0:	ea 55       	subi	r30, 0x5A	; 90
    19f2:	fe 4f       	sbci	r31, 0xFE	; 254
    19f4:	80 81       	ld	r24, Z
    19f6:	88 23       	and	r24, r24
    19f8:	81 f1       	breq	.+96     	; 0x1a5a <Isb_App_Exec+0x8b0>
														Isb_Obj_1Bit[Obj_1Bit_2].Value = 0;
    19fa:	10 82       	st	Z, r1
    19fc:	10 c0       	rjmp	.+32     	; 0x1a1e <Isb_App_Exec+0x874>
														Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2) {
    19fe:	80 32       	cpi	r24, 0x20	; 32
    1a00:	91 05       	cpc	r25, r1
    1a02:	b1 f4       	brne	.+44     	; 0x1a30 <Isb_App_Exec+0x886>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 1) {
    1a04:	af 2d       	mov	r26, r15
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	fd 01       	movw	r30, r26
    1a0a:	ee 0f       	add	r30, r30
    1a0c:	ff 1f       	adc	r31, r31
    1a0e:	ee 0f       	add	r30, r30
    1a10:	ff 1f       	adc	r31, r31
    1a12:	ea 55       	subi	r30, 0x5A	; 90
    1a14:	fe 4f       	sbci	r31, 0xFE	; 254
    1a16:	80 81       	ld	r24, Z
    1a18:	81 30       	cpi	r24, 0x01	; 1
    1a1a:	f9 f0       	breq	.+62     	; 0x1a5a <Isb_App_Exec+0x8b0>
														Isb_Obj_1Bit[Obj_1Bit_2].Value = 1;
    1a1c:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
    1a1e:	aa 0f       	add	r26, r26
    1a20:	bb 1f       	adc	r27, r27
    1a22:	aa 0f       	add	r26, r26
    1a24:	bb 1f       	adc	r27, r27
    1a26:	ac 55       	subi	r26, 0x5C	; 92
    1a28:	be 4f       	sbci	r27, 0xFE	; 254
    1a2a:	13 96       	adiw	r26, 0x03	; 3
    1a2c:	7c 93       	st	X, r23
    1a2e:	15 c0       	rjmp	.+42     	; 0x1a5a <Isb_App_Exec+0x8b0>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3) {
    1a30:	c0 97       	sbiw	r24, 0x30	; 48
    1a32:	99 f4       	brne	.+38     	; 0x1a5a <Isb_App_Exec+0x8b0>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value == 0) {
    1a34:	8f 2d       	mov	r24, r15
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	dc 01       	movw	r26, r24
    1a42:	aa 55       	subi	r26, 0x5A	; 90
    1a44:	be 4f       	sbci	r27, 0xFE	; 254
    1a46:	2c 91       	ld	r18, X
    1a48:	fc 01       	movw	r30, r24
    1a4a:	22 23       	and	r18, r18
    1a4c:	11 f4       	brne	.+4      	; 0x1a52 <Isb_App_Exec+0x8a8>
														if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_2].Value = 1;
    1a4e:	7c 93       	st	X, r23
    1a50:	01 c0       	rjmp	.+2      	; 0x1a54 <Isb_App_Exec+0x8aa>
															Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_2].Value = 0;
    1a52:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
    1a54:	ec 55       	subi	r30, 0x5C	; 92
    1a56:	fe 4f       	sbci	r31, 0xFE	; 254
    1a58:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHLONG);
    1a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5c:	8f 7b       	andi	r24, 0xBF	; 191
    1a5e:	af c0       	rjmp	.+350    	; 0x1bbe <Isb_App_Exec+0xa14>
											}
											break;
										case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_3:
											// 2 Schaltobjekte - Mit Unterscheidung Kurz/Lang - Mit Repeat 
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHSHORT)) {
    1a60:	a8 01       	movw	r20, r16
    1a62:	23 e0       	ldi	r18, 0x03	; 3
    1a64:	44 0f       	add	r20, r20
    1a66:	55 1f       	adc	r21, r21
    1a68:	2a 95       	dec	r18
    1a6a:	e1 f7       	brne	.-8      	; 0x1a64 <Isb_App_Exec+0x8ba>
    1a6c:	40 55       	subi	r20, 0x50	; 80
    1a6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a70:	fa 01       	movw	r30, r20
    1a72:	80 81       	ld	r24, Z
    1a74:	85 ff       	sbrs	r24, 5
    1a76:	53 c0       	rjmp	.+166    	; 0x1b1e <Isb_App_Exec+0x974>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1) {
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	8f 70       	andi	r24, 0x0F	; 15
    1a7e:	90 70       	andi	r25, 0x00	; 0
    1a80:	81 30       	cpi	r24, 0x01	; 1
    1a82:	91 05       	cpc	r25, r1
    1a84:	71 f4       	brne	.+28     	; 0x1aa2 <Isb_App_Exec+0x8f8>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    1a86:	a6 2f       	mov	r26, r22
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	fd 01       	movw	r30, r26
    1a8c:	ee 0f       	add	r30, r30
    1a8e:	ff 1f       	adc	r31, r31
    1a90:	ee 0f       	add	r30, r30
    1a92:	ff 1f       	adc	r31, r31
    1a94:	ea 55       	subi	r30, 0x5A	; 90
    1a96:	fe 4f       	sbci	r31, 0xFE	; 254
    1a98:	80 81       	ld	r24, Z
    1a9a:	88 23       	and	r24, r24
    1a9c:	e9 f1       	breq	.+122    	; 0x1b18 <Isb_App_Exec+0x96e>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    1a9e:	10 82       	st	Z, r1
    1aa0:	10 c0       	rjmp	.+32     	; 0x1ac2 <Isb_App_Exec+0x918>
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2) {
    1aa2:	82 30       	cpi	r24, 0x02	; 2
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	b1 f4       	brne	.+44     	; 0x1ad4 <Isb_App_Exec+0x92a>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    1aa8:	a6 2f       	mov	r26, r22
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	fd 01       	movw	r30, r26
    1aae:	ee 0f       	add	r30, r30
    1ab0:	ff 1f       	adc	r31, r31
    1ab2:	ee 0f       	add	r30, r30
    1ab4:	ff 1f       	adc	r31, r31
    1ab6:	ea 55       	subi	r30, 0x5A	; 90
    1ab8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aba:	80 81       	ld	r24, Z
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	61 f1       	breq	.+88     	; 0x1b18 <Isb_App_Exec+0x96e>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1ac0:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1ac2:	aa 0f       	add	r26, r26
    1ac4:	bb 1f       	adc	r27, r27
    1ac6:	aa 0f       	add	r26, r26
    1ac8:	bb 1f       	adc	r27, r27
    1aca:	ac 55       	subi	r26, 0x5C	; 92
    1acc:	be 4f       	sbci	r27, 0xFE	; 254
    1ace:	13 96       	adiw	r26, 0x03	; 3
    1ad0:	7c 93       	st	X, r23
    1ad2:	22 c0       	rjmp	.+68     	; 0x1b18 <Isb_App_Exec+0x96e>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3) {
    1ad4:	03 97       	sbiw	r24, 0x03	; 3
    1ad6:	01 f5       	brne	.+64     	; 0x1b18 <Isb_App_Exec+0x96e>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    1ad8:	86 2f       	mov	r24, r22
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	dc 01       	movw	r26, r24
    1ade:	aa 0f       	add	r26, r26
    1ae0:	bb 1f       	adc	r27, r27
    1ae2:	fd 01       	movw	r30, r26
    1ae4:	ee 0f       	add	r30, r30
    1ae6:	ff 1f       	adc	r31, r31
    1ae8:	ea 55       	subi	r30, 0x5A	; 90
    1aea:	fe 4f       	sbci	r31, 0xFE	; 254
    1aec:	20 81       	ld	r18, Z
    1aee:	fc 01       	movw	r30, r24
    1af0:	ee 0f       	add	r30, r30
    1af2:	ff 1f       	adc	r31, r31
    1af4:	ee 0f       	add	r30, r30
    1af6:	ff 1f       	adc	r31, r31
    1af8:	22 23       	and	r18, r18
    1afa:	31 f4       	brne	.+12     	; 0x1b08 <Isb_App_Exec+0x95e>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1afc:	aa 0f       	add	r26, r26
    1afe:	bb 1f       	adc	r27, r27
    1b00:	aa 55       	subi	r26, 0x5A	; 90
    1b02:	be 4f       	sbci	r27, 0xFE	; 254
    1b04:	7c 93       	st	X, r23
    1b06:	05 c0       	rjmp	.+10     	; 0x1b12 <Isb_App_Exec+0x968>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    1b08:	aa 0f       	add	r26, r26
    1b0a:	bb 1f       	adc	r27, r27
    1b0c:	aa 55       	subi	r26, 0x5A	; 90
    1b0e:	be 4f       	sbci	r27, 0xFE	; 254
    1b10:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1b12:	ec 55       	subi	r30, 0x5C	; 92
    1b14:	fe 4f       	sbci	r31, 0xFE	; 254
    1b16:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHSHORT);
    1b18:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1a:	8f 7d       	andi	r24, 0xDF	; 223
    1b1c:	8d 83       	std	Y+5, r24	; 0x05
											}
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHLONG)) {
    1b1e:	fa 01       	movw	r30, r20
    1b20:	80 81       	ld	r24, Z
    1b22:	86 ff       	sbrs	r24, 6
    1b24:	46 c0       	rjmp	.+140    	; 0x1bb2 <Isb_App_Exec+0xa08>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1) {
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	80 7f       	andi	r24, 0xF0	; 240
    1b2c:	90 70       	andi	r25, 0x00	; 0
    1b2e:	80 31       	cpi	r24, 0x10	; 16
    1b30:	91 05       	cpc	r25, r1
    1b32:	71 f4       	brne	.+28     	; 0x1b50 <Isb_App_Exec+0x9a6>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 0) {
    1b34:	af 2d       	mov	r26, r15
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	fd 01       	movw	r30, r26
    1b3a:	ee 0f       	add	r30, r30
    1b3c:	ff 1f       	adc	r31, r31
    1b3e:	ee 0f       	add	r30, r30
    1b40:	ff 1f       	adc	r31, r31
    1b42:	ea 55       	subi	r30, 0x5A	; 90
    1b44:	fe 4f       	sbci	r31, 0xFE	; 254
    1b46:	80 81       	ld	r24, Z
    1b48:	88 23       	and	r24, r24
    1b4a:	81 f1       	breq	.+96     	; 0x1bac <Isb_App_Exec+0xa02>
														Isb_Obj_1Bit[Obj_1Bit_2].Value = 0;
    1b4c:	10 82       	st	Z, r1
    1b4e:	10 c0       	rjmp	.+32     	; 0x1b70 <Isb_App_Exec+0x9c6>
														Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2) {
    1b50:	80 32       	cpi	r24, 0x20	; 32
    1b52:	91 05       	cpc	r25, r1
    1b54:	b1 f4       	brne	.+44     	; 0x1b82 <Isb_App_Exec+0x9d8>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 1) {
    1b56:	af 2d       	mov	r26, r15
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	fd 01       	movw	r30, r26
    1b5c:	ee 0f       	add	r30, r30
    1b5e:	ff 1f       	adc	r31, r31
    1b60:	ee 0f       	add	r30, r30
    1b62:	ff 1f       	adc	r31, r31
    1b64:	ea 55       	subi	r30, 0x5A	; 90
    1b66:	fe 4f       	sbci	r31, 0xFE	; 254
    1b68:	80 81       	ld	r24, Z
    1b6a:	81 30       	cpi	r24, 0x01	; 1
    1b6c:	f9 f0       	breq	.+62     	; 0x1bac <Isb_App_Exec+0xa02>
														Isb_Obj_1Bit[Obj_1Bit_2].Value = 1;
    1b6e:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
    1b70:	aa 0f       	add	r26, r26
    1b72:	bb 1f       	adc	r27, r27
    1b74:	aa 0f       	add	r26, r26
    1b76:	bb 1f       	adc	r27, r27
    1b78:	ac 55       	subi	r26, 0x5C	; 92
    1b7a:	be 4f       	sbci	r27, 0xFE	; 254
    1b7c:	13 96       	adiw	r26, 0x03	; 3
    1b7e:	7c 93       	st	X, r23
    1b80:	15 c0       	rjmp	.+42     	; 0x1bac <Isb_App_Exec+0xa02>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3) {
    1b82:	c0 97       	sbiw	r24, 0x30	; 48
    1b84:	99 f4       	brne	.+38     	; 0x1bac <Isb_App_Exec+0xa02>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value == 0) {
    1b86:	8f 2d       	mov	r24, r15
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	dc 01       	movw	r26, r24
    1b94:	aa 55       	subi	r26, 0x5A	; 90
    1b96:	be 4f       	sbci	r27, 0xFE	; 254
    1b98:	2c 91       	ld	r18, X
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	22 23       	and	r18, r18
    1b9e:	11 f4       	brne	.+4      	; 0x1ba4 <Isb_App_Exec+0x9fa>
														if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_2].Value = 1;
    1ba0:	7c 93       	st	X, r23
    1ba2:	01 c0       	rjmp	.+2      	; 0x1ba6 <Isb_App_Exec+0x9fc>
															Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_2].Value = 0;
    1ba4:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
    1ba6:	ec 55       	subi	r30, 0x5C	; 92
    1ba8:	fe 4f       	sbci	r31, 0xFE	; 254
    1baa:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHLONG);
    1bac:	8d 81       	ldd	r24, Y+5	; 0x05
    1bae:	8f 7b       	andi	r24, 0xBF	; 191
    1bb0:	8d 83       	std	Y+5, r24	; 0x05
											}
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHREPEAT)) {
    1bb2:	fa 01       	movw	r30, r20
    1bb4:	80 81       	ld	r24, Z
    1bb6:	87 ff       	sbrs	r24, 7
    1bb8:	03 c0       	rjmp	.+6      	; 0x1bc0 <Isb_App_Exec+0xa16>
// TODO:


												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHREPEAT);
    1bba:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbc:	8f 77       	andi	r24, 0x7F	; 127
    1bbe:	8d 83       	std	Y+5, r24	; 0x05
    1bc0:	0f 5f       	subi	r16, 0xFF	; 255
    1bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc4:	28 96       	adiw	r28, 0x08	; 8
			}
		#endif /* ISB_APP_DIGOUT_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			if (bit_is_set(Isb_App_DigIn_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++) {
    1bc6:	08 30       	cpi	r16, 0x08	; 8
    1bc8:	11 05       	cpc	r17, r1
    1bca:	09 f0       	breq	.+2      	; 0x1bce <Isb_App_Exec+0xa24>
    1bcc:	c7 cc       	rjmp	.-1650   	; 0x155c <Isb_App_Exec+0x3b2>

//						}
// <- TODO:
					}
				}
				Isb_App_DigIn_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    1bce:	80 91 9f 00 	lds	r24, 0x009F
    1bd2:	8e 7f       	andi	r24, 0xFE	; 254
    1bd4:	80 93 9f 00 	sts	0x009F, r24
//#				}
				Isb_App_Lcd_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
			}
		#endif /* ISB_APP_LCD_MAX */

	}
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	1f 91       	pop	r17
    1bde:	0f 91       	pop	r16
    1be0:	ff 90       	pop	r15
    1be2:	ef 90       	pop	r14
    1be4:	df 90       	pop	r13
    1be6:	cf 90       	pop	r12
    1be8:	bf 90       	pop	r11
    1bea:	af 90       	pop	r10
    1bec:	9f 90       	pop	r9
    1bee:	8f 90       	pop	r8
    1bf0:	7f 90       	pop	r7
    1bf2:	6f 90       	pop	r6
    1bf4:	5f 90       	pop	r5
    1bf6:	4f 90       	pop	r4
    1bf8:	3f 90       	pop	r3
    1bfa:	08 95       	ret

00001bfc <Isb_Obj_Init>:
#ifndef ISB_OBJ_C_
	#define ISB_OBJ_C_



	void Isb_Obj_Init(void) {
    1bfc:	0f 93       	push	r16
    1bfe:	1f 93       	push	r17
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	80 91 96 00 	lds	r24, 0x0096
    1c08:	08 2f       	mov	r16, r24
    1c0a:	10 e0       	ldi	r17, 0x00	; 0
    1c0c:	c4 ea       	ldi	r28, 0xA4	; 164
    1c0e:	d1 e0       	ldi	r29, 0x01	; 1
    1c10:	a0 e0       	ldi	r26, 0x00	; 0
    1c12:	b0 e0       	ldi	r27, 0x00	; 0

		#if defined(ISB_OBJ_1BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
				uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_1Bit_Ch_Array[ObjIndex]);
    1c14:	fd 01       	movw	r30, r26
    1c16:	e4 5f       	subi	r30, 0xF4	; 244
    1c18:	fe 4f       	sbci	r31, 0xFE	; 254
    1c1a:	84 91       	lpm	r24, Z+
				uint16_t eepAddrCtrl = 0;
				uint16_t eepAddrTov = 0;
				uint16_t eepAddrValueInit = 0;
				switch (ObjIndex) {
    1c1c:	ea 2f       	mov	r30, r26
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	e8 33       	cpi	r30, 0x38	; 56
    1c22:	f1 05       	cpc	r31, r1
    1c24:	78 f4       	brcc	.+30     	; 0x1c44 <Isb_Obj_Init+0x48>
    1c26:	e6 5d       	subi	r30, 0xD6	; 214
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	ee 0f       	add	r30, r30
    1c2c:	ff 1f       	adc	r31, r31
    1c2e:	05 90       	lpm	r0, Z+
    1c30:	f4 91       	lpm	r31, Z+
    1c32:	e0 2d       	mov	r30, r0
    1c34:	09 94       	ijmp
    1c36:	65 e0       	ldi	r22, 0x05	; 5
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	46 e0       	ldi	r20, 0x06	; 6
    1c3c:	50 e0       	ldi	r21, 0x00	; 0
    1c3e:	27 e0       	ldi	r18, 0x07	; 7
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	87 c1       	rjmp	.+782    	; 0x1f52 <Isb_Obj_Init+0x356>
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	70 e0       	ldi	r23, 0x00	; 0
    1c48:	40 e0       	ldi	r20, 0x00	; 0
    1c4a:	50 e0       	ldi	r21, 0x00	; 0
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	80 c1       	rjmp	.+768    	; 0x1f52 <Isb_Obj_Init+0x356>
    1c52:	68 e0       	ldi	r22, 0x08	; 8
    1c54:	70 e0       	ldi	r23, 0x00	; 0
    1c56:	49 e0       	ldi	r20, 0x09	; 9
    1c58:	50 e0       	ldi	r21, 0x00	; 0
    1c5a:	2a e0       	ldi	r18, 0x0A	; 10
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	79 c1       	rjmp	.+754    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_1)
						case 1:
							eepAddrCtrl = ISB_OBJ_1BIT_1_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_1_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_1_EEADDR_VALUEINIT;
							break;
    1c60:	6b e0       	ldi	r22, 0x0B	; 11
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	4c e0       	ldi	r20, 0x0C	; 12
    1c66:	50 e0       	ldi	r21, 0x00	; 0
    1c68:	2d e0       	ldi	r18, 0x0D	; 13
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	72 c1       	rjmp	.+740    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_2)
						case 2:
							eepAddrCtrl = ISB_OBJ_1BIT_2_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_2_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_2_EEADDR_VALUEINIT;
							break;
    1c6e:	6a e1       	ldi	r22, 0x1A	; 26
    1c70:	70 e0       	ldi	r23, 0x00	; 0
    1c72:	4b e1       	ldi	r20, 0x1B	; 27
    1c74:	50 e0       	ldi	r21, 0x00	; 0
    1c76:	2c e1       	ldi	r18, 0x1C	; 28
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	6b c1       	rjmp	.+726    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_3)
						case 3:
							eepAddrCtrl = ISB_OBJ_1BIT_3_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_3_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_3_EEADDR_VALUEINIT;
							break;
    1c7c:	6d e1       	ldi	r22, 0x1D	; 29
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	4e e1       	ldi	r20, 0x1E	; 30
    1c82:	50 e0       	ldi	r21, 0x00	; 0
    1c84:	2f e1       	ldi	r18, 0x1F	; 31
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	64 c1       	rjmp	.+712    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_4)
						case 4:
							eepAddrCtrl = ISB_OBJ_1BIT_4_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_4_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_4_EEADDR_VALUEINIT;
							break;
    1c8a:	60 e2       	ldi	r22, 0x20	; 32
    1c8c:	70 e0       	ldi	r23, 0x00	; 0
    1c8e:	41 e2       	ldi	r20, 0x21	; 33
    1c90:	50 e0       	ldi	r21, 0x00	; 0
    1c92:	22 e2       	ldi	r18, 0x22	; 34
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	5d c1       	rjmp	.+698    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_5)
						case 5:
							eepAddrCtrl = ISB_OBJ_1BIT_5_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_5_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_5_EEADDR_VALUEINIT;
							break;
    1c98:	6f e2       	ldi	r22, 0x2F	; 47
    1c9a:	70 e0       	ldi	r23, 0x00	; 0
    1c9c:	40 e3       	ldi	r20, 0x30	; 48
    1c9e:	50 e0       	ldi	r21, 0x00	; 0
    1ca0:	21 e3       	ldi	r18, 0x31	; 49
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	56 c1       	rjmp	.+684    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_6)
						case 6:
							eepAddrCtrl = ISB_OBJ_1BIT_6_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_6_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_6_EEADDR_VALUEINIT;
							break;
    1ca6:	62 e3       	ldi	r22, 0x32	; 50
    1ca8:	70 e0       	ldi	r23, 0x00	; 0
    1caa:	43 e3       	ldi	r20, 0x33	; 51
    1cac:	50 e0       	ldi	r21, 0x00	; 0
    1cae:	24 e3       	ldi	r18, 0x34	; 52
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	4f c1       	rjmp	.+670    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_7)
						case 7:
							eepAddrCtrl = ISB_OBJ_1BIT_7_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_7_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_7_EEADDR_VALUEINIT;
							break;
    1cb4:	65 e3       	ldi	r22, 0x35	; 53
    1cb6:	70 e0       	ldi	r23, 0x00	; 0
    1cb8:	46 e3       	ldi	r20, 0x36	; 54
    1cba:	50 e0       	ldi	r21, 0x00	; 0
    1cbc:	27 e3       	ldi	r18, 0x37	; 55
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	48 c1       	rjmp	.+656    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_8)
						case 8:
							eepAddrCtrl = ISB_OBJ_1BIT_8_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_8_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_8_EEADDR_VALUEINIT;
							break;
    1cc2:	64 e4       	ldi	r22, 0x44	; 68
    1cc4:	70 e0       	ldi	r23, 0x00	; 0
    1cc6:	45 e4       	ldi	r20, 0x45	; 69
    1cc8:	50 e0       	ldi	r21, 0x00	; 0
    1cca:	26 e4       	ldi	r18, 0x46	; 70
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	41 c1       	rjmp	.+642    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_9)
						case 9:
							eepAddrCtrl = ISB_OBJ_1BIT_9_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_9_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_9_EEADDR_VALUEINIT;
							break;
    1cd0:	67 e4       	ldi	r22, 0x47	; 71
    1cd2:	70 e0       	ldi	r23, 0x00	; 0
    1cd4:	48 e4       	ldi	r20, 0x48	; 72
    1cd6:	50 e0       	ldi	r21, 0x00	; 0
    1cd8:	29 e4       	ldi	r18, 0x49	; 73
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	3a c1       	rjmp	.+628    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_10)
						case 10:
							eepAddrCtrl = ISB_OBJ_1BIT_10_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_10_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_10_EEADDR_VALUEINIT;
							break;
    1cde:	6a e4       	ldi	r22, 0x4A	; 74
    1ce0:	70 e0       	ldi	r23, 0x00	; 0
    1ce2:	4b e4       	ldi	r20, 0x4B	; 75
    1ce4:	50 e0       	ldi	r21, 0x00	; 0
    1ce6:	2c e4       	ldi	r18, 0x4C	; 76
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	33 c1       	rjmp	.+614    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_11)
						case 11:
							eepAddrCtrl = ISB_OBJ_1BIT_11_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_11_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_11_EEADDR_VALUEINIT;
							break;
    1cec:	69 e5       	ldi	r22, 0x59	; 89
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	4a e5       	ldi	r20, 0x5A	; 90
    1cf2:	50 e0       	ldi	r21, 0x00	; 0
    1cf4:	2b e5       	ldi	r18, 0x5B	; 91
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	2c c1       	rjmp	.+600    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_12)
						case 12:
							eepAddrCtrl = ISB_OBJ_1BIT_12_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_12_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_12_EEADDR_VALUEINIT;
							break;
    1cfa:	6c e5       	ldi	r22, 0x5C	; 92
    1cfc:	70 e0       	ldi	r23, 0x00	; 0
    1cfe:	4d e5       	ldi	r20, 0x5D	; 93
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	2e e5       	ldi	r18, 0x5E	; 94
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	25 c1       	rjmp	.+586    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_13)
						case 13:
							eepAddrCtrl = ISB_OBJ_1BIT_13_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_13_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_13_EEADDR_VALUEINIT;
							break;
    1d08:	6f e5       	ldi	r22, 0x5F	; 95
    1d0a:	70 e0       	ldi	r23, 0x00	; 0
    1d0c:	40 e6       	ldi	r20, 0x60	; 96
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
    1d10:	21 e6       	ldi	r18, 0x61	; 97
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	1e c1       	rjmp	.+572    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_14)
						case 14:
							eepAddrCtrl = ISB_OBJ_1BIT_14_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_14_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_14_EEADDR_VALUEINIT;
							break;
    1d16:	6e e6       	ldi	r22, 0x6E	; 110
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	4f e6       	ldi	r20, 0x6F	; 111
    1d1c:	50 e0       	ldi	r21, 0x00	; 0
    1d1e:	20 e7       	ldi	r18, 0x70	; 112
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	17 c1       	rjmp	.+558    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_15)
						case 15:
							eepAddrCtrl = ISB_OBJ_1BIT_15_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_15_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_15_EEADDR_VALUEINIT;
							break;
    1d24:	61 e7       	ldi	r22, 0x71	; 113
    1d26:	70 e0       	ldi	r23, 0x00	; 0
    1d28:	42 e7       	ldi	r20, 0x72	; 114
    1d2a:	50 e0       	ldi	r21, 0x00	; 0
    1d2c:	23 e7       	ldi	r18, 0x73	; 115
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	10 c1       	rjmp	.+544    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_16)
						case 16:
							eepAddrCtrl = ISB_OBJ_1BIT_16_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_16_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_16_EEADDR_VALUEINIT;
							break;
    1d32:	64 e7       	ldi	r22, 0x74	; 116
    1d34:	70 e0       	ldi	r23, 0x00	; 0
    1d36:	45 e7       	ldi	r20, 0x75	; 117
    1d38:	50 e0       	ldi	r21, 0x00	; 0
    1d3a:	26 e7       	ldi	r18, 0x76	; 118
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	09 c1       	rjmp	.+530    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_17)
						case 17:
							eepAddrCtrl = ISB_OBJ_1BIT_17_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_17_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_17_EEADDR_VALUEINIT;
							break;
    1d40:	63 e8       	ldi	r22, 0x83	; 131
    1d42:	70 e0       	ldi	r23, 0x00	; 0
    1d44:	44 e8       	ldi	r20, 0x84	; 132
    1d46:	50 e0       	ldi	r21, 0x00	; 0
    1d48:	25 e8       	ldi	r18, 0x85	; 133
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	02 c1       	rjmp	.+516    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_18)
						case 18:
							eepAddrCtrl = ISB_OBJ_1BIT_18_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_18_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_18_EEADDR_VALUEINIT;
							break;
    1d4e:	66 e8       	ldi	r22, 0x86	; 134
    1d50:	70 e0       	ldi	r23, 0x00	; 0
    1d52:	47 e8       	ldi	r20, 0x87	; 135
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	28 e8       	ldi	r18, 0x88	; 136
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	fb c0       	rjmp	.+502    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_19)
						case 19:
							eepAddrCtrl = ISB_OBJ_1BIT_19_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_19_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_19_EEADDR_VALUEINIT;
							break;
    1d5c:	69 e8       	ldi	r22, 0x89	; 137
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	4a e8       	ldi	r20, 0x8A	; 138
    1d62:	50 e0       	ldi	r21, 0x00	; 0
    1d64:	2b e8       	ldi	r18, 0x8B	; 139
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	f4 c0       	rjmp	.+488    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_20)
						case 20:
							eepAddrCtrl = ISB_OBJ_1BIT_20_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_20_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_20_EEADDR_VALUEINIT;
							break;
    1d6a:	68 e9       	ldi	r22, 0x98	; 152
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	49 e9       	ldi	r20, 0x99	; 153
    1d70:	50 e0       	ldi	r21, 0x00	; 0
    1d72:	2a e9       	ldi	r18, 0x9A	; 154
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	ed c0       	rjmp	.+474    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_21)
						case 21:
							eepAddrCtrl = ISB_OBJ_1BIT_21_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_21_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_21_EEADDR_VALUEINIT;
							break;
    1d78:	6b e9       	ldi	r22, 0x9B	; 155
    1d7a:	70 e0       	ldi	r23, 0x00	; 0
    1d7c:	4c e9       	ldi	r20, 0x9C	; 156
    1d7e:	50 e0       	ldi	r21, 0x00	; 0
    1d80:	2d e9       	ldi	r18, 0x9D	; 157
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	e6 c0       	rjmp	.+460    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_22)
						case 22:
							eepAddrCtrl = ISB_OBJ_1BIT_22_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_22_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_22_EEADDR_VALUEINIT;
							break;
    1d86:	6e e9       	ldi	r22, 0x9E	; 158
    1d88:	70 e0       	ldi	r23, 0x00	; 0
    1d8a:	4f e9       	ldi	r20, 0x9F	; 159
    1d8c:	50 e0       	ldi	r21, 0x00	; 0
    1d8e:	20 ea       	ldi	r18, 0xA0	; 160
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	df c0       	rjmp	.+446    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_23)
						case 23:
							eepAddrCtrl = ISB_OBJ_1BIT_23_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_23_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_23_EEADDR_VALUEINIT;
							break;
    1d94:	63 eb       	ldi	r22, 0xB3	; 179
    1d96:	70 e0       	ldi	r23, 0x00	; 0
    1d98:	44 eb       	ldi	r20, 0xB4	; 180
    1d9a:	50 e0       	ldi	r21, 0x00	; 0
    1d9c:	25 eb       	ldi	r18, 0xB5	; 181
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	d8 c0       	rjmp	.+432    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_24)
						case 24:
							eepAddrCtrl = ISB_OBJ_1BIT_24_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_24_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_24_EEADDR_VALUEINIT;
							break;
    1da2:	66 eb       	ldi	r22, 0xB6	; 182
    1da4:	70 e0       	ldi	r23, 0x00	; 0
    1da6:	47 eb       	ldi	r20, 0xB7	; 183
    1da8:	50 e0       	ldi	r21, 0x00	; 0
    1daa:	28 eb       	ldi	r18, 0xB8	; 184
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	d1 c0       	rjmp	.+418    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_25)
						case 25:
							eepAddrCtrl = ISB_OBJ_1BIT_25_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_25_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_25_EEADDR_VALUEINIT;
							break;
    1db0:	69 eb       	ldi	r22, 0xB9	; 185
    1db2:	70 e0       	ldi	r23, 0x00	; 0
    1db4:	4a eb       	ldi	r20, 0xBA	; 186
    1db6:	50 e0       	ldi	r21, 0x00	; 0
    1db8:	2b eb       	ldi	r18, 0xBB	; 187
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	ca c0       	rjmp	.+404    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_26)
						case 26:
							eepAddrCtrl = ISB_OBJ_1BIT_26_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_26_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_26_EEADDR_VALUEINIT;
							break;
    1dbe:	6c eb       	ldi	r22, 0xBC	; 188
    1dc0:	70 e0       	ldi	r23, 0x00	; 0
    1dc2:	4d eb       	ldi	r20, 0xBD	; 189
    1dc4:	50 e0       	ldi	r21, 0x00	; 0
    1dc6:	2e eb       	ldi	r18, 0xBE	; 190
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	c3 c0       	rjmp	.+390    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_27)
						case 27:
							eepAddrCtrl = ISB_OBJ_1BIT_27_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_27_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_27_EEADDR_VALUEINIT;
							break;
    1dcc:	6b ec       	ldi	r22, 0xCB	; 203
    1dce:	70 e0       	ldi	r23, 0x00	; 0
    1dd0:	4c ec       	ldi	r20, 0xCC	; 204
    1dd2:	50 e0       	ldi	r21, 0x00	; 0
    1dd4:	2d ec       	ldi	r18, 0xCD	; 205
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	bc c0       	rjmp	.+376    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_28)
						case 28:
							eepAddrCtrl = ISB_OBJ_1BIT_28_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_28_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_28_EEADDR_VALUEINIT;
							break;
    1dda:	6e ec       	ldi	r22, 0xCE	; 206
    1ddc:	70 e0       	ldi	r23, 0x00	; 0
    1dde:	4f ec       	ldi	r20, 0xCF	; 207
    1de0:	50 e0       	ldi	r21, 0x00	; 0
    1de2:	20 ed       	ldi	r18, 0xD0	; 208
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	b5 c0       	rjmp	.+362    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_29)
						case 29:
							eepAddrCtrl = ISB_OBJ_1BIT_29_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_29_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_29_EEADDR_VALUEINIT;
							break;
    1de8:	61 ed       	ldi	r22, 0xD1	; 209
    1dea:	70 e0       	ldi	r23, 0x00	; 0
    1dec:	42 ed       	ldi	r20, 0xD2	; 210
    1dee:	50 e0       	ldi	r21, 0x00	; 0
    1df0:	23 ed       	ldi	r18, 0xD3	; 211
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	ae c0       	rjmp	.+348    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_30)
						case 30:
							eepAddrCtrl = ISB_OBJ_1BIT_30_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_30_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_30_EEADDR_VALUEINIT;
							break;
    1df6:	64 ed       	ldi	r22, 0xD4	; 212
    1df8:	70 e0       	ldi	r23, 0x00	; 0
    1dfa:	45 ed       	ldi	r20, 0xD5	; 213
    1dfc:	50 e0       	ldi	r21, 0x00	; 0
    1dfe:	26 ed       	ldi	r18, 0xD6	; 214
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	a7 c0       	rjmp	.+334    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_31)
						case 31:
							eepAddrCtrl = ISB_OBJ_1BIT_31_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_31_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_31_EEADDR_VALUEINIT;
							break;
    1e04:	63 ee       	ldi	r22, 0xE3	; 227
    1e06:	70 e0       	ldi	r23, 0x00	; 0
    1e08:	44 ee       	ldi	r20, 0xE4	; 228
    1e0a:	50 e0       	ldi	r21, 0x00	; 0
    1e0c:	25 ee       	ldi	r18, 0xE5	; 229
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	a0 c0       	rjmp	.+320    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_32)
						case 32:
							eepAddrCtrl = ISB_OBJ_1BIT_32_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_32_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_32_EEADDR_VALUEINIT;
							break;
    1e12:	66 ee       	ldi	r22, 0xE6	; 230
    1e14:	70 e0       	ldi	r23, 0x00	; 0
    1e16:	47 ee       	ldi	r20, 0xE7	; 231
    1e18:	50 e0       	ldi	r21, 0x00	; 0
    1e1a:	28 ee       	ldi	r18, 0xE8	; 232
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	99 c0       	rjmp	.+306    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_33)
						case 33:
							eepAddrCtrl = ISB_OBJ_1BIT_33_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_33_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_33_EEADDR_VALUEINIT;
							break;
    1e20:	69 ee       	ldi	r22, 0xE9	; 233
    1e22:	70 e0       	ldi	r23, 0x00	; 0
    1e24:	4a ee       	ldi	r20, 0xEA	; 234
    1e26:	50 e0       	ldi	r21, 0x00	; 0
    1e28:	2b ee       	ldi	r18, 0xEB	; 235
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	92 c0       	rjmp	.+292    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_34)
						case 34:
							eepAddrCtrl = ISB_OBJ_1BIT_34_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_34_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_34_EEADDR_VALUEINIT;
							break;
    1e2e:	6c ee       	ldi	r22, 0xEC	; 236
    1e30:	70 e0       	ldi	r23, 0x00	; 0
    1e32:	4d ee       	ldi	r20, 0xED	; 237
    1e34:	50 e0       	ldi	r21, 0x00	; 0
    1e36:	2e ee       	ldi	r18, 0xEE	; 238
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	8b c0       	rjmp	.+278    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_35)
						case 35:
							eepAddrCtrl = ISB_OBJ_1BIT_35_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_35_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_35_EEADDR_VALUEINIT;
							break;
    1e3c:	6b ef       	ldi	r22, 0xFB	; 251
    1e3e:	70 e0       	ldi	r23, 0x00	; 0
    1e40:	4c ef       	ldi	r20, 0xFC	; 252
    1e42:	50 e0       	ldi	r21, 0x00	; 0
    1e44:	2d ef       	ldi	r18, 0xFD	; 253
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	84 c0       	rjmp	.+264    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_36)
						case 36:
							eepAddrCtrl = ISB_OBJ_1BIT_36_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_36_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_36_EEADDR_VALUEINIT;
							break;
    1e4a:	6e ef       	ldi	r22, 0xFE	; 254
    1e4c:	70 e0       	ldi	r23, 0x00	; 0
    1e4e:	4f ef       	ldi	r20, 0xFF	; 255
    1e50:	50 e0       	ldi	r21, 0x00	; 0
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	31 e0       	ldi	r19, 0x01	; 1
    1e56:	7d c0       	rjmp	.+250    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_37)
						case 37:
							eepAddrCtrl = ISB_OBJ_1BIT_37_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_37_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_37_EEADDR_VALUEINIT;
							break;
    1e58:	61 e0       	ldi	r22, 0x01	; 1
    1e5a:	71 e0       	ldi	r23, 0x01	; 1
    1e5c:	42 e0       	ldi	r20, 0x02	; 2
    1e5e:	51 e0       	ldi	r21, 0x01	; 1
    1e60:	23 e0       	ldi	r18, 0x03	; 3
    1e62:	31 e0       	ldi	r19, 0x01	; 1
    1e64:	76 c0       	rjmp	.+236    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_38)
						case 38:
							eepAddrCtrl = ISB_OBJ_1BIT_38_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_38_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_38_EEADDR_VALUEINIT;
							break;
    1e66:	64 e0       	ldi	r22, 0x04	; 4
    1e68:	71 e0       	ldi	r23, 0x01	; 1
    1e6a:	45 e0       	ldi	r20, 0x05	; 5
    1e6c:	51 e0       	ldi	r21, 0x01	; 1
    1e6e:	26 e0       	ldi	r18, 0x06	; 6
    1e70:	31 e0       	ldi	r19, 0x01	; 1
    1e72:	6f c0       	rjmp	.+222    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_39)
						case 39:
							eepAddrCtrl = ISB_OBJ_1BIT_39_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_39_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_39_EEADDR_VALUEINIT;
							break;
    1e74:	63 e1       	ldi	r22, 0x13	; 19
    1e76:	71 e0       	ldi	r23, 0x01	; 1
    1e78:	44 e1       	ldi	r20, 0x14	; 20
    1e7a:	51 e0       	ldi	r21, 0x01	; 1
    1e7c:	25 e1       	ldi	r18, 0x15	; 21
    1e7e:	31 e0       	ldi	r19, 0x01	; 1
    1e80:	68 c0       	rjmp	.+208    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_40)
						case 40:
							eepAddrCtrl = ISB_OBJ_1BIT_40_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_40_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_40_EEADDR_VALUEINIT;
							break;
    1e82:	66 e1       	ldi	r22, 0x16	; 22
    1e84:	71 e0       	ldi	r23, 0x01	; 1
    1e86:	47 e1       	ldi	r20, 0x17	; 23
    1e88:	51 e0       	ldi	r21, 0x01	; 1
    1e8a:	28 e1       	ldi	r18, 0x18	; 24
    1e8c:	31 e0       	ldi	r19, 0x01	; 1
    1e8e:	61 c0       	rjmp	.+194    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_41)
						case 41:
							eepAddrCtrl = ISB_OBJ_1BIT_41_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_41_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_41_EEADDR_VALUEINIT;
							break;
    1e90:	69 e1       	ldi	r22, 0x19	; 25
    1e92:	71 e0       	ldi	r23, 0x01	; 1
    1e94:	4a e1       	ldi	r20, 0x1A	; 26
    1e96:	51 e0       	ldi	r21, 0x01	; 1
    1e98:	2b e1       	ldi	r18, 0x1B	; 27
    1e9a:	31 e0       	ldi	r19, 0x01	; 1
    1e9c:	5a c0       	rjmp	.+180    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_42)
						case 42:
							eepAddrCtrl = ISB_OBJ_1BIT_42_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_42_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_42_EEADDR_VALUEINIT;
							break;
    1e9e:	6c e1       	ldi	r22, 0x1C	; 28
    1ea0:	71 e0       	ldi	r23, 0x01	; 1
    1ea2:	4d e1       	ldi	r20, 0x1D	; 29
    1ea4:	51 e0       	ldi	r21, 0x01	; 1
    1ea6:	2e e1       	ldi	r18, 0x1E	; 30
    1ea8:	31 e0       	ldi	r19, 0x01	; 1
    1eaa:	53 c0       	rjmp	.+166    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_43)
						case 43:
							eepAddrCtrl = ISB_OBJ_1BIT_43_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_43_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_43_EEADDR_VALUEINIT;
							break;
    1eac:	6b e2       	ldi	r22, 0x2B	; 43
    1eae:	71 e0       	ldi	r23, 0x01	; 1
    1eb0:	4c e2       	ldi	r20, 0x2C	; 44
    1eb2:	51 e0       	ldi	r21, 0x01	; 1
    1eb4:	2d e2       	ldi	r18, 0x2D	; 45
    1eb6:	31 e0       	ldi	r19, 0x01	; 1
    1eb8:	4c c0       	rjmp	.+152    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_44)
						case 44:
							eepAddrCtrl = ISB_OBJ_1BIT_44_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_44_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_44_EEADDR_VALUEINIT;
							break;
    1eba:	6e e2       	ldi	r22, 0x2E	; 46
    1ebc:	71 e0       	ldi	r23, 0x01	; 1
    1ebe:	4f e2       	ldi	r20, 0x2F	; 47
    1ec0:	51 e0       	ldi	r21, 0x01	; 1
    1ec2:	20 e3       	ldi	r18, 0x30	; 48
    1ec4:	31 e0       	ldi	r19, 0x01	; 1
    1ec6:	45 c0       	rjmp	.+138    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_45)
						case 45:
							eepAddrCtrl = ISB_OBJ_1BIT_45_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_45_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_45_EEADDR_VALUEINIT;
							break;
    1ec8:	61 e3       	ldi	r22, 0x31	; 49
    1eca:	71 e0       	ldi	r23, 0x01	; 1
    1ecc:	42 e3       	ldi	r20, 0x32	; 50
    1ece:	51 e0       	ldi	r21, 0x01	; 1
    1ed0:	23 e3       	ldi	r18, 0x33	; 51
    1ed2:	31 e0       	ldi	r19, 0x01	; 1
    1ed4:	3e c0       	rjmp	.+124    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_46)
						case 46:
							eepAddrCtrl = ISB_OBJ_1BIT_46_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_46_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_46_EEADDR_VALUEINIT;
							break;
    1ed6:	64 e3       	ldi	r22, 0x34	; 52
    1ed8:	71 e0       	ldi	r23, 0x01	; 1
    1eda:	45 e3       	ldi	r20, 0x35	; 53
    1edc:	51 e0       	ldi	r21, 0x01	; 1
    1ede:	26 e3       	ldi	r18, 0x36	; 54
    1ee0:	31 e0       	ldi	r19, 0x01	; 1
    1ee2:	37 c0       	rjmp	.+110    	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_47)
						case 47:
							eepAddrCtrl = ISB_OBJ_1BIT_47_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_47_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_47_EEADDR_VALUEINIT;
							break;
    1ee4:	63 e4       	ldi	r22, 0x43	; 67
    1ee6:	71 e0       	ldi	r23, 0x01	; 1
    1ee8:	44 e4       	ldi	r20, 0x44	; 68
    1eea:	51 e0       	ldi	r21, 0x01	; 1
    1eec:	25 e4       	ldi	r18, 0x45	; 69
    1eee:	31 e0       	ldi	r19, 0x01	; 1
    1ef0:	30 c0       	rjmp	.+96     	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_48)
						case 48:
							eepAddrCtrl = ISB_OBJ_1BIT_48_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_48_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_48_EEADDR_VALUEINIT;
							break;
    1ef2:	66 e4       	ldi	r22, 0x46	; 70
    1ef4:	71 e0       	ldi	r23, 0x01	; 1
    1ef6:	47 e4       	ldi	r20, 0x47	; 71
    1ef8:	51 e0       	ldi	r21, 0x01	; 1
    1efa:	28 e4       	ldi	r18, 0x48	; 72
    1efc:	31 e0       	ldi	r19, 0x01	; 1
    1efe:	29 c0       	rjmp	.+82     	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_49)
						case 49:
							eepAddrCtrl = ISB_OBJ_1BIT_49_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_49_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_49_EEADDR_VALUEINIT;
							break;
    1f00:	69 e4       	ldi	r22, 0x49	; 73
    1f02:	71 e0       	ldi	r23, 0x01	; 1
    1f04:	4a e4       	ldi	r20, 0x4A	; 74
    1f06:	51 e0       	ldi	r21, 0x01	; 1
    1f08:	2b e4       	ldi	r18, 0x4B	; 75
    1f0a:	31 e0       	ldi	r19, 0x01	; 1
    1f0c:	22 c0       	rjmp	.+68     	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_50)
						case 50:
							eepAddrCtrl = ISB_OBJ_1BIT_50_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_50_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_50_EEADDR_VALUEINIT;
							break;
    1f0e:	6c e4       	ldi	r22, 0x4C	; 76
    1f10:	71 e0       	ldi	r23, 0x01	; 1
    1f12:	4d e4       	ldi	r20, 0x4D	; 77
    1f14:	51 e0       	ldi	r21, 0x01	; 1
    1f16:	2e e4       	ldi	r18, 0x4E	; 78
    1f18:	31 e0       	ldi	r19, 0x01	; 1
    1f1a:	1b c0       	rjmp	.+54     	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_51)
						case 51:
							eepAddrCtrl = ISB_OBJ_1BIT_51_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_51_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_51_EEADDR_VALUEINIT;
							break;
    1f1c:	6b e5       	ldi	r22, 0x5B	; 91
    1f1e:	71 e0       	ldi	r23, 0x01	; 1
    1f20:	4c e5       	ldi	r20, 0x5C	; 92
    1f22:	51 e0       	ldi	r21, 0x01	; 1
    1f24:	2d e5       	ldi	r18, 0x5D	; 93
    1f26:	31 e0       	ldi	r19, 0x01	; 1
    1f28:	14 c0       	rjmp	.+40     	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_52)
						case 52:
							eepAddrCtrl = ISB_OBJ_1BIT_52_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_52_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_52_EEADDR_VALUEINIT;
							break;
    1f2a:	6e e5       	ldi	r22, 0x5E	; 94
    1f2c:	71 e0       	ldi	r23, 0x01	; 1
    1f2e:	4f e5       	ldi	r20, 0x5F	; 95
    1f30:	51 e0       	ldi	r21, 0x01	; 1
    1f32:	20 e6       	ldi	r18, 0x60	; 96
    1f34:	31 e0       	ldi	r19, 0x01	; 1
    1f36:	0d c0       	rjmp	.+26     	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_53)
						case 53:
							eepAddrCtrl = ISB_OBJ_1BIT_53_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_53_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_53_EEADDR_VALUEINIT;
							break;
    1f38:	61 e6       	ldi	r22, 0x61	; 97
    1f3a:	71 e0       	ldi	r23, 0x01	; 1
    1f3c:	42 e6       	ldi	r20, 0x62	; 98
    1f3e:	51 e0       	ldi	r21, 0x01	; 1
    1f40:	23 e6       	ldi	r18, 0x63	; 99
    1f42:	31 e0       	ldi	r19, 0x01	; 1
    1f44:	06 c0       	rjmp	.+12     	; 0x1f52 <Isb_Obj_Init+0x356>
					#if defined(ISB_OBJ_1BIT_54)
						case 54:
							eepAddrCtrl = ISB_OBJ_1BIT_54_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_54_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_54_EEADDR_VALUEINIT;
							break;
    1f46:	64 e6       	ldi	r22, 0x64	; 100
    1f48:	71 e0       	ldi	r23, 0x01	; 1
    1f4a:	45 e6       	ldi	r20, 0x65	; 101
    1f4c:	51 e0       	ldi	r21, 0x01	; 1
    1f4e:	26 e6       	ldi	r18, 0x66	; 102
    1f50:	31 e0       	ldi	r19, 0x01	; 1
							eepAddrTov = ISB_OBJ_1BIT_63_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_63_EEADDR_VALUEINIT;
							break;
					#endif /* ISB_OBJ_1BIT_63 */
				}
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    1f52:	e8 2f       	mov	r30, r24
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	ee 0f       	add	r30, r30
    1f58:	ff 1f       	adc	r31, r31
    1f5a:	ec 5a       	subi	r30, 0xAC	; 172
    1f5c:	fc 4f       	sbci	r31, 0xFC	; 252
    1f5e:	80 81       	ld	r24, Z
    1f60:	80 ff       	sbrs	r24, 0
    1f62:	26 c0       	rjmp	.+76     	; 0x1fb0 <Isb_Obj_Init+0x3b4>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1f64:	e1 99       	sbic	0x1c, 1	; 28
    1f66:	fe cf       	rjmp	.-4      	; 0x1f64 <Isb_Obj_Init+0x368>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1f68:	60 0f       	add	r22, r16
    1f6a:	71 1f       	adc	r23, r17
    1f6c:	7f bb       	out	0x1f, r23	; 31
    1f6e:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
    1f70:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1f72:	8d b3       	in	r24, 0x1d	; 29
					Isb_Obj_1Bit[ObjIndex].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddrCtrl);
    1f74:	88 83       	st	Y, r24
					if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    1f76:	fd 01       	movw	r30, r26
    1f78:	ee 0f       	add	r30, r30
    1f7a:	ff 1f       	adc	r31, r31
    1f7c:	ee 0f       	add	r30, r30
    1f7e:	ff 1f       	adc	r31, r31
    1f80:	ec 55       	subi	r30, 0x5C	; 92
    1f82:	fe 4f       	sbci	r31, 0xFE	; 254
    1f84:	80 81       	ld	r24, Z
    1f86:	80 ff       	sbrs	r24, 0
    1f88:	13 c0       	rjmp	.+38     	; 0x1fb0 <Isb_Obj_Init+0x3b4>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1f8a:	e1 99       	sbic	0x1c, 1	; 28
    1f8c:	fe cf       	rjmp	.-4      	; 0x1f8a <Isb_Obj_Init+0x38e>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1f8e:	40 0f       	add	r20, r16
    1f90:	51 1f       	adc	r21, r17
    1f92:	5f bb       	out	0x1f, r21	; 31
    1f94:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
    1f96:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1f98:	8d b3       	in	r24, 0x1d	; 29
						Isb_Obj_1Bit[ObjIndex].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddrTov);
    1f9a:	89 83       	std	Y+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1f9c:	e1 99       	sbic	0x1c, 1	; 28
    1f9e:	fe cf       	rjmp	.-4      	; 0x1f9c <Isb_Obj_Init+0x3a0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1fa0:	20 0f       	add	r18, r16
    1fa2:	31 1f       	adc	r19, r17
    1fa4:	3f bb       	out	0x1f, r19	; 31
    1fa6:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    1fa8:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1faa:	8d b3       	in	r24, 0x1d	; 29
						Isb_Obj_1Bit[ObjIndex].Value = lib_eep_fw_read_byte((uint8_t *)eepAddrValueInit);
    1fac:	8a 83       	std	Y+2, r24	; 0x02
						Isb_Obj_1Bit[ObjIndex].IsChanged = FALSE;
    1fae:	1b 82       	std	Y+3, r1	; 0x03
    1fb0:	11 96       	adiw	r26, 0x01	; 1
    1fb2:	24 96       	adiw	r28, 0x04	; 4


	void Isb_Obj_Init(void) {

		#if defined(ISB_OBJ_1BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
    1fb4:	a8 33       	cpi	r26, 0x38	; 56
    1fb6:	b1 05       	cpc	r27, r1
    1fb8:	09 f0       	breq	.+2      	; 0x1fbc <Isb_Obj_Init+0x3c0>
    1fba:	2c ce       	rjmp	.-936    	; 0x1c14 <Isb_Obj_Init+0x18>
    1fbc:	cb ee       	ldi	r28, 0xEB	; 235
    1fbe:	d0 e0       	ldi	r29, 0x00	; 0
    1fc0:	a0 e0       	ldi	r26, 0x00	; 0
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
			}
		#endif /* ISB_OBJ_1BIT_MAX */

		#if defined(ISB_OBJ_4BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
				uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_4Bit_Ch_Array[ObjIndex]);
    1fc4:	fd 01       	movw	r30, r26
    1fc6:	ec 5b       	subi	r30, 0xBC	; 188
    1fc8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fca:	e4 91       	lpm	r30, Z+
				uint16_t eepAddrCtrl = 0;
				uint16_t eepAddrTov = 0;
				uint16_t eepAddrValueInit = 0;
				switch (ObjIndex) {
    1fcc:	a3 30       	cpi	r26, 0x03	; 3
    1fce:	61 f1       	breq	.+88     	; 0x2028 <Isb_Obj_Init+0x42c>
    1fd0:	a4 30       	cpi	r26, 0x04	; 4
    1fd2:	28 f4       	brcc	.+10     	; 0x1fde <Isb_Obj_Init+0x3e2>
    1fd4:	a1 30       	cpi	r26, 0x01	; 1
    1fd6:	d1 f0       	breq	.+52     	; 0x200c <Isb_Obj_Init+0x410>
    1fd8:	a2 30       	cpi	r26, 0x02	; 2
    1fda:	f8 f4       	brcc	.+62     	; 0x201a <Isb_Obj_Init+0x41e>
    1fdc:	09 c0       	rjmp	.+18     	; 0x1ff0 <Isb_Obj_Init+0x3f4>
    1fde:	a5 30       	cpi	r26, 0x05	; 5
    1fe0:	89 f1       	breq	.+98     	; 0x2044 <Isb_Obj_Init+0x448>
    1fe2:	a5 30       	cpi	r26, 0x05	; 5
    1fe4:	40 f1       	brcs	.+80     	; 0x2036 <Isb_Obj_Init+0x43a>
    1fe6:	a6 30       	cpi	r26, 0x06	; 6
    1fe8:	a1 f1       	breq	.+104    	; 0x2052 <Isb_Obj_Init+0x456>
    1fea:	a7 30       	cpi	r26, 0x07	; 7
    1fec:	41 f4       	brne	.+16     	; 0x1ffe <Isb_Obj_Init+0x402>
    1fee:	38 c0       	rjmp	.+112    	; 0x2060 <Isb_Obj_Init+0x464>
    1ff0:	4e e0       	ldi	r20, 0x0E	; 14
    1ff2:	50 e0       	ldi	r21, 0x00	; 0
    1ff4:	6f e0       	ldi	r22, 0x0F	; 15
    1ff6:	70 e0       	ldi	r23, 0x00	; 0
    1ff8:	20 e1       	ldi	r18, 0x10	; 16
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	37 c0       	rjmp	.+110    	; 0x206c <Isb_Obj_Init+0x470>
    1ffe:	40 e0       	ldi	r20, 0x00	; 0
    2000:	50 e0       	ldi	r21, 0x00	; 0
    2002:	60 e0       	ldi	r22, 0x00	; 0
    2004:	70 e0       	ldi	r23, 0x00	; 0
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	30 c0       	rjmp	.+96     	; 0x206c <Isb_Obj_Init+0x470>
    200c:	43 e2       	ldi	r20, 0x23	; 35
    200e:	50 e0       	ldi	r21, 0x00	; 0
    2010:	64 e2       	ldi	r22, 0x24	; 36
    2012:	70 e0       	ldi	r23, 0x00	; 0
    2014:	25 e2       	ldi	r18, 0x25	; 37
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	29 c0       	rjmp	.+82     	; 0x206c <Isb_Obj_Init+0x470>
					#if defined(ISB_OBJ_4BIT_1)
						case 1:
							eepAddrCtrl = ISB_OBJ_4BIT_1_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_4BIT_1_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_1_EEADDR_VALUEINIT;
							break;
    201a:	48 e3       	ldi	r20, 0x38	; 56
    201c:	50 e0       	ldi	r21, 0x00	; 0
    201e:	69 e3       	ldi	r22, 0x39	; 57
    2020:	70 e0       	ldi	r23, 0x00	; 0
    2022:	2a e3       	ldi	r18, 0x3A	; 58
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	22 c0       	rjmp	.+68     	; 0x206c <Isb_Obj_Init+0x470>
					#if defined(ISB_OBJ_4BIT_2)
						case 2:
							eepAddrCtrl = ISB_OBJ_4BIT_2_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_4BIT_2_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_2_EEADDR_VALUEINIT;
							break;
    2028:	4d e4       	ldi	r20, 0x4D	; 77
    202a:	50 e0       	ldi	r21, 0x00	; 0
    202c:	6e e4       	ldi	r22, 0x4E	; 78
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	2f e4       	ldi	r18, 0x4F	; 79
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	1b c0       	rjmp	.+54     	; 0x206c <Isb_Obj_Init+0x470>
					#if defined(ISB_OBJ_4BIT_3)
						case 3:
							eepAddrCtrl = ISB_OBJ_4BIT_3_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_4BIT_3_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_3_EEADDR_VALUEINIT;
							break;
    2036:	42 e6       	ldi	r20, 0x62	; 98
    2038:	50 e0       	ldi	r21, 0x00	; 0
    203a:	63 e6       	ldi	r22, 0x63	; 99
    203c:	70 e0       	ldi	r23, 0x00	; 0
    203e:	24 e6       	ldi	r18, 0x64	; 100
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	14 c0       	rjmp	.+40     	; 0x206c <Isb_Obj_Init+0x470>
					#if defined(ISB_OBJ_4BIT_4)
						case 4:
							eepAddrCtrl = ISB_OBJ_4BIT_4_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_4BIT_4_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_4_EEADDR_VALUEINIT;
							break;
    2044:	47 e7       	ldi	r20, 0x77	; 119
    2046:	50 e0       	ldi	r21, 0x00	; 0
    2048:	68 e7       	ldi	r22, 0x78	; 120
    204a:	70 e0       	ldi	r23, 0x00	; 0
    204c:	29 e7       	ldi	r18, 0x79	; 121
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	0d c0       	rjmp	.+26     	; 0x206c <Isb_Obj_Init+0x470>
					#if defined(ISB_OBJ_4BIT_5)
						case 5:
							eepAddrCtrl = ISB_OBJ_4BIT_5_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_4BIT_5_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_5_EEADDR_VALUEINIT;
							break;
    2052:	4c e8       	ldi	r20, 0x8C	; 140
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	6d e8       	ldi	r22, 0x8D	; 141
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	2e e8       	ldi	r18, 0x8E	; 142
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	06 c0       	rjmp	.+12     	; 0x206c <Isb_Obj_Init+0x470>
					#if defined(ISB_OBJ_4BIT_6)
						case 6:
							eepAddrCtrl = ISB_OBJ_4BIT_6_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_4BIT_6_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_6_EEADDR_VALUEINIT;
							break;
    2060:	41 ea       	ldi	r20, 0xA1	; 161
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	62 ea       	ldi	r22, 0xA2	; 162
    2066:	70 e0       	ldi	r23, 0x00	; 0
    2068:	23 ea       	ldi	r18, 0xA3	; 163
    206a:	30 e0       	ldi	r19, 0x00	; 0
							eepAddrTov = ISB_OBJ_4BIT_31_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_31_EEADDR_VALUEINIT;
							break;
					#endif /* ISB_OBJ_4BIT_31 */
				}
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	ee 0f       	add	r30, r30
    2070:	ff 1f       	adc	r31, r31
    2072:	ec 5a       	subi	r30, 0xAC	; 172
    2074:	fc 4f       	sbci	r31, 0xFC	; 252
    2076:	80 81       	ld	r24, Z
    2078:	80 ff       	sbrs	r24, 0
    207a:	26 c0       	rjmp	.+76     	; 0x20c8 <Isb_Obj_Init+0x4cc>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    207c:	e1 99       	sbic	0x1c, 1	; 28
    207e:	fe cf       	rjmp	.-4      	; 0x207c <Isb_Obj_Init+0x480>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2080:	40 0f       	add	r20, r16
    2082:	51 1f       	adc	r21, r17
    2084:	5f bb       	out	0x1f, r21	; 31
    2086:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
    2088:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    208a:	8d b3       	in	r24, 0x1d	; 29
					Isb_Obj_4Bit[ObjIndex].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddrCtrl);
    208c:	88 83       	st	Y, r24
					if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    208e:	fd 01       	movw	r30, r26
    2090:	ee 0f       	add	r30, r30
    2092:	ff 1f       	adc	r31, r31
    2094:	ee 0f       	add	r30, r30
    2096:	ff 1f       	adc	r31, r31
    2098:	e5 51       	subi	r30, 0x15	; 21
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	80 81       	ld	r24, Z
    209e:	80 ff       	sbrs	r24, 0
    20a0:	13 c0       	rjmp	.+38     	; 0x20c8 <Isb_Obj_Init+0x4cc>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    20a2:	e1 99       	sbic	0x1c, 1	; 28
    20a4:	fe cf       	rjmp	.-4      	; 0x20a2 <Isb_Obj_Init+0x4a6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    20a6:	60 0f       	add	r22, r16
    20a8:	71 1f       	adc	r23, r17
    20aa:	7f bb       	out	0x1f, r23	; 31
    20ac:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
    20ae:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    20b0:	8d b3       	in	r24, 0x1d	; 29
						Isb_Obj_4Bit[ObjIndex].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddrTov);
    20b2:	89 83       	std	Y+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    20b4:	e1 99       	sbic	0x1c, 1	; 28
    20b6:	fe cf       	rjmp	.-4      	; 0x20b4 <Isb_Obj_Init+0x4b8>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    20b8:	20 0f       	add	r18, r16
    20ba:	31 1f       	adc	r19, r17
    20bc:	3f bb       	out	0x1f, r19	; 31
    20be:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    20c0:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    20c2:	8d b3       	in	r24, 0x1d	; 29
						Isb_Obj_4Bit[ObjIndex].Value = lib_eep_fw_read_byte((uint8_t *)eepAddrValueInit);
    20c4:	8a 83       	std	Y+2, r24	; 0x02
						Isb_Obj_4Bit[ObjIndex].IsChanged = FALSE;
    20c6:	1b 82       	std	Y+3, r1	; 0x03
    20c8:	11 96       	adiw	r26, 0x01	; 1
    20ca:	24 96       	adiw	r28, 0x04	; 4
				}
			}
		#endif /* ISB_OBJ_1BIT_MAX */

		#if defined(ISB_OBJ_4BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
    20cc:	a8 30       	cpi	r26, 0x08	; 8
    20ce:	b1 05       	cpc	r27, r1
    20d0:	09 f0       	breq	.+2      	; 0x20d4 <Isb_Obj_Init+0x4d8>
    20d2:	78 cf       	rjmp	.-272    	; 0x1fc4 <Isb_Obj_Init+0x3c8>
    20d4:	cc e0       	ldi	r28, 0x0C	; 12
    20d6:	d1 e0       	ldi	r29, 0x01	; 1
    20d8:	a0 e0       	ldi	r26, 0x00	; 0
    20da:	b0 e0       	ldi	r27, 0x00	; 0
			}
		#endif /* ISB_OBJ_4BIT_MAX */

		#if defined(ISB_OBJ_8BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
				uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_8Bit_Ch_Array[ObjIndex]);
    20dc:	fd 01       	movw	r30, r26
    20de:	e4 5b       	subi	r30, 0xB4	; 180
    20e0:	fe 4f       	sbci	r31, 0xFE	; 254
    20e2:	e4 91       	lpm	r30, Z+
				uint16_t eepAddrCtrl = 0;
				uint16_t eepAddrTov = 0;
				uint16_t eepAddrValueInit = 0;
				switch (ObjIndex) {
    20e4:	a3 30       	cpi	r26, 0x03	; 3
    20e6:	61 f1       	breq	.+88     	; 0x2140 <Isb_Obj_Init+0x544>
    20e8:	a4 30       	cpi	r26, 0x04	; 4
    20ea:	28 f4       	brcc	.+10     	; 0x20f6 <Isb_Obj_Init+0x4fa>
    20ec:	a1 30       	cpi	r26, 0x01	; 1
    20ee:	d1 f0       	breq	.+52     	; 0x2124 <Isb_Obj_Init+0x528>
    20f0:	a2 30       	cpi	r26, 0x02	; 2
    20f2:	f8 f4       	brcc	.+62     	; 0x2132 <Isb_Obj_Init+0x536>
    20f4:	09 c0       	rjmp	.+18     	; 0x2108 <Isb_Obj_Init+0x50c>
    20f6:	a5 30       	cpi	r26, 0x05	; 5
    20f8:	89 f1       	breq	.+98     	; 0x215c <Isb_Obj_Init+0x560>
    20fa:	a5 30       	cpi	r26, 0x05	; 5
    20fc:	40 f1       	brcs	.+80     	; 0x214e <Isb_Obj_Init+0x552>
    20fe:	a6 30       	cpi	r26, 0x06	; 6
    2100:	a1 f1       	breq	.+104    	; 0x216a <Isb_Obj_Init+0x56e>
    2102:	a7 30       	cpi	r26, 0x07	; 7
    2104:	41 f4       	brne	.+16     	; 0x2116 <Isb_Obj_Init+0x51a>
    2106:	38 c0       	rjmp	.+112    	; 0x2178 <Isb_Obj_Init+0x57c>
    2108:	41 e1       	ldi	r20, 0x11	; 17
    210a:	50 e0       	ldi	r21, 0x00	; 0
    210c:	62 e1       	ldi	r22, 0x12	; 18
    210e:	70 e0       	ldi	r23, 0x00	; 0
    2110:	23 e1       	ldi	r18, 0x13	; 19
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	37 c0       	rjmp	.+110    	; 0x2184 <Isb_Obj_Init+0x588>
    2116:	40 e0       	ldi	r20, 0x00	; 0
    2118:	50 e0       	ldi	r21, 0x00	; 0
    211a:	60 e0       	ldi	r22, 0x00	; 0
    211c:	70 e0       	ldi	r23, 0x00	; 0
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	30 c0       	rjmp	.+96     	; 0x2184 <Isb_Obj_Init+0x588>
    2124:	46 e2       	ldi	r20, 0x26	; 38
    2126:	50 e0       	ldi	r21, 0x00	; 0
    2128:	67 e2       	ldi	r22, 0x27	; 39
    212a:	70 e0       	ldi	r23, 0x00	; 0
    212c:	28 e2       	ldi	r18, 0x28	; 40
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	29 c0       	rjmp	.+82     	; 0x2184 <Isb_Obj_Init+0x588>
					#if defined(ISB_OBJ_8BIT_1)
						case 1:
							eepAddrCtrl = ISB_OBJ_8BIT_1_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_8BIT_1_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_1_EEADDR_VALUEINIT;
							break;
    2132:	4b e3       	ldi	r20, 0x3B	; 59
    2134:	50 e0       	ldi	r21, 0x00	; 0
    2136:	6c e3       	ldi	r22, 0x3C	; 60
    2138:	70 e0       	ldi	r23, 0x00	; 0
    213a:	2d e3       	ldi	r18, 0x3D	; 61
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	22 c0       	rjmp	.+68     	; 0x2184 <Isb_Obj_Init+0x588>
					#if defined(ISB_OBJ_8BIT_2)
						case 2:
							eepAddrCtrl = ISB_OBJ_8BIT_2_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_8BIT_2_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_2_EEADDR_VALUEINIT;
							break;
    2140:	40 e5       	ldi	r20, 0x50	; 80
    2142:	50 e0       	ldi	r21, 0x00	; 0
    2144:	61 e5       	ldi	r22, 0x51	; 81
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	22 e5       	ldi	r18, 0x52	; 82
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	1b c0       	rjmp	.+54     	; 0x2184 <Isb_Obj_Init+0x588>
					#if defined(ISB_OBJ_8BIT_3)
						case 3:
							eepAddrCtrl = ISB_OBJ_8BIT_3_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_8BIT_3_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_3_EEADDR_VALUEINIT;
							break;
    214e:	45 e6       	ldi	r20, 0x65	; 101
    2150:	50 e0       	ldi	r21, 0x00	; 0
    2152:	66 e6       	ldi	r22, 0x66	; 102
    2154:	70 e0       	ldi	r23, 0x00	; 0
    2156:	27 e6       	ldi	r18, 0x67	; 103
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	14 c0       	rjmp	.+40     	; 0x2184 <Isb_Obj_Init+0x588>
					#if defined(ISB_OBJ_8BIT_4)
						case 4:
							eepAddrCtrl = ISB_OBJ_8BIT_4_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_8BIT_4_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_4_EEADDR_VALUEINIT;
							break;
    215c:	4a e7       	ldi	r20, 0x7A	; 122
    215e:	50 e0       	ldi	r21, 0x00	; 0
    2160:	6b e7       	ldi	r22, 0x7B	; 123
    2162:	70 e0       	ldi	r23, 0x00	; 0
    2164:	2c e7       	ldi	r18, 0x7C	; 124
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	0d c0       	rjmp	.+26     	; 0x2184 <Isb_Obj_Init+0x588>
					#if defined(ISB_OBJ_8BIT_5)
						case 5:
							eepAddrCtrl = ISB_OBJ_8BIT_5_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_8BIT_5_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_5_EEADDR_VALUEINIT;
							break;
    216a:	4f e8       	ldi	r20, 0x8F	; 143
    216c:	50 e0       	ldi	r21, 0x00	; 0
    216e:	60 e9       	ldi	r22, 0x90	; 144
    2170:	70 e0       	ldi	r23, 0x00	; 0
    2172:	21 e9       	ldi	r18, 0x91	; 145
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	06 c0       	rjmp	.+12     	; 0x2184 <Isb_Obj_Init+0x588>
					#if defined(ISB_OBJ_8BIT_6)
						case 6:
							eepAddrCtrl = ISB_OBJ_8BIT_6_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_8BIT_6_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_6_EEADDR_VALUEINIT;
							break;
    2178:	44 ea       	ldi	r20, 0xA4	; 164
    217a:	50 e0       	ldi	r21, 0x00	; 0
    217c:	65 ea       	ldi	r22, 0xA5	; 165
    217e:	70 e0       	ldi	r23, 0x00	; 0
    2180:	26 ea       	ldi	r18, 0xA6	; 166
    2182:	30 e0       	ldi	r19, 0x00	; 0
							eepAddrTov = ISB_OBJ_8BIT_31_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_31_EEADDR_VALUEINIT;
							break;
					#endif /* ISB_OBJ_8BIT_31 */
				}
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	ee 0f       	add	r30, r30
    2188:	ff 1f       	adc	r31, r31
    218a:	ec 5a       	subi	r30, 0xAC	; 172
    218c:	fc 4f       	sbci	r31, 0xFC	; 252
    218e:	80 81       	ld	r24, Z
    2190:	80 ff       	sbrs	r24, 0
    2192:	26 c0       	rjmp	.+76     	; 0x21e0 <Isb_Obj_Init+0x5e4>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2194:	e1 99       	sbic	0x1c, 1	; 28
    2196:	fe cf       	rjmp	.-4      	; 0x2194 <Isb_Obj_Init+0x598>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2198:	40 0f       	add	r20, r16
    219a:	51 1f       	adc	r21, r17
    219c:	5f bb       	out	0x1f, r21	; 31
    219e:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
    21a0:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    21a2:	8d b3       	in	r24, 0x1d	; 29
					Isb_Obj_8Bit[ObjIndex].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddrCtrl);
    21a4:	88 83       	st	Y, r24
					if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    21a6:	fd 01       	movw	r30, r26
    21a8:	ee 0f       	add	r30, r30
    21aa:	ff 1f       	adc	r31, r31
    21ac:	ee 0f       	add	r30, r30
    21ae:	ff 1f       	adc	r31, r31
    21b0:	e4 5f       	subi	r30, 0xF4	; 244
    21b2:	fe 4f       	sbci	r31, 0xFE	; 254
    21b4:	80 81       	ld	r24, Z
    21b6:	80 ff       	sbrs	r24, 0
    21b8:	13 c0       	rjmp	.+38     	; 0x21e0 <Isb_Obj_Init+0x5e4>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    21ba:	e1 99       	sbic	0x1c, 1	; 28
    21bc:	fe cf       	rjmp	.-4      	; 0x21ba <Isb_Obj_Init+0x5be>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    21be:	60 0f       	add	r22, r16
    21c0:	71 1f       	adc	r23, r17
    21c2:	7f bb       	out	0x1f, r23	; 31
    21c4:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
    21c6:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    21c8:	8d b3       	in	r24, 0x1d	; 29
						Isb_Obj_8Bit[ObjIndex].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddrTov);
    21ca:	89 83       	std	Y+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    21cc:	e1 99       	sbic	0x1c, 1	; 28
    21ce:	fe cf       	rjmp	.-4      	; 0x21cc <Isb_Obj_Init+0x5d0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    21d0:	20 0f       	add	r18, r16
    21d2:	31 1f       	adc	r19, r17
    21d4:	3f bb       	out	0x1f, r19	; 31
    21d6:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    21d8:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    21da:	8d b3       	in	r24, 0x1d	; 29
						Isb_Obj_8Bit[ObjIndex].Value = lib_eep_fw_read_byte((uint8_t *)eepAddrValueInit);
    21dc:	8a 83       	std	Y+2, r24	; 0x02
						Isb_Obj_8Bit[ObjIndex].IsChanged = FALSE;
    21de:	1b 82       	std	Y+3, r1	; 0x03
    21e0:	11 96       	adiw	r26, 0x01	; 1
    21e2:	24 96       	adiw	r28, 0x04	; 4
				}
			}
		#endif /* ISB_OBJ_4BIT_MAX */

		#if defined(ISB_OBJ_8BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
    21e4:	a8 30       	cpi	r26, 0x08	; 8
    21e6:	b1 05       	cpc	r27, r1
    21e8:	09 f0       	breq	.+2      	; 0x21ec <Isb_Obj_Init+0x5f0>
    21ea:	78 cf       	rjmp	.-272    	; 0x20dc <Isb_Obj_Init+0x4e0>
					}
				}
			}
		#endif /* ISB_OBJ_FLOAT_MAX */

	}
    21ec:	df 91       	pop	r29
    21ee:	cf 91       	pop	r28
    21f0:	1f 91       	pop	r17
    21f2:	0f 91       	pop	r16
    21f4:	08 95       	ret

000021f6 <Isb_Grp_Init>:
#ifndef ISB_GRP_C_
	#define ISB_GRP_C_



	void Isb_Grp_Init(void) {
    21f6:	80 91 96 00 	lds	r24, 0x0096
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	26 59       	subi	r18, 0x96	; 150
    2200:	3e 4f       	sbci	r19, 0xFE	; 254
    2202:	ec e2       	ldi	r30, 0x2C	; 44
    2204:	f1 e0       	ldi	r31, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2206:	e1 99       	sbic	0x1c, 1	; 28
    2208:	fe cf       	rjmp	.-4      	; 0x2206 <Isb_Grp_Init+0x10>
    220a:	22 50       	subi	r18, 0x02	; 2
    220c:	30 40       	sbci	r19, 0x00	; 0
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    220e:	3f bb       	out	0x1f, r19	; 31
    2210:	2e bb       	out	0x1e, r18	; 30
    2212:	2e 5f       	subi	r18, 0xFE	; 254
    2214:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
    EECR |= (1 << EERE);
    2216:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2218:	9d b3       	in	r25, 0x1d	; 29
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    221a:	e1 99       	sbic	0x1c, 1	; 28
    221c:	fe cf       	rjmp	.-4      	; 0x221a <Isb_Grp_Init+0x24>
    221e:	21 50       	subi	r18, 0x01	; 1
    2220:	30 40       	sbci	r19, 0x00	; 0
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2222:	3f bb       	out	0x1f, r19	; 31
    2224:	2e bb       	out	0x1e, r18	; 30
    2226:	2f 5f       	subi	r18, 0xFF	; 255
    2228:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
    EECR |= (1 << EERE);
    222a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    222c:	8d b3       	in	r24, 0x1d	; 29
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
			Isb_Grp[GrpIndex].Id = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3));
			Isb_Grp[GrpIndex].Id |= lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 1)) << 8;
    222e:	58 2f       	mov	r21, r24
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	89 2f       	mov	r24, r25
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	84 2b       	or	r24, r20
    2238:	95 2b       	or	r25, r21
    223a:	91 83       	std	Z+1, r25	; 0x01
    223c:	80 83       	st	Z, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    223e:	e1 99       	sbic	0x1c, 1	; 28
    2240:	fe cf       	rjmp	.-4      	; 0x223e <Isb_Grp_Init+0x48>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2242:	3f bb       	out	0x1f, r19	; 31
    2244:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2246:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2248:	8d b3       	in	r24, 0x1d	; 29
			Isb_Grp[GrpIndex].Obj = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 2));
    224a:	82 83       	std	Z+2, r24	; 0x02
    224c:	2d 5f       	subi	r18, 0xFD	; 253
    224e:	3f 4f       	sbci	r19, 0xFF	; 255
    2250:	33 96       	adiw	r30, 0x03	; 3
	#define ISB_GRP_C_



	void Isb_Grp_Init(void) {
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	e4 3a       	cpi	r30, 0xA4	; 164
    2256:	f8 07       	cpc	r31, r24
    2258:	b1 f6       	brne	.-84     	; 0x2206 <Isb_Grp_Init+0x10>
			Isb_Grp[GrpIndex].Id = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3));
			Isb_Grp[GrpIndex].Id |= lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 1)) << 8;
			Isb_Grp[GrpIndex].Obj = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 2));
		}
	}
    225a:	08 95       	ret

0000225c <Node_Reboot>:
	#include "./../lib/isb_obj.c"
	#include "./../lib/isb_grp.c"



	void Node_Reboot(void) {
    225c:	ff cf       	rjmp	.-2      	; 0x225c <Node_Reboot>

0000225e <Isb_SendMsg>:
		while (1) ;
	}



	void Isb_SendMsg(Isb_Msg_t * aMsg) {
    225e:	cf 93       	push	r28
    2260:	df 93       	push	r29
    2262:	ec 01       	movw	r28, r24
		#endif /* ISB_INF_USART0 == 1 */
		#if ISB_INF_USART1 == 1
			Isb_Inf_Usart_Tx(1, aMsg);
		#endif /* ISB_INF_USART1 == 1 */
		#if ISB_INF_CAN0 == 1
			Isb_Inf_Can_Tx(0, aMsg);
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	be 01       	movw	r22, r28
    2268:	0e 94 77 04 	call	0x8ee	; 0x8ee <Isb_Inf_Can_Tx>
			Isb_Inf_Can_Tx(1, aMsg);
		#endif /* ISB_INF_CAN1 == 1 */
		#if ISB_INF_CAN2 == 1
			Isb_Inf_Can_Tx(2, aMsg);
		#endif /* ISB_INF_CAN2 == 1 */
		if ((aMsg->Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_MULTICAST) {
    226c:	88 81       	ld	r24, Y
    226e:	80 73       	andi	r24, 0x30	; 48
    2270:	80 32       	cpi	r24, 0x20	; 32
    2272:	39 f4       	brne	.+14     	; 0x2282 <Isb_SendMsg+0x24>
			if (Error == 0) {
    2274:	80 91 98 00 	lds	r24, 0x0098
    2278:	88 23       	and	r24, r24
    227a:	19 f4       	brne	.+6      	; 0x2282 <Isb_SendMsg+0x24>
				Isb_Obj_Rx(aMsg);
    227c:	ce 01       	movw	r24, r28
    227e:	0e 94 44 11 	call	0x2288	; 0x2288 <Isb_Obj_Rx>
			}
		}
	}
    2282:	df 91       	pop	r29
    2284:	cf 91       	pop	r28
    2286:	08 95       	ret

00002288 <Isb_Obj_Rx>:

	}



	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg) {
    2288:	3f 92       	push	r3
    228a:	4f 92       	push	r4
    228c:	5f 92       	push	r5
    228e:	6f 92       	push	r6
    2290:	7f 92       	push	r7
    2292:	8f 92       	push	r8
    2294:	9f 92       	push	r9
    2296:	af 92       	push	r10
    2298:	bf 92       	push	r11
    229a:	cf 92       	push	r12
    229c:	df 92       	push	r13
    229e:	ef 92       	push	r14
    22a0:	ff 92       	push	r15
    22a2:	0f 93       	push	r16
    22a4:	1f 93       	push	r17
    22a6:	df 93       	push	r29
    22a8:	cf 93       	push	r28
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	2d 97       	sbiw	r28, 0x0d	; 13
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	de bf       	out	0x3e, r29	; 62
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	cd bf       	out	0x3d, r28	; 61
    22ba:	8c 01       	movw	r16, r24
    22bc:	fc e2       	ldi	r31, 0x2C	; 44
    22be:	8f 2e       	mov	r8, r31
    22c0:	f1 e0       	ldi	r31, 0x01	; 1
    22c2:	9f 2e       	mov	r9, r31
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE) {
											if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE)) {
												if (aIsb_Msg->Data[2] == Isb_Obj_1Bit[ObjIndex].Tov) {
													if (Isb_Obj_1Bit[ObjIndex].Value != aIsb_Msg->Data[3]) {
														Isb_Obj_1Bit[ObjIndex].Value = aIsb_Msg->Data[3];
														Isb_Obj_1Bit[ObjIndex].IsChanged = TRUE;
    22c4:	44 24       	eor	r4, r4
    22c6:	43 94       	inc	r4
												TxMsg.SourceId = Isb_Node_Id;
												TxMsg.Data[0] = ISB_MSG_TOP_1BIT;
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
												TxMsg.Data[2] = Isb_Obj_1Bit[ObjIndex].Tov;
												TxMsg.Data[3] = Isb_Obj_1Bit[ObjIndex].Value;
												Isb_SendMsg(&TxMsg);
    22c8:	3e 01       	movw	r6, r28
    22ca:	08 94       	sec
    22cc:	61 1c       	adc	r6, r1
    22ce:	71 1c       	adc	r7, r1
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE) {
											if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE)) {
												if (aIsb_Msg->Data[2] == Isb_Obj_8Bit[ObjIndex].Tov) {
													if (Isb_Obj_8Bit[ObjIndex].Value != aIsb_Msg->Data[3]) {
														Isb_Obj_8Bit[ObjIndex].Value = aIsb_Msg->Data[3];
														Isb_Obj_8Bit[ObjIndex].IsChanged = TRUE;
    22d0:	33 24       	eor	r3, r3
    22d2:	33 94       	inc	r3
								if ((aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK) == ISB_MSG_FLAGS_DLC_4) {
									if (aIsb_Msg->Data[0] == ISB_MSG_TOP_8BIT) {
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ) {
											if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ)) {
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    22d4:	e4 e2       	ldi	r30, 0x24	; 36
    22d6:	5e 2e       	mov	r5, r30



	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg) {
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
			if ((aIsb_Msg->DestId == Isb_Grp[GrpIndex].Id) & (aIsb_Msg->DestId != 0)) {
    22d8:	f8 01       	movw	r30, r16
    22da:	21 81       	ldd	r18, Z+1	; 0x01
    22dc:	32 81       	ldd	r19, Z+2	; 0x02
    22de:	f4 01       	movw	r30, r8
    22e0:	80 81       	ld	r24, Z
    22e2:	91 81       	ldd	r25, Z+1	; 0x01
    22e4:	28 17       	cp	r18, r24
    22e6:	39 07       	cpc	r19, r25
    22e8:	09 f0       	breq	.+2      	; 0x22ec <Isb_Obj_Rx+0x64>
    22ea:	77 c1       	rjmp	.+750    	; 0x25da <Isb_Obj_Rx+0x352>
    22ec:	23 2b       	or	r18, r19
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <Isb_Obj_Rx+0x6a>
    22f0:	74 c1       	rjmp	.+744    	; 0x25da <Isb_Obj_Rx+0x352>
    22f2:	75 ea       	ldi	r23, 0xA5	; 165
    22f4:	e7 2e       	mov	r14, r23
    22f6:	71 e0       	ldi	r23, 0x01	; 1
    22f8:	f7 2e       	mov	r15, r23
    22fa:	aa 24       	eor	r10, r10
    22fc:	bb 24       	eor	r11, r11

				#if defined(ISB_OBJ_1BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
//						uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_1Bit_Ch_Array[ObjIndex]);
						uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_1Bit_Obj_Array[ObjIndex]);
    22fe:	f5 01       	movw	r30, r10
    2300:	ec 53       	subi	r30, 0x3C	; 60
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	94 91       	lpm	r25, Z+
						if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    2306:	65 01       	movw	r12, r10
    2308:	cc 0c       	add	r12, r12
    230a:	dd 1c       	adc	r13, r13
    230c:	cc 0c       	add	r12, r12
    230e:	dd 1c       	adc	r13, r13
    2310:	24 ea       	ldi	r18, 0xA4	; 164
    2312:	31 e0       	ldi	r19, 0x01	; 1
    2314:	c2 0e       	add	r12, r18
    2316:	d3 1e       	adc	r13, r19
    2318:	f6 01       	movw	r30, r12
    231a:	80 81       	ld	r24, Z
    231c:	80 ff       	sbrs	r24, 0
    231e:	59 c0       	rjmp	.+178    	; 0x23d2 <Isb_Obj_Rx+0x14a>
							if (Obj == Isb_Grp[GrpIndex].Obj) {
    2320:	f4 01       	movw	r30, r8
    2322:	82 81       	ldd	r24, Z+2	; 0x02
    2324:	98 17       	cp	r25, r24
    2326:	09 f0       	breq	.+2      	; 0x232a <Isb_Obj_Rx+0xa2>
    2328:	54 c0       	rjmp	.+168    	; 0x23d2 <Isb_Obj_Rx+0x14a>
								if ((aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK) == ISB_MSG_FLAGS_DLC_4) {
    232a:	f8 01       	movw	r30, r16
    232c:	80 81       	ld	r24, Z
    232e:	8f 70       	andi	r24, 0x0F	; 15
    2330:	84 30       	cpi	r24, 0x04	; 4
    2332:	09 f0       	breq	.+2      	; 0x2336 <Isb_Obj_Rx+0xae>
    2334:	4e c0       	rjmp	.+156    	; 0x23d2 <Isb_Obj_Rx+0x14a>
									if (aIsb_Msg->Data[0] == ISB_MSG_TOP_1BIT) {
    2336:	25 81       	ldd	r18, Z+5	; 0x05
    2338:	21 30       	cpi	r18, 0x01	; 1
    233a:	09 f0       	breq	.+2      	; 0x233e <Isb_Obj_Rx+0xb6>
    233c:	4a c0       	rjmp	.+148    	; 0x23d2 <Isb_Obj_Rx+0x14a>
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ) {
    233e:	86 81       	ldd	r24, Z+6	; 0x06
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	83 70       	andi	r24, 0x03	; 3
    2344:	90 70       	andi	r25, 0x00	; 0
    2346:	89 2b       	or	r24, r25
    2348:	d1 f4       	brne	.+52     	; 0x237e <Isb_Obj_Rx+0xf6>
											if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ)) {
    234a:	f6 01       	movw	r30, r12
    234c:	80 81       	ld	r24, Z
    234e:	81 ff       	sbrs	r24, 1
    2350:	16 c0       	rjmp	.+44     	; 0x237e <Isb_Obj_Rx+0xf6>
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    2352:	59 82       	std	Y+1, r5	; 0x01
												TxMsg.DestId = aIsb_Msg->DestId;
    2354:	f8 01       	movw	r30, r16
    2356:	81 81       	ldd	r24, Z+1	; 0x01
    2358:	92 81       	ldd	r25, Z+2	; 0x02
    235a:	9b 83       	std	Y+3, r25	; 0x03
    235c:	8a 83       	std	Y+2, r24	; 0x02
												TxMsg.SourceId = Isb_Node_Id;
    235e:	80 91 94 00 	lds	r24, 0x0094
    2362:	90 91 95 00 	lds	r25, 0x0095
    2366:	9d 83       	std	Y+5, r25	; 0x05
    2368:	8c 83       	std	Y+4, r24	; 0x04
												TxMsg.Data[0] = ISB_MSG_TOP_1BIT;
    236a:	2e 83       	std	Y+6, r18	; 0x06
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
    236c:	2f 83       	std	Y+7, r18	; 0x07
												TxMsg.Data[2] = Isb_Obj_1Bit[ObjIndex].Tov;
    236e:	f7 01       	movw	r30, r14
    2370:	80 81       	ld	r24, Z
    2372:	88 87       	std	Y+8, r24	; 0x08
												TxMsg.Data[3] = Isb_Obj_1Bit[ObjIndex].Value;
    2374:	81 81       	ldd	r24, Z+1	; 0x01
    2376:	89 87       	std	Y+9, r24	; 0x09
												Isb_SendMsg(&TxMsg);
    2378:	c3 01       	movw	r24, r6
    237a:	0e 94 2f 11 	call	0x225e	; 0x225e <Isb_SendMsg>
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_ANSWER) {
    237e:	f8 01       	movw	r30, r16
    2380:	86 81       	ldd	r24, Z+6	; 0x06
    2382:	83 70       	andi	r24, 0x03	; 3
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	71 f4       	brne	.+28     	; 0x23a4 <Isb_Obj_Rx+0x11c>
											if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_UPDATE)) {
    2388:	f6 01       	movw	r30, r12
    238a:	80 81       	ld	r24, Z
    238c:	84 ff       	sbrs	r24, 4
    238e:	0a c0       	rjmp	.+20     	; 0x23a4 <Isb_Obj_Rx+0x11c>
												if (aIsb_Msg->Data[2] == Isb_Obj_1Bit[ObjIndex].Tov) {
    2390:	f8 01       	movw	r30, r16
    2392:	97 81       	ldd	r25, Z+7	; 0x07
    2394:	f7 01       	movw	r30, r14
    2396:	80 81       	ld	r24, Z
    2398:	98 17       	cp	r25, r24
    239a:	21 f4       	brne	.+8      	; 0x23a4 <Isb_Obj_Rx+0x11c>
													Isb_Obj_1Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    239c:	f8 01       	movw	r30, r16
    239e:	80 85       	ldd	r24, Z+8	; 0x08
    23a0:	f7 01       	movw	r30, r14
    23a2:	81 83       	std	Z+1, r24	; 0x01
												}
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE) {
    23a4:	f8 01       	movw	r30, r16
    23a6:	86 81       	ldd	r24, Z+6	; 0x06
    23a8:	83 70       	andi	r24, 0x03	; 3
    23aa:	82 30       	cpi	r24, 0x02	; 2
    23ac:	91 f4       	brne	.+36     	; 0x23d2 <Isb_Obj_Rx+0x14a>
											if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE)) {
    23ae:	f6 01       	movw	r30, r12
    23b0:	80 81       	ld	r24, Z
    23b2:	82 ff       	sbrs	r24, 2
    23b4:	0e c0       	rjmp	.+28     	; 0x23d2 <Isb_Obj_Rx+0x14a>
												if (aIsb_Msg->Data[2] == Isb_Obj_1Bit[ObjIndex].Tov) {
    23b6:	f8 01       	movw	r30, r16
    23b8:	97 81       	ldd	r25, Z+7	; 0x07
    23ba:	f7 01       	movw	r30, r14
    23bc:	80 81       	ld	r24, Z
    23be:	98 17       	cp	r25, r24
    23c0:	41 f4       	brne	.+16     	; 0x23d2 <Isb_Obj_Rx+0x14a>
													if (Isb_Obj_1Bit[ObjIndex].Value != aIsb_Msg->Data[3]) {
    23c2:	f8 01       	movw	r30, r16
    23c4:	90 85       	ldd	r25, Z+8	; 0x08
    23c6:	f7 01       	movw	r30, r14
    23c8:	81 81       	ldd	r24, Z+1	; 0x01
    23ca:	89 17       	cp	r24, r25
    23cc:	11 f0       	breq	.+4      	; 0x23d2 <Isb_Obj_Rx+0x14a>
														Isb_Obj_1Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    23ce:	91 83       	std	Z+1, r25	; 0x01
														Isb_Obj_1Bit[ObjIndex].IsChanged = TRUE;
    23d0:	42 82       	std	Z+2, r4	; 0x02
    23d2:	08 94       	sec
    23d4:	a1 1c       	adc	r10, r1
    23d6:	b1 1c       	adc	r11, r1
    23d8:	24 e0       	ldi	r18, 0x04	; 4
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	e2 0e       	add	r14, r18
    23de:	f3 1e       	adc	r15, r19
	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg) {
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
			if ((aIsb_Msg->DestId == Isb_Grp[GrpIndex].Id) & (aIsb_Msg->DestId != 0)) {

				#if defined(ISB_OBJ_1BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
    23e0:	38 e3       	ldi	r19, 0x38	; 56
    23e2:	a3 16       	cp	r10, r19
    23e4:	b1 04       	cpc	r11, r1
    23e6:	09 f0       	breq	.+2      	; 0x23ea <Isb_Obj_Rx+0x162>
    23e8:	8a cf       	rjmp	.-236    	; 0x22fe <Isb_Obj_Rx+0x76>
    23ea:	5c ee       	ldi	r21, 0xEC	; 236
    23ec:	e5 2e       	mov	r14, r21
    23ee:	50 e0       	ldi	r21, 0x00	; 0
    23f0:	f5 2e       	mov	r15, r21
    23f2:	aa 24       	eor	r10, r10
    23f4:	bb 24       	eor	r11, r11
				#endif /* ISB_OBJ_1BIT_MAX */

				#if defined(ISB_OBJ_4BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
//						uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_4Bit_Ch_Array[ObjIndex]);
						uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_4Bit_Obj_Array[ObjIndex]);
    23f6:	f5 01       	movw	r30, r10
    23f8:	e4 50       	subi	r30, 0x04	; 4
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	94 91       	lpm	r25, Z+
						if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    23fe:	65 01       	movw	r12, r10
    2400:	cc 0c       	add	r12, r12
    2402:	dd 1c       	adc	r13, r13
    2404:	cc 0c       	add	r12, r12
    2406:	dd 1c       	adc	r13, r13
    2408:	eb ee       	ldi	r30, 0xEB	; 235
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	ce 0e       	add	r12, r30
    240e:	df 1e       	adc	r13, r31
    2410:	f6 01       	movw	r30, r12
    2412:	80 81       	ld	r24, Z
    2414:	80 ff       	sbrs	r24, 0
    2416:	59 c0       	rjmp	.+178    	; 0x24ca <Isb_Obj_Rx+0x242>
							if (Obj == Isb_Grp[GrpIndex].Obj) {
    2418:	f4 01       	movw	r30, r8
    241a:	82 81       	ldd	r24, Z+2	; 0x02
    241c:	98 17       	cp	r25, r24
    241e:	09 f0       	breq	.+2      	; 0x2422 <Isb_Obj_Rx+0x19a>
    2420:	54 c0       	rjmp	.+168    	; 0x24ca <Isb_Obj_Rx+0x242>
								if ((aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK) == ISB_MSG_FLAGS_DLC_4) {
    2422:	f8 01       	movw	r30, r16
    2424:	80 81       	ld	r24, Z
    2426:	8f 70       	andi	r24, 0x0F	; 15
    2428:	84 30       	cpi	r24, 0x04	; 4
    242a:	09 f0       	breq	.+2      	; 0x242e <Isb_Obj_Rx+0x1a6>
    242c:	4e c0       	rjmp	.+156    	; 0x24ca <Isb_Obj_Rx+0x242>
									if (aIsb_Msg->Data[0] == ISB_MSG_TOP_4BIT) {
    242e:	25 81       	ldd	r18, Z+5	; 0x05
    2430:	22 30       	cpi	r18, 0x02	; 2
    2432:	09 f0       	breq	.+2      	; 0x2436 <Isb_Obj_Rx+0x1ae>
    2434:	4a c0       	rjmp	.+148    	; 0x24ca <Isb_Obj_Rx+0x242>
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ) {
    2436:	86 81       	ldd	r24, Z+6	; 0x06
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	83 70       	andi	r24, 0x03	; 3
    243c:	90 70       	andi	r25, 0x00	; 0
    243e:	89 2b       	or	r24, r25
    2440:	d1 f4       	brne	.+52     	; 0x2476 <Isb_Obj_Rx+0x1ee>
											if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ)) {
    2442:	f6 01       	movw	r30, r12
    2444:	80 81       	ld	r24, Z
    2446:	81 ff       	sbrs	r24, 1
    2448:	16 c0       	rjmp	.+44     	; 0x2476 <Isb_Obj_Rx+0x1ee>
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    244a:	59 82       	std	Y+1, r5	; 0x01
												TxMsg.DestId = aIsb_Msg->DestId;
    244c:	f8 01       	movw	r30, r16
    244e:	81 81       	ldd	r24, Z+1	; 0x01
    2450:	92 81       	ldd	r25, Z+2	; 0x02
    2452:	9b 83       	std	Y+3, r25	; 0x03
    2454:	8a 83       	std	Y+2, r24	; 0x02
												TxMsg.SourceId = Isb_Node_Id;
    2456:	80 91 94 00 	lds	r24, 0x0094
    245a:	90 91 95 00 	lds	r25, 0x0095
    245e:	9d 83       	std	Y+5, r25	; 0x05
    2460:	8c 83       	std	Y+4, r24	; 0x04
												TxMsg.Data[0] = ISB_MSG_TOP_4BIT;
    2462:	2e 83       	std	Y+6, r18	; 0x06
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
    2464:	3f 82       	std	Y+7, r3	; 0x07
												TxMsg.Data[2] = Isb_Obj_4Bit[ObjIndex].Tov;
    2466:	f7 01       	movw	r30, r14
    2468:	80 81       	ld	r24, Z
    246a:	88 87       	std	Y+8, r24	; 0x08
												TxMsg.Data[3] = Isb_Obj_4Bit[ObjIndex].Value;
    246c:	81 81       	ldd	r24, Z+1	; 0x01
    246e:	89 87       	std	Y+9, r24	; 0x09
												Isb_SendMsg(&TxMsg);
    2470:	c3 01       	movw	r24, r6
    2472:	0e 94 2f 11 	call	0x225e	; 0x225e <Isb_SendMsg>
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_ANSWER) {
    2476:	f8 01       	movw	r30, r16
    2478:	86 81       	ldd	r24, Z+6	; 0x06
    247a:	83 70       	andi	r24, 0x03	; 3
    247c:	81 30       	cpi	r24, 0x01	; 1
    247e:	71 f4       	brne	.+28     	; 0x249c <Isb_Obj_Rx+0x214>
											if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_UPDATE)) {
    2480:	f6 01       	movw	r30, r12
    2482:	80 81       	ld	r24, Z
    2484:	84 ff       	sbrs	r24, 4
    2486:	0a c0       	rjmp	.+20     	; 0x249c <Isb_Obj_Rx+0x214>
												if (aIsb_Msg->Data[2] == Isb_Obj_4Bit[ObjIndex].Tov) {
    2488:	f8 01       	movw	r30, r16
    248a:	97 81       	ldd	r25, Z+7	; 0x07
    248c:	f7 01       	movw	r30, r14
    248e:	80 81       	ld	r24, Z
    2490:	98 17       	cp	r25, r24
    2492:	21 f4       	brne	.+8      	; 0x249c <Isb_Obj_Rx+0x214>
													Isb_Obj_4Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    2494:	f8 01       	movw	r30, r16
    2496:	80 85       	ldd	r24, Z+8	; 0x08
    2498:	f7 01       	movw	r30, r14
    249a:	81 83       	std	Z+1, r24	; 0x01
												}
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE) {
    249c:	f8 01       	movw	r30, r16
    249e:	86 81       	ldd	r24, Z+6	; 0x06
    24a0:	83 70       	andi	r24, 0x03	; 3
    24a2:	82 30       	cpi	r24, 0x02	; 2
    24a4:	91 f4       	brne	.+36     	; 0x24ca <Isb_Obj_Rx+0x242>
											if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE)) {
    24a6:	f6 01       	movw	r30, r12
    24a8:	80 81       	ld	r24, Z
    24aa:	82 ff       	sbrs	r24, 2
    24ac:	0e c0       	rjmp	.+28     	; 0x24ca <Isb_Obj_Rx+0x242>
												if (aIsb_Msg->Data[2] == Isb_Obj_4Bit[ObjIndex].Tov) {
    24ae:	f8 01       	movw	r30, r16
    24b0:	97 81       	ldd	r25, Z+7	; 0x07
    24b2:	f7 01       	movw	r30, r14
    24b4:	80 81       	ld	r24, Z
    24b6:	98 17       	cp	r25, r24
    24b8:	41 f4       	brne	.+16     	; 0x24ca <Isb_Obj_Rx+0x242>
													if (Isb_Obj_4Bit[ObjIndex].Value != aIsb_Msg->Data[3]) {
    24ba:	f8 01       	movw	r30, r16
    24bc:	90 85       	ldd	r25, Z+8	; 0x08
    24be:	f7 01       	movw	r30, r14
    24c0:	81 81       	ldd	r24, Z+1	; 0x01
    24c2:	89 17       	cp	r24, r25
    24c4:	11 f0       	breq	.+4      	; 0x24ca <Isb_Obj_Rx+0x242>
														Isb_Obj_4Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    24c6:	91 83       	std	Z+1, r25	; 0x01
														Isb_Obj_4Bit[ObjIndex].IsChanged = TRUE;
    24c8:	42 82       	std	Z+2, r4	; 0x02
    24ca:	08 94       	sec
    24cc:	a1 1c       	adc	r10, r1
    24ce:	b1 1c       	adc	r11, r1
    24d0:	24 e0       	ldi	r18, 0x04	; 4
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	e2 0e       	add	r14, r18
    24d6:	f3 1e       	adc	r15, r19
						}
					}
				#endif /* ISB_OBJ_1BIT_MAX */

				#if defined(ISB_OBJ_4BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
    24d8:	38 e0       	ldi	r19, 0x08	; 8
    24da:	a3 16       	cp	r10, r19
    24dc:	b1 04       	cpc	r11, r1
    24de:	09 f0       	breq	.+2      	; 0x24e2 <Isb_Obj_Rx+0x25a>
    24e0:	8a cf       	rjmp	.-236    	; 0x23f6 <Isb_Obj_Rx+0x16e>
    24e2:	3d e0       	ldi	r19, 0x0D	; 13
    24e4:	e3 2e       	mov	r14, r19
    24e6:	31 e0       	ldi	r19, 0x01	; 1
    24e8:	f3 2e       	mov	r15, r19
    24ea:	aa 24       	eor	r10, r10
    24ec:	bb 24       	eor	r11, r11
				#endif /* ISB_OBJ_4BIT_MAX */

				#if defined(ISB_OBJ_8BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
//						uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_8Bit_Ch_Array[ObjIndex]);
						uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_8Bit_Obj_Array[ObjIndex]);
    24ee:	f5 01       	movw	r30, r10
    24f0:	ec 5f       	subi	r30, 0xFC	; 252
    24f2:	fe 4f       	sbci	r31, 0xFE	; 254
    24f4:	94 91       	lpm	r25, Z+
						if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    24f6:	65 01       	movw	r12, r10
    24f8:	cc 0c       	add	r12, r12
    24fa:	dd 1c       	adc	r13, r13
    24fc:	cc 0c       	add	r12, r12
    24fe:	dd 1c       	adc	r13, r13
    2500:	ec e0       	ldi	r30, 0x0C	; 12
    2502:	f1 e0       	ldi	r31, 0x01	; 1
    2504:	ce 0e       	add	r12, r30
    2506:	df 1e       	adc	r13, r31
    2508:	f6 01       	movw	r30, r12
    250a:	80 81       	ld	r24, Z
    250c:	80 ff       	sbrs	r24, 0
    250e:	59 c0       	rjmp	.+178    	; 0x25c2 <Isb_Obj_Rx+0x33a>
							if (Obj == Isb_Grp[GrpIndex].Obj) {
    2510:	f4 01       	movw	r30, r8
    2512:	82 81       	ldd	r24, Z+2	; 0x02
    2514:	98 17       	cp	r25, r24
    2516:	09 f0       	breq	.+2      	; 0x251a <Isb_Obj_Rx+0x292>
    2518:	54 c0       	rjmp	.+168    	; 0x25c2 <Isb_Obj_Rx+0x33a>
								if ((aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK) == ISB_MSG_FLAGS_DLC_4) {
    251a:	f8 01       	movw	r30, r16
    251c:	80 81       	ld	r24, Z
    251e:	8f 70       	andi	r24, 0x0F	; 15
    2520:	84 30       	cpi	r24, 0x04	; 4
    2522:	09 f0       	breq	.+2      	; 0x2526 <Isb_Obj_Rx+0x29e>
    2524:	4e c0       	rjmp	.+156    	; 0x25c2 <Isb_Obj_Rx+0x33a>
									if (aIsb_Msg->Data[0] == ISB_MSG_TOP_8BIT) {
    2526:	25 81       	ldd	r18, Z+5	; 0x05
    2528:	23 30       	cpi	r18, 0x03	; 3
    252a:	09 f0       	breq	.+2      	; 0x252e <Isb_Obj_Rx+0x2a6>
    252c:	4a c0       	rjmp	.+148    	; 0x25c2 <Isb_Obj_Rx+0x33a>
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ) {
    252e:	86 81       	ldd	r24, Z+6	; 0x06
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	83 70       	andi	r24, 0x03	; 3
    2534:	90 70       	andi	r25, 0x00	; 0
    2536:	89 2b       	or	r24, r25
    2538:	d1 f4       	brne	.+52     	; 0x256e <Isb_Obj_Rx+0x2e6>
											if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ)) {
    253a:	f6 01       	movw	r30, r12
    253c:	80 81       	ld	r24, Z
    253e:	81 ff       	sbrs	r24, 1
    2540:	16 c0       	rjmp	.+44     	; 0x256e <Isb_Obj_Rx+0x2e6>
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    2542:	59 82       	std	Y+1, r5	; 0x01
												TxMsg.DestId = aIsb_Msg->DestId;
    2544:	f8 01       	movw	r30, r16
    2546:	81 81       	ldd	r24, Z+1	; 0x01
    2548:	92 81       	ldd	r25, Z+2	; 0x02
    254a:	9b 83       	std	Y+3, r25	; 0x03
    254c:	8a 83       	std	Y+2, r24	; 0x02
												TxMsg.SourceId = Isb_Node_Id;
    254e:	80 91 94 00 	lds	r24, 0x0094
    2552:	90 91 95 00 	lds	r25, 0x0095
    2556:	9d 83       	std	Y+5, r25	; 0x05
    2558:	8c 83       	std	Y+4, r24	; 0x04
												TxMsg.Data[0] = ISB_MSG_TOP_8BIT;
    255a:	2e 83       	std	Y+6, r18	; 0x06
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
    255c:	3f 82       	std	Y+7, r3	; 0x07
												TxMsg.Data[2] = Isb_Obj_8Bit[ObjIndex].Tov;
    255e:	f7 01       	movw	r30, r14
    2560:	80 81       	ld	r24, Z
    2562:	88 87       	std	Y+8, r24	; 0x08
												TxMsg.Data[3] = Isb_Obj_8Bit[ObjIndex].Value;
    2564:	81 81       	ldd	r24, Z+1	; 0x01
    2566:	89 87       	std	Y+9, r24	; 0x09
												Isb_SendMsg(&TxMsg);
    2568:	c3 01       	movw	r24, r6
    256a:	0e 94 2f 11 	call	0x225e	; 0x225e <Isb_SendMsg>
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_ANSWER) {
    256e:	f8 01       	movw	r30, r16
    2570:	86 81       	ldd	r24, Z+6	; 0x06
    2572:	83 70       	andi	r24, 0x03	; 3
    2574:	81 30       	cpi	r24, 0x01	; 1
    2576:	71 f4       	brne	.+28     	; 0x2594 <Isb_Obj_Rx+0x30c>
											if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_UPDATE)) {
    2578:	f6 01       	movw	r30, r12
    257a:	80 81       	ld	r24, Z
    257c:	84 ff       	sbrs	r24, 4
    257e:	0a c0       	rjmp	.+20     	; 0x2594 <Isb_Obj_Rx+0x30c>
												if (aIsb_Msg->Data[2] == Isb_Obj_8Bit[ObjIndex].Tov) {
    2580:	f8 01       	movw	r30, r16
    2582:	97 81       	ldd	r25, Z+7	; 0x07
    2584:	f7 01       	movw	r30, r14
    2586:	80 81       	ld	r24, Z
    2588:	98 17       	cp	r25, r24
    258a:	21 f4       	brne	.+8      	; 0x2594 <Isb_Obj_Rx+0x30c>
													Isb_Obj_8Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    258c:	f8 01       	movw	r30, r16
    258e:	80 85       	ldd	r24, Z+8	; 0x08
    2590:	f7 01       	movw	r30, r14
    2592:	81 83       	std	Z+1, r24	; 0x01
												}
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE) {
    2594:	f8 01       	movw	r30, r16
    2596:	86 81       	ldd	r24, Z+6	; 0x06
    2598:	83 70       	andi	r24, 0x03	; 3
    259a:	82 30       	cpi	r24, 0x02	; 2
    259c:	91 f4       	brne	.+36     	; 0x25c2 <Isb_Obj_Rx+0x33a>
											if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE)) {
    259e:	f6 01       	movw	r30, r12
    25a0:	80 81       	ld	r24, Z
    25a2:	82 ff       	sbrs	r24, 2
    25a4:	0e c0       	rjmp	.+28     	; 0x25c2 <Isb_Obj_Rx+0x33a>
												if (aIsb_Msg->Data[2] == Isb_Obj_8Bit[ObjIndex].Tov) {
    25a6:	f8 01       	movw	r30, r16
    25a8:	97 81       	ldd	r25, Z+7	; 0x07
    25aa:	f7 01       	movw	r30, r14
    25ac:	80 81       	ld	r24, Z
    25ae:	98 17       	cp	r25, r24
    25b0:	41 f4       	brne	.+16     	; 0x25c2 <Isb_Obj_Rx+0x33a>
													if (Isb_Obj_8Bit[ObjIndex].Value != aIsb_Msg->Data[3]) {
    25b2:	f8 01       	movw	r30, r16
    25b4:	90 85       	ldd	r25, Z+8	; 0x08
    25b6:	f7 01       	movw	r30, r14
    25b8:	81 81       	ldd	r24, Z+1	; 0x01
    25ba:	89 17       	cp	r24, r25
    25bc:	11 f0       	breq	.+4      	; 0x25c2 <Isb_Obj_Rx+0x33a>
														Isb_Obj_8Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    25be:	91 83       	std	Z+1, r25	; 0x01
														Isb_Obj_8Bit[ObjIndex].IsChanged = TRUE;
    25c0:	42 82       	std	Z+2, r4	; 0x02
    25c2:	08 94       	sec
    25c4:	a1 1c       	adc	r10, r1
    25c6:	b1 1c       	adc	r11, r1
    25c8:	24 e0       	ldi	r18, 0x04	; 4
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	e2 0e       	add	r14, r18
    25ce:	f3 1e       	adc	r15, r19
						}
					}
				#endif /* ISB_OBJ_4BIT_MAX */

				#if defined(ISB_OBJ_8BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
    25d0:	38 e0       	ldi	r19, 0x08	; 8
    25d2:	a3 16       	cp	r10, r19
    25d4:	b1 04       	cpc	r11, r1
    25d6:	09 f0       	breq	.+2      	; 0x25da <Isb_Obj_Rx+0x352>
    25d8:	8a cf       	rjmp	.-236    	; 0x24ee <Isb_Obj_Rx+0x266>
    25da:	83 e0       	ldi	r24, 0x03	; 3
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	88 0e       	add	r8, r24
    25e0:	99 1e       	adc	r9, r25
	}



	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg) {
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    25e2:	94 ea       	ldi	r25, 0xA4	; 164
    25e4:	89 16       	cp	r8, r25
    25e6:	91 e0       	ldi	r25, 0x01	; 1
    25e8:	99 06       	cpc	r9, r25
    25ea:	09 f0       	breq	.+2      	; 0x25ee <Isb_Obj_Rx+0x366>
    25ec:	75 ce       	rjmp	.-790    	; 0x22d8 <Isb_Obj_Rx+0x50>
					}
				#endif /* ISB_OBJ_FLOAT_MAX */

			}
		}
	}
    25ee:	2d 96       	adiw	r28, 0x0d	; 13
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	ff 90       	pop	r15
    2604:	ef 90       	pop	r14
    2606:	df 90       	pop	r13
    2608:	cf 90       	pop	r12
    260a:	bf 90       	pop	r11
    260c:	af 90       	pop	r10
    260e:	9f 90       	pop	r9
    2610:	8f 90       	pop	r8
    2612:	7f 90       	pop	r7
    2614:	6f 90       	pop	r6
    2616:	5f 90       	pop	r5
    2618:	4f 90       	pop	r4
    261a:	3f 90       	pop	r3
    261c:	08 95       	ret

0000261e <Isb_Obj_Exec>:

	}



	void Isb_Obj_Exec(void) {
    261e:	7f 92       	push	r7
    2620:	8f 92       	push	r8
    2622:	9f 92       	push	r9
    2624:	af 92       	push	r10
    2626:	bf 92       	push	r11
    2628:	cf 92       	push	r12
    262a:	df 92       	push	r13
    262c:	ef 92       	push	r14
    262e:	ff 92       	push	r15
    2630:	0f 93       	push	r16
    2632:	1f 93       	push	r17
    2634:	df 93       	push	r29
    2636:	cf 93       	push	r28
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	2d 97       	sbiw	r28, 0x0d	; 13
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	de bf       	out	0x3e, r29	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	cd bf       	out	0x3d, r28	; 61

		#if defined(ISB_OBJ_1BIT_MAX)
			if (bit_is_set(Isb_Obj_1Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
    2648:	80 91 a2 00 	lds	r24, 0x00A2
    264c:	80 ff       	sbrs	r24, 0
    264e:	71 c0       	rjmp	.+226    	; 0x2732 <Isb_Obj_Exec+0x114>
    2650:	04 ea       	ldi	r16, 0xA4	; 164
    2652:	11 e0       	ldi	r17, 0x01	; 1
    2654:	cc 24       	eor	r12, r12
    2656:	dd 24       	eor	r13, r13
								if (Isb_Obj_1Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_1Bit_Obj_Array[ObjIndex]);
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    2658:	84 e2       	ldi	r24, 0x24	; 36
    265a:	78 2e       	mov	r7, r24
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
											TxMsg.SourceId = Isb_Node_Id;
											TxMsg.Data[0] = ISB_MSG_TOP_1BIT;
    265c:	88 24       	eor	r8, r8
    265e:	83 94       	inc	r8
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    2660:	b2 e0       	ldi	r27, 0x02	; 2
    2662:	9b 2e       	mov	r9, r27
											TxMsg.Data[2] = Isb_Obj_1Bit[ObjIndex].Tov;
											TxMsg.Data[3] = Isb_Obj_1Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
    2664:	5e 01       	movw	r10, r28
    2666:	08 94       	sec
    2668:	a1 1c       	adc	r10, r1
    266a:	b1 1c       	adc	r11, r1
	void Isb_Obj_Exec(void) {

		#if defined(ISB_OBJ_1BIT_MAX)
			if (bit_is_set(Isb_Obj_1Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_1Bit_Ch_Array[ObjIndex]);
    266c:	f6 01       	movw	r30, r12
    266e:	e4 5f       	subi	r30, 0xF4	; 244
    2670:	fe 4f       	sbci	r31, 0xFE	; 254
    2672:	e4 91       	lpm	r30, Z+
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	ee 0f       	add	r30, r30
    2678:	ff 1f       	adc	r31, r31
    267a:	ec 5a       	subi	r30, 0xAC	; 172
    267c:	fc 4f       	sbci	r31, 0xFC	; 252
    267e:	80 81       	ld	r24, Z
    2680:	80 ff       	sbrs	r24, 0
    2682:	48 c0       	rjmp	.+144    	; 0x2714 <Isb_Obj_Exec+0xf6>
						if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    2684:	76 01       	movw	r14, r12
    2686:	ee 0c       	add	r14, r14
    2688:	ff 1c       	adc	r15, r15
    268a:	ee 0c       	add	r14, r14
    268c:	ff 1c       	adc	r15, r15
    268e:	84 ea       	ldi	r24, 0xA4	; 164
    2690:	91 e0       	ldi	r25, 0x01	; 1
    2692:	e8 0e       	add	r14, r24
    2694:	f9 1e       	adc	r15, r25
    2696:	f7 01       	movw	r30, r14
    2698:	80 81       	ld	r24, Z
    269a:	80 ff       	sbrs	r24, 0
    269c:	3b c0       	rjmp	.+118    	; 0x2714 <Isb_Obj_Exec+0xf6>
							if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
    269e:	80 81       	ld	r24, Z
    26a0:	83 ff       	sbrs	r24, 3
    26a2:	30 c0       	rjmp	.+96     	; 0x2704 <Isb_Obj_Exec+0xe6>
								if (Isb_Obj_1Bit[ObjIndex].IsChanged == TRUE) {
    26a4:	f8 01       	movw	r30, r16
    26a6:	83 81       	ldd	r24, Z+3	; 0x03
    26a8:	81 30       	cpi	r24, 0x01	; 1
    26aa:	61 f5       	brne	.+88     	; 0x2704 <Isb_Obj_Exec+0xe6>
    26ac:	ac e2       	ldi	r26, 0x2C	; 44
    26ae:	b1 e0       	ldi	r27, 0x01	; 1
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_1Bit_Obj_Array[ObjIndex]);
    26b0:	f6 01       	movw	r30, r12
    26b2:	ec 53       	subi	r30, 0x3C	; 60
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	94 91       	lpm	r25, Z+
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
    26b8:	2d 91       	ld	r18, X+
    26ba:	3c 91       	ld	r19, X
    26bc:	11 97       	sbiw	r26, 0x01	; 1
    26be:	12 96       	adiw	r26, 0x02	; 2
    26c0:	8c 91       	ld	r24, X
    26c2:	12 97       	sbiw	r26, 0x02	; 2
    26c4:	89 17       	cp	r24, r25
    26c6:	b9 f4       	brne	.+46     	; 0x26f6 <Isb_Obj_Exec+0xd8>
    26c8:	21 15       	cp	r18, r1
    26ca:	31 05       	cpc	r19, r1
    26cc:	a1 f0       	breq	.+40     	; 0x26f6 <Isb_Obj_Exec+0xd8>
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    26ce:	79 82       	std	Y+1, r7	; 0x01
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
    26d0:	3b 83       	std	Y+3, r19	; 0x03
    26d2:	2a 83       	std	Y+2, r18	; 0x02
											TxMsg.SourceId = Isb_Node_Id;
    26d4:	80 91 94 00 	lds	r24, 0x0094
    26d8:	90 91 95 00 	lds	r25, 0x0095
    26dc:	9d 83       	std	Y+5, r25	; 0x05
    26de:	8c 83       	std	Y+4, r24	; 0x04
											TxMsg.Data[0] = ISB_MSG_TOP_1BIT;
    26e0:	8e 82       	std	Y+6, r8	; 0x06
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    26e2:	9f 82       	std	Y+7, r9	; 0x07
											TxMsg.Data[2] = Isb_Obj_1Bit[ObjIndex].Tov;
    26e4:	f8 01       	movw	r30, r16
    26e6:	81 81       	ldd	r24, Z+1	; 0x01
    26e8:	88 87       	std	Y+8, r24	; 0x08
											TxMsg.Data[3] = Isb_Obj_1Bit[ObjIndex].Value;
    26ea:	82 81       	ldd	r24, Z+2	; 0x02
    26ec:	89 87       	std	Y+9, r24	; 0x09
											Isb_SendMsg(&TxMsg);
    26ee:	c5 01       	movw	r24, r10
    26f0:	0e 94 2f 11 	call	0x225e	; 0x225e <Isb_SendMsg>
    26f4:	05 c0       	rjmp	.+10     	; 0x2700 <Isb_Obj_Exec+0xe2>
											break;
    26f6:	13 96       	adiw	r26, 0x03	; 3
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_1Bit_Ch_Array[ObjIndex]);
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
						if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
							if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
								if (Isb_Obj_1Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    26f8:	f1 e0       	ldi	r31, 0x01	; 1
    26fa:	a4 3a       	cpi	r26, 0xA4	; 164
    26fc:	bf 07       	cpc	r27, r31
    26fe:	e1 f6       	brne	.-72     	; 0x26b8 <Isb_Obj_Exec+0x9a>
											TxMsg.Data[3] = Isb_Obj_1Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
											break;
										}
									}
									Isb_Obj_1Bit[ObjIndex].IsChanged = FALSE;
    2700:	f8 01       	movw	r30, r16
    2702:	13 82       	std	Z+3, r1	; 0x03
								}
							}
							if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READONINIT)) {
    2704:	f7 01       	movw	r30, r14
    2706:	80 81       	ld	r24, Z
    2708:	85 ff       	sbrs	r24, 5
    270a:	04 c0       	rjmp	.+8      	; 0x2714 <Isb_Obj_Exec+0xf6>
								// TODO;
								Isb_Obj_1Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    270c:	f8 01       	movw	r30, r16
    270e:	80 81       	ld	r24, Z
    2710:	8f 7d       	andi	r24, 0xDF	; 223
    2712:	80 83       	st	Z, r24
    2714:	08 94       	sec
    2716:	c1 1c       	adc	r12, r1
    2718:	d1 1c       	adc	r13, r1
    271a:	0c 5f       	subi	r16, 0xFC	; 252
    271c:	1f 4f       	sbci	r17, 0xFF	; 255

	void Isb_Obj_Exec(void) {

		#if defined(ISB_OBJ_1BIT_MAX)
			if (bit_is_set(Isb_Obj_1Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
    271e:	f8 e3       	ldi	r31, 0x38	; 56
    2720:	cf 16       	cp	r12, r31
    2722:	d1 04       	cpc	r13, r1
    2724:	09 f0       	breq	.+2      	; 0x2728 <Isb_Obj_Exec+0x10a>
    2726:	a2 cf       	rjmp	.-188    	; 0x266c <Isb_Obj_Exec+0x4e>
								Isb_Obj_1Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
							}
						}
					}
				}
				Isb_Obj_1Bit_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    2728:	80 91 a2 00 	lds	r24, 0x00A2
    272c:	8e 7f       	andi	r24, 0xFE	; 254
    272e:	80 93 a2 00 	sts	0x00A2, r24
			}
		#endif /* ISB_OBJ_1BIT_MAX */

		#if defined(ISB_OBJ_4BIT_MAX)
			if (bit_is_set(Isb_Obj_4Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
    2732:	80 91 a5 00 	lds	r24, 0x00A5
    2736:	80 ff       	sbrs	r24, 0
    2738:	6f c0       	rjmp	.+222    	; 0x2818 <Isb_Obj_Exec+0x1fa>
    273a:	0b ee       	ldi	r16, 0xEB	; 235
    273c:	10 e0       	ldi	r17, 0x00	; 0
    273e:	cc 24       	eor	r12, r12
    2740:	dd 24       	eor	r13, r13
								if (Isb_Obj_4Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_4Bit_Obj_Array[ObjIndex]);
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    2742:	64 e2       	ldi	r22, 0x24	; 36
    2744:	86 2e       	mov	r8, r22
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
											TxMsg.SourceId = Isb_Node_Id;
											TxMsg.Data[0] = ISB_MSG_TOP_4BIT;
    2746:	52 e0       	ldi	r21, 0x02	; 2
    2748:	95 2e       	mov	r9, r21
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
											TxMsg.Data[2] = Isb_Obj_4Bit[ObjIndex].Tov;
											TxMsg.Data[3] = Isb_Obj_4Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
    274a:	5e 01       	movw	r10, r28
    274c:	08 94       	sec
    274e:	a1 1c       	adc	r10, r1
    2750:	b1 1c       	adc	r11, r1
		#endif /* ISB_OBJ_1BIT_MAX */

		#if defined(ISB_OBJ_4BIT_MAX)
			if (bit_is_set(Isb_Obj_4Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_4Bit_Ch_Array[ObjIndex]);
    2752:	f6 01       	movw	r30, r12
    2754:	ec 5b       	subi	r30, 0xBC	; 188
    2756:	fe 4f       	sbci	r31, 0xFE	; 254
    2758:	e4 91       	lpm	r30, Z+
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	ee 0f       	add	r30, r30
    275e:	ff 1f       	adc	r31, r31
    2760:	ec 5a       	subi	r30, 0xAC	; 172
    2762:	fc 4f       	sbci	r31, 0xFC	; 252
    2764:	80 81       	ld	r24, Z
    2766:	80 ff       	sbrs	r24, 0
    2768:	48 c0       	rjmp	.+144    	; 0x27fa <Isb_Obj_Exec+0x1dc>
						if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    276a:	76 01       	movw	r14, r12
    276c:	ee 0c       	add	r14, r14
    276e:	ff 1c       	adc	r15, r15
    2770:	ee 0c       	add	r14, r14
    2772:	ff 1c       	adc	r15, r15
    2774:	8b ee       	ldi	r24, 0xEB	; 235
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	e8 0e       	add	r14, r24
    277a:	f9 1e       	adc	r15, r25
    277c:	f7 01       	movw	r30, r14
    277e:	80 81       	ld	r24, Z
    2780:	80 ff       	sbrs	r24, 0
    2782:	3b c0       	rjmp	.+118    	; 0x27fa <Isb_Obj_Exec+0x1dc>
							if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
    2784:	80 81       	ld	r24, Z
    2786:	83 ff       	sbrs	r24, 3
    2788:	30 c0       	rjmp	.+96     	; 0x27ea <Isb_Obj_Exec+0x1cc>
								if (Isb_Obj_4Bit[ObjIndex].IsChanged == TRUE) {
    278a:	f8 01       	movw	r30, r16
    278c:	83 81       	ldd	r24, Z+3	; 0x03
    278e:	81 30       	cpi	r24, 0x01	; 1
    2790:	61 f5       	brne	.+88     	; 0x27ea <Isb_Obj_Exec+0x1cc>
    2792:	ac e2       	ldi	r26, 0x2C	; 44
    2794:	b1 e0       	ldi	r27, 0x01	; 1
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_4Bit_Obj_Array[ObjIndex]);
    2796:	f6 01       	movw	r30, r12
    2798:	e4 50       	subi	r30, 0x04	; 4
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	94 91       	lpm	r25, Z+
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
    279e:	2d 91       	ld	r18, X+
    27a0:	3c 91       	ld	r19, X
    27a2:	11 97       	sbiw	r26, 0x01	; 1
    27a4:	12 96       	adiw	r26, 0x02	; 2
    27a6:	8c 91       	ld	r24, X
    27a8:	12 97       	sbiw	r26, 0x02	; 2
    27aa:	89 17       	cp	r24, r25
    27ac:	b9 f4       	brne	.+46     	; 0x27dc <Isb_Obj_Exec+0x1be>
    27ae:	21 15       	cp	r18, r1
    27b0:	31 05       	cpc	r19, r1
    27b2:	a1 f0       	breq	.+40     	; 0x27dc <Isb_Obj_Exec+0x1be>
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    27b4:	89 82       	std	Y+1, r8	; 0x01
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
    27b6:	3b 83       	std	Y+3, r19	; 0x03
    27b8:	2a 83       	std	Y+2, r18	; 0x02
											TxMsg.SourceId = Isb_Node_Id;
    27ba:	80 91 94 00 	lds	r24, 0x0094
    27be:	90 91 95 00 	lds	r25, 0x0095
    27c2:	9d 83       	std	Y+5, r25	; 0x05
    27c4:	8c 83       	std	Y+4, r24	; 0x04
											TxMsg.Data[0] = ISB_MSG_TOP_4BIT;
    27c6:	9e 82       	std	Y+6, r9	; 0x06
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    27c8:	9f 82       	std	Y+7, r9	; 0x07
											TxMsg.Data[2] = Isb_Obj_4Bit[ObjIndex].Tov;
    27ca:	f8 01       	movw	r30, r16
    27cc:	81 81       	ldd	r24, Z+1	; 0x01
    27ce:	88 87       	std	Y+8, r24	; 0x08
											TxMsg.Data[3] = Isb_Obj_4Bit[ObjIndex].Value;
    27d0:	82 81       	ldd	r24, Z+2	; 0x02
    27d2:	89 87       	std	Y+9, r24	; 0x09
											Isb_SendMsg(&TxMsg);
    27d4:	c5 01       	movw	r24, r10
    27d6:	0e 94 2f 11 	call	0x225e	; 0x225e <Isb_SendMsg>
    27da:	05 c0       	rjmp	.+10     	; 0x27e6 <Isb_Obj_Exec+0x1c8>
											break;
    27dc:	13 96       	adiw	r26, 0x03	; 3
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_4Bit_Ch_Array[ObjIndex]);
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
						if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
							if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
								if (Isb_Obj_4Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    27de:	f1 e0       	ldi	r31, 0x01	; 1
    27e0:	a4 3a       	cpi	r26, 0xA4	; 164
    27e2:	bf 07       	cpc	r27, r31
    27e4:	e1 f6       	brne	.-72     	; 0x279e <Isb_Obj_Exec+0x180>
											TxMsg.Data[3] = Isb_Obj_4Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
											break;
										}
									}
									Isb_Obj_4Bit[ObjIndex].IsChanged = FALSE;
    27e6:	f8 01       	movw	r30, r16
    27e8:	13 82       	std	Z+3, r1	; 0x03
								}
							}
							if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READONINIT)) {
    27ea:	f7 01       	movw	r30, r14
    27ec:	80 81       	ld	r24, Z
    27ee:	85 ff       	sbrs	r24, 5
    27f0:	04 c0       	rjmp	.+8      	; 0x27fa <Isb_Obj_Exec+0x1dc>
								// TODO;
								Isb_Obj_4Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    27f2:	f8 01       	movw	r30, r16
    27f4:	80 81       	ld	r24, Z
    27f6:	8f 7d       	andi	r24, 0xDF	; 223
    27f8:	80 83       	st	Z, r24
    27fa:	08 94       	sec
    27fc:	c1 1c       	adc	r12, r1
    27fe:	d1 1c       	adc	r13, r1
    2800:	0c 5f       	subi	r16, 0xFC	; 252
    2802:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		#endif /* ISB_OBJ_1BIT_MAX */

		#if defined(ISB_OBJ_4BIT_MAX)
			if (bit_is_set(Isb_Obj_4Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
    2804:	f8 e0       	ldi	r31, 0x08	; 8
    2806:	cf 16       	cp	r12, r31
    2808:	d1 04       	cpc	r13, r1
    280a:	09 f0       	breq	.+2      	; 0x280e <Isb_Obj_Exec+0x1f0>
    280c:	a2 cf       	rjmp	.-188    	; 0x2752 <Isb_Obj_Exec+0x134>
								Isb_Obj_4Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
							}
						}
					}
				}
				Isb_Obj_4Bit_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    280e:	80 91 a5 00 	lds	r24, 0x00A5
    2812:	8e 7f       	andi	r24, 0xFE	; 254
    2814:	80 93 a5 00 	sts	0x00A5, r24
			}
		#endif /* ISB_OBJ_4BIT_MAX */

		#if defined(ISB_OBJ_8BIT_MAX)
			if (bit_is_set(Isb_Obj_8Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
    2818:	80 91 a8 00 	lds	r24, 0x00A8
    281c:	80 ff       	sbrs	r24, 0
    281e:	71 c0       	rjmp	.+226    	; 0x2902 <Isb_Obj_Exec+0x2e4>
    2820:	0c e0       	ldi	r16, 0x0C	; 12
    2822:	11 e0       	ldi	r17, 0x01	; 1
    2824:	cc 24       	eor	r12, r12
    2826:	dd 24       	eor	r13, r13
								if (Isb_Obj_8Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_8Bit_Obj_Array[ObjIndex]);
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    2828:	24 e2       	ldi	r18, 0x24	; 36
    282a:	72 2e       	mov	r7, r18
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
											TxMsg.SourceId = Isb_Node_Id;
											TxMsg.Data[0] = ISB_MSG_TOP_8BIT;
    282c:	93 e0       	ldi	r25, 0x03	; 3
    282e:	89 2e       	mov	r8, r25
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    2830:	82 e0       	ldi	r24, 0x02	; 2
    2832:	98 2e       	mov	r9, r24
											TxMsg.Data[2] = Isb_Obj_8Bit[ObjIndex].Tov;
											TxMsg.Data[3] = Isb_Obj_8Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
    2834:	5e 01       	movw	r10, r28
    2836:	08 94       	sec
    2838:	a1 1c       	adc	r10, r1
    283a:	b1 1c       	adc	r11, r1
		#endif /* ISB_OBJ_4BIT_MAX */

		#if defined(ISB_OBJ_8BIT_MAX)
			if (bit_is_set(Isb_Obj_8Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_8Bit_Ch_Array[ObjIndex]);
    283c:	f6 01       	movw	r30, r12
    283e:	e4 5b       	subi	r30, 0xB4	; 180
    2840:	fe 4f       	sbci	r31, 0xFE	; 254
    2842:	e4 91       	lpm	r30, Z+
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	ee 0f       	add	r30, r30
    2848:	ff 1f       	adc	r31, r31
    284a:	ec 5a       	subi	r30, 0xAC	; 172
    284c:	fc 4f       	sbci	r31, 0xFC	; 252
    284e:	80 81       	ld	r24, Z
    2850:	80 ff       	sbrs	r24, 0
    2852:	48 c0       	rjmp	.+144    	; 0x28e4 <Isb_Obj_Exec+0x2c6>
						if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    2854:	76 01       	movw	r14, r12
    2856:	ee 0c       	add	r14, r14
    2858:	ff 1c       	adc	r15, r15
    285a:	ee 0c       	add	r14, r14
    285c:	ff 1c       	adc	r15, r15
    285e:	8c e0       	ldi	r24, 0x0C	; 12
    2860:	91 e0       	ldi	r25, 0x01	; 1
    2862:	e8 0e       	add	r14, r24
    2864:	f9 1e       	adc	r15, r25
    2866:	f7 01       	movw	r30, r14
    2868:	80 81       	ld	r24, Z
    286a:	80 ff       	sbrs	r24, 0
    286c:	3b c0       	rjmp	.+118    	; 0x28e4 <Isb_Obj_Exec+0x2c6>
							if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
    286e:	80 81       	ld	r24, Z
    2870:	83 ff       	sbrs	r24, 3
    2872:	30 c0       	rjmp	.+96     	; 0x28d4 <Isb_Obj_Exec+0x2b6>
								if (Isb_Obj_8Bit[ObjIndex].IsChanged == TRUE) {
    2874:	f8 01       	movw	r30, r16
    2876:	83 81       	ldd	r24, Z+3	; 0x03
    2878:	81 30       	cpi	r24, 0x01	; 1
    287a:	61 f5       	brne	.+88     	; 0x28d4 <Isb_Obj_Exec+0x2b6>
    287c:	ac e2       	ldi	r26, 0x2C	; 44
    287e:	b1 e0       	ldi	r27, 0x01	; 1
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_8Bit_Obj_Array[ObjIndex]);
    2880:	f6 01       	movw	r30, r12
    2882:	ec 5f       	subi	r30, 0xFC	; 252
    2884:	fe 4f       	sbci	r31, 0xFE	; 254
    2886:	94 91       	lpm	r25, Z+
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
    2888:	2d 91       	ld	r18, X+
    288a:	3c 91       	ld	r19, X
    288c:	11 97       	sbiw	r26, 0x01	; 1
    288e:	12 96       	adiw	r26, 0x02	; 2
    2890:	8c 91       	ld	r24, X
    2892:	12 97       	sbiw	r26, 0x02	; 2
    2894:	89 17       	cp	r24, r25
    2896:	b9 f4       	brne	.+46     	; 0x28c6 <Isb_Obj_Exec+0x2a8>
    2898:	21 15       	cp	r18, r1
    289a:	31 05       	cpc	r19, r1
    289c:	a1 f0       	breq	.+40     	; 0x28c6 <Isb_Obj_Exec+0x2a8>
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    289e:	79 82       	std	Y+1, r7	; 0x01
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
    28a0:	3b 83       	std	Y+3, r19	; 0x03
    28a2:	2a 83       	std	Y+2, r18	; 0x02
											TxMsg.SourceId = Isb_Node_Id;
    28a4:	80 91 94 00 	lds	r24, 0x0094
    28a8:	90 91 95 00 	lds	r25, 0x0095
    28ac:	9d 83       	std	Y+5, r25	; 0x05
    28ae:	8c 83       	std	Y+4, r24	; 0x04
											TxMsg.Data[0] = ISB_MSG_TOP_8BIT;
    28b0:	8e 82       	std	Y+6, r8	; 0x06
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    28b2:	9f 82       	std	Y+7, r9	; 0x07
											TxMsg.Data[2] = Isb_Obj_8Bit[ObjIndex].Tov;
    28b4:	f8 01       	movw	r30, r16
    28b6:	81 81       	ldd	r24, Z+1	; 0x01
    28b8:	88 87       	std	Y+8, r24	; 0x08
											TxMsg.Data[3] = Isb_Obj_8Bit[ObjIndex].Value;
    28ba:	82 81       	ldd	r24, Z+2	; 0x02
    28bc:	89 87       	std	Y+9, r24	; 0x09
											Isb_SendMsg(&TxMsg);
    28be:	c5 01       	movw	r24, r10
    28c0:	0e 94 2f 11 	call	0x225e	; 0x225e <Isb_SendMsg>
    28c4:	05 c0       	rjmp	.+10     	; 0x28d0 <Isb_Obj_Exec+0x2b2>
											break;
    28c6:	13 96       	adiw	r26, 0x03	; 3
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_8Bit_Ch_Array[ObjIndex]);
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
						if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
							if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
								if (Isb_Obj_8Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    28c8:	f1 e0       	ldi	r31, 0x01	; 1
    28ca:	a4 3a       	cpi	r26, 0xA4	; 164
    28cc:	bf 07       	cpc	r27, r31
    28ce:	e1 f6       	brne	.-72     	; 0x2888 <Isb_Obj_Exec+0x26a>
											TxMsg.Data[3] = Isb_Obj_8Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
											break;
										}
									}
									Isb_Obj_8Bit[ObjIndex].IsChanged = FALSE;
    28d0:	f8 01       	movw	r30, r16
    28d2:	13 82       	std	Z+3, r1	; 0x03
								}
							}
							if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READONINIT)) {
    28d4:	f7 01       	movw	r30, r14
    28d6:	80 81       	ld	r24, Z
    28d8:	85 ff       	sbrs	r24, 5
    28da:	04 c0       	rjmp	.+8      	; 0x28e4 <Isb_Obj_Exec+0x2c6>
								// TODO;
								Isb_Obj_8Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    28dc:	f8 01       	movw	r30, r16
    28de:	80 81       	ld	r24, Z
    28e0:	8f 7d       	andi	r24, 0xDF	; 223
    28e2:	80 83       	st	Z, r24
    28e4:	08 94       	sec
    28e6:	c1 1c       	adc	r12, r1
    28e8:	d1 1c       	adc	r13, r1
    28ea:	0c 5f       	subi	r16, 0xFC	; 252
    28ec:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		#endif /* ISB_OBJ_4BIT_MAX */

		#if defined(ISB_OBJ_8BIT_MAX)
			if (bit_is_set(Isb_Obj_8Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
    28ee:	f8 e0       	ldi	r31, 0x08	; 8
    28f0:	cf 16       	cp	r12, r31
    28f2:	d1 04       	cpc	r13, r1
    28f4:	09 f0       	breq	.+2      	; 0x28f8 <Isb_Obj_Exec+0x2da>
    28f6:	a2 cf       	rjmp	.-188    	; 0x283c <Isb_Obj_Exec+0x21e>
								Isb_Obj_8Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
							}
						}
					}
				}
				Isb_Obj_8Bit_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    28f8:	80 91 a8 00 	lds	r24, 0x00A8
    28fc:	8e 7f       	andi	r24, 0xFE	; 254
    28fe:	80 93 a8 00 	sts	0x00A8, r24
				}
				Isb_Obj_Float_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
			}
		#endif /* ISB_OBJ_FLOAT_MAX */

	}
    2902:	2d 96       	adiw	r28, 0x0d	; 13
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	f8 94       	cli
    2908:	de bf       	out	0x3e, r29	; 62
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	cd bf       	out	0x3d, r28	; 61
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	1f 91       	pop	r17
    2914:	0f 91       	pop	r16
    2916:	ff 90       	pop	r15
    2918:	ef 90       	pop	r14
    291a:	df 90       	pop	r13
    291c:	cf 90       	pop	r12
    291e:	bf 90       	pop	r11
    2920:	af 90       	pop	r10
    2922:	9f 90       	pop	r9
    2924:	8f 90       	pop	r8
    2926:	7f 90       	pop	r7
    2928:	08 95       	ret

0000292a <Isb_Config_Rx>:
#ifndef ISB_SRV_CONFIG_C_
	#define ISB_SRV_CONFIG_C_



	void Isb_Config_Rx(Isb_Msg_t * aIsb_Msg) {
    292a:	df 92       	push	r13
    292c:	ef 92       	push	r14
    292e:	ff 92       	push	r15
    2930:	0f 93       	push	r16
    2932:	1f 93       	push	r17
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	2d 97       	sbiw	r28, 0x0d	; 13
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	ac 01       	movw	r20, r24
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
    294a:	fc 01       	movw	r30, r24
    294c:	d0 80       	ld	r13, Z
    294e:	6d 2d       	mov	r22, r13
    2950:	6f 70       	andi	r22, 0x0F	; 15
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
    2952:	e3 80       	ldd	r14, Z+3	; 0x03
    2954:	f4 80       	ldd	r15, Z+4	; 0x04
		MsgTx.SourceId = Isb_Node_Id;
    2956:	00 91 94 00 	lds	r16, 0x0094
    295a:	10 91 95 00 	lds	r17, 0x0095
    295e:	dc 01       	movw	r26, r24
    2960:	fe 01       	movw	r30, r28
    2962:	36 96       	adiw	r30, 0x06	; 6
		for (uint8_t i = 0; i < Dlc; i++) {
    2964:	9e 01       	movw	r18, r28
    2966:	26 0f       	add	r18, r22
    2968:	31 1d       	adc	r19, r1
    296a:	2a 5f       	subi	r18, 0xFA	; 250
    296c:	3f 4f       	sbci	r19, 0xFF	; 255
    296e:	04 c0       	rjmp	.+8      	; 0x2978 <Isb_Config_Rx+0x4e>
			MsgTx.Data[i] = aIsb_Msg->Data[i];
    2970:	14 96       	adiw	r26, 0x04	; 4
    2972:	8c 91       	ld	r24, X
    2974:	14 97       	sbiw	r26, 0x04	; 4
    2976:	81 93       	st	Z+, r24
    2978:	11 96       	adiw	r26, 0x01	; 1
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
		MsgTx.SourceId = Isb_Node_Id;
		for (uint8_t i = 0; i < Dlc; i++) {
    297a:	e2 17       	cp	r30, r18
    297c:	f3 07       	cpc	r31, r19
    297e:	c1 f7       	brne	.-16     	; 0x2970 <Isb_Config_Rx+0x46>
			MsgTx.Data[i] = aIsb_Msg->Data[i];
		}
		if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_SETMODE) {
    2980:	fa 01       	movw	r30, r20
    2982:	85 81       	ldd	r24, Z+5	; 0x05
    2984:	82 30       	cpi	r24, 0x02	; 2
    2986:	09 f0       	breq	.+2      	; 0x298a <Isb_Config_Rx+0x60>
    2988:	90 c0       	rjmp	.+288    	; 0x2aaa <Isb_Config_Rx+0x180>
			if (Dlc == ISB_MSG_FLAGS_DLC_2) {
    298a:	62 30       	cpi	r22, 0x02	; 2
    298c:	09 f0       	breq	.+2      	; 0x2990 <Isb_Config_Rx+0x66>
    298e:	46 c1       	rjmp	.+652    	; 0x2c1c <Isb_Config_Rx+0x2f2>
				MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_2;
				MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    2990:	8e 81       	ldd	r24, Y+6	; 0x06
    2992:	80 6c       	ori	r24, 0xC0	; 192
    2994:	8e 83       	std	Y+6, r24	; 0x06
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__BL_NORM) {
    2996:	26 81       	ldd	r18, Z+6	; 0x06
    2998:	22 23       	and	r18, r18
    299a:	c1 f4       	brne	.+48     	; 0x29cc <Isb_Config_Rx+0xa2>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    299c:	e1 99       	sbic	0x1c, 1	; 28
    299e:	fe cf       	rjmp	.-4      	; 0x299c <Isb_Config_Rx+0x72>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    29a0:	82 e1       	ldi	r24, 0x12	; 18
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	9f bb       	out	0x1f, r25	; 31
    29a6:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    29a8:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    29aa:	8d b3       	in	r24, 0x1d	; 29
	}



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
    29ac:	88 23       	and	r24, r24
    29ae:	09 f4       	brne	.+2      	; 0x29b2 <Isb_Config_Rx+0x88>
    29b0:	62 c0       	rjmp	.+196    	; 0x2a76 <Isb_Config_Rx+0x14c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    29b2:	e1 99       	sbic	0x1c, 1	; 28
    29b4:	fe cf       	rjmp	.-4      	; 0x29b2 <Isb_Config_Rx+0x88>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    29b6:	82 e1       	ldi	r24, 0x12	; 18
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	9f bb       	out	0x1f, r25	; 31
    29bc:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    29be:	1d ba       	out	0x1d, r1	; 29

    __asm__ __volatile__ (
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	f8 94       	cli
    29c4:	e2 9a       	sbi	0x1c, 2	; 28
    29c6:	e1 9a       	sbi	0x1c, 1	; 28
    29c8:	0f be       	out	0x3f, r0	; 63
    29ca:	6e c0       	rjmp	.+220    	; 0x2aa8 <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__BL_FLASH) {
    29cc:	21 30       	cpi	r18, 0x01	; 1
    29ce:	c9 f4       	brne	.+50     	; 0x2a02 <Isb_Config_Rx+0xd8>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    29d0:	e1 99       	sbic	0x1c, 1	; 28
    29d2:	fe cf       	rjmp	.-4      	; 0x29d0 <Isb_Config_Rx+0xa6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    29d4:	82 e1       	ldi	r24, 0x12	; 18
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	9f bb       	out	0x1f, r25	; 31
    29da:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    29dc:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    29de:	8d b3       	in	r24, 0x1d	; 29
    29e0:	81 30       	cpi	r24, 0x01	; 1
    29e2:	09 f4       	brne	.+2      	; 0x29e6 <Isb_Config_Rx+0xbc>
    29e4:	61 c0       	rjmp	.+194    	; 0x2aa8 <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    29e6:	e1 99       	sbic	0x1c, 1	; 28
    29e8:	fe cf       	rjmp	.-4      	; 0x29e6 <Isb_Config_Rx+0xbc>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    29ea:	82 e1       	ldi	r24, 0x12	; 18
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	9f bb       	out	0x1f, r25	; 31
    29f0:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	e2 9a       	sbi	0x1c, 2	; 28
    29fc:	e1 9a       	sbi	0x1c, 1	; 28
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	53 c0       	rjmp	.+166    	; 0x2aa8 <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_FLASH);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__FW_NORM) {
    2a02:	28 30       	cpi	r18, 0x08	; 8
    2a04:	09 f0       	breq	.+2      	; 0x2a08 <Isb_Config_Rx+0xde>
    2a06:	37 c0       	rjmp	.+110    	; 0x2a76 <Isb_Config_Rx+0x14c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2a08:	e1 99       	sbic	0x1c, 1	; 28
    2a0a:	fe cf       	rjmp	.-4      	; 0x2a08 <Isb_Config_Rx+0xde>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2a0c:	8b e1       	ldi	r24, 0x1B	; 27
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	9f bb       	out	0x1f, r25	; 31
    2a12:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2a14:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2a16:	2d b3       	in	r18, 0x1d	; 29
					uint8_t crc = lib_eep_read_byte((uint8_t *)EEP__ISB_CONFIG_CRC);
					crc++;
    2a18:	2f 5f       	subi	r18, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2a1a:	e1 99       	sbic	0x1c, 1	; 28
    2a1c:	fe cf       	rjmp	.-4      	; 0x2a1a <Isb_Config_Rx+0xf0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2a1e:	8b e1       	ldi	r24, 0x1B	; 27
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	9f bb       	out	0x1f, r25	; 31
    2a24:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2a26:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2a28:	8d b3       	in	r24, 0x1d	; 29
    2a2a:	82 17       	cp	r24, r18
    2a2c:	61 f0       	breq	.+24     	; 0x2a46 <Isb_Config_Rx+0x11c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2a2e:	e1 99       	sbic	0x1c, 1	; 28
    2a30:	fe cf       	rjmp	.-4      	; 0x2a2e <Isb_Config_Rx+0x104>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2a32:	8b e1       	ldi	r24, 0x1B	; 27
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	9f bb       	out	0x1f, r25	; 31
    2a38:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2a3a:	2d bb       	out	0x1d, r18	; 29

    __asm__ __volatile__ (
    2a3c:	0f b6       	in	r0, 0x3f	; 63
    2a3e:	f8 94       	cli
    2a40:	e2 9a       	sbi	0x1c, 2	; 28
    2a42:	e1 9a       	sbi	0x1c, 1	; 28
    2a44:	0f be       	out	0x3f, r0	; 63
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2a46:	e1 99       	sbic	0x1c, 1	; 28
    2a48:	fe cf       	rjmp	.-4      	; 0x2a46 <Isb_Config_Rx+0x11c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2a4a:	82 e1       	ldi	r24, 0x12	; 18
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	9f bb       	out	0x1f, r25	; 31
    2a50:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2a52:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2a54:	8d b3       	in	r24, 0x1d	; 29
    2a56:	88 30       	cpi	r24, 0x08	; 8
    2a58:	39 f1       	breq	.+78     	; 0x2aa8 <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2a5a:	e1 99       	sbic	0x1c, 1	; 28
    2a5c:	fe cf       	rjmp	.-4      	; 0x2a5a <Isb_Config_Rx+0x130>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2a5e:	82 e1       	ldi	r24, 0x12	; 18
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	9f bb       	out	0x1f, r25	; 31
    2a64:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2a66:	88 e0       	ldi	r24, 0x08	; 8
    2a68:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	e2 9a       	sbi	0x1c, 2	; 28
    2a70:	e1 9a       	sbi	0x1c, 1	; 28
    2a72:	0f be       	out	0x3f, r0	; 63
    2a74:	19 c0       	rjmp	.+50     	; 0x2aa8 <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_CONFIG_CRC, crc);
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__FW_NORM);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__FW_CFG) {
    2a76:	29 30       	cpi	r18, 0x09	; 9
    2a78:	b9 f4       	brne	.+46     	; 0x2aa8 <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2a7a:	e1 99       	sbic	0x1c, 1	; 28
    2a7c:	fe cf       	rjmp	.-4      	; 0x2a7a <Isb_Config_Rx+0x150>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2a7e:	82 e1       	ldi	r24, 0x12	; 18
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	9f bb       	out	0x1f, r25	; 31
    2a84:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2a86:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2a88:	8d b3       	in	r24, 0x1d	; 29
    2a8a:	89 30       	cpi	r24, 0x09	; 9
    2a8c:	69 f0       	breq	.+26     	; 0x2aa8 <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2a8e:	e1 99       	sbic	0x1c, 1	; 28
    2a90:	fe cf       	rjmp	.-4      	; 0x2a8e <Isb_Config_Rx+0x164>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2a92:	82 e1       	ldi	r24, 0x12	; 18
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	9f bb       	out	0x1f, r25	; 31
    2a98:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2a9a:	89 e0       	ldi	r24, 0x09	; 9
    2a9c:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	e2 9a       	sbi	0x1c, 2	; 28
    2aa4:	e1 9a       	sbi	0x1c, 1	; 28
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	ff cf       	rjmp	.-2      	; 0x2aa8 <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__FW_CFG);
				}
				Node_Reboot();
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_INITEEPROM) {
    2aaa:	86 30       	cpi	r24, 0x06	; 6
    2aac:	09 f0       	breq	.+2      	; 0x2ab0 <Isb_Config_Rx+0x186>
    2aae:	43 c0       	rjmp	.+134    	; 0x2b36 <Isb_Config_Rx+0x20c>
			if (Dlc == ISB_MSG_FLAGS_DLC_1) {
    2ab0:	61 30       	cpi	r22, 0x01	; 1
    2ab2:	09 f0       	breq	.+2      	; 0x2ab6 <Isb_Config_Rx+0x18c>
    2ab4:	b3 c0       	rjmp	.+358    	; 0x2c1c <Isb_Config_Rx+0x2f2>
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
    2ab6:	80 91 97 00 	lds	r24, 0x0097
    2aba:	89 30       	cpi	r24, 0x09	; 9
    2abc:	09 f0       	breq	.+2      	; 0x2ac0 <Isb_Config_Rx+0x196>
    2abe:	ae c0       	rjmp	.+348    	; 0x2c1c <Isb_Config_Rx+0x2f2>
					MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_1;
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
    2ac0:	80 91 96 00 	lds	r24, 0x0096
    2ac4:	28 2f       	mov	r18, r24
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
						wdt_reset();
    2ac8:	a8 95       	wdr
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2aca:	e1 99       	sbic	0x1c, 1	; 28
    2acc:	fe cf       	rjmp	.-4      	; 0x2aca <Isb_Config_Rx+0x1a0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2ace:	3f bb       	out	0x1f, r19	; 31
    2ad0:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2ad2:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2ad4:	8d b3       	in	r24, 0x1d	; 29
    2ad6:	88 23       	and	r24, r24
    2ad8:	51 f0       	breq	.+20     	; 0x2aee <Isb_Config_Rx+0x1c4>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2ada:	e1 99       	sbic	0x1c, 1	; 28
    2adc:	fe cf       	rjmp	.-4      	; 0x2ada <Isb_Config_Rx+0x1b0>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2ade:	3f bb       	out	0x1f, r19	; 31
    2ae0:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    2ae2:	1d ba       	out	0x1d, r1	; 29

    __asm__ __volatile__ (
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	f8 94       	cli
    2ae8:	e2 9a       	sbi	0x1c, 2	; 28
    2aea:	e1 9a       	sbi	0x1c, 1	; 28
    2aec:	0f be       	out	0x3f, r0	; 63
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_INITEEPROM) {
			if (Dlc == ISB_MSG_FLAGS_DLC_1) {
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
					MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_1;
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
    2aee:	2f 5f       	subi	r18, 0xFF	; 255
    2af0:	3f 4f       	sbci	r19, 0xFF	; 255
    2af2:	f2 e0       	ldi	r31, 0x02	; 2
    2af4:	20 30       	cpi	r18, 0x00	; 0
    2af6:	3f 07       	cpc	r19, r31
    2af8:	38 f3       	brcs	.-50     	; 0x2ac8 <Isb_Config_Rx+0x19e>
    2afa:	2c e1       	ldi	r18, 0x1C	; 28
    2afc:	30 e0       	ldi	r19, 0x00	; 0
						wdt_reset();
						lib_eep_write_byte((uint8_t *) ee_Addr, 0x00);
					}
					for (uint8_t i = 0; i < 4; i++) {
						lib_eep_write_byte((uint8_t *)(EEP__ISB_CONFIG_CODE_0 + i), Isb_Firmware_Code[i]);
    2afe:	f9 01       	movw	r30, r18
    2b00:	ec 5b       	subi	r30, 0xBC	; 188
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2b06:	e1 99       	sbic	0x1c, 1	; 28
    2b08:	fe cf       	rjmp	.-4      	; 0x2b06 <Isb_Config_Rx+0x1dc>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2b0a:	3f bb       	out	0x1f, r19	; 31
    2b0c:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2b0e:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2b10:	8d b3       	in	r24, 0x1d	; 29
    2b12:	8e 17       	cp	r24, r30
    2b14:	51 f0       	breq	.+20     	; 0x2b2a <Isb_Config_Rx+0x200>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2b16:	e1 99       	sbic	0x1c, 1	; 28
    2b18:	fe cf       	rjmp	.-4      	; 0x2b16 <Isb_Config_Rx+0x1ec>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2b1a:	3f bb       	out	0x1f, r19	; 31
    2b1c:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    2b1e:	ed bb       	out	0x1d, r30	; 29

    __asm__ __volatile__ (
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	e2 9a       	sbi	0x1c, 2	; 28
    2b26:	e1 9a       	sbi	0x1c, 1	; 28
    2b28:	0f be       	out	0x3f, r0	; 63
    2b2a:	2f 5f       	subi	r18, 0xFF	; 255
    2b2c:	3f 4f       	sbci	r19, 0xFF	; 255
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
						wdt_reset();
						lib_eep_write_byte((uint8_t *) ee_Addr, 0x00);
					}
					for (uint8_t i = 0; i < 4; i++) {
    2b2e:	20 32       	cpi	r18, 0x20	; 32
    2b30:	31 05       	cpc	r19, r1
    2b32:	29 f7       	brne	.-54     	; 0x2afe <Isb_Config_Rx+0x1d4>
    2b34:	ff cf       	rjmp	.-2      	; 0x2b34 <Isb_Config_Rx+0x20a>
					}
					Node_Reboot();
				}
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_READEEPROMBLOCK) {
    2b36:	87 30       	cpi	r24, 0x07	; 7
    2b38:	71 f5       	brne	.+92     	; 0x2b96 <Isb_Config_Rx+0x26c>
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
    2b3a:	64 30       	cpi	r22, 0x04	; 4
    2b3c:	08 f4       	brcc	.+2      	; 0x2b40 <Isb_Config_Rx+0x216>
    2b3e:	6e c0       	rjmp	.+220    	; 0x2c1c <Isb_Config_Rx+0x2f2>
				Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
    2b40:	fa 01       	movw	r30, r20
    2b42:	97 81       	ldd	r25, Z+7	; 0x07
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	26 81       	ldd	r18, Z+6	; 0x06
    2b48:	dc 01       	movw	r26, r24
    2b4a:	a2 0f       	add	r26, r18
    2b4c:	b1 1d       	adc	r27, r1
				if (Addr < EEP_SIZE) {
    2b4e:	f2 e0       	ldi	r31, 0x02	; 2
    2b50:	a0 30       	cpi	r26, 0x00	; 0
    2b52:	bf 07       	cpc	r27, r31
    2b54:	08 f0       	brcs	.+2      	; 0x2b58 <Isb_Config_Rx+0x22e>
    2b56:	62 c0       	rjmp	.+196    	; 0x2c1c <Isb_Config_Rx+0x2f2>
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    2b58:	8e 81       	ldd	r24, Y+6	; 0x06
    2b5a:	80 6c       	ori	r24, 0xC0	; 192
    2b5c:	8e 83       	std	Y+6, r24	; 0x06
    2b5e:	40 e0       	ldi	r20, 0x00	; 0
					for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2b60:	26 2f       	mov	r18, r22
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	23 50       	subi	r18, 0x03	; 3
    2b66:	30 40       	sbci	r19, 0x00	; 0
						MsgTx.Data[3 + i] = lib_eep_read_byte((uint8_t *)(Addr + i));
    2b68:	be 01       	movw	r22, r28
    2b6a:	67 5f       	subi	r22, 0xF7	; 247
    2b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b6e:	0d c0       	rjmp	.+26     	; 0x2b8a <Isb_Config_Rx+0x260>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2b70:	e1 99       	sbic	0x1c, 1	; 28
    2b72:	fe cf       	rjmp	.-4      	; 0x2b70 <Isb_Config_Rx+0x246>
    2b74:	cd 01       	movw	r24, r26
    2b76:	84 0f       	add	r24, r20
    2b78:	91 1d       	adc	r25, r1
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2b7a:	9f bb       	out	0x1f, r25	; 31
    2b7c:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2b7e:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2b80:	8d b3       	in	r24, 0x1d	; 29
    2b82:	e6 0f       	add	r30, r22
    2b84:	f7 1f       	adc	r31, r23
    2b86:	80 83       	st	Z, r24
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_READEEPROMBLOCK) {
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
				Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
				if (Addr < EEP_SIZE) {
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2b88:	4f 5f       	subi	r20, 0xFF	; 255
    2b8a:	e4 2f       	mov	r30, r20
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	e2 17       	cp	r30, r18
    2b90:	f3 07       	cpc	r31, r19
    2b92:	74 f3       	brlt	.-36     	; 0x2b70 <Isb_Config_Rx+0x246>
    2b94:	43 c0       	rjmp	.+134    	; 0x2c1c <Isb_Config_Rx+0x2f2>
						MsgTx.Data[3 + i] = lib_eep_read_byte((uint8_t *)(Addr + i));
					}
				}
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_WRITEEEPROMBLOCK) {
    2b96:	88 30       	cpi	r24, 0x08	; 8
    2b98:	09 f0       	breq	.+2      	; 0x2b9c <Isb_Config_Rx+0x272>
    2b9a:	40 c0       	rjmp	.+128    	; 0x2c1c <Isb_Config_Rx+0x2f2>
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
    2b9c:	64 30       	cpi	r22, 0x04	; 4
    2b9e:	08 f4       	brcc	.+2      	; 0x2ba2 <Isb_Config_Rx+0x278>
    2ba0:	3d c0       	rjmp	.+122    	; 0x2c1c <Isb_Config_Rx+0x2f2>
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
    2ba2:	80 91 97 00 	lds	r24, 0x0097
    2ba6:	89 30       	cpi	r24, 0x09	; 9
    2ba8:	09 f0       	breq	.+2      	; 0x2bac <Isb_Config_Rx+0x282>
    2baa:	38 c0       	rjmp	.+112    	; 0x2c1c <Isb_Config_Rx+0x2f2>
					Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
    2bac:	fa 01       	movw	r30, r20
    2bae:	97 81       	ldd	r25, Z+7	; 0x07
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	26 81       	ldd	r18, Z+6	; 0x06
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	a2 0f       	add	r26, r18
    2bb8:	b1 1d       	adc	r27, r1
					if ((Addr >= Isb_Firmware_Offset) & (Addr < EEP_SIZE)) {
    2bba:	80 91 96 00 	lds	r24, 0x0096
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	a8 17       	cp	r26, r24
    2bc2:	b9 07       	cpc	r27, r25
    2bc4:	58 f1       	brcs	.+86     	; 0x2c1c <Isb_Config_Rx+0x2f2>
    2bc6:	f2 e0       	ldi	r31, 0x02	; 2
    2bc8:	a0 30       	cpi	r26, 0x00	; 0
    2bca:	bf 07       	cpc	r27, r31
    2bcc:	38 f5       	brcc	.+78     	; 0x2c1c <Isb_Config_Rx+0x2f2>
						MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    2bce:	8e 81       	ldd	r24, Y+6	; 0x06
    2bd0:	80 6c       	ori	r24, 0xC0	; 192
    2bd2:	8e 83       	std	Y+6, r24	; 0x06
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
						for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2bd6:	26 2f       	mov	r18, r22
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	23 50       	subi	r18, 0x03	; 3
    2bdc:	30 40       	sbci	r19, 0x00	; 0
    2bde:	19 c0       	rjmp	.+50     	; 0x2c12 <Isb_Config_Rx+0x2e8>
							lib_eep_write_byte((uint8_t *)(Addr + i), aIsb_Msg->Data[3 + i]);
    2be0:	bf 01       	movw	r22, r30
    2be2:	6a 0f       	add	r22, r26
    2be4:	7b 1f       	adc	r23, r27
    2be6:	e4 0f       	add	r30, r20
    2be8:	f5 1f       	adc	r31, r21
    2bea:	e0 85       	ldd	r30, Z+8	; 0x08
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2bec:	e1 99       	sbic	0x1c, 1	; 28
    2bee:	fe cf       	rjmp	.-4      	; 0x2bec <Isb_Config_Rx+0x2c2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2bf0:	7f bb       	out	0x1f, r23	; 31
    2bf2:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
    2bf4:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2bf6:	8d b3       	in	r24, 0x1d	; 29
    2bf8:	8e 17       	cp	r24, r30
    2bfa:	51 f0       	breq	.+20     	; 0x2c10 <Isb_Config_Rx+0x2e6>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2bfc:	e1 99       	sbic	0x1c, 1	; 28
    2bfe:	fe cf       	rjmp	.-4      	; 0x2bfc <Isb_Config_Rx+0x2d2>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2c00:	7f bb       	out	0x1f, r23	; 31
    2c02:	6e bb       	out	0x1e, r22	; 30
#endif
    EEDR = __value;
    2c04:	ed bb       	out	0x1d, r30	; 29

    __asm__ __volatile__ (
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	f8 94       	cli
    2c0a:	e2 9a       	sbi	0x1c, 2	; 28
    2c0c:	e1 9a       	sbi	0x1c, 1	; 28
    2c0e:	0f be       	out	0x3f, r0	; 63
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
					Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
					if ((Addr >= Isb_Firmware_Offset) & (Addr < EEP_SIZE)) {
						MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
						for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2c10:	9f 5f       	subi	r25, 0xFF	; 255
    2c12:	e9 2f       	mov	r30, r25
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	e2 17       	cp	r30, r18
    2c18:	f3 07       	cpc	r31, r19
    2c1a:	14 f3       	brlt	.-60     	; 0x2be0 <Isb_Config_Rx+0x2b6>
						}
					}
				}
			}
		}
		MsgTx.Data[0] |= ISB_CONFIG_ANSWER_NACK;
    2c1c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c1e:	80 64       	ori	r24, 0x40	; 64
    2c20:	8e 83       	std	Y+6, r24	; 0x06
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
		MsgTx.SourceId = Isb_Node_Id;
    2c22:	1d 83       	std	Y+5, r17	; 0x05
    2c24:	0c 83       	std	Y+4, r16	; 0x04
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
    2c26:	fb 82       	std	Y+3, r15	; 0x03
    2c28:	ea 82       	std	Y+2, r14	; 0x02
	void Isb_Config_Rx(Isb_Msg_t * aIsb_Msg) {
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
    2c2a:	d9 82       	std	Y+1, r13	; 0x01
					}
				}
			}
		}
		MsgTx.Data[0] |= ISB_CONFIG_ANSWER_NACK;
		Isb_SendMsg(&MsgTx);
    2c2c:	ce 01       	movw	r24, r28
    2c2e:	01 96       	adiw	r24, 0x01	; 1
    2c30:	0e 94 2f 11 	call	0x225e	; 0x225e <Isb_SendMsg>
	}
    2c34:	2d 96       	adiw	r28, 0x0d	; 13
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	f8 94       	cli
    2c3a:	de bf       	out	0x3e, r29	; 62
    2c3c:	0f be       	out	0x3f, r0	; 63
    2c3e:	cd bf       	out	0x3d, r28	; 61
    2c40:	cf 91       	pop	r28
    2c42:	df 91       	pop	r29
    2c44:	1f 91       	pop	r17
    2c46:	0f 91       	pop	r16
    2c48:	ff 90       	pop	r15
    2c4a:	ef 90       	pop	r14
    2c4c:	df 90       	pop	r13
    2c4e:	08 95       	ret

00002c50 <lib_eep_fw_read_word>:
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    return __eerd_word (__p, eeprom_read_byte);
    2c50:	20 91 96 00 	lds	r18, 0x0096
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	22 0f       	add	r18, r18
    2c58:	33 1f       	adc	r19, r19
    2c5a:	82 0f       	add	r24, r18
    2c5c:	93 1f       	adc	r25, r19
    2c5e:	61 ef       	ldi	r22, 0xF1	; 241
    2c60:	70 e0       	ldi	r23, 0x00	; 0
    2c62:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__eerd_word>



	uint16_t __attribute__((always_inline)) lib_eep_fw_read_word(uint16_t * aAddr) {
		return eeprom_read_word(Isb_Firmware_Offset + aAddr);;
	}
    2c66:	08 95       	ret

00002c68 <lib_eep_read_word>:
    2c68:	61 ef       	ldi	r22, 0xF1	; 241
    2c6a:	70 e0       	ldi	r23, 0x00	; 0
    2c6c:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__eerd_word>



	uint16_t __attribute__((always_inline)) lib_eep_read_word(uint16_t * aAddr) {
		return eeprom_read_word(aAddr);;
	}
    2c70:	08 95       	ret

00002c72 <main>:



	int main(void) {
    2c72:	ff 92       	push	r15
    2c74:	0f 93       	push	r16
    2c76:	1f 93       	push	r17
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
    2c80:	2d 97       	sbiw	r28, 0x0d	; 13
    2c82:	0f b6       	in	r0, 0x3f	; 63
    2c84:	f8 94       	cli
    2c86:	de bf       	out	0x3e, r29	; 62
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	cd bf       	out	0x3d, r28	; 61
		wdt_enable(WDTO_500MS);
    2c8c:	2d e0       	ldi	r18, 0x0D	; 13
    2c8e:	88 e1       	ldi	r24, 0x18	; 24
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	a8 95       	wdr
    2c98:	81 bd       	out	0x21, r24	; 33
    2c9a:	0f be       	out	0x3f, r0	; 63
    2c9c:	21 bd       	out	0x21, r18	; 33
		wdt_reset();
    2c9e:	a8 95       	wdr
    2ca0:	80 e1       	ldi	r24, 0x10	; 16
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	61 ef       	ldi	r22, 0xF1	; 241
    2ca6:	70 e0       	ldi	r23, 0x00	; 0
    2ca8:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__eerd_word>
		Isb_Node_Id = lib_eep_read_word((uint16_t *)EEP__ISB_NODE_ID_0);
    2cac:	90 93 95 00 	sts	0x0095, r25
    2cb0:	80 93 94 00 	sts	0x0094, r24
		if ((Isb_Node_Id == 0) | (Isb_Node_Id > 2047)) {
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	8f 5f       	subi	r24, 0xFF	; 255
    2cb8:	97 40       	sbci	r25, 0x07	; 7
    2cba:	b8 f0       	brcs	.+46     	; 0x2cea <main+0x78>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2cbc:	e1 99       	sbic	0x1c, 1	; 28
    2cbe:	fe cf       	rjmp	.-4      	; 0x2cbc <main+0x4a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2cc0:	82 e1       	ldi	r24, 0x12	; 18
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	9f bb       	out	0x1f, r25	; 31
    2cc6:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2cc8:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2cca:	8d b3       	in	r24, 0x1d	; 29



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
    2ccc:	88 23       	and	r24, r24
    2cce:	61 f0       	breq	.+24     	; 0x2ce8 <main+0x76>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2cd0:	e1 99       	sbic	0x1c, 1	; 28
    2cd2:	fe cf       	rjmp	.-4      	; 0x2cd0 <main+0x5e>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2cd4:	82 e1       	ldi	r24, 0x12	; 18
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	9f bb       	out	0x1f, r25	; 31
    2cda:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2cdc:	1d ba       	out	0x1d, r1	; 29

    __asm__ __volatile__ (
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	f8 94       	cli
    2ce2:	e2 9a       	sbi	0x1c, 2	; 28
    2ce4:	e1 9a       	sbi	0x1c, 1	; 28
    2ce6:	0f be       	out	0x3f, r0	; 63
    2ce8:	ff cf       	rjmp	.-2      	; 0x2ce8 <main+0x76>
    2cea:	2c e0       	ldi	r18, 0x0C	; 12
    2cec:	30 e0       	ldi	r19, 0x00	; 0
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
			Node_Reboot();
		}
		for (uint8_t i = 0; i < 4; i++) {
			lib_eep_write_byte((uint8_t *)(EEP__ISB_FIRMWARE_CODE_0 + i), Isb_Firmware_Code[i]);
    2cee:	f9 01       	movw	r30, r18
    2cf0:	ec 5a       	subi	r30, 0xAC	; 172
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2cf6:	e1 99       	sbic	0x1c, 1	; 28
    2cf8:	fe cf       	rjmp	.-4      	; 0x2cf6 <main+0x84>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2cfa:	3f bb       	out	0x1f, r19	; 31
    2cfc:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2cfe:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2d00:	8d b3       	in	r24, 0x1d	; 29
    2d02:	8e 17       	cp	r24, r30
    2d04:	51 f0       	breq	.+20     	; 0x2d1a <main+0xa8>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2d06:	e1 99       	sbic	0x1c, 1	; 28
    2d08:	fe cf       	rjmp	.-4      	; 0x2d06 <main+0x94>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d0a:	3f bb       	out	0x1f, r19	; 31
    2d0c:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    2d0e:	ed bb       	out	0x1d, r30	; 29

    __asm__ __volatile__ (
    2d10:	0f b6       	in	r0, 0x3f	; 63
    2d12:	f8 94       	cli
    2d14:	e2 9a       	sbi	0x1c, 2	; 28
    2d16:	e1 9a       	sbi	0x1c, 1	; 28
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	2f 5f       	subi	r18, 0xFF	; 255
    2d1c:	3f 4f       	sbci	r19, 0xFF	; 255
		Isb_Node_Id = lib_eep_read_word((uint16_t *)EEP__ISB_NODE_ID_0);
		if ((Isb_Node_Id == 0) | (Isb_Node_Id > 2047)) {
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
			Node_Reboot();
		}
		for (uint8_t i = 0; i < 4; i++) {
    2d1e:	20 31       	cpi	r18, 0x10	; 16
    2d20:	31 05       	cpc	r19, r1
    2d22:	29 f7       	brne	.-54     	; 0x2cee <main+0x7c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2d24:	e1 99       	sbic	0x1c, 1	; 28
    2d26:	fe cf       	rjmp	.-4      	; 0x2d24 <main+0xb2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d28:	8a e1       	ldi	r24, 0x1A	; 26
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	9f bb       	out	0x1f, r25	; 31
    2d2e:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2d30:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2d32:	8d b3       	in	r24, 0x1d	; 29
			lib_eep_write_byte((uint8_t *)(EEP__ISB_FIRMWARE_CODE_0 + i), Isb_Firmware_Code[i]);
		}
		Isb_Firmware_Offset = lib_eep_read_byte((uint8_t *)EEP__ISB_FIRMWARE_OFFSET);
    2d34:	80 93 96 00 	sts	0x0096, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2d38:	e1 99       	sbic	0x1c, 1	; 28
    2d3a:	fe cf       	rjmp	.-4      	; 0x2d38 <main+0xc6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d3c:	82 e1       	ldi	r24, 0x12	; 18
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	9f bb       	out	0x1f, r25	; 31
    2d42:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2d44:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2d46:	8d b3       	in	r24, 0x1d	; 29
		Isb_Node_Operating_Mode = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
    2d48:	80 93 97 00 	sts	0x0097, r24
		if ((Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_NORM) & (Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_CFG))
    2d4c:	88 50       	subi	r24, 0x08	; 8
    2d4e:	82 30       	cpi	r24, 0x02	; 2
    2d50:	d0 f0       	brcs	.+52     	; 0x2d86 <main+0x114>
		{
			Isb_Node_Operating_Mode = ISB_NODE_OPERATING_MODE__FW_NORM;
    2d52:	88 e0       	ldi	r24, 0x08	; 8
    2d54:	80 93 97 00 	sts	0x0097, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2d58:	e1 99       	sbic	0x1c, 1	; 28
    2d5a:	fe cf       	rjmp	.-4      	; 0x2d58 <main+0xe6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d5c:	82 e1       	ldi	r24, 0x12	; 18
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	9f bb       	out	0x1f, r25	; 31
    2d62:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2d64:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2d66:	8d b3       	in	r24, 0x1d	; 29
    2d68:	88 30       	cpi	r24, 0x08	; 8
    2d6a:	69 f0       	breq	.+26     	; 0x2d86 <main+0x114>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2d6c:	e1 99       	sbic	0x1c, 1	; 28
    2d6e:	fe cf       	rjmp	.-4      	; 0x2d6c <main+0xfa>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d70:	82 e1       	ldi	r24, 0x12	; 18
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	9f bb       	out	0x1f, r25	; 31
    2d76:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2d78:	88 e0       	ldi	r24, 0x08	; 8
    2d7a:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	f8 94       	cli
    2d80:	e2 9a       	sbi	0x1c, 2	; 28
    2d82:	e1 9a       	sbi	0x1c, 1	; 28
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	40 91 98 00 	lds	r20, 0x0098
    2d8a:	2c e1       	ldi	r18, 0x1C	; 28
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2d8e:	e1 99       	sbic	0x1c, 1	; 28
    2d90:	fe cf       	rjmp	.-4      	; 0x2d8e <main+0x11c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d92:	3f bb       	out	0x1f, r19	; 31
    2d94:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2d96:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2d98:	8d b3       	in	r24, 0x1d	; 29
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, Isb_Node_Operating_Mode);
		}
		for (uint8_t i = 0; i < 4; i++)
		{
			if (lib_eep_read_byte((uint8_t *)(EEP__ISB_CONFIG_CODE_0 + i)) != Isb_Firmware_Code[i])
    2d9a:	f9 01       	movw	r30, r18
    2d9c:	ec 5b       	subi	r30, 0xBC	; 188
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	90 81       	ld	r25, Z
    2da2:	89 13       	cpse	r24, r25
			{
				Error |= ERROR__CONFIG_CODE;
    2da4:	41 60       	ori	r20, 0x01	; 1
    2da6:	2f 5f       	subi	r18, 0xFF	; 255
    2da8:	3f 4f       	sbci	r19, 0xFF	; 255
		if ((Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_NORM) & (Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_CFG))
		{
			Isb_Node_Operating_Mode = ISB_NODE_OPERATING_MODE__FW_NORM;
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, Isb_Node_Operating_Mode);
		}
		for (uint8_t i = 0; i < 4; i++)
    2daa:	20 32       	cpi	r18, 0x20	; 32
    2dac:	31 05       	cpc	r19, r1
    2dae:	79 f7       	brne	.-34     	; 0x2d8e <main+0x11c>
    2db0:	40 93 98 00 	sts	0x0098, r20
		#if defined(INF_TWI_C_)
			Inf_Twi_Init(0, 12);
// TODO:
Lib_Pin_Set(4, 2, LIB_PIN_OUTPUT_HIGH);
		#endif /* INF_TWI_C_ */
		if (Error == 0) {
    2db4:	44 23       	and	r20, r20
    2db6:	99 f4       	brne	.+38     	; 0x2dde <main+0x16c>



	void Isb_Systick_Init(void) {
		#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__) || defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
			TCCR0 = (1 << WGM01) | (1 << CS01) | (1 << CS00);
    2db8:	8b e0       	ldi	r24, 0x0B	; 11
    2dba:	83 bf       	out	0x33, r24	; 51
			TCNT0 = 0;
    2dbc:	12 be       	out	0x32, r1	; 50
			OCR0 = (F_CPU / 64) / 1000;
    2dbe:	8d e7       	ldi	r24, 0x7D	; 125
    2dc0:	8c bf       	out	0x3c, r24	; 60
			TIMSK = (1 << OCIE0);
    2dc2:	82 e0       	ldi	r24, 0x02	; 2
    2dc4:	89 bf       	out	0x39, r24	; 57
			Isb_Systick_Init();
			Isb_Ch_Init();
    2dc6:	0e 94 b4 05 	call	0xb68	; 0xb68 <Isb_Ch_Init>
			Isb_Grp_Init();
    2dca:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <Isb_Grp_Init>
			Isb_Obj_Init();
    2dce:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <Isb_Obj_Init>
			Isb_Obj_Exec();
    2dd2:	0e 94 0f 13 	call	0x261e	; 0x261e <Isb_Obj_Exec>
			Isb_App_Init();
    2dd6:	0e 94 55 06 	call	0xcaa	; 0xcaa <Isb_App_Init>
			Isb_App_Exec();
    2dda:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Isb_App_Exec>
		}
		sei();
    2dde:	78 94       	sei
		#endif /* ISB_INF_USART0 == 1 */
		#if ISB_INF_USART1 == 1
			Isb_Inf_Usart_Init(1);
		#endif /* ISB_INF_USART1 == 1 */
		#if ISB_INF_CAN0 == 1
			Isb_Inf_Can_Init(0);
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <Isb_Inf_Can_Init>
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
    2de6:	40 91 94 00 	lds	r20, 0x0094
    2dea:	50 91 95 00 	lds	r21, 0x0095
		Isb_Msg.Data[0] = ISB_MSG_TOP__SERIAL_NUMBER__MODE__ERROR;
    2dee:	81 e2       	ldi	r24, 0x21	; 33
    2df0:	8e 83       	std	Y+6, r24	; 0x06
    2df2:	fe 01       	movw	r30, r28
    2df4:	37 96       	adiw	r30, 0x07	; 7
    2df6:	24 e0       	ldi	r18, 0x04	; 4
    2df8:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2dfa:	e1 99       	sbic	0x1c, 1	; 28
    2dfc:	fe cf       	rjmp	.-4      	; 0x2dfa <main+0x188>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2dfe:	3f bb       	out	0x1f, r19	; 31
    2e00:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2e02:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2e04:	8d b3       	in	r24, 0x1d	; 29
		for (uint8_t i = 0; i < 4; i++) {
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
    2e06:	81 93       	st	Z+, r24
    2e08:	2f 5f       	subi	r18, 0xFF	; 255
    2e0a:	3f 4f       	sbci	r19, 0xFF	; 255
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
		Isb_Msg.Data[0] = ISB_MSG_TOP__SERIAL_NUMBER__MODE__ERROR;
		for (uint8_t i = 0; i < 4; i++) {
    2e0c:	28 30       	cpi	r18, 0x08	; 8
    2e0e:	31 05       	cpc	r19, r1
    2e10:	a1 f7       	brne	.-24     	; 0x2dfa <main+0x188>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2e12:	e1 99       	sbic	0x1c, 1	; 28
    2e14:	fe cf       	rjmp	.-4      	; 0x2e12 <main+0x1a0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2e16:	82 e1       	ldi	r24, 0x12	; 18
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	9f bb       	out	0x1f, r25	; 31
    2e1c:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2e1e:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2e20:	8d b3       	in	r24, 0x1d	; 29
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
    2e22:	8b 87       	std	Y+11, r24	; 0x0b
		Isb_Msg.Data[6] = Error;
    2e24:	80 91 98 00 	lds	r24, 0x0098
    2e28:	8c 87       	std	Y+12, r24	; 0x0c
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
    2e2a:	5d 83       	std	Y+5, r21	; 0x05
    2e2c:	4c 83       	std	Y+4, r20	; 0x04
		#if ISB_INF_USART1_SLAVE == 1
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
    2e2e:	82 e0       	ldi	r24, 0x02	; 2
    2e30:	90 ef       	ldi	r25, 0xF0	; 240
    2e32:	9b 83       	std	Y+3, r25	; 0x03
    2e34:	8a 83       	std	Y+2, r24	; 0x02
		#endif /* ISB_INF_USART0_SLAVE == 1 */
		#if ISB_INF_USART1_SLAVE == 1
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
    2e36:	87 e2       	ldi	r24, 0x27	; 39
    2e38:	89 83       	std	Y+1, r24	; 0x01
		for (uint8_t i = 0; i < 4; i++) {
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
		Isb_Msg.Data[6] = Error;
		Isb_SendMsg(&Isb_Msg);
    2e3a:	8e 01       	movw	r16, r28
    2e3c:	0f 5f       	subi	r16, 0xFF	; 255
    2e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e40:	c8 01       	movw	r24, r16
    2e42:	0e 94 2f 11 	call	0x225e	; 0x225e <Isb_SendMsg>
						}
					}
				}
			#endif /* ISB_INF_USART1 == 1 */
			#if ISB_INF_CAN0 == 1
				if (Isb_Inf_Can_Rx(0, &Isb_Msg) == TRUE) {
    2e46:	f0 2e       	mov	r15, r16
    2e48:	01 2f       	mov	r16, r17
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
		Isb_Msg.Data[6] = Error;
		Isb_SendMsg(&Isb_Msg);
		for (;;) {
			wdt_reset();
    2e4a:	a8 95       	wdr
			if (Error == 0) {
    2e4c:	80 91 98 00 	lds	r24, 0x0098
    2e50:	88 23       	and	r24, r24
    2e52:	31 f4       	brne	.+12     	; 0x2e60 <main+0x1ee>
				Isb_Systick_Exec();
    2e54:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <Isb_Systick_Exec>
				Isb_Obj_Exec();
    2e58:	0e 94 0f 13 	call	0x261e	; 0x261e <Isb_Obj_Exec>
				Isb_App_Exec();
    2e5c:	0e 94 d5 08 	call	0x11aa	; 0x11aa <Isb_App_Exec>
						}
					}
				}
			#endif /* ISB_INF_USART1 == 1 */
			#if ISB_INF_CAN0 == 1
				if (Isb_Inf_Can_Rx(0, &Isb_Msg) == TRUE) {
    2e60:	80 e0       	ldi	r24, 0x00	; 0
    2e62:	6f 2d       	mov	r22, r15
    2e64:	70 2f       	mov	r23, r16
    2e66:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <Isb_Inf_Can_Rx>
    2e6a:	81 30       	cpi	r24, 0x01	; 1
    2e6c:	71 f7       	brne	.-36     	; 0x2e4a <main+0x1d8>
						Isb_Inf_Can_Tx(1, &Isb_Msg);
					#endif /* ISB_INF_CAN1 == 1 */
					#if ISB_INF_CAN2 == 1
						Isb_Inf_Can_Tx(2, &Isb_Msg);
					#endif /* ISB_INF_CAN2 == 1 */
					if ((Isb_Msg.Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_UNICAST) {
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	80 73       	andi	r24, 0x30	; 48
    2e72:	69 f4       	brne	.+26     	; 0x2e8e <main+0x21c>
						if (Isb_Msg.DestId == Isb_Node_Id) {
    2e74:	2a 81       	ldd	r18, Y+2	; 0x02
    2e76:	3b 81       	ldd	r19, Y+3	; 0x03
    2e78:	80 91 94 00 	lds	r24, 0x0094
    2e7c:	90 91 95 00 	lds	r25, 0x0095
    2e80:	28 17       	cp	r18, r24
    2e82:	39 07       	cpc	r19, r25
    2e84:	21 f4       	brne	.+8      	; 0x2e8e <main+0x21c>
							Isb_Config_Rx(&Isb_Msg);
    2e86:	8f 2d       	mov	r24, r15
    2e88:	90 2f       	mov	r25, r16
    2e8a:	0e 94 95 14 	call	0x292a	; 0x292a <Isb_Config_Rx>
						}
					}
					if ((Isb_Msg.Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_MULTICAST) {
    2e8e:	89 81       	ldd	r24, Y+1	; 0x01
    2e90:	80 73       	andi	r24, 0x30	; 48
    2e92:	80 32       	cpi	r24, 0x20	; 32
    2e94:	d1 f6       	brne	.-76     	; 0x2e4a <main+0x1d8>
						if (Error == 0) {
    2e96:	80 91 98 00 	lds	r24, 0x0098
    2e9a:	88 23       	and	r24, r24
    2e9c:	b1 f6       	brne	.-84     	; 0x2e4a <main+0x1d8>
							Isb_Obj_Rx(&Isb_Msg);
    2e9e:	8f 2d       	mov	r24, r15
    2ea0:	90 2f       	mov	r25, r16
    2ea2:	0e 94 44 11 	call	0x2288	; 0x2288 <Isb_Obj_Rx>
    2ea6:	d1 cf       	rjmp	.-94     	; 0x2e4a <main+0x1d8>

00002ea8 <__eerd_word>:
    2ea8:	df 92       	push	r13
    2eaa:	ef 92       	push	r14
    2eac:	ff 92       	push	r15
    2eae:	0f 93       	push	r16
    2eb0:	1f 93       	push	r17
    2eb2:	7b 01       	movw	r14, r22
    2eb4:	8c 01       	movw	r16, r24
    2eb6:	fb 01       	movw	r30, r22
    2eb8:	09 95       	icall
    2eba:	d8 2e       	mov	r13, r24
    2ebc:	c8 01       	movw	r24, r16
    2ebe:	01 96       	adiw	r24, 0x01	; 1
    2ec0:	f7 01       	movw	r30, r14
    2ec2:	09 95       	icall
    2ec4:	98 2f       	mov	r25, r24
    2ec6:	8d 2d       	mov	r24, r13
    2ec8:	1f 91       	pop	r17
    2eca:	0f 91       	pop	r16
    2ecc:	ff 90       	pop	r15
    2ece:	ef 90       	pop	r14
    2ed0:	df 90       	pop	r13
    2ed2:	08 95       	ret

00002ed4 <_exit>:
    2ed4:	f8 94       	cli

00002ed6 <__stop_program>:
    2ed6:	ff cf       	rjmp	.-2      	; 0x2ed6 <__stop_program>
