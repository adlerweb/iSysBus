
fw_25-0.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a42  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00002a42  00002ab6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000224  008000a0  00002a82  00002af6  2**0
                  ALLOC
  3 .stab         00005a18  00000000  00000000  00002af8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002743  00000000  00000000  00008510  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__vector_19>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

00000054 <pgmIsb_Obj_Ch_Array>:
      54:	00 00 00 01 01 01 02 02 02 03 03 03 04 04 04 05     ................
      64:	05 05 06 06 06 07 07 07 08 09 0a 0b 0c 0d 0e 0f     ................

00000074 <pgmIsb_App_DigIn_Ch_Array>:
      74:	00 01 02 03 04 05 06 07                             ........

0000007c <pgmIsb_App_DigIn_Pin0_Array>:
      7c:	48 49 4a 4b 4c 4d 4e 4f                             HIJKLMNO

00000084 <pgmIsb_App_DigIn_Obj_0_Array>:
      84:	00 03 06 09 0c 0f 12 15                             ........

0000008c <pgmIsb_App_DigIn_Obj_1_Array>:
      8c:	01 04 07 0a 0d 10 13 16                             ........

00000094 <pgmIsb_App_DigIn_Obj_2_Array>:
      94:	02 05 08 0b 0e 11 14 17                             ........

0000009c <pgmIsb_App_DigOut_Ch_Array>:
      9c:	08 09 0a 0b 0c 0d 0e 0f                             ........

000000a4 <pgmIsb_App_DigOut_Obj_0_Array>:
      a4:	18 19 1a 1b 1c 1d 1e 1f                             ........

000000ac <pgmIsb_App_DigOut_Pin0_Array>:
      ac:	27 26 25 24 23 22 21 20                             '&%$#"! 

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf e5       	ldi	r28, 0x5F	; 95
      ba:	d4 e0       	ldi	r29, 0x04	; 4
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	10 e0       	ldi	r17, 0x00	; 0
      c2:	a0 e6       	ldi	r26, 0x60	; 96
      c4:	b0 e0       	ldi	r27, 0x00	; 0
      c6:	e2 e4       	ldi	r30, 0x42	; 66
      c8:	fa e2       	ldi	r31, 0x2A	; 42
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <.do_copy_data_start>

000000cc <.do_copy_data_loop>:
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0

000000d0 <.do_copy_data_start>:
      d0:	a0 3a       	cpi	r26, 0xA0	; 160
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <.do_copy_data_loop>

000000d6 <__do_clear_bss>:
      d6:	12 e0       	ldi	r17, 0x02	; 2
      d8:	a0 ea       	ldi	r26, 0xA0	; 160
      da:	b0 e0       	ldi	r27, 0x00	; 0
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a4 3c       	cpi	r26, 0xC4	; 196
      e2:	b1 07       	cpc	r27, r17
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 d7 13 	call	0x27ae	; 0x27ae <main>
      ea:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000f2 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
      f2:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
      f4:	e1 99       	sbic	0x1c, 1	; 28
      f6:	fe cf       	rjmp	.-4      	; 0xf4 <eeprom_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
      f8:	3f bb       	out	0x1f, r19	; 31
      fa:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
      fc:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
      fe:	8d b3       	in	r24, 0x1d	; 29
}
     100:	08 95       	ret

00000102 <lib_eep_read_byte>:
#ifndef LIB_EEP_C_
	#define LIB_EEP_C_



	uint8_t __attribute__((always_inline)) lib_eep_read_byte(uint8_t * aAddr) {
     102:	9c 01       	movw	r18, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     104:	e1 99       	sbic	0x1c, 1	; 28
     106:	fe cf       	rjmp	.-4      	; 0x104 <lib_eep_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     108:	3f bb       	out	0x1f, r19	; 31
     10a:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
     10c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     10e:	8d b3       	in	r24, 0x1d	; 29
		return eeprom_read_byte(aAddr);;
	}
     110:	08 95       	ret

00000112 <lib_eep_write_byte>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     112:	e1 99       	sbic	0x1c, 1	; 28
     114:	fe cf       	rjmp	.-4      	; 0x112 <lib_eep_write_byte>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     116:	9c 01       	movw	r18, r24
     118:	9f bb       	out	0x1f, r25	; 31
     11a:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     11c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     11e:	8d b3       	in	r24, 0x1d	; 29
	}



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
     120:	86 17       	cp	r24, r22
     122:	51 f0       	breq	.+20     	; 0x138 <lib_eep_write_byte+0x26>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     124:	e1 99       	sbic	0x1c, 1	; 28
     126:	fe cf       	rjmp	.-4      	; 0x124 <lib_eep_write_byte+0x12>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     128:	3f bb       	out	0x1f, r19	; 31
     12a:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
     12c:	6d bb       	out	0x1d, r22	; 29

    __asm__ __volatile__ (
     12e:	0f b6       	in	r0, 0x3f	; 63
     130:	f8 94       	cli
     132:	e2 9a       	sbi	0x1c, 2	; 28
     134:	e1 9a       	sbi	0x1c, 1	; 28
     136:	0f be       	out	0x3f, r0	; 63
     138:	08 95       	ret

0000013a <lib_eep_fw_read_byte>:
	}



	uint8_t __attribute__((always_inline)) lib_eep_fw_read_byte(uint8_t * aAddr) {
		return eeprom_read_byte(Isb_Firmware_Offset + aAddr);;
     13a:	20 91 a7 00 	lds	r18, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     13e:	e1 99       	sbic	0x1c, 1	; 28
     140:	fe cf       	rjmp	.-4      	; 0x13e <lib_eep_fw_read_byte+0x4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     142:	82 0f       	add	r24, r18
     144:	91 1d       	adc	r25, r1
     146:	9f bb       	out	0x1f, r25	; 31
     148:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     14a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     14c:	8d b3       	in	r24, 0x1d	; 29
	}
     14e:	08 95       	ret

00000150 <lib_eep_fw_write_byte>:
		return eeprom_read_word(Isb_Firmware_Offset + aAddr);;
	}



	void __attribute__((always_inline)) lib_eep_fw_write_byte(uint8_t * aAddr, uint8_t aData) {
     150:	ac 01       	movw	r20, r24
		if (eeprom_read_byte(Isb_Firmware_Offset + aAddr) != aData) {
     152:	80 91 a7 00 	lds	r24, 0x00A7
     156:	28 2f       	mov	r18, r24
     158:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     15a:	e1 99       	sbic	0x1c, 1	; 28
     15c:	fe cf       	rjmp	.-4      	; 0x15a <lib_eep_fw_write_byte+0xa>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     15e:	ca 01       	movw	r24, r20
     160:	82 0f       	add	r24, r18
     162:	93 1f       	adc	r25, r19
     164:	9f bb       	out	0x1f, r25	; 31
     166:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     168:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     16a:	8d b3       	in	r24, 0x1d	; 29
     16c:	86 17       	cp	r24, r22
     16e:	61 f0       	breq	.+24     	; 0x188 <lib_eep_fw_write_byte+0x38>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     170:	e1 99       	sbic	0x1c, 1	; 28
     172:	fe cf       	rjmp	.-4      	; 0x170 <lib_eep_fw_write_byte+0x20>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     174:	24 0f       	add	r18, r20
     176:	35 1f       	adc	r19, r21
     178:	3f bb       	out	0x1f, r19	; 31
     17a:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
     17c:	6d bb       	out	0x1d, r22	; 29

    __asm__ __volatile__ (
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	f8 94       	cli
     182:	e2 9a       	sbi	0x1c, 2	; 28
     184:	e1 9a       	sbi	0x1c, 1	; 28
     186:	0f be       	out	0x3f, r0	; 63
     188:	08 95       	ret

0000018a <Lib_Pin_Get>:
	#endif



	uint8_t Lib_Pin_Get(const uint8_t aPort, const uint8_t aPin) {
		return (*(PINx[aPort]) >> aPin) & 1;
     18a:	e8 2f       	mov	r30, r24
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	ee 0f       	add	r30, r30
     190:	ff 1f       	adc	r31, r31
     192:	ec 57       	subi	r30, 0x7C	; 124
     194:	ff 4f       	sbci	r31, 0xFF	; 255
     196:	01 90       	ld	r0, Z+
     198:	f0 81       	ld	r31, Z
     19a:	e0 2d       	mov	r30, r0
     19c:	80 81       	ld	r24, Z
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <Lib_Pin_Get+0x1c>
     1a2:	95 95       	asr	r25
     1a4:	87 95       	ror	r24
     1a6:	6a 95       	dec	r22
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <Lib_Pin_Get+0x18>
	}
     1aa:	81 70       	andi	r24, 0x01	; 1
     1ac:	08 95       	ret

000001ae <Lib_Pin_Set>:



	void __attribute__((noinline)) Lib_Pin_Set(const uint8_t aPort, const uint8_t aPin, const uint8_t aCmd) {
     1ae:	91 e0       	ldi	r25, 0x01	; 1
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <Lib_Pin_Set+0x8>
		uint8_t mask;
		uint8_t tmp;
		volatile uint8_t *reg;
		uint8_t Pxx = aPin;
		for (mask = 1; Pxx--; mask <<= 1) ;
     1b2:	99 0f       	add	r25, r25
     1b4:	61 50       	subi	r22, 0x01	; 1
     1b6:	66 23       	and	r22, r22
     1b8:	e1 f7       	brne	.-8      	; 0x1b2 <Lib_Pin_Set+0x4>
		reg = PORTx[aPort];
     1ba:	a8 2f       	mov	r26, r24
     1bc:	b0 e0       	ldi	r27, 0x00	; 0
     1be:	fd 01       	movw	r30, r26
     1c0:	ee 0f       	add	r30, r30
     1c2:	ff 1f       	adc	r31, r31
     1c4:	ec 58       	subi	r30, 0x8C	; 140
     1c6:	ff 4f       	sbci	r31, 0xFF	; 255
     1c8:	01 90       	ld	r0, Z+
     1ca:	f0 81       	ld	r31, Z
     1cc:	e0 2d       	mov	r30, r0
		tmp = *reg | mask;
     1ce:	80 81       	ld	r24, Z
     1d0:	89 2b       	or	r24, r25
		if (! (aCmd & 2)) {
     1d2:	41 ff       	sbrs	r20, 1
			tmp ^= mask;
     1d4:	89 27       	eor	r24, r25
		}
		*reg = tmp;
     1d6:	80 83       	st	Z, r24
		reg = DDRx[aPort];
     1d8:	aa 0f       	add	r26, r26
     1da:	bb 1f       	adc	r27, r27
     1dc:	ac 59       	subi	r26, 0x9C	; 156
     1de:	bf 4f       	sbci	r27, 0xFF	; 255
     1e0:	ed 91       	ld	r30, X+
     1e2:	fc 91       	ld	r31, X
		tmp = *reg | mask;
     1e4:	80 81       	ld	r24, Z
     1e6:	89 2b       	or	r24, r25
		if (! (aCmd & 1)) {
     1e8:	40 ff       	sbrs	r20, 0
			tmp ^= mask;
     1ea:	89 27       	eor	r24, r25
		}
		*reg = tmp;
     1ec:	80 83       	st	Z, r24
	}
     1ee:	08 95       	ret

000001f0 <Inf_Spi_Init>:
	#endif /* ISYSBUS_LIB */



	void Inf_Spi_Init(const unsigned char aCfg)
	{
     1f0:	df 93       	push	r29
     1f2:	cf 93       	push	r28
     1f4:	0f 92       	push	r0
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
     1fa:	89 83       	std	Y+1, r24	; 0x01

		if (bit_is_set(aCfg, SPE))
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
     1fe:	86 ff       	sbrs	r24, 6
     200:	0c c0       	rjmp	.+24     	; 0x21a <Inf_Spi_Init+0x2a>
		{
			if (bit_is_set(aCfg, MSTR))
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	84 ff       	sbrs	r24, 4
     206:	05 c0       	rjmp	.+10     	; 0x212 <Inf_Spi_Init+0x22>
			{
				INF_SPI_DDR |= (1 << INF_SPI_DD_MOSI) | (1 << INF_SPI_DD_SCK);
     208:	87 b3       	in	r24, 0x17	; 23
     20a:	80 6a       	ori	r24, 0xA0	; 160
     20c:	87 bb       	out	0x17, r24	; 23
				INF_SPI_DDR &= ~(1 << INF_SPI_DD_MISO);
     20e:	be 98       	cbi	0x17, 6	; 23
     210:	07 c0       	rjmp	.+14     	; 0x220 <Inf_Spi_Init+0x30>
			}
			else
			{
				INF_SPI_DDR |= (1 << INF_SPI_DD_MISO);
     212:	be 9a       	sbi	0x17, 6	; 23
				INF_SPI_DDR &= ~(1 << INF_SPI_DD_MOSI) & ~(1 << INF_SPI_DD_SCK);
     214:	87 b3       	in	r24, 0x17	; 23
     216:	8f 75       	andi	r24, 0x5F	; 95
     218:	02 c0       	rjmp	.+4      	; 0x21e <Inf_Spi_Init+0x2e>
			}
		}
		else
		{
			INF_SPI_DDR &= ~(1 << INF_SPI_DD_MISO) & ~(1 << INF_SPI_DD_MOSI) & ~(1 << INF_SPI_DD_SCK);
     21a:	87 b3       	in	r24, 0x17	; 23
     21c:	8f 71       	andi	r24, 0x1F	; 31
     21e:	87 bb       	out	0x17, r24	; 23
		}

		SPCR = aCfg;
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	8d b9       	out	0x0d, r24	; 13
		SPSR = 0;
     224:	1e b8       	out	0x0e, r1	; 14

	}
     226:	0f 90       	pop	r0
     228:	cf 91       	pop	r28
     22a:	df 91       	pop	r29
     22c:	08 95       	ret

0000022e <Inf_Spi_Rx>:


	unsigned char Inf_Spi_Rx(void)
	{

		SPDR = 0;
     22e:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     230:	77 9b       	sbis	0x0e, 7	; 14
     232:	fe cf       	rjmp	.-4      	; 0x230 <Inf_Spi_Rx+0x2>
		return SPDR;
     234:	8f b1       	in	r24, 0x0f	; 15

	}
     236:	08 95       	ret

00000238 <Inf_Spi_Tx>:


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     238:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     23a:	77 9b       	sbis	0x0e, 7	; 14
     23c:	fe cf       	rjmp	.-4      	; 0x23a <Inf_Spi_Tx+0x2>

	}
     23e:	08 95       	ret

00000240 <Inf_Spi_TxRx>:


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     240:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     242:	77 9b       	sbis	0x0e, 7	; 14
     244:	fe cf       	rjmp	.-4      	; 0x242 <Inf_Spi_TxRx+0x2>
		return SPDR;
     246:	8f b1       	in	r24, 0x0f	; 15

	}
     248:	08 95       	ret

0000024a <Lib_Mcp2515_Read>:
#ifndef LIB_MCP2515_C_
	#define LIB_MCP2515_C_



	uint8_t Lib_Mcp2515_Read(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr) {
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	08 2f       	mov	r16, r24
     252:	f6 2e       	mov	r15, r22
     254:	14 2f       	mov	r17, r20
		uint8_t aData;
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     256:	41 e0       	ldi	r20, 0x01	; 1
     258:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     25c:	83 e0       	ldi	r24, 0x03	; 3
     25e:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     260:	77 9b       	sbis	0x0e, 7	; 14
     262:	fe cf       	rjmp	.-4      	; 0x260 <Lib_Mcp2515_Read+0x16>
		return SPDR;
     264:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     266:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     268:	77 9b       	sbis	0x0e, 7	; 14
     26a:	fe cf       	rjmp	.-4      	; 0x268 <Lib_Mcp2515_Read+0x1e>
		return SPDR;
     26c:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     26e:	8f ef       	ldi	r24, 0xFF	; 255
     270:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     272:	77 9b       	sbis	0x0e, 7	; 14
     274:	fe cf       	rjmp	.-4      	; 0x272 <Lib_Mcp2515_Read+0x28>
		return SPDR;
     276:	1f b1       	in	r17, 0x0f	; 15
		Inf_Spi_TxRx(LIB_MCP2515_READ);
		Inf_Spi_TxRx(aAddr);
		aData = Inf_Spi_TxRx(0xff);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     278:	80 2f       	mov	r24, r16
     27a:	6f 2d       	mov	r22, r15
     27c:	43 e0       	ldi	r20, 0x03	; 3
     27e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>
		return aData;
	}
     282:	81 2f       	mov	r24, r17
     284:	1f 91       	pop	r17
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	08 95       	ret

0000028c <Lib_Mcp2515_Write>:



	void Lib_Mcp2515_Write(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr, const uint8_t aData) {
     28c:	ef 92       	push	r14
     28e:	ff 92       	push	r15
     290:	0f 93       	push	r16
     292:	1f 93       	push	r17
     294:	08 2f       	mov	r16, r24
     296:	f6 2e       	mov	r15, r22
     298:	14 2f       	mov	r17, r20
     29a:	e2 2e       	mov	r14, r18
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     29c:	41 e0       	ldi	r20, 0x01	; 1
     29e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     2a2:	82 e0       	ldi	r24, 0x02	; 2
     2a4:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2a6:	77 9b       	sbis	0x0e, 7	; 14
     2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <Lib_Mcp2515_Write+0x1a>
		return SPDR;
     2aa:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     2ac:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2ae:	77 9b       	sbis	0x0e, 7	; 14
     2b0:	fe cf       	rjmp	.-4      	; 0x2ae <Lib_Mcp2515_Write+0x22>
		return SPDR;
     2b2:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     2b4:	ef b8       	out	0x0f, r14	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2b6:	77 9b       	sbis	0x0e, 7	; 14
     2b8:	fe cf       	rjmp	.-4      	; 0x2b6 <Lib_Mcp2515_Write+0x2a>
		return SPDR;
     2ba:	8f b1       	in	r24, 0x0f	; 15
		Inf_Spi_TxRx(LIB_MCP2515_WRITE);
		Inf_Spi_TxRx(aAddr);
		Inf_Spi_TxRx(aData);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     2bc:	80 2f       	mov	r24, r16
     2be:	6f 2d       	mov	r22, r15
     2c0:	43 e0       	ldi	r20, 0x03	; 3
     2c2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>
	}
     2c6:	1f 91       	pop	r17
     2c8:	0f 91       	pop	r16
     2ca:	ff 90       	pop	r15
     2cc:	ef 90       	pop	r14
     2ce:	08 95       	ret

000002d0 <Lib_Mcp2515_Modify>:



	void Lib_Mcp2515_Modify(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr, const uint8_t aMask, const uint8_t aData) {
     2d0:	df 92       	push	r13
     2d2:	ef 92       	push	r14
     2d4:	ff 92       	push	r15
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	e8 2e       	mov	r14, r24
     2dc:	d6 2e       	mov	r13, r22
     2de:	14 2f       	mov	r17, r20
     2e0:	f2 2e       	mov	r15, r18
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     2e2:	41 e0       	ldi	r20, 0x01	; 1
     2e4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     2e8:	85 e0       	ldi	r24, 0x05	; 5
     2ea:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2ec:	77 9b       	sbis	0x0e, 7	; 14
     2ee:	fe cf       	rjmp	.-4      	; 0x2ec <Lib_Mcp2515_Modify+0x1c>
		return SPDR;
     2f0:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     2f2:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2f4:	77 9b       	sbis	0x0e, 7	; 14
     2f6:	fe cf       	rjmp	.-4      	; 0x2f4 <Lib_Mcp2515_Modify+0x24>
		return SPDR;
     2f8:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     2fa:	ff b8       	out	0x0f, r15	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2fc:	77 9b       	sbis	0x0e, 7	; 14
     2fe:	fe cf       	rjmp	.-4      	; 0x2fc <Lib_Mcp2515_Modify+0x2c>
		return SPDR;
     300:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     302:	0f b9       	out	0x0f, r16	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     304:	77 9b       	sbis	0x0e, 7	; 14
     306:	fe cf       	rjmp	.-4      	; 0x304 <Lib_Mcp2515_Modify+0x34>
		return SPDR;
     308:	8f b1       	in	r24, 0x0f	; 15
		Inf_Spi_TxRx(LIB_MCP2515_BIT_MODIFY);
		Inf_Spi_TxRx(aAddr);
		Inf_Spi_TxRx(aMask);
		Inf_Spi_TxRx(aData);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     30a:	8e 2d       	mov	r24, r14
     30c:	6d 2d       	mov	r22, r13
     30e:	43 e0       	ldi	r20, 0x03	; 3
     310:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>
	}
     314:	1f 91       	pop	r17
     316:	0f 91       	pop	r16
     318:	ff 90       	pop	r15
     31a:	ef 90       	pop	r14
     31c:	df 90       	pop	r13
     31e:	08 95       	ret

00000320 <Inf_Can_Init>:
	#define INF_CAN_C_



	#if defined(INF_CAN0_TX) || defined(INF_CAN0_RX) || defined(INF_CAN1_TX) || defined(INF_CAN1_RX) || defined(INF_CAN2_TX) || defined(INF_CAN2_RX)
		uint8_t Inf_Can_Init(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aCnf1, const uint8_t aCnf2, const uint8_t aCnf3, const uint8_t aRSPort, const uint8_t aRSPin, const uint8_t aMode) {
     320:	8f 92       	push	r8
     322:	9f 92       	push	r9
     324:	af 92       	push	r10
     326:	bf 92       	push	r11
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	df 93       	push	r29
     336:	cf 93       	push	r28
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	f8 2e       	mov	r15, r24
     33e:	d6 2e       	mov	r13, r22
     340:	14 2f       	mov	r17, r20
     342:	b2 2e       	mov	r11, r18
     344:	90 2e       	mov	r9, r16
     346:	0c 2d       	mov	r16, r12
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     348:	43 e0       	ldi	r20, 0x03	; 3
     34a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     34e:	81 2f       	mov	r24, r17
     350:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     354:	8f 2d       	mov	r24, r15
     356:	6d 2d       	mov	r22, r13
     358:	41 e0       	ldi	r20, 0x01	; 1
     35a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     35e:	80 ec       	ldi	r24, 0xC0	; 192
     360:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     362:	77 9b       	sbis	0x0e, 7	; 14
     364:	fe cf       	rjmp	.-4      	; 0x362 <Inf_Can_Init+0x42>
		return SPDR;
     366:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_TxRx(LIB_MCP2515_RESET);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     368:	8f 2d       	mov	r24, r15
     36a:	6d 2d       	mov	r22, r13
     36c:	43 e0       	ldi	r20, 0x03	; 3
     36e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     372:	80 ea       	ldi	r24, 0xA0	; 160
     374:	9f e0       	ldi	r25, 0x0F	; 15
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	f1 f7       	brne	.-4      	; 0x376 <Inf_Can_Init+0x56>
			_delay_ms(2);
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF1, aCnf1);
     37a:	8f 2d       	mov	r24, r15
     37c:	6d 2d       	mov	r22, r13
     37e:	4a e2       	ldi	r20, 0x2A	; 42
     380:	2b 2d       	mov	r18, r11
     382:	0e 94 46 01 	call	0x28c	; 0x28c <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF2, aCnf2);
     386:	8f 2d       	mov	r24, r15
     388:	6d 2d       	mov	r22, r13
     38a:	49 e2       	ldi	r20, 0x29	; 41
     38c:	29 2d       	mov	r18, r9
     38e:	0e 94 46 01 	call	0x28c	; 0x28c <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF3, aCnf3);
     392:	8f 2d       	mov	r24, r15
     394:	6d 2d       	mov	r22, r13
     396:	48 e2       	ldi	r20, 0x28	; 40
     398:	2e 2d       	mov	r18, r14
     39a:	0e 94 46 01 	call	0x28c	; 0x28c <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_RXB0CTRL, 0x64);
     39e:	8f 2d       	mov	r24, r15
     3a0:	6d 2d       	mov	r22, r13
     3a2:	40 e6       	ldi	r20, 0x60	; 96
     3a4:	24 e6       	ldi	r18, 0x64	; 100
     3a6:	0e 94 46 01 	call	0x28c	; 0x28c <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_RXB1CTRL, 0x60);
     3aa:	8f 2d       	mov	r24, r15
     3ac:	6d 2d       	mov	r22, r13
     3ae:	40 e7       	ldi	r20, 0x70	; 112
     3b0:	20 e6       	ldi	r18, 0x60	; 96
     3b2:	0e 94 46 01 	call	0x28c	; 0x28c <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CANINTE, 0x03);
     3b6:	8f 2d       	mov	r24, r15
     3b8:	6d 2d       	mov	r22, r13
     3ba:	4b e2       	ldi	r20, 0x2B	; 43
     3bc:	23 e0       	ldi	r18, 0x03	; 3
     3be:	0e 94 46 01 	call	0x28c	; 0x28c <Lib_Mcp2515_Write>
			if (aRSPort != 0) {
     3c2:	00 23       	and	r16, r16
     3c4:	c9 f0       	breq	.+50     	; 0x3f8 <Inf_Can_Init+0xd8>
				if (aRSPort < 8) {
     3c6:	08 30       	cpi	r16, 0x08	; 8
     3c8:	30 f4       	brcc	.+12     	; 0x3d6 <Inf_Can_Init+0xb6>
					Lib_Pin_Set(aRSPort, aRSPin, LIB_PIN_OUTPUT_LOW);
     3ca:	80 2f       	mov	r24, r16
     3cc:	6a 2d       	mov	r22, r10
     3ce:	41 e0       	ldi	r20, 0x01	; 1
     3d0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>
     3d4:	11 c0       	rjmp	.+34     	; 0x3f8 <Inf_Can_Init+0xd8>
				}
//				else if (aRSPort < 16) {
//					Lib_Pin_Set(aRSPort, aRSPin, LIB_PIN_OUTPUT_HIGH);
//				}
				else if (aRSPort == 0xFC) {
     3d6:	0c 3f       	cpi	r16, 0xFC	; 252
     3d8:	31 f4       	brne	.+12     	; 0x3e6 <Inf_Can_Init+0xc6>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x14, 0x04);
     3da:	8f 2d       	mov	r24, r15
     3dc:	6d 2d       	mov	r22, r13
     3de:	4c e0       	ldi	r20, 0x0C	; 12
     3e0:	24 e1       	ldi	r18, 0x14	; 20
     3e2:	04 e0       	ldi	r16, 0x04	; 4
     3e4:	07 c0       	rjmp	.+14     	; 0x3f4 <Inf_Can_Init+0xd4>
				}
				else if (aRSPort == 0xFD) {
     3e6:	0d 3f       	cpi	r16, 0xFD	; 253
     3e8:	39 f4       	brne	.+14     	; 0x3f8 <Inf_Can_Init+0xd8>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x28, 0x08);
     3ea:	8f 2d       	mov	r24, r15
     3ec:	6d 2d       	mov	r22, r13
     3ee:	4c e0       	ldi	r20, 0x0C	; 12
     3f0:	28 e2       	ldi	r18, 0x28	; 40
     3f2:	08 e0       	ldi	r16, 0x08	; 8
     3f4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lib_Mcp2515_Modify>
//				}
//				else if (aRSPort == 0xFF) {
//					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x28, 0x28);
//				}
			}
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x0C);
     3f8:	8f 2d       	mov	r24, r15
     3fa:	6d 2d       	mov	r22, r13
     3fc:	4c e0       	ldi	r20, 0x0C	; 12
     3fe:	2c e0       	ldi	r18, 0x0C	; 12
     400:	0e 94 46 01 	call	0x28c	; 0x28c <Lib_Mcp2515_Write>
			Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_CANCTRL, 0xE0, aMode);
     404:	8f 2d       	mov	r24, r15
     406:	6d 2d       	mov	r22, r13
     408:	4f e0       	ldi	r20, 0x0F	; 15
     40a:	20 ee       	ldi	r18, 0xE0	; 224
     40c:	08 2d       	mov	r16, r8
     40e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Lib_Mcp2515_Modify>
			if (((Lib_Mcp2515_Read(aSSPort, aSSPin, LIB_MCP2515_CANCTRL)) & 0xE0) == aMode) {
     412:	8f 2d       	mov	r24, r15
     414:	6d 2d       	mov	r22, r13
     416:	4f e0       	ldi	r20, 0x0F	; 15
     418:	0e 94 25 01 	call	0x24a	; 0x24a <Lib_Mcp2515_Read>
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	80 7e       	andi	r24, 0xE0	; 224
     422:	90 70       	andi	r25, 0x00	; 0
     424:	28 2d       	mov	r18, r8
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	82 17       	cp	r24, r18
     42a:	93 07       	cpc	r25, r19
     42c:	09 f4       	brne	.+2      	; 0x430 <Inf_Can_Init+0x110>
     42e:	41 e0       	ldi	r20, 0x01	; 1
				return TRUE;
			}
			return FALSE;
		}
     430:	84 2f       	mov	r24, r20
     432:	cf 91       	pop	r28
     434:	df 91       	pop	r29
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	ff 90       	pop	r15
     43c:	ef 90       	pop	r14
     43e:	df 90       	pop	r13
     440:	cf 90       	pop	r12
     442:	bf 90       	pop	r11
     444:	af 90       	pop	r10
     446:	9f 90       	pop	r9
     448:	8f 90       	pop	r8
     44a:	08 95       	ret

0000044c <Inf_Can_Rx>:
	#endif /* INF_CAN0_TX || INF_CAN0_RX || INF_CAN1_TX || INF_CAN1_RX || INF_CAN2_TX || INF_CAN2_RX */



	#if defined(INF_CAN0_RX) || defined(INF_CAN1_RX) || defined(INF_CAN2_RX)
		uint8_t Inf_Can_Rx(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aRSPort, const uint8_t aRSPin, Inf_Can_Msg_t * aInf_Can_Msg) {
     44c:	df 92       	push	r13
     44e:	ef 92       	push	r14
     450:	ff 92       	push	r15
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	df 93       	push	r29
     458:	cf 93       	push	r28
     45a:	0f 92       	push	r0
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
     460:	08 2f       	mov	r16, r24
     462:	d6 2e       	mov	r13, r22
     464:	14 2f       	mov	r17, r20
			uint8_t State = 0;
     466:	19 82       	std	Y+1, r1	; 0x01
			uint8_t CmdSave = 0;
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     468:	43 e0       	ldi	r20, 0x03	; 3
     46a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     46e:	81 2f       	mov	r24, r17
     470:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     474:	80 2f       	mov	r24, r16
     476:	6d 2d       	mov	r22, r13
     478:	41 e0       	ldi	r20, 0x01	; 1
     47a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     47e:	80 eb       	ldi	r24, 0xB0	; 176
     480:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     482:	77 9b       	sbis	0x0e, 7	; 14
     484:	fe cf       	rjmp	.-4      	; 0x482 <__stack+0x23>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     486:	8f ef       	ldi	r24, 0xFF	; 255
     488:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     48a:	77 9b       	sbis	0x0e, 7	; 14
     48c:	fe cf       	rjmp	.-4      	; 0x48a <__stack+0x2b>
		return SPDR;
     48e:	9f b1       	in	r25, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     490:	8f ef       	ldi	r24, 0xFF	; 255
     492:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     494:	77 9b       	sbis	0x0e, 7	; 14
     496:	fe cf       	rjmp	.-4      	; 0x494 <__stack+0x35>
		return SPDR;
     498:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_Tx(LIB_MCP2515_RX_STATUS);
			State = Inf_Spi_TxRx(0xFF);
     49a:	99 83       	std	Y+1, r25	; 0x01
			Inf_Spi_TxRx(0xFF);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     49c:	80 2f       	mov	r24, r16
     49e:	6d 2d       	mov	r22, r13
     4a0:	43 e0       	ldi	r20, 0x03	; 3
     4a2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>
			if (bit_is_set(State, LIB_MCP2515_RX_STATUS_INSTRUCTION_CANINTF_RX0IF)) {
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	86 ff       	sbrs	r24, 6
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__stack+0x51>
     4ac:	10 e9       	ldi	r17, 0x90	; 144
     4ae:	06 c0       	rjmp	.+12     	; 0x4bc <__stack+0x5d>
				CmdSave = LIB_MCP2515_READ_RX_BUFFER0;
			}
			else if (bit_is_set(State, LIB_MCP2515_RX_STATUS_INSTRUCTION_CANINTF_RX1IF)) {
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	87 fd       	sbrc	r24, 7
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__stack+0x5b>
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	47 c0       	rjmp	.+142    	; 0x548 <__stack+0xe9>
     4ba:	14 e9       	ldi	r17, 0x94	; 148
				CmdSave = LIB_MCP2515_READ_RX_BUFFER1;
			}
			else {
				return FALSE;
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     4bc:	80 2f       	mov	r24, r16
     4be:	6d 2d       	mov	r22, r13
     4c0:	41 e0       	ldi	r20, 0x01	; 1
     4c2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     4c6:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4c8:	77 9b       	sbis	0x0e, 7	; 14
     4ca:	fe cf       	rjmp	.-4      	; 0x4c8 <__stack+0x69>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     4cc:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4ce:	77 9b       	sbis	0x0e, 7	; 14
     4d0:	fe cf       	rjmp	.-4      	; 0x4ce <__stack+0x6f>
		return SPDR;
     4d2:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_Tx(CmdSave);
			aInf_Can_Msg->SIdH = Inf_Spi_TxRx(0x00);
     4d4:	f7 01       	movw	r30, r14
     4d6:	81 83       	std	Z+1, r24	; 0x01


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     4d8:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4da:	77 9b       	sbis	0x0e, 7	; 14
     4dc:	fe cf       	rjmp	.-4      	; 0x4da <__stack+0x7b>
		return SPDR;
     4de:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->SIdL = Inf_Spi_TxRx(0x00);
     4e0:	f7 01       	movw	r30, r14
     4e2:	80 83       	st	Z, r24


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     4e4:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4e6:	77 9b       	sbis	0x0e, 7	; 14
     4e8:	fe cf       	rjmp	.-4      	; 0x4e6 <__stack+0x87>
		return SPDR;
     4ea:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->EIdH = Inf_Spi_TxRx(0x00);
     4ec:	f7 01       	movw	r30, r14
     4ee:	83 83       	std	Z+3, r24	; 0x03


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     4f0:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4f2:	77 9b       	sbis	0x0e, 7	; 14
     4f4:	fe cf       	rjmp	.-4      	; 0x4f2 <__stack+0x93>
		return SPDR;
     4f6:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->EIdL = Inf_Spi_TxRx(0x00);
     4f8:	f7 01       	movw	r30, r14
     4fa:	82 83       	std	Z+2, r24	; 0x02


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     4fc:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4fe:	77 9b       	sbis	0x0e, 7	; 14
     500:	fe cf       	rjmp	.-4      	; 0x4fe <__stack+0x9f>
		return SPDR;
     502:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->Dlc = Inf_Spi_TxRx(0x00);
     504:	f7 01       	movw	r30, r14
     506:	84 83       	std	Z+4, r24	; 0x04
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
     508:	84 81       	ldd	r24, Z+4	; 0x04
     50a:	86 fd       	sbrc	r24, 6
     50c:	10 c0       	rjmp	.+32     	; 0x52e <__stack+0xcf>
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	09 c0       	rjmp	.+18     	; 0x524 <__stack+0xc5>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     512:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     514:	77 9b       	sbis	0x0e, 7	; 14
     516:	fe cf       	rjmp	.-4      	; 0x514 <__stack+0xb5>
		return SPDR;
     518:	8f b1       	in	r24, 0x0f	; 15
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
     51a:	f7 01       	movw	r30, r14
     51c:	e9 0f       	add	r30, r25
     51e:	f1 1d       	adc	r31, r1
     520:	85 83       	std	Z+5, r24	; 0x05
			aInf_Can_Msg->SIdL = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->EIdH = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->EIdL = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->Dlc = Inf_Spi_TxRx(0x00);
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
     522:	9f 5f       	subi	r25, 0xFF	; 255
     524:	f7 01       	movw	r30, r14
     526:	84 81       	ldd	r24, Z+4	; 0x04
     528:	98 17       	cp	r25, r24
     52a:	98 f3       	brcs	.-26     	; 0x512 <__stack+0xb3>
     52c:	07 c0       	rjmp	.+14     	; 0x53c <__stack+0xdd>
     52e:	f7 01       	movw	r30, r14
     530:	80 e0       	ldi	r24, 0x00	; 0
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
				}
			}
			else {
				for (uint8_t i = 0; i < 8; i++) {
					aInf_Can_Msg->Data[i] = 0x00;
     532:	15 82       	std	Z+5, r1	; 0x05
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
				}
			}
			else {
				for (uint8_t i = 0; i < 8; i++) {
     534:	8f 5f       	subi	r24, 0xFF	; 255
     536:	31 96       	adiw	r30, 0x01	; 1
     538:	88 30       	cpi	r24, 0x08	; 8
     53a:	d9 f7       	brne	.-10     	; 0x532 <__stack+0xd3>
					aInf_Can_Msg->Data[i] = 0x00;
				}
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     53c:	80 2f       	mov	r24, r16
     53e:	6d 2d       	mov	r22, r13
     540:	43 e0       	ldi	r20, 0x03	; 3
     542:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>
     546:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
		}
     548:	0f 90       	pop	r0
     54a:	cf 91       	pop	r28
     54c:	df 91       	pop	r29
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	ff 90       	pop	r15
     554:	ef 90       	pop	r14
     556:	df 90       	pop	r13
     558:	08 95       	ret

0000055a <Inf_Can_Tx>:
	#endif /* INF_CAN0_RX || INF_CAN1_RX || INF_CAN2_RX */



	#if defined(INF_CAN0_TX) || defined(INF_CAN1_TX) || defined(INF_CAN2_TX)
		uint8_t Inf_Can_Tx(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aRSPort, const uint8_t aRSPin, Inf_Can_Msg_t * aInf_Can_Msg) {
     55a:	cf 92       	push	r12
     55c:	df 92       	push	r13
     55e:	ef 92       	push	r14
     560:	ff 92       	push	r15
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	df 93       	push	r29
     568:	cf 93       	push	r28
     56a:	0f 92       	push	r0
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
     570:	08 2f       	mov	r16, r24
     572:	d6 2e       	mov	r13, r22
     574:	14 2f       	mov	r17, r20
			uint8_t State = 0;
     576:	19 82       	std	Y+1, r1	; 0x01
			uint8_t CmdLoad = 0;
			uint8_t CmdSend = 0;
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     578:	43 e0       	ldi	r20, 0x03	; 3
     57a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     57e:	81 2f       	mov	r24, r17
     580:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     584:	80 2f       	mov	r24, r16
     586:	6d 2d       	mov	r22, r13
     588:	41 e0       	ldi	r20, 0x01	; 1
     58a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     58e:	80 ea       	ldi	r24, 0xA0	; 160
     590:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     592:	77 9b       	sbis	0x0e, 7	; 14
     594:	fe cf       	rjmp	.-4      	; 0x592 <Inf_Can_Tx+0x38>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     596:	8f ef       	ldi	r24, 0xFF	; 255
     598:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     59a:	77 9b       	sbis	0x0e, 7	; 14
     59c:	fe cf       	rjmp	.-4      	; 0x59a <Inf_Can_Tx+0x40>
		return SPDR;
     59e:	9f b1       	in	r25, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     5a0:	8f ef       	ldi	r24, 0xFF	; 255
     5a2:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5a4:	77 9b       	sbis	0x0e, 7	; 14
     5a6:	fe cf       	rjmp	.-4      	; 0x5a4 <Inf_Can_Tx+0x4a>
		return SPDR;
     5a8:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_Tx(LIB_MCP2515_READ_STATUS);
			State = Inf_Spi_TxRx(0xFF);
     5aa:	99 83       	std	Y+1, r25	; 0x01
			Inf_Spi_TxRx(0xFF);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     5ac:	80 2f       	mov	r24, r16
     5ae:	6d 2d       	mov	r22, r13
     5b0:	43 e0       	ldi	r20, 0x03	; 3
     5b2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>
			if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB0CTRL_TXREQ)) {
     5b6:	89 81       	ldd	r24, Y+1	; 0x01
     5b8:	82 fd       	sbrc	r24, 2
     5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <Inf_Can_Tx+0x6a>
     5bc:	10 e4       	ldi	r17, 0x40	; 64
     5be:	61 e8       	ldi	r22, 0x81	; 129
     5c0:	c6 2e       	mov	r12, r22
     5c2:	0f c0       	rjmp	.+30     	; 0x5e2 <Inf_Can_Tx+0x88>
				CmdLoad = LIB_MCP2515_LOAD_TX_BUFFER0;
				CmdSend = LIB_MCP2515_RTS_TX0;
			}
			else if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB1CTRL_TXREQ)) {
     5c4:	89 81       	ldd	r24, Y+1	; 0x01
     5c6:	84 fd       	sbrc	r24, 4
     5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <Inf_Can_Tx+0x78>
     5ca:	12 e4       	ldi	r17, 0x42	; 66
     5cc:	52 e8       	ldi	r21, 0x82	; 130
     5ce:	c5 2e       	mov	r12, r21
     5d0:	08 c0       	rjmp	.+16     	; 0x5e2 <Inf_Can_Tx+0x88>
				CmdLoad = LIB_MCP2515_LOAD_TX_BUFFER1;
				CmdSend = LIB_MCP2515_RTS_TX1;
			}
			else if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB2CTRL_TXREQ)) {
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	86 ff       	sbrs	r24, 6
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <Inf_Can_Tx+0x82>
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	48 c0       	rjmp	.+144    	; 0x66c <Inf_Can_Tx+0x112>
     5dc:	14 e4       	ldi	r17, 0x44	; 68
     5de:	44 e8       	ldi	r20, 0x84	; 132
     5e0:	c4 2e       	mov	r12, r20
				CmdSend = LIB_MCP2515_RTS_TX2;
			}
			else {
				return FALSE;
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     5e2:	80 2f       	mov	r24, r16
     5e4:	6d 2d       	mov	r22, r13
     5e6:	41 e0       	ldi	r20, 0x01	; 1
     5e8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     5ec:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5ee:	77 9b       	sbis	0x0e, 7	; 14
     5f0:	fe cf       	rjmp	.-4      	; 0x5ee <Inf_Can_Tx+0x94>
			Inf_Spi_Tx(CmdLoad);
			Inf_Spi_Tx(aInf_Can_Msg->SIdH);
     5f2:	f7 01       	movw	r30, r14
     5f4:	81 81       	ldd	r24, Z+1	; 0x01


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     5f6:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5f8:	77 9b       	sbis	0x0e, 7	; 14
     5fa:	fe cf       	rjmp	.-4      	; 0x5f8 <Inf_Can_Tx+0x9e>
			Inf_Spi_Tx(aInf_Can_Msg->SIdL);
     5fc:	f7 01       	movw	r30, r14
     5fe:	80 81       	ld	r24, Z


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     600:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     602:	77 9b       	sbis	0x0e, 7	; 14
     604:	fe cf       	rjmp	.-4      	; 0x602 <Inf_Can_Tx+0xa8>
			Inf_Spi_Tx(aInf_Can_Msg->EIdH);
     606:	f7 01       	movw	r30, r14
     608:	83 81       	ldd	r24, Z+3	; 0x03


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     60a:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     60c:	77 9b       	sbis	0x0e, 7	; 14
     60e:	fe cf       	rjmp	.-4      	; 0x60c <Inf_Can_Tx+0xb2>
			Inf_Spi_Tx(aInf_Can_Msg->EIdL);
     610:	f7 01       	movw	r30, r14
     612:	82 81       	ldd	r24, Z+2	; 0x02


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     614:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     616:	77 9b       	sbis	0x0e, 7	; 14
     618:	fe cf       	rjmp	.-4      	; 0x616 <Inf_Can_Tx+0xbc>
			Inf_Spi_Tx(aInf_Can_Msg->Dlc);
     61a:	f7 01       	movw	r30, r14
     61c:	24 81       	ldd	r18, Z+4	; 0x04


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     61e:	2f b9       	out	0x0f, r18	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     620:	77 9b       	sbis	0x0e, 7	; 14
     622:	fe cf       	rjmp	.-4      	; 0x620 <Inf_Can_Tx+0xc6>
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
     624:	f7 01       	movw	r30, r14
     626:	84 81       	ldd	r24, Z+4	; 0x04
     628:	86 fd       	sbrc	r24, 6
     62a:	0c c0       	rjmp	.+24     	; 0x644 <Inf_Can_Tx+0xea>
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	08 c0       	rjmp	.+16     	; 0x640 <Inf_Can_Tx+0xe6>
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++)
				{
					Inf_Spi_Tx(aInf_Can_Msg->Data[i]);
     630:	f7 01       	movw	r30, r14
     632:	e9 0f       	add	r30, r25
     634:	f1 1d       	adc	r31, r1
     636:	85 81       	ldd	r24, Z+5	; 0x05


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     638:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     63a:	77 9b       	sbis	0x0e, 7	; 14
     63c:	fe cf       	rjmp	.-4      	; 0x63a <Inf_Can_Tx+0xe0>
			Inf_Spi_Tx(aInf_Can_Msg->SIdL);
			Inf_Spi_Tx(aInf_Can_Msg->EIdH);
			Inf_Spi_Tx(aInf_Can_Msg->EIdL);
			Inf_Spi_Tx(aInf_Can_Msg->Dlc);
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++)
     63e:	9f 5f       	subi	r25, 0xFF	; 255
     640:	92 17       	cp	r25, r18
     642:	b0 f3       	brcs	.-20     	; 0x630 <Inf_Can_Tx+0xd6>
				{
					Inf_Spi_Tx(aInf_Can_Msg->Data[i]);
				}
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     644:	80 2f       	mov	r24, r16
     646:	6d 2d       	mov	r22, r13
     648:	43 e0       	ldi	r20, 0x03	; 3
     64a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>
			asm volatile("nop");
     64e:	00 00       	nop
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     650:	80 2f       	mov	r24, r16
     652:	6d 2d       	mov	r22, r13
     654:	41 e0       	ldi	r20, 0x01	; 1
     656:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     65a:	cf b8       	out	0x0f, r12	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     65c:	77 9b       	sbis	0x0e, 7	; 14
     65e:	fe cf       	rjmp	.-4      	; 0x65c <Inf_Can_Tx+0x102>
			Inf_Spi_Tx(CmdSend);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     660:	80 2f       	mov	r24, r16
     662:	6d 2d       	mov	r22, r13
     664:	43 e0       	ldi	r20, 0x03	; 3
     666:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>
     66a:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
		}
     66c:	0f 90       	pop	r0
     66e:	cf 91       	pop	r28
     670:	df 91       	pop	r29
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	df 90       	pop	r13
     67c:	cf 90       	pop	r12
     67e:	08 95       	ret

00000680 <Isb_Inf_Can_Init>:
#ifndef ISB_INF_CAN_C_
	#define ISB_INF_CAN_C_



	uint8_t Isb_Inf_Can_Init(const uint8_t aInf) {
     680:	8f 92       	push	r8
     682:	af 92       	push	r10
     684:	cf 92       	push	r12
     686:	ef 92       	push	r14
     688:	0f 93       	push	r16
		uint8_t Result = FALSE;
		switch (aInf) {
     68a:	88 23       	and	r24, r24
     68c:	11 f0       	breq	.+4      	; 0x692 <Isb_Inf_Can_Init+0x12>
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e c0       	rjmp	.+28     	; 0x6ae <Isb_Inf_Can_Init+0x2e>
			#if ISB_INF_CAN0 == 1
				case 0:
					Result = Inf_Can_Init(INF_CAN0_SSPORT, INF_CAN0_SSPIN, INF_CAN0_SPICFG, INF_CAN0_CNF1, INF_CAN0_CNF2, INF_CAN0_CNF3, INF_CAN0_RSPORT, INF_CAN0_RSPIN, INF_CAN0_MODE);
     692:	82 e0       	ldi	r24, 0x02	; 2
     694:	64 e0       	ldi	r22, 0x04	; 4
     696:	41 e5       	ldi	r20, 0x51	; 81
     698:	23 e0       	ldi	r18, 0x03	; 3
     69a:	06 eb       	ldi	r16, 0xB6	; 182
     69c:	f4 e0       	ldi	r31, 0x04	; 4
     69e:	ef 2e       	mov	r14, r31
     6a0:	e3 e0       	ldi	r30, 0x03	; 3
     6a2:	ce 2e       	mov	r12, r30
     6a4:	72 e0       	ldi	r23, 0x02	; 2
     6a6:	a7 2e       	mov	r10, r23
     6a8:	88 24       	eor	r8, r8
     6aa:	0e 94 90 01 	call	0x320	; 0x320 <Inf_Can_Init>
					Result = Inf_Can_Init(INF_CAN2_SSPORT, INF_CAN2_SSPIN, INF_CAN2_SPICFG, INF_CAN2_CNF1, INF_CAN2_CNF2, INF_CAN2_CNF3, INF_CAN2_RSPORT, INF_CAN2_RSPIN, INF_CAN2_MODE);
					break;
			#endif /* ISB_INF_CAN2 == 1 */
		}
		return Result;
	}
     6ae:	0f 91       	pop	r16
     6b0:	ef 90       	pop	r14
     6b2:	cf 90       	pop	r12
     6b4:	af 90       	pop	r10
     6b6:	8f 90       	pop	r8
     6b8:	08 95       	ret

000006ba <Isb_Inf_Can_Rx>:



	uint8_t Isb_Inf_Can_Rx(const uint8_t aInf, Isb_Msg_t * aIsb_Msg) {
     6ba:	af 92       	push	r10
     6bc:	bf 92       	push	r11
     6be:	cf 92       	push	r12
     6c0:	df 92       	push	r13
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	df 93       	push	r29
     6ca:	cf 93       	push	r28
     6cc:	cd b7       	in	r28, 0x3d	; 61
     6ce:	de b7       	in	r29, 0x3e	; 62
     6d0:	2d 97       	sbiw	r28, 0x0d	; 13
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	f8 94       	cli
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	cd bf       	out	0x3d, r28	; 61
     6dc:	6b 01       	movw	r12, r22
		uint8_t aSSPort;
		uint8_t aSSPin;
		uint8_t aSpiCfg;
		uint8_t aRSPort;
		uint8_t aRSPin;
		switch (aInf) {
     6de:	88 23       	and	r24, r24
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <Isb_Inf_Can_Rx+0x2a>
     6e2:	66 c0       	rjmp	.+204    	; 0x7b0 <Isb_Inf_Can_Rx+0xf6>
			default:
				return FALSE;
				break;
		}
		Inf_Can_Msg_t aCanMsg;
		if (Inf_Can_Rx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	64 e0       	ldi	r22, 0x04	; 4
     6e8:	41 e5       	ldi	r20, 0x51	; 81
     6ea:	23 e0       	ldi	r18, 0x03	; 3
     6ec:	02 e0       	ldi	r16, 0x02	; 2
     6ee:	5e 01       	movw	r10, r28
     6f0:	08 94       	sec
     6f2:	a1 1c       	adc	r10, r1
     6f4:	b1 1c       	adc	r11, r1
     6f6:	75 01       	movw	r14, r10
     6f8:	0e 94 26 02 	call	0x44c	; 0x44c <Inf_Can_Rx>
     6fc:	81 30       	cpi	r24, 0x01	; 1
     6fe:	09 f0       	breq	.+2      	; 0x702 <Isb_Inf_Can_Rx+0x48>
     700:	57 c0       	rjmp	.+174    	; 0x7b0 <Isb_Inf_Can_Rx+0xf6>
			aIsb_Msg->Flags = ((aCanMsg.SIdH & 0xC0) >> 2) | (aCanMsg.Dlc & ISB_MSG_FLAGS_DLC_MASK);
     702:	ea 81       	ldd	r30, Y+2	; 0x02
     704:	8e 2f       	mov	r24, r30
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	80 7c       	andi	r24, 0xC0	; 192
     70a:	90 70       	andi	r25, 0x00	; 0
     70c:	95 95       	asr	r25
     70e:	87 95       	ror	r24
     710:	95 95       	asr	r25
     712:	87 95       	ror	r24
     714:	0d 81       	ldd	r16, Y+5	; 0x05
     716:	f0 2f       	mov	r31, r16
     718:	ff 70       	andi	r31, 0x0F	; 15
     71a:	f8 2b       	or	r31, r24
     71c:	d6 01       	movw	r26, r12
     71e:	fc 93       	st	X, r31
			aIsb_Msg->DestId = (uint16_t)((aCanMsg.EIdH & 0xF8) >> 3) + (uint16_t)((aCanMsg.SIdL & 0x03) << 5) + (uint16_t)((aCanMsg.SIdL & 0xE0) << 2) + (uint16_t)((aCanMsg.SIdH & 0x3F) << 10);
     720:	6c 81       	ldd	r22, Y+4	; 0x04
     722:	49 81       	ldd	r20, Y+1	; 0x01
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	3e 2f       	mov	r19, r30
     728:	33 0f       	add	r19, r19
     72a:	33 0f       	add	r19, r19
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	86 2f       	mov	r24, r22
     730:	86 95       	lsr	r24
     732:	86 95       	lsr	r24
     734:	86 95       	lsr	r24
     736:	28 0f       	add	r18, r24
     738:	31 1d       	adc	r19, r1
     73a:	ca 01       	movw	r24, r20
     73c:	83 70       	andi	r24, 0x03	; 3
     73e:	90 70       	andi	r25, 0x00	; 0
     740:	75 e0       	ldi	r23, 0x05	; 5
     742:	88 0f       	add	r24, r24
     744:	99 1f       	adc	r25, r25
     746:	7a 95       	dec	r23
     748:	e1 f7       	brne	.-8      	; 0x742 <Isb_Inf_Can_Rx+0x88>
     74a:	28 0f       	add	r18, r24
     74c:	39 1f       	adc	r19, r25
     74e:	40 7e       	andi	r20, 0xE0	; 224
     750:	50 70       	andi	r21, 0x00	; 0
     752:	44 0f       	add	r20, r20
     754:	55 1f       	adc	r21, r21
     756:	44 0f       	add	r20, r20
     758:	55 1f       	adc	r21, r21
     75a:	24 0f       	add	r18, r20
     75c:	35 1f       	adc	r19, r21
     75e:	12 96       	adiw	r26, 0x02	; 2
     760:	3c 93       	st	X, r19
     762:	2e 93       	st	-X, r18
     764:	11 97       	sbiw	r26, 0x01	; 1
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	67 70       	andi	r22, 0x07	; 7
     76a:	70 70       	andi	r23, 0x00	; 0
     76c:	76 2f       	mov	r23, r22
     76e:	66 27       	eor	r22, r22
     770:	8b 81       	ldd	r24, Y+3	; 0x03
     772:	68 0f       	add	r22, r24
     774:	71 1d       	adc	r23, r1
     776:	14 96       	adiw	r26, 0x04	; 4
     778:	7c 93       	st	X, r23
     77a:	6e 93       	st	-X, r22
     77c:	13 97       	sbiw	r26, 0x03	; 3
			if (bit_is_set(aCanMsg.Dlc, 6)) {
     77e:	8d 81       	ldd	r24, Y+5	; 0x05
     780:	86 fd       	sbrc	r24, 6
     782:	0a c0       	rjmp	.+20     	; 0x798 <Isb_Inf_Can_Rx+0xde>
				aIsb_Msg->Flags |= 0x40;
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     784:	de 01       	movw	r26, r28
     786:	16 96       	adiw	r26, 0x06	; 6
     788:	f6 01       	movw	r30, r12
     78a:	20 2f       	mov	r18, r16
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	2b 5f       	subi	r18, 0xFB	; 251
     790:	3f 4f       	sbci	r19, 0xFF	; 255
     792:	2a 0d       	add	r18, r10
     794:	3b 1d       	adc	r19, r11
     796:	06 c0       	rjmp	.+12     	; 0x7a4 <Isb_Inf_Can_Rx+0xea>
		if (Inf_Can_Rx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
			aIsb_Msg->Flags = ((aCanMsg.SIdH & 0xC0) >> 2) | (aCanMsg.Dlc & ISB_MSG_FLAGS_DLC_MASK);
			aIsb_Msg->DestId = (uint16_t)((aCanMsg.EIdH & 0xF8) >> 3) + (uint16_t)((aCanMsg.SIdL & 0x03) << 5) + (uint16_t)((aCanMsg.SIdL & 0xE0) << 2) + (uint16_t)((aCanMsg.SIdH & 0x3F) << 10);
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
			if (bit_is_set(aCanMsg.Dlc, 6)) {
				aIsb_Msg->Flags |= 0x40;
     798:	f0 64       	ori	r31, 0x40	; 64
     79a:	d6 01       	movw	r26, r12
     79c:	fc 93       	st	X, r31
     79e:	06 c0       	rjmp	.+12     	; 0x7ac <Isb_Inf_Can_Rx+0xf2>
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
					aIsb_Msg->Data[i] = aCanMsg.Data[i];
     7a0:	8d 91       	ld	r24, X+
     7a2:	84 83       	std	Z+4, r24	; 0x04
     7a4:	31 96       	adiw	r30, 0x01	; 1
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
			if (bit_is_set(aCanMsg.Dlc, 6)) {
				aIsb_Msg->Flags |= 0x40;
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     7a6:	a2 17       	cp	r26, r18
     7a8:	b3 07       	cpc	r27, r19
     7aa:	d1 f7       	brne	.-12     	; 0x7a0 <Isb_Inf_Can_Rx+0xe6>
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <Isb_Inf_Can_Rx+0xf8>
     7b0:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			return TRUE;
		}
		return FALSE;
	}
     7b2:	2d 96       	adiw	r28, 0x0d	; 13
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	f8 94       	cli
     7b8:	de bf       	out	0x3e, r29	; 62
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	cd bf       	out	0x3d, r28	; 61
     7be:	cf 91       	pop	r28
     7c0:	df 91       	pop	r29
     7c2:	0f 91       	pop	r16
     7c4:	ff 90       	pop	r15
     7c6:	ef 90       	pop	r14
     7c8:	df 90       	pop	r13
     7ca:	cf 90       	pop	r12
     7cc:	bf 90       	pop	r11
     7ce:	af 90       	pop	r10
     7d0:	08 95       	ret

000007d2 <Isb_Inf_Can_Tx>:



	uint8_t Isb_Inf_Can_Tx(const uint8_t aInf, const Isb_Msg_t * aIsb_Msg) {
     7d2:	ef 92       	push	r14
     7d4:	ff 92       	push	r15
     7d6:	0f 93       	push	r16
     7d8:	df 93       	push	r29
     7da:	cf 93       	push	r28
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
     7e0:	2d 97       	sbiw	r28, 0x0d	; 13
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	fb 01       	movw	r30, r22
		uint8_t aSSPort;
		uint8_t aSSPin;
		uint8_t aSpiCfg;
		uint8_t aRSPort;
		uint8_t aRSPin;
		switch (aInf) {
     7ee:	88 23       	and	r24, r24
     7f0:	11 f0       	breq	.+4      	; 0x7f6 <Isb_Inf_Can_Tx+0x24>
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	4e c0       	rjmp	.+156    	; 0x892 <Isb_Inf_Can_Tx+0xc0>
		}
		Inf_Can_Msg_t aCanMsg;
		// Write Message to SendBuffer - TXBnSIDH:
		//	[7..6] = Type
		//	[5..0] = Dest[15..10]
		aCanMsg.SIdH = ((aIsb_Msg->Flags << 2) & 0xC0) | (aIsb_Msg->DestId >> 10);
     7f6:	92 81       	ldd	r25, Z+2	; 0x02
     7f8:	96 95       	lsr	r25
     7fa:	96 95       	lsr	r25
     7fc:	60 81       	ld	r22, Z
     7fe:	86 2f       	mov	r24, r22
     800:	88 0f       	add	r24, r24
     802:	88 0f       	add	r24, r24
     804:	80 7c       	andi	r24, 0xC0	; 192
     806:	89 2b       	or	r24, r25
     808:	8a 83       	std	Y+2, r24	; 0x02
		//	[7..5] = Dest[9..7]
		//	[4] = 0
		//	[3] = 1
		//	[2] = 0
		//	[1..0] = Dest[6..5]
		aCanMsg.SIdL = ((uint8_t)(aIsb_Msg->DestId >> 2) & 0xE0) | 0x08 | ((uint8_t)(aIsb_Msg->DestId >> 5) & 0x03);
     80a:	41 81       	ldd	r20, Z+1	; 0x01
     80c:	52 81       	ldd	r21, Z+2	; 0x02
     80e:	ca 01       	movw	r24, r20
     810:	96 95       	lsr	r25
     812:	87 95       	ror	r24
     814:	96 95       	lsr	r25
     816:	87 95       	ror	r24
     818:	80 7e       	andi	r24, 0xE0	; 224
     81a:	9a 01       	movw	r18, r20
     81c:	a5 e0       	ldi	r26, 0x05	; 5
     81e:	36 95       	lsr	r19
     820:	27 95       	ror	r18
     822:	aa 95       	dec	r26
     824:	e1 f7       	brne	.-8      	; 0x81e <Isb_Inf_Can_Tx+0x4c>
     826:	23 70       	andi	r18, 0x03	; 3
     828:	82 2b       	or	r24, r18
     82a:	88 60       	ori	r24, 0x08	; 8
     82c:	89 83       	std	Y+1, r24	; 0x01
		// Write Message to SendBuffer - TXBnEID8:
		//	[7..3] = Dest[4..0]
		//	[2..0] = Source[10..8]
		aCanMsg.EIdH = ((uint8_t)((aIsb_Msg->DestId << 3) & 0xF8)) | ((uint8_t)((aIsb_Msg->SourceId >> 8) & 0x07));
     82e:	84 81       	ldd	r24, Z+4	; 0x04
     830:	87 70       	andi	r24, 0x07	; 7
     832:	44 0f       	add	r20, r20
     834:	44 0f       	add	r20, r20
     836:	44 0f       	add	r20, r20
     838:	84 2b       	or	r24, r20
     83a:	8c 83       	std	Y+4, r24	; 0x04
		// Write Message to SendBuffer - TXBnEID0:
		//	[7..0] = Source[7..0]
		aCanMsg.EIdL = (uint8_t)aIsb_Msg->SourceId;
     83c:	83 81       	ldd	r24, Z+3	; 0x03
     83e:	8b 83       	std	Y+3, r24	; 0x03
		// Write Message to SendBuffer - DataLength
		aCanMsg.Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
     840:	6f 70       	andi	r22, 0x0F	; 15
     842:	6d 83       	std	Y+5, r22	; 0x05
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
     844:	80 81       	ld	r24, Z
     846:	86 fd       	sbrc	r24, 6
     848:	0a c0       	rjmp	.+20     	; 0x85e <Isb_Inf_Can_Tx+0x8c>
     84a:	df 01       	movw	r26, r30
     84c:	fe 01       	movw	r30, r28
     84e:	36 96       	adiw	r30, 0x06	; 6
			aCanMsg.Dlc |= 0x40;
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     850:	ce 01       	movw	r24, r28
     852:	86 0f       	add	r24, r22
     854:	91 1d       	adc	r25, r1
     856:	bc 01       	movw	r22, r24
     858:	6a 5f       	subi	r22, 0xFA	; 250
     85a:	7f 4f       	sbci	r23, 0xFF	; 255
     85c:	07 c0       	rjmp	.+14     	; 0x86c <Isb_Inf_Can_Tx+0x9a>
		aCanMsg.EIdL = (uint8_t)aIsb_Msg->SourceId;
		// Write Message to SendBuffer - DataLength
		aCanMsg.Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
			aCanMsg.Dlc |= 0x40;
     85e:	60 64       	ori	r22, 0x40	; 64
     860:	6d 83       	std	Y+5, r22	; 0x05
     862:	08 c0       	rjmp	.+16     	; 0x874 <Isb_Inf_Can_Tx+0xa2>
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
				aCanMsg.Data[i] = aIsb_Msg->Data[i];
     864:	14 96       	adiw	r26, 0x04	; 4
     866:	8c 91       	ld	r24, X
     868:	14 97       	sbiw	r26, 0x04	; 4
     86a:	81 93       	st	Z+, r24
     86c:	11 96       	adiw	r26, 0x01	; 1
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
			aCanMsg.Dlc |= 0x40;
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     86e:	e6 17       	cp	r30, r22
     870:	f7 07       	cpc	r31, r23
     872:	c1 f7       	brne	.-16     	; 0x864 <Isb_Inf_Can_Tx+0x92>
				aCanMsg.Data[i] = aIsb_Msg->Data[i];
			}
		}
		if (Inf_Can_Tx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	64 e0       	ldi	r22, 0x04	; 4
     878:	41 e5       	ldi	r20, 0x51	; 81
     87a:	23 e0       	ldi	r18, 0x03	; 3
     87c:	02 e0       	ldi	r16, 0x02	; 2
     87e:	7e 01       	movw	r14, r28
     880:	08 94       	sec
     882:	e1 1c       	adc	r14, r1
     884:	f1 1c       	adc	r15, r1
     886:	0e 94 ad 02 	call	0x55a	; 0x55a <Inf_Can_Tx>
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	81 30       	cpi	r24, 0x01	; 1
     88e:	09 f4       	brne	.+2      	; 0x892 <Isb_Inf_Can_Tx+0xc0>
     890:	91 e0       	ldi	r25, 0x01	; 1
			return TRUE;
		}
		return FALSE;
	}
     892:	89 2f       	mov	r24, r25
     894:	2d 96       	adiw	r28, 0x0d	; 13
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	de bf       	out	0x3e, r29	; 62
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	cd bf       	out	0x3d, r28	; 61
     8a0:	cf 91       	pop	r28
     8a2:	df 91       	pop	r29
     8a4:	0f 91       	pop	r16
     8a6:	ff 90       	pop	r15
     8a8:	ef 90       	pop	r14
     8aa:	08 95       	ret

000008ac <Isb_Systick_Init>:

	#if defined(__AVR_ATmega8__)
		#warning "TIMER0_COMP_vect missing."
		#error "No definition for this MCU available."
	#elif defined(__AVR_ATmega16__)
	TCCR0 = (1 << WGM01) | (1 << CS01) | (1 << CS00);
     8ac:	8b e0       	ldi	r24, 0x0B	; 11
     8ae:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
     8b0:	12 be       	out	0x32, r1	; 50
	OCR0 = (F_CPU / 64) / 1000;
     8b2:	8d e7       	ldi	r24, 0x7D	; 125
     8b4:	8c bf       	out	0x3c, r24	; 60
	TIMSK = (1 << OCIE0);
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	89 bf       	out	0x39, r24	; 57
	TIMSK0 = (1 << OCIE0A);
	#else
		#error "No definition for this MCU available."
	#endif

	Isb_Systick_Clock.Seconds = 0;
     8ba:	10 92 5b 02 	sts	0x025B, r1
	Isb_Systick_Clock.Minutes = 0;
     8be:	10 92 5c 02 	sts	0x025C, r1
	Isb_Systick_Clock.Hour = 0;
     8c2:	10 92 5d 02 	sts	0x025D, r1
	Isb_Systick_Clock.Dow = 1;
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	80 93 5f 02 	sts	0x025F, r24
	Isb_Systick_Clock.Day = 1;
     8cc:	80 93 5e 02 	sts	0x025E, r24
	Isb_Systick_Clock.Month = 1;
     8d0:	80 93 60 02 	sts	0x0260, r24
	Isb_Systick_Clock.Year = 0;;
     8d4:	10 92 62 02 	sts	0x0262, r1
     8d8:	10 92 61 02 	sts	0x0261, r1

}
     8dc:	08 95       	ret

000008de <Isb_Systick_Exec>:



void Isb_Systick_Exec(void)
{
     8de:	1f 93       	push	r17

	if (bit_is_set(Isb_Systick_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
     8e0:	80 91 a0 00 	lds	r24, 0x00A0
     8e4:	80 ff       	sbrs	r24, 0
     8e6:	ca c0       	rjmp	.+404    	; 0xa7c <Isb_Systick_Exec+0x19e>
	{

		if (Isb_Systick_IrqClock >= 1000)
     8e8:	80 91 a1 00 	lds	r24, 0x00A1
     8ec:	90 91 a2 00 	lds	r25, 0x00A2
     8f0:	88 5e       	subi	r24, 0xE8	; 232
     8f2:	93 40       	sbci	r25, 0x03	; 3
     8f4:	08 f4       	brcc	.+2      	; 0x8f8 <Isb_Systick_Exec+0x1a>
     8f6:	72 c0       	rjmp	.+228    	; 0x9dc <Isb_Systick_Exec+0xfe>
		{
			Isb_Systick_IrqClock = 0;
     8f8:	10 92 a2 00 	sts	0x00A2, r1
     8fc:	10 92 a1 00 	sts	0x00A1, r1
			Isb_Systick_Clock.Seconds++;
     900:	80 91 5b 02 	lds	r24, 0x025B
     904:	8f 5f       	subi	r24, 0xFF	; 255
     906:	80 93 5b 02 	sts	0x025B, r24
			if (Isb_Systick_Clock.Seconds == 60)
     90a:	8c 33       	cpi	r24, 0x3C	; 60
     90c:	09 f0       	breq	.+2      	; 0x910 <Isb_Systick_Exec+0x32>
     90e:	66 c0       	rjmp	.+204    	; 0x9dc <Isb_Systick_Exec+0xfe>
			{
				Isb_Systick_Clock.Seconds = 0;
     910:	10 92 5b 02 	sts	0x025B, r1
				Isb_Systick_Clock.Minutes++;
     914:	80 91 5c 02 	lds	r24, 0x025C
     918:	8f 5f       	subi	r24, 0xFF	; 255
     91a:	80 93 5c 02 	sts	0x025C, r24
				if (Isb_Systick_Clock.Minutes == 60)
     91e:	8c 33       	cpi	r24, 0x3C	; 60
     920:	09 f0       	breq	.+2      	; 0x924 <Isb_Systick_Exec+0x46>
     922:	5c c0       	rjmp	.+184    	; 0x9dc <Isb_Systick_Exec+0xfe>
				{
					Isb_Systick_Clock.Minutes = 0;
     924:	10 92 5c 02 	sts	0x025C, r1
					Isb_Systick_Clock.Hour++;
     928:	80 91 5d 02 	lds	r24, 0x025D
     92c:	8f 5f       	subi	r24, 0xFF	; 255
     92e:	80 93 5d 02 	sts	0x025D, r24
					if (Isb_Systick_Clock.Hour == 24)
     932:	88 31       	cpi	r24, 0x18	; 24
     934:	09 f0       	breq	.+2      	; 0x938 <Isb_Systick_Exec+0x5a>
     936:	52 c0       	rjmp	.+164    	; 0x9dc <Isb_Systick_Exec+0xfe>
					{
						Isb_Systick_Clock.Hour = 0;
     938:	10 92 5d 02 	sts	0x025D, r1
						Isb_Systick_Clock.Day++;
     93c:	40 91 5e 02 	lds	r20, 0x025E
     940:	4f 5f       	subi	r20, 0xFF	; 255
     942:	40 93 5e 02 	sts	0x025E, r20
						Isb_Systick_Clock.Dow++;
     946:	80 91 5f 02 	lds	r24, 0x025F
     94a:	8f 5f       	subi	r24, 0xFF	; 255
     94c:	80 93 5f 02 	sts	0x025F, r24
						if (Isb_Systick_Clock.Dow == 8)
     950:	88 30       	cpi	r24, 0x08	; 8
     952:	19 f4       	brne	.+6      	; 0x95a <Isb_Systick_Exec+0x7c>
						{
							Isb_Systick_Clock.Dow = 1;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	80 93 5f 02 	sts	0x025F, r24
						}
						uint8_t newMonth = 0;
						if (Isb_Systick_Clock.Month == 2)
     95a:	10 91 60 02 	lds	r17, 0x0260
     95e:	12 30       	cpi	r17, 0x02	; 2
     960:	e1 f4       	brne	.+56     	; 0x99a <Isb_Systick_Exec+0xbc>
						{
							if ((Isb_Systick_Clock.Year % 4) == 0)
     962:	20 91 61 02 	lds	r18, 0x0261
     966:	30 91 62 02 	lds	r19, 0x0262
     96a:	c9 01       	movw	r24, r18
     96c:	83 70       	andi	r24, 0x03	; 3
     96e:	90 70       	andi	r25, 0x00	; 0
     970:	89 2b       	or	r24, r25
     972:	81 f4       	brne	.+32     	; 0x994 <Isb_Systick_Exec+0xb6>
							{
								newMonth = 1;
								if ((Isb_Systick_Clock.Year % 100) == 0)
     974:	c9 01       	movw	r24, r18
     976:	64 e6       	ldi	r22, 0x64	; 100
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <__udivmodhi4>
     97e:	89 2b       	or	r24, r25
     980:	09 f0       	breq	.+2      	; 0x984 <Isb_Systick_Exec+0xa6>
     982:	76 c0       	rjmp	.+236    	; 0xa70 <Isb_Systick_Exec+0x192>
								{
									newMonth = 0;
									if ((Isb_Systick_Clock.Year % 400) == 0)
     984:	c9 01       	movw	r24, r18
     986:	60 e9       	ldi	r22, 0x90	; 144
     988:	71 e0       	ldi	r23, 0x01	; 1
     98a:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <__udivmodhi4>
     98e:	89 2b       	or	r24, r25
     990:	09 f4       	brne	.+2      	; 0x994 <Isb_Systick_Exec+0xb6>
     992:	6e c0       	rjmp	.+220    	; 0xa70 <Isb_Systick_Exec+0x192>
									newMonth = 0;
								}
							}
							else
							{
								if (Isb_Systick_Clock.Day == (daysPerMonth[Isb_Systick_Clock.Month] + 1))
     994:	40 32       	cpi	r20, 0x20	; 32
     996:	11 f5       	brne	.+68     	; 0x9dc <Isb_Systick_Exec+0xfe>
     998:	0d c0       	rjmp	.+26     	; 0x9b4 <Isb_Systick_Exec+0xd6>
								}
							}
						}
						else
						{
							if (Isb_Systick_Clock.Day == (daysPerMonth[Isb_Systick_Clock.Month] + 1))
     99a:	84 2f       	mov	r24, r20
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	e1 2f       	mov	r30, r17
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	ec 56       	subi	r30, 0x6C	; 108
     9a4:	ff 4f       	sbci	r31, 0xFF	; 255
     9a6:	20 81       	ld	r18, Z
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	2f 5f       	subi	r18, 0xFF	; 255
     9ac:	3f 4f       	sbci	r19, 0xFF	; 255
     9ae:	82 17       	cp	r24, r18
     9b0:	93 07       	cpc	r25, r19
     9b2:	a1 f4       	brne	.+40     	; 0x9dc <Isb_Systick_Exec+0xfe>
								newMonth = 1;
							}
						}
						if (newMonth)
						{
							Isb_Systick_Clock.Day = 1;
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	90 93 5e 02 	sts	0x025E, r25
							Isb_Systick_Clock.Month++;
     9ba:	81 2f       	mov	r24, r17
     9bc:	8f 5f       	subi	r24, 0xFF	; 255
     9be:	80 93 60 02 	sts	0x0260, r24
							if (Isb_Systick_Clock.Month == 13)
     9c2:	8d 30       	cpi	r24, 0x0D	; 13
     9c4:	59 f4       	brne	.+22     	; 0x9dc <Isb_Systick_Exec+0xfe>
							{
								Isb_Systick_Clock.Month = 1;
     9c6:	90 93 60 02 	sts	0x0260, r25
								Isb_Systick_Clock.Year++;
     9ca:	80 91 61 02 	lds	r24, 0x0261
     9ce:	90 91 62 02 	lds	r25, 0x0262
     9d2:	01 96       	adiw	r24, 0x01	; 1
     9d4:	90 93 62 02 	sts	0x0262, r25
     9d8:	80 93 61 02 	sts	0x0261, r24
					}
				}
			}
		}

		if (bit_is_clear(Isb_Systick_Ctrl, ISB_CTRL_RUNNING))
     9dc:	80 91 a0 00 	lds	r24, 0x00A0
     9e0:	86 fd       	sbrc	r24, 6
     9e2:	13 c0       	rjmp	.+38     	; 0xa0a <Isb_Systick_Exec+0x12c>
		{
			uint16_t Isb_Systick_Delay = 1000;
			if (Isb_Systick_Delay_Counter == Isb_Systick_Delay)
     9e4:	20 91 a3 00 	lds	r18, 0x00A3
     9e8:	30 91 a4 00 	lds	r19, 0x00A4
     9ec:	83 e0       	ldi	r24, 0x03	; 3
     9ee:	28 3e       	cpi	r18, 0xE8	; 232
     9f0:	38 07       	cpc	r19, r24
     9f2:	29 f4       	brne	.+10     	; 0x9fe <Isb_Systick_Exec+0x120>
			{
				Isb_Systick_Ctrl |= (1<<ISB_CTRL_RUNNING);
     9f4:	80 91 a0 00 	lds	r24, 0x00A0
     9f8:	80 64       	ori	r24, 0x40	; 64
     9fa:	80 93 a0 00 	sts	0x00A0, r24
			}
			Isb_Systick_Delay_Counter++;
     9fe:	2f 5f       	subi	r18, 0xFF	; 255
     a00:	3f 4f       	sbci	r19, 0xFF	; 255
     a02:	30 93 a4 00 	sts	0x00A4, r19
     a06:	20 93 a3 00 	sts	0x00A3, r18
			If_Rf_Rfm12_Ctrl |= (1 << IF_RF_RFM12_CTRL_SOFTIRQ_EXEC);
		}
	#endif /* IF_RF_RFM12 */

	#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
		if (Isb_App_DigOut_IrqExec >= ISB_APP_DIGOUT_EXECTIME)
     a0a:	80 91 ad 00 	lds	r24, 0x00AD
     a0e:	90 91 ae 00 	lds	r25, 0x00AE
     a12:	0a 97       	sbiw	r24, 0x0a	; 10
     a14:	48 f0       	brcs	.+18     	; 0xa28 <Isb_Systick_Exec+0x14a>
		{
			Isb_App_DigOut_IrqExec = 0;
     a16:	10 92 ae 00 	sts	0x00AE, r1
     a1a:	10 92 ad 00 	sts	0x00AD, r1
			Isb_App_DigOut_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a1e:	80 91 ac 00 	lds	r24, 0x00AC
     a22:	81 60       	ori	r24, 0x01	; 1
     a24:	80 93 ac 00 	sts	0x00AC, r24
		}
	#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

	#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
		if (Isb_App_DigIn_IrqExec >= ISB_APP_DIGIN_EXECTIME)
     a28:	80 91 af 00 	lds	r24, 0x00AF
     a2c:	90 91 b0 00 	lds	r25, 0x00B0
     a30:	0a 97       	sbiw	r24, 0x0a	; 10
     a32:	48 f0       	brcs	.+18     	; 0xa46 <Isb_Systick_Exec+0x168>
		{
			Isb_App_DigIn_IrqExec = 0;
     a34:	10 92 b0 00 	sts	0x00B0, r1
     a38:	10 92 af 00 	sts	0x00AF, r1
			Isb_App_DigIn_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a3c:	80 91 ab 00 	lds	r24, 0x00AB
     a40:	81 60       	ori	r24, 0x01	; 1
     a42:	80 93 ab 00 	sts	0x00AB, r24
			Isb_App_Clock_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
		}
	#endif /* ISB_APP_CLOCK_MAX && ISB_APP_H_ */

	#if defined(ISB_OBJ_MAX) && defined(ISB_OBJ_H_)
		if (Isb_Obj_IrqExec >= ISB_OBJ_EXECTIME)
     a46:	80 91 b1 00 	lds	r24, 0x00B1
     a4a:	90 91 b2 00 	lds	r25, 0x00B2
     a4e:	0a 97       	sbiw	r24, 0x0a	; 10
     a50:	48 f0       	brcs	.+18     	; 0xa64 <Isb_Systick_Exec+0x186>
		{
			Isb_Obj_IrqExec = 0;
     a52:	10 92 b2 00 	sts	0x00B2, r1
     a56:	10 92 b1 00 	sts	0x00B1, r1
			Isb_Obj_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a5a:	80 91 aa 00 	lds	r24, 0x00AA
     a5e:	81 60       	ori	r24, 0x01	; 1
     a60:	80 93 aa 00 	sts	0x00AA, r24
			Isb_Obj_Float_IrqExec = 0;
			Isb_Obj_Float_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
		}
	#endif /* ISB_OBJ_FLOAT_MAX && ISB_OBJ_H_ */

	Isb_Systick_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
     a64:	80 91 a0 00 	lds	r24, 0x00A0
     a68:	8e 7f       	andi	r24, 0xFE	; 254
     a6a:	80 93 a0 00 	sts	0x00A0, r24
     a6e:	06 c0       	rjmp	.+12     	; 0xa7c <Isb_Systick_Exec+0x19e>
									}
								}
							}
							if (newMonth)
							{
								if (Isb_Systick_Clock.Day < (daysPerMonth[Isb_Systick_Clock.Month] + 2))
     a70:	84 2f       	mov	r24, r20
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	81 97       	sbiw	r24, 0x21	; 33
     a76:	0c f4       	brge	.+2      	; 0xa7a <Isb_Systick_Exec+0x19c>
     a78:	b1 cf       	rjmp	.-158    	; 0x9dc <Isb_Systick_Exec+0xfe>
     a7a:	9c cf       	rjmp	.-200    	; 0x9b4 <Isb_Systick_Exec+0xd6>
	#endif /* ISB_OBJ_FLOAT_MAX && ISB_OBJ_H_ */

	Isb_Systick_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
	}

}
     a7c:	1f 91       	pop	r17
     a7e:	08 95       	ret

00000a80 <Isb_Systick_Irq_Timer>:


void Isb_Systick_Irq_Timer(void)
{

	Isb_Systick_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a80:	80 91 a0 00 	lds	r24, 0x00A0
     a84:	81 60       	ori	r24, 0x01	; 1
     a86:	80 93 a0 00 	sts	0x00A0, r24
	Isb_Systick_IrqClock++;
     a8a:	80 91 a1 00 	lds	r24, 0x00A1
     a8e:	90 91 a2 00 	lds	r25, 0x00A2
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	90 93 a2 00 	sts	0x00A2, r25
     a98:	80 93 a1 00 	sts	0x00A1, r24
	#if defined(IF_RF_RFM12)
	If_Rf_Rfm12_IrqExec++;
	#endif /* IF_RF_RFM12 */

	#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
	Isb_App_DigOut_IrqExec++;
     a9c:	80 91 ad 00 	lds	r24, 0x00AD
     aa0:	90 91 ae 00 	lds	r25, 0x00AE
     aa4:	01 96       	adiw	r24, 0x01	; 1
     aa6:	90 93 ae 00 	sts	0x00AE, r25
     aaa:	80 93 ad 00 	sts	0x00AD, r24
	#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

	#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
	Isb_App_DigIn_IrqExec++;
     aae:	80 91 af 00 	lds	r24, 0x00AF
     ab2:	90 91 b0 00 	lds	r25, 0x00B0
     ab6:	01 96       	adiw	r24, 0x01	; 1
     ab8:	90 93 b0 00 	sts	0x00B0, r25
     abc:	80 93 af 00 	sts	0x00AF, r24
	#if defined(ISB_APP_CLOCK_MAX) && defined(ISB_APP_H_)
	Isb_App_Clock_IrqExec++;
	#endif /* ISB_APP_CLOCK_MAX && ISB_APP_H_ */

	#if defined(ISB_OBJ_MAX) && defined(ISB_OBJ_H_)
	Isb_Obj_IrqExec++;
     ac0:	80 91 b1 00 	lds	r24, 0x00B1
     ac4:	90 91 b2 00 	lds	r25, 0x00B2
     ac8:	01 96       	adiw	r24, 0x01	; 1
     aca:	90 93 b2 00 	sts	0x00B2, r25
     ace:	80 93 b1 00 	sts	0x00B1, r24

	#if defined(HW_EUROTRONIC_SPARMATIC_ZERO_H_) && defined(HW_EUROTRONIC_SPARMATIC_ZERO_H_)
	Hw_Eurotronic_Sparmatic_Zero_MotorUeberwachungCount++;
	#endif /* HW_EUROTRONIC_SPARMATIC_ZERO_H_ && HW_EUROTRONIC_SPARMATIC_ZERO_H_ */

}
     ad2:	08 95       	ret

00000ad4 <__vector_19>:
	#if defined(__AVR_ATmega8__)
		#warning "TIMER0_COMP_vect missing."
		#error "No definition for this MCU available."
	#elif defined(__AVR_ATmega16__)
ISR(TIMER0_COMP_vect)
{
     ad4:	1f 92       	push	r1
     ad6:	0f 92       	push	r0
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	0f 92       	push	r0
     adc:	11 24       	eor	r1, r1
     ade:	8f 93       	push	r24
     ae0:	9f 93       	push	r25


void Isb_Systick_Irq_Timer(void)
{

	Isb_Systick_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     ae2:	80 91 a0 00 	lds	r24, 0x00A0
     ae6:	81 60       	ori	r24, 0x01	; 1
     ae8:	80 93 a0 00 	sts	0x00A0, r24
	Isb_Systick_IrqClock++;
     aec:	80 91 a1 00 	lds	r24, 0x00A1
     af0:	90 91 a2 00 	lds	r25, 0x00A2
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	90 93 a2 00 	sts	0x00A2, r25
     afa:	80 93 a1 00 	sts	0x00A1, r24
	#if defined(IF_RF_RFM12)
	If_Rf_Rfm12_IrqExec++;
	#endif /* IF_RF_RFM12 */

	#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
	Isb_App_DigOut_IrqExec++;
     afe:	80 91 ad 00 	lds	r24, 0x00AD
     b02:	90 91 ae 00 	lds	r25, 0x00AE
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	90 93 ae 00 	sts	0x00AE, r25
     b0c:	80 93 ad 00 	sts	0x00AD, r24
	#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

	#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
	Isb_App_DigIn_IrqExec++;
     b10:	80 91 af 00 	lds	r24, 0x00AF
     b14:	90 91 b0 00 	lds	r25, 0x00B0
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	90 93 b0 00 	sts	0x00B0, r25
     b1e:	80 93 af 00 	sts	0x00AF, r24
	#if defined(ISB_APP_CLOCK_MAX) && defined(ISB_APP_H_)
	Isb_App_Clock_IrqExec++;
	#endif /* ISB_APP_CLOCK_MAX && ISB_APP_H_ */

	#if defined(ISB_OBJ_MAX) && defined(ISB_OBJ_H_)
	Isb_Obj_IrqExec++;
     b22:	80 91 b1 00 	lds	r24, 0x00B1
     b26:	90 91 b2 00 	lds	r25, 0x00B2
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	90 93 b2 00 	sts	0x00B2, r25
     b30:	80 93 b1 00 	sts	0x00B1, r24
		#error "No definition for this MCU available."
	#elif defined(__AVR_ATmega16__)
ISR(TIMER0_COMP_vect)
{
	Isb_Systick_Irq_Timer();
}
     b34:	9f 91       	pop	r25
     b36:	8f 91       	pop	r24
     b38:	0f 90       	pop	r0
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	0f 90       	pop	r0
     b3e:	1f 90       	pop	r1
     b40:	18 95       	reti

00000b42 <Isb_App_Init>:
//			}
// TODO: Alles
// TODO: <-
		#endif /* ISB_APP_LCD_MAX */

	}
     b42:	08 95       	ret

00000b44 <Isb_App_Convert_None>:



	void Isb_App_Convert_None(uint16_t Value, void *Destination)
	{
     b44:	fb 01       	movw	r30, r22

		*(uint16_t *)Destination = Value;
     b46:	91 83       	std	Z+1, r25	; 0x01
     b48:	80 83       	st	Z, r24

	}
     b4a:	08 95       	ret

00000b4c <Isb_App_Convert_PT100>:



	void Isb_App_Convert_PT100(uint16_t Value, void *Destination)
	{
     b4c:	fb 01       	movw	r30, r22

		Value = Value << 1;
		*(uint16_t *)Destination = Value;
     b4e:	88 0f       	add	r24, r24
     b50:	99 1f       	adc	r25, r25
     b52:	91 83       	std	Z+1, r25	; 0x01
     b54:	80 83       	st	Z, r24

	}
     b56:	08 95       	ret

00000b58 <Lib_FloatToInteger>:



	int32_t Lib_FloatToInteger(uint16_t Float)
	{
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	00 d0       	rcall	.+0      	; 0xb5e <Lib_FloatToInteger+0x6>
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
     b62:	9a 83       	std	Y+2, r25	; 0x02
     b64:	89 83       	std	Y+1, r24	; 0x01

		uint32_t Integer = 0;
		uint16_t Exponent = (Float & 0x7C00)>>11;
     b66:	9c 01       	movw	r18, r24
		uint16_t Mantisse = Float & 0x03FF;

		if (bit_is_set(Float, 15))
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	c9 01       	movw	r24, r18
     b6c:	80 70       	andi	r24, 0x00	; 0
     b6e:	9c 77       	andi	r25, 0x7C	; 124
     b70:	89 2f       	mov	r24, r25
     b72:	86 95       	lsr	r24
     b74:	86 95       	lsr	r24
     b76:	86 95       	lsr	r24
     b78:	33 70       	andi	r19, 0x03	; 3
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <Lib_FloatToInteger+0x28>
     b7c:	22 0f       	add	r18, r18
     b7e:	33 1f       	adc	r19, r19
     b80:	8a 95       	dec	r24
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <Lib_FloatToInteger+0x24>
     b84:	40 e0       	ldi	r20, 0x00	; 0
     b86:	50 e0       	ldi	r21, 0x00	; 0
     b88:	50 95       	com	r21
     b8a:	40 95       	com	r20
     b8c:	30 95       	com	r19
     b8e:	21 95       	neg	r18
     b90:	3f 4f       	sbci	r19, 0xFF	; 255
     b92:	4f 4f       	sbci	r20, 0xFF	; 255
     b94:	5f 4f       	sbci	r21, 0xFF	; 255
			Integer -= Mantisse * (1<<Exponent);
		}

		return Integer;

	}
     b96:	b9 01       	movw	r22, r18
     b98:	ca 01       	movw	r24, r20
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	cf 91       	pop	r28
     ba0:	df 91       	pop	r29
     ba2:	08 95       	ret

00000ba4 <Lib_IntegerToFloat>:
	{

		uint16_t Float = 0;

		// Vorzeichen
		if (Integer >= 0)
     ba4:	97 fd       	sbrc	r25, 7
     ba6:	03 c0       	rjmp	.+6      	; 0xbae <Lib_IntegerToFloat+0xa>
     ba8:	40 e0       	ldi	r20, 0x00	; 0
     baa:	50 e8       	ldi	r21, 0x80	; 128
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <Lib_IntegerToFloat+0xe>
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	06 c0       	rjmp	.+12     	; 0xbc4 <Lib_IntegerToFloat+0x20>
		}

		uint16_t Exponent = 0;
		while (Integer > 2047)
		{
			Exponent++;
     bb8:	2f 5f       	subi	r18, 0xFF	; 255
     bba:	3f 4f       	sbci	r19, 0xFF	; 255
			Integer = Integer >> 1;
     bbc:	95 95       	asr	r25
     bbe:	87 95       	ror	r24
     bc0:	77 95       	ror	r23
     bc2:	67 95       	ror	r22
		{
			Float |= 0x8000;
		}

		uint16_t Exponent = 0;
		while (Integer > 2047)
     bc4:	60 30       	cpi	r22, 0x00	; 0
     bc6:	e8 e0       	ldi	r30, 0x08	; 8
     bc8:	7e 07       	cpc	r23, r30
     bca:	e0 e0       	ldi	r30, 0x00	; 0
     bcc:	8e 07       	cpc	r24, r30
     bce:	e0 e0       	ldi	r30, 0x00	; 0
     bd0:	9e 07       	cpc	r25, r30
     bd2:	94 f7       	brge	.-28     	; 0xbb8 <Lib_IntegerToFloat+0x14>
			Exponent++;
			Integer = Integer >> 1;
		}
		Exponent = Exponent << 11;

		Float |= Exponent;
     bd4:	32 2f       	mov	r19, r18
     bd6:	22 27       	eor	r18, r18
     bd8:	33 0f       	add	r19, r19
     bda:	33 0f       	add	r19, r19
     bdc:	33 0f       	add	r19, r19
     bde:	26 2b       	or	r18, r22
     be0:	37 2b       	or	r19, r23
     be2:	24 2b       	or	r18, r20
     be4:	35 2b       	or	r19, r21
		Float |= (uint16_t)Integer;

		return Float;

	}
     be6:	c9 01       	movw	r24, r18
     be8:	08 95       	ret

00000bea <Isb_Ch_Ctrl_Get.2324>:
		uint8_t Isb_Ch_Ctrl_Get(uint8_t Ch)
		{
			uint8_t Ctrl = 0;
			uint16_t eepAddrCtrl = 0;
			uint16_t eepAddrCrc = 0;
			switch (Ch)
     bea:	87 30       	cpi	r24, 0x07	; 7
     bec:	09 f4       	brne	.+2      	; 0xbf0 <Isb_Ch_Ctrl_Get.2324+0x6>
     bee:	4b c0       	rjmp	.+150    	; 0xc86 <Isb_Ch_Ctrl_Get.2324+0x9c>
     bf0:	88 30       	cpi	r24, 0x08	; 8
     bf2:	70 f4       	brcc	.+28     	; 0xc10 <Isb_Ch_Ctrl_Get.2324+0x26>
     bf4:	83 30       	cpi	r24, 0x03	; 3
     bf6:	99 f1       	breq	.+102    	; 0xc5e <Isb_Ch_Ctrl_Get.2324+0x74>
     bf8:	84 30       	cpi	r24, 0x04	; 4
     bfa:	28 f4       	brcc	.+10     	; 0xc06 <Isb_Ch_Ctrl_Get.2324+0x1c>
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	29 f1       	breq	.+74     	; 0xc4a <Isb_Ch_Ctrl_Get.2324+0x60>
     c00:	82 30       	cpi	r24, 0x02	; 2
     c02:	40 f5       	brcc	.+80     	; 0xc54 <Isb_Ch_Ctrl_Get.2324+0x6a>
     c04:	1d c0       	rjmp	.+58     	; 0xc40 <Isb_Ch_Ctrl_Get.2324+0x56>
     c06:	85 30       	cpi	r24, 0x05	; 5
     c08:	a1 f1       	breq	.+104    	; 0xc72 <Isb_Ch_Ctrl_Get.2324+0x88>
     c0a:	86 30       	cpi	r24, 0x06	; 6
     c0c:	b8 f5       	brcc	.+110    	; 0xc7c <Isb_Ch_Ctrl_Get.2324+0x92>
     c0e:	2c c0       	rjmp	.+88     	; 0xc68 <Isb_Ch_Ctrl_Get.2324+0x7e>
     c10:	8b 30       	cpi	r24, 0x0B	; 11
     c12:	09 f4       	brne	.+2      	; 0xc16 <Isb_Ch_Ctrl_Get.2324+0x2c>
     c14:	4c c0       	rjmp	.+152    	; 0xcae <Isb_Ch_Ctrl_Get.2324+0xc4>
     c16:	8c 30       	cpi	r24, 0x0C	; 12
     c18:	30 f4       	brcc	.+12     	; 0xc26 <Isb_Ch_Ctrl_Get.2324+0x3c>
     c1a:	89 30       	cpi	r24, 0x09	; 9
     c1c:	f1 f1       	breq	.+124    	; 0xc9a <Isb_Ch_Ctrl_Get.2324+0xb0>
     c1e:	8a 30       	cpi	r24, 0x0A	; 10
     c20:	08 f0       	brcs	.+2      	; 0xc24 <Isb_Ch_Ctrl_Get.2324+0x3a>
     c22:	40 c0       	rjmp	.+128    	; 0xca4 <Isb_Ch_Ctrl_Get.2324+0xba>
     c24:	35 c0       	rjmp	.+106    	; 0xc90 <Isb_Ch_Ctrl_Get.2324+0xa6>
     c26:	8d 30       	cpi	r24, 0x0D	; 13
     c28:	09 f4       	brne	.+2      	; 0xc2c <Isb_Ch_Ctrl_Get.2324+0x42>
     c2a:	4b c0       	rjmp	.+150    	; 0xcc2 <Isb_Ch_Ctrl_Get.2324+0xd8>
     c2c:	8d 30       	cpi	r24, 0x0D	; 13
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <Isb_Ch_Ctrl_Get.2324+0x48>
     c30:	43 c0       	rjmp	.+134    	; 0xcb8 <Isb_Ch_Ctrl_Get.2324+0xce>
     c32:	8e 30       	cpi	r24, 0x0E	; 14
     c34:	09 f4       	brne	.+2      	; 0xc38 <Isb_Ch_Ctrl_Get.2324+0x4e>
     c36:	4a c0       	rjmp	.+148    	; 0xccc <Isb_Ch_Ctrl_Get.2324+0xe2>
     c38:	8f 30       	cpi	r24, 0x0F	; 15
     c3a:	09 f0       	breq	.+2      	; 0xc3e <Isb_Ch_Ctrl_Get.2324+0x54>
     c3c:	53 c0       	rjmp	.+166    	; 0xce4 <Isb_Ch_Ctrl_Get.2324+0xfa>
     c3e:	4b c0       	rjmp	.+150    	; 0xcd6 <Isb_Ch_Ctrl_Get.2324+0xec>
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	8a e1       	ldi	r24, 0x1A	; 26
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	4a c0       	rjmp	.+148    	; 0xcde <Isb_Ch_Ctrl_Get.2324+0xf4>
     c4a:	2b e1       	ldi	r18, 0x1B	; 27
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	85 e3       	ldi	r24, 0x35	; 53
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	45 c0       	rjmp	.+138    	; 0xcde <Isb_Ch_Ctrl_Get.2324+0xf4>
				#endif /* ISB_CH_0 */
				#if defined(ISB_CH_1)
					case 1:
						eepAddrCtrl = ISB_CH_1_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_1_EEADDR_CRC;
						break;
     c54:	26 e3       	ldi	r18, 0x36	; 54
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	80 e5       	ldi	r24, 0x50	; 80
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	40 c0       	rjmp	.+128    	; 0xcde <Isb_Ch_Ctrl_Get.2324+0xf4>
				#endif /* ISB_CH_1 */
				#if defined(ISB_CH_2)
					case 2:
						eepAddrCtrl = ISB_CH_2_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_2_EEADDR_CRC;
						break;
     c5e:	21 e5       	ldi	r18, 0x51	; 81
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	8b e6       	ldi	r24, 0x6B	; 107
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	3b c0       	rjmp	.+118    	; 0xcde <Isb_Ch_Ctrl_Get.2324+0xf4>
				#endif /* ISB_CH_2 */
				#if defined(ISB_CH_3)
					case 3:
						eepAddrCtrl = ISB_CH_3_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_3_EEADDR_CRC;
						break;
     c68:	2c e6       	ldi	r18, 0x6C	; 108
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	86 e8       	ldi	r24, 0x86	; 134
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	36 c0       	rjmp	.+108    	; 0xcde <Isb_Ch_Ctrl_Get.2324+0xf4>
				#endif /* ISB_CH_3 */
				#if defined(ISB_CH_4)
					case 4:
						eepAddrCtrl = ISB_CH_4_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_4_EEADDR_CRC;
						break;
     c72:	27 e8       	ldi	r18, 0x87	; 135
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 ea       	ldi	r24, 0xA1	; 161
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	31 c0       	rjmp	.+98     	; 0xcde <Isb_Ch_Ctrl_Get.2324+0xf4>
				#endif /* ISB_CH_4 */
				#if defined(ISB_CH_5)
					case 5:
						eepAddrCtrl = ISB_CH_5_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_5_EEADDR_CRC;
						break;
     c7c:	22 ea       	ldi	r18, 0xA2	; 162
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	8c eb       	ldi	r24, 0xBC	; 188
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	2c c0       	rjmp	.+88     	; 0xcde <Isb_Ch_Ctrl_Get.2324+0xf4>
				#endif /* ISB_CH_5 */
				#if defined(ISB_CH_6)
					case 6:
						eepAddrCtrl = ISB_CH_6_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_6_EEADDR_CRC;
						break;
     c86:	2d eb       	ldi	r18, 0xBD	; 189
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	87 ed       	ldi	r24, 0xD7	; 215
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	27 c0       	rjmp	.+78     	; 0xcde <Isb_Ch_Ctrl_Get.2324+0xf4>
				#endif /* ISB_CH_6 */
				#if defined(ISB_CH_7)
					case 7:
						eepAddrCtrl = ISB_CH_7_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_7_EEADDR_CRC;
						break;
     c90:	28 ed       	ldi	r18, 0xD8	; 216
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	81 ee       	ldi	r24, 0xE1	; 225
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	22 c0       	rjmp	.+68     	; 0xcde <Isb_Ch_Ctrl_Get.2324+0xf4>
				#endif /* ISB_CH_7 */
				#if defined(ISB_CH_8)
					case 8:
						eepAddrCtrl = ISB_CH_8_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_8_EEADDR_CRC;
						break;
     c9a:	22 ee       	ldi	r18, 0xE2	; 226
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	8b ee       	ldi	r24, 0xEB	; 235
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	1d c0       	rjmp	.+58     	; 0xcde <Isb_Ch_Ctrl_Get.2324+0xf4>
				#endif /* ISB_CH_8 */
				#if defined(ISB_CH_9)
					case 9:
						eepAddrCtrl = ISB_CH_9_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_9_EEADDR_CRC;
						break;
     ca4:	2c ee       	ldi	r18, 0xEC	; 236
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	85 ef       	ldi	r24, 0xF5	; 245
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	18 c0       	rjmp	.+48     	; 0xcde <Isb_Ch_Ctrl_Get.2324+0xf4>
				#endif /* ISB_CH_9 */
				#if defined(ISB_CH_10)
					case 10:
						eepAddrCtrl = ISB_CH_10_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_10_EEADDR_CRC;
						break;
     cae:	26 ef       	ldi	r18, 0xF6	; 246
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	13 c0       	rjmp	.+38     	; 0xcde <Isb_Ch_Ctrl_Get.2324+0xf4>
				#endif /* ISB_CH_10 */
				#if defined(ISB_CH_11)
					case 11:
						eepAddrCtrl = ISB_CH_11_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_11_EEADDR_CRC;
						break;
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	31 e0       	ldi	r19, 0x01	; 1
     cbc:	89 e0       	ldi	r24, 0x09	; 9
     cbe:	91 e0       	ldi	r25, 0x01	; 1
     cc0:	0e c0       	rjmp	.+28     	; 0xcde <Isb_Ch_Ctrl_Get.2324+0xf4>
				#endif /* ISB_CH_11 */
				#if defined(ISB_CH_12)
					case 12:
						eepAddrCtrl = ISB_CH_12_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_12_EEADDR_CRC;
						break;
     cc2:	2a e0       	ldi	r18, 0x0A	; 10
     cc4:	31 e0       	ldi	r19, 0x01	; 1
     cc6:	83 e1       	ldi	r24, 0x13	; 19
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	09 c0       	rjmp	.+18     	; 0xcde <Isb_Ch_Ctrl_Get.2324+0xf4>
				#endif /* ISB_CH_12 */
				#if defined(ISB_CH_13)
					case 13:
						eepAddrCtrl = ISB_CH_13_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_13_EEADDR_CRC;
						break;
     ccc:	24 e1       	ldi	r18, 0x14	; 20
     cce:	31 e0       	ldi	r19, 0x01	; 1
     cd0:	8d e1       	ldi	r24, 0x1D	; 29
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	04 c0       	rjmp	.+8      	; 0xcde <Isb_Ch_Ctrl_Get.2324+0xf4>
				#endif /* ISB_CH_13 */
				#if defined(ISB_CH_14)
					case 14:
						eepAddrCtrl = ISB_CH_14_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_14_EEADDR_CRC;
						break;
     cd6:	2e e1       	ldi	r18, 0x1E	; 30
     cd8:	31 e0       	ldi	r19, 0x01	; 1
     cda:	87 e2       	ldi	r24, 0x27	; 39
     cdc:	91 e0       	ldi	r25, 0x01	; 1
//-				default:
//-					eepAddrCtrl = 0;
//-					eepAddrCrc = 0;
//-					break;
			}
			if ((eepAddrCrc != 0) & (eepAddrCtrl < eepAddrCrc))
     cde:	28 17       	cp	r18, r24
     ce0:	39 07       	cpc	r19, r25
     ce2:	10 f0       	brcs	.+4      	; 0xce8 <Isb_Ch_Ctrl_Get.2324+0xfe>
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	08 95       	ret
     ce8:	a9 01       	movw	r20, r18
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <Isb_Ch_Ctrl_Get.2324+0x106>
			{
				uint8_t Crc = 0;
				for (uint16_t eepAddr = eepAddrCtrl; eepAddr <= eepAddrCrc; eepAddr++)
     cec:	4f 5f       	subi	r20, 0xFF	; 255
     cee:	5f 4f       	sbci	r21, 0xFF	; 255
     cf0:	84 17       	cp	r24, r20
     cf2:	95 07       	cpc	r25, r21
     cf4:	d8 f7       	brcc	.-10     	; 0xcec <Isb_Ch_Ctrl_Get.2324+0x102>
	}



	uint8_t __attribute__((always_inline)) lib_eep_fw_read_byte(uint8_t * aAddr) {
		return eeprom_read_byte(Isb_Firmware_Offset + aAddr);;
     cf6:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     cfa:	e1 99       	sbic	0x1c, 1	; 28
     cfc:	fe cf       	rjmp	.-4      	; 0xcfa <Isb_Ch_Ctrl_Get.2324+0x110>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     cfe:	28 0f       	add	r18, r24
     d00:	31 1d       	adc	r19, r1
     d02:	3f bb       	out	0x1f, r19	; 31
     d04:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
     d06:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     d08:	8d b3       	in	r24, 0x1d	; 29
				}
				else
				{
					Ctrl = (1<<ISB_CH_CTRL_ERROR_CRC);
				}
				Ctrl &= ~(1<<ISB_CH_CTRL_INITIALIZED);
     d0a:	8f 73       	andi	r24, 0x3F	; 63
			}
			return Ctrl;
		}
     d0c:	08 95       	ret

00000d0e <Isb_App_Exec>:
	}



	void Isb_App_Exec(void)
	{
     d0e:	2f 92       	push	r2
     d10:	3f 92       	push	r3
     d12:	4f 92       	push	r4
     d14:	5f 92       	push	r5
     d16:	6f 92       	push	r6
     d18:	7f 92       	push	r7
     d1a:	8f 92       	push	r8
     d1c:	9f 92       	push	r9
     d1e:	af 92       	push	r10
     d20:	bf 92       	push	r11
     d22:	cf 92       	push	r12
     d24:	df 92       	push	r13
     d26:	ef 92       	push	r14
     d28:	ff 92       	push	r15
     d2a:	0f 93       	push	r16
     d2c:	1f 93       	push	r17
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
     d36:	69 97       	sbiw	r28, 0x19	; 25
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	f8 94       	cli
     d3c:	de bf       	out	0x3e, r29	; 62
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	cd bf       	out	0x3d, r28	; 61
				Isb_App_Clock_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
			}
		#endif /* ISB_APP_CLOCK_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			if (bit_is_set(Isb_App_DigIn_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
     d42:	80 91 ab 00 	lds	r24, 0x00AB
     d46:	80 ff       	sbrs	r24, 0
     d48:	02 c7       	rjmp	.+3588   	; 0x1b4e <Isb_App_Exec+0xe40>
     d4a:	80 91 a7 00 	lds	r24, 0x00A7
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	3c 83       	std	Y+4, r19	; 0x04
     d54:	2b 83       	std	Y+3, r18	; 0x03
     d56:	43 ed       	ldi	r20, 0xD3	; 211
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	59 8f       	std	Y+25, r21	; 0x19
     d5c:	48 8f       	std	Y+24, r20	; 0x18
     d5e:	1a 82       	std	Y+2, r1	; 0x02
     d60:	19 82       	std	Y+1, r1	; 0x01
     d62:	99 81       	ldd	r25, Y+1	; 0x01
			{
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++)
				{
					uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigIn_Ch_Array[AppIndex]);
     d64:	e9 81       	ldd	r30, Y+1	; 0x01
     d66:	fa 81       	ldd	r31, Y+2	; 0x02
     d68:	ec 58       	subi	r30, 0x8C	; 140
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	24 91       	lpm	r18, Z+
					uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigIn_Pin0_Array[AppIndex]);
     d6e:	e9 81       	ldd	r30, Y+1	; 0x01
     d70:	fa 81       	ldd	r31, Y+2	; 0x02
     d72:	e4 58       	subi	r30, 0x84	; 132
     d74:	ff 4f       	sbci	r31, 0xFF	; 255
     d76:	54 91       	lpm	r21, Z+
     d78:	5b 8b       	std	Y+19, r21	; 0x13
					uint8_t Obj_0 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_0_Array[AppIndex]);
     d7a:	e9 81       	ldd	r30, Y+1	; 0x01
     d7c:	fa 81       	ldd	r31, Y+2	; 0x02
     d7e:	ec 57       	subi	r30, 0x7C	; 124
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	84 91       	lpm	r24, Z+
     d84:	8a 8b       	std	Y+18, r24	; 0x12
					uint8_t Obj_1 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_1_Array[AppIndex]);
     d86:	e9 81       	ldd	r30, Y+1	; 0x01
     d88:	fa 81       	ldd	r31, Y+2	; 0x02
     d8a:	e4 57       	subi	r30, 0x74	; 116
     d8c:	ff 4f       	sbci	r31, 0xFF	; 255
     d8e:	a4 91       	lpm	r26, Z+
     d90:	a9 8b       	std	Y+17, r26	; 0x11
					uint8_t Obj_2 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_2_Array[AppIndex]);
     d92:	e9 81       	ldd	r30, Y+1	; 0x01
     d94:	fa 81       	ldd	r31, Y+2	; 0x02
     d96:	ec 56       	subi	r30, 0x6C	; 108
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	b4 91       	lpm	r27, Z+
     d9c:	b8 8b       	std	Y+16, r27	; 0x10
					// Initialize
					if (bit_is_clear(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_INITIALIZED))
     d9e:	e2 2f       	mov	r30, r18
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	ff 8b       	std	Y+23, r31	; 0x17
     da4:	ee 8b       	std	Y+22, r30	; 0x16
     da6:	ee 0f       	add	r30, r30
     da8:	ff 1f       	adc	r31, r31
     daa:	ed 54       	subi	r30, 0x4D	; 77
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	fd 8b       	std	Y+21, r31	; 0x15
     db0:	ec 8b       	std	Y+20, r30	; 0x14
     db2:	80 81       	ld	r24, Z
     db4:	86 fd       	sbrc	r24, 6
     db6:	e9 c2       	rjmp	.+1490   	; 0x138a <Isb_App_Exec+0x67c>
						uint16_t eepAddr_Obj_1_Tov = 0;
						uint16_t eepAddr_Obj_1_InitValue = 0;
						uint16_t eepAddr_Obj_2_Ctrl = 0;
						uint16_t eepAddr_Obj_2_Tov = 0;
						uint16_t eepAddr_Obj_2_InitValue = 0;
						switch (AppIndex)
     db8:	93 30       	cpi	r25, 0x03	; 3
     dba:	09 f4       	brne	.+2      	; 0xdbe <Isb_App_Exec+0xb0>
     dbc:	ae c0       	rjmp	.+348    	; 0xf1a <Isb_App_Exec+0x20c>
     dbe:	94 30       	cpi	r25, 0x04	; 4
     dc0:	38 f4       	brcc	.+14     	; 0xdd0 <Isb_App_Exec+0xc2>
     dc2:	91 30       	cpi	r25, 0x01	; 1
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <Isb_App_Exec+0xba>
     dc6:	55 c0       	rjmp	.+170    	; 0xe72 <Isb_App_Exec+0x164>
     dc8:	92 30       	cpi	r25, 0x02	; 2
     dca:	08 f0       	brcs	.+2      	; 0xdce <Isb_App_Exec+0xc0>
     dcc:	7c c0       	rjmp	.+248    	; 0xec6 <Isb_App_Exec+0x1b8>
     dce:	0c c0       	rjmp	.+24     	; 0xde8 <Isb_App_Exec+0xda>
     dd0:	95 30       	cpi	r25, 0x05	; 5
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <Isb_App_Exec+0xc8>
     dd4:	f8 c0       	rjmp	.+496    	; 0xfc6 <Isb_App_Exec+0x2b8>
     dd6:	95 30       	cpi	r25, 0x05	; 5
     dd8:	08 f4       	brcc	.+2      	; 0xddc <Isb_App_Exec+0xce>
     dda:	c9 c0       	rjmp	.+402    	; 0xf6e <Isb_App_Exec+0x260>
     ddc:	96 30       	cpi	r25, 0x06	; 6
     dde:	09 f4       	brne	.+2      	; 0xde2 <Isb_App_Exec+0xd4>
     de0:	1e c1       	rjmp	.+572    	; 0x101e <Isb_App_Exec+0x310>
     de2:	97 30       	cpi	r25, 0x07	; 7
     de4:	59 f5       	brne	.+86     	; 0xe3c <Isb_App_Exec+0x12e>
     de6:	47 c1       	rjmp	.+654    	; 0x1076 <Isb_App_Exec+0x368>
     de8:	41 e0       	ldi	r20, 0x01	; 1
     dea:	a4 2e       	mov	r10, r20
     dec:	b1 2c       	mov	r11, r1
     dee:	32 e0       	ldi	r19, 0x02	; 2
     df0:	c3 2e       	mov	r12, r19
     df2:	d1 2c       	mov	r13, r1
     df4:	93 e0       	ldi	r25, 0x03	; 3
     df6:	e9 2e       	mov	r14, r25
     df8:	f1 2c       	mov	r15, r1
     dfa:	04 e0       	ldi	r16, 0x04	; 4
     dfc:	10 e0       	ldi	r17, 0x00	; 0
     dfe:	85 e0       	ldi	r24, 0x05	; 5
     e00:	88 2e       	mov	r8, r24
     e02:	91 2c       	mov	r9, r1
     e04:	b6 e0       	ldi	r27, 0x06	; 6
     e06:	6b 2e       	mov	r6, r27
     e08:	71 2c       	mov	r7, r1
     e0a:	47 e0       	ldi	r20, 0x07	; 7
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	5f 87       	std	Y+15, r21	; 0x0f
     e10:	4e 87       	std	Y+14, r20	; 0x0e
     e12:	ac e0       	ldi	r26, 0x0C	; 12
     e14:	4a 2e       	mov	r4, r26
     e16:	51 2c       	mov	r5, r1
     e18:	fd e0       	ldi	r31, 0x0D	; 13
     e1a:	2f 2e       	mov	r2, r31
     e1c:	31 2c       	mov	r3, r1
     e1e:	8e e0       	ldi	r24, 0x0E	; 14
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	9d 87       	std	Y+13, r25	; 0x0d
     e24:	8c 87       	std	Y+12, r24	; 0x0c
     e26:	a3 e1       	ldi	r26, 0x13	; 19
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	bb 87       	std	Y+11, r27	; 0x0b
     e2c:	aa 87       	std	Y+10, r26	; 0x0a
     e2e:	e4 e1       	ldi	r30, 0x14	; 20
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	f9 87       	std	Y+9, r31	; 0x09
     e34:	e8 87       	std	Y+8, r30	; 0x08
     e36:	45 e1       	ldi	r20, 0x15	; 21
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	c2 c0       	rjmp	.+388    	; 0xfc0 <Isb_App_Exec+0x2b2>
     e3c:	aa 24       	eor	r10, r10
     e3e:	bb 24       	eor	r11, r11
     e40:	cc 24       	eor	r12, r12
     e42:	dd 24       	eor	r13, r13
     e44:	ee 24       	eor	r14, r14
     e46:	ff 24       	eor	r15, r15
     e48:	00 e0       	ldi	r16, 0x00	; 0
     e4a:	10 e0       	ldi	r17, 0x00	; 0
     e4c:	88 24       	eor	r8, r8
     e4e:	99 24       	eor	r9, r9
     e50:	66 24       	eor	r6, r6
     e52:	77 24       	eor	r7, r7
     e54:	1f 86       	std	Y+15, r1	; 0x0f
     e56:	1e 86       	std	Y+14, r1	; 0x0e
     e58:	44 24       	eor	r4, r4
     e5a:	55 24       	eor	r5, r5
     e5c:	22 24       	eor	r2, r2
     e5e:	33 24       	eor	r3, r3
     e60:	1d 86       	std	Y+13, r1	; 0x0d
     e62:	1c 86       	std	Y+12, r1	; 0x0c
     e64:	1b 86       	std	Y+11, r1	; 0x0b
     e66:	1a 86       	std	Y+10, r1	; 0x0a
     e68:	19 86       	std	Y+9, r1	; 0x09
     e6a:	18 86       	std	Y+8, r1	; 0x08
     e6c:	1f 82       	std	Y+7, r1	; 0x07
     e6e:	1e 82       	std	Y+6, r1	; 0x06
     e70:	2d c1       	rjmp	.+602    	; 0x10cc <Isb_App_Exec+0x3be>
     e72:	ec e1       	ldi	r30, 0x1C	; 28
     e74:	ae 2e       	mov	r10, r30
     e76:	b1 2c       	mov	r11, r1
     e78:	7d e1       	ldi	r23, 0x1D	; 29
     e7a:	c7 2e       	mov	r12, r23
     e7c:	d1 2c       	mov	r13, r1
     e7e:	6e e1       	ldi	r22, 0x1E	; 30
     e80:	e6 2e       	mov	r14, r22
     e82:	f1 2c       	mov	r15, r1
     e84:	0f e1       	ldi	r16, 0x1F	; 31
     e86:	10 e0       	ldi	r17, 0x00	; 0
     e88:	50 e2       	ldi	r21, 0x20	; 32
     e8a:	85 2e       	mov	r8, r21
     e8c:	91 2c       	mov	r9, r1
     e8e:	41 e2       	ldi	r20, 0x21	; 33
     e90:	64 2e       	mov	r6, r20
     e92:	71 2c       	mov	r7, r1
     e94:	82 e2       	ldi	r24, 0x22	; 34
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	9f 87       	std	Y+15, r25	; 0x0f
     e9a:	8e 87       	std	Y+14, r24	; 0x0e
     e9c:	37 e2       	ldi	r19, 0x27	; 39
     e9e:	43 2e       	mov	r4, r19
     ea0:	51 2c       	mov	r5, r1
     ea2:	98 e2       	ldi	r25, 0x28	; 40
     ea4:	29 2e       	mov	r2, r25
     ea6:	31 2c       	mov	r3, r1
     ea8:	a9 e2       	ldi	r26, 0x29	; 41
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	bd 87       	std	Y+13, r27	; 0x0d
     eae:	ac 87       	std	Y+12, r26	; 0x0c
     eb0:	ee e2       	ldi	r30, 0x2E	; 46
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	fb 87       	std	Y+11, r31	; 0x0b
     eb6:	ea 87       	std	Y+10, r30	; 0x0a
     eb8:	4f e2       	ldi	r20, 0x2F	; 47
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	59 87       	std	Y+9, r21	; 0x09
     ebe:	48 87       	std	Y+8, r20	; 0x08
     ec0:	80 e3       	ldi	r24, 0x30	; 48
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	a9 c0       	rjmp	.+338    	; 0x1018 <Isb_App_Exec+0x30a>
									eepAddr_Obj_1_Tov = ISB_APP_DIGIN_1_OBJ_1_EEADDR_TOV;
									eepAddr_Obj_1_InitValue = ISB_APP_DIGIN_1_OBJ_1_EEADDR_INITVALUE;
									eepAddr_Obj_2_Ctrl = ISB_APP_DIGIN_1_OBJ_2_EEADDR_CTRL;
									eepAddr_Obj_2_Tov = ISB_APP_DIGIN_1_OBJ_2_EEADDR_TOV;
									eepAddr_Obj_2_InitValue = ISB_APP_DIGIN_1_OBJ_2_EEADDR_INITVALUE;
									break;
     ec6:	87 e3       	ldi	r24, 0x37	; 55
     ec8:	a8 2e       	mov	r10, r24
     eca:	b1 2c       	mov	r11, r1
     ecc:	08 e3       	ldi	r16, 0x38	; 56
     ece:	c0 2e       	mov	r12, r16
     ed0:	d1 2c       	mov	r13, r1
     ed2:	19 e3       	ldi	r17, 0x39	; 57
     ed4:	e1 2e       	mov	r14, r17
     ed6:	f1 2c       	mov	r15, r1
     ed8:	0a e3       	ldi	r16, 0x3A	; 58
     eda:	10 e0       	ldi	r17, 0x00	; 0
     edc:	bb e3       	ldi	r27, 0x3B	; 59
     ede:	8b 2e       	mov	r8, r27
     ee0:	91 2c       	mov	r9, r1
     ee2:	ac e3       	ldi	r26, 0x3C	; 60
     ee4:	6a 2e       	mov	r6, r26
     ee6:	71 2c       	mov	r7, r1
     ee8:	ad e3       	ldi	r26, 0x3D	; 61
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	bf 87       	std	Y+15, r27	; 0x0f
     eee:	ae 87       	std	Y+14, r26	; 0x0e
     ef0:	f2 e4       	ldi	r31, 0x42	; 66
     ef2:	4f 2e       	mov	r4, r31
     ef4:	51 2c       	mov	r5, r1
     ef6:	e3 e4       	ldi	r30, 0x43	; 67
     ef8:	2e 2e       	mov	r2, r30
     efa:	31 2c       	mov	r3, r1
     efc:	e4 e4       	ldi	r30, 0x44	; 68
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	fd 87       	std	Y+13, r31	; 0x0d
     f02:	ec 87       	std	Y+12, r30	; 0x0c
     f04:	49 e4       	ldi	r20, 0x49	; 73
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	5b 87       	std	Y+11, r21	; 0x0b
     f0a:	4a 87       	std	Y+10, r20	; 0x0a
     f0c:	8a e4       	ldi	r24, 0x4A	; 74
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	99 87       	std	Y+9, r25	; 0x09
     f12:	88 87       	std	Y+8, r24	; 0x08
     f14:	ab e4       	ldi	r26, 0x4B	; 75
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	ab c0       	rjmp	.+342    	; 0x1070 <Isb_App_Exec+0x362>
									eepAddr_Obj_1_Tov = ISB_APP_DIGIN_2_OBJ_1_EEADDR_TOV;
									eepAddr_Obj_1_InitValue = ISB_APP_DIGIN_2_OBJ_1_EEADDR_INITVALUE;
									eepAddr_Obj_2_Ctrl = ISB_APP_DIGIN_2_OBJ_2_EEADDR_CTRL;
									eepAddr_Obj_2_Tov = ISB_APP_DIGIN_2_OBJ_2_EEADDR_TOV;
									eepAddr_Obj_2_InitValue = ISB_APP_DIGIN_2_OBJ_2_EEADDR_INITVALUE;
									break;
     f1a:	72 e5       	ldi	r23, 0x52	; 82
     f1c:	a7 2e       	mov	r10, r23
     f1e:	b1 2c       	mov	r11, r1
     f20:	63 e5       	ldi	r22, 0x53	; 83
     f22:	c6 2e       	mov	r12, r22
     f24:	d1 2c       	mov	r13, r1
     f26:	54 e5       	ldi	r21, 0x54	; 84
     f28:	e5 2e       	mov	r14, r21
     f2a:	f1 2c       	mov	r15, r1
     f2c:	05 e5       	ldi	r16, 0x55	; 85
     f2e:	10 e0       	ldi	r17, 0x00	; 0
     f30:	46 e5       	ldi	r20, 0x56	; 86
     f32:	84 2e       	mov	r8, r20
     f34:	91 2c       	mov	r9, r1
     f36:	37 e5       	ldi	r19, 0x57	; 87
     f38:	63 2e       	mov	r6, r19
     f3a:	71 2c       	mov	r7, r1
     f3c:	e8 e5       	ldi	r30, 0x58	; 88
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	ff 87       	std	Y+15, r31	; 0x0f
     f42:	ee 87       	std	Y+14, r30	; 0x0e
     f44:	9d e5       	ldi	r25, 0x5D	; 93
     f46:	49 2e       	mov	r4, r25
     f48:	51 2c       	mov	r5, r1
     f4a:	8e e5       	ldi	r24, 0x5E	; 94
     f4c:	28 2e       	mov	r2, r24
     f4e:	31 2c       	mov	r3, r1
     f50:	4f e5       	ldi	r20, 0x5F	; 95
     f52:	50 e0       	ldi	r21, 0x00	; 0
     f54:	5d 87       	std	Y+13, r21	; 0x0d
     f56:	4c 87       	std	Y+12, r20	; 0x0c
     f58:	84 e6       	ldi	r24, 0x64	; 100
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	9b 87       	std	Y+11, r25	; 0x0b
     f5e:	8a 87       	std	Y+10, r24	; 0x0a
     f60:	a5 e6       	ldi	r26, 0x65	; 101
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	b9 87       	std	Y+9, r27	; 0x09
     f66:	a8 87       	std	Y+8, r26	; 0x08
     f68:	e6 e6       	ldi	r30, 0x66	; 102
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	ad c0       	rjmp	.+346    	; 0x10c8 <Isb_App_Exec+0x3ba>
									eepAddr_Obj_1_Tov = ISB_APP_DIGIN_3_OBJ_1_EEADDR_TOV;
									eepAddr_Obj_1_InitValue = ISB_APP_DIGIN_3_OBJ_1_EEADDR_INITVALUE;
									eepAddr_Obj_2_Ctrl = ISB_APP_DIGIN_3_OBJ_2_EEADDR_CTRL;
									eepAddr_Obj_2_Tov = ISB_APP_DIGIN_3_OBJ_2_EEADDR_TOV;
									eepAddr_Obj_2_InitValue = ISB_APP_DIGIN_3_OBJ_2_EEADDR_INITVALUE;
									break;
     f6e:	bd e6       	ldi	r27, 0x6D	; 109
     f70:	ab 2e       	mov	r10, r27
     f72:	b1 2c       	mov	r11, r1
     f74:	ae e6       	ldi	r26, 0x6E	; 110
     f76:	ca 2e       	mov	r12, r26
     f78:	d1 2c       	mov	r13, r1
     f7a:	ff e6       	ldi	r31, 0x6F	; 111
     f7c:	ef 2e       	mov	r14, r31
     f7e:	f1 2c       	mov	r15, r1
     f80:	00 e7       	ldi	r16, 0x70	; 112
     f82:	10 e0       	ldi	r17, 0x00	; 0
     f84:	e1 e7       	ldi	r30, 0x71	; 113
     f86:	8e 2e       	mov	r8, r30
     f88:	91 2c       	mov	r9, r1
     f8a:	72 e7       	ldi	r23, 0x72	; 114
     f8c:	67 2e       	mov	r6, r23
     f8e:	71 2c       	mov	r7, r1
     f90:	43 e7       	ldi	r20, 0x73	; 115
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	5f 87       	std	Y+15, r21	; 0x0f
     f96:	4e 87       	std	Y+14, r20	; 0x0e
     f98:	68 e7       	ldi	r22, 0x78	; 120
     f9a:	46 2e       	mov	r4, r22
     f9c:	51 2c       	mov	r5, r1
     f9e:	59 e7       	ldi	r21, 0x79	; 121
     fa0:	25 2e       	mov	r2, r21
     fa2:	31 2c       	mov	r3, r1
     fa4:	8a e7       	ldi	r24, 0x7A	; 122
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	9d 87       	std	Y+13, r25	; 0x0d
     faa:	8c 87       	std	Y+12, r24	; 0x0c
     fac:	af e7       	ldi	r26, 0x7F	; 127
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	bb 87       	std	Y+11, r27	; 0x0b
     fb2:	aa 87       	std	Y+10, r26	; 0x0a
     fb4:	e0 e8       	ldi	r30, 0x80	; 128
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	f9 87       	std	Y+9, r31	; 0x09
     fba:	e8 87       	std	Y+8, r30	; 0x08
     fbc:	41 e8       	ldi	r20, 0x81	; 129
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	5f 83       	std	Y+7, r21	; 0x07
     fc2:	4e 83       	std	Y+6, r20	; 0x06
     fc4:	83 c0       	rjmp	.+262    	; 0x10cc <Isb_App_Exec+0x3be>
									eepAddr_Obj_1_Tov = ISB_APP_DIGIN_4_OBJ_1_EEADDR_TOV;
									eepAddr_Obj_1_InitValue = ISB_APP_DIGIN_4_OBJ_1_EEADDR_INITVALUE;
									eepAddr_Obj_2_Ctrl = ISB_APP_DIGIN_4_OBJ_2_EEADDR_CTRL;
									eepAddr_Obj_2_Tov = ISB_APP_DIGIN_4_OBJ_2_EEADDR_TOV;
									eepAddr_Obj_2_InitValue = ISB_APP_DIGIN_4_OBJ_2_EEADDR_INITVALUE;
									break;
     fc6:	48 e8       	ldi	r20, 0x88	; 136
     fc8:	a4 2e       	mov	r10, r20
     fca:	b1 2c       	mov	r11, r1
     fcc:	39 e8       	ldi	r19, 0x89	; 137
     fce:	c3 2e       	mov	r12, r19
     fd0:	d1 2c       	mov	r13, r1
     fd2:	9a e8       	ldi	r25, 0x8A	; 138
     fd4:	e9 2e       	mov	r14, r25
     fd6:	f1 2c       	mov	r15, r1
     fd8:	0b e8       	ldi	r16, 0x8B	; 139
     fda:	10 e0       	ldi	r17, 0x00	; 0
     fdc:	8c e8       	ldi	r24, 0x8C	; 140
     fde:	88 2e       	mov	r8, r24
     fe0:	91 2c       	mov	r9, r1
     fe2:	bd e8       	ldi	r27, 0x8D	; 141
     fe4:	6b 2e       	mov	r6, r27
     fe6:	71 2c       	mov	r7, r1
     fe8:	8e e8       	ldi	r24, 0x8E	; 142
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	9f 87       	std	Y+15, r25	; 0x0f
     fee:	8e 87       	std	Y+14, r24	; 0x0e
     ff0:	a3 e9       	ldi	r26, 0x93	; 147
     ff2:	4a 2e       	mov	r4, r26
     ff4:	51 2c       	mov	r5, r1
     ff6:	f4 e9       	ldi	r31, 0x94	; 148
     ff8:	2f 2e       	mov	r2, r31
     ffa:	31 2c       	mov	r3, r1
     ffc:	a5 e9       	ldi	r26, 0x95	; 149
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	bd 87       	std	Y+13, r27	; 0x0d
    1002:	ac 87       	std	Y+12, r26	; 0x0c
    1004:	ea e9       	ldi	r30, 0x9A	; 154
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	fb 87       	std	Y+11, r31	; 0x0b
    100a:	ea 87       	std	Y+10, r30	; 0x0a
    100c:	4b e9       	ldi	r20, 0x9B	; 155
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	59 87       	std	Y+9, r21	; 0x09
    1012:	48 87       	std	Y+8, r20	; 0x08
    1014:	8c e9       	ldi	r24, 0x9C	; 156
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	9f 83       	std	Y+7, r25	; 0x07
    101a:	8e 83       	std	Y+6, r24	; 0x06
    101c:	57 c0       	rjmp	.+174    	; 0x10cc <Isb_App_Exec+0x3be>
									eepAddr_Obj_1_Tov = ISB_APP_DIGIN_5_OBJ_1_EEADDR_TOV;
									eepAddr_Obj_1_InitValue = ISB_APP_DIGIN_5_OBJ_1_EEADDR_INITVALUE;
									eepAddr_Obj_2_Ctrl = ISB_APP_DIGIN_5_OBJ_2_EEADDR_CTRL;
									eepAddr_Obj_2_Tov = ISB_APP_DIGIN_5_OBJ_2_EEADDR_TOV;
									eepAddr_Obj_2_InitValue = ISB_APP_DIGIN_5_OBJ_2_EEADDR_INITVALUE;
									break;
    101e:	e3 ea       	ldi	r30, 0xA3	; 163
    1020:	ae 2e       	mov	r10, r30
    1022:	b1 2c       	mov	r11, r1
    1024:	74 ea       	ldi	r23, 0xA4	; 164
    1026:	c7 2e       	mov	r12, r23
    1028:	d1 2c       	mov	r13, r1
    102a:	65 ea       	ldi	r22, 0xA5	; 165
    102c:	e6 2e       	mov	r14, r22
    102e:	f1 2c       	mov	r15, r1
    1030:	06 ea       	ldi	r16, 0xA6	; 166
    1032:	10 e0       	ldi	r17, 0x00	; 0
    1034:	57 ea       	ldi	r21, 0xA7	; 167
    1036:	85 2e       	mov	r8, r21
    1038:	91 2c       	mov	r9, r1
    103a:	48 ea       	ldi	r20, 0xA8	; 168
    103c:	64 2e       	mov	r6, r20
    103e:	71 2c       	mov	r7, r1
    1040:	a9 ea       	ldi	r26, 0xA9	; 169
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	bf 87       	std	Y+15, r27	; 0x0f
    1046:	ae 87       	std	Y+14, r26	; 0x0e
    1048:	3e ea       	ldi	r19, 0xAE	; 174
    104a:	43 2e       	mov	r4, r19
    104c:	51 2c       	mov	r5, r1
    104e:	9f ea       	ldi	r25, 0xAF	; 175
    1050:	29 2e       	mov	r2, r25
    1052:	31 2c       	mov	r3, r1
    1054:	e0 eb       	ldi	r30, 0xB0	; 176
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	fd 87       	std	Y+13, r31	; 0x0d
    105a:	ec 87       	std	Y+12, r30	; 0x0c
    105c:	45 eb       	ldi	r20, 0xB5	; 181
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	5b 87       	std	Y+11, r21	; 0x0b
    1062:	4a 87       	std	Y+10, r20	; 0x0a
    1064:	86 eb       	ldi	r24, 0xB6	; 182
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	99 87       	std	Y+9, r25	; 0x09
    106a:	88 87       	std	Y+8, r24	; 0x08
    106c:	a7 eb       	ldi	r26, 0xB7	; 183
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	bf 83       	std	Y+7, r27	; 0x07
    1072:	ae 83       	std	Y+6, r26	; 0x06
    1074:	2b c0       	rjmp	.+86     	; 0x10cc <Isb_App_Exec+0x3be>
									eepAddr_Obj_1_Tov = ISB_APP_DIGIN_6_OBJ_1_EEADDR_TOV;
									eepAddr_Obj_1_InitValue = ISB_APP_DIGIN_6_OBJ_1_EEADDR_INITVALUE;
									eepAddr_Obj_2_Ctrl = ISB_APP_DIGIN_6_OBJ_2_EEADDR_CTRL;
									eepAddr_Obj_2_Tov = ISB_APP_DIGIN_6_OBJ_2_EEADDR_TOV;
									eepAddr_Obj_2_InitValue = ISB_APP_DIGIN_6_OBJ_2_EEADDR_INITVALUE;
									break;
    1076:	8e eb       	ldi	r24, 0xBE	; 190
    1078:	a8 2e       	mov	r10, r24
    107a:	b1 2c       	mov	r11, r1
    107c:	0f eb       	ldi	r16, 0xBF	; 191
    107e:	c0 2e       	mov	r12, r16
    1080:	d1 2c       	mov	r13, r1
    1082:	10 ec       	ldi	r17, 0xC0	; 192
    1084:	e1 2e       	mov	r14, r17
    1086:	f1 2c       	mov	r15, r1
    1088:	01 ec       	ldi	r16, 0xC1	; 193
    108a:	10 e0       	ldi	r17, 0x00	; 0
    108c:	b2 ec       	ldi	r27, 0xC2	; 194
    108e:	8b 2e       	mov	r8, r27
    1090:	91 2c       	mov	r9, r1
    1092:	a3 ec       	ldi	r26, 0xC3	; 195
    1094:	6a 2e       	mov	r6, r26
    1096:	71 2c       	mov	r7, r1
    1098:	e4 ec       	ldi	r30, 0xC4	; 196
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	ff 87       	std	Y+15, r31	; 0x0f
    109e:	ee 87       	std	Y+14, r30	; 0x0e
    10a0:	f9 ec       	ldi	r31, 0xC9	; 201
    10a2:	4f 2e       	mov	r4, r31
    10a4:	51 2c       	mov	r5, r1
    10a6:	ea ec       	ldi	r30, 0xCA	; 202
    10a8:	2e 2e       	mov	r2, r30
    10aa:	31 2c       	mov	r3, r1
    10ac:	4b ec       	ldi	r20, 0xCB	; 203
    10ae:	50 e0       	ldi	r21, 0x00	; 0
    10b0:	5d 87       	std	Y+13, r21	; 0x0d
    10b2:	4c 87       	std	Y+12, r20	; 0x0c
    10b4:	80 ed       	ldi	r24, 0xD0	; 208
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	9b 87       	std	Y+11, r25	; 0x0b
    10ba:	8a 87       	std	Y+10, r24	; 0x0a
    10bc:	a1 ed       	ldi	r26, 0xD1	; 209
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	b9 87       	std	Y+9, r27	; 0x09
    10c2:	a8 87       	std	Y+8, r26	; 0x08
    10c4:	e2 ed       	ldi	r30, 0xD2	; 210
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	ff 83       	std	Y+7, r31	; 0x07
    10ca:	ee 83       	std	Y+6, r30	; 0x06
									eepAddr_Obj_2_Tov = ISB_APP_DIGIN_15_OBJ_2_EEADDR_TOV;
									eepAddr_Obj_2_InitValue = ISB_APP_DIGIN_15_OBJ_2_EEADDR_INITVALUE;
									break;
							#endif /* ISB_APP_DIGIN_15 */
						}
						Isb_Ch[Ch].Ctrl = Isb_Ch_Ctrl_Get(Ch);
    10cc:	82 2f       	mov	r24, r18
    10ce:	0e 94 f5 05 	call	0xbea	; 0xbea <Isb_Ch_Ctrl_Get.2324>
    10d2:	ee 89       	ldd	r30, Y+22	; 0x16
    10d4:	ff 89       	ldd	r31, Y+23	; 0x17
    10d6:	ee 0f       	add	r30, r30
    10d8:	ff 1f       	adc	r31, r31
    10da:	ed 54       	subi	r30, 0x4D	; 77
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	80 83       	st	Z, r24
    10e0:	11 82       	std	Z+1, r1	; 0x01
						if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED))
    10e2:	ac 89       	ldd	r26, Y+20	; 0x14
    10e4:	bd 89       	ldd	r27, Y+21	; 0x15
    10e6:	8c 91       	ld	r24, X
    10e8:	80 ff       	sbrs	r24, 0
    10ea:	44 c1       	rjmp	.+648    	; 0x1374 <Isb_App_Exec+0x666>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    10ec:	e1 99       	sbic	0x1c, 1	; 28
    10ee:	fe cf       	rjmp	.-4      	; 0x10ec <Isb_App_Exec+0x3de>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    10f0:	eb 81       	ldd	r30, Y+3	; 0x03
    10f2:	fc 81       	ldd	r31, Y+4	; 0x04
    10f4:	ae 0e       	add	r10, r30
    10f6:	bf 1e       	adc	r11, r31
    10f8:	bf ba       	out	0x1f, r11	; 31
    10fa:	ae ba       	out	0x1e, r10	; 30
#endif
    EECR |= (1 << EERE);
    10fc:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    10fe:	8d b3       	in	r24, 0x1d	; 29
						{
							Isb_App_DigIn[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg0);
    1100:	a8 8d       	ldd	r26, Y+24	; 0x18
    1102:	b9 8d       	ldd	r27, Y+25	; 0x19
    1104:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1106:	e1 99       	sbic	0x1c, 1	; 28
    1108:	fe cf       	rjmp	.-4      	; 0x1106 <Isb_App_Exec+0x3f8>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    110a:	eb 81       	ldd	r30, Y+3	; 0x03
    110c:	fc 81       	ldd	r31, Y+4	; 0x04
    110e:	ce 0e       	add	r12, r30
    1110:	df 1e       	adc	r13, r31
    1112:	df ba       	out	0x1f, r13	; 31
    1114:	ce ba       	out	0x1e, r12	; 30
#endif
    EECR |= (1 << EERE);
    1116:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1118:	8d b3       	in	r24, 0x1d	; 29
							Isb_App_DigIn[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg1);
    111a:	a8 8d       	ldd	r26, Y+24	; 0x18
    111c:	b9 8d       	ldd	r27, Y+25	; 0x19
    111e:	11 96       	adiw	r26, 0x01	; 1
    1120:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1122:	e1 99       	sbic	0x1c, 1	; 28
    1124:	fe cf       	rjmp	.-4      	; 0x1122 <Isb_App_Exec+0x414>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1126:	eb 81       	ldd	r30, Y+3	; 0x03
    1128:	fc 81       	ldd	r31, Y+4	; 0x04
    112a:	ee 0e       	add	r14, r30
    112c:	ff 1e       	adc	r15, r31
    112e:	ff ba       	out	0x1f, r15	; 31
    1130:	ee ba       	out	0x1e, r14	; 30
#endif
    EECR |= (1 << EERE);
    1132:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1134:	8d b3       	in	r24, 0x1d	; 29
							Isb_App_DigIn[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg2);
    1136:	a8 8d       	ldd	r26, Y+24	; 0x18
    1138:	b9 8d       	ldd	r27, Y+25	; 0x19
    113a:	12 96       	adiw	r26, 0x02	; 2
    113c:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    113e:	e1 99       	sbic	0x1c, 1	; 28
    1140:	fe cf       	rjmp	.-4      	; 0x113e <Isb_App_Exec+0x430>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1142:	eb 81       	ldd	r30, Y+3	; 0x03
    1144:	fc 81       	ldd	r31, Y+4	; 0x04
    1146:	0e 0f       	add	r16, r30
    1148:	1f 1f       	adc	r17, r31
    114a:	1f bb       	out	0x1f, r17	; 31
    114c:	0e bb       	out	0x1e, r16	; 30
#endif
    EECR |= (1 << EERE);
    114e:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1150:	8d b3       	in	r24, 0x1d	; 29
							Isb_App_DigIn[AppIndex].Cfg3 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg3);
    1152:	a8 8d       	ldd	r26, Y+24	; 0x18
    1154:	b9 8d       	ldd	r27, Y+25	; 0x19
    1156:	13 96       	adiw	r26, 0x03	; 3
    1158:	8c 93       	st	X, r24
							uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
    115a:	bb 89       	ldd	r27, Y+19	; 0x13
    115c:	2b 2f       	mov	r18, r27
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	c9 01       	movw	r24, r18
    1162:	88 73       	andi	r24, 0x38	; 56
    1164:	90 70       	andi	r25, 0x00	; 0
    1166:	63 e0       	ldi	r22, 0x03	; 3
    1168:	95 95       	asr	r25
    116a:	87 95       	ror	r24
    116c:	6a 95       	dec	r22
    116e:	e1 f7       	brne	.-8      	; 0x1168 <Isb_App_Exec+0x45a>
							uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
							if (Port != 0)
    1170:	88 23       	and	r24, r24
    1172:	49 f0       	breq	.+18     	; 0x1186 <Isb_App_Exec+0x478>
							Isb_App_DigIn[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg0);
							Isb_App_DigIn[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg1);
							Isb_App_DigIn[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg2);
							Isb_App_DigIn[AppIndex].Cfg3 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg3);
							uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
							uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
    1174:	6b 2f       	mov	r22, r27
    1176:	67 70       	andi	r22, 0x07	; 7
							if (Port != 0)
							{
								if ((Pin0 & PULLUP) == 0)
    1178:	b6 fd       	sbrc	r27, 6
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <Isb_App_Exec+0x472>
								{
									Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT);
    117c:	40 e0       	ldi	r20, 0x00	; 0
    117e:	01 c0       	rjmp	.+2      	; 0x1182 <Isb_App_Exec+0x474>
								}
								else
								{
									Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT_PULLUP);
    1180:	42 e0       	ldi	r20, 0x02	; 2
    1182:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>
								}
							}
							Isb_Obj[Obj_0].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Ctrl);
    1186:	ea 89       	ldd	r30, Y+18	; 0x12
    1188:	6e 2f       	mov	r22, r30
    118a:	70 e0       	ldi	r23, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    118c:	e1 99       	sbic	0x1c, 1	; 28
    118e:	fe cf       	rjmp	.-4      	; 0x118c <Isb_App_Exec+0x47e>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1190:	2b 81       	ldd	r18, Y+3	; 0x03
    1192:	3c 81       	ldd	r19, Y+4	; 0x04
    1194:	82 0e       	add	r8, r18
    1196:	93 1e       	adc	r9, r19
    1198:	9f ba       	out	0x1f, r9	; 31
    119a:	8e ba       	out	0x1e, r8	; 30
#endif
    EECR |= (1 << EERE);
    119c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    119e:	8d b3       	in	r24, 0x1d	; 29
    11a0:	fb 01       	movw	r30, r22
    11a2:	53 e0       	ldi	r21, 0x03	; 3
    11a4:	ee 0f       	add	r30, r30
    11a6:	ff 1f       	adc	r31, r31
    11a8:	5a 95       	dec	r21
    11aa:	e1 f7       	brne	.-8      	; 0x11a4 <Isb_App_Exec+0x496>
    11ac:	e6 0f       	add	r30, r22
    11ae:	f7 1f       	adc	r31, r23
    11b0:	e5 5c       	subi	r30, 0xC5	; 197
    11b2:	fe 4f       	sbci	r31, 0xFE	; 254
    11b4:	80 83       	st	Z, r24
							Isb_Obj[Obj_0].Top = ISB_MSG_TOP_1BIT;
    11b6:	31 e0       	ldi	r19, 0x01	; 1
    11b8:	31 83       	std	Z+1, r19	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    11ba:	e1 99       	sbic	0x1c, 1	; 28
    11bc:	fe cf       	rjmp	.-4      	; 0x11ba <Isb_App_Exec+0x4ac>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    11be:	4b 81       	ldd	r20, Y+3	; 0x03
    11c0:	5c 81       	ldd	r21, Y+4	; 0x04
    11c2:	64 0e       	add	r6, r20
    11c4:	75 1e       	adc	r7, r21
    11c6:	7f ba       	out	0x1f, r7	; 31
    11c8:	6e ba       	out	0x1e, r6	; 30
#endif
    EECR |= (1 << EERE);
    11ca:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    11cc:	8d b3       	in	r24, 0x1d	; 29
							Isb_Obj[Obj_0].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Tov);
    11ce:	9b 01       	movw	r18, r22
    11d0:	43 e0       	ldi	r20, 0x03	; 3
    11d2:	22 0f       	add	r18, r18
    11d4:	33 1f       	adc	r19, r19
    11d6:	4a 95       	dec	r20
    11d8:	e1 f7       	brne	.-8      	; 0x11d2 <Isb_App_Exec+0x4c4>
    11da:	26 0f       	add	r18, r22
    11dc:	37 1f       	adc	r19, r23
    11de:	f9 01       	movw	r30, r18
    11e0:	e5 5c       	subi	r30, 0xC5	; 197
    11e2:	fe 4f       	sbci	r31, 0xFE	; 254
    11e4:	82 83       	std	Z+2, r24	; 0x02
    11e6:	4e 85       	ldd	r20, Y+14	; 0x0e
    11e8:	5f 85       	ldd	r21, Y+15	; 0x0f
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	9c 81       	ldd	r25, Y+4	; 0x04
    11ee:	48 0f       	add	r20, r24
    11f0:	59 1f       	adc	r21, r25
    11f2:	f9 01       	movw	r30, r18
    11f4:	e2 5c       	subi	r30, 0xC2	; 194
    11f6:	fe 4f       	sbci	r31, 0xFE	; 254
    11f8:	90 e0       	ldi	r25, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    11fa:	e1 99       	sbic	0x1c, 1	; 28
    11fc:	fe cf       	rjmp	.-4      	; 0x11fa <Isb_App_Exec+0x4ec>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    11fe:	5f bb       	out	0x1f, r21	; 31
    1200:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
    1202:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1204:	8d b3       	in	r24, 0x1d	; 29
							for (uint8_t i = 0; i < 5; i++)
							{
								Isb_Obj[Obj_0].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_0_InitValue + i));
    1206:	81 93       	st	Z+, r24
								}
							}
							Isb_Obj[Obj_0].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Ctrl);
							Isb_Obj[Obj_0].Top = ISB_MSG_TOP_1BIT;
							Isb_Obj[Obj_0].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Tov);
							for (uint8_t i = 0; i < 5; i++)
    1208:	9f 5f       	subi	r25, 0xFF	; 255
    120a:	4f 5f       	subi	r20, 0xFF	; 255
    120c:	5f 4f       	sbci	r21, 0xFF	; 255
    120e:	95 30       	cpi	r25, 0x05	; 5
    1210:	a1 f7       	brne	.-24     	; 0x11fa <Isb_App_Exec+0x4ec>
							{
								Isb_Obj[Obj_0].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_0_InitValue + i));
							}
							Isb_Obj[Obj_0].IsChanged = FALSE;
    1212:	fb 01       	movw	r30, r22
    1214:	33 e0       	ldi	r19, 0x03	; 3
    1216:	ee 0f       	add	r30, r30
    1218:	ff 1f       	adc	r31, r31
    121a:	3a 95       	dec	r19
    121c:	e1 f7       	brne	.-8      	; 0x1216 <Isb_App_Exec+0x508>
    121e:	e6 0f       	add	r30, r22
    1220:	f7 1f       	adc	r31, r23
    1222:	e5 5c       	subi	r30, 0xC5	; 197
    1224:	fe 4f       	sbci	r31, 0xFE	; 254
    1226:	10 86       	std	Z+8, r1	; 0x08
							Isb_Obj[Obj_1].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_1_Ctrl);
    1228:	99 89       	ldd	r25, Y+17	; 0x11
    122a:	69 2f       	mov	r22, r25
    122c:	70 e0       	ldi	r23, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    122e:	e1 99       	sbic	0x1c, 1	; 28
    1230:	fe cf       	rjmp	.-4      	; 0x122e <Isb_App_Exec+0x520>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1232:	ab 81       	ldd	r26, Y+3	; 0x03
    1234:	bc 81       	ldd	r27, Y+4	; 0x04
    1236:	4a 0e       	add	r4, r26
    1238:	5b 1e       	adc	r5, r27
    123a:	5f ba       	out	0x1f, r5	; 31
    123c:	4e ba       	out	0x1e, r4	; 30
#endif
    EECR |= (1 << EERE);
    123e:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1240:	8d b3       	in	r24, 0x1d	; 29
    1242:	fb 01       	movw	r30, r22
    1244:	23 e0       	ldi	r18, 0x03	; 3
    1246:	ee 0f       	add	r30, r30
    1248:	ff 1f       	adc	r31, r31
    124a:	2a 95       	dec	r18
    124c:	e1 f7       	brne	.-8      	; 0x1246 <Isb_App_Exec+0x538>
    124e:	e6 0f       	add	r30, r22
    1250:	f7 1f       	adc	r31, r23
    1252:	e5 5c       	subi	r30, 0xC5	; 197
    1254:	fe 4f       	sbci	r31, 0xFE	; 254
    1256:	80 83       	st	Z, r24
							Isb_Obj[Obj_1].Top = ISB_MSG_TOP_1BIT;
    1258:	b1 e0       	ldi	r27, 0x01	; 1
    125a:	b1 83       	std	Z+1, r27	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    125c:	e1 99       	sbic	0x1c, 1	; 28
    125e:	fe cf       	rjmp	.-4      	; 0x125c <Isb_App_Exec+0x54e>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1260:	eb 81       	ldd	r30, Y+3	; 0x03
    1262:	fc 81       	ldd	r31, Y+4	; 0x04
    1264:	2e 0e       	add	r2, r30
    1266:	3f 1e       	adc	r3, r31
    1268:	3f ba       	out	0x1f, r3	; 31
    126a:	2e ba       	out	0x1e, r2	; 30
#endif
    EECR |= (1 << EERE);
    126c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    126e:	8d b3       	in	r24, 0x1d	; 29
							Isb_Obj[Obj_1].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_1_Tov);
    1270:	9b 01       	movw	r18, r22
    1272:	93 e0       	ldi	r25, 0x03	; 3
    1274:	22 0f       	add	r18, r18
    1276:	33 1f       	adc	r19, r19
    1278:	9a 95       	dec	r25
    127a:	e1 f7       	brne	.-8      	; 0x1274 <Isb_App_Exec+0x566>
    127c:	26 0f       	add	r18, r22
    127e:	37 1f       	adc	r19, r23
    1280:	f9 01       	movw	r30, r18
    1282:	e5 5c       	subi	r30, 0xC5	; 197
    1284:	fe 4f       	sbci	r31, 0xFE	; 254
    1286:	82 83       	std	Z+2, r24	; 0x02
    1288:	4c 85       	ldd	r20, Y+12	; 0x0c
    128a:	5d 85       	ldd	r21, Y+13	; 0x0d
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	9c 81       	ldd	r25, Y+4	; 0x04
    1290:	48 0f       	add	r20, r24
    1292:	59 1f       	adc	r21, r25
    1294:	f9 01       	movw	r30, r18
    1296:	e2 5c       	subi	r30, 0xC2	; 194
    1298:	fe 4f       	sbci	r31, 0xFE	; 254
    129a:	90 e0       	ldi	r25, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    129c:	e1 99       	sbic	0x1c, 1	; 28
    129e:	fe cf       	rjmp	.-4      	; 0x129c <Isb_App_Exec+0x58e>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    12a0:	5f bb       	out	0x1f, r21	; 31
    12a2:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
    12a4:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    12a6:	8d b3       	in	r24, 0x1d	; 29
							for (uint8_t i = 0; i < 5; i++)
							{
								Isb_Obj[Obj_1].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_1_InitValue + i));
    12a8:	81 93       	st	Z+, r24
							}
							Isb_Obj[Obj_0].IsChanged = FALSE;
							Isb_Obj[Obj_1].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_1_Ctrl);
							Isb_Obj[Obj_1].Top = ISB_MSG_TOP_1BIT;
							Isb_Obj[Obj_1].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_1_Tov);
							for (uint8_t i = 0; i < 5; i++)
    12aa:	9f 5f       	subi	r25, 0xFF	; 255
    12ac:	4f 5f       	subi	r20, 0xFF	; 255
    12ae:	5f 4f       	sbci	r21, 0xFF	; 255
    12b0:	95 30       	cpi	r25, 0x05	; 5
    12b2:	a1 f7       	brne	.-24     	; 0x129c <Isb_App_Exec+0x58e>
							{
								Isb_Obj[Obj_1].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_1_InitValue + i));
							}
							Isb_Obj[Obj_1].IsChanged = FALSE;
    12b4:	fb 01       	movw	r30, r22
    12b6:	83 e0       	ldi	r24, 0x03	; 3
    12b8:	ee 0f       	add	r30, r30
    12ba:	ff 1f       	adc	r31, r31
    12bc:	8a 95       	dec	r24
    12be:	e1 f7       	brne	.-8      	; 0x12b8 <Isb_App_Exec+0x5aa>
    12c0:	e6 0f       	add	r30, r22
    12c2:	f7 1f       	adc	r31, r23
    12c4:	e5 5c       	subi	r30, 0xC5	; 197
    12c6:	fe 4f       	sbci	r31, 0xFE	; 254
    12c8:	10 86       	std	Z+8, r1	; 0x08
							Isb_Obj[Obj_2].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_2_Ctrl);
    12ca:	98 89       	ldd	r25, Y+16	; 0x10
    12cc:	69 2f       	mov	r22, r25
    12ce:	70 e0       	ldi	r23, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    12d0:	e1 99       	sbic	0x1c, 1	; 28
    12d2:	fe cf       	rjmp	.-4      	; 0x12d0 <Isb_App_Exec+0x5c2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    12d4:	aa 85       	ldd	r26, Y+10	; 0x0a
    12d6:	bb 85       	ldd	r27, Y+11	; 0x0b
    12d8:	eb 81       	ldd	r30, Y+3	; 0x03
    12da:	fc 81       	ldd	r31, Y+4	; 0x04
    12dc:	ae 0f       	add	r26, r30
    12de:	bf 1f       	adc	r27, r31
    12e0:	bf bb       	out	0x1f, r27	; 31
    12e2:	ae bb       	out	0x1e, r26	; 30
#endif
    EECR |= (1 << EERE);
    12e4:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    12e6:	8d b3       	in	r24, 0x1d	; 29
    12e8:	fb 01       	movw	r30, r22
    12ea:	03 e0       	ldi	r16, 0x03	; 3
    12ec:	ee 0f       	add	r30, r30
    12ee:	ff 1f       	adc	r31, r31
    12f0:	0a 95       	dec	r16
    12f2:	e1 f7       	brne	.-8      	; 0x12ec <Isb_App_Exec+0x5de>
    12f4:	e6 0f       	add	r30, r22
    12f6:	f7 1f       	adc	r31, r23
    12f8:	e5 5c       	subi	r30, 0xC5	; 197
    12fa:	fe 4f       	sbci	r31, 0xFE	; 254
    12fc:	80 83       	st	Z, r24
							Isb_Obj[Obj_2].Top = ISB_MSG_TOP_1BIT;
    12fe:	21 e0       	ldi	r18, 0x01	; 1
    1300:	21 83       	std	Z+1, r18	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1302:	e1 99       	sbic	0x1c, 1	; 28
    1304:	fe cf       	rjmp	.-4      	; 0x1302 <Isb_App_Exec+0x5f4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1306:	48 85       	ldd	r20, Y+8	; 0x08
    1308:	59 85       	ldd	r21, Y+9	; 0x09
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	48 0f       	add	r20, r24
    1310:	59 1f       	adc	r21, r25
    1312:	5f bb       	out	0x1f, r21	; 31
    1314:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
    1316:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1318:	8d b3       	in	r24, 0x1d	; 29
							Isb_Obj[Obj_2].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_2_Tov);
    131a:	9b 01       	movw	r18, r22
    131c:	13 e0       	ldi	r17, 0x03	; 3
    131e:	22 0f       	add	r18, r18
    1320:	33 1f       	adc	r19, r19
    1322:	1a 95       	dec	r17
    1324:	e1 f7       	brne	.-8      	; 0x131e <Isb_App_Exec+0x610>
    1326:	26 0f       	add	r18, r22
    1328:	37 1f       	adc	r19, r23
    132a:	f9 01       	movw	r30, r18
    132c:	e5 5c       	subi	r30, 0xC5	; 197
    132e:	fe 4f       	sbci	r31, 0xFE	; 254
    1330:	82 83       	std	Z+2, r24	; 0x02
    1332:	4e 81       	ldd	r20, Y+6	; 0x06
    1334:	5f 81       	ldd	r21, Y+7	; 0x07
    1336:	ab 81       	ldd	r26, Y+3	; 0x03
    1338:	bc 81       	ldd	r27, Y+4	; 0x04
    133a:	4a 0f       	add	r20, r26
    133c:	5b 1f       	adc	r21, r27
    133e:	f9 01       	movw	r30, r18
    1340:	e2 5c       	subi	r30, 0xC2	; 194
    1342:	fe 4f       	sbci	r31, 0xFE	; 254
    1344:	90 e0       	ldi	r25, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1346:	e1 99       	sbic	0x1c, 1	; 28
    1348:	fe cf       	rjmp	.-4      	; 0x1346 <Isb_App_Exec+0x638>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    134a:	5f bb       	out	0x1f, r21	; 31
    134c:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
    134e:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1350:	8d b3       	in	r24, 0x1d	; 29
							for (uint8_t i = 0; i < 5; i++)
							{
								Isb_Obj[Obj_2].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_2_InitValue + i));
    1352:	81 93       	st	Z+, r24
							}
							Isb_Obj[Obj_1].IsChanged = FALSE;
							Isb_Obj[Obj_2].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_2_Ctrl);
							Isb_Obj[Obj_2].Top = ISB_MSG_TOP_1BIT;
							Isb_Obj[Obj_2].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_2_Tov);
							for (uint8_t i = 0; i < 5; i++)
    1354:	9f 5f       	subi	r25, 0xFF	; 255
    1356:	4f 5f       	subi	r20, 0xFF	; 255
    1358:	5f 4f       	sbci	r21, 0xFF	; 255
    135a:	95 30       	cpi	r25, 0x05	; 5
    135c:	a1 f7       	brne	.-24     	; 0x1346 <Isb_App_Exec+0x638>
							{
								Isb_Obj[Obj_2].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_2_InitValue + i));
							}
							Isb_Obj[Obj_2].IsChanged = FALSE;
    135e:	fb 01       	movw	r30, r22
    1360:	b3 e0       	ldi	r27, 0x03	; 3
    1362:	ee 0f       	add	r30, r30
    1364:	ff 1f       	adc	r31, r31
    1366:	ba 95       	dec	r27
    1368:	e1 f7       	brne	.-8      	; 0x1362 <Isb_App_Exec+0x654>
    136a:	e6 0f       	add	r30, r22
    136c:	f7 1f       	adc	r31, r23
    136e:	e5 5c       	subi	r30, 0xC5	; 197
    1370:	fe 4f       	sbci	r31, 0xFE	; 254
    1372:	10 86       	std	Z+8, r1	; 0x08
						}
						Isb_Ch[Ch].Ctrl |= (1<<ISB_CH_CTRL_INITIALIZED);
    1374:	ee 89       	ldd	r30, Y+22	; 0x16
    1376:	ff 89       	ldd	r31, Y+23	; 0x17
    1378:	ee 0f       	add	r30, r30
    137a:	ff 1f       	adc	r31, r31
    137c:	ed 54       	subi	r30, 0x4D	; 77
    137e:	ff 4f       	sbci	r31, 0xFF	; 255
    1380:	80 81       	ld	r24, Z
    1382:	91 81       	ldd	r25, Z+1	; 0x01
    1384:	80 64       	ori	r24, 0x40	; 64
    1386:	91 83       	std	Z+1, r25	; 0x01
    1388:	80 83       	st	Z, r24
					}
					// Exec
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED))
    138a:	ec 89       	ldd	r30, Y+20	; 0x14
    138c:	fd 89       	ldd	r31, Y+21	; 0x15
    138e:	80 81       	ld	r24, Z
    1390:	80 ff       	sbrs	r24, 0
    1392:	ca c3       	rjmp	.+1940   	; 0x1b28 <Isb_App_Exec+0xe1a>
					{
// -> TODO:
//						if (Isb_Obj[Obj_0].Data[0] == 0)
//						{
							// Pin einlesen
							switch (Isb_App_DigIn[AppIndex].Cfg0 & ISB_APP_DIGIN_CFG0_SOURCE_MASK)
    1394:	a8 8d       	ldd	r26, Y+24	; 0x18
    1396:	b9 8d       	ldd	r27, Y+25	; 0x19
    1398:	8c 91       	ld	r24, X
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	83 70       	andi	r24, 0x03	; 3
    139e:	90 70       	andi	r25, 0x00	; 0
    13a0:	89 2b       	or	r24, r25
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <Isb_App_Exec+0x698>
    13a4:	51 c0       	rjmp	.+162    	; 0x1448 <Isb_App_Exec+0x73a>
							{
								#if ISB_APP_DIGIN_SOURCE_FEATURE_PIN == TRUE
									case ISB_APP_DIGIN_CFG0_SOURCE_STD:
										;
										uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
    13a6:	bb 89       	ldd	r27, Y+19	; 0x13
    13a8:	8b 2f       	mov	r24, r27
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	88 73       	andi	r24, 0x38	; 56
    13ae:	90 70       	andi	r25, 0x00	; 0
    13b0:	e3 e0       	ldi	r30, 0x03	; 3
    13b2:	95 95       	asr	r25
    13b4:	87 95       	ror	r24
    13b6:	ea 95       	dec	r30
    13b8:	e1 f7       	brne	.-8      	; 0x13b2 <Isb_App_Exec+0x6a4>
    13ba:	98 2f       	mov	r25, r24
										uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
										if (Port != 0)
    13bc:	88 23       	and	r24, r24
    13be:	09 f4       	brne	.+2      	; 0x13c2 <Isb_App_Exec+0x6b4>
    13c0:	43 c0       	rjmp	.+134    	; 0x1448 <Isb_App_Exec+0x73a>
							{
								#if ISB_APP_DIGIN_SOURCE_FEATURE_PIN == TRUE
									case ISB_APP_DIGIN_CFG0_SOURCE_STD:
										;
										uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
										uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
    13c2:	2b 2f       	mov	r18, r27
    13c4:	27 70       	andi	r18, 0x07	; 7
										if (Port != 0)
										{
											if (bit_is_clear(Isb_App_DigIn[AppIndex].Cfg0, ISB_APP_DIGIN_CFG0_PIN0_INVERTED))
    13c6:	e9 81       	ldd	r30, Y+1	; 0x01
    13c8:	fa 81       	ldd	r31, Y+2	; 0x02
    13ca:	73 e0       	ldi	r23, 0x03	; 3
    13cc:	ee 0f       	add	r30, r30
    13ce:	ff 1f       	adc	r31, r31
    13d0:	7a 95       	dec	r23
    13d2:	e1 f7       	brne	.-8      	; 0x13cc <Isb_App_Exec+0x6be>
    13d4:	ed 52       	subi	r30, 0x2D	; 45
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	80 81       	ld	r24, Z
    13da:	e9 2f       	mov	r30, r25
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	82 fd       	sbrc	r24, 2
    13e0:	1a c0       	rjmp	.+52     	; 0x1416 <Isb_App_Exec+0x708>
	#endif



	uint8_t Lib_Pin_Get(const uint8_t aPort, const uint8_t aPin) {
		return (*(PINx[aPort]) >> aPin) & 1;
    13e2:	ee 0f       	add	r30, r30
    13e4:	ff 1f       	adc	r31, r31
    13e6:	ec 57       	subi	r30, 0x7C	; 124
    13e8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ea:	01 90       	ld	r0, Z+
    13ec:	f0 81       	ld	r31, Z
    13ee:	e0 2d       	mov	r30, r0
    13f0:	80 81       	ld	r24, Z
											{
												if (Lib_Pin_Get(Port, Pin) != 0)
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <Isb_App_Exec+0x6ec>
    13f6:	95 95       	asr	r25
    13f8:	87 95       	ror	r24
    13fa:	2a 95       	dec	r18
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <Isb_App_Exec+0x6e8>
    13fe:	80 ff       	sbrs	r24, 0
    1400:	05 c0       	rjmp	.+10     	; 0x140c <Isb_App_Exec+0x6fe>
												{
													Isb_App_DigIn[AppIndex].Value = 1;
    1402:	21 e0       	ldi	r18, 0x01	; 1
    1404:	e8 8d       	ldd	r30, Y+24	; 0x18
    1406:	f9 8d       	ldd	r31, Y+25	; 0x19
    1408:	24 83       	std	Z+4, r18	; 0x04
    140a:	1e c0       	rjmp	.+60     	; 0x1448 <Isb_App_Exec+0x73a>
												}
												else
												{
													Isb_App_DigIn[AppIndex].Value = 0;
    140c:	a8 8d       	ldd	r26, Y+24	; 0x18
    140e:	b9 8d       	ldd	r27, Y+25	; 0x19
    1410:	14 96       	adiw	r26, 0x04	; 4
    1412:	1c 92       	st	X, r1
    1414:	19 c0       	rjmp	.+50     	; 0x1448 <Isb_App_Exec+0x73a>
    1416:	ee 0f       	add	r30, r30
    1418:	ff 1f       	adc	r31, r31
    141a:	ec 57       	subi	r30, 0x7C	; 124
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	01 90       	ld	r0, Z+
    1420:	f0 81       	ld	r31, Z
    1422:	e0 2d       	mov	r30, r0
    1424:	80 81       	ld	r24, Z
												}
											}
											else
											{
												if (Lib_Pin_Get(Port, Pin) != 0)
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 c0       	rjmp	.+4      	; 0x142e <Isb_App_Exec+0x720>
    142a:	95 95       	asr	r25
    142c:	87 95       	ror	r24
    142e:	2a 95       	dec	r18
    1430:	e2 f7       	brpl	.-8      	; 0x142a <Isb_App_Exec+0x71c>
    1432:	80 ff       	sbrs	r24, 0
    1434:	04 c0       	rjmp	.+8      	; 0x143e <Isb_App_Exec+0x730>
												{
													Isb_App_DigIn[AppIndex].Value = 0;
    1436:	e8 8d       	ldd	r30, Y+24	; 0x18
    1438:	f9 8d       	ldd	r31, Y+25	; 0x19
    143a:	14 82       	std	Z+4, r1	; 0x04
    143c:	05 c0       	rjmp	.+10     	; 0x1448 <Isb_App_Exec+0x73a>
												}
												else
												{
													Isb_App_DigIn[AppIndex].Value = 1;
    143e:	e1 e0       	ldi	r30, 0x01	; 1
    1440:	a8 8d       	ldd	r26, Y+24	; 0x18
    1442:	b9 8d       	ldd	r27, Y+25	; 0x19
    1444:	14 96       	adiw	r26, 0x04	; 4
    1446:	ec 93       	st	X, r30
										Isb_App_DigIn[AppIndex].Value = 0;
										break;
								#endif /* ISB_APP_DIGIN_SOURCE_FEATURE_SLAVE_USART1 == TRUE */
							}
							// Pin auswerten
							if (Isb_App_DigIn[AppIndex].Value != 0)
    1448:	a8 8d       	ldd	r26, Y+24	; 0x18
    144a:	b9 8d       	ldd	r27, Y+25	; 0x19
    144c:	14 96       	adiw	r26, 0x04	; 4
    144e:	8c 91       	ld	r24, X
    1450:	14 97       	sbiw	r26, 0x04	; 4
    1452:	88 23       	and	r24, r24
    1454:	61 f1       	breq	.+88     	; 0x14ae <Isb_App_Exec+0x7a0>
							{
								// Global
								Isb_App_DigIn[AppIndex].CountHigh++;
    1456:	17 96       	adiw	r26, 0x07	; 7
    1458:	8c 91       	ld	r24, X
    145a:	17 97       	sbiw	r26, 0x07	; 7
    145c:	8f 5f       	subi	r24, 0xFF	; 255
    145e:	17 96       	adiw	r26, 0x07	; 7
    1460:	8c 93       	st	X, r24
    1462:	17 97       	sbiw	r26, 0x07	; 7
								// Event "High" > 40ms
								if (Isb_App_DigIn[AppIndex].CountHigh == 4)
    1464:	84 30       	cpi	r24, 0x04	; 4
    1466:	31 f4       	brne	.+12     	; 0x1474 <Isb_App_Exec+0x766>
								{
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGH);
    1468:	15 96       	adiw	r26, 0x05	; 5
    146a:	8c 91       	ld	r24, X
    146c:	15 97       	sbiw	r26, 0x05	; 5
    146e:	80 61       	ori	r24, 0x10	; 16
    1470:	15 96       	adiw	r26, 0x05	; 5
    1472:	8c 93       	st	X, r24
								}
								// Event "High Long" > 400ms
								if (Isb_App_DigIn[AppIndex].CountHigh == 40)
    1474:	e8 8d       	ldd	r30, Y+24	; 0x18
    1476:	f9 8d       	ldd	r31, Y+25	; 0x19
    1478:	87 81       	ldd	r24, Z+7	; 0x07
    147a:	88 32       	cpi	r24, 0x28	; 40
    147c:	19 f4       	brne	.+6      	; 0x1484 <Isb_App_Exec+0x776>
								{
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHLONG);
    147e:	85 81       	ldd	r24, Z+5	; 0x05
    1480:	80 64       	ori	r24, 0x40	; 64
    1482:	85 83       	std	Z+5, r24	; 0x05
								}
								// Event "High Repeat"
								if (Isb_App_DigIn[AppIndex].CountHigh == 100)
    1484:	a8 8d       	ldd	r26, Y+24	; 0x18
    1486:	b9 8d       	ldd	r27, Y+25	; 0x19
    1488:	17 96       	adiw	r26, 0x07	; 7
    148a:	8c 91       	ld	r24, X
    148c:	17 97       	sbiw	r26, 0x07	; 7
    148e:	84 36       	cpi	r24, 0x64	; 100
    1490:	51 f4       	brne	.+20     	; 0x14a6 <Isb_App_Exec+0x798>
								{
									Isb_App_DigIn[AppIndex].CountHigh = 90;
    1492:	8a e5       	ldi	r24, 0x5A	; 90
    1494:	17 96       	adiw	r26, 0x07	; 7
    1496:	8c 93       	st	X, r24
    1498:	17 97       	sbiw	r26, 0x07	; 7
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHREPEAT);
    149a:	15 96       	adiw	r26, 0x05	; 5
    149c:	8c 91       	ld	r24, X
    149e:	15 97       	sbiw	r26, 0x05	; 5
    14a0:	80 68       	ori	r24, 0x80	; 128
    14a2:	15 96       	adiw	r26, 0x05	; 5
    14a4:	8c 93       	st	X, r24
//-									{
//-										Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOWSHORT);
//-									}
//-								}
								// Global
								Isb_App_DigIn[AppIndex].CountLow = 0;
    14a6:	e8 8d       	ldd	r30, Y+24	; 0x18
    14a8:	f9 8d       	ldd	r31, Y+25	; 0x19
    14aa:	16 82       	std	Z+6, r1	; 0x06
    14ac:	1f c0       	rjmp	.+62     	; 0x14ec <Isb_App_Exec+0x7de>
							}
							else
							{
								// Global
								Isb_App_DigIn[AppIndex].CountLow++;
    14ae:	a8 8d       	ldd	r26, Y+24	; 0x18
    14b0:	b9 8d       	ldd	r27, Y+25	; 0x19
    14b2:	16 96       	adiw	r26, 0x06	; 6
    14b4:	8c 91       	ld	r24, X
    14b6:	16 97       	sbiw	r26, 0x06	; 6
    14b8:	8f 5f       	subi	r24, 0xFF	; 255
    14ba:	16 96       	adiw	r26, 0x06	; 6
    14bc:	8c 93       	st	X, r24
    14be:	16 97       	sbiw	r26, 0x06	; 6
								// Event "Low" > 40ms
								if (Isb_App_DigIn[AppIndex].CountLow == 4)
    14c0:	84 30       	cpi	r24, 0x04	; 4
    14c2:	31 f4       	brne	.+12     	; 0x14d0 <Isb_App_Exec+0x7c2>
								{
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOW);
    14c4:	15 96       	adiw	r26, 0x05	; 5
    14c6:	8c 91       	ld	r24, X
    14c8:	15 97       	sbiw	r26, 0x05	; 5
    14ca:	81 60       	ori	r24, 0x01	; 1
    14cc:	15 96       	adiw	r26, 0x05	; 5
    14ce:	8c 93       	st	X, r24
//-								{
//-									Isb_App_DigIn[AppIndex].CountLow = 90;
//-									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOWREPEAT);
//-								}
								// Event "High Short" = 40-400ms
								if (Isb_App_DigIn[AppIndex].CountHigh != 0)
    14d0:	e8 8d       	ldd	r30, Y+24	; 0x18
    14d2:	f9 8d       	ldd	r31, Y+25	; 0x19
    14d4:	87 81       	ldd	r24, Z+7	; 0x07
    14d6:	88 23       	and	r24, r24
    14d8:	29 f0       	breq	.+10     	; 0x14e4 <Isb_App_Exec+0x7d6>
								{
									if (Isb_App_DigIn[AppIndex].CountHigh < 40)
    14da:	88 32       	cpi	r24, 0x28	; 40
    14dc:	18 f4       	brcc	.+6      	; 0x14e4 <Isb_App_Exec+0x7d6>
									{
										Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHSHORT);
    14de:	85 81       	ldd	r24, Z+5	; 0x05
    14e0:	80 62       	ori	r24, 0x20	; 32
    14e2:	85 83       	std	Z+5, r24	; 0x05
									}
								}
								// Global
								Isb_App_DigIn[AppIndex].CountHigh = 0;
    14e4:	a8 8d       	ldd	r26, Y+24	; 0x18
    14e6:	b9 8d       	ldd	r27, Y+25	; 0x19
    14e8:	17 96       	adiw	r26, 0x07	; 7
    14ea:	1c 92       	st	X, r1
							}
							// Event auswerten
							switch (Isb_App_DigIn[AppIndex].Cfg1 & ISB_APP_DIGIN_CFG1_MODE_MASK)
    14ec:	e8 8d       	ldd	r30, Y+24	; 0x18
    14ee:	f9 8d       	ldd	r31, Y+25	; 0x19
    14f0:	81 81       	ldd	r24, Z+1	; 0x01
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	c9 01       	movw	r24, r18
    14f8:	87 70       	andi	r24, 0x07	; 7
    14fa:	90 70       	andi	r25, 0x00	; 0
    14fc:	89 2b       	or	r24, r25
    14fe:	09 f0       	breq	.+2      	; 0x1502 <Isb_App_Exec+0x7f4>
    1500:	13 c3       	rjmp	.+1574   	; 0x1b28 <Isb_App_Exec+0xe1a>
							{
								#if ISB_APP_DIGIN_MODE_FEATURE_SWITCH == TRUE
									case ISB_APP_DIGIN_CFG1_MODE_SWITCH:
										// Betriebsart = Schaltsensor/Störmeldeeingang
										switch (Isb_App_DigIn[AppIndex].Cfg1 & ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_MASK)
    1502:	c9 01       	movw	r24, r18
    1504:	88 73       	andi	r24, 0x38	; 56
    1506:	90 70       	andi	r25, 0x00	; 0
    1508:	88 30       	cpi	r24, 0x08	; 8
    150a:	91 05       	cpc	r25, r1
    150c:	09 f4       	brne	.+2      	; 0x1510 <Isb_App_Exec+0x802>
    150e:	ca c0       	rjmp	.+404    	; 0x16a4 <Isb_App_Exec+0x996>
    1510:	89 30       	cpi	r24, 0x09	; 9
    1512:	91 05       	cpc	r25, r1
    1514:	1c f4       	brge	.+6      	; 0x151c <Isb_App_Exec+0x80e>
    1516:	89 2b       	or	r24, r25
    1518:	49 f0       	breq	.+18     	; 0x152c <Isb_App_Exec+0x81e>
    151a:	06 c3       	rjmp	.+1548   	; 0x1b28 <Isb_App_Exec+0xe1a>
    151c:	80 31       	cpi	r24, 0x10	; 16
    151e:	91 05       	cpc	r25, r1
    1520:	09 f4       	brne	.+2      	; 0x1524 <Isb_App_Exec+0x816>
    1522:	79 c1       	rjmp	.+754    	; 0x1816 <Isb_App_Exec+0xb08>
    1524:	48 97       	sbiw	r24, 0x18	; 24
    1526:	09 f0       	breq	.+2      	; 0x152a <Isb_App_Exec+0x81c>
    1528:	ff c2       	rjmp	.+1534   	; 0x1b28 <Isb_App_Exec+0xe1a>
    152a:	31 c2       	rjmp	.+1122   	; 0x198e <Isb_App_Exec+0xc80>
										{
											#if ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_1SOUKLOR == TRUE
												case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_0:
													// 1 Schaltobjekt - Ohne Unterscheidung Kurz/Lang - Ohne Repeat
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGH))
    152c:	a9 81       	ldd	r26, Y+1	; 0x01
    152e:	ba 81       	ldd	r27, Y+2	; 0x02
    1530:	43 e0       	ldi	r20, 0x03	; 3
    1532:	aa 0f       	add	r26, r26
    1534:	bb 1f       	adc	r27, r27
    1536:	4a 95       	dec	r20
    1538:	e1 f7       	brne	.-8      	; 0x1532 <Isb_App_Exec+0x824>
    153a:	a8 52       	subi	r26, 0x28	; 40
    153c:	bf 4f       	sbci	r27, 0xFF	; 255
    153e:	8c 91       	ld	r24, X
    1540:	84 ff       	sbrs	r24, 4
    1542:	55 c0       	rjmp	.+170    	; 0x15ee <Isb_App_Exec+0x8e0>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1)
    1544:	e8 8d       	ldd	r30, Y+24	; 0x18
    1546:	f9 8d       	ldd	r31, Y+25	; 0x19
    1548:	82 81       	ldd	r24, Z+2	; 0x02
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	8f 70       	andi	r24, 0x0F	; 15
    154e:	90 70       	andi	r25, 0x00	; 0
    1550:	81 30       	cpi	r24, 0x01	; 1
    1552:	91 05       	cpc	r25, r1
    1554:	89 f4       	brne	.+34     	; 0x1578 <Isb_App_Exec+0x86a>
														{
															// Aus
															Isb_Obj[Obj_1].Data[0] = 0;
    1556:	f9 89       	ldd	r31, Y+17	; 0x11
    1558:	8f 2f       	mov	r24, r31
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	fc 01       	movw	r30, r24
    155e:	33 e0       	ldi	r19, 0x03	; 3
    1560:	ee 0f       	add	r30, r30
    1562:	ff 1f       	adc	r31, r31
    1564:	3a 95       	dec	r19
    1566:	e1 f7       	brne	.-8      	; 0x1560 <Isb_App_Exec+0x852>
    1568:	e8 0f       	add	r30, r24
    156a:	f9 1f       	adc	r31, r25
    156c:	e5 5c       	subi	r30, 0xC5	; 197
    156e:	fe 4f       	sbci	r31, 0xFE	; 254
    1570:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1572:	21 e0       	ldi	r18, 0x01	; 1
    1574:	20 87       	std	Z+8, r18	; 0x08
    1576:	36 c0       	rjmp	.+108    	; 0x15e4 <Isb_App_Exec+0x8d6>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2)
    1578:	82 30       	cpi	r24, 0x02	; 2
    157a:	91 05       	cpc	r25, r1
    157c:	89 f4       	brne	.+34     	; 0x15a0 <Isb_App_Exec+0x892>
														{
															// Ein
															Isb_Obj[Obj_1].Data[0] = 1;
    157e:	39 89       	ldd	r19, Y+17	; 0x11
    1580:	83 2f       	mov	r24, r19
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	fc 01       	movw	r30, r24
    1586:	23 e0       	ldi	r18, 0x03	; 3
    1588:	ee 0f       	add	r30, r30
    158a:	ff 1f       	adc	r31, r31
    158c:	2a 95       	dec	r18
    158e:	e1 f7       	brne	.-8      	; 0x1588 <Isb_App_Exec+0x87a>
    1590:	e8 0f       	add	r30, r24
    1592:	f9 1f       	adc	r31, r25
    1594:	e5 5c       	subi	r30, 0xC5	; 197
    1596:	fe 4f       	sbci	r31, 0xFE	; 254
    1598:	41 e0       	ldi	r20, 0x01	; 1
    159a:	43 83       	std	Z+3, r20	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    159c:	40 87       	std	Z+8, r20	; 0x08
    159e:	22 c0       	rjmp	.+68     	; 0x15e4 <Isb_App_Exec+0x8d6>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3)
    15a0:	03 97       	sbiw	r24, 0x03	; 3
    15a2:	01 f5       	brne	.+64     	; 0x15e4 <Isb_App_Exec+0x8d6>
														{
															// Um
															if (Isb_Obj[Obj_1].Data[0] == 0)
    15a4:	59 89       	ldd	r21, Y+17	; 0x11
    15a6:	25 2f       	mov	r18, r21
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	f9 01       	movw	r30, r18
    15ac:	03 e0       	ldi	r16, 0x03	; 3
    15ae:	ee 0f       	add	r30, r30
    15b0:	ff 1f       	adc	r31, r31
    15b2:	0a 95       	dec	r16
    15b4:	e1 f7       	brne	.-8      	; 0x15ae <Isb_App_Exec+0x8a0>
    15b6:	e2 0f       	add	r30, r18
    15b8:	f3 1f       	adc	r31, r19
    15ba:	e5 5c       	subi	r30, 0xC5	; 197
    15bc:	fe 4f       	sbci	r31, 0xFE	; 254
    15be:	83 81       	ldd	r24, Z+3	; 0x03
    15c0:	88 23       	and	r24, r24
    15c2:	19 f4       	brne	.+6      	; 0x15ca <Isb_App_Exec+0x8bc>
															{
																Isb_Obj[Obj_1].Data[0] = 1;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	83 83       	std	Z+3, r24	; 0x03
    15c8:	01 c0       	rjmp	.+2      	; 0x15cc <Isb_App_Exec+0x8be>
															}
															else
															{
																Isb_Obj[Obj_1].Data[0] = 0;
    15ca:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_1].IsChanged = TRUE;
    15cc:	f9 01       	movw	r30, r18
    15ce:	13 e0       	ldi	r17, 0x03	; 3
    15d0:	ee 0f       	add	r30, r30
    15d2:	ff 1f       	adc	r31, r31
    15d4:	1a 95       	dec	r17
    15d6:	e1 f7       	brne	.-8      	; 0x15d0 <Isb_App_Exec+0x8c2>
    15d8:	e2 0f       	add	r30, r18
    15da:	f3 1f       	adc	r31, r19
    15dc:	e5 5c       	subi	r30, 0xC5	; 197
    15de:	fe 4f       	sbci	r31, 0xFE	; 254
    15e0:	91 e0       	ldi	r25, 0x01	; 1
    15e2:	90 87       	std	Z+8, r25	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGH);
    15e4:	e8 8d       	ldd	r30, Y+24	; 0x18
    15e6:	f9 8d       	ldd	r31, Y+25	; 0x19
    15e8:	85 81       	ldd	r24, Z+5	; 0x05
    15ea:	8f 7e       	andi	r24, 0xEF	; 239
    15ec:	85 83       	std	Z+5, r24	; 0x05
													}
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_LOW))
    15ee:	8c 91       	ld	r24, X
    15f0:	80 ff       	sbrs	r24, 0
    15f2:	9a c2       	rjmp	.+1332   	; 0x1b28 <Isb_App_Exec+0xe1a>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1)
    15f4:	a8 8d       	ldd	r26, Y+24	; 0x18
    15f6:	b9 8d       	ldd	r27, Y+25	; 0x19
    15f8:	12 96       	adiw	r26, 0x02	; 2
    15fa:	8c 91       	ld	r24, X
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	80 7f       	andi	r24, 0xF0	; 240
    1600:	90 70       	andi	r25, 0x00	; 0
    1602:	80 31       	cpi	r24, 0x10	; 16
    1604:	91 05       	cpc	r25, r1
    1606:	89 f4       	brne	.+34     	; 0x162a <Isb_App_Exec+0x91c>
														{
															// Aus
															Isb_Obj[Obj_1].Data[0] = 0;
    1608:	b9 89       	ldd	r27, Y+17	; 0x11
    160a:	8b 2f       	mov	r24, r27
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	fc 01       	movw	r30, r24
    1610:	a3 e0       	ldi	r26, 0x03	; 3
    1612:	ee 0f       	add	r30, r30
    1614:	ff 1f       	adc	r31, r31
    1616:	aa 95       	dec	r26
    1618:	e1 f7       	brne	.-8      	; 0x1612 <Isb_App_Exec+0x904>
    161a:	e8 0f       	add	r30, r24
    161c:	f9 1f       	adc	r31, r25
    161e:	e5 5c       	subi	r30, 0xC5	; 197
    1620:	fe 4f       	sbci	r31, 0xFE	; 254
    1622:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1624:	21 e0       	ldi	r18, 0x01	; 1
    1626:	20 87       	std	Z+8, r18	; 0x08
    1628:	36 c0       	rjmp	.+108    	; 0x1696 <Isb_App_Exec+0x988>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2)
    162a:	80 32       	cpi	r24, 0x20	; 32
    162c:	91 05       	cpc	r25, r1
    162e:	89 f4       	brne	.+34     	; 0x1652 <Isb_App_Exec+0x944>
														{
															// Ein
															Isb_Obj[Obj_1].Data[0] = 1;
    1630:	39 89       	ldd	r19, Y+17	; 0x11
    1632:	83 2f       	mov	r24, r19
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	fc 01       	movw	r30, r24
    1638:	73 e0       	ldi	r23, 0x03	; 3
    163a:	ee 0f       	add	r30, r30
    163c:	ff 1f       	adc	r31, r31
    163e:	7a 95       	dec	r23
    1640:	e1 f7       	brne	.-8      	; 0x163a <Isb_App_Exec+0x92c>
    1642:	e8 0f       	add	r30, r24
    1644:	f9 1f       	adc	r31, r25
    1646:	e5 5c       	subi	r30, 0xC5	; 197
    1648:	fe 4f       	sbci	r31, 0xFE	; 254
    164a:	41 e0       	ldi	r20, 0x01	; 1
    164c:	43 83       	std	Z+3, r20	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    164e:	40 87       	std	Z+8, r20	; 0x08
    1650:	22 c0       	rjmp	.+68     	; 0x1696 <Isb_App_Exec+0x988>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3)
    1652:	c0 97       	sbiw	r24, 0x30	; 48
    1654:	01 f5       	brne	.+64     	; 0x1696 <Isb_App_Exec+0x988>
														{
															// Um
															if (Isb_Obj[Obj_1].Data[0] == 0)
    1656:	59 89       	ldd	r21, Y+17	; 0x11
    1658:	25 2f       	mov	r18, r21
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	f9 01       	movw	r30, r18
    165e:	63 e0       	ldi	r22, 0x03	; 3
    1660:	ee 0f       	add	r30, r30
    1662:	ff 1f       	adc	r31, r31
    1664:	6a 95       	dec	r22
    1666:	e1 f7       	brne	.-8      	; 0x1660 <Isb_App_Exec+0x952>
    1668:	e2 0f       	add	r30, r18
    166a:	f3 1f       	adc	r31, r19
    166c:	e5 5c       	subi	r30, 0xC5	; 197
    166e:	fe 4f       	sbci	r31, 0xFE	; 254
    1670:	83 81       	ldd	r24, Z+3	; 0x03
    1672:	88 23       	and	r24, r24
    1674:	19 f4       	brne	.+6      	; 0x167c <Isb_App_Exec+0x96e>
															{
																Isb_Obj[Obj_1].Data[0] = 1;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	83 83       	std	Z+3, r24	; 0x03
    167a:	01 c0       	rjmp	.+2      	; 0x167e <Isb_App_Exec+0x970>
															}
															else
															{
																Isb_Obj[Obj_1].Data[0] = 0;
    167c:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_1].IsChanged = TRUE;
    167e:	f9 01       	movw	r30, r18
    1680:	53 e0       	ldi	r21, 0x03	; 3
    1682:	ee 0f       	add	r30, r30
    1684:	ff 1f       	adc	r31, r31
    1686:	5a 95       	dec	r21
    1688:	e1 f7       	brne	.-8      	; 0x1682 <Isb_App_Exec+0x974>
    168a:	e2 0f       	add	r30, r18
    168c:	f3 1f       	adc	r31, r19
    168e:	e5 5c       	subi	r30, 0xC5	; 197
    1690:	fe 4f       	sbci	r31, 0xFE	; 254
    1692:	91 e0       	ldi	r25, 0x01	; 1
    1694:	90 87       	std	Z+8, r25	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_LOW);
    1696:	a8 8d       	ldd	r26, Y+24	; 0x18
    1698:	b9 8d       	ldd	r27, Y+25	; 0x19
    169a:	15 96       	adiw	r26, 0x05	; 5
    169c:	8c 91       	ld	r24, X
    169e:	15 97       	sbiw	r26, 0x05	; 5
    16a0:	8e 7f       	andi	r24, 0xFE	; 254
    16a2:	40 c2       	rjmp	.+1152   	; 0x1b24 <Isb_App_Exec+0xe16>
													break;
											#endif /* ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_1SOUKLOR == TRUE */
											#if ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_1SOUKLMR == TRUE
												case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_1:
													// 1 Schaltobjekt - Ohne Unterscheidung Kurz/Lang - Mit Repeat
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGH))
    16a4:	a9 81       	ldd	r26, Y+1	; 0x01
    16a6:	ba 81       	ldd	r27, Y+2	; 0x02
    16a8:	43 e0       	ldi	r20, 0x03	; 3
    16aa:	aa 0f       	add	r26, r26
    16ac:	bb 1f       	adc	r27, r27
    16ae:	4a 95       	dec	r20
    16b0:	e1 f7       	brne	.-8      	; 0x16aa <Isb_App_Exec+0x99c>
    16b2:	a8 52       	subi	r26, 0x28	; 40
    16b4:	bf 4f       	sbci	r27, 0xFF	; 255
    16b6:	8c 91       	ld	r24, X
    16b8:	84 ff       	sbrs	r24, 4
    16ba:	55 c0       	rjmp	.+170    	; 0x1766 <Isb_App_Exec+0xa58>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1)
    16bc:	e8 8d       	ldd	r30, Y+24	; 0x18
    16be:	f9 8d       	ldd	r31, Y+25	; 0x19
    16c0:	82 81       	ldd	r24, Z+2	; 0x02
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	8f 70       	andi	r24, 0x0F	; 15
    16c6:	90 70       	andi	r25, 0x00	; 0
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	91 05       	cpc	r25, r1
    16cc:	89 f4       	brne	.+34     	; 0x16f0 <Isb_App_Exec+0x9e2>
														{
															// Aus
															Isb_Obj[Obj_1].Data[0] = 0;
    16ce:	f9 89       	ldd	r31, Y+17	; 0x11
    16d0:	8f 2f       	mov	r24, r31
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	fc 01       	movw	r30, r24
    16d6:	33 e0       	ldi	r19, 0x03	; 3
    16d8:	ee 0f       	add	r30, r30
    16da:	ff 1f       	adc	r31, r31
    16dc:	3a 95       	dec	r19
    16de:	e1 f7       	brne	.-8      	; 0x16d8 <Isb_App_Exec+0x9ca>
    16e0:	e8 0f       	add	r30, r24
    16e2:	f9 1f       	adc	r31, r25
    16e4:	e5 5c       	subi	r30, 0xC5	; 197
    16e6:	fe 4f       	sbci	r31, 0xFE	; 254
    16e8:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    16ea:	21 e0       	ldi	r18, 0x01	; 1
    16ec:	20 87       	std	Z+8, r18	; 0x08
    16ee:	36 c0       	rjmp	.+108    	; 0x175c <Isb_App_Exec+0xa4e>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2)
    16f0:	82 30       	cpi	r24, 0x02	; 2
    16f2:	91 05       	cpc	r25, r1
    16f4:	89 f4       	brne	.+34     	; 0x1718 <Isb_App_Exec+0xa0a>
														{
															// Ein
															Isb_Obj[Obj_1].Data[0] = 1;
    16f6:	39 89       	ldd	r19, Y+17	; 0x11
    16f8:	83 2f       	mov	r24, r19
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	fc 01       	movw	r30, r24
    16fe:	23 e0       	ldi	r18, 0x03	; 3
    1700:	ee 0f       	add	r30, r30
    1702:	ff 1f       	adc	r31, r31
    1704:	2a 95       	dec	r18
    1706:	e1 f7       	brne	.-8      	; 0x1700 <Isb_App_Exec+0x9f2>
    1708:	e8 0f       	add	r30, r24
    170a:	f9 1f       	adc	r31, r25
    170c:	e5 5c       	subi	r30, 0xC5	; 197
    170e:	fe 4f       	sbci	r31, 0xFE	; 254
    1710:	41 e0       	ldi	r20, 0x01	; 1
    1712:	43 83       	std	Z+3, r20	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1714:	40 87       	std	Z+8, r20	; 0x08
    1716:	22 c0       	rjmp	.+68     	; 0x175c <Isb_App_Exec+0xa4e>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3)
    1718:	03 97       	sbiw	r24, 0x03	; 3
    171a:	01 f5       	brne	.+64     	; 0x175c <Isb_App_Exec+0xa4e>
														{
															// Um
															if (Isb_Obj[Obj_1].Data[0] == 0)
    171c:	59 89       	ldd	r21, Y+17	; 0x11
    171e:	25 2f       	mov	r18, r21
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	f9 01       	movw	r30, r18
    1724:	03 e0       	ldi	r16, 0x03	; 3
    1726:	ee 0f       	add	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	0a 95       	dec	r16
    172c:	e1 f7       	brne	.-8      	; 0x1726 <Isb_App_Exec+0xa18>
    172e:	e2 0f       	add	r30, r18
    1730:	f3 1f       	adc	r31, r19
    1732:	e5 5c       	subi	r30, 0xC5	; 197
    1734:	fe 4f       	sbci	r31, 0xFE	; 254
    1736:	83 81       	ldd	r24, Z+3	; 0x03
    1738:	88 23       	and	r24, r24
    173a:	19 f4       	brne	.+6      	; 0x1742 <Isb_App_Exec+0xa34>
															{
																Isb_Obj[Obj_1].Data[0] = 1;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	83 83       	std	Z+3, r24	; 0x03
    1740:	01 c0       	rjmp	.+2      	; 0x1744 <Isb_App_Exec+0xa36>
															}
															else
															{
																Isb_Obj[Obj_1].Data[0] = 0;
    1742:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1744:	f9 01       	movw	r30, r18
    1746:	13 e0       	ldi	r17, 0x03	; 3
    1748:	ee 0f       	add	r30, r30
    174a:	ff 1f       	adc	r31, r31
    174c:	1a 95       	dec	r17
    174e:	e1 f7       	brne	.-8      	; 0x1748 <Isb_App_Exec+0xa3a>
    1750:	e2 0f       	add	r30, r18
    1752:	f3 1f       	adc	r31, r19
    1754:	e5 5c       	subi	r30, 0xC5	; 197
    1756:	fe 4f       	sbci	r31, 0xFE	; 254
    1758:	91 e0       	ldi	r25, 0x01	; 1
    175a:	90 87       	std	Z+8, r25	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGH);
    175c:	e8 8d       	ldd	r30, Y+24	; 0x18
    175e:	f9 8d       	ldd	r31, Y+25	; 0x19
    1760:	85 81       	ldd	r24, Z+5	; 0x05
    1762:	8f 7e       	andi	r24, 0xEF	; 239
    1764:	85 83       	std	Z+5, r24	; 0x05
													}
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_LOW))
    1766:	8c 91       	ld	r24, X
    1768:	80 ff       	sbrs	r24, 0
    176a:	d3 c1       	rjmp	.+934    	; 0x1b12 <Isb_App_Exec+0xe04>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1)
    176c:	e8 8d       	ldd	r30, Y+24	; 0x18
    176e:	f9 8d       	ldd	r31, Y+25	; 0x19
    1770:	82 81       	ldd	r24, Z+2	; 0x02
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	80 7f       	andi	r24, 0xF0	; 240
    1776:	90 70       	andi	r25, 0x00	; 0
    1778:	80 31       	cpi	r24, 0x10	; 16
    177a:	91 05       	cpc	r25, r1
    177c:	89 f4       	brne	.+34     	; 0x17a0 <Isb_App_Exec+0xa92>
														{
															// Aus
															Isb_Obj[Obj_1].Data[0] = 0;
    177e:	f9 89       	ldd	r31, Y+17	; 0x11
    1780:	8f 2f       	mov	r24, r31
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	fc 01       	movw	r30, r24
    1786:	73 e0       	ldi	r23, 0x03	; 3
    1788:	ee 0f       	add	r30, r30
    178a:	ff 1f       	adc	r31, r31
    178c:	7a 95       	dec	r23
    178e:	e1 f7       	brne	.-8      	; 0x1788 <Isb_App_Exec+0xa7a>
    1790:	e8 0f       	add	r30, r24
    1792:	f9 1f       	adc	r31, r25
    1794:	e5 5c       	subi	r30, 0xC5	; 197
    1796:	fe 4f       	sbci	r31, 0xFE	; 254
    1798:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    179a:	21 e0       	ldi	r18, 0x01	; 1
    179c:	20 87       	std	Z+8, r18	; 0x08
    179e:	36 c0       	rjmp	.+108    	; 0x180c <Isb_App_Exec+0xafe>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2)
    17a0:	80 32       	cpi	r24, 0x20	; 32
    17a2:	91 05       	cpc	r25, r1
    17a4:	89 f4       	brne	.+34     	; 0x17c8 <Isb_App_Exec+0xaba>
														{
															// Ein
															Isb_Obj[Obj_1].Data[0] = 1;
    17a6:	39 89       	ldd	r19, Y+17	; 0x11
    17a8:	83 2f       	mov	r24, r19
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	fc 01       	movw	r30, r24
    17ae:	63 e0       	ldi	r22, 0x03	; 3
    17b0:	ee 0f       	add	r30, r30
    17b2:	ff 1f       	adc	r31, r31
    17b4:	6a 95       	dec	r22
    17b6:	e1 f7       	brne	.-8      	; 0x17b0 <Isb_App_Exec+0xaa2>
    17b8:	e8 0f       	add	r30, r24
    17ba:	f9 1f       	adc	r31, r25
    17bc:	e5 5c       	subi	r30, 0xC5	; 197
    17be:	fe 4f       	sbci	r31, 0xFE	; 254
    17c0:	41 e0       	ldi	r20, 0x01	; 1
    17c2:	43 83       	std	Z+3, r20	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    17c4:	40 87       	std	Z+8, r20	; 0x08
    17c6:	22 c0       	rjmp	.+68     	; 0x180c <Isb_App_Exec+0xafe>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3)
    17c8:	c0 97       	sbiw	r24, 0x30	; 48
    17ca:	01 f5       	brne	.+64     	; 0x180c <Isb_App_Exec+0xafe>
														{
															// Um
															if (Isb_Obj[Obj_1].Data[0] == 0)
    17cc:	59 89       	ldd	r21, Y+17	; 0x11
    17ce:	25 2f       	mov	r18, r21
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	f9 01       	movw	r30, r18
    17d4:	53 e0       	ldi	r21, 0x03	; 3
    17d6:	ee 0f       	add	r30, r30
    17d8:	ff 1f       	adc	r31, r31
    17da:	5a 95       	dec	r21
    17dc:	e1 f7       	brne	.-8      	; 0x17d6 <Isb_App_Exec+0xac8>
    17de:	e2 0f       	add	r30, r18
    17e0:	f3 1f       	adc	r31, r19
    17e2:	e5 5c       	subi	r30, 0xC5	; 197
    17e4:	fe 4f       	sbci	r31, 0xFE	; 254
    17e6:	83 81       	ldd	r24, Z+3	; 0x03
    17e8:	88 23       	and	r24, r24
    17ea:	19 f4       	brne	.+6      	; 0x17f2 <Isb_App_Exec+0xae4>
															{
																Isb_Obj[Obj_1].Data[0] = 1;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	83 83       	std	Z+3, r24	; 0x03
    17f0:	01 c0       	rjmp	.+2      	; 0x17f4 <Isb_App_Exec+0xae6>
															}
															else
															{
																Isb_Obj[Obj_1].Data[0] = 0;
    17f2:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_1].IsChanged = TRUE;
    17f4:	f9 01       	movw	r30, r18
    17f6:	43 e0       	ldi	r20, 0x03	; 3
    17f8:	ee 0f       	add	r30, r30
    17fa:	ff 1f       	adc	r31, r31
    17fc:	4a 95       	dec	r20
    17fe:	e1 f7       	brne	.-8      	; 0x17f8 <Isb_App_Exec+0xaea>
    1800:	e2 0f       	add	r30, r18
    1802:	f3 1f       	adc	r31, r19
    1804:	e5 5c       	subi	r30, 0xC5	; 197
    1806:	fe 4f       	sbci	r31, 0xFE	; 254
    1808:	91 e0       	ldi	r25, 0x01	; 1
    180a:	90 87       	std	Z+8, r25	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_LOW);
    180c:	e8 8d       	ldd	r30, Y+24	; 0x18
    180e:	f9 8d       	ldd	r31, Y+25	; 0x19
    1810:	85 81       	ldd	r24, Z+5	; 0x05
    1812:	8e 7f       	andi	r24, 0xFE	; 254
    1814:	7d c1       	rjmp	.+762    	; 0x1b10 <Isb_App_Exec+0xe02>
													break;
											#endif /* ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_1SOUKLMR == TRUE */
											#if ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_2SMUKLOR == TRUE
												case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_2:
													// 2 Schaltobjekte - Mit Unterscheidung Kurz/Lang - Ohne Repeat
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHSHORT))
    1816:	a9 81       	ldd	r26, Y+1	; 0x01
    1818:	ba 81       	ldd	r27, Y+2	; 0x02
    181a:	33 e0       	ldi	r19, 0x03	; 3
    181c:	aa 0f       	add	r26, r26
    181e:	bb 1f       	adc	r27, r27
    1820:	3a 95       	dec	r19
    1822:	e1 f7       	brne	.-8      	; 0x181c <Isb_App_Exec+0xb0e>
    1824:	a8 52       	subi	r26, 0x28	; 40
    1826:	bf 4f       	sbci	r27, 0xFF	; 255
    1828:	8c 91       	ld	r24, X
    182a:	85 ff       	sbrs	r24, 5
    182c:	55 c0       	rjmp	.+170    	; 0x18d8 <Isb_App_Exec+0xbca>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1)
    182e:	e8 8d       	ldd	r30, Y+24	; 0x18
    1830:	f9 8d       	ldd	r31, Y+25	; 0x19
    1832:	82 81       	ldd	r24, Z+2	; 0x02
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	8f 70       	andi	r24, 0x0F	; 15
    1838:	90 70       	andi	r25, 0x00	; 0
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	91 05       	cpc	r25, r1
    183e:	89 f4       	brne	.+34     	; 0x1862 <Isb_App_Exec+0xb54>
														{
															// Aus
															Isb_Obj[Obj_1].Data[0] = 0;
    1840:	f9 89       	ldd	r31, Y+17	; 0x11
    1842:	8f 2f       	mov	r24, r31
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	fc 01       	movw	r30, r24
    1848:	23 e0       	ldi	r18, 0x03	; 3
    184a:	ee 0f       	add	r30, r30
    184c:	ff 1f       	adc	r31, r31
    184e:	2a 95       	dec	r18
    1850:	e1 f7       	brne	.-8      	; 0x184a <Isb_App_Exec+0xb3c>
    1852:	e8 0f       	add	r30, r24
    1854:	f9 1f       	adc	r31, r25
    1856:	e5 5c       	subi	r30, 0xC5	; 197
    1858:	fe 4f       	sbci	r31, 0xFE	; 254
    185a:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    185c:	21 e0       	ldi	r18, 0x01	; 1
    185e:	20 87       	std	Z+8, r18	; 0x08
    1860:	36 c0       	rjmp	.+108    	; 0x18ce <Isb_App_Exec+0xbc0>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2)
    1862:	82 30       	cpi	r24, 0x02	; 2
    1864:	91 05       	cpc	r25, r1
    1866:	89 f4       	brne	.+34     	; 0x188a <Isb_App_Exec+0xb7c>
														{
															// Ein
															Isb_Obj[Obj_1].Data[0] = 1;
    1868:	39 89       	ldd	r19, Y+17	; 0x11
    186a:	83 2f       	mov	r24, r19
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	fc 01       	movw	r30, r24
    1870:	03 e0       	ldi	r16, 0x03	; 3
    1872:	ee 0f       	add	r30, r30
    1874:	ff 1f       	adc	r31, r31
    1876:	0a 95       	dec	r16
    1878:	e1 f7       	brne	.-8      	; 0x1872 <Isb_App_Exec+0xb64>
    187a:	e8 0f       	add	r30, r24
    187c:	f9 1f       	adc	r31, r25
    187e:	e5 5c       	subi	r30, 0xC5	; 197
    1880:	fe 4f       	sbci	r31, 0xFE	; 254
    1882:	41 e0       	ldi	r20, 0x01	; 1
    1884:	43 83       	std	Z+3, r20	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1886:	40 87       	std	Z+8, r20	; 0x08
    1888:	22 c0       	rjmp	.+68     	; 0x18ce <Isb_App_Exec+0xbc0>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3)
    188a:	03 97       	sbiw	r24, 0x03	; 3
    188c:	01 f5       	brne	.+64     	; 0x18ce <Isb_App_Exec+0xbc0>
														{
															// Um
															if (Isb_Obj[Obj_1].Data[0] == 0)
    188e:	59 89       	ldd	r21, Y+17	; 0x11
    1890:	25 2f       	mov	r18, r21
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	f9 01       	movw	r30, r18
    1896:	13 e0       	ldi	r17, 0x03	; 3
    1898:	ee 0f       	add	r30, r30
    189a:	ff 1f       	adc	r31, r31
    189c:	1a 95       	dec	r17
    189e:	e1 f7       	brne	.-8      	; 0x1898 <Isb_App_Exec+0xb8a>
    18a0:	e2 0f       	add	r30, r18
    18a2:	f3 1f       	adc	r31, r19
    18a4:	e5 5c       	subi	r30, 0xC5	; 197
    18a6:	fe 4f       	sbci	r31, 0xFE	; 254
    18a8:	83 81       	ldd	r24, Z+3	; 0x03
    18aa:	88 23       	and	r24, r24
    18ac:	19 f4       	brne	.+6      	; 0x18b4 <Isb_App_Exec+0xba6>
															{
																Isb_Obj[Obj_1].Data[0] = 1;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	83 83       	std	Z+3, r24	; 0x03
    18b2:	01 c0       	rjmp	.+2      	; 0x18b6 <Isb_App_Exec+0xba8>
															}
															else
															{
																Isb_Obj[Obj_1].Data[0] = 0;
    18b4:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_1].IsChanged = TRUE;
    18b6:	f9 01       	movw	r30, r18
    18b8:	73 e0       	ldi	r23, 0x03	; 3
    18ba:	ee 0f       	add	r30, r30
    18bc:	ff 1f       	adc	r31, r31
    18be:	7a 95       	dec	r23
    18c0:	e1 f7       	brne	.-8      	; 0x18ba <Isb_App_Exec+0xbac>
    18c2:	e2 0f       	add	r30, r18
    18c4:	f3 1f       	adc	r31, r19
    18c6:	e5 5c       	subi	r30, 0xC5	; 197
    18c8:	fe 4f       	sbci	r31, 0xFE	; 254
    18ca:	91 e0       	ldi	r25, 0x01	; 1
    18cc:	90 87       	std	Z+8, r25	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHSHORT);
    18ce:	e8 8d       	ldd	r30, Y+24	; 0x18
    18d0:	f9 8d       	ldd	r31, Y+25	; 0x19
    18d2:	85 81       	ldd	r24, Z+5	; 0x05
    18d4:	8f 7d       	andi	r24, 0xDF	; 223
    18d6:	85 83       	std	Z+5, r24	; 0x05
													}
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHLONG))
    18d8:	8c 91       	ld	r24, X
    18da:	86 ff       	sbrs	r24, 6
    18dc:	25 c1       	rjmp	.+586    	; 0x1b28 <Isb_App_Exec+0xe1a>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1)
    18de:	a8 8d       	ldd	r26, Y+24	; 0x18
    18e0:	b9 8d       	ldd	r27, Y+25	; 0x19
    18e2:	12 96       	adiw	r26, 0x02	; 2
    18e4:	8c 91       	ld	r24, X
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	80 7f       	andi	r24, 0xF0	; 240
    18ea:	90 70       	andi	r25, 0x00	; 0
    18ec:	80 31       	cpi	r24, 0x10	; 16
    18ee:	91 05       	cpc	r25, r1
    18f0:	89 f4       	brne	.+34     	; 0x1914 <Isb_App_Exec+0xc06>
														{
															// Aus
															Isb_Obj[Obj_2].Data[0] = 0;
    18f2:	b8 89       	ldd	r27, Y+16	; 0x10
    18f4:	8b 2f       	mov	r24, r27
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	fc 01       	movw	r30, r24
    18fa:	63 e0       	ldi	r22, 0x03	; 3
    18fc:	ee 0f       	add	r30, r30
    18fe:	ff 1f       	adc	r31, r31
    1900:	6a 95       	dec	r22
    1902:	e1 f7       	brne	.-8      	; 0x18fc <Isb_App_Exec+0xbee>
    1904:	e8 0f       	add	r30, r24
    1906:	f9 1f       	adc	r31, r25
    1908:	e5 5c       	subi	r30, 0xC5	; 197
    190a:	fe 4f       	sbci	r31, 0xFE	; 254
    190c:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_2].IsChanged = TRUE;
    190e:	21 e0       	ldi	r18, 0x01	; 1
    1910:	20 87       	std	Z+8, r18	; 0x08
    1912:	36 c0       	rjmp	.+108    	; 0x1980 <Isb_App_Exec+0xc72>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2)
    1914:	80 32       	cpi	r24, 0x20	; 32
    1916:	91 05       	cpc	r25, r1
    1918:	89 f4       	brne	.+34     	; 0x193c <Isb_App_Exec+0xc2e>
														{
															// Ein
															Isb_Obj[Obj_2].Data[0] = 1;
    191a:	38 89       	ldd	r19, Y+16	; 0x10
    191c:	83 2f       	mov	r24, r19
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	fc 01       	movw	r30, r24
    1922:	53 e0       	ldi	r21, 0x03	; 3
    1924:	ee 0f       	add	r30, r30
    1926:	ff 1f       	adc	r31, r31
    1928:	5a 95       	dec	r21
    192a:	e1 f7       	brne	.-8      	; 0x1924 <Isb_App_Exec+0xc16>
    192c:	e8 0f       	add	r30, r24
    192e:	f9 1f       	adc	r31, r25
    1930:	e5 5c       	subi	r30, 0xC5	; 197
    1932:	fe 4f       	sbci	r31, 0xFE	; 254
    1934:	41 e0       	ldi	r20, 0x01	; 1
    1936:	43 83       	std	Z+3, r20	; 0x03
															Isb_Obj[Obj_2].IsChanged = TRUE;
    1938:	40 87       	std	Z+8, r20	; 0x08
    193a:	22 c0       	rjmp	.+68     	; 0x1980 <Isb_App_Exec+0xc72>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3)
    193c:	c0 97       	sbiw	r24, 0x30	; 48
    193e:	01 f5       	brne	.+64     	; 0x1980 <Isb_App_Exec+0xc72>
														{
															// Um
															if (Isb_Obj[Obj_2].Data[0] == 0)
    1940:	58 89       	ldd	r21, Y+16	; 0x10
    1942:	25 2f       	mov	r18, r21
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	f9 01       	movw	r30, r18
    1948:	43 e0       	ldi	r20, 0x03	; 3
    194a:	ee 0f       	add	r30, r30
    194c:	ff 1f       	adc	r31, r31
    194e:	4a 95       	dec	r20
    1950:	e1 f7       	brne	.-8      	; 0x194a <Isb_App_Exec+0xc3c>
    1952:	e2 0f       	add	r30, r18
    1954:	f3 1f       	adc	r31, r19
    1956:	e5 5c       	subi	r30, 0xC5	; 197
    1958:	fe 4f       	sbci	r31, 0xFE	; 254
    195a:	83 81       	ldd	r24, Z+3	; 0x03
    195c:	88 23       	and	r24, r24
    195e:	19 f4       	brne	.+6      	; 0x1966 <Isb_App_Exec+0xc58>
															{
																Isb_Obj[Obj_2].Data[0] = 1;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	83 83       	std	Z+3, r24	; 0x03
    1964:	01 c0       	rjmp	.+2      	; 0x1968 <Isb_App_Exec+0xc5a>
															}
															else
															{
																Isb_Obj[Obj_2].Data[0] = 0;
    1966:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_2].IsChanged = TRUE;
    1968:	f9 01       	movw	r30, r18
    196a:	93 e0       	ldi	r25, 0x03	; 3
    196c:	ee 0f       	add	r30, r30
    196e:	ff 1f       	adc	r31, r31
    1970:	9a 95       	dec	r25
    1972:	e1 f7       	brne	.-8      	; 0x196c <Isb_App_Exec+0xc5e>
    1974:	e2 0f       	add	r30, r18
    1976:	f3 1f       	adc	r31, r19
    1978:	e5 5c       	subi	r30, 0xC5	; 197
    197a:	fe 4f       	sbci	r31, 0xFE	; 254
    197c:	91 e0       	ldi	r25, 0x01	; 1
    197e:	90 87       	std	Z+8, r25	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHLONG);
    1980:	a8 8d       	ldd	r26, Y+24	; 0x18
    1982:	b9 8d       	ldd	r27, Y+25	; 0x19
    1984:	15 96       	adiw	r26, 0x05	; 5
    1986:	8c 91       	ld	r24, X
    1988:	15 97       	sbiw	r26, 0x05	; 5
    198a:	8f 7b       	andi	r24, 0xBF	; 191
    198c:	cb c0       	rjmp	.+406    	; 0x1b24 <Isb_App_Exec+0xe16>
													break;
											#endif /* ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_2SMUKLOR == TRUE */
											#if ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_2SMUKLMR == TRUE
												case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_3:
													// 2 Schaltobjekte - Mit Unterscheidung Kurz/Lang - Mit Repeat
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHSHORT))
    198e:	a9 81       	ldd	r26, Y+1	; 0x01
    1990:	ba 81       	ldd	r27, Y+2	; 0x02
    1992:	83 e0       	ldi	r24, 0x03	; 3
    1994:	aa 0f       	add	r26, r26
    1996:	bb 1f       	adc	r27, r27
    1998:	8a 95       	dec	r24
    199a:	e1 f7       	brne	.-8      	; 0x1994 <Isb_App_Exec+0xc86>
    199c:	a8 52       	subi	r26, 0x28	; 40
    199e:	bf 4f       	sbci	r27, 0xFF	; 255
    19a0:	8c 91       	ld	r24, X
    19a2:	85 ff       	sbrs	r24, 5
    19a4:	5e c0       	rjmp	.+188    	; 0x1a62 <Isb_App_Exec+0xd54>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1)
    19a6:	e8 8d       	ldd	r30, Y+24	; 0x18
    19a8:	f9 8d       	ldd	r31, Y+25	; 0x19
    19aa:	82 81       	ldd	r24, Z+2	; 0x02
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	8f 70       	andi	r24, 0x0F	; 15
    19b0:	90 70       	andi	r25, 0x00	; 0
    19b2:	81 30       	cpi	r24, 0x01	; 1
    19b4:	91 05       	cpc	r25, r1
    19b6:	79 f4       	brne	.+30     	; 0x19d6 <Isb_App_Exec+0xcc8>
														{
															// Aus
															Isb_Obj[Obj_1].Data[0] = 0;
    19b8:	f9 89       	ldd	r31, Y+17	; 0x11
    19ba:	8f 2f       	mov	r24, r31
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	fc 01       	movw	r30, r24
    19c0:	03 e0       	ldi	r16, 0x03	; 3
    19c2:	ee 0f       	add	r30, r30
    19c4:	ff 1f       	adc	r31, r31
    19c6:	0a 95       	dec	r16
    19c8:	e1 f7       	brne	.-8      	; 0x19c2 <Isb_App_Exec+0xcb4>
    19ca:	e8 0f       	add	r30, r24
    19cc:	f9 1f       	adc	r31, r25
    19ce:	e5 5c       	subi	r30, 0xC5	; 197
    19d0:	fe 4f       	sbci	r31, 0xFE	; 254
    19d2:	13 82       	std	Z+3, r1	; 0x03
    19d4:	3f c0       	rjmp	.+126    	; 0x1a54 <Isb_App_Exec+0xd46>
															Isb_Obj[Obj_1].IsChanged = TRUE;
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2)
    19d6:	82 30       	cpi	r24, 0x02	; 2
    19d8:	91 05       	cpc	r25, r1
    19da:	89 f4       	brne	.+34     	; 0x19fe <Isb_App_Exec+0xcf0>
														{
															// Ein
															Isb_Obj[Obj_1].Data[0] = 1;
    19dc:	39 89       	ldd	r19, Y+17	; 0x11
    19de:	83 2f       	mov	r24, r19
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	fc 01       	movw	r30, r24
    19e4:	13 e0       	ldi	r17, 0x03	; 3
    19e6:	ee 0f       	add	r30, r30
    19e8:	ff 1f       	adc	r31, r31
    19ea:	1a 95       	dec	r17
    19ec:	e1 f7       	brne	.-8      	; 0x19e6 <Isb_App_Exec+0xcd8>
    19ee:	e8 0f       	add	r30, r24
    19f0:	f9 1f       	adc	r31, r25
    19f2:	e5 5c       	subi	r30, 0xC5	; 197
    19f4:	fe 4f       	sbci	r31, 0xFE	; 254
    19f6:	41 e0       	ldi	r20, 0x01	; 1
    19f8:	43 83       	std	Z+3, r20	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    19fa:	40 87       	std	Z+8, r20	; 0x08
    19fc:	2d c0       	rjmp	.+90     	; 0x1a58 <Isb_App_Exec+0xd4a>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3)
    19fe:	03 97       	sbiw	r24, 0x03	; 3
    1a00:	59 f5       	brne	.+86     	; 0x1a58 <Isb_App_Exec+0xd4a>
														{
															// Um
															if (Isb_Obj[Obj_1].Data[0] == 0)
    1a02:	89 89       	ldd	r24, Y+17	; 0x11
    1a04:	48 2f       	mov	r20, r24
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	9a 01       	movw	r18, r20
    1a0a:	73 e0       	ldi	r23, 0x03	; 3
    1a0c:	22 0f       	add	r18, r18
    1a0e:	33 1f       	adc	r19, r19
    1a10:	7a 95       	dec	r23
    1a12:	e1 f7       	brne	.-8      	; 0x1a0c <Isb_App_Exec+0xcfe>
    1a14:	f9 01       	movw	r30, r18
    1a16:	e4 0f       	add	r30, r20
    1a18:	f5 1f       	adc	r31, r21
    1a1a:	e5 5c       	subi	r30, 0xC5	; 197
    1a1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a1e:	83 81       	ldd	r24, Z+3	; 0x03
    1a20:	88 23       	and	r24, r24
    1a22:	41 f4       	brne	.+16     	; 0x1a34 <Isb_App_Exec+0xd26>
															{
																Isb_Obj[Obj_1].Data[0] = 1;
    1a24:	f9 01       	movw	r30, r18
    1a26:	e4 0f       	add	r30, r20
    1a28:	f5 1f       	adc	r31, r21
    1a2a:	e5 5c       	subi	r30, 0xC5	; 197
    1a2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a2e:	91 e0       	ldi	r25, 0x01	; 1
    1a30:	93 83       	std	Z+3, r25	; 0x03
    1a32:	06 c0       	rjmp	.+12     	; 0x1a40 <Isb_App_Exec+0xd32>
															}
															else
															{
																Isb_Obj[Obj_1].Data[0] = 0;
    1a34:	f9 01       	movw	r30, r18
    1a36:	e4 0f       	add	r30, r20
    1a38:	f5 1f       	adc	r31, r21
    1a3a:	e5 5c       	subi	r30, 0xC5	; 197
    1a3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a3e:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1a40:	fa 01       	movw	r30, r20
    1a42:	63 e0       	ldi	r22, 0x03	; 3
    1a44:	ee 0f       	add	r30, r30
    1a46:	ff 1f       	adc	r31, r31
    1a48:	6a 95       	dec	r22
    1a4a:	e1 f7       	brne	.-8      	; 0x1a44 <Isb_App_Exec+0xd36>
    1a4c:	e4 0f       	add	r30, r20
    1a4e:	f5 1f       	adc	r31, r21
    1a50:	e5 5c       	subi	r30, 0xC5	; 197
    1a52:	fe 4f       	sbci	r31, 0xFE	; 254
    1a54:	21 e0       	ldi	r18, 0x01	; 1
    1a56:	20 87       	std	Z+8, r18	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHSHORT);
    1a58:	e8 8d       	ldd	r30, Y+24	; 0x18
    1a5a:	f9 8d       	ldd	r31, Y+25	; 0x19
    1a5c:	85 81       	ldd	r24, Z+5	; 0x05
    1a5e:	8f 7d       	andi	r24, 0xDF	; 223
    1a60:	85 83       	std	Z+5, r24	; 0x05
													}
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHLONG))
    1a62:	8c 91       	ld	r24, X
    1a64:	86 ff       	sbrs	r24, 6
    1a66:	55 c0       	rjmp	.+170    	; 0x1b12 <Isb_App_Exec+0xe04>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1)
    1a68:	e8 8d       	ldd	r30, Y+24	; 0x18
    1a6a:	f9 8d       	ldd	r31, Y+25	; 0x19
    1a6c:	82 81       	ldd	r24, Z+2	; 0x02
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	80 7f       	andi	r24, 0xF0	; 240
    1a72:	90 70       	andi	r25, 0x00	; 0
    1a74:	80 31       	cpi	r24, 0x10	; 16
    1a76:	91 05       	cpc	r25, r1
    1a78:	89 f4       	brne	.+34     	; 0x1a9c <Isb_App_Exec+0xd8e>
														{
															// Aus
															Isb_Obj[Obj_2].Data[0] = 0;
    1a7a:	f8 89       	ldd	r31, Y+16	; 0x10
    1a7c:	8f 2f       	mov	r24, r31
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	fc 01       	movw	r30, r24
    1a82:	33 e0       	ldi	r19, 0x03	; 3
    1a84:	ee 0f       	add	r30, r30
    1a86:	ff 1f       	adc	r31, r31
    1a88:	3a 95       	dec	r19
    1a8a:	e1 f7       	brne	.-8      	; 0x1a84 <Isb_App_Exec+0xd76>
    1a8c:	e8 0f       	add	r30, r24
    1a8e:	f9 1f       	adc	r31, r25
    1a90:	e5 5c       	subi	r30, 0xC5	; 197
    1a92:	fe 4f       	sbci	r31, 0xFE	; 254
    1a94:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_2].IsChanged = TRUE;
    1a96:	21 e0       	ldi	r18, 0x01	; 1
    1a98:	20 87       	std	Z+8, r18	; 0x08
    1a9a:	36 c0       	rjmp	.+108    	; 0x1b08 <Isb_App_Exec+0xdfa>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2)
    1a9c:	80 32       	cpi	r24, 0x20	; 32
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	89 f4       	brne	.+34     	; 0x1ac4 <Isb_App_Exec+0xdb6>
														{
															// Ein
															Isb_Obj[Obj_2].Data[0] = 1;
    1aa2:	38 89       	ldd	r19, Y+16	; 0x10
    1aa4:	83 2f       	mov	r24, r19
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	23 e0       	ldi	r18, 0x03	; 3
    1aac:	ee 0f       	add	r30, r30
    1aae:	ff 1f       	adc	r31, r31
    1ab0:	2a 95       	dec	r18
    1ab2:	e1 f7       	brne	.-8      	; 0x1aac <Isb_App_Exec+0xd9e>
    1ab4:	e8 0f       	add	r30, r24
    1ab6:	f9 1f       	adc	r31, r25
    1ab8:	e5 5c       	subi	r30, 0xC5	; 197
    1aba:	fe 4f       	sbci	r31, 0xFE	; 254
    1abc:	41 e0       	ldi	r20, 0x01	; 1
    1abe:	43 83       	std	Z+3, r20	; 0x03
															Isb_Obj[Obj_2].IsChanged = TRUE;
    1ac0:	40 87       	std	Z+8, r20	; 0x08
    1ac2:	22 c0       	rjmp	.+68     	; 0x1b08 <Isb_App_Exec+0xdfa>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3)
    1ac4:	c0 97       	sbiw	r24, 0x30	; 48
    1ac6:	01 f5       	brne	.+64     	; 0x1b08 <Isb_App_Exec+0xdfa>
														{
															// Um
															if (Isb_Obj[Obj_2].Data[0] == 0)
    1ac8:	58 89       	ldd	r21, Y+16	; 0x10
    1aca:	25 2f       	mov	r18, r21
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	f9 01       	movw	r30, r18
    1ad0:	83 e0       	ldi	r24, 0x03	; 3
    1ad2:	ee 0f       	add	r30, r30
    1ad4:	ff 1f       	adc	r31, r31
    1ad6:	8a 95       	dec	r24
    1ad8:	e1 f7       	brne	.-8      	; 0x1ad2 <Isb_App_Exec+0xdc4>
    1ada:	e2 0f       	add	r30, r18
    1adc:	f3 1f       	adc	r31, r19
    1ade:	e5 5c       	subi	r30, 0xC5	; 197
    1ae0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae2:	83 81       	ldd	r24, Z+3	; 0x03
    1ae4:	88 23       	and	r24, r24
    1ae6:	19 f4       	brne	.+6      	; 0x1aee <Isb_App_Exec+0xde0>
															{
																Isb_Obj[Obj_2].Data[0] = 1;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	83 83       	std	Z+3, r24	; 0x03
    1aec:	01 c0       	rjmp	.+2      	; 0x1af0 <Isb_App_Exec+0xde2>
															}
															else
															{
																Isb_Obj[Obj_2].Data[0] = 0;
    1aee:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_2].IsChanged = TRUE;
    1af0:	f9 01       	movw	r30, r18
    1af2:	03 e0       	ldi	r16, 0x03	; 3
    1af4:	ee 0f       	add	r30, r30
    1af6:	ff 1f       	adc	r31, r31
    1af8:	0a 95       	dec	r16
    1afa:	e1 f7       	brne	.-8      	; 0x1af4 <Isb_App_Exec+0xde6>
    1afc:	e2 0f       	add	r30, r18
    1afe:	f3 1f       	adc	r31, r19
    1b00:	e5 5c       	subi	r30, 0xC5	; 197
    1b02:	fe 4f       	sbci	r31, 0xFE	; 254
    1b04:	91 e0       	ldi	r25, 0x01	; 1
    1b06:	90 87       	std	Z+8, r25	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHLONG);
    1b08:	e8 8d       	ldd	r30, Y+24	; 0x18
    1b0a:	f9 8d       	ldd	r31, Y+25	; 0x19
    1b0c:	85 81       	ldd	r24, Z+5	; 0x05
    1b0e:	8f 7b       	andi	r24, 0xBF	; 191
    1b10:	85 83       	std	Z+5, r24	; 0x05
													}
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHREPEAT))
    1b12:	8c 91       	ld	r24, X
    1b14:	87 ff       	sbrs	r24, 7
    1b16:	08 c0       	rjmp	.+16     	; 0x1b28 <Isb_App_Exec+0xe1a>
													{
// TODO: REPEAT
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHREPEAT);
    1b18:	a8 8d       	ldd	r26, Y+24	; 0x18
    1b1a:	b9 8d       	ldd	r27, Y+25	; 0x19
    1b1c:	15 96       	adiw	r26, 0x05	; 5
    1b1e:	8c 91       	ld	r24, X
    1b20:	15 97       	sbiw	r26, 0x05	; 5
    1b22:	8f 77       	andi	r24, 0x7F	; 127
    1b24:	15 96       	adiw	r26, 0x05	; 5
    1b26:	8c 93       	st	X, r24
    1b28:	e9 81       	ldd	r30, Y+1	; 0x01
    1b2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b2c:	31 96       	adiw	r30, 0x01	; 1
    1b2e:	fa 83       	std	Y+2, r31	; 0x02
    1b30:	e9 83       	std	Y+1, r30	; 0x01
    1b32:	28 8d       	ldd	r18, Y+24	; 0x18
    1b34:	39 8d       	ldd	r19, Y+25	; 0x19
    1b36:	28 5f       	subi	r18, 0xF8	; 248
    1b38:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3a:	39 8f       	std	Y+25, r19	; 0x19
    1b3c:	28 8f       	std	Y+24, r18	; 0x18
		#endif /* ISB_APP_CLOCK_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			if (bit_is_set(Isb_App_DigIn_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
			{
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++)
    1b3e:	38 97       	sbiw	r30, 0x08	; 8
    1b40:	09 f0       	breq	.+2      	; 0x1b44 <Isb_App_Exec+0xe36>
    1b42:	0f c9       	rjmp	.-3554   	; 0xd62 <Isb_App_Exec+0x54>
								#endif /* ISB_APP_DIGIN_MODE_FEATURE_COUNTER == TRUE */
							}
//						}
					}
				}
				Isb_App_DigIn_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    1b44:	80 91 ab 00 	lds	r24, 0x00AB
    1b48:	8e 7f       	andi	r24, 0xFE	; 254
    1b4a:	80 93 ab 00 	sts	0x00AB, r24
			}
		#endif /* ISB_APP_DIGIN_MAX */

		#if defined(ISB_APP_DIGOUT_MAX)
			if (bit_is_set(Isb_App_DigOut_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
    1b4e:	80 91 ac 00 	lds	r24, 0x00AC
    1b52:	80 ff       	sbrs	r24, 0
    1b54:	9c c1       	rjmp	.+824    	; 0x1e8e <Isb_App_Exec+0x1180>
    1b56:	80 91 a7 00 	lds	r24, 0x00A7
    1b5a:	28 2e       	mov	r2, r24
    1b5c:	33 24       	eor	r3, r3
    1b5e:	13 e1       	ldi	r17, 0x13	; 19
    1b60:	61 2e       	mov	r6, r17
    1b62:	11 e0       	ldi	r17, 0x01	; 1
    1b64:	71 2e       	mov	r7, r17
    1b66:	88 24       	eor	r8, r8
    1b68:	99 24       	eor	r9, r9
    1b6a:	98 2d       	mov	r25, r8
			{
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGOUT_MAX; AppIndex++)
				{
					uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigOut_Ch_Array[AppIndex]);
    1b6c:	f4 01       	movw	r30, r8
    1b6e:	e4 56       	subi	r30, 0x64	; 100
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	24 91       	lpm	r18, Z+
					uint8_t Obj_0 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_0_Array[AppIndex]);
    1b74:	f4 01       	movw	r30, r8
    1b76:	ec 55       	subi	r30, 0x5C	; 92
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	34 91       	lpm	r19, Z+
    1b7c:	3d 83       	std	Y+5, r19	; 0x05
					#endif /* ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION == TRUE */
					#if ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE
						uint8_t Obj_3 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_3_Array[AppIndex]);
					#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
					// Initialize
					if (bit_is_clear(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_INITIALIZED))
    1b7e:	a2 2e       	mov	r10, r18
    1b80:	bb 24       	eor	r11, r11
    1b82:	25 01       	movw	r4, r10
    1b84:	44 0c       	add	r4, r4
    1b86:	55 1c       	adc	r5, r5
    1b88:	43 eb       	ldi	r20, 0xB3	; 179
    1b8a:	50 e0       	ldi	r21, 0x00	; 0
    1b8c:	44 0e       	add	r4, r20
    1b8e:	55 1e       	adc	r5, r21
    1b90:	d2 01       	movw	r26, r4
    1b92:	8c 91       	ld	r24, X
    1b94:	86 fd       	sbrc	r24, 6
    1b96:	fd c0       	rjmp	.+506    	; 0x1d92 <Isb_App_Exec+0x1084>
							uint16_t eepAddr_Cfg10 = 0;
							uint16_t eepAddr_Obj_3_Ctrl = 0;
							uint16_t eepAddr_Obj_3_Tov = 0;
							uint16_t eepAddr_Obj_3_InitValue = 0;
						#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
						switch (AppIndex)
    1b98:	93 30       	cpi	r25, 0x03	; 3
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <Isb_App_Exec+0xe90>
    1b9c:	43 c0       	rjmp	.+134    	; 0x1c24 <Isb_App_Exec+0xf16>
    1b9e:	94 30       	cpi	r25, 0x04	; 4
    1ba0:	28 f4       	brcc	.+10     	; 0x1bac <Isb_App_Exec+0xe9e>
    1ba2:	91 30       	cpi	r25, 0x01	; 1
    1ba4:	29 f1       	breq	.+74     	; 0x1bf0 <Isb_App_Exec+0xee2>
    1ba6:	92 30       	cpi	r25, 0x02	; 2
    1ba8:	80 f5       	brcc	.+96     	; 0x1c0a <Isb_App_Exec+0xefc>
    1baa:	0c c0       	rjmp	.+24     	; 0x1bc4 <Isb_App_Exec+0xeb6>
    1bac:	95 30       	cpi	r25, 0x05	; 5
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <Isb_App_Exec+0xea4>
    1bb0:	54 c0       	rjmp	.+168    	; 0x1c5a <Isb_App_Exec+0xf4c>
    1bb2:	95 30       	cpi	r25, 0x05	; 5
    1bb4:	08 f4       	brcc	.+2      	; 0x1bb8 <Isb_App_Exec+0xeaa>
    1bb6:	43 c0       	rjmp	.+134    	; 0x1c3e <Isb_App_Exec+0xf30>
    1bb8:	96 30       	cpi	r25, 0x06	; 6
    1bba:	09 f4       	brne	.+2      	; 0x1bbe <Isb_App_Exec+0xeb0>
    1bbc:	5d c0       	rjmp	.+186    	; 0x1c78 <Isb_App_Exec+0xf6a>
    1bbe:	97 30       	cpi	r25, 0x07	; 7
    1bc0:	71 f4       	brne	.+28     	; 0x1bde <Isb_App_Exec+0xed0>
    1bc2:	69 c0       	rjmp	.+210    	; 0x1c96 <Isb_App_Exec+0xf88>
    1bc4:	a9 ed       	ldi	r26, 0xD9	; 217
    1bc6:	ea 2e       	mov	r14, r26
    1bc8:	f1 2c       	mov	r15, r1
    1bca:	ea ed       	ldi	r30, 0xDA	; 218
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	f9 8f       	std	Y+25, r31	; 0x19
    1bd0:	e8 8f       	std	Y+24, r30	; 0x18
    1bd2:	0b ed       	ldi	r16, 0xDB	; 219
    1bd4:	10 e0       	ldi	r17, 0x00	; 0
    1bd6:	fc ed       	ldi	r31, 0xDC	; 220
    1bd8:	cf 2e       	mov	r12, r31
    1bda:	d1 2c       	mov	r13, r1
    1bdc:	6a c0       	rjmp	.+212    	; 0x1cb2 <Isb_App_Exec+0xfa4>
    1bde:	ee 24       	eor	r14, r14
    1be0:	ff 24       	eor	r15, r15
    1be2:	19 8e       	std	Y+25, r1	; 0x19
    1be4:	18 8e       	std	Y+24, r1	; 0x18
    1be6:	00 e0       	ldi	r16, 0x00	; 0
    1be8:	10 e0       	ldi	r17, 0x00	; 0
    1bea:	cc 24       	eor	r12, r12
    1bec:	dd 24       	eor	r13, r13
    1bee:	61 c0       	rjmp	.+194    	; 0x1cb2 <Isb_App_Exec+0xfa4>
    1bf0:	e3 ee       	ldi	r30, 0xE3	; 227
    1bf2:	ee 2e       	mov	r14, r30
    1bf4:	f1 2c       	mov	r15, r1
    1bf6:	44 ee       	ldi	r20, 0xE4	; 228
    1bf8:	50 e0       	ldi	r21, 0x00	; 0
    1bfa:	59 8f       	std	Y+25, r21	; 0x19
    1bfc:	48 8f       	std	Y+24, r20	; 0x18
    1bfe:	05 ee       	ldi	r16, 0xE5	; 229
    1c00:	10 e0       	ldi	r17, 0x00	; 0
    1c02:	76 ee       	ldi	r23, 0xE6	; 230
    1c04:	c7 2e       	mov	r12, r23
    1c06:	d1 2c       	mov	r13, r1
    1c08:	54 c0       	rjmp	.+168    	; 0x1cb2 <Isb_App_Exec+0xfa4>
										eepAddr_Cfg10 = ISB_APP_DIGOUT_1_EEADDR_CFG10;
										eepAddr_Obj_3_Ctrl = ISB_APP_DIGOUT_1_OBJ_3_EEADDR_CTRL;
										eepAddr_Obj_3_Tov = ISB_APP_DIGOUT_1_OBJ_3_EEADDR_TOV;
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_1_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
    1c0a:	6d ee       	ldi	r22, 0xED	; 237
    1c0c:	e6 2e       	mov	r14, r22
    1c0e:	f1 2c       	mov	r15, r1
    1c10:	8e ee       	ldi	r24, 0xEE	; 238
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	99 8f       	std	Y+25, r25	; 0x19
    1c16:	88 8f       	std	Y+24, r24	; 0x18
    1c18:	0f ee       	ldi	r16, 0xEF	; 239
    1c1a:	10 e0       	ldi	r17, 0x00	; 0
    1c1c:	50 ef       	ldi	r21, 0xF0	; 240
    1c1e:	c5 2e       	mov	r12, r21
    1c20:	d1 2c       	mov	r13, r1
    1c22:	47 c0       	rjmp	.+142    	; 0x1cb2 <Isb_App_Exec+0xfa4>
										eepAddr_Cfg10 = ISB_APP_DIGOUT_2_EEADDR_CFG10;
										eepAddr_Obj_3_Ctrl = ISB_APP_DIGOUT_2_OBJ_3_EEADDR_CTRL;
										eepAddr_Obj_3_Tov = ISB_APP_DIGOUT_2_OBJ_3_EEADDR_TOV;
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_2_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
    1c24:	47 ef       	ldi	r20, 0xF7	; 247
    1c26:	e4 2e       	mov	r14, r20
    1c28:	f1 2c       	mov	r15, r1
    1c2a:	a8 ef       	ldi	r26, 0xF8	; 248
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	b9 8f       	std	Y+25, r27	; 0x19
    1c30:	a8 8f       	std	Y+24, r26	; 0x18
    1c32:	09 ef       	ldi	r16, 0xF9	; 249
    1c34:	10 e0       	ldi	r17, 0x00	; 0
    1c36:	3a ef       	ldi	r19, 0xFA	; 250
    1c38:	c3 2e       	mov	r12, r19
    1c3a:	d1 2c       	mov	r13, r1
    1c3c:	3a c0       	rjmp	.+116    	; 0x1cb2 <Isb_App_Exec+0xfa4>
										eepAddr_Cfg10 = ISB_APP_DIGOUT_3_EEADDR_CFG10;
										eepAddr_Obj_3_Ctrl = ISB_APP_DIGOUT_3_OBJ_3_EEADDR_CTRL;
										eepAddr_Obj_3_Tov = ISB_APP_DIGOUT_3_OBJ_3_EEADDR_TOV;
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_3_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
    1c3e:	91 e0       	ldi	r25, 0x01	; 1
    1c40:	e9 2e       	mov	r14, r25
    1c42:	f9 2e       	mov	r15, r25
    1c44:	e2 e0       	ldi	r30, 0x02	; 2
    1c46:	f1 e0       	ldi	r31, 0x01	; 1
    1c48:	f9 8f       	std	Y+25, r31	; 0x19
    1c4a:	e8 8f       	std	Y+24, r30	; 0x18
    1c4c:	03 e0       	ldi	r16, 0x03	; 3
    1c4e:	11 e0       	ldi	r17, 0x01	; 1
    1c50:	84 e0       	ldi	r24, 0x04	; 4
    1c52:	c8 2e       	mov	r12, r24
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	d8 2e       	mov	r13, r24
    1c58:	2c c0       	rjmp	.+88     	; 0x1cb2 <Isb_App_Exec+0xfa4>
										eepAddr_Cfg10 = ISB_APP_DIGOUT_4_EEADDR_CFG10;
										eepAddr_Obj_3_Ctrl = ISB_APP_DIGOUT_4_OBJ_3_EEADDR_CTRL;
										eepAddr_Obj_3_Tov = ISB_APP_DIGOUT_4_OBJ_3_EEADDR_TOV;
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_4_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
    1c5a:	1b e0       	ldi	r17, 0x0B	; 11
    1c5c:	e1 2e       	mov	r14, r17
    1c5e:	11 e0       	ldi	r17, 0x01	; 1
    1c60:	f1 2e       	mov	r15, r17
    1c62:	4c e0       	ldi	r20, 0x0C	; 12
    1c64:	51 e0       	ldi	r21, 0x01	; 1
    1c66:	59 8f       	std	Y+25, r21	; 0x19
    1c68:	48 8f       	std	Y+24, r20	; 0x18
    1c6a:	0d e0       	ldi	r16, 0x0D	; 13
    1c6c:	11 e0       	ldi	r17, 0x01	; 1
    1c6e:	be e0       	ldi	r27, 0x0E	; 14
    1c70:	cb 2e       	mov	r12, r27
    1c72:	b1 e0       	ldi	r27, 0x01	; 1
    1c74:	db 2e       	mov	r13, r27
    1c76:	1d c0       	rjmp	.+58     	; 0x1cb2 <Isb_App_Exec+0xfa4>
										eepAddr_Cfg10 = ISB_APP_DIGOUT_5_EEADDR_CFG10;
										eepAddr_Obj_3_Ctrl = ISB_APP_DIGOUT_5_OBJ_3_EEADDR_CTRL;
										eepAddr_Obj_3_Tov = ISB_APP_DIGOUT_5_OBJ_3_EEADDR_TOV;
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_5_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
    1c78:	a5 e1       	ldi	r26, 0x15	; 21
    1c7a:	ea 2e       	mov	r14, r26
    1c7c:	a1 e0       	ldi	r26, 0x01	; 1
    1c7e:	fa 2e       	mov	r15, r26
    1c80:	86 e1       	ldi	r24, 0x16	; 22
    1c82:	91 e0       	ldi	r25, 0x01	; 1
    1c84:	99 8f       	std	Y+25, r25	; 0x19
    1c86:	88 8f       	std	Y+24, r24	; 0x18
    1c88:	07 e1       	ldi	r16, 0x17	; 23
    1c8a:	11 e0       	ldi	r17, 0x01	; 1
    1c8c:	f8 e1       	ldi	r31, 0x18	; 24
    1c8e:	cf 2e       	mov	r12, r31
    1c90:	f1 e0       	ldi	r31, 0x01	; 1
    1c92:	df 2e       	mov	r13, r31
    1c94:	0e c0       	rjmp	.+28     	; 0x1cb2 <Isb_App_Exec+0xfa4>
										eepAddr_Cfg10 = ISB_APP_DIGOUT_6_EEADDR_CFG10;
										eepAddr_Obj_3_Ctrl = ISB_APP_DIGOUT_6_OBJ_3_EEADDR_CTRL;
										eepAddr_Obj_3_Tov = ISB_APP_DIGOUT_6_OBJ_3_EEADDR_TOV;
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_6_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
    1c96:	ef e1       	ldi	r30, 0x1F	; 31
    1c98:	ee 2e       	mov	r14, r30
    1c9a:	e1 e0       	ldi	r30, 0x01	; 1
    1c9c:	fe 2e       	mov	r15, r30
    1c9e:	a0 e2       	ldi	r26, 0x20	; 32
    1ca0:	b1 e0       	ldi	r27, 0x01	; 1
    1ca2:	b9 8f       	std	Y+25, r27	; 0x19
    1ca4:	a8 8f       	std	Y+24, r26	; 0x18
    1ca6:	01 e2       	ldi	r16, 0x21	; 33
    1ca8:	11 e0       	ldi	r17, 0x01	; 1
    1caa:	72 e2       	ldi	r23, 0x22	; 34
    1cac:	c7 2e       	mov	r12, r23
    1cae:	71 e0       	ldi	r23, 0x01	; 1
    1cb0:	d7 2e       	mov	r13, r23
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_15_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
							#endif /* ISB_APP_DIGOUT_15 */
						}
						Isb_Ch[Ch].Ctrl = Isb_Ch_Ctrl_Get(Ch);
    1cb2:	82 2f       	mov	r24, r18
    1cb4:	0e 94 f5 05 	call	0xbea	; 0xbea <Isb_Ch_Ctrl_Get.2324>
    1cb8:	a8 2f       	mov	r26, r24
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	f5 01       	movw	r30, r10
    1cbe:	ee 0f       	add	r30, r30
    1cc0:	ff 1f       	adc	r31, r31
    1cc2:	ed 54       	subi	r30, 0x4D	; 77
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	b1 83       	std	Z+1, r27	; 0x01
    1cc8:	a0 83       	st	Z, r26
						if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED))
    1cca:	f2 01       	movw	r30, r4
    1ccc:	80 81       	ld	r24, Z
    1cce:	80 ff       	sbrs	r24, 0
    1cd0:	56 c0       	rjmp	.+172    	; 0x1d7e <Isb_App_Exec+0x1070>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1cd2:	e1 99       	sbic	0x1c, 1	; 28
    1cd4:	fe cf       	rjmp	.-4      	; 0x1cd2 <Isb_App_Exec+0xfc4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1cd6:	e2 0c       	add	r14, r2
    1cd8:	f3 1c       	adc	r15, r3
    1cda:	ff ba       	out	0x1f, r15	; 31
    1cdc:	ee ba       	out	0x1e, r14	; 30
#endif
    EECR |= (1 << EERE);
    1cde:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1ce0:	8d b3       	in	r24, 0x1d	; 29
						{
							Isb_App_DigOut[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg0);
    1ce2:	f3 01       	movw	r30, r6
    1ce4:	80 83       	st	Z, r24
							Isb_Obj[Obj_0].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Ctrl);
    1ce6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ce8:	6f 2f       	mov	r22, r31
    1cea:	70 e0       	ldi	r23, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1cec:	e1 99       	sbic	0x1c, 1	; 28
    1cee:	fe cf       	rjmp	.-4      	; 0x1cec <Isb_App_Exec+0xfde>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1cf0:	28 8d       	ldd	r18, Y+24	; 0x18
    1cf2:	39 8d       	ldd	r19, Y+25	; 0x19
    1cf4:	22 0d       	add	r18, r2
    1cf6:	33 1d       	adc	r19, r3
    1cf8:	3f bb       	out	0x1f, r19	; 31
    1cfa:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    1cfc:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1cfe:	8d b3       	in	r24, 0x1d	; 29
    1d00:	fb 01       	movw	r30, r22
    1d02:	53 e0       	ldi	r21, 0x03	; 3
    1d04:	ee 0f       	add	r30, r30
    1d06:	ff 1f       	adc	r31, r31
    1d08:	5a 95       	dec	r21
    1d0a:	e1 f7       	brne	.-8      	; 0x1d04 <Isb_App_Exec+0xff6>
    1d0c:	e6 0f       	add	r30, r22
    1d0e:	f7 1f       	adc	r31, r23
    1d10:	e5 5c       	subi	r30, 0xC5	; 197
    1d12:	fe 4f       	sbci	r31, 0xFE	; 254
    1d14:	80 83       	st	Z, r24
							Isb_Obj[Obj_0].Top = ISB_MSG_TOP_1BIT;
    1d16:	31 e0       	ldi	r19, 0x01	; 1
    1d18:	31 83       	std	Z+1, r19	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1d1a:	e1 99       	sbic	0x1c, 1	; 28
    1d1c:	fe cf       	rjmp	.-4      	; 0x1d1a <Isb_App_Exec+0x100c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1d1e:	02 0d       	add	r16, r2
    1d20:	13 1d       	adc	r17, r3
    1d22:	1f bb       	out	0x1f, r17	; 31
    1d24:	0e bb       	out	0x1e, r16	; 30
#endif
    EECR |= (1 << EERE);
    1d26:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1d28:	8d b3       	in	r24, 0x1d	; 29
							Isb_Obj[Obj_0].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Tov);
    1d2a:	9b 01       	movw	r18, r22
    1d2c:	43 e0       	ldi	r20, 0x03	; 3
    1d2e:	22 0f       	add	r18, r18
    1d30:	33 1f       	adc	r19, r19
    1d32:	4a 95       	dec	r20
    1d34:	e1 f7       	brne	.-8      	; 0x1d2e <Isb_App_Exec+0x1020>
    1d36:	26 0f       	add	r18, r22
    1d38:	37 1f       	adc	r19, r23
    1d3a:	f9 01       	movw	r30, r18
    1d3c:	e5 5c       	subi	r30, 0xC5	; 197
    1d3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d40:	82 83       	std	Z+2, r24	; 0x02
    1d42:	a6 01       	movw	r20, r12
    1d44:	42 0d       	add	r20, r2
    1d46:	53 1d       	adc	r21, r3
    1d48:	f9 01       	movw	r30, r18
    1d4a:	e2 5c       	subi	r30, 0xC2	; 194
    1d4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1d50:	e1 99       	sbic	0x1c, 1	; 28
    1d52:	fe cf       	rjmp	.-4      	; 0x1d50 <Isb_App_Exec+0x1042>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1d54:	5f bb       	out	0x1f, r21	; 31
    1d56:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
    1d58:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1d5a:	8d b3       	in	r24, 0x1d	; 29
							for (uint8_t i = 0; i < 5; i++)
							{
								Isb_Obj[Obj_0].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_0_InitValue + i));
    1d5c:	81 93       	st	Z+, r24
						{
							Isb_App_DigOut[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg0);
							Isb_Obj[Obj_0].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Ctrl);
							Isb_Obj[Obj_0].Top = ISB_MSG_TOP_1BIT;
							Isb_Obj[Obj_0].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Tov);
							for (uint8_t i = 0; i < 5; i++)
    1d5e:	9f 5f       	subi	r25, 0xFF	; 255
    1d60:	4f 5f       	subi	r20, 0xFF	; 255
    1d62:	5f 4f       	sbci	r21, 0xFF	; 255
    1d64:	95 30       	cpi	r25, 0x05	; 5
    1d66:	a1 f7       	brne	.-24     	; 0x1d50 <Isb_App_Exec+0x1042>
							{
								Isb_Obj[Obj_0].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_0_InitValue + i));
							}
							Isb_Obj[Obj_0].IsChanged = FALSE;
    1d68:	fb 01       	movw	r30, r22
    1d6a:	23 e0       	ldi	r18, 0x03	; 3
    1d6c:	ee 0f       	add	r30, r30
    1d6e:	ff 1f       	adc	r31, r31
    1d70:	2a 95       	dec	r18
    1d72:	e1 f7       	brne	.-8      	; 0x1d6c <Isb_App_Exec+0x105e>
    1d74:	e6 0f       	add	r30, r22
    1d76:	f7 1f       	adc	r31, r23
    1d78:	e5 5c       	subi	r30, 0xC5	; 197
    1d7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d7c:	10 86       	std	Z+8, r1	; 0x08
									Isb_Obj[Obj_3].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_3_InitValue + i));
								}
								Isb_Obj[Obj_3].IsChanged = FALSE;
							#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
						}
						Isb_Ch[Ch].Ctrl |= (1<<ISB_CH_CTRL_INITIALIZED);
    1d7e:	aa 0c       	add	r10, r10
    1d80:	bb 1c       	adc	r11, r11
    1d82:	43 eb       	ldi	r20, 0xB3	; 179
    1d84:	50 e0       	ldi	r21, 0x00	; 0
    1d86:	a4 0e       	add	r10, r20
    1d88:	b5 1e       	adc	r11, r21
    1d8a:	a0 64       	ori	r26, 0x40	; 64
    1d8c:	f5 01       	movw	r30, r10
    1d8e:	b1 83       	std	Z+1, r27	; 0x01
    1d90:	a0 83       	st	Z, r26
					}
					// Exec
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED))
    1d92:	d2 01       	movw	r26, r4
    1d94:	8c 91       	ld	r24, X
    1d96:	80 ff       	sbrs	r24, 0
    1d98:	69 c0       	rjmp	.+210    	; 0x1e6c <Isb_App_Exec+0x115e>
					{
						uint8_t Value = Isb_App_DigOut[AppIndex].Value;
						uint8_t IsChanged = Isb_App_DigOut[AppIndex].IsChanged;
    1d9a:	f3 01       	movw	r30, r6
    1d9c:	44 81       	ldd	r20, Z+4	; 0x04
									break;
							}
							Value = Isb_App_DigOut[AppIndex].LogicValue;
							IsChanged = Isb_App_DigOut[AppIndex].LogicIsChanged;
						#else /* ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION == TRUE */
							if (Value != Isb_Obj[Obj_0].Data[0])
    1d9e:	fd 81       	ldd	r31, Y+5	; 0x05
    1da0:	2f 2f       	mov	r18, r31
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	f9 01       	movw	r30, r18
    1da6:	83 e0       	ldi	r24, 0x03	; 3
    1da8:	ee 0f       	add	r30, r30
    1daa:	ff 1f       	adc	r31, r31
    1dac:	8a 95       	dec	r24
    1dae:	e1 f7       	brne	.-8      	; 0x1da8 <Isb_App_Exec+0x109a>
    1db0:	e2 0f       	add	r30, r18
    1db2:	f3 1f       	adc	r31, r19
    1db4:	e5 5c       	subi	r30, 0xC5	; 197
    1db6:	fe 4f       	sbci	r31, 0xFE	; 254
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	d3 01       	movw	r26, r6
    1dbc:	13 96       	adiw	r26, 0x03	; 3
    1dbe:	8c 91       	ld	r24, X
    1dc0:	89 13       	cpse	r24, r25
    1dc2:	41 e0       	ldi	r20, 0x01	; 1
							{
								Value = Isb_Obj[Obj_0].Data[0];
								IsChanged = TRUE;
							}
							Isb_Obj[Obj_0].IsChanged = FALSE;
    1dc4:	f9 01       	movw	r30, r18
    1dc6:	03 e0       	ldi	r16, 0x03	; 3
    1dc8:	ee 0f       	add	r30, r30
    1dca:	ff 1f       	adc	r31, r31
    1dcc:	0a 95       	dec	r16
    1dce:	e1 f7       	brne	.-8      	; 0x1dc8 <Isb_App_Exec+0x10ba>
    1dd0:	e2 0f       	add	r30, r18
    1dd2:	f3 1f       	adc	r31, r19
    1dd4:	e5 5c       	subi	r30, 0xC5	; 197
    1dd6:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd8:	10 86       	std	Z+8, r1	; 0x08
									// nachgeführten Zustand einstellen
									break;
							}
						#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
						// Ausgang
						Isb_App_DigOut[AppIndex].Value = Value;
    1dda:	f3 01       	movw	r30, r6
    1ddc:	93 83       	std	Z+3, r25	; 0x03
						Isb_App_DigOut[AppIndex].IsChanged = IsChanged;
    1dde:	44 83       	std	Z+4, r20	; 0x04
						uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigOut_Pin0_Array[AppIndex]);
    1de0:	f4 01       	movw	r30, r8
    1de2:	e4 55       	subi	r30, 0x54	; 84
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	64 91       	lpm	r22, Z+
						#if (ISB_APP_DIGOUT_DESTINATION_FEATURE_SSR == TRUE) | (ISB_APP_DIGOUT_FEATURE_RESULT == TRUE)
							uint8_t Pin1 = pgm_read_byte(&pgmIsb_App_DigOut_Pin1_Array[AppIndex]);
						#endif /* (ISB_APP_DIGOUT_DESTINATION_FEATURE_SSR == TRUE) | (ISB_APP_DIGOUT_FEATURE_RESULT == TRUE) */
						switch (Isb_App_DigOut[AppIndex].Cfg0 & ISB_APP_DIGOUT_CFG0_OPERATION_MASK)
    1de8:	d3 01       	movw	r26, r6
    1dea:	8c 91       	ld	r24, X
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	87 70       	andi	r24, 0x07	; 7
    1df0:	90 70       	andi	r25, 0x00	; 0
    1df2:	89 2b       	or	r24, r25
    1df4:	d9 f5       	brne	.+118    	; 0x1e6c <Isb_App_Exec+0x115e>
						{
							#if ISB_APP_DIGOUT_DESTINATION_FEATURE_RELAIS == TRUE
								case ISB_APP_DIGOUT_CFG0_OPERATION_STD:
									if (Isb_App_DigOut[AppIndex].IsChanged == TRUE)
    1df6:	41 30       	cpi	r20, 0x01	; 1
    1df8:	c9 f5       	brne	.+114    	; 0x1e6c <Isb_App_Exec+0x115e>
									{
										if (bit_is_set(Isb_App_DigOut[AppIndex].Value, 0))
    1dfa:	a4 01       	movw	r20, r8
    1dfc:	44 0f       	add	r20, r20
    1dfe:	55 1f       	adc	r21, r21
    1e00:	44 0f       	add	r20, r20
    1e02:	55 1f       	adc	r21, r21
    1e04:	48 0d       	add	r20, r8
    1e06:	59 1d       	adc	r21, r9
    1e08:	fa 01       	movw	r30, r20
    1e0a:	ea 5e       	subi	r30, 0xEA	; 234
    1e0c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e0e:	80 81       	ld	r24, Z
    1e10:	26 2f       	mov	r18, r22
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	80 ff       	sbrs	r24, 0
    1e16:	11 c0       	rjmp	.+34     	; 0x1e3a <Isb_App_Exec+0x112c>
										{
											uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
    1e18:	28 73       	andi	r18, 0x38	; 56
    1e1a:	30 70       	andi	r19, 0x00	; 0
    1e1c:	b3 e0       	ldi	r27, 0x03	; 3
    1e1e:	35 95       	asr	r19
    1e20:	27 95       	ror	r18
    1e22:	ba 95       	dec	r27
    1e24:	e1 f7       	brne	.-8      	; 0x1e1e <Isb_App_Exec+0x1110>
											uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
											if (Port != 0)
    1e26:	22 23       	and	r18, r18
    1e28:	f9 f0       	breq	.+62     	; 0x1e68 <Isb_App_Exec+0x115a>
									if (Isb_App_DigOut[AppIndex].IsChanged == TRUE)
									{
										if (bit_is_set(Isb_App_DigOut[AppIndex].Value, 0))
										{
											uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
											uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
    1e2a:	67 70       	andi	r22, 0x07	; 7
											if (Port != 0)
											{
												if (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN0_INVERTED))
    1e2c:	fa 01       	movw	r30, r20
    1e2e:	ed 5e       	subi	r30, 0xED	; 237
    1e30:	fe 4f       	sbci	r31, 0xFE	; 254
    1e32:	80 81       	ld	r24, Z
    1e34:	84 fd       	sbrc	r24, 4
    1e36:	11 c0       	rjmp	.+34     	; 0x1e5a <Isb_App_Exec+0x114c>
    1e38:	13 c0       	rjmp	.+38     	; 0x1e60 <Isb_App_Exec+0x1152>
												}
											}
										}
										else
										{
											uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
    1e3a:	28 73       	andi	r18, 0x38	; 56
    1e3c:	30 70       	andi	r19, 0x00	; 0
    1e3e:	a3 e0       	ldi	r26, 0x03	; 3
    1e40:	35 95       	asr	r19
    1e42:	27 95       	ror	r18
    1e44:	aa 95       	dec	r26
    1e46:	e1 f7       	brne	.-8      	; 0x1e40 <Isb_App_Exec+0x1132>
											uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
											if (Port != 0)
    1e48:	22 23       	and	r18, r18
    1e4a:	71 f0       	breq	.+28     	; 0x1e68 <Isb_App_Exec+0x115a>
											}
										}
										else
										{
											uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
											uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
    1e4c:	67 70       	andi	r22, 0x07	; 7
											if (Port != 0)
											{
												if (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN0_INVERTED))
    1e4e:	fa 01       	movw	r30, r20
    1e50:	ed 5e       	subi	r30, 0xED	; 237
    1e52:	fe 4f       	sbci	r31, 0xFE	; 254
    1e54:	80 81       	ld	r24, Z
    1e56:	84 fd       	sbrc	r24, 4
    1e58:	03 c0       	rjmp	.+6      	; 0x1e60 <Isb_App_Exec+0x1152>
												{
													Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_HIGH);
    1e5a:	82 2f       	mov	r24, r18
    1e5c:	43 e0       	ldi	r20, 0x03	; 3
    1e5e:	02 c0       	rjmp	.+4      	; 0x1e64 <Isb_App_Exec+0x1156>
												}
												else
												{
													Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_LOW);
    1e60:	82 2f       	mov	r24, r18
    1e62:	41 e0       	ldi	r20, 0x01	; 1
    1e64:	0e 94 d7 00 	call	0x1ae	; 0x1ae <Lib_Pin_Set>
												}
											}
										}
										Isb_App_DigOut[AppIndex].IsChanged = FALSE;
    1e68:	f3 01       	movw	r30, r6
    1e6a:	14 82       	std	Z+4, r1	; 0x04
    1e6c:	08 94       	sec
    1e6e:	81 1c       	adc	r8, r1
    1e70:	91 1c       	adc	r9, r1
    1e72:	25 e0       	ldi	r18, 0x05	; 5
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	62 0e       	add	r6, r18
    1e78:	73 1e       	adc	r7, r19
		#endif /* ISB_APP_DIGIN_MAX */

		#if defined(ISB_APP_DIGOUT_MAX)
			if (bit_is_set(Isb_App_DigOut_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
			{
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGOUT_MAX; AppIndex++)
    1e7a:	38 e0       	ldi	r19, 0x08	; 8
    1e7c:	83 16       	cp	r8, r19
    1e7e:	91 04       	cpc	r9, r1
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <Isb_App_Exec+0x1176>
    1e82:	73 ce       	rjmp	.-794    	; 0x1b6a <Isb_App_Exec+0xe5c>
								Isb_Obj[Obj_1].IsChanged = TRUE;
							}
						#endif /* ISB_APP_DIGOUT_FEATURE_RESULT == TRUE */
					}
				}
				Isb_App_DigOut_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    1e84:	80 91 ac 00 	lds	r24, 0x00AC
    1e88:	8e 7f       	andi	r24, 0xFE	; 254
    1e8a:	80 93 ac 00 	sts	0x00AC, r24
				}
				Isb_App_HotWater_Circulation_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
			}
		#endif /* ISB_APP_HOTWATER_CIRCULATION_MAX */

	}
    1e8e:	69 96       	adiw	r28, 0x19	; 25
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	1f 91       	pop	r17
    1ea0:	0f 91       	pop	r16
    1ea2:	ff 90       	pop	r15
    1ea4:	ef 90       	pop	r14
    1ea6:	df 90       	pop	r13
    1ea8:	cf 90       	pop	r12
    1eaa:	bf 90       	pop	r11
    1eac:	af 90       	pop	r10
    1eae:	9f 90       	pop	r9
    1eb0:	8f 90       	pop	r8
    1eb2:	7f 90       	pop	r7
    1eb4:	6f 90       	pop	r6
    1eb6:	5f 90       	pop	r5
    1eb8:	4f 90       	pop	r4
    1eba:	3f 90       	pop	r3
    1ebc:	2f 90       	pop	r2
    1ebe:	08 95       	ret

00001ec0 <Isb_Obj_getDlc>:
	uint8_t Isb_Obj_getDlc(uint8_t aTop)
	{

		uint8_t Dlc = 0;

		switch (aTop)
    1ec0:	85 30       	cpi	r24, 0x05	; 5
    1ec2:	71 f0       	breq	.+28     	; 0x1ee0 <Isb_Obj_getDlc+0x20>
    1ec4:	86 30       	cpi	r24, 0x06	; 6
    1ec6:	18 f4       	brcc	.+6      	; 0x1ece <Isb_Obj_getDlc+0xe>
    1ec8:	81 30       	cpi	r24, 0x01	; 1
    1eca:	41 f4       	brne	.+16     	; 0x1edc <Isb_Obj_getDlc+0x1c>
    1ecc:	05 c0       	rjmp	.+10     	; 0x1ed8 <Isb_Obj_getDlc+0x18>
    1ece:	86 30       	cpi	r24, 0x06	; 6
    1ed0:	49 f0       	breq	.+18     	; 0x1ee4 <Isb_Obj_getDlc+0x24>
    1ed2:	87 30       	cpi	r24, 0x07	; 7
    1ed4:	19 f4       	brne	.+6      	; 0x1edc <Isb_Obj_getDlc+0x1c>
    1ed6:	08 c0       	rjmp	.+16     	; 0x1ee8 <Isb_Obj_getDlc+0x28>
    1ed8:	84 e0       	ldi	r24, 0x04	; 4
    1eda:	08 95       	ret
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	08 95       	ret
    1ee0:	85 e0       	ldi	r24, 0x05	; 5
    1ee2:	08 95       	ret
//			case ISB_MSG_TOP_4BIT:
//				Dlc = 4;
//				break;
			case ISB_MSG_TOP_FLOAT:
				Dlc = 5;
				break;
    1ee4:	86 e0       	ldi	r24, 0x06	; 6
    1ee6:	08 95       	ret
			case ISB_MSG_TOP_TIME:
				Dlc = 6;
				break;
    1ee8:	88 e0       	ldi	r24, 0x08	; 8
//				break;
		}

		return Dlc;

	}
    1eea:	08 95       	ret

00001eec <Isb_Grp_Init>:
#ifndef ISB_GRP_C_
	#define ISB_GRP_C_



	void Isb_Grp_Init(void) {
    1eec:	80 91 a7 00 	lds	r24, 0x00A7
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	26 5d       	subi	r18, 0xD6	; 214
    1ef6:	3e 4f       	sbci	r19, 0xFE	; 254
    1ef8:	e4 e6       	ldi	r30, 0x64	; 100
    1efa:	f2 e0       	ldi	r31, 0x02	; 2
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1efc:	e1 99       	sbic	0x1c, 1	; 28
    1efe:	fe cf       	rjmp	.-4      	; 0x1efc <Isb_Grp_Init+0x10>
    1f00:	22 50       	subi	r18, 0x02	; 2
    1f02:	30 40       	sbci	r19, 0x00	; 0
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1f04:	3f bb       	out	0x1f, r19	; 31
    1f06:	2e bb       	out	0x1e, r18	; 30
    1f08:	2e 5f       	subi	r18, 0xFE	; 254
    1f0a:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
    EECR |= (1 << EERE);
    1f0c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1f0e:	9d b3       	in	r25, 0x1d	; 29
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1f10:	e1 99       	sbic	0x1c, 1	; 28
    1f12:	fe cf       	rjmp	.-4      	; 0x1f10 <Isb_Grp_Init+0x24>
    1f14:	21 50       	subi	r18, 0x01	; 1
    1f16:	30 40       	sbci	r19, 0x00	; 0
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1f18:	3f bb       	out	0x1f, r19	; 31
    1f1a:	2e bb       	out	0x1e, r18	; 30
    1f1c:	2f 5f       	subi	r18, 0xFF	; 255
    1f1e:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
    EECR |= (1 << EERE);
    1f20:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1f22:	8d b3       	in	r24, 0x1d	; 29
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
			Isb_Grp[GrpIndex].Id = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3));
			Isb_Grp[GrpIndex].Id |= lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 1)) << 8;
    1f24:	58 2f       	mov	r21, r24
    1f26:	40 e0       	ldi	r20, 0x00	; 0
    1f28:	89 2f       	mov	r24, r25
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	84 2b       	or	r24, r20
    1f2e:	95 2b       	or	r25, r21
    1f30:	91 83       	std	Z+1, r25	; 0x01
    1f32:	80 83       	st	Z, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1f34:	e1 99       	sbic	0x1c, 1	; 28
    1f36:	fe cf       	rjmp	.-4      	; 0x1f34 <Isb_Grp_Init+0x48>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1f38:	3f bb       	out	0x1f, r19	; 31
    1f3a:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    1f3c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1f3e:	8d b3       	in	r24, 0x1d	; 29
			Isb_Grp[GrpIndex].Obj = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 2));
    1f40:	82 83       	std	Z+2, r24	; 0x02
    1f42:	2d 5f       	subi	r18, 0xFD	; 253
    1f44:	3f 4f       	sbci	r19, 0xFF	; 255
    1f46:	33 96       	adiw	r30, 0x03	; 3
	#define ISB_GRP_C_



	void Isb_Grp_Init(void) {
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    1f48:	82 e0       	ldi	r24, 0x02	; 2
    1f4a:	e4 3c       	cpi	r30, 0xC4	; 196
    1f4c:	f8 07       	cpc	r31, r24
    1f4e:	b1 f6       	brne	.-84     	; 0x1efc <Isb_Grp_Init+0x10>
			Isb_Grp[GrpIndex].Id = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3));
			Isb_Grp[GrpIndex].Id |= lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 1)) << 8;
			Isb_Grp[GrpIndex].Obj = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 2));
		}
	}
    1f50:	08 95       	ret

00001f52 <Node_Reboot>:
	#include "./../lib/isb_obj.c"
	#include "./../lib/isb_grp.c"



	void Node_Reboot(void) {
    1f52:	ff cf       	rjmp	.-2      	; 0x1f52 <Node_Reboot>

00001f54 <Isb_SendMsg>:
		while (1) ;
	}



	void Isb_SendMsg(Isb_Msg_t * aMsg) {
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	ec 01       	movw	r28, r24
		#endif /* ISB_INF_USART0 == 1 */
		#if ISB_INF_USART1 == 1
			Isb_Inf_Usart_Tx(1, aMsg);
		#endif /* ISB_INF_USART1 == 1 */
		#if ISB_INF_CAN0 == 1
			Isb_Inf_Can_Tx(0, aMsg);
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	be 01       	movw	r22, r28
    1f5e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <Isb_Inf_Can_Tx>
			Isb_Inf_Can_Tx(1, aMsg);
		#endif /* ISB_INF_CAN1 == 1 */
		#if ISB_INF_CAN2 == 1
			Isb_Inf_Can_Tx(2, aMsg);
		#endif /* ISB_INF_CAN2 == 1 */
		if ((aMsg->Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_MULTICAST) {
    1f62:	88 81       	ld	r24, Y
    1f64:	80 73       	andi	r24, 0x30	; 48
    1f66:	80 32       	cpi	r24, 0x20	; 32
    1f68:	39 f4       	brne	.+14     	; 0x1f78 <Isb_SendMsg+0x24>
			if (Error == 0) {
    1f6a:	80 91 a9 00 	lds	r24, 0x00A9
    1f6e:	88 23       	and	r24, r24
    1f70:	19 f4       	brne	.+6      	; 0x1f78 <Isb_SendMsg+0x24>
				Isb_Obj_Rx(aMsg);
    1f72:	ce 01       	movw	r24, r28
    1f74:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <Isb_Obj_Rx>
			}
		}
	}
    1f78:	df 91       	pop	r29
    1f7a:	cf 91       	pop	r28
    1f7c:	08 95       	ret

00001f7e <Isb_Obj_Rx>:
	}



	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg)
	{
    1f7e:	2f 92       	push	r2
    1f80:	3f 92       	push	r3
    1f82:	4f 92       	push	r4
    1f84:	5f 92       	push	r5
    1f86:	6f 92       	push	r6
    1f88:	7f 92       	push	r7
    1f8a:	8f 92       	push	r8
    1f8c:	9f 92       	push	r9
    1f8e:	af 92       	push	r10
    1f90:	bf 92       	push	r11
    1f92:	cf 92       	push	r12
    1f94:	df 92       	push	r13
    1f96:	ef 92       	push	r14
    1f98:	ff 92       	push	r15
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	2d 97       	sbiw	r28, 0x0d	; 13
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	5c 01       	movw	r10, r24
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ))
											{
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
												TxMsg.DestId = aIsb_Msg->DestId;
												TxMsg.SourceId = Isb_Node_Id;
    1fb4:	20 90 a5 00 	lds	r2, 0x00A5
    1fb8:	30 90 a6 00 	lds	r3, 0x00A6
    1fbc:	04 e6       	ldi	r16, 0x64	; 100
    1fbe:	40 2e       	mov	r4, r16
    1fc0:	02 e0       	ldi	r16, 0x02	; 2
    1fc2:	50 2e       	mov	r5, r16

	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg)
	{
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
		{
			if ((aIsb_Msg->DestId == Isb_Grp[GrpIndex].Id) & (aIsb_Msg->DestId != 0))
    1fc4:	f5 01       	movw	r30, r10
    1fc6:	21 81       	ldd	r18, Z+1	; 0x01
    1fc8:	32 81       	ldd	r19, Z+2	; 0x02
    1fca:	f2 01       	movw	r30, r4
    1fcc:	80 81       	ld	r24, Z
    1fce:	91 81       	ldd	r25, Z+1	; 0x01
    1fd0:	28 17       	cp	r18, r24
    1fd2:	39 07       	cpc	r19, r25
    1fd4:	09 f0       	breq	.+2      	; 0x1fd8 <Isb_Obj_Rx+0x5a>
    1fd6:	f0 c0       	rjmp	.+480    	; 0x21b8 <Isb_Obj_Rx+0x23a>
    1fd8:	23 2b       	or	r18, r19
    1fda:	09 f4       	brne	.+2      	; 0x1fde <Isb_Obj_Rx+0x60>
    1fdc:	ed c0       	rjmp	.+474    	; 0x21b8 <Isb_Obj_Rx+0x23a>
    1fde:	1b e3       	ldi	r17, 0x3B	; 59
    1fe0:	e1 2e       	mov	r14, r17
    1fe2:	11 e0       	ldi	r17, 0x01	; 1
    1fe4:	f1 2e       	mov	r15, r17
    1fe6:	00 e0       	ldi	r16, 0x00	; 0
    1fe8:	10 e0       	ldi	r17, 0x00	; 0
					{
//						uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_Ch_Array[ObjIndex]);
//						uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_Obj_Array[ObjIndex]);
// TODO:
uint8_t Obj = ObjIndex;
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED))
    1fea:	68 01       	movw	r12, r16
    1fec:	b3 e0       	ldi	r27, 0x03	; 3
    1fee:	cc 0c       	add	r12, r12
    1ff0:	dd 1c       	adc	r13, r13
    1ff2:	ba 95       	dec	r27
    1ff4:	e1 f7       	brne	.-8      	; 0x1fee <Isb_Obj_Rx+0x70>
    1ff6:	c0 0e       	add	r12, r16
    1ff8:	d1 1e       	adc	r13, r17
    1ffa:	2b e3       	ldi	r18, 0x3B	; 59
    1ffc:	31 e0       	ldi	r19, 0x01	; 1
    1ffe:	c2 0e       	add	r12, r18
    2000:	d3 1e       	adc	r13, r19
    2002:	f6 01       	movw	r30, r12
    2004:	80 81       	ld	r24, Z
    2006:	80 ff       	sbrs	r24, 0
    2008:	cd c0       	rjmp	.+410    	; 0x21a4 <Isb_Obj_Rx+0x226>
						{
							if (Obj == Isb_Grp[GrpIndex].Obj)
    200a:	f2 01       	movw	r30, r4
    200c:	82 81       	ldd	r24, Z+2	; 0x02
    200e:	08 17       	cp	r16, r24
    2010:	09 f0       	breq	.+2      	; 0x2014 <Isb_Obj_Rx+0x96>
    2012:	c8 c0       	rjmp	.+400    	; 0x21a4 <Isb_Obj_Rx+0x226>
							{
								uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
    2014:	f7 01       	movw	r30, r14
    2016:	21 81       	ldd	r18, Z+1	; 0x01
	uint8_t Isb_Obj_getDlc(uint8_t aTop)
	{

		uint8_t Dlc = 0;

		switch (aTop)
    2018:	25 30       	cpi	r18, 0x05	; 5
    201a:	69 f0       	breq	.+26     	; 0x2036 <Isb_Obj_Rx+0xb8>
    201c:	26 30       	cpi	r18, 0x06	; 6
    201e:	18 f4       	brcc	.+6      	; 0x2026 <Isb_Obj_Rx+0xa8>
    2020:	21 30       	cpi	r18, 0x01	; 1
    2022:	29 f4       	brne	.+10     	; 0x202e <Isb_Obj_Rx+0xb0>
    2024:	06 c0       	rjmp	.+12     	; 0x2032 <Isb_Obj_Rx+0xb4>
    2026:	26 30       	cpi	r18, 0x06	; 6
    2028:	41 f0       	breq	.+16     	; 0x203a <Isb_Obj_Rx+0xbc>
    202a:	27 30       	cpi	r18, 0x07	; 7
    202c:	41 f0       	breq	.+16     	; 0x203e <Isb_Obj_Rx+0xc0>
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	07 c0       	rjmp	.+14     	; 0x2040 <Isb_Obj_Rx+0xc2>
    2032:	44 e0       	ldi	r20, 0x04	; 4
    2034:	05 c0       	rjmp	.+10     	; 0x2040 <Isb_Obj_Rx+0xc2>
    2036:	45 e0       	ldi	r20, 0x05	; 5
    2038:	03 c0       	rjmp	.+6      	; 0x2040 <Isb_Obj_Rx+0xc2>
    203a:	46 e0       	ldi	r20, 0x06	; 6
    203c:	01 c0       	rjmp	.+2      	; 0x2040 <Isb_Obj_Rx+0xc2>
    203e:	48 e0       	ldi	r20, 0x08	; 8
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED))
						{
							if (Obj == Isb_Grp[GrpIndex].Obj)
							{
								uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
								if ((aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK) == Dlc)
    2040:	f5 01       	movw	r30, r10
    2042:	80 81       	ld	r24, Z
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	8f 70       	andi	r24, 0x0F	; 15
    2048:	90 70       	andi	r25, 0x00	; 0
    204a:	84 2e       	mov	r8, r20
    204c:	99 24       	eor	r9, r9
    204e:	88 15       	cp	r24, r8
    2050:	99 05       	cpc	r25, r9
    2052:	09 f0       	breq	.+2      	; 0x2056 <Isb_Obj_Rx+0xd8>
    2054:	a7 c0       	rjmp	.+334    	; 0x21a4 <Isb_Obj_Rx+0x226>
								{
									if (aIsb_Msg->Data[0] == Isb_Obj[ObjIndex].Top)
    2056:	85 81       	ldd	r24, Z+5	; 0x05
    2058:	82 17       	cp	r24, r18
    205a:	09 f0       	breq	.+2      	; 0x205e <Isb_Obj_Rx+0xe0>
    205c:	a3 c0       	rjmp	.+326    	; 0x21a4 <Isb_Obj_Rx+0x226>
									{
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ)
    205e:	86 81       	ldd	r24, Z+6	; 0x06
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	83 70       	andi	r24, 0x03	; 3
    2064:	90 70       	andi	r25, 0x00	; 0
    2066:	89 2b       	or	r24, r25
    2068:	b9 f5       	brne	.+110    	; 0x20d8 <Isb_Obj_Rx+0x15a>
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ))
    206a:	f6 01       	movw	r30, r12
    206c:	80 81       	ld	r24, Z
    206e:	81 ff       	sbrs	r24, 1
    2070:	33 c0       	rjmp	.+102    	; 0x20d8 <Isb_Obj_Rx+0x15a>
											{
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
												TxMsg.DestId = aIsb_Msg->DestId;
    2072:	f5 01       	movw	r30, r10
    2074:	61 80       	ldd	r6, Z+1	; 0x01
    2076:	72 80       	ldd	r7, Z+2	; 0x02
												TxMsg.SourceId = Isb_Node_Id;
												TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
    2078:	2e 83       	std	Y+6, r18	; 0x06
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
    207a:	f1 e0       	ldi	r31, 0x01	; 1
    207c:	ff 83       	std	Y+7, r31	; 0x07
												TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
    207e:	f7 01       	movw	r30, r14
    2080:	82 81       	ldd	r24, Z+2	; 0x02
    2082:	88 87       	std	Y+8, r24	; 0x08
    2084:	90 e0       	ldi	r25, 0x00	; 0
												for (uint8_t i = 0; i < (Dlc - 3); i++)
    2086:	b4 01       	movw	r22, r8
    2088:	63 50       	subi	r22, 0x03	; 3
    208a:	70 40       	sbci	r23, 0x00	; 0
												{
													TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
    208c:	98 01       	movw	r18, r16
    208e:	a3 e0       	ldi	r26, 0x03	; 3
    2090:	22 0f       	add	r18, r18
    2092:	33 1f       	adc	r19, r19
    2094:	aa 95       	dec	r26
    2096:	e1 f7       	brne	.-8      	; 0x2090 <Isb_Obj_Rx+0x112>
    2098:	20 0f       	add	r18, r16
    209a:	31 1f       	adc	r19, r17
    209c:	25 5c       	subi	r18, 0xC5	; 197
    209e:	3e 4f       	sbci	r19, 0xFE	; 254
    20a0:	0c c0       	rjmp	.+24     	; 0x20ba <Isb_Obj_Rx+0x13c>
    20a2:	e9 e0       	ldi	r30, 0x09	; 9
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	ec 0f       	add	r30, r28
    20a8:	fd 1f       	adc	r31, r29
    20aa:	ea 0f       	add	r30, r26
    20ac:	fb 1f       	adc	r31, r27
    20ae:	a2 0f       	add	r26, r18
    20b0:	b3 1f       	adc	r27, r19
    20b2:	13 96       	adiw	r26, 0x03	; 3
    20b4:	8c 91       	ld	r24, X
    20b6:	80 83       	st	Z, r24
												TxMsg.DestId = aIsb_Msg->DestId;
												TxMsg.SourceId = Isb_Node_Id;
												TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
												TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
												for (uint8_t i = 0; i < (Dlc - 3); i++)
    20b8:	9f 5f       	subi	r25, 0xFF	; 255
    20ba:	a9 2f       	mov	r26, r25
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	a6 17       	cp	r26, r22
    20c0:	b7 07       	cpc	r27, r23
    20c2:	7c f3       	brlt	.-34     	; 0x20a2 <Isb_Obj_Rx+0x124>
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ))
											{
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
												TxMsg.DestId = aIsb_Msg->DestId;
												TxMsg.SourceId = Isb_Node_Id;
    20c4:	3d 82       	std	Y+5, r3	; 0x05
    20c6:	2c 82       	std	Y+4, r2	; 0x04
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ))
											{
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
												TxMsg.DestId = aIsb_Msg->DestId;
    20c8:	7b 82       	std	Y+3, r7	; 0x03
    20ca:	6a 82       	std	Y+2, r6	; 0x02
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ)
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ))
											{
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
    20cc:	40 62       	ori	r20, 0x20	; 32
    20ce:	49 83       	std	Y+1, r20	; 0x01
												TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
												for (uint8_t i = 0; i < (Dlc - 3); i++)
												{
													TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
												}
												Isb_SendMsg(&TxMsg);
    20d0:	ce 01       	movw	r24, r28
    20d2:	01 96       	adiw	r24, 0x01	; 1
    20d4:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <Isb_SendMsg>
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_ANSWER)
    20d8:	f5 01       	movw	r30, r10
    20da:	86 81       	ldd	r24, Z+6	; 0x06
    20dc:	83 70       	andi	r24, 0x03	; 3
    20de:	81 30       	cpi	r24, 0x01	; 1
    20e0:	59 f5       	brne	.+86     	; 0x2138 <Isb_Obj_Rx+0x1ba>
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_UPDATE))
    20e2:	f6 01       	movw	r30, r12
    20e4:	80 81       	ld	r24, Z
    20e6:	84 ff       	sbrs	r24, 4
    20e8:	27 c0       	rjmp	.+78     	; 0x2138 <Isb_Obj_Rx+0x1ba>
											{
												if (aIsb_Msg->Data[2] == Isb_Obj[ObjIndex].Tov)
    20ea:	f5 01       	movw	r30, r10
    20ec:	97 81       	ldd	r25, Z+7	; 0x07
    20ee:	f7 01       	movw	r30, r14
    20f0:	82 81       	ldd	r24, Z+2	; 0x02
    20f2:	98 17       	cp	r25, r24
    20f4:	09 f5       	brne	.+66     	; 0x2138 <Isb_Obj_Rx+0x1ba>
    20f6:	90 e0       	ldi	r25, 0x00	; 0
												{
													for (uint8_t i = 0; i < (Dlc - 3); i++)
    20f8:	a4 01       	movw	r20, r8
    20fa:	43 50       	subi	r20, 0x03	; 3
    20fc:	50 40       	sbci	r21, 0x00	; 0
													{
														Isb_Obj[ObjIndex].Data[i] = aIsb_Msg->Data[i + 3];
    20fe:	98 01       	movw	r18, r16
    2100:	f3 e0       	ldi	r31, 0x03	; 3
    2102:	22 0f       	add	r18, r18
    2104:	33 1f       	adc	r19, r19
    2106:	fa 95       	dec	r31
    2108:	e1 f7       	brne	.-8      	; 0x2102 <Isb_Obj_Rx+0x184>
    210a:	20 0f       	add	r18, r16
    210c:	31 1f       	adc	r19, r17
    210e:	25 5c       	subi	r18, 0xC5	; 197
    2110:	3e 4f       	sbci	r19, 0xFE	; 254
    2112:	09 c0       	rjmp	.+18     	; 0x2126 <Isb_Obj_Rx+0x1a8>
    2114:	f9 01       	movw	r30, r18
    2116:	ea 0f       	add	r30, r26
    2118:	fb 1f       	adc	r31, r27
    211a:	aa 0d       	add	r26, r10
    211c:	bb 1d       	adc	r27, r11
    211e:	18 96       	adiw	r26, 0x08	; 8
    2120:	8c 91       	ld	r24, X
    2122:	83 83       	std	Z+3, r24	; 0x03
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_UPDATE))
											{
												if (aIsb_Msg->Data[2] == Isb_Obj[ObjIndex].Tov)
												{
													for (uint8_t i = 0; i < (Dlc - 3); i++)
    2124:	9f 5f       	subi	r25, 0xFF	; 255
    2126:	a9 2f       	mov	r26, r25
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	a4 17       	cp	r26, r20
    212c:	b5 07       	cpc	r27, r21
    212e:	94 f3       	brlt	.-28     	; 0x2114 <Isb_Obj_Rx+0x196>
													{
														Isb_Obj[ObjIndex].Data[i] = aIsb_Msg->Data[i + 3];
													}
													Isb_Obj[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    2130:	f7 01       	movw	r30, r14
    2132:	80 81       	ld	r24, Z
    2134:	8f 7d       	andi	r24, 0xDF	; 223
    2136:	80 83       	st	Z, r24
												}
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE)
    2138:	f5 01       	movw	r30, r10
    213a:	86 81       	ldd	r24, Z+6	; 0x06
    213c:	83 70       	andi	r24, 0x03	; 3
    213e:	82 30       	cpi	r24, 0x02	; 2
    2140:	89 f5       	brne	.+98     	; 0x21a4 <Isb_Obj_Rx+0x226>
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE))
    2142:	f6 01       	movw	r30, r12
    2144:	80 81       	ld	r24, Z
    2146:	82 ff       	sbrs	r24, 2
    2148:	2d c0       	rjmp	.+90     	; 0x21a4 <Isb_Obj_Rx+0x226>
											{
												if (aIsb_Msg->Data[2] == Isb_Obj[ObjIndex].Tov)
    214a:	f5 01       	movw	r30, r10
    214c:	97 81       	ldd	r25, Z+7	; 0x07
    214e:	f7 01       	movw	r30, r14
    2150:	82 81       	ldd	r24, Z+2	; 0x02
    2152:	98 17       	cp	r25, r24
    2154:	39 f5       	brne	.+78     	; 0x21a4 <Isb_Obj_Rx+0x226>
    2156:	50 e0       	ldi	r21, 0x00	; 0
												{
													for (uint8_t i = 0; i < (Dlc - 3); i++)
    2158:	b4 01       	movw	r22, r8
    215a:	63 50       	subi	r22, 0x03	; 3
    215c:	70 40       	sbci	r23, 0x00	; 0
													{
														if (Isb_Obj[ObjIndex].Data[i] != aIsb_Msg->Data[i + 3])
    215e:	98 01       	movw	r18, r16
    2160:	e3 e0       	ldi	r30, 0x03	; 3
    2162:	22 0f       	add	r18, r18
    2164:	33 1f       	adc	r19, r19
    2166:	ea 95       	dec	r30
    2168:	e1 f7       	brne	.-8      	; 0x2162 <Isb_Obj_Rx+0x1e4>
    216a:	20 0f       	add	r18, r16
    216c:	31 1f       	adc	r19, r17
    216e:	25 5c       	subi	r18, 0xC5	; 197
    2170:	3e 4f       	sbci	r19, 0xFE	; 254
    2172:	0f c0       	rjmp	.+30     	; 0x2192 <Isb_Obj_Rx+0x214>
    2174:	f5 01       	movw	r30, r10
    2176:	e8 0f       	add	r30, r24
    2178:	f9 1f       	adc	r31, r25
    217a:	40 85       	ldd	r20, Z+8	; 0x08
    217c:	f9 01       	movw	r30, r18
    217e:	e8 0f       	add	r30, r24
    2180:	f9 1f       	adc	r31, r25
    2182:	83 81       	ldd	r24, Z+3	; 0x03
    2184:	84 17       	cp	r24, r20
    2186:	21 f0       	breq	.+8      	; 0x2190 <Isb_Obj_Rx+0x212>
														{
															Isb_Obj[ObjIndex].Data[i] = aIsb_Msg->Data[i + 3];
    2188:	43 83       	std	Z+3, r20	; 0x03
															Isb_Obj[ObjIndex].IsChanged = TRUE;
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	f7 01       	movw	r30, r14
    218e:	80 87       	std	Z+8, r24	; 0x08
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE))
											{
												if (aIsb_Msg->Data[2] == Isb_Obj[ObjIndex].Tov)
												{
													for (uint8_t i = 0; i < (Dlc - 3); i++)
    2190:	5f 5f       	subi	r21, 0xFF	; 255
    2192:	85 2f       	mov	r24, r21
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	86 17       	cp	r24, r22
    2198:	97 07       	cpc	r25, r23
    219a:	64 f3       	brlt	.-40     	; 0x2174 <Isb_Obj_Rx+0x1f6>
														{
															Isb_Obj[ObjIndex].Data[i] = aIsb_Msg->Data[i + 3];
															Isb_Obj[ObjIndex].IsChanged = TRUE;
														}
													}
													Isb_Obj[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    219c:	f7 01       	movw	r30, r14
    219e:	80 81       	ld	r24, Z
    21a0:	8f 7d       	andi	r24, 0xDF	; 223
    21a2:	80 83       	st	Z, r24
    21a4:	0f 5f       	subi	r16, 0xFF	; 255
    21a6:	1f 4f       	sbci	r17, 0xFF	; 255
    21a8:	29 e0       	ldi	r18, 0x09	; 9
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	e2 0e       	add	r14, r18
    21ae:	f3 1e       	adc	r15, r19
		{
			if ((aIsb_Msg->DestId == Isb_Grp[GrpIndex].Id) & (aIsb_Msg->DestId != 0))
			{

				#if defined(ISB_OBJ_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_MAX; ObjIndex++)
    21b0:	00 32       	cpi	r16, 0x20	; 32
    21b2:	11 05       	cpc	r17, r1
    21b4:	09 f0       	breq	.+2      	; 0x21b8 <Isb_Obj_Rx+0x23a>
    21b6:	19 cf       	rjmp	.-462    	; 0x1fea <Isb_Obj_Rx+0x6c>
    21b8:	83 e0       	ldi	r24, 0x03	; 3
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	48 0e       	add	r4, r24
    21be:	59 1e       	adc	r5, r25



	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg)
	{
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
    21c0:	94 ec       	ldi	r25, 0xC4	; 196
    21c2:	49 16       	cp	r4, r25
    21c4:	92 e0       	ldi	r25, 0x02	; 2
    21c6:	59 06       	cpc	r5, r25
    21c8:	09 f0       	breq	.+2      	; 0x21cc <Isb_Obj_Rx+0x24e>
    21ca:	fc ce       	rjmp	.-520    	; 0x1fc4 <Isb_Obj_Rx+0x46>
					}
				#endif /* ISB_OBJ_MAX */

			}
		}
	}
    21cc:	2d 96       	adiw	r28, 0x0d	; 13
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	de bf       	out	0x3e, r29	; 62
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	1f 91       	pop	r17
    21de:	0f 91       	pop	r16
    21e0:	ff 90       	pop	r15
    21e2:	ef 90       	pop	r14
    21e4:	df 90       	pop	r13
    21e6:	cf 90       	pop	r12
    21e8:	bf 90       	pop	r11
    21ea:	af 90       	pop	r10
    21ec:	9f 90       	pop	r9
    21ee:	8f 90       	pop	r8
    21f0:	7f 90       	pop	r7
    21f2:	6f 90       	pop	r6
    21f4:	5f 90       	pop	r5
    21f6:	4f 90       	pop	r4
    21f8:	3f 90       	pop	r3
    21fa:	2f 90       	pop	r2
    21fc:	08 95       	ret

000021fe <Isb_Obj_Exec>:
	#define ISB_OBJ_C_



	void Isb_Obj_Exec(void)
	{
    21fe:	2f 92       	push	r2
    2200:	3f 92       	push	r3
    2202:	4f 92       	push	r4
    2204:	5f 92       	push	r5
    2206:	6f 92       	push	r6
    2208:	7f 92       	push	r7
    220a:	8f 92       	push	r8
    220c:	9f 92       	push	r9
    220e:	af 92       	push	r10
    2210:	bf 92       	push	r11
    2212:	cf 92       	push	r12
    2214:	df 92       	push	r13
    2216:	ef 92       	push	r14
    2218:	ff 92       	push	r15
    221a:	0f 93       	push	r16
    221c:	1f 93       	push	r17
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	2d 97       	sbiw	r28, 0x0d	; 13
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61

		#if defined(ISB_OBJ_MAX)
		if (bit_is_set(Isb_Obj_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
    2232:	80 91 aa 00 	lds	r24, 0x00AA
    2236:	80 ff       	sbrs	r24, 0
    2238:	fd c0       	rjmp	.+506    	; 0x2434 <Isb_Obj_Exec+0x236>
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
    223a:	80 90 a5 00 	lds	r8, 0x00A5
    223e:	90 90 a6 00 	lds	r9, 0x00A6
    2242:	0b e3       	ldi	r16, 0x3B	; 59
    2244:	c0 2e       	mov	r12, r16
    2246:	01 e0       	ldi	r16, 0x01	; 1
    2248:	d0 2e       	mov	r13, r16
    224a:	ee 24       	eor	r14, r14
    224c:	ff 24       	eor	r15, r15
									TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
									TxMsg.Data[1] = ISB_MSG_CTRL_CMD_READ;
									TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
									for (uint8_t i = 0; i < (Dlc - 3); i++)
									{
										TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
    224e:	19 e0       	ldi	r17, 0x09	; 9
    2250:	21 2e       	mov	r2, r17
    2252:	31 2c       	mov	r3, r1
    2254:	2c 0e       	add	r2, r28
    2256:	3d 1e       	adc	r3, r29
									}
									Isb_SendMsg(&TxMsg);
    2258:	2e 01       	movw	r4, r28
    225a:	08 94       	sec
    225c:	41 1c       	adc	r4, r1
    225e:	51 1c       	adc	r5, r1
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
										TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
										TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    2260:	b2 e0       	ldi	r27, 0x02	; 2
    2262:	6b 2e       	mov	r6, r27
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
    2264:	7e 2c       	mov	r7, r14
		#if defined(ISB_OBJ_MAX)
		if (bit_is_set(Isb_Obj_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
		{
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_MAX; ObjIndex++)
			{
				uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_Ch_Array[ObjIndex]);
    2266:	f7 01       	movw	r30, r14
    2268:	ec 5a       	subi	r30, 0xAC	; 172
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	e4 91       	lpm	r30, Z+
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED))
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	ee 0f       	add	r30, r30
    2272:	ff 1f       	adc	r31, r31
    2274:	ed 54       	subi	r30, 0x4D	; 77
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 81       	ld	r24, Z
    227a:	80 ff       	sbrs	r24, 0
    227c:	ca c0       	rjmp	.+404    	; 0x2412 <Isb_Obj_Exec+0x214>
				{
					if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED))
    227e:	87 01       	movw	r16, r14
    2280:	e3 e0       	ldi	r30, 0x03	; 3
    2282:	00 0f       	add	r16, r16
    2284:	11 1f       	adc	r17, r17
    2286:	ea 95       	dec	r30
    2288:	e1 f7       	brne	.-8      	; 0x2282 <Isb_Obj_Exec+0x84>
    228a:	0e 0d       	add	r16, r14
    228c:	1f 1d       	adc	r17, r15
    228e:	05 5c       	subi	r16, 0xC5	; 197
    2290:	1e 4f       	sbci	r17, 0xFE	; 254
    2292:	f8 01       	movw	r30, r16
    2294:	80 81       	ld	r24, Z
    2296:	80 ff       	sbrs	r24, 0
    2298:	bc c0       	rjmp	.+376    	; 0x2412 <Isb_Obj_Exec+0x214>
					{
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND))
    229a:	80 81       	ld	r24, Z
    229c:	83 ff       	sbrs	r24, 3
    229e:	5c c0       	rjmp	.+184    	; 0x2358 <Isb_Obj_Exec+0x15a>
						{
							if (Isb_Obj[ObjIndex].IsChanged == TRUE)
    22a0:	f6 01       	movw	r30, r12
    22a2:	80 85       	ldd	r24, Z+8	; 0x08
    22a4:	81 30       	cpi	r24, 0x01	; 1
    22a6:	09 f0       	breq	.+2      	; 0x22aa <Isb_Obj_Exec+0xac>
    22a8:	57 c0       	rjmp	.+174    	; 0x2358 <Isb_Obj_Exec+0x15a>
    22aa:	e4 e6       	ldi	r30, 0x64	; 100
    22ac:	f2 e0       	ldi	r31, 0x02	; 2
								for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
								{
//									uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_Obj_Array[ObjIndex]);
// TODO:
uint8_t Obj = ObjIndex;
									if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
    22ae:	a0 80       	ld	r10, Z
    22b0:	b1 80       	ldd	r11, Z+1	; 0x01
    22b2:	82 81       	ldd	r24, Z+2	; 0x02
    22b4:	87 15       	cp	r24, r7
    22b6:	09 f0       	breq	.+2      	; 0x22ba <Isb_Obj_Exec+0xbc>
    22b8:	47 c0       	rjmp	.+142    	; 0x2348 <Isb_Obj_Exec+0x14a>
    22ba:	a1 14       	cp	r10, r1
    22bc:	b1 04       	cpc	r11, r1
    22be:	09 f4       	brne	.+2      	; 0x22c2 <Isb_Obj_Exec+0xc4>
    22c0:	43 c0       	rjmp	.+134    	; 0x2348 <Isb_Obj_Exec+0x14a>
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
    22c2:	f6 01       	movw	r30, r12
    22c4:	81 81       	ldd	r24, Z+1	; 0x01
	uint8_t Isb_Obj_getDlc(uint8_t aTop)
	{

		uint8_t Dlc = 0;

		switch (aTop)
    22c6:	85 30       	cpi	r24, 0x05	; 5
    22c8:	69 f0       	breq	.+26     	; 0x22e4 <Isb_Obj_Exec+0xe6>
    22ca:	86 30       	cpi	r24, 0x06	; 6
    22cc:	18 f4       	brcc	.+6      	; 0x22d4 <Isb_Obj_Exec+0xd6>
    22ce:	81 30       	cpi	r24, 0x01	; 1
    22d0:	29 f4       	brne	.+10     	; 0x22dc <Isb_Obj_Exec+0xde>
    22d2:	06 c0       	rjmp	.+12     	; 0x22e0 <Isb_Obj_Exec+0xe2>
    22d4:	86 30       	cpi	r24, 0x06	; 6
    22d6:	41 f0       	breq	.+16     	; 0x22e8 <Isb_Obj_Exec+0xea>
    22d8:	87 30       	cpi	r24, 0x07	; 7
    22da:	41 f0       	breq	.+16     	; 0x22ec <Isb_Obj_Exec+0xee>
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	07 c0       	rjmp	.+14     	; 0x22ee <Isb_Obj_Exec+0xf0>
    22e0:	94 e0       	ldi	r25, 0x04	; 4
    22e2:	05 c0       	rjmp	.+10     	; 0x22ee <Isb_Obj_Exec+0xf0>
    22e4:	95 e0       	ldi	r25, 0x05	; 5
    22e6:	03 c0       	rjmp	.+6      	; 0x22ee <Isb_Obj_Exec+0xf0>
    22e8:	96 e0       	ldi	r25, 0x06	; 6
    22ea:	01 c0       	rjmp	.+2      	; 0x22ee <Isb_Obj_Exec+0xf0>
    22ec:	98 e0       	ldi	r25, 0x08	; 8
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
										TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
    22ee:	8e 83       	std	Y+6, r24	; 0x06
										TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    22f0:	6f 82       	std	Y+7, r6	; 0x07
										TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
    22f2:	f6 01       	movw	r30, r12
    22f4:	82 81       	ldd	r24, Z+2	; 0x02
    22f6:	88 87       	std	Y+8, r24	; 0x08
    22f8:	60 e0       	ldi	r22, 0x00	; 0
										for (uint8_t i = 0; i < (Dlc - 3); i++)
    22fa:	49 2f       	mov	r20, r25
    22fc:	50 e0       	ldi	r21, 0x00	; 0
    22fe:	43 50       	subi	r20, 0x03	; 3
    2300:	50 40       	sbci	r21, 0x00	; 0
										{
											TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
    2302:	97 01       	movw	r18, r14
    2304:	73 e0       	ldi	r23, 0x03	; 3
    2306:	22 0f       	add	r18, r18
    2308:	33 1f       	adc	r19, r19
    230a:	7a 95       	dec	r23
    230c:	e1 f7       	brne	.-8      	; 0x2306 <Isb_Obj_Exec+0x108>
    230e:	2e 0d       	add	r18, r14
    2310:	3f 1d       	adc	r19, r15
    2312:	25 5c       	subi	r18, 0xC5	; 197
    2314:	3e 4f       	sbci	r19, 0xFE	; 254
    2316:	09 c0       	rjmp	.+18     	; 0x232a <Isb_Obj_Exec+0x12c>
    2318:	f1 01       	movw	r30, r2
    231a:	ea 0f       	add	r30, r26
    231c:	fb 1f       	adc	r31, r27
    231e:	a2 0f       	add	r26, r18
    2320:	b3 1f       	adc	r27, r19
    2322:	13 96       	adiw	r26, 0x03	; 3
    2324:	8c 91       	ld	r24, X
    2326:	80 83       	st	Z, r24
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
										TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
										TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
										TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
										for (uint8_t i = 0; i < (Dlc - 3); i++)
    2328:	6f 5f       	subi	r22, 0xFF	; 255
    232a:	a6 2f       	mov	r26, r22
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	a4 17       	cp	r26, r20
    2330:	b5 07       	cpc	r27, r21
    2332:	94 f3       	brlt	.-28     	; 0x2318 <Isb_Obj_Exec+0x11a>
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
    2334:	9d 82       	std	Y+5, r9	; 0x05
    2336:	8c 82       	std	Y+4, r8	; 0x04
									if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
    2338:	bb 82       	std	Y+3, r11	; 0x03
    233a:	aa 82       	std	Y+2, r10	; 0x02
uint8_t Obj = ObjIndex;
									if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
    233c:	90 62       	ori	r25, 0x20	; 32
    233e:	99 83       	std	Y+1, r25	; 0x01
										TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
										for (uint8_t i = 0; i < (Dlc - 3); i++)
										{
											TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
										}
										Isb_SendMsg(&TxMsg);
    2340:	c2 01       	movw	r24, r4
    2342:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <Isb_SendMsg>
    2346:	06 c0       	rjmp	.+12     	; 0x2354 <Isb_Obj_Exec+0x156>
										break;
    2348:	33 96       	adiw	r30, 0x03	; 3
					{
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND))
						{
							if (Isb_Obj[ObjIndex].IsChanged == TRUE)
							{
								for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
    234a:	82 e0       	ldi	r24, 0x02	; 2
    234c:	e4 3c       	cpi	r30, 0xC4	; 196
    234e:	f8 07       	cpc	r31, r24
    2350:	09 f0       	breq	.+2      	; 0x2354 <Isb_Obj_Exec+0x156>
    2352:	ad cf       	rjmp	.-166    	; 0x22ae <Isb_Obj_Exec+0xb0>
										}
										Isb_SendMsg(&TxMsg);
										break;
									}
								}
								Isb_Obj[ObjIndex].IsChanged = FALSE;
    2354:	f6 01       	movw	r30, r12
    2356:	10 86       	std	Z+8, r1	; 0x08
							}
						}
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READONINIT))
    2358:	f8 01       	movw	r30, r16
    235a:	80 81       	ld	r24, Z
    235c:	85 ff       	sbrs	r24, 5
    235e:	59 c0       	rjmp	.+178    	; 0x2412 <Isb_Obj_Exec+0x214>
    2360:	e4 e6       	ldi	r30, 0x64	; 100
    2362:	f2 e0       	ldi	r31, 0x02	; 2
							for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
							{
//								uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_Obj_Array[ObjIndex]);
// TODO:
uint8_t Obj = ObjIndex;
								if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
    2364:	00 81       	ld	r16, Z
    2366:	11 81       	ldd	r17, Z+1	; 0x01
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	87 15       	cp	r24, r7
    236c:	09 f0       	breq	.+2      	; 0x2370 <Isb_Obj_Exec+0x172>
    236e:	4b c0       	rjmp	.+150    	; 0x2406 <Isb_Obj_Exec+0x208>
    2370:	01 15       	cp	r16, r1
    2372:	11 05       	cpc	r17, r1
    2374:	09 f4       	brne	.+2      	; 0x2378 <Isb_Obj_Exec+0x17a>
    2376:	47 c0       	rjmp	.+142    	; 0x2406 <Isb_Obj_Exec+0x208>
								{
									Isb_Msg_t TxMsg;
									uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
    2378:	f6 01       	movw	r30, r12
    237a:	81 81       	ldd	r24, Z+1	; 0x01
	uint8_t Isb_Obj_getDlc(uint8_t aTop)
	{

		uint8_t Dlc = 0;

		switch (aTop)
    237c:	85 30       	cpi	r24, 0x05	; 5
    237e:	69 f0       	breq	.+26     	; 0x239a <Isb_Obj_Exec+0x19c>
    2380:	86 30       	cpi	r24, 0x06	; 6
    2382:	18 f4       	brcc	.+6      	; 0x238a <Isb_Obj_Exec+0x18c>
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	29 f4       	brne	.+10     	; 0x2392 <Isb_Obj_Exec+0x194>
    2388:	06 c0       	rjmp	.+12     	; 0x2396 <Isb_Obj_Exec+0x198>
    238a:	86 30       	cpi	r24, 0x06	; 6
    238c:	41 f0       	breq	.+16     	; 0x239e <Isb_Obj_Exec+0x1a0>
    238e:	87 30       	cpi	r24, 0x07	; 7
    2390:	41 f0       	breq	.+16     	; 0x23a2 <Isb_Obj_Exec+0x1a4>
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	07 c0       	rjmp	.+14     	; 0x23a4 <Isb_Obj_Exec+0x1a6>
    2396:	94 e0       	ldi	r25, 0x04	; 4
    2398:	05 c0       	rjmp	.+10     	; 0x23a4 <Isb_Obj_Exec+0x1a6>
    239a:	95 e0       	ldi	r25, 0x05	; 5
    239c:	03 c0       	rjmp	.+6      	; 0x23a4 <Isb_Obj_Exec+0x1a6>
    239e:	96 e0       	ldi	r25, 0x06	; 6
    23a0:	01 c0       	rjmp	.+2      	; 0x23a4 <Isb_Obj_Exec+0x1a6>
    23a2:	98 e0       	ldi	r25, 0x08	; 8
									Isb_Msg_t TxMsg;
									uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
									TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
									TxMsg.DestId = Isb_Grp[GrpIndex].Id;
									TxMsg.SourceId = Isb_Node_Id;
									TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
    23a4:	8e 83       	std	Y+6, r24	; 0x06
									TxMsg.Data[1] = ISB_MSG_CTRL_CMD_READ;
    23a6:	1f 82       	std	Y+7, r1	; 0x07
									TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
    23a8:	f6 01       	movw	r30, r12
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	88 87       	std	Y+8, r24	; 0x08
    23ae:	60 e0       	ldi	r22, 0x00	; 0
									for (uint8_t i = 0; i < (Dlc - 3); i++)
    23b0:	49 2f       	mov	r20, r25
    23b2:	50 e0       	ldi	r21, 0x00	; 0
    23b4:	43 50       	subi	r20, 0x03	; 3
    23b6:	50 40       	sbci	r21, 0x00	; 0
									{
										TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
    23b8:	97 01       	movw	r18, r14
    23ba:	83 e0       	ldi	r24, 0x03	; 3
    23bc:	22 0f       	add	r18, r18
    23be:	33 1f       	adc	r19, r19
    23c0:	8a 95       	dec	r24
    23c2:	e1 f7       	brne	.-8      	; 0x23bc <Isb_Obj_Exec+0x1be>
    23c4:	2e 0d       	add	r18, r14
    23c6:	3f 1d       	adc	r19, r15
    23c8:	25 5c       	subi	r18, 0xC5	; 197
    23ca:	3e 4f       	sbci	r19, 0xFE	; 254
    23cc:	09 c0       	rjmp	.+18     	; 0x23e0 <Isb_Obj_Exec+0x1e2>
    23ce:	f1 01       	movw	r30, r2
    23d0:	ea 0f       	add	r30, r26
    23d2:	fb 1f       	adc	r31, r27
    23d4:	a2 0f       	add	r26, r18
    23d6:	b3 1f       	adc	r27, r19
    23d8:	13 96       	adiw	r26, 0x03	; 3
    23da:	8c 91       	ld	r24, X
    23dc:	80 83       	st	Z, r24
									TxMsg.DestId = Isb_Grp[GrpIndex].Id;
									TxMsg.SourceId = Isb_Node_Id;
									TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
									TxMsg.Data[1] = ISB_MSG_CTRL_CMD_READ;
									TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
									for (uint8_t i = 0; i < (Dlc - 3); i++)
    23de:	6f 5f       	subi	r22, 0xFF	; 255
    23e0:	a6 2f       	mov	r26, r22
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	a4 17       	cp	r26, r20
    23e6:	b5 07       	cpc	r27, r21
    23e8:	94 f3       	brlt	.-28     	; 0x23ce <Isb_Obj_Exec+0x1d0>
								{
									Isb_Msg_t TxMsg;
									uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
									TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
									TxMsg.DestId = Isb_Grp[GrpIndex].Id;
									TxMsg.SourceId = Isb_Node_Id;
    23ea:	9d 82       	std	Y+5, r9	; 0x05
    23ec:	8c 82       	std	Y+4, r8	; 0x04
								if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
								{
									Isb_Msg_t TxMsg;
									uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
									TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
									TxMsg.DestId = Isb_Grp[GrpIndex].Id;
    23ee:	1b 83       	std	Y+3, r17	; 0x03
    23f0:	0a 83       	std	Y+2, r16	; 0x02
uint8_t Obj = ObjIndex;
								if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
								{
									Isb_Msg_t TxMsg;
									uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
									TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
    23f2:	90 62       	ori	r25, 0x20	; 32
    23f4:	99 83       	std	Y+1, r25	; 0x01
									TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
									for (uint8_t i = 0; i < (Dlc - 3); i++)
									{
										TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
									}
									Isb_SendMsg(&TxMsg);
    23f6:	c2 01       	movw	r24, r4
    23f8:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <Isb_SendMsg>
									Isb_Obj[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    23fc:	f6 01       	movw	r30, r12
    23fe:	80 81       	ld	r24, Z
    2400:	8f 7d       	andi	r24, 0xDF	; 223
    2402:	80 83       	st	Z, r24
    2404:	06 c0       	rjmp	.+12     	; 0x2412 <Isb_Obj_Exec+0x214>
									break;
    2406:	33 96       	adiw	r30, 0x03	; 3
								Isb_Obj[ObjIndex].IsChanged = FALSE;
							}
						}
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READONINIT))
						{
							for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
    2408:	82 e0       	ldi	r24, 0x02	; 2
    240a:	e4 3c       	cpi	r30, 0xC4	; 196
    240c:	f8 07       	cpc	r31, r24
    240e:	09 f0       	breq	.+2      	; 0x2412 <Isb_Obj_Exec+0x214>
    2410:	a9 cf       	rjmp	.-174    	; 0x2364 <Isb_Obj_Exec+0x166>
    2412:	08 94       	sec
    2414:	e1 1c       	adc	r14, r1
    2416:	f1 1c       	adc	r15, r1
    2418:	e9 e0       	ldi	r30, 0x09	; 9
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	ce 0e       	add	r12, r30
    241e:	df 1e       	adc	r13, r31
	{

		#if defined(ISB_OBJ_MAX)
		if (bit_is_set(Isb_Obj_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
		{
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_MAX; ObjIndex++)
    2420:	f0 e2       	ldi	r31, 0x20	; 32
    2422:	ef 16       	cp	r14, r31
    2424:	f1 04       	cpc	r15, r1
    2426:	09 f0       	breq	.+2      	; 0x242a <Isb_Obj_Exec+0x22c>
    2428:	1d cf       	rjmp	.-454    	; 0x2264 <Isb_Obj_Exec+0x66>
							}
						}
					}
				}
			}
			Isb_Obj_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    242a:	80 91 aa 00 	lds	r24, 0x00AA
    242e:	8e 7f       	andi	r24, 0xFE	; 254
    2430:	80 93 aa 00 	sts	0x00AA, r24
		}
		#endif /* ISB_OBJ_MAX */

	}
    2434:	2d 96       	adiw	r28, 0x0d	; 13
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	f8 94       	cli
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	1f 91       	pop	r17
    2446:	0f 91       	pop	r16
    2448:	ff 90       	pop	r15
    244a:	ef 90       	pop	r14
    244c:	df 90       	pop	r13
    244e:	cf 90       	pop	r12
    2450:	bf 90       	pop	r11
    2452:	af 90       	pop	r10
    2454:	9f 90       	pop	r9
    2456:	8f 90       	pop	r8
    2458:	7f 90       	pop	r7
    245a:	6f 90       	pop	r6
    245c:	5f 90       	pop	r5
    245e:	4f 90       	pop	r4
    2460:	3f 90       	pop	r3
    2462:	2f 90       	pop	r2
    2464:	08 95       	ret

00002466 <Isb_Config_Rx>:
#ifndef ISB_SRV_CONFIG_C_
	#define ISB_SRV_CONFIG_C_



	void Isb_Config_Rx(Isb_Msg_t * aIsb_Msg) {
    2466:	df 92       	push	r13
    2468:	ef 92       	push	r14
    246a:	ff 92       	push	r15
    246c:	0f 93       	push	r16
    246e:	1f 93       	push	r17
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
    2478:	2d 97       	sbiw	r28, 0x0d	; 13
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	f8 94       	cli
    247e:	de bf       	out	0x3e, r29	; 62
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	cd bf       	out	0x3d, r28	; 61
    2484:	ac 01       	movw	r20, r24
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
    2486:	fc 01       	movw	r30, r24
    2488:	d0 80       	ld	r13, Z
    248a:	6d 2d       	mov	r22, r13
    248c:	6f 70       	andi	r22, 0x0F	; 15
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
    248e:	e3 80       	ldd	r14, Z+3	; 0x03
    2490:	f4 80       	ldd	r15, Z+4	; 0x04
		MsgTx.SourceId = Isb_Node_Id;
    2492:	00 91 a5 00 	lds	r16, 0x00A5
    2496:	10 91 a6 00 	lds	r17, 0x00A6
    249a:	dc 01       	movw	r26, r24
    249c:	fe 01       	movw	r30, r28
    249e:	36 96       	adiw	r30, 0x06	; 6
		for (uint8_t i = 0; i < Dlc; i++) {
    24a0:	9e 01       	movw	r18, r28
    24a2:	26 0f       	add	r18, r22
    24a4:	31 1d       	adc	r19, r1
    24a6:	2a 5f       	subi	r18, 0xFA	; 250
    24a8:	3f 4f       	sbci	r19, 0xFF	; 255
    24aa:	04 c0       	rjmp	.+8      	; 0x24b4 <Isb_Config_Rx+0x4e>
			MsgTx.Data[i] = aIsb_Msg->Data[i];
    24ac:	14 96       	adiw	r26, 0x04	; 4
    24ae:	8c 91       	ld	r24, X
    24b0:	14 97       	sbiw	r26, 0x04	; 4
    24b2:	81 93       	st	Z+, r24
    24b4:	11 96       	adiw	r26, 0x01	; 1
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
		MsgTx.SourceId = Isb_Node_Id;
		for (uint8_t i = 0; i < Dlc; i++) {
    24b6:	e2 17       	cp	r30, r18
    24b8:	f3 07       	cpc	r31, r19
    24ba:	c1 f7       	brne	.-16     	; 0x24ac <Isb_Config_Rx+0x46>
			MsgTx.Data[i] = aIsb_Msg->Data[i];
		}
		if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_SETMODE) {
    24bc:	fa 01       	movw	r30, r20
    24be:	85 81       	ldd	r24, Z+5	; 0x05
    24c0:	82 30       	cpi	r24, 0x02	; 2
    24c2:	09 f0       	breq	.+2      	; 0x24c6 <Isb_Config_Rx+0x60>
    24c4:	90 c0       	rjmp	.+288    	; 0x25e6 <Isb_Config_Rx+0x180>
			if (Dlc == ISB_MSG_FLAGS_DLC_2) {
    24c6:	62 30       	cpi	r22, 0x02	; 2
    24c8:	09 f0       	breq	.+2      	; 0x24cc <Isb_Config_Rx+0x66>
    24ca:	46 c1       	rjmp	.+652    	; 0x2758 <Isb_Config_Rx+0x2f2>
				MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_2;
				MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    24cc:	8e 81       	ldd	r24, Y+6	; 0x06
    24ce:	80 6c       	ori	r24, 0xC0	; 192
    24d0:	8e 83       	std	Y+6, r24	; 0x06
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__BL_NORM) {
    24d2:	26 81       	ldd	r18, Z+6	; 0x06
    24d4:	22 23       	and	r18, r18
    24d6:	c1 f4       	brne	.+48     	; 0x2508 <Isb_Config_Rx+0xa2>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    24d8:	e1 99       	sbic	0x1c, 1	; 28
    24da:	fe cf       	rjmp	.-4      	; 0x24d8 <Isb_Config_Rx+0x72>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    24dc:	82 e1       	ldi	r24, 0x12	; 18
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9f bb       	out	0x1f, r25	; 31
    24e2:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    24e4:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    24e6:	8d b3       	in	r24, 0x1d	; 29
	}



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
    24e8:	88 23       	and	r24, r24
    24ea:	09 f4       	brne	.+2      	; 0x24ee <Isb_Config_Rx+0x88>
    24ec:	62 c0       	rjmp	.+196    	; 0x25b2 <Isb_Config_Rx+0x14c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    24ee:	e1 99       	sbic	0x1c, 1	; 28
    24f0:	fe cf       	rjmp	.-4      	; 0x24ee <Isb_Config_Rx+0x88>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    24f2:	82 e1       	ldi	r24, 0x12	; 18
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	9f bb       	out	0x1f, r25	; 31
    24f8:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    24fa:	1d ba       	out	0x1d, r1	; 29

    __asm__ __volatile__ (
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	f8 94       	cli
    2500:	e2 9a       	sbi	0x1c, 2	; 28
    2502:	e1 9a       	sbi	0x1c, 1	; 28
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	6e c0       	rjmp	.+220    	; 0x25e4 <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__BL_FLASH) {
    2508:	21 30       	cpi	r18, 0x01	; 1
    250a:	c9 f4       	brne	.+50     	; 0x253e <Isb_Config_Rx+0xd8>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    250c:	e1 99       	sbic	0x1c, 1	; 28
    250e:	fe cf       	rjmp	.-4      	; 0x250c <Isb_Config_Rx+0xa6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2510:	82 e1       	ldi	r24, 0x12	; 18
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	9f bb       	out	0x1f, r25	; 31
    2516:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2518:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    251a:	8d b3       	in	r24, 0x1d	; 29
    251c:	81 30       	cpi	r24, 0x01	; 1
    251e:	09 f4       	brne	.+2      	; 0x2522 <Isb_Config_Rx+0xbc>
    2520:	61 c0       	rjmp	.+194    	; 0x25e4 <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2522:	e1 99       	sbic	0x1c, 1	; 28
    2524:	fe cf       	rjmp	.-4      	; 0x2522 <Isb_Config_Rx+0xbc>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2526:	82 e1       	ldi	r24, 0x12	; 18
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	9f bb       	out	0x1f, r25	; 31
    252c:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    2532:	0f b6       	in	r0, 0x3f	; 63
    2534:	f8 94       	cli
    2536:	e2 9a       	sbi	0x1c, 2	; 28
    2538:	e1 9a       	sbi	0x1c, 1	; 28
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	53 c0       	rjmp	.+166    	; 0x25e4 <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_FLASH);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__FW_NORM) {
    253e:	28 30       	cpi	r18, 0x08	; 8
    2540:	09 f0       	breq	.+2      	; 0x2544 <Isb_Config_Rx+0xde>
    2542:	37 c0       	rjmp	.+110    	; 0x25b2 <Isb_Config_Rx+0x14c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2544:	e1 99       	sbic	0x1c, 1	; 28
    2546:	fe cf       	rjmp	.-4      	; 0x2544 <Isb_Config_Rx+0xde>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2548:	8b e1       	ldi	r24, 0x1B	; 27
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	9f bb       	out	0x1f, r25	; 31
    254e:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2550:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2552:	2d b3       	in	r18, 0x1d	; 29
					uint8_t crc = lib_eep_read_byte((uint8_t *)EEP__ISB_CONFIG_CRC);
					crc++;
    2554:	2f 5f       	subi	r18, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2556:	e1 99       	sbic	0x1c, 1	; 28
    2558:	fe cf       	rjmp	.-4      	; 0x2556 <Isb_Config_Rx+0xf0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    255a:	8b e1       	ldi	r24, 0x1B	; 27
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	9f bb       	out	0x1f, r25	; 31
    2560:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2562:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2564:	8d b3       	in	r24, 0x1d	; 29
    2566:	82 17       	cp	r24, r18
    2568:	61 f0       	breq	.+24     	; 0x2582 <Isb_Config_Rx+0x11c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    256a:	e1 99       	sbic	0x1c, 1	; 28
    256c:	fe cf       	rjmp	.-4      	; 0x256a <Isb_Config_Rx+0x104>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    256e:	8b e1       	ldi	r24, 0x1B	; 27
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	9f bb       	out	0x1f, r25	; 31
    2574:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2576:	2d bb       	out	0x1d, r18	; 29

    __asm__ __volatile__ (
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	e2 9a       	sbi	0x1c, 2	; 28
    257e:	e1 9a       	sbi	0x1c, 1	; 28
    2580:	0f be       	out	0x3f, r0	; 63
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2582:	e1 99       	sbic	0x1c, 1	; 28
    2584:	fe cf       	rjmp	.-4      	; 0x2582 <Isb_Config_Rx+0x11c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2586:	82 e1       	ldi	r24, 0x12	; 18
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	9f bb       	out	0x1f, r25	; 31
    258c:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    258e:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2590:	8d b3       	in	r24, 0x1d	; 29
    2592:	88 30       	cpi	r24, 0x08	; 8
    2594:	39 f1       	breq	.+78     	; 0x25e4 <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2596:	e1 99       	sbic	0x1c, 1	; 28
    2598:	fe cf       	rjmp	.-4      	; 0x2596 <Isb_Config_Rx+0x130>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    259a:	82 e1       	ldi	r24, 0x12	; 18
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	9f bb       	out	0x1f, r25	; 31
    25a0:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    25a2:	88 e0       	ldi	r24, 0x08	; 8
    25a4:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	e2 9a       	sbi	0x1c, 2	; 28
    25ac:	e1 9a       	sbi	0x1c, 1	; 28
    25ae:	0f be       	out	0x3f, r0	; 63
    25b0:	19 c0       	rjmp	.+50     	; 0x25e4 <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_CONFIG_CRC, crc);
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__FW_NORM);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__FW_CFG) {
    25b2:	29 30       	cpi	r18, 0x09	; 9
    25b4:	b9 f4       	brne	.+46     	; 0x25e4 <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    25b6:	e1 99       	sbic	0x1c, 1	; 28
    25b8:	fe cf       	rjmp	.-4      	; 0x25b6 <Isb_Config_Rx+0x150>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    25ba:	82 e1       	ldi	r24, 0x12	; 18
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	9f bb       	out	0x1f, r25	; 31
    25c0:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    25c2:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    25c4:	8d b3       	in	r24, 0x1d	; 29
    25c6:	89 30       	cpi	r24, 0x09	; 9
    25c8:	69 f0       	breq	.+26     	; 0x25e4 <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    25ca:	e1 99       	sbic	0x1c, 1	; 28
    25cc:	fe cf       	rjmp	.-4      	; 0x25ca <Isb_Config_Rx+0x164>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    25ce:	82 e1       	ldi	r24, 0x12	; 18
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	9f bb       	out	0x1f, r25	; 31
    25d4:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    25d6:	89 e0       	ldi	r24, 0x09	; 9
    25d8:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    25da:	0f b6       	in	r0, 0x3f	; 63
    25dc:	f8 94       	cli
    25de:	e2 9a       	sbi	0x1c, 2	; 28
    25e0:	e1 9a       	sbi	0x1c, 1	; 28
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	ff cf       	rjmp	.-2      	; 0x25e4 <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__FW_CFG);
				}
				Node_Reboot();
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_INITEEPROM) {
    25e6:	86 30       	cpi	r24, 0x06	; 6
    25e8:	09 f0       	breq	.+2      	; 0x25ec <Isb_Config_Rx+0x186>
    25ea:	43 c0       	rjmp	.+134    	; 0x2672 <Isb_Config_Rx+0x20c>
			if (Dlc == ISB_MSG_FLAGS_DLC_1) {
    25ec:	61 30       	cpi	r22, 0x01	; 1
    25ee:	09 f0       	breq	.+2      	; 0x25f2 <Isb_Config_Rx+0x18c>
    25f0:	b3 c0       	rjmp	.+358    	; 0x2758 <Isb_Config_Rx+0x2f2>
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
    25f2:	80 91 a8 00 	lds	r24, 0x00A8
    25f6:	89 30       	cpi	r24, 0x09	; 9
    25f8:	09 f0       	breq	.+2      	; 0x25fc <Isb_Config_Rx+0x196>
    25fa:	ae c0       	rjmp	.+348    	; 0x2758 <Isb_Config_Rx+0x2f2>
					MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_1;
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
    25fc:	80 91 a7 00 	lds	r24, 0x00A7
    2600:	28 2f       	mov	r18, r24
    2602:	30 e0       	ldi	r19, 0x00	; 0
						wdt_reset();
    2604:	a8 95       	wdr
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2606:	e1 99       	sbic	0x1c, 1	; 28
    2608:	fe cf       	rjmp	.-4      	; 0x2606 <Isb_Config_Rx+0x1a0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    260a:	3f bb       	out	0x1f, r19	; 31
    260c:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    260e:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2610:	8d b3       	in	r24, 0x1d	; 29
    2612:	88 23       	and	r24, r24
    2614:	51 f0       	breq	.+20     	; 0x262a <Isb_Config_Rx+0x1c4>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2616:	e1 99       	sbic	0x1c, 1	; 28
    2618:	fe cf       	rjmp	.-4      	; 0x2616 <Isb_Config_Rx+0x1b0>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    261a:	3f bb       	out	0x1f, r19	; 31
    261c:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    261e:	1d ba       	out	0x1d, r1	; 29

    __asm__ __volatile__ (
    2620:	0f b6       	in	r0, 0x3f	; 63
    2622:	f8 94       	cli
    2624:	e2 9a       	sbi	0x1c, 2	; 28
    2626:	e1 9a       	sbi	0x1c, 1	; 28
    2628:	0f be       	out	0x3f, r0	; 63
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_INITEEPROM) {
			if (Dlc == ISB_MSG_FLAGS_DLC_1) {
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
					MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_1;
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
    262a:	2f 5f       	subi	r18, 0xFF	; 255
    262c:	3f 4f       	sbci	r19, 0xFF	; 255
    262e:	f2 e0       	ldi	r31, 0x02	; 2
    2630:	20 30       	cpi	r18, 0x00	; 0
    2632:	3f 07       	cpc	r19, r31
    2634:	38 f3       	brcs	.-50     	; 0x2604 <Isb_Config_Rx+0x19e>
    2636:	2c e1       	ldi	r18, 0x1C	; 28
    2638:	30 e0       	ldi	r19, 0x00	; 0
						wdt_reset();
						lib_eep_write_byte((uint8_t *) ee_Addr, 0x00);
					}
					for (uint8_t i = 0; i < 4; i++) {
						lib_eep_write_byte((uint8_t *)(EEP__ISB_CONFIG_CODE_0 + i), Isb_Firmware_Code[i]);
    263a:	f9 01       	movw	r30, r18
    263c:	ec 5b       	subi	r30, 0xBC	; 188
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2642:	e1 99       	sbic	0x1c, 1	; 28
    2644:	fe cf       	rjmp	.-4      	; 0x2642 <Isb_Config_Rx+0x1dc>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2646:	3f bb       	out	0x1f, r19	; 31
    2648:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    264a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    264c:	8d b3       	in	r24, 0x1d	; 29
    264e:	8e 17       	cp	r24, r30
    2650:	51 f0       	breq	.+20     	; 0x2666 <Isb_Config_Rx+0x200>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2652:	e1 99       	sbic	0x1c, 1	; 28
    2654:	fe cf       	rjmp	.-4      	; 0x2652 <Isb_Config_Rx+0x1ec>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2656:	3f bb       	out	0x1f, r19	; 31
    2658:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    265a:	ed bb       	out	0x1d, r30	; 29

    __asm__ __volatile__ (
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	e2 9a       	sbi	0x1c, 2	; 28
    2662:	e1 9a       	sbi	0x1c, 1	; 28
    2664:	0f be       	out	0x3f, r0	; 63
    2666:	2f 5f       	subi	r18, 0xFF	; 255
    2668:	3f 4f       	sbci	r19, 0xFF	; 255
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
						wdt_reset();
						lib_eep_write_byte((uint8_t *) ee_Addr, 0x00);
					}
					for (uint8_t i = 0; i < 4; i++) {
    266a:	20 32       	cpi	r18, 0x20	; 32
    266c:	31 05       	cpc	r19, r1
    266e:	29 f7       	brne	.-54     	; 0x263a <Isb_Config_Rx+0x1d4>
    2670:	ff cf       	rjmp	.-2      	; 0x2670 <Isb_Config_Rx+0x20a>
					}
					Node_Reboot();
				}
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_READEEPROMBLOCK) {
    2672:	87 30       	cpi	r24, 0x07	; 7
    2674:	71 f5       	brne	.+92     	; 0x26d2 <Isb_Config_Rx+0x26c>
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
    2676:	64 30       	cpi	r22, 0x04	; 4
    2678:	08 f4       	brcc	.+2      	; 0x267c <Isb_Config_Rx+0x216>
    267a:	6e c0       	rjmp	.+220    	; 0x2758 <Isb_Config_Rx+0x2f2>
				Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
    267c:	fa 01       	movw	r30, r20
    267e:	97 81       	ldd	r25, Z+7	; 0x07
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	26 81       	ldd	r18, Z+6	; 0x06
    2684:	dc 01       	movw	r26, r24
    2686:	a2 0f       	add	r26, r18
    2688:	b1 1d       	adc	r27, r1
				if (Addr < EEP_SIZE) {
    268a:	f2 e0       	ldi	r31, 0x02	; 2
    268c:	a0 30       	cpi	r26, 0x00	; 0
    268e:	bf 07       	cpc	r27, r31
    2690:	08 f0       	brcs	.+2      	; 0x2694 <Isb_Config_Rx+0x22e>
    2692:	62 c0       	rjmp	.+196    	; 0x2758 <Isb_Config_Rx+0x2f2>
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    2694:	8e 81       	ldd	r24, Y+6	; 0x06
    2696:	80 6c       	ori	r24, 0xC0	; 192
    2698:	8e 83       	std	Y+6, r24	; 0x06
    269a:	40 e0       	ldi	r20, 0x00	; 0
					for (uint8_t i = 0; i < (Dlc - 3); i++) {
    269c:	26 2f       	mov	r18, r22
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	23 50       	subi	r18, 0x03	; 3
    26a2:	30 40       	sbci	r19, 0x00	; 0
						MsgTx.Data[3 + i] = lib_eep_read_byte((uint8_t *)(Addr + i));
    26a4:	be 01       	movw	r22, r28
    26a6:	67 5f       	subi	r22, 0xF7	; 247
    26a8:	7f 4f       	sbci	r23, 0xFF	; 255
    26aa:	0d c0       	rjmp	.+26     	; 0x26c6 <Isb_Config_Rx+0x260>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    26ac:	e1 99       	sbic	0x1c, 1	; 28
    26ae:	fe cf       	rjmp	.-4      	; 0x26ac <Isb_Config_Rx+0x246>
    26b0:	cd 01       	movw	r24, r26
    26b2:	84 0f       	add	r24, r20
    26b4:	91 1d       	adc	r25, r1
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    26b6:	9f bb       	out	0x1f, r25	; 31
    26b8:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    26ba:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    26bc:	8d b3       	in	r24, 0x1d	; 29
    26be:	e6 0f       	add	r30, r22
    26c0:	f7 1f       	adc	r31, r23
    26c2:	80 83       	st	Z, r24
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_READEEPROMBLOCK) {
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
				Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
				if (Addr < EEP_SIZE) {
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint8_t i = 0; i < (Dlc - 3); i++) {
    26c4:	4f 5f       	subi	r20, 0xFF	; 255
    26c6:	e4 2f       	mov	r30, r20
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	e2 17       	cp	r30, r18
    26cc:	f3 07       	cpc	r31, r19
    26ce:	74 f3       	brlt	.-36     	; 0x26ac <Isb_Config_Rx+0x246>
    26d0:	43 c0       	rjmp	.+134    	; 0x2758 <Isb_Config_Rx+0x2f2>
						MsgTx.Data[3 + i] = lib_eep_read_byte((uint8_t *)(Addr + i));
					}
				}
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_WRITEEEPROMBLOCK) {
    26d2:	88 30       	cpi	r24, 0x08	; 8
    26d4:	09 f0       	breq	.+2      	; 0x26d8 <Isb_Config_Rx+0x272>
    26d6:	40 c0       	rjmp	.+128    	; 0x2758 <Isb_Config_Rx+0x2f2>
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
    26d8:	64 30       	cpi	r22, 0x04	; 4
    26da:	08 f4       	brcc	.+2      	; 0x26de <Isb_Config_Rx+0x278>
    26dc:	3d c0       	rjmp	.+122    	; 0x2758 <Isb_Config_Rx+0x2f2>
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
    26de:	80 91 a8 00 	lds	r24, 0x00A8
    26e2:	89 30       	cpi	r24, 0x09	; 9
    26e4:	09 f0       	breq	.+2      	; 0x26e8 <Isb_Config_Rx+0x282>
    26e6:	38 c0       	rjmp	.+112    	; 0x2758 <Isb_Config_Rx+0x2f2>
					Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
    26e8:	fa 01       	movw	r30, r20
    26ea:	97 81       	ldd	r25, Z+7	; 0x07
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	26 81       	ldd	r18, Z+6	; 0x06
    26f0:	dc 01       	movw	r26, r24
    26f2:	a2 0f       	add	r26, r18
    26f4:	b1 1d       	adc	r27, r1
					if ((Addr >= Isb_Firmware_Offset) & (Addr < EEP_SIZE)) {
    26f6:	80 91 a7 00 	lds	r24, 0x00A7
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	a8 17       	cp	r26, r24
    26fe:	b9 07       	cpc	r27, r25
    2700:	58 f1       	brcs	.+86     	; 0x2758 <Isb_Config_Rx+0x2f2>
    2702:	f2 e0       	ldi	r31, 0x02	; 2
    2704:	a0 30       	cpi	r26, 0x00	; 0
    2706:	bf 07       	cpc	r27, r31
    2708:	38 f5       	brcc	.+78     	; 0x2758 <Isb_Config_Rx+0x2f2>
						MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    270a:	8e 81       	ldd	r24, Y+6	; 0x06
    270c:	80 6c       	ori	r24, 0xC0	; 192
    270e:	8e 83       	std	Y+6, r24	; 0x06
    2710:	90 e0       	ldi	r25, 0x00	; 0
						for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2712:	26 2f       	mov	r18, r22
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	23 50       	subi	r18, 0x03	; 3
    2718:	30 40       	sbci	r19, 0x00	; 0
    271a:	19 c0       	rjmp	.+50     	; 0x274e <Isb_Config_Rx+0x2e8>
							lib_eep_write_byte((uint8_t *)(Addr + i), aIsb_Msg->Data[3 + i]);
    271c:	bf 01       	movw	r22, r30
    271e:	6a 0f       	add	r22, r26
    2720:	7b 1f       	adc	r23, r27
    2722:	e4 0f       	add	r30, r20
    2724:	f5 1f       	adc	r31, r21
    2726:	e0 85       	ldd	r30, Z+8	; 0x08
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2728:	e1 99       	sbic	0x1c, 1	; 28
    272a:	fe cf       	rjmp	.-4      	; 0x2728 <Isb_Config_Rx+0x2c2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    272c:	7f bb       	out	0x1f, r23	; 31
    272e:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
    2730:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2732:	8d b3       	in	r24, 0x1d	; 29
    2734:	8e 17       	cp	r24, r30
    2736:	51 f0       	breq	.+20     	; 0x274c <Isb_Config_Rx+0x2e6>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2738:	e1 99       	sbic	0x1c, 1	; 28
    273a:	fe cf       	rjmp	.-4      	; 0x2738 <Isb_Config_Rx+0x2d2>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    273c:	7f bb       	out	0x1f, r23	; 31
    273e:	6e bb       	out	0x1e, r22	; 30
#endif
    EEDR = __value;
    2740:	ed bb       	out	0x1d, r30	; 29

    __asm__ __volatile__ (
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	e2 9a       	sbi	0x1c, 2	; 28
    2748:	e1 9a       	sbi	0x1c, 1	; 28
    274a:	0f be       	out	0x3f, r0	; 63
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
					Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
					if ((Addr >= Isb_Firmware_Offset) & (Addr < EEP_SIZE)) {
						MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
						for (uint8_t i = 0; i < (Dlc - 3); i++) {
    274c:	9f 5f       	subi	r25, 0xFF	; 255
    274e:	e9 2f       	mov	r30, r25
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	e2 17       	cp	r30, r18
    2754:	f3 07       	cpc	r31, r19
    2756:	14 f3       	brlt	.-60     	; 0x271c <Isb_Config_Rx+0x2b6>
						}
					}
				}
			}
		}
		MsgTx.Data[0] |= ISB_CONFIG_ANSWER_NACK;
    2758:	8e 81       	ldd	r24, Y+6	; 0x06
    275a:	80 64       	ori	r24, 0x40	; 64
    275c:	8e 83       	std	Y+6, r24	; 0x06
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
		MsgTx.SourceId = Isb_Node_Id;
    275e:	1d 83       	std	Y+5, r17	; 0x05
    2760:	0c 83       	std	Y+4, r16	; 0x04
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
    2762:	fb 82       	std	Y+3, r15	; 0x03
    2764:	ea 82       	std	Y+2, r14	; 0x02
	void Isb_Config_Rx(Isb_Msg_t * aIsb_Msg) {
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
    2766:	d9 82       	std	Y+1, r13	; 0x01
					}
				}
			}
		}
		MsgTx.Data[0] |= ISB_CONFIG_ANSWER_NACK;
		Isb_SendMsg(&MsgTx);
    2768:	ce 01       	movw	r24, r28
    276a:	01 96       	adiw	r24, 0x01	; 1
    276c:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <Isb_SendMsg>
	}
    2770:	2d 96       	adiw	r28, 0x0d	; 13
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	1f 91       	pop	r17
    2782:	0f 91       	pop	r16
    2784:	ff 90       	pop	r15
    2786:	ef 90       	pop	r14
    2788:	df 90       	pop	r13
    278a:	08 95       	ret

0000278c <lib_eep_fw_read_word>:
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    return __eerd_word (__p, eeprom_read_byte);
    278c:	20 91 a7 00 	lds	r18, 0x00A7
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	22 0f       	add	r18, r18
    2794:	33 1f       	adc	r19, r19
    2796:	82 0f       	add	r24, r18
    2798:	93 1f       	adc	r25, r19
    279a:	69 e7       	ldi	r22, 0x79	; 121
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__eerd_word>



	uint16_t __attribute__((always_inline)) lib_eep_fw_read_word(uint16_t * aAddr) {
		return eeprom_read_word(Isb_Firmware_Offset + aAddr);;
	}
    27a2:	08 95       	ret

000027a4 <lib_eep_read_word>:
    27a4:	69 e7       	ldi	r22, 0x79	; 121
    27a6:	70 e0       	ldi	r23, 0x00	; 0
    27a8:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__eerd_word>



	uint16_t __attribute__((always_inline)) lib_eep_read_word(uint16_t * aAddr) {
		return eeprom_read_word(aAddr);;
	}
    27ac:	08 95       	ret

000027ae <main>:



	int main(void)
	{
    27ae:	cf 92       	push	r12
    27b0:	df 92       	push	r13
    27b2:	ef 92       	push	r14
    27b4:	ff 92       	push	r15
    27b6:	0f 93       	push	r16
    27b8:	1f 93       	push	r17
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	2d 97       	sbiw	r28, 0x0d	; 13
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	cd bf       	out	0x3d, r28	; 61
		wdt_enable(WDTO_500MS);
    27ce:	8d e0       	ldi	r24, 0x0D	; 13
    27d0:	28 e1       	ldi	r18, 0x18	; 24
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	f8 94       	cli
    27d8:	a8 95       	wdr
    27da:	21 bd       	out	0x21, r18	; 33
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	81 bd       	out	0x21, r24	; 33
		wdt_reset();
    27e0:	a8 95       	wdr
    27e2:	80 e1       	ldi	r24, 0x10	; 16
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	69 e7       	ldi	r22, 0x79	; 121
    27e8:	70 e0       	ldi	r23, 0x00	; 0
    27ea:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__eerd_word>
    27ee:	6c 01       	movw	r12, r24
		Isb_Node_Id = lib_eep_read_word((uint16_t *)EEP__ISB_NODE_ID_0);
    27f0:	90 93 a6 00 	sts	0x00A6, r25
    27f4:	80 93 a5 00 	sts	0x00A5, r24
		if ((Isb_Node_Id == 0) | (Isb_Node_Id > 2047)) {
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	8f 5f       	subi	r24, 0xFF	; 255
    27fc:	97 40       	sbci	r25, 0x07	; 7
    27fe:	b8 f0       	brcs	.+46     	; 0x282e <main+0x80>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2800:	e1 99       	sbic	0x1c, 1	; 28
    2802:	fe cf       	rjmp	.-4      	; 0x2800 <main+0x52>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2804:	82 e1       	ldi	r24, 0x12	; 18
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	9f bb       	out	0x1f, r25	; 31
    280a:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    280c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    280e:	8d b3       	in	r24, 0x1d	; 29



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
    2810:	88 23       	and	r24, r24
    2812:	61 f0       	breq	.+24     	; 0x282c <main+0x7e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2814:	e1 99       	sbic	0x1c, 1	; 28
    2816:	fe cf       	rjmp	.-4      	; 0x2814 <main+0x66>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2818:	82 e1       	ldi	r24, 0x12	; 18
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	9f bb       	out	0x1f, r25	; 31
    281e:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2820:	1d ba       	out	0x1d, r1	; 29

    __asm__ __volatile__ (
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	e2 9a       	sbi	0x1c, 2	; 28
    2828:	e1 9a       	sbi	0x1c, 1	; 28
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	ff cf       	rjmp	.-2      	; 0x282c <main+0x7e>
    282e:	2c e0       	ldi	r18, 0x0C	; 12
    2830:	30 e0       	ldi	r19, 0x00	; 0
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
			Node_Reboot();
		}
		for (uint8_t i = 0; i < 4; i++) {
			lib_eep_write_byte((uint8_t *)(EEP__ISB_FIRMWARE_CODE_0 + i), Isb_Firmware_Code[i]);
    2832:	f9 01       	movw	r30, r18
    2834:	ec 5a       	subi	r30, 0xAC	; 172
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    283a:	e1 99       	sbic	0x1c, 1	; 28
    283c:	fe cf       	rjmp	.-4      	; 0x283a <main+0x8c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    283e:	3f bb       	out	0x1f, r19	; 31
    2840:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2842:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2844:	8d b3       	in	r24, 0x1d	; 29
    2846:	8e 17       	cp	r24, r30
    2848:	51 f0       	breq	.+20     	; 0x285e <main+0xb0>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    284a:	e1 99       	sbic	0x1c, 1	; 28
    284c:	fe cf       	rjmp	.-4      	; 0x284a <main+0x9c>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    284e:	3f bb       	out	0x1f, r19	; 31
    2850:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    2852:	ed bb       	out	0x1d, r30	; 29

    __asm__ __volatile__ (
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	e2 9a       	sbi	0x1c, 2	; 28
    285a:	e1 9a       	sbi	0x1c, 1	; 28
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	2f 5f       	subi	r18, 0xFF	; 255
    2860:	3f 4f       	sbci	r19, 0xFF	; 255
		Isb_Node_Id = lib_eep_read_word((uint16_t *)EEP__ISB_NODE_ID_0);
		if ((Isb_Node_Id == 0) | (Isb_Node_Id > 2047)) {
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
			Node_Reboot();
		}
		for (uint8_t i = 0; i < 4; i++) {
    2862:	20 31       	cpi	r18, 0x10	; 16
    2864:	31 05       	cpc	r19, r1
    2866:	29 f7       	brne	.-54     	; 0x2832 <main+0x84>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2868:	e1 99       	sbic	0x1c, 1	; 28
    286a:	fe cf       	rjmp	.-4      	; 0x2868 <main+0xba>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    286c:	8a e1       	ldi	r24, 0x1A	; 26
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	9f bb       	out	0x1f, r25	; 31
    2872:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2874:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2876:	8d b3       	in	r24, 0x1d	; 29
			lib_eep_write_byte((uint8_t *)(EEP__ISB_FIRMWARE_CODE_0 + i), Isb_Firmware_Code[i]);
		}
		Isb_Firmware_Offset = lib_eep_read_byte((uint8_t *)EEP__ISB_FIRMWARE_OFFSET);
    2878:	80 93 a7 00 	sts	0x00A7, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    287c:	e1 99       	sbic	0x1c, 1	; 28
    287e:	fe cf       	rjmp	.-4      	; 0x287c <main+0xce>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2880:	82 e1       	ldi	r24, 0x12	; 18
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	9f bb       	out	0x1f, r25	; 31
    2886:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2888:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    288a:	8d b3       	in	r24, 0x1d	; 29
		Isb_Node_Operating_Mode = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
    288c:	80 93 a8 00 	sts	0x00A8, r24
		if ((Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_NORM) & (Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_CFG))
    2890:	88 50       	subi	r24, 0x08	; 8
    2892:	82 30       	cpi	r24, 0x02	; 2
    2894:	d0 f0       	brcs	.+52     	; 0x28ca <main+0x11c>
		{
			Isb_Node_Operating_Mode = ISB_NODE_OPERATING_MODE__FW_NORM;
    2896:	88 e0       	ldi	r24, 0x08	; 8
    2898:	80 93 a8 00 	sts	0x00A8, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    289c:	e1 99       	sbic	0x1c, 1	; 28
    289e:	fe cf       	rjmp	.-4      	; 0x289c <main+0xee>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    28a0:	82 e1       	ldi	r24, 0x12	; 18
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	9f bb       	out	0x1f, r25	; 31
    28a6:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    28a8:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    28aa:	8d b3       	in	r24, 0x1d	; 29
    28ac:	88 30       	cpi	r24, 0x08	; 8
    28ae:	69 f0       	breq	.+26     	; 0x28ca <main+0x11c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    28b0:	e1 99       	sbic	0x1c, 1	; 28
    28b2:	fe cf       	rjmp	.-4      	; 0x28b0 <main+0x102>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    28b4:	82 e1       	ldi	r24, 0x12	; 18
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	9f bb       	out	0x1f, r25	; 31
    28ba:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    28bc:	88 e0       	ldi	r24, 0x08	; 8
    28be:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	f8 94       	cli
    28c4:	e2 9a       	sbi	0x1c, 2	; 28
    28c6:	e1 9a       	sbi	0x1c, 1	; 28
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	f0 90 a9 00 	lds	r15, 0x00A9
    28ce:	2c e1       	ldi	r18, 0x1C	; 28
    28d0:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    28d2:	e1 99       	sbic	0x1c, 1	; 28
    28d4:	fe cf       	rjmp	.-4      	; 0x28d2 <main+0x124>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    28d6:	3f bb       	out	0x1f, r19	; 31
    28d8:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    28da:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    28dc:	8d b3       	in	r24, 0x1d	; 29
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, Isb_Node_Operating_Mode);
		}
		for (uint8_t i = 0; i < 4; i++)
		{
			if (lib_eep_read_byte((uint8_t *)(EEP__ISB_CONFIG_CODE_0 + i)) != Isb_Firmware_Code[i])
    28de:	f9 01       	movw	r30, r18
    28e0:	ec 5b       	subi	r30, 0xBC	; 188
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	90 81       	ld	r25, Z
    28e6:	89 17       	cp	r24, r25
    28e8:	11 f0       	breq	.+4      	; 0x28ee <main+0x140>
			{
				Error |= ERROR__CONFIG_CODE;
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	f8 2a       	or	r15, r24
    28ee:	2f 5f       	subi	r18, 0xFF	; 255
    28f0:	3f 4f       	sbci	r19, 0xFF	; 255
		if ((Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_NORM) & (Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_CFG))
		{
			Isb_Node_Operating_Mode = ISB_NODE_OPERATING_MODE__FW_NORM;
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, Isb_Node_Operating_Mode);
		}
		for (uint8_t i = 0; i < 4; i++)
    28f2:	20 32       	cpi	r18, 0x20	; 32
    28f4:	31 05       	cpc	r19, r1
    28f6:	69 f7       	brne	.-38     	; 0x28d2 <main+0x124>
    28f8:	f0 92 a9 00 	sts	0x00A9, r15
//			Inf_Twi_Init(0, 12);
			Inf_Twi_Init(0, 255);
// TODO:
Lib_Pin_Set(4, 2, LIB_PIN_OUTPUT_HIGH);
		#endif /* INF_TWI_C_ */
		if (Error == 0) {
    28fc:	ff 20       	and	r15, r15
    28fe:	f1 f4       	brne	.+60     	; 0x293c <main+0x18e>

	#if defined(__AVR_ATmega8__)
		#warning "TIMER0_COMP_vect missing."
		#error "No definition for this MCU available."
	#elif defined(__AVR_ATmega16__)
	TCCR0 = (1 << WGM01) | (1 << CS01) | (1 << CS00);
    2900:	8b e0       	ldi	r24, 0x0B	; 11
    2902:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
    2904:	12 be       	out	0x32, r1	; 50
	OCR0 = (F_CPU / 64) / 1000;
    2906:	8d e7       	ldi	r24, 0x7D	; 125
    2908:	8c bf       	out	0x3c, r24	; 60
	TIMSK = (1 << OCIE0);
    290a:	82 e0       	ldi	r24, 0x02	; 2
    290c:	89 bf       	out	0x39, r24	; 57
	TIMSK0 = (1 << OCIE0A);
	#else
		#error "No definition for this MCU available."
	#endif

	Isb_Systick_Clock.Seconds = 0;
    290e:	10 92 5b 02 	sts	0x025B, r1
	Isb_Systick_Clock.Minutes = 0;
    2912:	10 92 5c 02 	sts	0x025C, r1
	Isb_Systick_Clock.Hour = 0;
    2916:	10 92 5d 02 	sts	0x025D, r1
	Isb_Systick_Clock.Dow = 1;
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	80 93 5f 02 	sts	0x025F, r24
	Isb_Systick_Clock.Day = 1;
    2920:	80 93 5e 02 	sts	0x025E, r24
	Isb_Systick_Clock.Month = 1;
    2924:	80 93 60 02 	sts	0x0260, r24
	Isb_Systick_Clock.Year = 0;;
    2928:	10 92 62 02 	sts	0x0262, r1
    292c:	10 92 61 02 	sts	0x0261, r1
			Isb_Systick_Init();
//			Isb_Ch_Init();
			Isb_Grp_Init();
    2930:	0e 94 76 0f 	call	0x1eec	; 0x1eec <Isb_Grp_Init>
//			Isb_Obj_Init();
			Isb_Obj_Exec();
    2934:	0e 94 ff 10 	call	0x21fe	; 0x21fe <Isb_Obj_Exec>
//			Isb_App_Init();
			Isb_App_Exec();
    2938:	0e 94 87 06 	call	0xd0e	; 0xd0e <Isb_App_Exec>
		}
		sei();
    293c:	78 94       	sei
		#endif /* ISB_INF_USART0 == 1 */
		#if ISB_INF_USART1 == 1
			Isb_Inf_Usart_Init(1);
		#endif /* ISB_INF_USART1 == 1 */
		#if ISB_INF_CAN0 == 1
			Isb_Inf_Can_Init(0);
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	0e 94 40 03 	call	0x680	; 0x680 <Isb_Inf_Can_Init>
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
		Isb_Msg.Data[0] = ISB_MSG_TOP__SERIAL_NUMBER__MODE__ERROR;
    2944:	81 e2       	ldi	r24, 0x21	; 33
    2946:	8e 83       	std	Y+6, r24	; 0x06
    2948:	fe 01       	movw	r30, r28
    294a:	37 96       	adiw	r30, 0x07	; 7
    294c:	24 e0       	ldi	r18, 0x04	; 4
    294e:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2950:	e1 99       	sbic	0x1c, 1	; 28
    2952:	fe cf       	rjmp	.-4      	; 0x2950 <main+0x1a2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2954:	3f bb       	out	0x1f, r19	; 31
    2956:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2958:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    295a:	8d b3       	in	r24, 0x1d	; 29
		for (uint8_t i = 0; i < 4; i++) {
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
    295c:	81 93       	st	Z+, r24
    295e:	2f 5f       	subi	r18, 0xFF	; 255
    2960:	3f 4f       	sbci	r19, 0xFF	; 255
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
		Isb_Msg.Data[0] = ISB_MSG_TOP__SERIAL_NUMBER__MODE__ERROR;
		for (uint8_t i = 0; i < 4; i++) {
    2962:	28 30       	cpi	r18, 0x08	; 8
    2964:	31 05       	cpc	r19, r1
    2966:	a1 f7       	brne	.-24     	; 0x2950 <main+0x1a2>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2968:	e1 99       	sbic	0x1c, 1	; 28
    296a:	fe cf       	rjmp	.-4      	; 0x2968 <main+0x1ba>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    296c:	82 e1       	ldi	r24, 0x12	; 18
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	9f bb       	out	0x1f, r25	; 31
    2972:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2974:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2976:	8d b3       	in	r24, 0x1d	; 29
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
    2978:	8b 87       	std	Y+11, r24	; 0x0b
		Isb_Msg.Data[6] = Error;
    297a:	fc 86       	std	Y+12, r15	; 0x0c
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
    297c:	dd 82       	std	Y+5, r13	; 0x05
    297e:	cc 82       	std	Y+4, r12	; 0x04
		#if ISB_INF_USART1_SLAVE == 1
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
    2980:	82 e0       	ldi	r24, 0x02	; 2
    2982:	90 ef       	ldi	r25, 0xF0	; 240
    2984:	9b 83       	std	Y+3, r25	; 0x03
    2986:	8a 83       	std	Y+2, r24	; 0x02
		#endif /* ISB_INF_USART0_SLAVE == 1 */
		#if ISB_INF_USART1_SLAVE == 1
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
    2988:	87 e2       	ldi	r24, 0x27	; 39
    298a:	89 83       	std	Y+1, r24	; 0x01
		for (uint8_t i = 0; i < 4; i++) {
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
		Isb_Msg.Data[6] = Error;
		Isb_SendMsg(&Isb_Msg);
    298c:	8e 01       	movw	r16, r28
    298e:	0f 5f       	subi	r16, 0xFF	; 255
    2990:	1f 4f       	sbci	r17, 0xFF	; 255
    2992:	c8 01       	movw	r24, r16
    2994:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <Isb_SendMsg>
						}
					}
				}
			#endif /* ISB_INF_USART1 == 1 */
			#if ISB_INF_CAN0 == 1
				if (Isb_Inf_Can_Rx(0, &Isb_Msg) == TRUE) {
    2998:	e0 2e       	mov	r14, r16
    299a:	01 2f       	mov	r16, r17
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
		Isb_Msg.Data[6] = Error;
		Isb_SendMsg(&Isb_Msg);
		for (;;) {
			wdt_reset();
    299c:	a8 95       	wdr
			if (Error == 0) {
    299e:	ff 20       	and	r15, r15
    29a0:	31 f4       	brne	.+12     	; 0x29ae <main+0x200>
				Isb_Systick_Exec();
    29a2:	0e 94 6f 04 	call	0x8de	; 0x8de <Isb_Systick_Exec>
				Isb_Obj_Exec();
    29a6:	0e 94 ff 10 	call	0x21fe	; 0x21fe <Isb_Obj_Exec>
				Isb_App_Exec();
    29aa:	0e 94 87 06 	call	0xd0e	; 0xd0e <Isb_App_Exec>
						}
					}
				}
			#endif /* ISB_INF_USART1 == 1 */
			#if ISB_INF_CAN0 == 1
				if (Isb_Inf_Can_Rx(0, &Isb_Msg) == TRUE) {
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	6e 2d       	mov	r22, r14
    29b2:	70 2f       	mov	r23, r16
    29b4:	0e 94 5d 03 	call	0x6ba	; 0x6ba <Isb_Inf_Can_Rx>
    29b8:	81 30       	cpi	r24, 0x01	; 1
    29ba:	81 f7       	brne	.-32     	; 0x299c <main+0x1ee>
						Isb_Inf_Can_Tx(1, &Isb_Msg);
					#endif /* ISB_INF_CAN1 == 1 */
					#if ISB_INF_CAN2 == 1
						Isb_Inf_Can_Tx(2, &Isb_Msg);
					#endif /* ISB_INF_CAN2 == 1 */
					if ((Isb_Msg.Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_UNICAST) {
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	80 73       	andi	r24, 0x30	; 48
    29c0:	49 f4       	brne	.+18     	; 0x29d4 <main+0x226>
						if (Isb_Msg.DestId == Isb_Node_Id) {
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	9b 81       	ldd	r25, Y+3	; 0x03
    29c6:	8c 15       	cp	r24, r12
    29c8:	9d 05       	cpc	r25, r13
    29ca:	21 f4       	brne	.+8      	; 0x29d4 <main+0x226>
							Isb_Config_Rx(&Isb_Msg);
    29cc:	8e 2d       	mov	r24, r14
    29ce:	90 2f       	mov	r25, r16
    29d0:	0e 94 33 12 	call	0x2466	; 0x2466 <Isb_Config_Rx>
						}
					}
					if ((Isb_Msg.Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_MULTICAST) {
    29d4:	89 81       	ldd	r24, Y+1	; 0x01
    29d6:	80 73       	andi	r24, 0x30	; 48
    29d8:	80 32       	cpi	r24, 0x20	; 32
    29da:	01 f7       	brne	.-64     	; 0x299c <main+0x1ee>
						if (Error == 0) {
    29dc:	ff 20       	and	r15, r15
    29de:	f1 f6       	brne	.-68     	; 0x299c <main+0x1ee>
							Isb_Obj_Rx(&Isb_Msg);
    29e0:	8e 2d       	mov	r24, r14
    29e2:	90 2f       	mov	r25, r16
    29e4:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <Isb_Obj_Rx>
    29e8:	d9 cf       	rjmp	.-78     	; 0x299c <main+0x1ee>

000029ea <__eerd_word>:
    29ea:	df 92       	push	r13
    29ec:	ef 92       	push	r14
    29ee:	ff 92       	push	r15
    29f0:	0f 93       	push	r16
    29f2:	1f 93       	push	r17
    29f4:	7b 01       	movw	r14, r22
    29f6:	8c 01       	movw	r16, r24
    29f8:	fb 01       	movw	r30, r22
    29fa:	09 95       	icall
    29fc:	d8 2e       	mov	r13, r24
    29fe:	c8 01       	movw	r24, r16
    2a00:	01 96       	adiw	r24, 0x01	; 1
    2a02:	f7 01       	movw	r30, r14
    2a04:	09 95       	icall
    2a06:	98 2f       	mov	r25, r24
    2a08:	8d 2d       	mov	r24, r13
    2a0a:	1f 91       	pop	r17
    2a0c:	0f 91       	pop	r16
    2a0e:	ff 90       	pop	r15
    2a10:	ef 90       	pop	r14
    2a12:	df 90       	pop	r13
    2a14:	08 95       	ret

00002a16 <__udivmodhi4>:
    2a16:	aa 1b       	sub	r26, r26
    2a18:	bb 1b       	sub	r27, r27
    2a1a:	51 e1       	ldi	r21, 0x11	; 17
    2a1c:	07 c0       	rjmp	.+14     	; 0x2a2c <__udivmodhi4_ep>

00002a1e <__udivmodhi4_loop>:
    2a1e:	aa 1f       	adc	r26, r26
    2a20:	bb 1f       	adc	r27, r27
    2a22:	a6 17       	cp	r26, r22
    2a24:	b7 07       	cpc	r27, r23
    2a26:	10 f0       	brcs	.+4      	; 0x2a2c <__udivmodhi4_ep>
    2a28:	a6 1b       	sub	r26, r22
    2a2a:	b7 0b       	sbc	r27, r23

00002a2c <__udivmodhi4_ep>:
    2a2c:	88 1f       	adc	r24, r24
    2a2e:	99 1f       	adc	r25, r25
    2a30:	5a 95       	dec	r21
    2a32:	a9 f7       	brne	.-22     	; 0x2a1e <__udivmodhi4_loop>
    2a34:	80 95       	com	r24
    2a36:	90 95       	com	r25
    2a38:	bc 01       	movw	r22, r24
    2a3a:	cd 01       	movw	r24, r26
    2a3c:	08 95       	ret

00002a3e <_exit>:
    2a3e:	f8 94       	cli

00002a40 <__stop_program>:
    2a40:	ff cf       	rjmp	.-2      	; 0x2a40 <__stop_program>
