
fw_6-0.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000e28  00000e9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e28  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800134  00000e5c  00000ed0  2**0
                  ALLOC
  3 .stab         000032b8  00000000  00000000  00000ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001844  00000000  00000000  00004188  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e2       	ldi	r30, 0x28	; 40
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 33       	cpi	r26, 0x34	; 52
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e3       	ldi	r26, 0x34	; 52
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 33       	cpi	r26, 0x3A	; 58
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 07 06 	call	0xc0e	; 0xc0e <main>
  9e:	0c 94 12 07 	jmp	0xe24	; 0xe24 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000a6 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
  a6:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
  a8:	f9 99       	sbic	0x1f, 1	; 31
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <eeprom_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
  ac:	32 bd       	out	0x22, r19	; 34
  ae:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
  b0:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
  b2:	80 b5       	in	r24, 0x20	; 32
}
  b4:	08 95       	ret

000000b6 <lib_eep_read_byte>:
#ifndef LIB_EEP_C_
	#define LIB_EEP_C_



	uint8_t __attribute__((always_inline)) lib_eep_read_byte(uint8_t * aAddr) {
  b6:	9c 01       	movw	r18, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
  b8:	f9 99       	sbic	0x1f, 1	; 31
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <lib_eep_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
  bc:	32 bd       	out	0x22, r19	; 34
  be:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
  c0:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
  c2:	80 b5       	in	r24, 0x20	; 32
		return eeprom_read_byte(aAddr);;
	}
  c4:	08 95       	ret

000000c6 <lib_eep_write_byte>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
  c6:	f9 99       	sbic	0x1f, 1	; 31
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <lib_eep_write_byte>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
  ca:	9c 01       	movw	r18, r24
  cc:	92 bd       	out	0x22, r25	; 34
  ce:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
  d0:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
  d2:	80 b5       	in	r24, 0x20	; 32
	}



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
  d4:	86 17       	cp	r24, r22
  d6:	59 f0       	breq	.+22     	; 0xee <lib_eep_write_byte+0x28>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
  d8:	f9 99       	sbic	0x1f, 1	; 31
  da:	fe cf       	rjmp	.-4      	; 0xd8 <lib_eep_write_byte+0x12>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
  dc:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
  de:	32 bd       	out	0x22, r19	; 34
  e0:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
  e2:	60 bd       	out	0x20, r22	; 32

    __asm__ __volatile__ (
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	fa 9a       	sbi	0x1f, 2	; 31
  ea:	f9 9a       	sbi	0x1f, 1	; 31
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	08 95       	ret

000000f0 <lib_eep_fw_read_byte>:
	}



	uint8_t __attribute__((always_inline)) lib_eep_fw_read_byte(uint8_t * aAddr) {
		return eeprom_read_byte(Isb_Firmware_Offset + aAddr);;
  f0:	20 91 36 01 	lds	r18, 0x0136
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
  f4:	f9 99       	sbic	0x1f, 1	; 31
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <lib_eep_fw_read_byte+0x4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
  f8:	82 0f       	add	r24, r18
  fa:	91 1d       	adc	r25, r1
  fc:	92 bd       	out	0x22, r25	; 34
  fe:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
 100:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 102:	80 b5       	in	r24, 0x20	; 32
	}
 104:	08 95       	ret

00000106 <lib_eep_fw_write_byte>:
		return eeprom_read_word(Isb_Firmware_Offset + aAddr);;
	}



	void __attribute__((always_inline)) lib_eep_fw_write_byte(uint8_t * aAddr, uint8_t aData) {
 106:	ac 01       	movw	r20, r24
		if (eeprom_read_byte(Isb_Firmware_Offset + aAddr) != aData) {
 108:	80 91 36 01 	lds	r24, 0x0136
 10c:	28 2f       	mov	r18, r24
 10e:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 110:	f9 99       	sbic	0x1f, 1	; 31
 112:	fe cf       	rjmp	.-4      	; 0x110 <lib_eep_fw_write_byte+0xa>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 114:	ca 01       	movw	r24, r20
 116:	82 0f       	add	r24, r18
 118:	93 1f       	adc	r25, r19
 11a:	92 bd       	out	0x22, r25	; 34
 11c:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
 11e:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 120:	80 b5       	in	r24, 0x20	; 32
 122:	86 17       	cp	r24, r22
 124:	69 f0       	breq	.+26     	; 0x140 <lib_eep_fw_write_byte+0x3a>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 126:	f9 99       	sbic	0x1f, 1	; 31
 128:	fe cf       	rjmp	.-4      	; 0x126 <lib_eep_fw_write_byte+0x20>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
 12a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 12c:	24 0f       	add	r18, r20
 12e:	35 1f       	adc	r19, r21
 130:	32 bd       	out	0x22, r19	; 34
 132:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
 134:	60 bd       	out	0x20, r22	; 32

    __asm__ __volatile__ (
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	f8 94       	cli
 13a:	fa 9a       	sbi	0x1f, 2	; 31
 13c:	f9 9a       	sbi	0x1f, 1	; 31
 13e:	0f be       	out	0x3f, r0	; 63
 140:	08 95       	ret

00000142 <Lib_Pin_Get>:
	#endif



	uint8_t Lib_Pin_Get(const uint8_t aPort, const uint8_t aPin) {
		return (*(PINx[aPort]) >> aPin) & 1;
 142:	e8 2f       	mov	r30, r24
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	ee 0f       	add	r30, r30
 148:	ff 1f       	adc	r31, r31
 14a:	ec 5d       	subi	r30, 0xDC	; 220
 14c:	fe 4f       	sbci	r31, 0xFE	; 254
 14e:	01 90       	ld	r0, Z+
 150:	f0 81       	ld	r31, Z
 152:	e0 2d       	mov	r30, r0
 154:	80 81       	ld	r24, Z
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <Lib_Pin_Get+0x1c>
 15a:	95 95       	asr	r25
 15c:	87 95       	ror	r24
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <Lib_Pin_Get+0x18>
	}
 162:	81 70       	andi	r24, 0x01	; 1
 164:	08 95       	ret

00000166 <Lib_Pin_Set>:



	void __attribute__((noinline)) Lib_Pin_Set(const uint8_t aPort, const uint8_t aPin, const uint8_t aCmd) {
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	02 c0       	rjmp	.+4      	; 0x16e <Lib_Pin_Set+0x8>
		uint8_t mask;
		uint8_t tmp;
		volatile uint8_t *reg;
		uint8_t Pxx = aPin;
		for (mask = 1; Pxx--; mask <<= 1) ;
 16a:	99 0f       	add	r25, r25
 16c:	61 50       	subi	r22, 0x01	; 1
 16e:	66 23       	and	r22, r22
 170:	e1 f7       	brne	.-8      	; 0x16a <Lib_Pin_Set+0x4>
		reg = PORTx[aPort];
 172:	a8 2f       	mov	r26, r24
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	fd 01       	movw	r30, r26
 178:	ee 0f       	add	r30, r30
 17a:	ff 1f       	adc	r31, r31
 17c:	ec 5e       	subi	r30, 0xEC	; 236
 17e:	fe 4f       	sbci	r31, 0xFE	; 254
 180:	01 90       	ld	r0, Z+
 182:	f0 81       	ld	r31, Z
 184:	e0 2d       	mov	r30, r0
		tmp = *reg | mask;
 186:	80 81       	ld	r24, Z
 188:	89 2b       	or	r24, r25
		if (! (aCmd & 2)) {
 18a:	41 ff       	sbrs	r20, 1
			tmp ^= mask;
 18c:	89 27       	eor	r24, r25
		}
		*reg = tmp;
 18e:	80 83       	st	Z, r24
		reg = DDRx[aPort];
 190:	aa 0f       	add	r26, r26
 192:	bb 1f       	adc	r27, r27
 194:	ac 5f       	subi	r26, 0xFC	; 252
 196:	be 4f       	sbci	r27, 0xFE	; 254
 198:	ed 91       	ld	r30, X+
 19a:	fc 91       	ld	r31, X
		tmp = *reg | mask;
 19c:	80 81       	ld	r24, Z
 19e:	89 2b       	or	r24, r25
		if (! (aCmd & 1)) {
 1a0:	40 ff       	sbrs	r20, 0
			tmp ^= mask;
 1a2:	89 27       	eor	r24, r25
		}
		*reg = tmp;
 1a4:	80 83       	st	Z, r24
	}
 1a6:	08 95       	ret

000001a8 <Inf_Spi_Init>:
	#endif /* ISYSBUS_LIB */



	void Inf_Spi_Init(const unsigned char aCfg)
	{
 1a8:	df 93       	push	r29
 1aa:	cf 93       	push	r28
 1ac:	0f 92       	push	r0
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	89 83       	std	Y+1, r24	; 0x01

		if (bit_is_set(aCfg, SPE))
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	86 ff       	sbrs	r24, 6
 1b8:	0c c0       	rjmp	.+24     	; 0x1d2 <Inf_Spi_Init+0x2a>
		{
			if (bit_is_set(aCfg, MSTR))
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	84 ff       	sbrs	r24, 4
 1be:	05 c0       	rjmp	.+10     	; 0x1ca <Inf_Spi_Init+0x22>
			{
				INF_SPI_DDR |= (1 << INF_SPI_DD_MOSI) | (1 << INF_SPI_DD_SCK);
 1c0:	84 b1       	in	r24, 0x04	; 4
 1c2:	88 62       	ori	r24, 0x28	; 40
 1c4:	84 b9       	out	0x04, r24	; 4
				INF_SPI_DDR &= ~(1 << INF_SPI_DD_MISO);
 1c6:	24 98       	cbi	0x04, 4	; 4
 1c8:	07 c0       	rjmp	.+14     	; 0x1d8 <Inf_Spi_Init+0x30>
			}
			else
			{
				INF_SPI_DDR |= (1 << INF_SPI_DD_MISO);
 1ca:	24 9a       	sbi	0x04, 4	; 4
				INF_SPI_DDR &= ~(1 << INF_SPI_DD_MOSI) & ~(1 << INF_SPI_DD_SCK);
 1cc:	84 b1       	in	r24, 0x04	; 4
 1ce:	87 7d       	andi	r24, 0xD7	; 215
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <Inf_Spi_Init+0x2e>
			}
		}
		else
		{
			INF_SPI_DDR &= ~(1 << INF_SPI_DD_MISO) & ~(1 << INF_SPI_DD_MOSI) & ~(1 << INF_SPI_DD_SCK);
 1d2:	84 b1       	in	r24, 0x04	; 4
 1d4:	87 7c       	andi	r24, 0xC7	; 199
 1d6:	84 b9       	out	0x04, r24	; 4
		}

		SPCR = aCfg;
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	8c bd       	out	0x2c, r24	; 44
		SPSR = 0;
 1dc:	1d bc       	out	0x2d, r1	; 45

	}
 1de:	0f 90       	pop	r0
 1e0:	cf 91       	pop	r28
 1e2:	df 91       	pop	r29
 1e4:	08 95       	ret

000001e6 <Inf_Spi_Rx>:


	unsigned char Inf_Spi_Rx(void)
	{

		SPDR = 0;
 1e6:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 1e8:	0d b4       	in	r0, 0x2d	; 45
 1ea:	07 fe       	sbrs	r0, 7
 1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <Inf_Spi_Rx+0x2>
		return SPDR;
 1ee:	8e b5       	in	r24, 0x2e	; 46

	}
 1f0:	08 95       	ret

000001f2 <Inf_Spi_Tx>:


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
 1f2:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 1f4:	0d b4       	in	r0, 0x2d	; 45
 1f6:	07 fe       	sbrs	r0, 7
 1f8:	fd cf       	rjmp	.-6      	; 0x1f4 <Inf_Spi_Tx+0x2>

	}
 1fa:	08 95       	ret

000001fc <Inf_Spi_TxRx>:


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 1fc:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 1fe:	0d b4       	in	r0, 0x2d	; 45
 200:	07 fe       	sbrs	r0, 7
 202:	fd cf       	rjmp	.-6      	; 0x1fe <Inf_Spi_TxRx+0x2>
		return SPDR;
 204:	8e b5       	in	r24, 0x2e	; 46

	}
 206:	08 95       	ret

00000208 <Lib_Mcp2515_Read>:
#ifndef LIB_MCP2515_C_
	#define LIB_MCP2515_C_



	uint8_t Lib_Mcp2515_Read(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr) {
 208:	ff 92       	push	r15
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	08 2f       	mov	r16, r24
 210:	f6 2e       	mov	r15, r22
 212:	14 2f       	mov	r17, r20
		uint8_t aData;
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 21a:	83 e0       	ldi	r24, 0x03	; 3
 21c:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 21e:	0d b4       	in	r0, 0x2d	; 45
 220:	07 fe       	sbrs	r0, 7
 222:	fd cf       	rjmp	.-6      	; 0x21e <Lib_Mcp2515_Read+0x16>
		return SPDR;
 224:	8e b5       	in	r24, 0x2e	; 46


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 226:	1e bd       	out	0x2e, r17	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 228:	0d b4       	in	r0, 0x2d	; 45
 22a:	07 fe       	sbrs	r0, 7
 22c:	fd cf       	rjmp	.-6      	; 0x228 <Lib_Mcp2515_Read+0x20>
		return SPDR;
 22e:	8e b5       	in	r24, 0x2e	; 46


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 234:	0d b4       	in	r0, 0x2d	; 45
 236:	07 fe       	sbrs	r0, 7
 238:	fd cf       	rjmp	.-6      	; 0x234 <Lib_Mcp2515_Read+0x2c>
		return SPDR;
 23a:	1e b5       	in	r17, 0x2e	; 46
		Inf_Spi_TxRx(LIB_MCP2515_READ);
		Inf_Spi_TxRx(aAddr);
		aData = Inf_Spi_TxRx(0xff);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
 23c:	80 2f       	mov	r24, r16
 23e:	6f 2d       	mov	r22, r15
 240:	43 e0       	ldi	r20, 0x03	; 3
 242:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>
		return aData;
	}
 246:	81 2f       	mov	r24, r17
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	ff 90       	pop	r15
 24e:	08 95       	ret

00000250 <Lib_Mcp2515_Write>:



	void Lib_Mcp2515_Write(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr, const uint8_t aData) {
 250:	ef 92       	push	r14
 252:	ff 92       	push	r15
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	08 2f       	mov	r16, r24
 25a:	f6 2e       	mov	r15, r22
 25c:	14 2f       	mov	r17, r20
 25e:	e2 2e       	mov	r14, r18
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 26a:	0d b4       	in	r0, 0x2d	; 45
 26c:	07 fe       	sbrs	r0, 7
 26e:	fd cf       	rjmp	.-6      	; 0x26a <Lib_Mcp2515_Write+0x1a>
		return SPDR;
 270:	8e b5       	in	r24, 0x2e	; 46


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 272:	1e bd       	out	0x2e, r17	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 274:	0d b4       	in	r0, 0x2d	; 45
 276:	07 fe       	sbrs	r0, 7
 278:	fd cf       	rjmp	.-6      	; 0x274 <Lib_Mcp2515_Write+0x24>
		return SPDR;
 27a:	8e b5       	in	r24, 0x2e	; 46


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 27c:	ee bc       	out	0x2e, r14	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 27e:	0d b4       	in	r0, 0x2d	; 45
 280:	07 fe       	sbrs	r0, 7
 282:	fd cf       	rjmp	.-6      	; 0x27e <Lib_Mcp2515_Write+0x2e>
		return SPDR;
 284:	8e b5       	in	r24, 0x2e	; 46
		Inf_Spi_TxRx(LIB_MCP2515_WRITE);
		Inf_Spi_TxRx(aAddr);
		Inf_Spi_TxRx(aData);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
 286:	80 2f       	mov	r24, r16
 288:	6f 2d       	mov	r22, r15
 28a:	43 e0       	ldi	r20, 0x03	; 3
 28c:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>
	}
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	ff 90       	pop	r15
 296:	ef 90       	pop	r14
 298:	08 95       	ret

0000029a <Lib_Mcp2515_Modify>:



	void Lib_Mcp2515_Modify(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr, const uint8_t aMask, const uint8_t aData) {
 29a:	df 92       	push	r13
 29c:	ef 92       	push	r14
 29e:	ff 92       	push	r15
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
 2a4:	e8 2e       	mov	r14, r24
 2a6:	d6 2e       	mov	r13, r22
 2a8:	14 2f       	mov	r17, r20
 2aa:	f2 2e       	mov	r15, r18
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 2b2:	85 e0       	ldi	r24, 0x05	; 5
 2b4:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 2b6:	0d b4       	in	r0, 0x2d	; 45
 2b8:	07 fe       	sbrs	r0, 7
 2ba:	fd cf       	rjmp	.-6      	; 0x2b6 <Lib_Mcp2515_Modify+0x1c>
		return SPDR;
 2bc:	8e b5       	in	r24, 0x2e	; 46


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 2be:	1e bd       	out	0x2e, r17	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 2c0:	0d b4       	in	r0, 0x2d	; 45
 2c2:	07 fe       	sbrs	r0, 7
 2c4:	fd cf       	rjmp	.-6      	; 0x2c0 <Lib_Mcp2515_Modify+0x26>
		return SPDR;
 2c6:	8e b5       	in	r24, 0x2e	; 46


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 2c8:	fe bc       	out	0x2e, r15	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 2ca:	0d b4       	in	r0, 0x2d	; 45
 2cc:	07 fe       	sbrs	r0, 7
 2ce:	fd cf       	rjmp	.-6      	; 0x2ca <Lib_Mcp2515_Modify+0x30>
		return SPDR;
 2d0:	8e b5       	in	r24, 0x2e	; 46


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 2d2:	0e bd       	out	0x2e, r16	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 2d4:	0d b4       	in	r0, 0x2d	; 45
 2d6:	07 fe       	sbrs	r0, 7
 2d8:	fd cf       	rjmp	.-6      	; 0x2d4 <Lib_Mcp2515_Modify+0x3a>
		return SPDR;
 2da:	8e b5       	in	r24, 0x2e	; 46
		Inf_Spi_TxRx(LIB_MCP2515_BIT_MODIFY);
		Inf_Spi_TxRx(aAddr);
		Inf_Spi_TxRx(aMask);
		Inf_Spi_TxRx(aData);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
 2dc:	8e 2d       	mov	r24, r14
 2de:	6d 2d       	mov	r22, r13
 2e0:	43 e0       	ldi	r20, 0x03	; 3
 2e2:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>
	}
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	ff 90       	pop	r15
 2ec:	ef 90       	pop	r14
 2ee:	df 90       	pop	r13
 2f0:	08 95       	ret

000002f2 <Inf_Can_Init>:
	#define INF_CAN_C_



	#if defined(INF_CAN0_TX) || defined(INF_CAN0_RX) || defined(INF_CAN1_TX) || defined(INF_CAN1_RX) || defined(INF_CAN2_TX) || defined(INF_CAN2_RX)
		uint8_t Inf_Can_Init(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aCnf1, const uint8_t aCnf2, const uint8_t aCnf3, const uint8_t aRSPort, const uint8_t aRSPin, const uint8_t aMode) {
 2f2:	8f 92       	push	r8
 2f4:	9f 92       	push	r9
 2f6:	af 92       	push	r10
 2f8:	bf 92       	push	r11
 2fa:	cf 92       	push	r12
 2fc:	df 92       	push	r13
 2fe:	ef 92       	push	r14
 300:	ff 92       	push	r15
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	df 93       	push	r29
 308:	cf 93       	push	r28
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
 30e:	f8 2e       	mov	r15, r24
 310:	d6 2e       	mov	r13, r22
 312:	14 2f       	mov	r17, r20
 314:	b2 2e       	mov	r11, r18
 316:	90 2e       	mov	r9, r16
 318:	0c 2d       	mov	r16, r12
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
 31a:	43 e0       	ldi	r20, 0x03	; 3
 31c:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
 320:	81 2f       	mov	r24, r17
 322:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
 326:	8f 2d       	mov	r24, r15
 328:	6d 2d       	mov	r22, r13
 32a:	41 e0       	ldi	r20, 0x01	; 1
 32c:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 330:	80 ec       	ldi	r24, 0xC0	; 192
 332:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 334:	0d b4       	in	r0, 0x2d	; 45
 336:	07 fe       	sbrs	r0, 7
 338:	fd cf       	rjmp	.-6      	; 0x334 <Inf_Can_Init+0x42>
		return SPDR;
 33a:	8e b5       	in	r24, 0x2e	; 46
			Inf_Spi_TxRx(LIB_MCP2515_RESET);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
 33c:	8f 2d       	mov	r24, r15
 33e:	6d 2d       	mov	r22, r13
 340:	43 e0       	ldi	r20, 0x03	; 3
 342:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 346:	80 ea       	ldi	r24, 0xA0	; 160
 348:	9f e0       	ldi	r25, 0x0F	; 15
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <Inf_Can_Init+0x58>
			_delay_ms(2);
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF1, aCnf1);
 34e:	8f 2d       	mov	r24, r15
 350:	6d 2d       	mov	r22, r13
 352:	4a e2       	ldi	r20, 0x2A	; 42
 354:	2b 2d       	mov	r18, r11
 356:	0e 94 28 01 	call	0x250	; 0x250 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF2, aCnf2);
 35a:	8f 2d       	mov	r24, r15
 35c:	6d 2d       	mov	r22, r13
 35e:	49 e2       	ldi	r20, 0x29	; 41
 360:	29 2d       	mov	r18, r9
 362:	0e 94 28 01 	call	0x250	; 0x250 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF3, aCnf3);
 366:	8f 2d       	mov	r24, r15
 368:	6d 2d       	mov	r22, r13
 36a:	48 e2       	ldi	r20, 0x28	; 40
 36c:	2e 2d       	mov	r18, r14
 36e:	0e 94 28 01 	call	0x250	; 0x250 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_RXB0CTRL, 0x64);
 372:	8f 2d       	mov	r24, r15
 374:	6d 2d       	mov	r22, r13
 376:	40 e6       	ldi	r20, 0x60	; 96
 378:	24 e6       	ldi	r18, 0x64	; 100
 37a:	0e 94 28 01 	call	0x250	; 0x250 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_RXB1CTRL, 0x60);
 37e:	8f 2d       	mov	r24, r15
 380:	6d 2d       	mov	r22, r13
 382:	40 e7       	ldi	r20, 0x70	; 112
 384:	20 e6       	ldi	r18, 0x60	; 96
 386:	0e 94 28 01 	call	0x250	; 0x250 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CANINTE, 0x03);
 38a:	8f 2d       	mov	r24, r15
 38c:	6d 2d       	mov	r22, r13
 38e:	4b e2       	ldi	r20, 0x2B	; 43
 390:	23 e0       	ldi	r18, 0x03	; 3
 392:	0e 94 28 01 	call	0x250	; 0x250 <Lib_Mcp2515_Write>
			if (aRSPort != 0) {
 396:	00 23       	and	r16, r16
 398:	c9 f0       	breq	.+50     	; 0x3cc <Inf_Can_Init+0xda>
				if (aRSPort < 8) {
 39a:	08 30       	cpi	r16, 0x08	; 8
 39c:	30 f4       	brcc	.+12     	; 0x3aa <Inf_Can_Init+0xb8>
					Lib_Pin_Set(aRSPort, aRSPin, LIB_PIN_OUTPUT_LOW);
 39e:	80 2f       	mov	r24, r16
 3a0:	6a 2d       	mov	r22, r10
 3a2:	41 e0       	ldi	r20, 0x01	; 1
 3a4:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>
 3a8:	11 c0       	rjmp	.+34     	; 0x3cc <Inf_Can_Init+0xda>
				}
//				else if (aRSPort < 16) {
//					Lib_Pin_Set(aRSPort, aRSPin, LIB_PIN_OUTPUT_HIGH);
//				}
				else if (aRSPort == 0xFC) {
 3aa:	0c 3f       	cpi	r16, 0xFC	; 252
 3ac:	31 f4       	brne	.+12     	; 0x3ba <Inf_Can_Init+0xc8>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x14, 0x04);
 3ae:	8f 2d       	mov	r24, r15
 3b0:	6d 2d       	mov	r22, r13
 3b2:	4c e0       	ldi	r20, 0x0C	; 12
 3b4:	24 e1       	ldi	r18, 0x14	; 20
 3b6:	04 e0       	ldi	r16, 0x04	; 4
 3b8:	07 c0       	rjmp	.+14     	; 0x3c8 <Inf_Can_Init+0xd6>
				}
				else if (aRSPort == 0xFD) {
 3ba:	0d 3f       	cpi	r16, 0xFD	; 253
 3bc:	39 f4       	brne	.+14     	; 0x3cc <Inf_Can_Init+0xda>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x28, 0x08);
 3be:	8f 2d       	mov	r24, r15
 3c0:	6d 2d       	mov	r22, r13
 3c2:	4c e0       	ldi	r20, 0x0C	; 12
 3c4:	28 e2       	ldi	r18, 0x28	; 40
 3c6:	08 e0       	ldi	r16, 0x08	; 8
 3c8:	0e 94 4d 01 	call	0x29a	; 0x29a <Lib_Mcp2515_Modify>
//				}
//				else if (aRSPort == 0xFF) {
//					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x28, 0x28);
//				}
			}
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x0C);
 3cc:	8f 2d       	mov	r24, r15
 3ce:	6d 2d       	mov	r22, r13
 3d0:	4c e0       	ldi	r20, 0x0C	; 12
 3d2:	2c e0       	ldi	r18, 0x0C	; 12
 3d4:	0e 94 28 01 	call	0x250	; 0x250 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_CANCTRL, 0xE0, aMode);
 3d8:	8f 2d       	mov	r24, r15
 3da:	6d 2d       	mov	r22, r13
 3dc:	4f e0       	ldi	r20, 0x0F	; 15
 3de:	20 ee       	ldi	r18, 0xE0	; 224
 3e0:	08 2d       	mov	r16, r8
 3e2:	0e 94 4d 01 	call	0x29a	; 0x29a <Lib_Mcp2515_Modify>
			if (((Lib_Mcp2515_Read(aSSPort, aSSPin, LIB_MCP2515_CANCTRL)) & 0xE0) == aMode) {
 3e6:	8f 2d       	mov	r24, r15
 3e8:	6d 2d       	mov	r22, r13
 3ea:	4f e0       	ldi	r20, 0x0F	; 15
 3ec:	0e 94 04 01 	call	0x208	; 0x208 <Lib_Mcp2515_Read>
 3f0:	40 e0       	ldi	r20, 0x00	; 0
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	80 7e       	andi	r24, 0xE0	; 224
 3f6:	90 70       	andi	r25, 0x00	; 0
 3f8:	28 2d       	mov	r18, r8
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	82 17       	cp	r24, r18
 3fe:	93 07       	cpc	r25, r19
 400:	09 f4       	brne	.+2      	; 0x404 <Inf_Can_Init+0x112>
 402:	41 e0       	ldi	r20, 0x01	; 1
				return TRUE;
			}
			return FALSE;
		}
 404:	84 2f       	mov	r24, r20
 406:	cf 91       	pop	r28
 408:	df 91       	pop	r29
 40a:	1f 91       	pop	r17
 40c:	0f 91       	pop	r16
 40e:	ff 90       	pop	r15
 410:	ef 90       	pop	r14
 412:	df 90       	pop	r13
 414:	cf 90       	pop	r12
 416:	bf 90       	pop	r11
 418:	af 90       	pop	r10
 41a:	9f 90       	pop	r9
 41c:	8f 90       	pop	r8
 41e:	08 95       	ret

00000420 <Inf_Can_Rx>:
	#endif /* INF_CAN0_TX || INF_CAN0_RX || INF_CAN1_TX || INF_CAN1_RX || INF_CAN2_TX || INF_CAN2_RX */



	#if defined(INF_CAN0_RX) || defined(INF_CAN1_RX) || defined(INF_CAN2_RX)
		uint8_t Inf_Can_Rx(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aRSPort, const uint8_t aRSPin, Inf_Can_Msg_t * aInf_Can_Msg) {
 420:	df 92       	push	r13
 422:	ef 92       	push	r14
 424:	ff 92       	push	r15
 426:	0f 93       	push	r16
 428:	1f 93       	push	r17
 42a:	df 93       	push	r29
 42c:	cf 93       	push	r28
 42e:	0f 92       	push	r0
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62
 434:	08 2f       	mov	r16, r24
 436:	d6 2e       	mov	r13, r22
 438:	14 2f       	mov	r17, r20
			uint8_t State = 0;
 43a:	19 82       	std	Y+1, r1	; 0x01
			uint8_t CmdSave = 0;
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
 43c:	43 e0       	ldi	r20, 0x03	; 3
 43e:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
 442:	81 2f       	mov	r24, r17
 444:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
 448:	80 2f       	mov	r24, r16
 44a:	6d 2d       	mov	r22, r13
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
 452:	80 eb       	ldi	r24, 0xB0	; 176
 454:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 456:	0d b4       	in	r0, 0x2d	; 45
 458:	07 fe       	sbrs	r0, 7
 45a:	fd cf       	rjmp	.-6      	; 0x456 <Inf_Can_Rx+0x36>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 45c:	8f ef       	ldi	r24, 0xFF	; 255
 45e:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 460:	0d b4       	in	r0, 0x2d	; 45
 462:	07 fe       	sbrs	r0, 7
 464:	fd cf       	rjmp	.-6      	; 0x460 <Inf_Can_Rx+0x40>
		return SPDR;
 466:	9e b5       	in	r25, 0x2e	; 46


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 468:	8f ef       	ldi	r24, 0xFF	; 255
 46a:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 46c:	0d b4       	in	r0, 0x2d	; 45
 46e:	07 fe       	sbrs	r0, 7
 470:	fd cf       	rjmp	.-6      	; 0x46c <Inf_Can_Rx+0x4c>
		return SPDR;
 472:	8e b5       	in	r24, 0x2e	; 46
			Inf_Spi_Tx(LIB_MCP2515_RX_STATUS);
			State = Inf_Spi_TxRx(0xFF);
 474:	99 83       	std	Y+1, r25	; 0x01
			Inf_Spi_TxRx(0xFF);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
 476:	80 2f       	mov	r24, r16
 478:	6d 2d       	mov	r22, r13
 47a:	43 e0       	ldi	r20, 0x03	; 3
 47c:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>
			if (bit_is_set(State, LIB_MCP2515_RX_STATUS_INSTRUCTION_CANINTF_RX0IF)) {
 480:	89 81       	ldd	r24, Y+1	; 0x01
 482:	86 ff       	sbrs	r24, 6
 484:	02 c0       	rjmp	.+4      	; 0x48a <Inf_Can_Rx+0x6a>
 486:	10 e9       	ldi	r17, 0x90	; 144
 488:	06 c0       	rjmp	.+12     	; 0x496 <Inf_Can_Rx+0x76>
				CmdSave = LIB_MCP2515_READ_RX_BUFFER0;
			}
			else if (bit_is_set(State, LIB_MCP2515_RX_STATUS_INSTRUCTION_CANINTF_RX1IF)) {
 48a:	89 81       	ldd	r24, Y+1	; 0x01
 48c:	87 fd       	sbrc	r24, 7
 48e:	02 c0       	rjmp	.+4      	; 0x494 <Inf_Can_Rx+0x74>
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	4e c0       	rjmp	.+156    	; 0x530 <__stack+0x31>
 494:	14 e9       	ldi	r17, 0x94	; 148
				CmdSave = LIB_MCP2515_READ_RX_BUFFER1;
			}
			else {
				return FALSE;
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
 496:	80 2f       	mov	r24, r16
 498:	6d 2d       	mov	r22, r13
 49a:	41 e0       	ldi	r20, 0x01	; 1
 49c:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
 4a0:	1e bd       	out	0x2e, r17	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 4a2:	0d b4       	in	r0, 0x2d	; 45
 4a4:	07 fe       	sbrs	r0, 7
 4a6:	fd cf       	rjmp	.-6      	; 0x4a2 <Inf_Can_Rx+0x82>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 4a8:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 4aa:	0d b4       	in	r0, 0x2d	; 45
 4ac:	07 fe       	sbrs	r0, 7
 4ae:	fd cf       	rjmp	.-6      	; 0x4aa <Inf_Can_Rx+0x8a>
		return SPDR;
 4b0:	8e b5       	in	r24, 0x2e	; 46
			Inf_Spi_Tx(CmdSave);
			aInf_Can_Msg->SIdH = Inf_Spi_TxRx(0x00);
 4b2:	f7 01       	movw	r30, r14
 4b4:	81 83       	std	Z+1, r24	; 0x01


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 4b6:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 4b8:	0d b4       	in	r0, 0x2d	; 45
 4ba:	07 fe       	sbrs	r0, 7
 4bc:	fd cf       	rjmp	.-6      	; 0x4b8 <Inf_Can_Rx+0x98>
		return SPDR;
 4be:	8e b5       	in	r24, 0x2e	; 46
			aInf_Can_Msg->SIdL = Inf_Spi_TxRx(0x00);
 4c0:	f7 01       	movw	r30, r14
 4c2:	80 83       	st	Z, r24


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 4c4:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 4c6:	0d b4       	in	r0, 0x2d	; 45
 4c8:	07 fe       	sbrs	r0, 7
 4ca:	fd cf       	rjmp	.-6      	; 0x4c6 <Inf_Can_Rx+0xa6>
		return SPDR;
 4cc:	8e b5       	in	r24, 0x2e	; 46
			aInf_Can_Msg->EIdH = Inf_Spi_TxRx(0x00);
 4ce:	f7 01       	movw	r30, r14
 4d0:	83 83       	std	Z+3, r24	; 0x03


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 4d2:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 4d4:	0d b4       	in	r0, 0x2d	; 45
 4d6:	07 fe       	sbrs	r0, 7
 4d8:	fd cf       	rjmp	.-6      	; 0x4d4 <Inf_Can_Rx+0xb4>
		return SPDR;
 4da:	8e b5       	in	r24, 0x2e	; 46
			aInf_Can_Msg->EIdL = Inf_Spi_TxRx(0x00);
 4dc:	f7 01       	movw	r30, r14
 4de:	82 83       	std	Z+2, r24	; 0x02


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 4e0:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 4e2:	0d b4       	in	r0, 0x2d	; 45
 4e4:	07 fe       	sbrs	r0, 7
 4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <Inf_Can_Rx+0xc2>
		return SPDR;
 4e8:	8e b5       	in	r24, 0x2e	; 46
			aInf_Can_Msg->Dlc = Inf_Spi_TxRx(0x00);
 4ea:	f7 01       	movw	r30, r14
 4ec:	84 83       	std	Z+4, r24	; 0x04
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
 4ee:	84 81       	ldd	r24, Z+4	; 0x04
 4f0:	86 fd       	sbrc	r24, 6
 4f2:	11 c0       	rjmp	.+34     	; 0x516 <__stack+0x17>
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0a c0       	rjmp	.+20     	; 0x50c <__stack+0xd>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 4f8:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 4fa:	0d b4       	in	r0, 0x2d	; 45
 4fc:	07 fe       	sbrs	r0, 7
 4fe:	fd cf       	rjmp	.-6      	; 0x4fa <Inf_Can_Rx+0xda>
		return SPDR;
 500:	8e b5       	in	r24, 0x2e	; 46
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
 502:	f7 01       	movw	r30, r14
 504:	e9 0f       	add	r30, r25
 506:	f1 1d       	adc	r31, r1
 508:	85 83       	std	Z+5, r24	; 0x05
			aInf_Can_Msg->SIdL = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->EIdH = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->EIdL = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->Dlc = Inf_Spi_TxRx(0x00);
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
 50a:	9f 5f       	subi	r25, 0xFF	; 255
 50c:	f7 01       	movw	r30, r14
 50e:	84 81       	ldd	r24, Z+4	; 0x04
 510:	98 17       	cp	r25, r24
 512:	90 f3       	brcs	.-28     	; 0x4f8 <Inf_Can_Rx+0xd8>
 514:	07 c0       	rjmp	.+14     	; 0x524 <__stack+0x25>
 516:	f7 01       	movw	r30, r14
 518:	80 e0       	ldi	r24, 0x00	; 0
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
				}
			}
			else {
				for (uint8_t i = 0; i < 8; i++) {
					aInf_Can_Msg->Data[i] = 0x00;
 51a:	15 82       	std	Z+5, r1	; 0x05
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
				}
			}
			else {
				for (uint8_t i = 0; i < 8; i++) {
 51c:	8f 5f       	subi	r24, 0xFF	; 255
 51e:	31 96       	adiw	r30, 0x01	; 1
 520:	88 30       	cpi	r24, 0x08	; 8
 522:	d9 f7       	brne	.-10     	; 0x51a <__stack+0x1b>
					aInf_Can_Msg->Data[i] = 0x00;
				}
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
 524:	80 2f       	mov	r24, r16
 526:	6d 2d       	mov	r22, r13
 528:	43 e0       	ldi	r20, 0x03	; 3
 52a:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>
 52e:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
		}
 530:	0f 90       	pop	r0
 532:	cf 91       	pop	r28
 534:	df 91       	pop	r29
 536:	1f 91       	pop	r17
 538:	0f 91       	pop	r16
 53a:	ff 90       	pop	r15
 53c:	ef 90       	pop	r14
 53e:	df 90       	pop	r13
 540:	08 95       	ret

00000542 <Inf_Can_Tx>:
	#endif /* INF_CAN0_RX || INF_CAN1_RX || INF_CAN2_RX */



	#if defined(INF_CAN0_TX) || defined(INF_CAN1_TX) || defined(INF_CAN2_TX)
		uint8_t Inf_Can_Tx(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aRSPort, const uint8_t aRSPin, Inf_Can_Msg_t * aInf_Can_Msg) {
 542:	cf 92       	push	r12
 544:	df 92       	push	r13
 546:	ef 92       	push	r14
 548:	ff 92       	push	r15
 54a:	0f 93       	push	r16
 54c:	1f 93       	push	r17
 54e:	df 93       	push	r29
 550:	cf 93       	push	r28
 552:	0f 92       	push	r0
 554:	cd b7       	in	r28, 0x3d	; 61
 556:	de b7       	in	r29, 0x3e	; 62
 558:	08 2f       	mov	r16, r24
 55a:	d6 2e       	mov	r13, r22
 55c:	14 2f       	mov	r17, r20
			uint8_t State = 0;
 55e:	19 82       	std	Y+1, r1	; 0x01
			uint8_t CmdLoad = 0;
			uint8_t CmdSend = 0;
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
 560:	43 e0       	ldi	r20, 0x03	; 3
 562:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
 566:	81 2f       	mov	r24, r17
 568:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
 56c:	80 2f       	mov	r24, r16
 56e:	6d 2d       	mov	r22, r13
 570:	41 e0       	ldi	r20, 0x01	; 1
 572:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
 576:	80 ea       	ldi	r24, 0xA0	; 160
 578:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 57a:	0d b4       	in	r0, 0x2d	; 45
 57c:	07 fe       	sbrs	r0, 7
 57e:	fd cf       	rjmp	.-6      	; 0x57a <Inf_Can_Tx+0x38>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 580:	8f ef       	ldi	r24, 0xFF	; 255
 582:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 584:	0d b4       	in	r0, 0x2d	; 45
 586:	07 fe       	sbrs	r0, 7
 588:	fd cf       	rjmp	.-6      	; 0x584 <Inf_Can_Tx+0x42>
		return SPDR;
 58a:	9e b5       	in	r25, 0x2e	; 46


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
 58c:	8f ef       	ldi	r24, 0xFF	; 255
 58e:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 590:	0d b4       	in	r0, 0x2d	; 45
 592:	07 fe       	sbrs	r0, 7
 594:	fd cf       	rjmp	.-6      	; 0x590 <Inf_Can_Tx+0x4e>
		return SPDR;
 596:	8e b5       	in	r24, 0x2e	; 46
			Inf_Spi_Tx(LIB_MCP2515_READ_STATUS);
			State = Inf_Spi_TxRx(0xFF);
 598:	99 83       	std	Y+1, r25	; 0x01
			Inf_Spi_TxRx(0xFF);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
 59a:	80 2f       	mov	r24, r16
 59c:	6d 2d       	mov	r22, r13
 59e:	43 e0       	ldi	r20, 0x03	; 3
 5a0:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>
			if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB0CTRL_TXREQ)) {
 5a4:	89 81       	ldd	r24, Y+1	; 0x01
 5a6:	82 fd       	sbrc	r24, 2
 5a8:	04 c0       	rjmp	.+8      	; 0x5b2 <Inf_Can_Tx+0x70>
 5aa:	10 e4       	ldi	r17, 0x40	; 64
 5ac:	61 e8       	ldi	r22, 0x81	; 129
 5ae:	c6 2e       	mov	r12, r22
 5b0:	0f c0       	rjmp	.+30     	; 0x5d0 <Inf_Can_Tx+0x8e>
				CmdLoad = LIB_MCP2515_LOAD_TX_BUFFER0;
				CmdSend = LIB_MCP2515_RTS_TX0;
			}
			else if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB1CTRL_TXREQ)) {
 5b2:	89 81       	ldd	r24, Y+1	; 0x01
 5b4:	84 fd       	sbrc	r24, 4
 5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <Inf_Can_Tx+0x7e>
 5b8:	12 e4       	ldi	r17, 0x42	; 66
 5ba:	52 e8       	ldi	r21, 0x82	; 130
 5bc:	c5 2e       	mov	r12, r21
 5be:	08 c0       	rjmp	.+16     	; 0x5d0 <Inf_Can_Tx+0x8e>
				CmdLoad = LIB_MCP2515_LOAD_TX_BUFFER1;
				CmdSend = LIB_MCP2515_RTS_TX1;
			}
			else if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB2CTRL_TXREQ)) {
 5c0:	89 81       	ldd	r24, Y+1	; 0x01
 5c2:	86 ff       	sbrs	r24, 6
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <Inf_Can_Tx+0x88>
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	50 c0       	rjmp	.+160    	; 0x66a <Inf_Can_Tx+0x128>
 5ca:	14 e4       	ldi	r17, 0x44	; 68
 5cc:	44 e8       	ldi	r20, 0x84	; 132
 5ce:	c4 2e       	mov	r12, r20
				CmdSend = LIB_MCP2515_RTS_TX2;
			}
			else {
				return FALSE;
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
 5d0:	80 2f       	mov	r24, r16
 5d2:	6d 2d       	mov	r22, r13
 5d4:	41 e0       	ldi	r20, 0x01	; 1
 5d6:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
 5da:	1e bd       	out	0x2e, r17	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 5dc:	0d b4       	in	r0, 0x2d	; 45
 5de:	07 fe       	sbrs	r0, 7
 5e0:	fd cf       	rjmp	.-6      	; 0x5dc <Inf_Can_Tx+0x9a>
			Inf_Spi_Tx(CmdLoad);
			Inf_Spi_Tx(aInf_Can_Msg->SIdH);
 5e2:	f7 01       	movw	r30, r14
 5e4:	81 81       	ldd	r24, Z+1	; 0x01


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
 5e6:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 5e8:	0d b4       	in	r0, 0x2d	; 45
 5ea:	07 fe       	sbrs	r0, 7
 5ec:	fd cf       	rjmp	.-6      	; 0x5e8 <Inf_Can_Tx+0xa6>
			Inf_Spi_Tx(aInf_Can_Msg->SIdL);
 5ee:	f7 01       	movw	r30, r14
 5f0:	80 81       	ld	r24, Z


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
 5f2:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 5f4:	0d b4       	in	r0, 0x2d	; 45
 5f6:	07 fe       	sbrs	r0, 7
 5f8:	fd cf       	rjmp	.-6      	; 0x5f4 <Inf_Can_Tx+0xb2>
			Inf_Spi_Tx(aInf_Can_Msg->EIdH);
 5fa:	f7 01       	movw	r30, r14
 5fc:	83 81       	ldd	r24, Z+3	; 0x03


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
 5fe:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 600:	0d b4       	in	r0, 0x2d	; 45
 602:	07 fe       	sbrs	r0, 7
 604:	fd cf       	rjmp	.-6      	; 0x600 <Inf_Can_Tx+0xbe>
			Inf_Spi_Tx(aInf_Can_Msg->EIdL);
 606:	f7 01       	movw	r30, r14
 608:	82 81       	ldd	r24, Z+2	; 0x02


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
 60a:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 60c:	0d b4       	in	r0, 0x2d	; 45
 60e:	07 fe       	sbrs	r0, 7
 610:	fd cf       	rjmp	.-6      	; 0x60c <Inf_Can_Tx+0xca>
			Inf_Spi_Tx(aInf_Can_Msg->Dlc);
 612:	f7 01       	movw	r30, r14
 614:	24 81       	ldd	r18, Z+4	; 0x04


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
 616:	2e bd       	out	0x2e, r18	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 618:	0d b4       	in	r0, 0x2d	; 45
 61a:	07 fe       	sbrs	r0, 7
 61c:	fd cf       	rjmp	.-6      	; 0x618 <Inf_Can_Tx+0xd6>
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
 61e:	f7 01       	movw	r30, r14
 620:	84 81       	ldd	r24, Z+4	; 0x04
 622:	86 fd       	sbrc	r24, 6
 624:	0d c0       	rjmp	.+26     	; 0x640 <Inf_Can_Tx+0xfe>
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	09 c0       	rjmp	.+18     	; 0x63c <Inf_Can_Tx+0xfa>
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++)
				{
					Inf_Spi_Tx(aInf_Can_Msg->Data[i]);
 62a:	f7 01       	movw	r30, r14
 62c:	e9 0f       	add	r30, r25
 62e:	f1 1d       	adc	r31, r1
 630:	85 81       	ldd	r24, Z+5	; 0x05


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
 632:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 634:	0d b4       	in	r0, 0x2d	; 45
 636:	07 fe       	sbrs	r0, 7
 638:	fd cf       	rjmp	.-6      	; 0x634 <Inf_Can_Tx+0xf2>
			Inf_Spi_Tx(aInf_Can_Msg->SIdL);
			Inf_Spi_Tx(aInf_Can_Msg->EIdH);
			Inf_Spi_Tx(aInf_Can_Msg->EIdL);
			Inf_Spi_Tx(aInf_Can_Msg->Dlc);
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++)
 63a:	9f 5f       	subi	r25, 0xFF	; 255
 63c:	92 17       	cp	r25, r18
 63e:	a8 f3       	brcs	.-22     	; 0x62a <Inf_Can_Tx+0xe8>
				{
					Inf_Spi_Tx(aInf_Can_Msg->Data[i]);
				}
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
 640:	80 2f       	mov	r24, r16
 642:	6d 2d       	mov	r22, r13
 644:	43 e0       	ldi	r20, 0x03	; 3
 646:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>
			asm volatile("nop");
 64a:	00 00       	nop
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
 64c:	80 2f       	mov	r24, r16
 64e:	6d 2d       	mov	r22, r13
 650:	41 e0       	ldi	r20, 0x01	; 1
 652:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
 656:	ce bc       	out	0x2e, r12	; 46
		loop_until_bit_is_set(SPSR, SPIF);
 658:	0d b4       	in	r0, 0x2d	; 45
 65a:	07 fe       	sbrs	r0, 7
 65c:	fd cf       	rjmp	.-6      	; 0x658 <Inf_Can_Tx+0x116>
			Inf_Spi_Tx(CmdSend);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
 65e:	80 2f       	mov	r24, r16
 660:	6d 2d       	mov	r22, r13
 662:	43 e0       	ldi	r20, 0x03	; 3
 664:	0e 94 b3 00 	call	0x166	; 0x166 <Lib_Pin_Set>
 668:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
		}
 66a:	0f 90       	pop	r0
 66c:	cf 91       	pop	r28
 66e:	df 91       	pop	r29
 670:	1f 91       	pop	r17
 672:	0f 91       	pop	r16
 674:	ff 90       	pop	r15
 676:	ef 90       	pop	r14
 678:	df 90       	pop	r13
 67a:	cf 90       	pop	r12
 67c:	08 95       	ret

0000067e <Isb_Inf_Can_Init>:
#ifndef ISB_INF_CAN_C_
	#define ISB_INF_CAN_C_



	uint8_t Isb_Inf_Can_Init(const uint8_t aInf) {
 67e:	8f 92       	push	r8
 680:	af 92       	push	r10
 682:	cf 92       	push	r12
 684:	ef 92       	push	r14
 686:	0f 93       	push	r16
		uint8_t Result = FALSE;
		switch (aInf) {
 688:	88 23       	and	r24, r24
 68a:	11 f0       	breq	.+4      	; 0x690 <Isb_Inf_Can_Init+0x12>
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	0d c0       	rjmp	.+26     	; 0x6aa <Isb_Inf_Can_Init+0x2c>
			#if ISB_INF_CAN0 == 1
				case 0:
					Result = Inf_Can_Init(INF_CAN0_SSPORT, INF_CAN0_SSPIN, INF_CAN0_SPICFG, INF_CAN0_CNF1, INF_CAN0_CNF2, INF_CAN0_CNF3, INF_CAN0_RSPORT, INF_CAN0_RSPIN, INF_CAN0_MODE);
 690:	82 e0       	ldi	r24, 0x02	; 2
 692:	62 e0       	ldi	r22, 0x02	; 2
 694:	41 e5       	ldi	r20, 0x51	; 81
 696:	21 e0       	ldi	r18, 0x01	; 1
 698:	06 eb       	ldi	r16, 0xB6	; 182
 69a:	e4 e0       	ldi	r30, 0x04	; 4
 69c:	ee 2e       	mov	r14, r30
 69e:	7d ef       	ldi	r23, 0xFD	; 253
 6a0:	c7 2e       	mov	r12, r23
 6a2:	aa 24       	eor	r10, r10
 6a4:	88 24       	eor	r8, r8
 6a6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <Inf_Can_Init>
					Result = Inf_Can_Init(INF_CAN2_SSPORT, INF_CAN2_SSPIN, INF_CAN2_SPICFG, INF_CAN2_CNF1, INF_CAN2_CNF2, INF_CAN2_CNF3, INF_CAN2_RSPORT, INF_CAN2_RSPIN, INF_CAN2_MODE);
					break;
			#endif /* ISB_INF_CAN2 == 1 */
		}
		return Result;
	}
 6aa:	0f 91       	pop	r16
 6ac:	ef 90       	pop	r14
 6ae:	cf 90       	pop	r12
 6b0:	af 90       	pop	r10
 6b2:	8f 90       	pop	r8
 6b4:	08 95       	ret

000006b6 <Isb_Inf_Can_Rx>:



	uint8_t Isb_Inf_Can_Rx(const uint8_t aInf, Isb_Msg_t * aIsb_Msg) {
 6b6:	af 92       	push	r10
 6b8:	bf 92       	push	r11
 6ba:	cf 92       	push	r12
 6bc:	df 92       	push	r13
 6be:	ef 92       	push	r14
 6c0:	ff 92       	push	r15
 6c2:	0f 93       	push	r16
 6c4:	df 93       	push	r29
 6c6:	cf 93       	push	r28
 6c8:	cd b7       	in	r28, 0x3d	; 61
 6ca:	de b7       	in	r29, 0x3e	; 62
 6cc:	2d 97       	sbiw	r28, 0x0d	; 13
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	f8 94       	cli
 6d2:	de bf       	out	0x3e, r29	; 62
 6d4:	0f be       	out	0x3f, r0	; 63
 6d6:	cd bf       	out	0x3d, r28	; 61
 6d8:	6b 01       	movw	r12, r22
		uint8_t aSSPort;
		uint8_t aSSPin;
		uint8_t aSpiCfg;
		uint8_t aRSPort;
		uint8_t aRSPin;
		switch (aInf) {
 6da:	88 23       	and	r24, r24
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <Isb_Inf_Can_Rx+0x2a>
 6de:	66 c0       	rjmp	.+204    	; 0x7ac <Isb_Inf_Can_Rx+0xf6>
			default:
				return FALSE;
				break;
		}
		Inf_Can_Msg_t aCanMsg;
		if (Inf_Can_Rx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
 6e0:	82 e0       	ldi	r24, 0x02	; 2
 6e2:	62 e0       	ldi	r22, 0x02	; 2
 6e4:	41 e5       	ldi	r20, 0x51	; 81
 6e6:	2d ef       	ldi	r18, 0xFD	; 253
 6e8:	00 e0       	ldi	r16, 0x00	; 0
 6ea:	5e 01       	movw	r10, r28
 6ec:	08 94       	sec
 6ee:	a1 1c       	adc	r10, r1
 6f0:	b1 1c       	adc	r11, r1
 6f2:	75 01       	movw	r14, r10
 6f4:	0e 94 10 02 	call	0x420	; 0x420 <Inf_Can_Rx>
 6f8:	81 30       	cpi	r24, 0x01	; 1
 6fa:	09 f0       	breq	.+2      	; 0x6fe <Isb_Inf_Can_Rx+0x48>
 6fc:	57 c0       	rjmp	.+174    	; 0x7ac <Isb_Inf_Can_Rx+0xf6>
			aIsb_Msg->Flags = ((aCanMsg.SIdH & 0xC0) >> 2) | (aCanMsg.Dlc & ISB_MSG_FLAGS_DLC_MASK);
 6fe:	ea 81       	ldd	r30, Y+2	; 0x02
 700:	8e 2f       	mov	r24, r30
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	80 7c       	andi	r24, 0xC0	; 192
 706:	90 70       	andi	r25, 0x00	; 0
 708:	95 95       	asr	r25
 70a:	87 95       	ror	r24
 70c:	95 95       	asr	r25
 70e:	87 95       	ror	r24
 710:	0d 81       	ldd	r16, Y+5	; 0x05
 712:	f0 2f       	mov	r31, r16
 714:	ff 70       	andi	r31, 0x0F	; 15
 716:	f8 2b       	or	r31, r24
 718:	d6 01       	movw	r26, r12
 71a:	fc 93       	st	X, r31
			aIsb_Msg->DestId = (uint16_t)((aCanMsg.EIdH & 0xF8) >> 3) + (uint16_t)((aCanMsg.SIdL & 0x03) << 5) + (uint16_t)((aCanMsg.SIdL & 0xE0) << 2) + (uint16_t)((aCanMsg.SIdH & 0x3F) << 10);
 71c:	6c 81       	ldd	r22, Y+4	; 0x04
 71e:	49 81       	ldd	r20, Y+1	; 0x01
 720:	50 e0       	ldi	r21, 0x00	; 0
 722:	3e 2f       	mov	r19, r30
 724:	33 0f       	add	r19, r19
 726:	33 0f       	add	r19, r19
 728:	20 e0       	ldi	r18, 0x00	; 0
 72a:	86 2f       	mov	r24, r22
 72c:	86 95       	lsr	r24
 72e:	86 95       	lsr	r24
 730:	86 95       	lsr	r24
 732:	28 0f       	add	r18, r24
 734:	31 1d       	adc	r19, r1
 736:	ca 01       	movw	r24, r20
 738:	83 70       	andi	r24, 0x03	; 3
 73a:	90 70       	andi	r25, 0x00	; 0
 73c:	75 e0       	ldi	r23, 0x05	; 5
 73e:	88 0f       	add	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	7a 95       	dec	r23
 744:	e1 f7       	brne	.-8      	; 0x73e <Isb_Inf_Can_Rx+0x88>
 746:	28 0f       	add	r18, r24
 748:	39 1f       	adc	r19, r25
 74a:	40 7e       	andi	r20, 0xE0	; 224
 74c:	50 70       	andi	r21, 0x00	; 0
 74e:	44 0f       	add	r20, r20
 750:	55 1f       	adc	r21, r21
 752:	44 0f       	add	r20, r20
 754:	55 1f       	adc	r21, r21
 756:	24 0f       	add	r18, r20
 758:	35 1f       	adc	r19, r21
 75a:	12 96       	adiw	r26, 0x02	; 2
 75c:	3c 93       	st	X, r19
 75e:	2e 93       	st	-X, r18
 760:	11 97       	sbiw	r26, 0x01	; 1
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
 762:	70 e0       	ldi	r23, 0x00	; 0
 764:	67 70       	andi	r22, 0x07	; 7
 766:	70 70       	andi	r23, 0x00	; 0
 768:	76 2f       	mov	r23, r22
 76a:	66 27       	eor	r22, r22
 76c:	8b 81       	ldd	r24, Y+3	; 0x03
 76e:	68 0f       	add	r22, r24
 770:	71 1d       	adc	r23, r1
 772:	14 96       	adiw	r26, 0x04	; 4
 774:	7c 93       	st	X, r23
 776:	6e 93       	st	-X, r22
 778:	13 97       	sbiw	r26, 0x03	; 3
			if (bit_is_set(aCanMsg.Dlc, 6)) {
 77a:	8d 81       	ldd	r24, Y+5	; 0x05
 77c:	86 fd       	sbrc	r24, 6
 77e:	0a c0       	rjmp	.+20     	; 0x794 <Isb_Inf_Can_Rx+0xde>
				aIsb_Msg->Flags |= 0x40;
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
 780:	de 01       	movw	r26, r28
 782:	16 96       	adiw	r26, 0x06	; 6
 784:	f6 01       	movw	r30, r12
 786:	20 2f       	mov	r18, r16
 788:	30 e0       	ldi	r19, 0x00	; 0
 78a:	2b 5f       	subi	r18, 0xFB	; 251
 78c:	3f 4f       	sbci	r19, 0xFF	; 255
 78e:	2a 0d       	add	r18, r10
 790:	3b 1d       	adc	r19, r11
 792:	06 c0       	rjmp	.+12     	; 0x7a0 <Isb_Inf_Can_Rx+0xea>
		if (Inf_Can_Rx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
			aIsb_Msg->Flags = ((aCanMsg.SIdH & 0xC0) >> 2) | (aCanMsg.Dlc & ISB_MSG_FLAGS_DLC_MASK);
			aIsb_Msg->DestId = (uint16_t)((aCanMsg.EIdH & 0xF8) >> 3) + (uint16_t)((aCanMsg.SIdL & 0x03) << 5) + (uint16_t)((aCanMsg.SIdL & 0xE0) << 2) + (uint16_t)((aCanMsg.SIdH & 0x3F) << 10);
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
			if (bit_is_set(aCanMsg.Dlc, 6)) {
				aIsb_Msg->Flags |= 0x40;
 794:	f0 64       	ori	r31, 0x40	; 64
 796:	d6 01       	movw	r26, r12
 798:	fc 93       	st	X, r31
 79a:	06 c0       	rjmp	.+12     	; 0x7a8 <Isb_Inf_Can_Rx+0xf2>
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
					aIsb_Msg->Data[i] = aCanMsg.Data[i];
 79c:	8d 91       	ld	r24, X+
 79e:	84 83       	std	Z+4, r24	; 0x04
 7a0:	31 96       	adiw	r30, 0x01	; 1
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
			if (bit_is_set(aCanMsg.Dlc, 6)) {
				aIsb_Msg->Flags |= 0x40;
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
 7a2:	a2 17       	cp	r26, r18
 7a4:	b3 07       	cpc	r27, r19
 7a6:	d1 f7       	brne	.-12     	; 0x79c <Isb_Inf_Can_Rx+0xe6>
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	01 c0       	rjmp	.+2      	; 0x7ae <Isb_Inf_Can_Rx+0xf8>
 7ac:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			return TRUE;
		}
		return FALSE;
	}
 7ae:	2d 96       	adiw	r28, 0x0d	; 13
 7b0:	0f b6       	in	r0, 0x3f	; 63
 7b2:	f8 94       	cli
 7b4:	de bf       	out	0x3e, r29	; 62
 7b6:	0f be       	out	0x3f, r0	; 63
 7b8:	cd bf       	out	0x3d, r28	; 61
 7ba:	cf 91       	pop	r28
 7bc:	df 91       	pop	r29
 7be:	0f 91       	pop	r16
 7c0:	ff 90       	pop	r15
 7c2:	ef 90       	pop	r14
 7c4:	df 90       	pop	r13
 7c6:	cf 90       	pop	r12
 7c8:	bf 90       	pop	r11
 7ca:	af 90       	pop	r10
 7cc:	08 95       	ret

000007ce <Isb_Inf_Can_Tx>:



	uint8_t Isb_Inf_Can_Tx(const uint8_t aInf, const Isb_Msg_t * aIsb_Msg) {
 7ce:	ef 92       	push	r14
 7d0:	ff 92       	push	r15
 7d2:	0f 93       	push	r16
 7d4:	df 93       	push	r29
 7d6:	cf 93       	push	r28
 7d8:	cd b7       	in	r28, 0x3d	; 61
 7da:	de b7       	in	r29, 0x3e	; 62
 7dc:	2d 97       	sbiw	r28, 0x0d	; 13
 7de:	0f b6       	in	r0, 0x3f	; 63
 7e0:	f8 94       	cli
 7e2:	de bf       	out	0x3e, r29	; 62
 7e4:	0f be       	out	0x3f, r0	; 63
 7e6:	cd bf       	out	0x3d, r28	; 61
 7e8:	fb 01       	movw	r30, r22
		uint8_t aSSPort;
		uint8_t aSSPin;
		uint8_t aSpiCfg;
		uint8_t aRSPort;
		uint8_t aRSPin;
		switch (aInf) {
 7ea:	88 23       	and	r24, r24
 7ec:	11 f0       	breq	.+4      	; 0x7f2 <Isb_Inf_Can_Tx+0x24>
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	4e c0       	rjmp	.+156    	; 0x88e <Isb_Inf_Can_Tx+0xc0>
		}
		Inf_Can_Msg_t aCanMsg;
		// Write Message to SendBuffer - TXBnSIDH:
		//	[7..6] = Type
		//	[5..0] = Dest[15..10]
		aCanMsg.SIdH = ((aIsb_Msg->Flags << 2) & 0xC0) | (aIsb_Msg->DestId >> 10);
 7f2:	92 81       	ldd	r25, Z+2	; 0x02
 7f4:	96 95       	lsr	r25
 7f6:	96 95       	lsr	r25
 7f8:	60 81       	ld	r22, Z
 7fa:	86 2f       	mov	r24, r22
 7fc:	88 0f       	add	r24, r24
 7fe:	88 0f       	add	r24, r24
 800:	80 7c       	andi	r24, 0xC0	; 192
 802:	89 2b       	or	r24, r25
 804:	8a 83       	std	Y+2, r24	; 0x02
		//	[7..5] = Dest[9..7]
		//	[4] = 0
		//	[3] = 1
		//	[2] = 0
		//	[1..0] = Dest[6..5]
		aCanMsg.SIdL = ((uint8_t)(aIsb_Msg->DestId >> 2) & 0xE0) | 0x08 | ((uint8_t)(aIsb_Msg->DestId >> 5) & 0x03);
 806:	41 81       	ldd	r20, Z+1	; 0x01
 808:	52 81       	ldd	r21, Z+2	; 0x02
 80a:	ca 01       	movw	r24, r20
 80c:	96 95       	lsr	r25
 80e:	87 95       	ror	r24
 810:	96 95       	lsr	r25
 812:	87 95       	ror	r24
 814:	80 7e       	andi	r24, 0xE0	; 224
 816:	9a 01       	movw	r18, r20
 818:	a5 e0       	ldi	r26, 0x05	; 5
 81a:	36 95       	lsr	r19
 81c:	27 95       	ror	r18
 81e:	aa 95       	dec	r26
 820:	e1 f7       	brne	.-8      	; 0x81a <Isb_Inf_Can_Tx+0x4c>
 822:	23 70       	andi	r18, 0x03	; 3
 824:	82 2b       	or	r24, r18
 826:	88 60       	ori	r24, 0x08	; 8
 828:	89 83       	std	Y+1, r24	; 0x01
		// Write Message to SendBuffer - TXBnEID8:
		//	[7..3] = Dest[4..0]
		//	[2..0] = Source[10..8]
		aCanMsg.EIdH = ((uint8_t)((aIsb_Msg->DestId << 3) & 0xF8)) | ((uint8_t)((aIsb_Msg->SourceId >> 8) & 0x07));
 82a:	84 81       	ldd	r24, Z+4	; 0x04
 82c:	87 70       	andi	r24, 0x07	; 7
 82e:	44 0f       	add	r20, r20
 830:	44 0f       	add	r20, r20
 832:	44 0f       	add	r20, r20
 834:	84 2b       	or	r24, r20
 836:	8c 83       	std	Y+4, r24	; 0x04
		// Write Message to SendBuffer - TXBnEID0:
		//	[7..0] = Source[7..0]
		aCanMsg.EIdL = (uint8_t)aIsb_Msg->SourceId;
 838:	83 81       	ldd	r24, Z+3	; 0x03
 83a:	8b 83       	std	Y+3, r24	; 0x03
		// Write Message to SendBuffer - DataLength
		aCanMsg.Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
 83c:	6f 70       	andi	r22, 0x0F	; 15
 83e:	6d 83       	std	Y+5, r22	; 0x05
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
 840:	80 81       	ld	r24, Z
 842:	86 fd       	sbrc	r24, 6
 844:	0a c0       	rjmp	.+20     	; 0x85a <Isb_Inf_Can_Tx+0x8c>
 846:	df 01       	movw	r26, r30
 848:	fe 01       	movw	r30, r28
 84a:	36 96       	adiw	r30, 0x06	; 6
			aCanMsg.Dlc |= 0x40;
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
 84c:	ce 01       	movw	r24, r28
 84e:	86 0f       	add	r24, r22
 850:	91 1d       	adc	r25, r1
 852:	bc 01       	movw	r22, r24
 854:	6a 5f       	subi	r22, 0xFA	; 250
 856:	7f 4f       	sbci	r23, 0xFF	; 255
 858:	07 c0       	rjmp	.+14     	; 0x868 <Isb_Inf_Can_Tx+0x9a>
		aCanMsg.EIdL = (uint8_t)aIsb_Msg->SourceId;
		// Write Message to SendBuffer - DataLength
		aCanMsg.Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
			aCanMsg.Dlc |= 0x40;
 85a:	60 64       	ori	r22, 0x40	; 64
 85c:	6d 83       	std	Y+5, r22	; 0x05
 85e:	08 c0       	rjmp	.+16     	; 0x870 <Isb_Inf_Can_Tx+0xa2>
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
				aCanMsg.Data[i] = aIsb_Msg->Data[i];
 860:	14 96       	adiw	r26, 0x04	; 4
 862:	8c 91       	ld	r24, X
 864:	14 97       	sbiw	r26, 0x04	; 4
 866:	81 93       	st	Z+, r24
 868:	11 96       	adiw	r26, 0x01	; 1
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
			aCanMsg.Dlc |= 0x40;
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
 86a:	e6 17       	cp	r30, r22
 86c:	f7 07       	cpc	r31, r23
 86e:	c1 f7       	brne	.-16     	; 0x860 <Isb_Inf_Can_Tx+0x92>
				aCanMsg.Data[i] = aIsb_Msg->Data[i];
			}
		}
		if (Inf_Can_Tx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
 870:	82 e0       	ldi	r24, 0x02	; 2
 872:	62 e0       	ldi	r22, 0x02	; 2
 874:	41 e5       	ldi	r20, 0x51	; 81
 876:	2d ef       	ldi	r18, 0xFD	; 253
 878:	00 e0       	ldi	r16, 0x00	; 0
 87a:	7e 01       	movw	r14, r28
 87c:	08 94       	sec
 87e:	e1 1c       	adc	r14, r1
 880:	f1 1c       	adc	r15, r1
 882:	0e 94 a1 02 	call	0x542	; 0x542 <Inf_Can_Tx>
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	81 30       	cpi	r24, 0x01	; 1
 88a:	09 f4       	brne	.+2      	; 0x88e <Isb_Inf_Can_Tx+0xc0>
 88c:	91 e0       	ldi	r25, 0x01	; 1
			return TRUE;
		}
		return FALSE;
	}
 88e:	89 2f       	mov	r24, r25
 890:	2d 96       	adiw	r28, 0x0d	; 13
 892:	0f b6       	in	r0, 0x3f	; 63
 894:	f8 94       	cli
 896:	de bf       	out	0x3e, r29	; 62
 898:	0f be       	out	0x3f, r0	; 63
 89a:	cd bf       	out	0x3d, r28	; 61
 89c:	cf 91       	pop	r28
 89e:	df 91       	pop	r29
 8a0:	0f 91       	pop	r16
 8a2:	ff 90       	pop	r15
 8a4:	ef 90       	pop	r14
 8a6:	08 95       	ret

000008a8 <Node_Reboot>:
	#include "./../lib/isb_config.h"
	#include "./../lib/isb_config.c"



	void Node_Reboot(void) {
 8a8:	ff cf       	rjmp	.-2      	; 0x8a8 <Node_Reboot>

000008aa <Isb_SendMsg>:
		while (1) ;
	}



	void Isb_SendMsg(Isb_Msg_t * aMsg) {
 8aa:	bc 01       	movw	r22, r24
		#endif /* ISB_INF_USART0 == 1 */
		#if ISB_INF_USART1 == 1
			Isb_Inf_Usart_Tx(1, aMsg);
		#endif /* ISB_INF_USART1 == 1 */
		#if ISB_INF_CAN0 == 1
			Isb_Inf_Can_Tx(0, aMsg);
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Isb_Inf_Can_Tx>
		#endif /* ISB_INF_ETHERNET == 1 */
//		if ((aMsg->Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_MULTICAST) {
//			if (Error == 0) {
//			}
//		}
	}
 8b2:	08 95       	ret

000008b4 <Isb_Config_Rx>:
#ifndef ISB_SRV_CONFIG_C_
	#define ISB_SRV_CONFIG_C_



	void Isb_Config_Rx(Isb_Msg_t * aIsb_Msg) {
 8b4:	cf 92       	push	r12
 8b6:	df 92       	push	r13
 8b8:	ef 92       	push	r14
 8ba:	ff 92       	push	r15
 8bc:	0f 93       	push	r16
 8be:	1f 93       	push	r17
 8c0:	df 93       	push	r29
 8c2:	cf 93       	push	r28
 8c4:	cd b7       	in	r28, 0x3d	; 61
 8c6:	de b7       	in	r29, 0x3e	; 62
 8c8:	2d 97       	sbiw	r28, 0x0d	; 13
 8ca:	0f b6       	in	r0, 0x3f	; 63
 8cc:	f8 94       	cli
 8ce:	de bf       	out	0x3e, r29	; 62
 8d0:	0f be       	out	0x3f, r0	; 63
 8d2:	cd bf       	out	0x3d, r28	; 61
 8d4:	ac 01       	movw	r20, r24
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
 8d6:	fc 01       	movw	r30, r24
 8d8:	00 81       	ld	r16, Z
 8da:	10 2f       	mov	r17, r16
 8dc:	1f 70       	andi	r17, 0x0F	; 15
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
 8de:	c3 80       	ldd	r12, Z+3	; 0x03
 8e0:	d4 80       	ldd	r13, Z+4	; 0x04
		MsgTx.SourceId = Isb_Node_Id;
 8e2:	e0 90 34 01 	lds	r14, 0x0134
 8e6:	f0 90 35 01 	lds	r15, 0x0135
 8ea:	dc 01       	movw	r26, r24
 8ec:	fe 01       	movw	r30, r28
 8ee:	36 96       	adiw	r30, 0x06	; 6
		for (uint8_t i = 0; i < Dlc; i++) {
 8f0:	9e 01       	movw	r18, r28
 8f2:	21 0f       	add	r18, r17
 8f4:	31 1d       	adc	r19, r1
 8f6:	2a 5f       	subi	r18, 0xFA	; 250
 8f8:	3f 4f       	sbci	r19, 0xFF	; 255
 8fa:	04 c0       	rjmp	.+8      	; 0x904 <Isb_Config_Rx+0x50>
			MsgTx.Data[i] = aIsb_Msg->Data[i];
 8fc:	14 96       	adiw	r26, 0x04	; 4
 8fe:	8c 91       	ld	r24, X
 900:	14 97       	sbiw	r26, 0x04	; 4
 902:	81 93       	st	Z+, r24
 904:	11 96       	adiw	r26, 0x01	; 1
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
		MsgTx.SourceId = Isb_Node_Id;
		for (uint8_t i = 0; i < Dlc; i++) {
 906:	e2 17       	cp	r30, r18
 908:	f3 07       	cpc	r31, r19
 90a:	c1 f7       	brne	.-16     	; 0x8fc <Isb_Config_Rx+0x48>
			MsgTx.Data[i] = aIsb_Msg->Data[i];
		}
		if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_SETMODE) {
 90c:	fa 01       	movw	r30, r20
 90e:	85 81       	ldd	r24, Z+5	; 0x05
 910:	82 30       	cpi	r24, 0x02	; 2
 912:	09 f0       	breq	.+2      	; 0x916 <Isb_Config_Rx+0x62>
 914:	95 c0       	rjmp	.+298    	; 0xa40 <Isb_Config_Rx+0x18c>
			if (Dlc == ISB_MSG_FLAGS_DLC_2) {
 916:	12 30       	cpi	r17, 0x02	; 2
 918:	09 f0       	breq	.+2      	; 0x91c <Isb_Config_Rx+0x68>
 91a:	4d c1       	rjmp	.+666    	; 0xbb6 <Isb_Config_Rx+0x302>
				MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_2;
				MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
 91c:	8e 81       	ldd	r24, Y+6	; 0x06
 91e:	80 6c       	ori	r24, 0xC0	; 192
 920:	8e 83       	std	Y+6, r24	; 0x06
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__BL_NORM) {
 922:	26 81       	ldd	r18, Z+6	; 0x06
 924:	22 23       	and	r18, r18
 926:	c9 f4       	brne	.+50     	; 0x95a <Isb_Config_Rx+0xa6>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 928:	f9 99       	sbic	0x1f, 1	; 31
 92a:	fe cf       	rjmp	.-4      	; 0x928 <Isb_Config_Rx+0x74>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 92c:	82 e1       	ldi	r24, 0x12	; 18
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	92 bd       	out	0x22, r25	; 34
 932:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
 934:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 936:	80 b5       	in	r24, 0x20	; 32
	}



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
 938:	88 23       	and	r24, r24
 93a:	09 f4       	brne	.+2      	; 0x93e <Isb_Config_Rx+0x8a>
 93c:	66 c0       	rjmp	.+204    	; 0xa0a <Isb_Config_Rx+0x156>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 93e:	f9 99       	sbic	0x1f, 1	; 31
 940:	fe cf       	rjmp	.-4      	; 0x93e <Isb_Config_Rx+0x8a>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
 942:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 944:	82 e1       	ldi	r24, 0x12	; 18
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	92 bd       	out	0x22, r25	; 34
 94a:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
 94c:	10 bc       	out	0x20, r1	; 32

    __asm__ __volatile__ (
 94e:	0f b6       	in	r0, 0x3f	; 63
 950:	f8 94       	cli
 952:	fa 9a       	sbi	0x1f, 2	; 31
 954:	f9 9a       	sbi	0x1f, 1	; 31
 956:	0f be       	out	0x3f, r0	; 63
 958:	72 c0       	rjmp	.+228    	; 0xa3e <Isb_Config_Rx+0x18a>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__BL_FLASH) {
 95a:	21 30       	cpi	r18, 0x01	; 1
 95c:	d1 f4       	brne	.+52     	; 0x992 <Isb_Config_Rx+0xde>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 95e:	f9 99       	sbic	0x1f, 1	; 31
 960:	fe cf       	rjmp	.-4      	; 0x95e <Isb_Config_Rx+0xaa>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 962:	82 e1       	ldi	r24, 0x12	; 18
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	92 bd       	out	0x22, r25	; 34
 968:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
 96a:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 96c:	80 b5       	in	r24, 0x20	; 32
 96e:	81 30       	cpi	r24, 0x01	; 1
 970:	09 f4       	brne	.+2      	; 0x974 <Isb_Config_Rx+0xc0>
 972:	65 c0       	rjmp	.+202    	; 0xa3e <Isb_Config_Rx+0x18a>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 974:	f9 99       	sbic	0x1f, 1	; 31
 976:	fe cf       	rjmp	.-4      	; 0x974 <Isb_Config_Rx+0xc0>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
 978:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 97a:	82 e1       	ldi	r24, 0x12	; 18
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	92 bd       	out	0x22, r25	; 34
 980:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
 982:	81 e0       	ldi	r24, 0x01	; 1
 984:	80 bd       	out	0x20, r24	; 32

    __asm__ __volatile__ (
 986:	0f b6       	in	r0, 0x3f	; 63
 988:	f8 94       	cli
 98a:	fa 9a       	sbi	0x1f, 2	; 31
 98c:	f9 9a       	sbi	0x1f, 1	; 31
 98e:	0f be       	out	0x3f, r0	; 63
 990:	56 c0       	rjmp	.+172    	; 0xa3e <Isb_Config_Rx+0x18a>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_FLASH);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__FW_NORM) {
 992:	28 30       	cpi	r18, 0x08	; 8
 994:	09 f0       	breq	.+2      	; 0x998 <Isb_Config_Rx+0xe4>
 996:	39 c0       	rjmp	.+114    	; 0xa0a <Isb_Config_Rx+0x156>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 998:	f9 99       	sbic	0x1f, 1	; 31
 99a:	fe cf       	rjmp	.-4      	; 0x998 <Isb_Config_Rx+0xe4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 99c:	8b e1       	ldi	r24, 0x1B	; 27
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	92 bd       	out	0x22, r25	; 34
 9a2:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
 9a4:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 9a6:	20 b5       	in	r18, 0x20	; 32
					uint8_t crc = lib_eep_read_byte((uint8_t *)EEP__ISB_CONFIG_CRC);
					crc++;
 9a8:	2f 5f       	subi	r18, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 9aa:	f9 99       	sbic	0x1f, 1	; 31
 9ac:	fe cf       	rjmp	.-4      	; 0x9aa <Isb_Config_Rx+0xf6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 9ae:	8b e1       	ldi	r24, 0x1B	; 27
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	92 bd       	out	0x22, r25	; 34
 9b4:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
 9b6:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 9b8:	80 b5       	in	r24, 0x20	; 32
 9ba:	82 17       	cp	r24, r18
 9bc:	69 f0       	breq	.+26     	; 0x9d8 <Isb_Config_Rx+0x124>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 9be:	f9 99       	sbic	0x1f, 1	; 31
 9c0:	fe cf       	rjmp	.-4      	; 0x9be <Isb_Config_Rx+0x10a>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
 9c2:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 9c4:	8b e1       	ldi	r24, 0x1B	; 27
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	92 bd       	out	0x22, r25	; 34
 9ca:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
 9cc:	20 bd       	out	0x20, r18	; 32

    __asm__ __volatile__ (
 9ce:	0f b6       	in	r0, 0x3f	; 63
 9d0:	f8 94       	cli
 9d2:	fa 9a       	sbi	0x1f, 2	; 31
 9d4:	f9 9a       	sbi	0x1f, 1	; 31
 9d6:	0f be       	out	0x3f, r0	; 63
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 9d8:	f9 99       	sbic	0x1f, 1	; 31
 9da:	fe cf       	rjmp	.-4      	; 0x9d8 <Isb_Config_Rx+0x124>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 9dc:	82 e1       	ldi	r24, 0x12	; 18
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	92 bd       	out	0x22, r25	; 34
 9e2:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
 9e4:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 9e6:	80 b5       	in	r24, 0x20	; 32
 9e8:	88 30       	cpi	r24, 0x08	; 8
 9ea:	49 f1       	breq	.+82     	; 0xa3e <Isb_Config_Rx+0x18a>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 9ec:	f9 99       	sbic	0x1f, 1	; 31
 9ee:	fe cf       	rjmp	.-4      	; 0x9ec <Isb_Config_Rx+0x138>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
 9f0:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 9f2:	82 e1       	ldi	r24, 0x12	; 18
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	92 bd       	out	0x22, r25	; 34
 9f8:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
 9fa:	88 e0       	ldi	r24, 0x08	; 8
 9fc:	80 bd       	out	0x20, r24	; 32

    __asm__ __volatile__ (
 9fe:	0f b6       	in	r0, 0x3f	; 63
 a00:	f8 94       	cli
 a02:	fa 9a       	sbi	0x1f, 2	; 31
 a04:	f9 9a       	sbi	0x1f, 1	; 31
 a06:	0f be       	out	0x3f, r0	; 63
 a08:	1a c0       	rjmp	.+52     	; 0xa3e <Isb_Config_Rx+0x18a>
					lib_eep_write_byte((uint8_t *)EEP__ISB_CONFIG_CRC, crc);
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__FW_NORM);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__FW_CFG) {
 a0a:	29 30       	cpi	r18, 0x09	; 9
 a0c:	c1 f4       	brne	.+48     	; 0xa3e <Isb_Config_Rx+0x18a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 a0e:	f9 99       	sbic	0x1f, 1	; 31
 a10:	fe cf       	rjmp	.-4      	; 0xa0e <Isb_Config_Rx+0x15a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 a12:	82 e1       	ldi	r24, 0x12	; 18
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	92 bd       	out	0x22, r25	; 34
 a18:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
 a1a:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 a1c:	80 b5       	in	r24, 0x20	; 32
 a1e:	89 30       	cpi	r24, 0x09	; 9
 a20:	71 f0       	breq	.+28     	; 0xa3e <Isb_Config_Rx+0x18a>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 a22:	f9 99       	sbic	0x1f, 1	; 31
 a24:	fe cf       	rjmp	.-4      	; 0xa22 <Isb_Config_Rx+0x16e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
 a26:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 a28:	82 e1       	ldi	r24, 0x12	; 18
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	92 bd       	out	0x22, r25	; 34
 a2e:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
 a30:	89 e0       	ldi	r24, 0x09	; 9
 a32:	80 bd       	out	0x20, r24	; 32

    __asm__ __volatile__ (
 a34:	0f b6       	in	r0, 0x3f	; 63
 a36:	f8 94       	cli
 a38:	fa 9a       	sbi	0x1f, 2	; 31
 a3a:	f9 9a       	sbi	0x1f, 1	; 31
 a3c:	0f be       	out	0x3f, r0	; 63
 a3e:	ff cf       	rjmp	.-2      	; 0xa3e <Isb_Config_Rx+0x18a>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__FW_CFG);
				}
				Node_Reboot();
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_INITEEPROM) {
 a40:	86 30       	cpi	r24, 0x06	; 6
 a42:	09 f0       	breq	.+2      	; 0xa46 <Isb_Config_Rx+0x192>
 a44:	45 c0       	rjmp	.+138    	; 0xad0 <Isb_Config_Rx+0x21c>
			if (Dlc == ISB_MSG_FLAGS_DLC_1) {
 a46:	11 30       	cpi	r17, 0x01	; 1
 a48:	09 f0       	breq	.+2      	; 0xa4c <Isb_Config_Rx+0x198>
 a4a:	b5 c0       	rjmp	.+362    	; 0xbb6 <Isb_Config_Rx+0x302>
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
 a4c:	80 91 37 01 	lds	r24, 0x0137
 a50:	89 30       	cpi	r24, 0x09	; 9
 a52:	09 f0       	breq	.+2      	; 0xa56 <Isb_Config_Rx+0x1a2>
 a54:	b0 c0       	rjmp	.+352    	; 0xbb6 <Isb_Config_Rx+0x302>
					MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_1;
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
 a56:	80 91 36 01 	lds	r24, 0x0136
 a5a:	28 2f       	mov	r18, r24
 a5c:	30 e0       	ldi	r19, 0x00	; 0
						wdt_reset();
 a5e:	a8 95       	wdr
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 a60:	f9 99       	sbic	0x1f, 1	; 31
 a62:	fe cf       	rjmp	.-4      	; 0xa60 <Isb_Config_Rx+0x1ac>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 a64:	32 bd       	out	0x22, r19	; 34
 a66:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
 a68:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 a6a:	80 b5       	in	r24, 0x20	; 32
 a6c:	88 23       	and	r24, r24
 a6e:	59 f0       	breq	.+22     	; 0xa86 <Isb_Config_Rx+0x1d2>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 a70:	f9 99       	sbic	0x1f, 1	; 31
 a72:	fe cf       	rjmp	.-4      	; 0xa70 <Isb_Config_Rx+0x1bc>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
 a74:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 a76:	32 bd       	out	0x22, r19	; 34
 a78:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
 a7a:	10 bc       	out	0x20, r1	; 32

    __asm__ __volatile__ (
 a7c:	0f b6       	in	r0, 0x3f	; 63
 a7e:	f8 94       	cli
 a80:	fa 9a       	sbi	0x1f, 2	; 31
 a82:	f9 9a       	sbi	0x1f, 1	; 31
 a84:	0f be       	out	0x3f, r0	; 63
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_INITEEPROM) {
			if (Dlc == ISB_MSG_FLAGS_DLC_1) {
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
					MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_1;
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
 a86:	2f 5f       	subi	r18, 0xFF	; 255
 a88:	3f 4f       	sbci	r19, 0xFF	; 255
 a8a:	f2 e0       	ldi	r31, 0x02	; 2
 a8c:	20 30       	cpi	r18, 0x00	; 0
 a8e:	3f 07       	cpc	r19, r31
 a90:	30 f3       	brcs	.-52     	; 0xa5e <Isb_Config_Rx+0x1aa>
 a92:	2c e1       	ldi	r18, 0x1C	; 28
 a94:	30 e0       	ldi	r19, 0x00	; 0
						wdt_reset();
						lib_eep_write_byte((uint8_t *) ee_Addr, 0x00);
					}
					for (uint8_t i = 0; i < 4; i++) {
						lib_eep_write_byte((uint8_t *)(EEP__ISB_CONFIG_CODE_0 + i), Isb_Firmware_Code[i]);
 a96:	f9 01       	movw	r30, r18
 a98:	ec 51       	subi	r30, 0x1C	; 28
 a9a:	ff 4f       	sbci	r31, 0xFF	; 255
 a9c:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 a9e:	f9 99       	sbic	0x1f, 1	; 31
 aa0:	fe cf       	rjmp	.-4      	; 0xa9e <Isb_Config_Rx+0x1ea>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 aa2:	32 bd       	out	0x22, r19	; 34
 aa4:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
 aa6:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 aa8:	80 b5       	in	r24, 0x20	; 32
 aaa:	8e 17       	cp	r24, r30
 aac:	59 f0       	breq	.+22     	; 0xac4 <Isb_Config_Rx+0x210>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 aae:	f9 99       	sbic	0x1f, 1	; 31
 ab0:	fe cf       	rjmp	.-4      	; 0xaae <Isb_Config_Rx+0x1fa>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
 ab2:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 ab4:	32 bd       	out	0x22, r19	; 34
 ab6:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
 ab8:	e0 bd       	out	0x20, r30	; 32

    __asm__ __volatile__ (
 aba:	0f b6       	in	r0, 0x3f	; 63
 abc:	f8 94       	cli
 abe:	fa 9a       	sbi	0x1f, 2	; 31
 ac0:	f9 9a       	sbi	0x1f, 1	; 31
 ac2:	0f be       	out	0x3f, r0	; 63
 ac4:	2f 5f       	subi	r18, 0xFF	; 255
 ac6:	3f 4f       	sbci	r19, 0xFF	; 255
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
						wdt_reset();
						lib_eep_write_byte((uint8_t *) ee_Addr, 0x00);
					}
					for (uint8_t i = 0; i < 4; i++) {
 ac8:	20 32       	cpi	r18, 0x20	; 32
 aca:	31 05       	cpc	r19, r1
 acc:	21 f7       	brne	.-56     	; 0xa96 <Isb_Config_Rx+0x1e2>
 ace:	ff cf       	rjmp	.-2      	; 0xace <Isb_Config_Rx+0x21a>
					}
					Node_Reboot();
				}
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_READEEPROMBLOCK) {
 ad0:	87 30       	cpi	r24, 0x07	; 7
 ad2:	69 f5       	brne	.+90     	; 0xb2e <Isb_Config_Rx+0x27a>
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
 ad4:	14 30       	cpi	r17, 0x04	; 4
 ad6:	08 f4       	brcc	.+2      	; 0xada <Isb_Config_Rx+0x226>
 ad8:	6e c0       	rjmp	.+220    	; 0xbb6 <Isb_Config_Rx+0x302>
				Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
 ada:	fa 01       	movw	r30, r20
 adc:	97 81       	ldd	r25, Z+7	; 0x07
 ade:	80 e0       	ldi	r24, 0x00	; 0
 ae0:	26 81       	ldd	r18, Z+6	; 0x06
 ae2:	bc 01       	movw	r22, r24
 ae4:	62 0f       	add	r22, r18
 ae6:	71 1d       	adc	r23, r1
				if (Addr < EEP_SIZE) {
 ae8:	f2 e0       	ldi	r31, 0x02	; 2
 aea:	60 30       	cpi	r22, 0x00	; 0
 aec:	7f 07       	cpc	r23, r31
 aee:	08 f0       	brcs	.+2      	; 0xaf2 <Isb_Config_Rx+0x23e>
 af0:	62 c0       	rjmp	.+196    	; 0xbb6 <Isb_Config_Rx+0x302>
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
 af2:	8e 81       	ldd	r24, Y+6	; 0x06
 af4:	80 6c       	ori	r24, 0xC0	; 192
 af6:	8e 83       	std	Y+6, r24	; 0x06
 af8:	40 e0       	ldi	r20, 0x00	; 0
					for (uint8_t i = 0; i < (Dlc - 3); i++) {
 afa:	21 2f       	mov	r18, r17
 afc:	30 e0       	ldi	r19, 0x00	; 0
 afe:	23 50       	subi	r18, 0x03	; 3
 b00:	30 40       	sbci	r19, 0x00	; 0
						MsgTx.Data[3 + i] = lib_eep_read_byte((uint8_t *)(Addr + i));
 b02:	de 01       	movw	r26, r28
 b04:	19 96       	adiw	r26, 0x09	; 9
 b06:	0d c0       	rjmp	.+26     	; 0xb22 <Isb_Config_Rx+0x26e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 b08:	f9 99       	sbic	0x1f, 1	; 31
 b0a:	fe cf       	rjmp	.-4      	; 0xb08 <Isb_Config_Rx+0x254>
 b0c:	cb 01       	movw	r24, r22
 b0e:	84 0f       	add	r24, r20
 b10:	91 1d       	adc	r25, r1
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 b12:	92 bd       	out	0x22, r25	; 34
 b14:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
 b16:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 b18:	80 b5       	in	r24, 0x20	; 32
 b1a:	ea 0f       	add	r30, r26
 b1c:	fb 1f       	adc	r31, r27
 b1e:	80 83       	st	Z, r24
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_READEEPROMBLOCK) {
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
				Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
				if (Addr < EEP_SIZE) {
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint8_t i = 0; i < (Dlc - 3); i++) {
 b20:	4f 5f       	subi	r20, 0xFF	; 255
 b22:	e4 2f       	mov	r30, r20
 b24:	f0 e0       	ldi	r31, 0x00	; 0
 b26:	e2 17       	cp	r30, r18
 b28:	f3 07       	cpc	r31, r19
 b2a:	74 f3       	brlt	.-36     	; 0xb08 <Isb_Config_Rx+0x254>
 b2c:	44 c0       	rjmp	.+136    	; 0xbb6 <Isb_Config_Rx+0x302>
						MsgTx.Data[3 + i] = lib_eep_read_byte((uint8_t *)(Addr + i));
					}
				}
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_WRITEEEPROMBLOCK) {
 b2e:	88 30       	cpi	r24, 0x08	; 8
 b30:	09 f0       	breq	.+2      	; 0xb34 <Isb_Config_Rx+0x280>
 b32:	41 c0       	rjmp	.+130    	; 0xbb6 <Isb_Config_Rx+0x302>
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
 b34:	14 30       	cpi	r17, 0x04	; 4
 b36:	08 f4       	brcc	.+2      	; 0xb3a <Isb_Config_Rx+0x286>
 b38:	3e c0       	rjmp	.+124    	; 0xbb6 <Isb_Config_Rx+0x302>
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
 b3a:	80 91 37 01 	lds	r24, 0x0137
 b3e:	89 30       	cpi	r24, 0x09	; 9
 b40:	09 f0       	breq	.+2      	; 0xb44 <Isb_Config_Rx+0x290>
 b42:	39 c0       	rjmp	.+114    	; 0xbb6 <Isb_Config_Rx+0x302>
					Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
 b44:	fa 01       	movw	r30, r20
 b46:	97 81       	ldd	r25, Z+7	; 0x07
 b48:	80 e0       	ldi	r24, 0x00	; 0
 b4a:	26 81       	ldd	r18, Z+6	; 0x06
 b4c:	bc 01       	movw	r22, r24
 b4e:	62 0f       	add	r22, r18
 b50:	71 1d       	adc	r23, r1
					if ((Addr >= Isb_Firmware_Offset) & (Addr < EEP_SIZE)) {
 b52:	80 91 36 01 	lds	r24, 0x0136
 b56:	90 e0       	ldi	r25, 0x00	; 0
 b58:	68 17       	cp	r22, r24
 b5a:	79 07       	cpc	r23, r25
 b5c:	60 f1       	brcs	.+88     	; 0xbb6 <Isb_Config_Rx+0x302>
 b5e:	f2 e0       	ldi	r31, 0x02	; 2
 b60:	60 30       	cpi	r22, 0x00	; 0
 b62:	7f 07       	cpc	r23, r31
 b64:	40 f5       	brcc	.+80     	; 0xbb6 <Isb_Config_Rx+0x302>
						MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
 b66:	8e 81       	ldd	r24, Y+6	; 0x06
 b68:	80 6c       	ori	r24, 0xC0	; 192
 b6a:	8e 83       	std	Y+6, r24	; 0x06
 b6c:	90 e0       	ldi	r25, 0x00	; 0
						for (uint8_t i = 0; i < (Dlc - 3); i++) {
 b6e:	21 2f       	mov	r18, r17
 b70:	30 e0       	ldi	r19, 0x00	; 0
 b72:	23 50       	subi	r18, 0x03	; 3
 b74:	30 40       	sbci	r19, 0x00	; 0
 b76:	1a c0       	rjmp	.+52     	; 0xbac <Isb_Config_Rx+0x2f8>
							lib_eep_write_byte((uint8_t *)(Addr + i), aIsb_Msg->Data[3 + i]);
 b78:	df 01       	movw	r26, r30
 b7a:	a6 0f       	add	r26, r22
 b7c:	b7 1f       	adc	r27, r23
 b7e:	e4 0f       	add	r30, r20
 b80:	f5 1f       	adc	r31, r21
 b82:	e0 85       	ldd	r30, Z+8	; 0x08
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 b84:	f9 99       	sbic	0x1f, 1	; 31
 b86:	fe cf       	rjmp	.-4      	; 0xb84 <Isb_Config_Rx+0x2d0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 b88:	b2 bd       	out	0x22, r27	; 34
 b8a:	a1 bd       	out	0x21, r26	; 33
#endif
    EECR |= (1 << EERE);
 b8c:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 b8e:	80 b5       	in	r24, 0x20	; 32
 b90:	8e 17       	cp	r24, r30
 b92:	59 f0       	breq	.+22     	; 0xbaa <Isb_Config_Rx+0x2f6>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 b94:	f9 99       	sbic	0x1f, 1	; 31
 b96:	fe cf       	rjmp	.-4      	; 0xb94 <Isb_Config_Rx+0x2e0>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
 b98:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 b9a:	b2 bd       	out	0x22, r27	; 34
 b9c:	a1 bd       	out	0x21, r26	; 33
#endif
    EEDR = __value;
 b9e:	e0 bd       	out	0x20, r30	; 32

    __asm__ __volatile__ (
 ba0:	0f b6       	in	r0, 0x3f	; 63
 ba2:	f8 94       	cli
 ba4:	fa 9a       	sbi	0x1f, 2	; 31
 ba6:	f9 9a       	sbi	0x1f, 1	; 31
 ba8:	0f be       	out	0x3f, r0	; 63
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
					Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
					if ((Addr >= Isb_Firmware_Offset) & (Addr < EEP_SIZE)) {
						MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
						for (uint8_t i = 0; i < (Dlc - 3); i++) {
 baa:	9f 5f       	subi	r25, 0xFF	; 255
 bac:	e9 2f       	mov	r30, r25
 bae:	f0 e0       	ldi	r31, 0x00	; 0
 bb0:	e2 17       	cp	r30, r18
 bb2:	f3 07       	cpc	r31, r19
 bb4:	0c f3       	brlt	.-62     	; 0xb78 <Isb_Config_Rx+0x2c4>
						}
					}
				}
			}
		}
		MsgTx.Data[0] |= ISB_CONFIG_ANSWER_NACK;
 bb6:	8e 81       	ldd	r24, Y+6	; 0x06
 bb8:	80 64       	ori	r24, 0x40	; 64
 bba:	8e 83       	std	Y+6, r24	; 0x06
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
		MsgTx.SourceId = Isb_Node_Id;
 bbc:	fd 82       	std	Y+5, r15	; 0x05
 bbe:	ec 82       	std	Y+4, r14	; 0x04
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
 bc0:	db 82       	std	Y+3, r13	; 0x03
 bc2:	ca 82       	std	Y+2, r12	; 0x02
	void Isb_Config_Rx(Isb_Msg_t * aIsb_Msg) {
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
 bc4:	09 83       	std	Y+1, r16	; 0x01
					}
				}
			}
		}
		MsgTx.Data[0] |= ISB_CONFIG_ANSWER_NACK;
		Isb_SendMsg(&MsgTx);
 bc6:	ce 01       	movw	r24, r28
 bc8:	01 96       	adiw	r24, 0x01	; 1
 bca:	0e 94 55 04 	call	0x8aa	; 0x8aa <Isb_SendMsg>
	}
 bce:	2d 96       	adiw	r28, 0x0d	; 13
 bd0:	0f b6       	in	r0, 0x3f	; 63
 bd2:	f8 94       	cli
 bd4:	de bf       	out	0x3e, r29	; 62
 bd6:	0f be       	out	0x3f, r0	; 63
 bd8:	cd bf       	out	0x3d, r28	; 61
 bda:	cf 91       	pop	r28
 bdc:	df 91       	pop	r29
 bde:	1f 91       	pop	r17
 be0:	0f 91       	pop	r16
 be2:	ff 90       	pop	r15
 be4:	ef 90       	pop	r14
 be6:	df 90       	pop	r13
 be8:	cf 90       	pop	r12
 bea:	08 95       	ret

00000bec <lib_eep_fw_read_word>:
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    return __eerd_word (__p, eeprom_read_byte);
 bec:	20 91 36 01 	lds	r18, 0x0136
 bf0:	30 e0       	ldi	r19, 0x00	; 0
 bf2:	22 0f       	add	r18, r18
 bf4:	33 1f       	adc	r19, r19
 bf6:	82 0f       	add	r24, r18
 bf8:	93 1f       	adc	r25, r19
 bfa:	63 e5       	ldi	r22, 0x53	; 83
 bfc:	70 e0       	ldi	r23, 0x00	; 0
 bfe:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__eerd_word>



	uint16_t __attribute__((always_inline)) lib_eep_fw_read_word(uint16_t * aAddr) {
		return eeprom_read_word(Isb_Firmware_Offset + aAddr);;
	}
 c02:	08 95       	ret

00000c04 <lib_eep_read_word>:
 c04:	63 e5       	ldi	r22, 0x53	; 83
 c06:	70 e0       	ldi	r23, 0x00	; 0
 c08:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__eerd_word>



	uint16_t __attribute__((always_inline)) lib_eep_read_word(uint16_t * aAddr) {
		return eeprom_read_word(aAddr);;
	}
 c0c:	08 95       	ret

00000c0e <main>:



	int main(void) {
 c0e:	ff 92       	push	r15
 c10:	0f 93       	push	r16
 c12:	1f 93       	push	r17
 c14:	df 93       	push	r29
 c16:	cf 93       	push	r28
 c18:	cd b7       	in	r28, 0x3d	; 61
 c1a:	de b7       	in	r29, 0x3e	; 62
 c1c:	2d 97       	sbiw	r28, 0x0d	; 13
 c1e:	0f b6       	in	r0, 0x3f	; 63
 c20:	f8 94       	cli
 c22:	de bf       	out	0x3e, r29	; 62
 c24:	0f be       	out	0x3f, r0	; 63
 c26:	cd bf       	out	0x3d, r28	; 61
		wdt_enable(WDTO_500MS);
 c28:	2d e0       	ldi	r18, 0x0D	; 13
 c2a:	88 e1       	ldi	r24, 0x18	; 24
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	0f b6       	in	r0, 0x3f	; 63
 c30:	f8 94       	cli
 c32:	a8 95       	wdr
 c34:	80 93 60 00 	sts	0x0060, r24
 c38:	0f be       	out	0x3f, r0	; 63
 c3a:	20 93 60 00 	sts	0x0060, r18
		wdt_reset();
 c3e:	a8 95       	wdr
 c40:	80 e1       	ldi	r24, 0x10	; 16
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	63 e5       	ldi	r22, 0x53	; 83
 c46:	70 e0       	ldi	r23, 0x00	; 0
 c48:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__eerd_word>
		Isb_Node_Id = lib_eep_read_word((uint16_t *)EEP__ISB_NODE_ID_0);
 c4c:	90 93 35 01 	sts	0x0135, r25
 c50:	80 93 34 01 	sts	0x0134, r24
		if ((Isb_Node_Id == 0) | (Isb_Node_Id > 2047)) {
 c54:	01 97       	sbiw	r24, 0x01	; 1
 c56:	8f 5f       	subi	r24, 0xFF	; 255
 c58:	97 40       	sbci	r25, 0x07	; 7
 c5a:	c0 f0       	brcs	.+48     	; 0xc8c <main+0x7e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 c5c:	f9 99       	sbic	0x1f, 1	; 31
 c5e:	fe cf       	rjmp	.-4      	; 0xc5c <main+0x4e>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 c60:	82 e1       	ldi	r24, 0x12	; 18
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	92 bd       	out	0x22, r25	; 34
 c66:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
 c68:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 c6a:	80 b5       	in	r24, 0x20	; 32



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
 c6c:	88 23       	and	r24, r24
 c6e:	69 f0       	breq	.+26     	; 0xc8a <main+0x7c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 c70:	f9 99       	sbic	0x1f, 1	; 31
 c72:	fe cf       	rjmp	.-4      	; 0xc70 <main+0x62>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
 c74:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 c76:	82 e1       	ldi	r24, 0x12	; 18
 c78:	90 e0       	ldi	r25, 0x00	; 0
 c7a:	92 bd       	out	0x22, r25	; 34
 c7c:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
 c7e:	10 bc       	out	0x20, r1	; 32

    __asm__ __volatile__ (
 c80:	0f b6       	in	r0, 0x3f	; 63
 c82:	f8 94       	cli
 c84:	fa 9a       	sbi	0x1f, 2	; 31
 c86:	f9 9a       	sbi	0x1f, 1	; 31
 c88:	0f be       	out	0x3f, r0	; 63
 c8a:	ff cf       	rjmp	.-2      	; 0xc8a <main+0x7c>
 c8c:	2c e0       	ldi	r18, 0x0C	; 12
 c8e:	30 e0       	ldi	r19, 0x00	; 0
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
			Node_Reboot();
		}
		for (uint8_t i = 0; i < 4; i++) {
			lib_eep_write_byte((uint8_t *)(EEP__ISB_FIRMWARE_CODE_0 + i), Isb_Firmware_Code[i]);
 c90:	f9 01       	movw	r30, r18
 c92:	ec 50       	subi	r30, 0x0C	; 12
 c94:	ff 4f       	sbci	r31, 0xFF	; 255
 c96:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 c98:	f9 99       	sbic	0x1f, 1	; 31
 c9a:	fe cf       	rjmp	.-4      	; 0xc98 <main+0x8a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 c9c:	32 bd       	out	0x22, r19	; 34
 c9e:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
 ca0:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 ca2:	80 b5       	in	r24, 0x20	; 32
 ca4:	8e 17       	cp	r24, r30
 ca6:	59 f0       	breq	.+22     	; 0xcbe <main+0xb0>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 ca8:	f9 99       	sbic	0x1f, 1	; 31
 caa:	fe cf       	rjmp	.-4      	; 0xca8 <main+0x9a>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
 cac:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 cae:	32 bd       	out	0x22, r19	; 34
 cb0:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
 cb2:	e0 bd       	out	0x20, r30	; 32

    __asm__ __volatile__ (
 cb4:	0f b6       	in	r0, 0x3f	; 63
 cb6:	f8 94       	cli
 cb8:	fa 9a       	sbi	0x1f, 2	; 31
 cba:	f9 9a       	sbi	0x1f, 1	; 31
 cbc:	0f be       	out	0x3f, r0	; 63
 cbe:	2f 5f       	subi	r18, 0xFF	; 255
 cc0:	3f 4f       	sbci	r19, 0xFF	; 255
		Isb_Node_Id = lib_eep_read_word((uint16_t *)EEP__ISB_NODE_ID_0);
		if ((Isb_Node_Id == 0) | (Isb_Node_Id > 2047)) {
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
			Node_Reboot();
		}
		for (uint8_t i = 0; i < 4; i++) {
 cc2:	20 31       	cpi	r18, 0x10	; 16
 cc4:	31 05       	cpc	r19, r1
 cc6:	21 f7       	brne	.-56     	; 0xc90 <main+0x82>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 cc8:	f9 99       	sbic	0x1f, 1	; 31
 cca:	fe cf       	rjmp	.-4      	; 0xcc8 <main+0xba>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 ccc:	8a e1       	ldi	r24, 0x1A	; 26
 cce:	90 e0       	ldi	r25, 0x00	; 0
 cd0:	92 bd       	out	0x22, r25	; 34
 cd2:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
 cd4:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 cd6:	80 b5       	in	r24, 0x20	; 32
			lib_eep_write_byte((uint8_t *)(EEP__ISB_FIRMWARE_CODE_0 + i), Isb_Firmware_Code[i]);
		}
		Isb_Firmware_Offset = lib_eep_read_byte((uint8_t *)EEP__ISB_FIRMWARE_OFFSET);
 cd8:	80 93 36 01 	sts	0x0136, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 cdc:	f9 99       	sbic	0x1f, 1	; 31
 cde:	fe cf       	rjmp	.-4      	; 0xcdc <main+0xce>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 ce0:	82 e1       	ldi	r24, 0x12	; 18
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	92 bd       	out	0x22, r25	; 34
 ce6:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
 ce8:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 cea:	80 b5       	in	r24, 0x20	; 32
		Isb_Node_Operating_Mode = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
 cec:	80 93 37 01 	sts	0x0137, r24
		if ((Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_NORM) & (Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_CFG))
 cf0:	88 50       	subi	r24, 0x08	; 8
 cf2:	82 30       	cpi	r24, 0x02	; 2
 cf4:	d8 f0       	brcs	.+54     	; 0xd2c <main+0x11e>
		{
			Isb_Node_Operating_Mode = ISB_NODE_OPERATING_MODE__FW_NORM;
 cf6:	88 e0       	ldi	r24, 0x08	; 8
 cf8:	80 93 37 01 	sts	0x0137, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 cfc:	f9 99       	sbic	0x1f, 1	; 31
 cfe:	fe cf       	rjmp	.-4      	; 0xcfc <main+0xee>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 d00:	82 e1       	ldi	r24, 0x12	; 18
 d02:	90 e0       	ldi	r25, 0x00	; 0
 d04:	92 bd       	out	0x22, r25	; 34
 d06:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
 d08:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 d0a:	80 b5       	in	r24, 0x20	; 32
 d0c:	88 30       	cpi	r24, 0x08	; 8
 d0e:	71 f0       	breq	.+28     	; 0xd2c <main+0x11e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 d10:	f9 99       	sbic	0x1f, 1	; 31
 d12:	fe cf       	rjmp	.-4      	; 0xd10 <main+0x102>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
 d14:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 d16:	82 e1       	ldi	r24, 0x12	; 18
 d18:	90 e0       	ldi	r25, 0x00	; 0
 d1a:	92 bd       	out	0x22, r25	; 34
 d1c:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
 d1e:	88 e0       	ldi	r24, 0x08	; 8
 d20:	80 bd       	out	0x20, r24	; 32

    __asm__ __volatile__ (
 d22:	0f b6       	in	r0, 0x3f	; 63
 d24:	f8 94       	cli
 d26:	fa 9a       	sbi	0x1f, 2	; 31
 d28:	f9 9a       	sbi	0x1f, 1	; 31
 d2a:	0f be       	out	0x3f, r0	; 63
 d2c:	40 91 38 01 	lds	r20, 0x0138
 d30:	2c e1       	ldi	r18, 0x1C	; 28
 d32:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 d34:	f9 99       	sbic	0x1f, 1	; 31
 d36:	fe cf       	rjmp	.-4      	; 0xd34 <main+0x126>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 d38:	32 bd       	out	0x22, r19	; 34
 d3a:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
 d3c:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 d3e:	80 b5       	in	r24, 0x20	; 32
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, Isb_Node_Operating_Mode);
		}
		for (uint8_t i = 0; i < 4; i++)
		{
			if (lib_eep_read_byte((uint8_t *)(EEP__ISB_CONFIG_CODE_0 + i)) != Isb_Firmware_Code[i])
 d40:	f9 01       	movw	r30, r18
 d42:	ec 51       	subi	r30, 0x1C	; 28
 d44:	ff 4f       	sbci	r31, 0xFF	; 255
 d46:	90 81       	ld	r25, Z
 d48:	89 13       	cpse	r24, r25
			{
				Error |= ERROR__CONFIG_CODE;
 d4a:	41 60       	ori	r20, 0x01	; 1
 d4c:	2f 5f       	subi	r18, 0xFF	; 255
 d4e:	3f 4f       	sbci	r19, 0xFF	; 255
		if ((Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_NORM) & (Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_CFG))
		{
			Isb_Node_Operating_Mode = ISB_NODE_OPERATING_MODE__FW_NORM;
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, Isb_Node_Operating_Mode);
		}
		for (uint8_t i = 0; i < 4; i++)
 d50:	20 32       	cpi	r18, 0x20	; 32
 d52:	31 05       	cpc	r19, r1
 d54:	79 f7       	brne	.-34     	; 0xd34 <main+0x126>
 d56:	40 93 38 01 	sts	0x0138, r20
			if (lib_eep_read_byte((uint8_t *)(EEP__ISB_CONFIG_CODE_0 + i)) != Isb_Firmware_Code[i])
			{
				Error |= ERROR__CONFIG_CODE;
			}
		}
		sei();
 d5a:	78 94       	sei
		#endif /* ISB_INF_USART0 == 1 */
		#if ISB_INF_USART1 == 1
			Isb_Inf_Usart_Init(1);
		#endif /* ISB_INF_USART1 == 1 */
		#if ISB_INF_CAN0 == 1
			Isb_Inf_Can_Init(0);
 d5c:	80 e0       	ldi	r24, 0x00	; 0
 d5e:	0e 94 3f 03 	call	0x67e	; 0x67e <Isb_Inf_Can_Init>
			Isb_Inf_Ethernet_Init();
		#endif /* ISB_INF_ETHERNET == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
 d62:	40 91 34 01 	lds	r20, 0x0134
 d66:	50 91 35 01 	lds	r21, 0x0135
		Isb_Msg.Data[0] = ISB_MSG_TOP__SERIAL_NUMBER__MODE__ERROR;
 d6a:	81 e2       	ldi	r24, 0x21	; 33
 d6c:	8e 83       	std	Y+6, r24	; 0x06
 d6e:	fe 01       	movw	r30, r28
 d70:	37 96       	adiw	r30, 0x07	; 7
 d72:	24 e0       	ldi	r18, 0x04	; 4
 d74:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 d76:	f9 99       	sbic	0x1f, 1	; 31
 d78:	fe cf       	rjmp	.-4      	; 0xd76 <main+0x168>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 d7a:	32 bd       	out	0x22, r19	; 34
 d7c:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
 d7e:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 d80:	80 b5       	in	r24, 0x20	; 32
		for (uint8_t i = 0; i < 4; i++) {
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
 d82:	81 93       	st	Z+, r24
 d84:	2f 5f       	subi	r18, 0xFF	; 255
 d86:	3f 4f       	sbci	r19, 0xFF	; 255
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
		Isb_Msg.Data[0] = ISB_MSG_TOP__SERIAL_NUMBER__MODE__ERROR;
		for (uint8_t i = 0; i < 4; i++) {
 d88:	28 30       	cpi	r18, 0x08	; 8
 d8a:	31 05       	cpc	r19, r1
 d8c:	a1 f7       	brne	.-24     	; 0xd76 <main+0x168>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
 d8e:	f9 99       	sbic	0x1f, 1	; 31
 d90:	fe cf       	rjmp	.-4      	; 0xd8e <main+0x180>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 d92:	82 e1       	ldi	r24, 0x12	; 18
 d94:	90 e0       	ldi	r25, 0x00	; 0
 d96:	92 bd       	out	0x22, r25	; 34
 d98:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
 d9a:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
 d9c:	80 b5       	in	r24, 0x20	; 32
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
 d9e:	8b 87       	std	Y+11, r24	; 0x0b
		Isb_Msg.Data[6] = Error;
 da0:	80 91 38 01 	lds	r24, 0x0138
 da4:	8c 87       	std	Y+12, r24	; 0x0c
			Isb_Inf_Ethernet_Init();
		#endif /* ISB_INF_ETHERNET == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
 da6:	5d 83       	std	Y+5, r21	; 0x05
 da8:	4c 83       	std	Y+4, r20	; 0x04
		#if ISB_INF_ETHERNET == 1
			Isb_Inf_Ethernet_Init();
		#endif /* ISB_INF_ETHERNET == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
 daa:	82 e0       	ldi	r24, 0x02	; 2
 dac:	90 ef       	ldi	r25, 0xF0	; 240
 dae:	9b 83       	std	Y+3, r25	; 0x03
 db0:	8a 83       	std	Y+2, r24	; 0x02
		#endif /* ISB_INF_CAN2 == 1 */
		#if ISB_INF_ETHERNET == 1
			Isb_Inf_Ethernet_Init();
		#endif /* ISB_INF_ETHERNET == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
 db2:	87 e2       	ldi	r24, 0x27	; 39
 db4:	89 83       	std	Y+1, r24	; 0x01
		for (uint8_t i = 0; i < 4; i++) {
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
		Isb_Msg.Data[6] = Error;
		Isb_SendMsg(&Isb_Msg);
 db6:	8e 01       	movw	r16, r28
 db8:	0f 5f       	subi	r16, 0xFF	; 255
 dba:	1f 4f       	sbci	r17, 0xFF	; 255
 dbc:	c8 01       	movw	r24, r16
 dbe:	0e 94 55 04 	call	0x8aa	; 0x8aa <Isb_SendMsg>
//						}
//					}
				}
			#endif /* ISB_INF_USART1 == 1 */
			#if ISB_INF_CAN0 == 1
				if (Isb_Inf_Can_Rx(0, &Isb_Msg) == TRUE) {
 dc2:	f0 2e       	mov	r15, r16
 dc4:	01 2f       	mov	r16, r17
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
		Isb_Msg.Data[6] = Error;
		Isb_SendMsg(&Isb_Msg);
		for (;;) {
			wdt_reset();
 dc6:	a8 95       	wdr
//						}
//					}
				}
			#endif /* ISB_INF_USART1 == 1 */
			#if ISB_INF_CAN0 == 1
				if (Isb_Inf_Can_Rx(0, &Isb_Msg) == TRUE) {
 dc8:	80 e0       	ldi	r24, 0x00	; 0
 dca:	6f 2d       	mov	r22, r15
 dcc:	70 2f       	mov	r23, r16
 dce:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <Isb_Inf_Can_Rx>
 dd2:	81 30       	cpi	r24, 0x01	; 1
 dd4:	c1 f7       	brne	.-16     	; 0xdc6 <main+0x1b8>
						Isb_Inf_Can_Tx(2, &Isb_Msg);
					#endif /* ISB_INF_CAN2 == 1 */
					#if ISB_INF_ETHERNET == 1
						Isb_Inf_Ethernet_Tx(&Isb_Msg);
					#endif /* ISB_INF_ETHERNET == 1 */
					if ((Isb_Msg.Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_UNICAST) {
 dd6:	89 81       	ldd	r24, Y+1	; 0x01
 dd8:	80 73       	andi	r24, 0x30	; 48
 dda:	a9 f7       	brne	.-22     	; 0xdc6 <main+0x1b8>
						if (Isb_Msg.DestId == Isb_Node_Id) {
 ddc:	2a 81       	ldd	r18, Y+2	; 0x02
 dde:	3b 81       	ldd	r19, Y+3	; 0x03
 de0:	80 91 34 01 	lds	r24, 0x0134
 de4:	90 91 35 01 	lds	r25, 0x0135
 de8:	28 17       	cp	r18, r24
 dea:	39 07       	cpc	r19, r25
 dec:	61 f7       	brne	.-40     	; 0xdc6 <main+0x1b8>
							Isb_Config_Rx(&Isb_Msg);
 dee:	8f 2d       	mov	r24, r15
 df0:	90 2f       	mov	r25, r16
 df2:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Isb_Config_Rx>
 df6:	e7 cf       	rjmp	.-50     	; 0xdc6 <main+0x1b8>

00000df8 <__eerd_word>:
 df8:	df 92       	push	r13
 dfa:	ef 92       	push	r14
 dfc:	ff 92       	push	r15
 dfe:	0f 93       	push	r16
 e00:	1f 93       	push	r17
 e02:	7b 01       	movw	r14, r22
 e04:	8c 01       	movw	r16, r24
 e06:	fb 01       	movw	r30, r22
 e08:	09 95       	icall
 e0a:	d8 2e       	mov	r13, r24
 e0c:	c8 01       	movw	r24, r16
 e0e:	01 96       	adiw	r24, 0x01	; 1
 e10:	f7 01       	movw	r30, r14
 e12:	09 95       	icall
 e14:	98 2f       	mov	r25, r24
 e16:	8d 2d       	mov	r24, r13
 e18:	1f 91       	pop	r17
 e1a:	0f 91       	pop	r16
 e1c:	ff 90       	pop	r15
 e1e:	ef 90       	pop	r14
 e20:	df 90       	pop	r13
 e22:	08 95       	ret

00000e24 <_exit>:
 e24:	f8 94       	cli

00000e26 <__stop_program>:
 e26:	ff cf       	rjmp	.-2      	; 0xe26 <__stop_program>
