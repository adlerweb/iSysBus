
fw_32-0.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00003210  00003284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000102  008000a0  00003250  000032c4  2**0
                  ALLOC
  3 .stab         0000699c  00000000  00000000  000032c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000029c8  00000000  00000000  00009c60  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
       4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
       c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      4c:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__vector_19>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000054 <pgmIsb_Obj_Ch_Array>:
      54:	00 00 00 01 01 01 02 02 02 02 03 03 03 03           ..............

00000062 <pgmIsb_App_DigIn_Ch_Array>:
      62:	00 01                                               ..

00000064 <pgmIsb_App_DigIn_Pin0_Array>:
      64:	50 51                                               PQ

00000066 <pgmIsb_App_DigIn_Obj_0_Array>:
      66:	00 03                                               ..

00000068 <pgmIsb_App_DigIn_Obj_1_Array>:
      68:	01 04                                               ..

0000006a <pgmIsb_App_DigIn_Obj_2_Array>:
      6a:	02 05                                               ..

0000006c <pgmIsb_App_DigOut_Ch_Array>:
      6c:	02 03                                               ..

0000006e <pgmIsb_App_DigOut_Obj_0_Array>:
      6e:	06 0a                                               ..

00000070 <pgmIsb_App_DigOut_Obj_1_Array>:
      70:	07 0b                                               ..

00000072 <pgmIsb_App_DigOut_Obj_2_Array>:
      72:	08 0c                                               ..

00000074 <pgmIsb_App_DigOut_Obj_3_Array>:
      74:	09 0d                                               ..

00000076 <pgmIsb_App_DigOut_Pin0_Array>:
      76:	1e 1f                                               ..

00000078 <pgmIsb_App_DigOut_Pin1_Array>:
      78:	50 51                                               PQ

0000007a <__ctors_end>:
      7a:	11 24       	eor	r1, r1
      7c:	1f be       	out	0x3f, r1	; 63
      7e:	cf e5       	ldi	r28, 0x5F	; 95
      80:	d4 e0       	ldi	r29, 0x04	; 4
      82:	de bf       	out	0x3e, r29	; 62
      84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
      86:	10 e0       	ldi	r17, 0x00	; 0
      88:	a0 e6       	ldi	r26, 0x60	; 96
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	e0 e1       	ldi	r30, 0x10	; 16
      8e:	f2 e3       	ldi	r31, 0x32	; 50
      90:	02 c0       	rjmp	.+4      	; 0x96 <.do_copy_data_start>

00000092 <.do_copy_data_loop>:
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0

00000096 <.do_copy_data_start>:
      96:	a0 3a       	cpi	r26, 0xA0	; 160
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <.do_copy_data_loop>

0000009c <__do_clear_bss>:
      9c:	11 e0       	ldi	r17, 0x01	; 1
      9e:	a0 ea       	ldi	r26, 0xA0	; 160
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	a2 3a       	cpi	r26, 0xA2	; 162
      a8:	b1 07       	cpc	r27, r17
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <main>
      b0:	0c 94 06 19 	jmp	0x320c	; 0x320c <_exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000b8 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
      b8:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
      ba:	e1 99       	sbic	0x1c, 1	; 28
      bc:	fe cf       	rjmp	.-4      	; 0xba <eeprom_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
      be:	3f bb       	out	0x1f, r19	; 31
      c0:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
      c2:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
      c4:	8d b3       	in	r24, 0x1d	; 29
}
      c6:	08 95       	ret

000000c8 <lib_eep_read_byte>:
#ifndef LIB_EEP_C_
	#define LIB_EEP_C_



	uint8_t __attribute__((always_inline)) lib_eep_read_byte(uint8_t * aAddr) {
      c8:	9c 01       	movw	r18, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
      ca:	e1 99       	sbic	0x1c, 1	; 28
      cc:	fe cf       	rjmp	.-4      	; 0xca <lib_eep_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
      ce:	3f bb       	out	0x1f, r19	; 31
      d0:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
      d2:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
      d4:	8d b3       	in	r24, 0x1d	; 29
		return eeprom_read_byte(aAddr);;
	}
      d6:	08 95       	ret

000000d8 <lib_eep_write_byte>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
      d8:	e1 99       	sbic	0x1c, 1	; 28
      da:	fe cf       	rjmp	.-4      	; 0xd8 <lib_eep_write_byte>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
      dc:	9c 01       	movw	r18, r24
      de:	9f bb       	out	0x1f, r25	; 31
      e0:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
      e2:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
      e4:	8d b3       	in	r24, 0x1d	; 29
	}



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
      e6:	86 17       	cp	r24, r22
      e8:	51 f0       	breq	.+20     	; 0xfe <lib_eep_write_byte+0x26>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
      ea:	e1 99       	sbic	0x1c, 1	; 28
      ec:	fe cf       	rjmp	.-4      	; 0xea <lib_eep_write_byte+0x12>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
      ee:	3f bb       	out	0x1f, r19	; 31
      f0:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
      f2:	6d bb       	out	0x1d, r22	; 29

    __asm__ __volatile__ (
      f4:	0f b6       	in	r0, 0x3f	; 63
      f6:	f8 94       	cli
      f8:	e2 9a       	sbi	0x1c, 2	; 28
      fa:	e1 9a       	sbi	0x1c, 1	; 28
      fc:	0f be       	out	0x3f, r0	; 63
      fe:	08 95       	ret

00000100 <lib_eep_fw_read_byte>:
	}



	uint8_t __attribute__((always_inline)) lib_eep_fw_read_byte(uint8_t * aAddr) {
		return eeprom_read_byte(Isb_Firmware_Offset + aAddr);;
     100:	20 91 a7 00 	lds	r18, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     104:	e1 99       	sbic	0x1c, 1	; 28
     106:	fe cf       	rjmp	.-4      	; 0x104 <lib_eep_fw_read_byte+0x4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     108:	82 0f       	add	r24, r18
     10a:	91 1d       	adc	r25, r1
     10c:	9f bb       	out	0x1f, r25	; 31
     10e:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     110:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     112:	8d b3       	in	r24, 0x1d	; 29
	}
     114:	08 95       	ret

00000116 <lib_eep_fw_write_byte>:
		return eeprom_read_word(Isb_Firmware_Offset + aAddr);;
	}



	void __attribute__((always_inline)) lib_eep_fw_write_byte(uint8_t * aAddr, uint8_t aData) {
     116:	ac 01       	movw	r20, r24
		if (eeprom_read_byte(Isb_Firmware_Offset + aAddr) != aData) {
     118:	80 91 a7 00 	lds	r24, 0x00A7
     11c:	28 2f       	mov	r18, r24
     11e:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     120:	e1 99       	sbic	0x1c, 1	; 28
     122:	fe cf       	rjmp	.-4      	; 0x120 <lib_eep_fw_write_byte+0xa>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     124:	ca 01       	movw	r24, r20
     126:	82 0f       	add	r24, r18
     128:	93 1f       	adc	r25, r19
     12a:	9f bb       	out	0x1f, r25	; 31
     12c:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     12e:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     130:	8d b3       	in	r24, 0x1d	; 29
     132:	86 17       	cp	r24, r22
     134:	61 f0       	breq	.+24     	; 0x14e <lib_eep_fw_write_byte+0x38>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     136:	e1 99       	sbic	0x1c, 1	; 28
     138:	fe cf       	rjmp	.-4      	; 0x136 <lib_eep_fw_write_byte+0x20>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     13a:	24 0f       	add	r18, r20
     13c:	35 1f       	adc	r19, r21
     13e:	3f bb       	out	0x1f, r19	; 31
     140:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
     142:	6d bb       	out	0x1d, r22	; 29

    __asm__ __volatile__ (
     144:	0f b6       	in	r0, 0x3f	; 63
     146:	f8 94       	cli
     148:	e2 9a       	sbi	0x1c, 2	; 28
     14a:	e1 9a       	sbi	0x1c, 1	; 28
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	08 95       	ret

00000150 <Lib_Pin_Get>:
	#endif



	uint8_t Lib_Pin_Get(const uint8_t aPort, const uint8_t aPin) {
		return (*(PINx[aPort]) >> aPin) & 1;
     150:	e8 2f       	mov	r30, r24
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	ee 0f       	add	r30, r30
     156:	ff 1f       	adc	r31, r31
     158:	ec 57       	subi	r30, 0x7C	; 124
     15a:	ff 4f       	sbci	r31, 0xFF	; 255
     15c:	01 90       	ld	r0, Z+
     15e:	f0 81       	ld	r31, Z
     160:	e0 2d       	mov	r30, r0
     162:	80 81       	ld	r24, Z
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	02 c0       	rjmp	.+4      	; 0x16c <Lib_Pin_Get+0x1c>
     168:	95 95       	asr	r25
     16a:	87 95       	ror	r24
     16c:	6a 95       	dec	r22
     16e:	e2 f7       	brpl	.-8      	; 0x168 <Lib_Pin_Get+0x18>
	}
     170:	81 70       	andi	r24, 0x01	; 1
     172:	08 95       	ret

00000174 <Lib_Pin_Set>:



	void __attribute__((noinline)) Lib_Pin_Set(const uint8_t aPort, const uint8_t aPin, const uint8_t aCmd) {
     174:	91 e0       	ldi	r25, 0x01	; 1
     176:	02 c0       	rjmp	.+4      	; 0x17c <Lib_Pin_Set+0x8>
		uint8_t mask;
		uint8_t tmp;
		volatile uint8_t *reg;
		uint8_t Pxx = aPin;
		for (mask = 1; Pxx--; mask <<= 1) ;
     178:	99 0f       	add	r25, r25
     17a:	61 50       	subi	r22, 0x01	; 1
     17c:	66 23       	and	r22, r22
     17e:	e1 f7       	brne	.-8      	; 0x178 <Lib_Pin_Set+0x4>
		reg = PORTx[aPort];
     180:	a8 2f       	mov	r26, r24
     182:	b0 e0       	ldi	r27, 0x00	; 0
     184:	fd 01       	movw	r30, r26
     186:	ee 0f       	add	r30, r30
     188:	ff 1f       	adc	r31, r31
     18a:	ec 58       	subi	r30, 0x8C	; 140
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	01 90       	ld	r0, Z+
     190:	f0 81       	ld	r31, Z
     192:	e0 2d       	mov	r30, r0
		tmp = *reg | mask;
     194:	80 81       	ld	r24, Z
     196:	89 2b       	or	r24, r25
		if (! (aCmd & 2)) {
     198:	41 ff       	sbrs	r20, 1
			tmp ^= mask;
     19a:	89 27       	eor	r24, r25
		}
		*reg = tmp;
     19c:	80 83       	st	Z, r24
		reg = DDRx[aPort];
     19e:	aa 0f       	add	r26, r26
     1a0:	bb 1f       	adc	r27, r27
     1a2:	ac 59       	subi	r26, 0x9C	; 156
     1a4:	bf 4f       	sbci	r27, 0xFF	; 255
     1a6:	ed 91       	ld	r30, X+
     1a8:	fc 91       	ld	r31, X
		tmp = *reg | mask;
     1aa:	80 81       	ld	r24, Z
     1ac:	89 2b       	or	r24, r25
		if (! (aCmd & 1)) {
     1ae:	40 ff       	sbrs	r20, 0
			tmp ^= mask;
     1b0:	89 27       	eor	r24, r25
		}
		*reg = tmp;
     1b2:	80 83       	st	Z, r24
	}
     1b4:	08 95       	ret

000001b6 <Inf_Spi_Init>:
	#endif /* ISYSBUS_LIB */



	void Inf_Spi_Init(const unsigned char aCfg)
	{
     1b6:	df 93       	push	r29
     1b8:	cf 93       	push	r28
     1ba:	0f 92       	push	r0
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	89 83       	std	Y+1, r24	; 0x01

		if (bit_is_set(aCfg, SPE))
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	86 ff       	sbrs	r24, 6
     1c6:	0c c0       	rjmp	.+24     	; 0x1e0 <Inf_Spi_Init+0x2a>
		{
			if (bit_is_set(aCfg, MSTR))
     1c8:	89 81       	ldd	r24, Y+1	; 0x01
     1ca:	84 ff       	sbrs	r24, 4
     1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <Inf_Spi_Init+0x22>
			{
				INF_SPI_DDR |= (1 << INF_SPI_DD_MOSI) | (1 << INF_SPI_DD_SCK);
     1ce:	87 b3       	in	r24, 0x17	; 23
     1d0:	80 6a       	ori	r24, 0xA0	; 160
     1d2:	87 bb       	out	0x17, r24	; 23
				INF_SPI_DDR &= ~(1 << INF_SPI_DD_MISO);
     1d4:	be 98       	cbi	0x17, 6	; 23
     1d6:	07 c0       	rjmp	.+14     	; 0x1e6 <Inf_Spi_Init+0x30>
			}
			else
			{
				INF_SPI_DDR |= (1 << INF_SPI_DD_MISO);
     1d8:	be 9a       	sbi	0x17, 6	; 23
				INF_SPI_DDR &= ~(1 << INF_SPI_DD_MOSI) & ~(1 << INF_SPI_DD_SCK);
     1da:	87 b3       	in	r24, 0x17	; 23
     1dc:	8f 75       	andi	r24, 0x5F	; 95
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <Inf_Spi_Init+0x2e>
			}
		}
		else
		{
			INF_SPI_DDR &= ~(1 << INF_SPI_DD_MISO) & ~(1 << INF_SPI_DD_MOSI) & ~(1 << INF_SPI_DD_SCK);
     1e0:	87 b3       	in	r24, 0x17	; 23
     1e2:	8f 71       	andi	r24, 0x1F	; 31
     1e4:	87 bb       	out	0x17, r24	; 23
		}

		SPCR = aCfg;
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	8d b9       	out	0x0d, r24	; 13
		SPSR = 0;
     1ea:	1e b8       	out	0x0e, r1	; 14

	}
     1ec:	0f 90       	pop	r0
     1ee:	cf 91       	pop	r28
     1f0:	df 91       	pop	r29
     1f2:	08 95       	ret

000001f4 <Inf_Spi_Rx>:


	unsigned char Inf_Spi_Rx(void)
	{

		SPDR = 0;
     1f4:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     1f6:	77 9b       	sbis	0x0e, 7	; 14
     1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <Inf_Spi_Rx+0x2>
		return SPDR;
     1fa:	8f b1       	in	r24, 0x0f	; 15

	}
     1fc:	08 95       	ret

000001fe <Inf_Spi_Tx>:


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     1fe:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     200:	77 9b       	sbis	0x0e, 7	; 14
     202:	fe cf       	rjmp	.-4      	; 0x200 <Inf_Spi_Tx+0x2>

	}
     204:	08 95       	ret

00000206 <Inf_Spi_TxRx>:


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     206:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     208:	77 9b       	sbis	0x0e, 7	; 14
     20a:	fe cf       	rjmp	.-4      	; 0x208 <Inf_Spi_TxRx+0x2>
		return SPDR;
     20c:	8f b1       	in	r24, 0x0f	; 15

	}
     20e:	08 95       	ret

00000210 <Lib_Mcp2515_Read>:
#ifndef LIB_MCP2515_C_
	#define LIB_MCP2515_C_



	uint8_t Lib_Mcp2515_Read(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr) {
     210:	ff 92       	push	r15
     212:	0f 93       	push	r16
     214:	1f 93       	push	r17
     216:	08 2f       	mov	r16, r24
     218:	f6 2e       	mov	r15, r22
     21a:	14 2f       	mov	r17, r20
		uint8_t aData;
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     21c:	41 e0       	ldi	r20, 0x01	; 1
     21e:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     222:	83 e0       	ldi	r24, 0x03	; 3
     224:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     226:	77 9b       	sbis	0x0e, 7	; 14
     228:	fe cf       	rjmp	.-4      	; 0x226 <Lib_Mcp2515_Read+0x16>
		return SPDR;
     22a:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     22c:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     22e:	77 9b       	sbis	0x0e, 7	; 14
     230:	fe cf       	rjmp	.-4      	; 0x22e <Lib_Mcp2515_Read+0x1e>
		return SPDR;
     232:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     234:	8f ef       	ldi	r24, 0xFF	; 255
     236:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     238:	77 9b       	sbis	0x0e, 7	; 14
     23a:	fe cf       	rjmp	.-4      	; 0x238 <Lib_Mcp2515_Read+0x28>
		return SPDR;
     23c:	1f b1       	in	r17, 0x0f	; 15
		Inf_Spi_TxRx(LIB_MCP2515_READ);
		Inf_Spi_TxRx(aAddr);
		aData = Inf_Spi_TxRx(0xff);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     23e:	80 2f       	mov	r24, r16
     240:	6f 2d       	mov	r22, r15
     242:	43 e0       	ldi	r20, 0x03	; 3
     244:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>
		return aData;
	}
     248:	81 2f       	mov	r24, r17
     24a:	1f 91       	pop	r17
     24c:	0f 91       	pop	r16
     24e:	ff 90       	pop	r15
     250:	08 95       	ret

00000252 <Lib_Mcp2515_Write>:



	void Lib_Mcp2515_Write(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr, const uint8_t aData) {
     252:	ef 92       	push	r14
     254:	ff 92       	push	r15
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	08 2f       	mov	r16, r24
     25c:	f6 2e       	mov	r15, r22
     25e:	14 2f       	mov	r17, r20
     260:	e2 2e       	mov	r14, r18
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     262:	41 e0       	ldi	r20, 0x01	; 1
     264:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     26c:	77 9b       	sbis	0x0e, 7	; 14
     26e:	fe cf       	rjmp	.-4      	; 0x26c <Lib_Mcp2515_Write+0x1a>
		return SPDR;
     270:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     272:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     274:	77 9b       	sbis	0x0e, 7	; 14
     276:	fe cf       	rjmp	.-4      	; 0x274 <Lib_Mcp2515_Write+0x22>
		return SPDR;
     278:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     27a:	ef b8       	out	0x0f, r14	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     27c:	77 9b       	sbis	0x0e, 7	; 14
     27e:	fe cf       	rjmp	.-4      	; 0x27c <Lib_Mcp2515_Write+0x2a>
		return SPDR;
     280:	8f b1       	in	r24, 0x0f	; 15
		Inf_Spi_TxRx(LIB_MCP2515_WRITE);
		Inf_Spi_TxRx(aAddr);
		Inf_Spi_TxRx(aData);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     282:	80 2f       	mov	r24, r16
     284:	6f 2d       	mov	r22, r15
     286:	43 e0       	ldi	r20, 0x03	; 3
     288:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>
	}
     28c:	1f 91       	pop	r17
     28e:	0f 91       	pop	r16
     290:	ff 90       	pop	r15
     292:	ef 90       	pop	r14
     294:	08 95       	ret

00000296 <Lib_Mcp2515_Modify>:



	void Lib_Mcp2515_Modify(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr, const uint8_t aMask, const uint8_t aData) {
     296:	df 92       	push	r13
     298:	ef 92       	push	r14
     29a:	ff 92       	push	r15
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	e8 2e       	mov	r14, r24
     2a2:	d6 2e       	mov	r13, r22
     2a4:	14 2f       	mov	r17, r20
     2a6:	f2 2e       	mov	r15, r18
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     2a8:	41 e0       	ldi	r20, 0x01	; 1
     2aa:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     2ae:	85 e0       	ldi	r24, 0x05	; 5
     2b0:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2b2:	77 9b       	sbis	0x0e, 7	; 14
     2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <Lib_Mcp2515_Modify+0x1c>
		return SPDR;
     2b6:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     2b8:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2ba:	77 9b       	sbis	0x0e, 7	; 14
     2bc:	fe cf       	rjmp	.-4      	; 0x2ba <Lib_Mcp2515_Modify+0x24>
		return SPDR;
     2be:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     2c0:	ff b8       	out	0x0f, r15	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2c2:	77 9b       	sbis	0x0e, 7	; 14
     2c4:	fe cf       	rjmp	.-4      	; 0x2c2 <Lib_Mcp2515_Modify+0x2c>
		return SPDR;
     2c6:	8f b1       	in	r24, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     2c8:	0f b9       	out	0x0f, r16	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2ca:	77 9b       	sbis	0x0e, 7	; 14
     2cc:	fe cf       	rjmp	.-4      	; 0x2ca <Lib_Mcp2515_Modify+0x34>
		return SPDR;
     2ce:	8f b1       	in	r24, 0x0f	; 15
		Inf_Spi_TxRx(LIB_MCP2515_BIT_MODIFY);
		Inf_Spi_TxRx(aAddr);
		Inf_Spi_TxRx(aMask);
		Inf_Spi_TxRx(aData);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     2d0:	8e 2d       	mov	r24, r14
     2d2:	6d 2d       	mov	r22, r13
     2d4:	43 e0       	ldi	r20, 0x03	; 3
     2d6:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>
	}
     2da:	1f 91       	pop	r17
     2dc:	0f 91       	pop	r16
     2de:	ff 90       	pop	r15
     2e0:	ef 90       	pop	r14
     2e2:	df 90       	pop	r13
     2e4:	08 95       	ret

000002e6 <Inf_Can_Init>:
	#define INF_CAN_C_



	#if defined(INF_CAN0_TX) || defined(INF_CAN0_RX) || defined(INF_CAN1_TX) || defined(INF_CAN1_RX) || defined(INF_CAN2_TX) || defined(INF_CAN2_RX)
		uint8_t Inf_Can_Init(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aCnf1, const uint8_t aCnf2, const uint8_t aCnf3, const uint8_t aRSPort, const uint8_t aRSPin, const uint8_t aMode) {
     2e6:	8f 92       	push	r8
     2e8:	9f 92       	push	r9
     2ea:	af 92       	push	r10
     2ec:	bf 92       	push	r11
     2ee:	cf 92       	push	r12
     2f0:	df 92       	push	r13
     2f2:	ef 92       	push	r14
     2f4:	ff 92       	push	r15
     2f6:	0f 93       	push	r16
     2f8:	1f 93       	push	r17
     2fa:	df 93       	push	r29
     2fc:	cf 93       	push	r28
     2fe:	cd b7       	in	r28, 0x3d	; 61
     300:	de b7       	in	r29, 0x3e	; 62
     302:	f8 2e       	mov	r15, r24
     304:	d6 2e       	mov	r13, r22
     306:	14 2f       	mov	r17, r20
     308:	b2 2e       	mov	r11, r18
     30a:	90 2e       	mov	r9, r16
     30c:	0c 2d       	mov	r16, r12
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     30e:	43 e0       	ldi	r20, 0x03	; 3
     310:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     314:	81 2f       	mov	r24, r17
     316:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     31a:	8f 2d       	mov	r24, r15
     31c:	6d 2d       	mov	r22, r13
     31e:	41 e0       	ldi	r20, 0x01	; 1
     320:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     324:	80 ec       	ldi	r24, 0xC0	; 192
     326:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     328:	77 9b       	sbis	0x0e, 7	; 14
     32a:	fe cf       	rjmp	.-4      	; 0x328 <Inf_Can_Init+0x42>
		return SPDR;
     32c:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_TxRx(LIB_MCP2515_RESET);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     32e:	8f 2d       	mov	r24, r15
     330:	6d 2d       	mov	r22, r13
     332:	43 e0       	ldi	r20, 0x03	; 3
     334:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     338:	8c ec       	ldi	r24, 0xCC	; 204
     33a:	9c e1       	ldi	r25, 0x1C	; 28
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <Inf_Can_Init+0x56>
			_delay_ms(2);
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF1, aCnf1);
     340:	8f 2d       	mov	r24, r15
     342:	6d 2d       	mov	r22, r13
     344:	4a e2       	ldi	r20, 0x2A	; 42
     346:	2b 2d       	mov	r18, r11
     348:	0e 94 29 01 	call	0x252	; 0x252 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF2, aCnf2);
     34c:	8f 2d       	mov	r24, r15
     34e:	6d 2d       	mov	r22, r13
     350:	49 e2       	ldi	r20, 0x29	; 41
     352:	29 2d       	mov	r18, r9
     354:	0e 94 29 01 	call	0x252	; 0x252 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF3, aCnf3);
     358:	8f 2d       	mov	r24, r15
     35a:	6d 2d       	mov	r22, r13
     35c:	48 e2       	ldi	r20, 0x28	; 40
     35e:	2e 2d       	mov	r18, r14
     360:	0e 94 29 01 	call	0x252	; 0x252 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_RXB0CTRL, 0x64);
     364:	8f 2d       	mov	r24, r15
     366:	6d 2d       	mov	r22, r13
     368:	40 e6       	ldi	r20, 0x60	; 96
     36a:	24 e6       	ldi	r18, 0x64	; 100
     36c:	0e 94 29 01 	call	0x252	; 0x252 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_RXB1CTRL, 0x60);
     370:	8f 2d       	mov	r24, r15
     372:	6d 2d       	mov	r22, r13
     374:	40 e7       	ldi	r20, 0x70	; 112
     376:	20 e6       	ldi	r18, 0x60	; 96
     378:	0e 94 29 01 	call	0x252	; 0x252 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CANINTE, 0x03);
     37c:	8f 2d       	mov	r24, r15
     37e:	6d 2d       	mov	r22, r13
     380:	4b e2       	ldi	r20, 0x2B	; 43
     382:	23 e0       	ldi	r18, 0x03	; 3
     384:	0e 94 29 01 	call	0x252	; 0x252 <Lib_Mcp2515_Write>
			if (aRSPort != 0) {
     388:	00 23       	and	r16, r16
     38a:	c9 f0       	breq	.+50     	; 0x3be <Inf_Can_Init+0xd8>
				if (aRSPort < 8) {
     38c:	08 30       	cpi	r16, 0x08	; 8
     38e:	30 f4       	brcc	.+12     	; 0x39c <Inf_Can_Init+0xb6>
					Lib_Pin_Set(aRSPort, aRSPin, LIB_PIN_OUTPUT_LOW);
     390:	80 2f       	mov	r24, r16
     392:	6a 2d       	mov	r22, r10
     394:	41 e0       	ldi	r20, 0x01	; 1
     396:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>
     39a:	11 c0       	rjmp	.+34     	; 0x3be <Inf_Can_Init+0xd8>
				}
//				else if (aRSPort < 16) {
//					Lib_Pin_Set(aRSPort, aRSPin, LIB_PIN_OUTPUT_HIGH);
//				}
				else if (aRSPort == 0xFC) {
     39c:	0c 3f       	cpi	r16, 0xFC	; 252
     39e:	31 f4       	brne	.+12     	; 0x3ac <Inf_Can_Init+0xc6>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x14, 0x04);
     3a0:	8f 2d       	mov	r24, r15
     3a2:	6d 2d       	mov	r22, r13
     3a4:	4c e0       	ldi	r20, 0x0C	; 12
     3a6:	24 e1       	ldi	r18, 0x14	; 20
     3a8:	04 e0       	ldi	r16, 0x04	; 4
     3aa:	07 c0       	rjmp	.+14     	; 0x3ba <Inf_Can_Init+0xd4>
				}
				else if (aRSPort == 0xFD) {
     3ac:	0d 3f       	cpi	r16, 0xFD	; 253
     3ae:	39 f4       	brne	.+14     	; 0x3be <Inf_Can_Init+0xd8>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x28, 0x08);
     3b0:	8f 2d       	mov	r24, r15
     3b2:	6d 2d       	mov	r22, r13
     3b4:	4c e0       	ldi	r20, 0x0C	; 12
     3b6:	28 e2       	ldi	r18, 0x28	; 40
     3b8:	08 e0       	ldi	r16, 0x08	; 8
     3ba:	0e 94 4b 01 	call	0x296	; 0x296 <Lib_Mcp2515_Modify>
//				}
//				else if (aRSPort == 0xFF) {
//					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x28, 0x28);
//				}
			}
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x0C);
     3be:	8f 2d       	mov	r24, r15
     3c0:	6d 2d       	mov	r22, r13
     3c2:	4c e0       	ldi	r20, 0x0C	; 12
     3c4:	2c e0       	ldi	r18, 0x0C	; 12
     3c6:	0e 94 29 01 	call	0x252	; 0x252 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_CANCTRL, 0xE0, aMode);
     3ca:	8f 2d       	mov	r24, r15
     3cc:	6d 2d       	mov	r22, r13
     3ce:	4f e0       	ldi	r20, 0x0F	; 15
     3d0:	20 ee       	ldi	r18, 0xE0	; 224
     3d2:	08 2d       	mov	r16, r8
     3d4:	0e 94 4b 01 	call	0x296	; 0x296 <Lib_Mcp2515_Modify>
			if (((Lib_Mcp2515_Read(aSSPort, aSSPin, LIB_MCP2515_CANCTRL)) & 0xE0) == aMode) {
     3d8:	8f 2d       	mov	r24, r15
     3da:	6d 2d       	mov	r22, r13
     3dc:	4f e0       	ldi	r20, 0x0F	; 15
     3de:	0e 94 08 01 	call	0x210	; 0x210 <Lib_Mcp2515_Read>
     3e2:	40 e0       	ldi	r20, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	80 7e       	andi	r24, 0xE0	; 224
     3e8:	90 70       	andi	r25, 0x00	; 0
     3ea:	28 2d       	mov	r18, r8
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	82 17       	cp	r24, r18
     3f0:	93 07       	cpc	r25, r19
     3f2:	09 f4       	brne	.+2      	; 0x3f6 <Inf_Can_Init+0x110>
     3f4:	41 e0       	ldi	r20, 0x01	; 1
				return TRUE;
			}
			return FALSE;
		}
     3f6:	84 2f       	mov	r24, r20
     3f8:	cf 91       	pop	r28
     3fa:	df 91       	pop	r29
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	df 90       	pop	r13
     406:	cf 90       	pop	r12
     408:	bf 90       	pop	r11
     40a:	af 90       	pop	r10
     40c:	9f 90       	pop	r9
     40e:	8f 90       	pop	r8
     410:	08 95       	ret

00000412 <Inf_Can_Rx>:
	#endif /* INF_CAN0_TX || INF_CAN0_RX || INF_CAN1_TX || INF_CAN1_RX || INF_CAN2_TX || INF_CAN2_RX */



	#if defined(INF_CAN0_RX) || defined(INF_CAN1_RX) || defined(INF_CAN2_RX)
		uint8_t Inf_Can_Rx(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aRSPort, const uint8_t aRSPin, Inf_Can_Msg_t * aInf_Can_Msg) {
     412:	df 92       	push	r13
     414:	ef 92       	push	r14
     416:	ff 92       	push	r15
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	df 93       	push	r29
     41e:	cf 93       	push	r28
     420:	0f 92       	push	r0
     422:	cd b7       	in	r28, 0x3d	; 61
     424:	de b7       	in	r29, 0x3e	; 62
     426:	08 2f       	mov	r16, r24
     428:	d6 2e       	mov	r13, r22
     42a:	14 2f       	mov	r17, r20
			uint8_t State = 0;
     42c:	19 82       	std	Y+1, r1	; 0x01
			uint8_t CmdSave = 0;
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     42e:	43 e0       	ldi	r20, 0x03	; 3
     430:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     434:	81 2f       	mov	r24, r17
     436:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     43a:	80 2f       	mov	r24, r16
     43c:	6d 2d       	mov	r22, r13
     43e:	41 e0       	ldi	r20, 0x01	; 1
     440:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     444:	80 eb       	ldi	r24, 0xB0	; 176
     446:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     448:	77 9b       	sbis	0x0e, 7	; 14
     44a:	fe cf       	rjmp	.-4      	; 0x448 <Inf_Can_Rx+0x36>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     44c:	8f ef       	ldi	r24, 0xFF	; 255
     44e:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     450:	77 9b       	sbis	0x0e, 7	; 14
     452:	fe cf       	rjmp	.-4      	; 0x450 <Inf_Can_Rx+0x3e>
		return SPDR;
     454:	9f b1       	in	r25, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     456:	8f ef       	ldi	r24, 0xFF	; 255
     458:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     45a:	77 9b       	sbis	0x0e, 7	; 14
     45c:	fe cf       	rjmp	.-4      	; 0x45a <Inf_Can_Rx+0x48>
		return SPDR;
     45e:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_Tx(LIB_MCP2515_RX_STATUS);
			State = Inf_Spi_TxRx(0xFF);
     460:	99 83       	std	Y+1, r25	; 0x01
			Inf_Spi_TxRx(0xFF);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     462:	80 2f       	mov	r24, r16
     464:	6d 2d       	mov	r22, r13
     466:	43 e0       	ldi	r20, 0x03	; 3
     468:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>
			if (bit_is_set(State, LIB_MCP2515_RX_STATUS_INSTRUCTION_CANINTF_RX0IF)) {
     46c:	89 81       	ldd	r24, Y+1	; 0x01
     46e:	86 ff       	sbrs	r24, 6
     470:	02 c0       	rjmp	.+4      	; 0x476 <__stack+0x17>
     472:	10 e9       	ldi	r17, 0x90	; 144
     474:	06 c0       	rjmp	.+12     	; 0x482 <__stack+0x23>
				CmdSave = LIB_MCP2515_READ_RX_BUFFER0;
			}
			else if (bit_is_set(State, LIB_MCP2515_RX_STATUS_INSTRUCTION_CANINTF_RX1IF)) {
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	87 fd       	sbrc	r24, 7
     47a:	02 c0       	rjmp	.+4      	; 0x480 <__stack+0x21>
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	47 c0       	rjmp	.+142    	; 0x50e <__stack+0xaf>
     480:	14 e9       	ldi	r17, 0x94	; 148
				CmdSave = LIB_MCP2515_READ_RX_BUFFER1;
			}
			else {
				return FALSE;
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     482:	80 2f       	mov	r24, r16
     484:	6d 2d       	mov	r22, r13
     486:	41 e0       	ldi	r20, 0x01	; 1
     488:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     48c:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     48e:	77 9b       	sbis	0x0e, 7	; 14
     490:	fe cf       	rjmp	.-4      	; 0x48e <__stack+0x2f>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     492:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     494:	77 9b       	sbis	0x0e, 7	; 14
     496:	fe cf       	rjmp	.-4      	; 0x494 <__stack+0x35>
		return SPDR;
     498:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_Tx(CmdSave);
			aInf_Can_Msg->SIdH = Inf_Spi_TxRx(0x00);
     49a:	f7 01       	movw	r30, r14
     49c:	81 83       	std	Z+1, r24	; 0x01


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     49e:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4a0:	77 9b       	sbis	0x0e, 7	; 14
     4a2:	fe cf       	rjmp	.-4      	; 0x4a0 <__stack+0x41>
		return SPDR;
     4a4:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->SIdL = Inf_Spi_TxRx(0x00);
     4a6:	f7 01       	movw	r30, r14
     4a8:	80 83       	st	Z, r24


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     4aa:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4ac:	77 9b       	sbis	0x0e, 7	; 14
     4ae:	fe cf       	rjmp	.-4      	; 0x4ac <__stack+0x4d>
		return SPDR;
     4b0:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->EIdH = Inf_Spi_TxRx(0x00);
     4b2:	f7 01       	movw	r30, r14
     4b4:	83 83       	std	Z+3, r24	; 0x03


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     4b6:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4b8:	77 9b       	sbis	0x0e, 7	; 14
     4ba:	fe cf       	rjmp	.-4      	; 0x4b8 <__stack+0x59>
		return SPDR;
     4bc:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->EIdL = Inf_Spi_TxRx(0x00);
     4be:	f7 01       	movw	r30, r14
     4c0:	82 83       	std	Z+2, r24	; 0x02


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     4c2:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4c4:	77 9b       	sbis	0x0e, 7	; 14
     4c6:	fe cf       	rjmp	.-4      	; 0x4c4 <__stack+0x65>
		return SPDR;
     4c8:	8f b1       	in	r24, 0x0f	; 15
			aInf_Can_Msg->Dlc = Inf_Spi_TxRx(0x00);
     4ca:	f7 01       	movw	r30, r14
     4cc:	84 83       	std	Z+4, r24	; 0x04
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
     4ce:	84 81       	ldd	r24, Z+4	; 0x04
     4d0:	86 fd       	sbrc	r24, 6
     4d2:	10 c0       	rjmp	.+32     	; 0x4f4 <__stack+0x95>
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	09 c0       	rjmp	.+18     	; 0x4ea <__stack+0x8b>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     4d8:	1f b8       	out	0x0f, r1	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     4da:	77 9b       	sbis	0x0e, 7	; 14
     4dc:	fe cf       	rjmp	.-4      	; 0x4da <__stack+0x7b>
		return SPDR;
     4de:	8f b1       	in	r24, 0x0f	; 15
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
     4e0:	f7 01       	movw	r30, r14
     4e2:	e9 0f       	add	r30, r25
     4e4:	f1 1d       	adc	r31, r1
     4e6:	85 83       	std	Z+5, r24	; 0x05
			aInf_Can_Msg->SIdL = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->EIdH = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->EIdL = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->Dlc = Inf_Spi_TxRx(0x00);
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
     4e8:	9f 5f       	subi	r25, 0xFF	; 255
     4ea:	f7 01       	movw	r30, r14
     4ec:	84 81       	ldd	r24, Z+4	; 0x04
     4ee:	98 17       	cp	r25, r24
     4f0:	98 f3       	brcs	.-26     	; 0x4d8 <__stack+0x79>
     4f2:	07 c0       	rjmp	.+14     	; 0x502 <__stack+0xa3>
     4f4:	f7 01       	movw	r30, r14
     4f6:	80 e0       	ldi	r24, 0x00	; 0
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
				}
			}
			else {
				for (uint8_t i = 0; i < 8; i++) {
					aInf_Can_Msg->Data[i] = 0x00;
     4f8:	15 82       	std	Z+5, r1	; 0x05
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
				}
			}
			else {
				for (uint8_t i = 0; i < 8; i++) {
     4fa:	8f 5f       	subi	r24, 0xFF	; 255
     4fc:	31 96       	adiw	r30, 0x01	; 1
     4fe:	88 30       	cpi	r24, 0x08	; 8
     500:	d9 f7       	brne	.-10     	; 0x4f8 <__stack+0x99>
					aInf_Can_Msg->Data[i] = 0x00;
				}
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     502:	80 2f       	mov	r24, r16
     504:	6d 2d       	mov	r22, r13
     506:	43 e0       	ldi	r20, 0x03	; 3
     508:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>
     50c:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
		}
     50e:	0f 90       	pop	r0
     510:	cf 91       	pop	r28
     512:	df 91       	pop	r29
     514:	1f 91       	pop	r17
     516:	0f 91       	pop	r16
     518:	ff 90       	pop	r15
     51a:	ef 90       	pop	r14
     51c:	df 90       	pop	r13
     51e:	08 95       	ret

00000520 <Inf_Can_Tx>:
	#endif /* INF_CAN0_RX || INF_CAN1_RX || INF_CAN2_RX */



	#if defined(INF_CAN0_TX) || defined(INF_CAN1_TX) || defined(INF_CAN2_TX)
		uint8_t Inf_Can_Tx(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aRSPort, const uint8_t aRSPin, Inf_Can_Msg_t * aInf_Can_Msg) {
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	df 93       	push	r29
     52e:	cf 93       	push	r28
     530:	0f 92       	push	r0
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
     536:	08 2f       	mov	r16, r24
     538:	d6 2e       	mov	r13, r22
     53a:	14 2f       	mov	r17, r20
			uint8_t State = 0;
     53c:	19 82       	std	Y+1, r1	; 0x01
			uint8_t CmdLoad = 0;
			uint8_t CmdSend = 0;
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     53e:	43 e0       	ldi	r20, 0x03	; 3
     540:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     544:	81 2f       	mov	r24, r17
     546:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     54a:	80 2f       	mov	r24, r16
     54c:	6d 2d       	mov	r22, r13
     54e:	41 e0       	ldi	r20, 0x01	; 1
     550:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     554:	80 ea       	ldi	r24, 0xA0	; 160
     556:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     558:	77 9b       	sbis	0x0e, 7	; 14
     55a:	fe cf       	rjmp	.-4      	; 0x558 <Inf_Can_Tx+0x38>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     55c:	8f ef       	ldi	r24, 0xFF	; 255
     55e:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     560:	77 9b       	sbis	0x0e, 7	; 14
     562:	fe cf       	rjmp	.-4      	; 0x560 <Inf_Can_Tx+0x40>
		return SPDR;
     564:	9f b1       	in	r25, 0x0f	; 15


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     566:	8f ef       	ldi	r24, 0xFF	; 255
     568:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     56a:	77 9b       	sbis	0x0e, 7	; 14
     56c:	fe cf       	rjmp	.-4      	; 0x56a <Inf_Can_Tx+0x4a>
		return SPDR;
     56e:	8f b1       	in	r24, 0x0f	; 15
			Inf_Spi_Tx(LIB_MCP2515_READ_STATUS);
			State = Inf_Spi_TxRx(0xFF);
     570:	99 83       	std	Y+1, r25	; 0x01
			Inf_Spi_TxRx(0xFF);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     572:	80 2f       	mov	r24, r16
     574:	6d 2d       	mov	r22, r13
     576:	43 e0       	ldi	r20, 0x03	; 3
     578:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>
			if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB0CTRL_TXREQ)) {
     57c:	89 81       	ldd	r24, Y+1	; 0x01
     57e:	82 fd       	sbrc	r24, 2
     580:	04 c0       	rjmp	.+8      	; 0x58a <Inf_Can_Tx+0x6a>
     582:	10 e4       	ldi	r17, 0x40	; 64
     584:	61 e8       	ldi	r22, 0x81	; 129
     586:	c6 2e       	mov	r12, r22
     588:	0f c0       	rjmp	.+30     	; 0x5a8 <Inf_Can_Tx+0x88>
				CmdLoad = LIB_MCP2515_LOAD_TX_BUFFER0;
				CmdSend = LIB_MCP2515_RTS_TX0;
			}
			else if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB1CTRL_TXREQ)) {
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	84 fd       	sbrc	r24, 4
     58e:	04 c0       	rjmp	.+8      	; 0x598 <Inf_Can_Tx+0x78>
     590:	12 e4       	ldi	r17, 0x42	; 66
     592:	52 e8       	ldi	r21, 0x82	; 130
     594:	c5 2e       	mov	r12, r21
     596:	08 c0       	rjmp	.+16     	; 0x5a8 <Inf_Can_Tx+0x88>
				CmdLoad = LIB_MCP2515_LOAD_TX_BUFFER1;
				CmdSend = LIB_MCP2515_RTS_TX1;
			}
			else if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB2CTRL_TXREQ)) {
     598:	89 81       	ldd	r24, Y+1	; 0x01
     59a:	86 ff       	sbrs	r24, 6
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <Inf_Can_Tx+0x82>
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	48 c0       	rjmp	.+144    	; 0x632 <Inf_Can_Tx+0x112>
     5a2:	14 e4       	ldi	r17, 0x44	; 68
     5a4:	44 e8       	ldi	r20, 0x84	; 132
     5a6:	c4 2e       	mov	r12, r20
				CmdSend = LIB_MCP2515_RTS_TX2;
			}
			else {
				return FALSE;
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     5a8:	80 2f       	mov	r24, r16
     5aa:	6d 2d       	mov	r22, r13
     5ac:	41 e0       	ldi	r20, 0x01	; 1
     5ae:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     5b2:	1f b9       	out	0x0f, r17	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5b4:	77 9b       	sbis	0x0e, 7	; 14
     5b6:	fe cf       	rjmp	.-4      	; 0x5b4 <Inf_Can_Tx+0x94>
			Inf_Spi_Tx(CmdLoad);
			Inf_Spi_Tx(aInf_Can_Msg->SIdH);
     5b8:	f7 01       	movw	r30, r14
     5ba:	81 81       	ldd	r24, Z+1	; 0x01


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     5bc:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5be:	77 9b       	sbis	0x0e, 7	; 14
     5c0:	fe cf       	rjmp	.-4      	; 0x5be <Inf_Can_Tx+0x9e>
			Inf_Spi_Tx(aInf_Can_Msg->SIdL);
     5c2:	f7 01       	movw	r30, r14
     5c4:	80 81       	ld	r24, Z


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     5c6:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5c8:	77 9b       	sbis	0x0e, 7	; 14
     5ca:	fe cf       	rjmp	.-4      	; 0x5c8 <Inf_Can_Tx+0xa8>
			Inf_Spi_Tx(aInf_Can_Msg->EIdH);
     5cc:	f7 01       	movw	r30, r14
     5ce:	83 81       	ldd	r24, Z+3	; 0x03


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     5d0:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5d2:	77 9b       	sbis	0x0e, 7	; 14
     5d4:	fe cf       	rjmp	.-4      	; 0x5d2 <Inf_Can_Tx+0xb2>
			Inf_Spi_Tx(aInf_Can_Msg->EIdL);
     5d6:	f7 01       	movw	r30, r14
     5d8:	82 81       	ldd	r24, Z+2	; 0x02


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     5da:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5dc:	77 9b       	sbis	0x0e, 7	; 14
     5de:	fe cf       	rjmp	.-4      	; 0x5dc <Inf_Can_Tx+0xbc>
			Inf_Spi_Tx(aInf_Can_Msg->Dlc);
     5e0:	f7 01       	movw	r30, r14
     5e2:	24 81       	ldd	r18, Z+4	; 0x04


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     5e4:	2f b9       	out	0x0f, r18	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     5e6:	77 9b       	sbis	0x0e, 7	; 14
     5e8:	fe cf       	rjmp	.-4      	; 0x5e6 <Inf_Can_Tx+0xc6>
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
     5ea:	f7 01       	movw	r30, r14
     5ec:	84 81       	ldd	r24, Z+4	; 0x04
     5ee:	86 fd       	sbrc	r24, 6
     5f0:	0c c0       	rjmp	.+24     	; 0x60a <Inf_Can_Tx+0xea>
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	08 c0       	rjmp	.+16     	; 0x606 <Inf_Can_Tx+0xe6>
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++)
				{
					Inf_Spi_Tx(aInf_Can_Msg->Data[i]);
     5f6:	f7 01       	movw	r30, r14
     5f8:	e9 0f       	add	r30, r25
     5fa:	f1 1d       	adc	r31, r1
     5fc:	85 81       	ldd	r24, Z+5	; 0x05


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     5fe:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     600:	77 9b       	sbis	0x0e, 7	; 14
     602:	fe cf       	rjmp	.-4      	; 0x600 <Inf_Can_Tx+0xe0>
			Inf_Spi_Tx(aInf_Can_Msg->SIdL);
			Inf_Spi_Tx(aInf_Can_Msg->EIdH);
			Inf_Spi_Tx(aInf_Can_Msg->EIdL);
			Inf_Spi_Tx(aInf_Can_Msg->Dlc);
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++)
     604:	9f 5f       	subi	r25, 0xFF	; 255
     606:	92 17       	cp	r25, r18
     608:	b0 f3       	brcs	.-20     	; 0x5f6 <Inf_Can_Tx+0xd6>
				{
					Inf_Spi_Tx(aInf_Can_Msg->Data[i]);
				}
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     60a:	80 2f       	mov	r24, r16
     60c:	6d 2d       	mov	r22, r13
     60e:	43 e0       	ldi	r20, 0x03	; 3
     610:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>
			asm volatile("nop");
     614:	00 00       	nop
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     616:	80 2f       	mov	r24, r16
     618:	6d 2d       	mov	r22, r13
     61a:	41 e0       	ldi	r20, 0x01	; 1
     61c:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     620:	cf b8       	out	0x0f, r12	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     622:	77 9b       	sbis	0x0e, 7	; 14
     624:	fe cf       	rjmp	.-4      	; 0x622 <Inf_Can_Tx+0x102>
			Inf_Spi_Tx(CmdSend);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     626:	80 2f       	mov	r24, r16
     628:	6d 2d       	mov	r22, r13
     62a:	43 e0       	ldi	r20, 0x03	; 3
     62c:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>
     630:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
		}
     632:	0f 90       	pop	r0
     634:	cf 91       	pop	r28
     636:	df 91       	pop	r29
     638:	1f 91       	pop	r17
     63a:	0f 91       	pop	r16
     63c:	ff 90       	pop	r15
     63e:	ef 90       	pop	r14
     640:	df 90       	pop	r13
     642:	cf 90       	pop	r12
     644:	08 95       	ret

00000646 <Isb_Inf_Can_Init>:
#ifndef ISB_INF_CAN_C_
	#define ISB_INF_CAN_C_



	uint8_t Isb_Inf_Can_Init(const uint8_t aInf) {
     646:	8f 92       	push	r8
     648:	af 92       	push	r10
     64a:	cf 92       	push	r12
     64c:	ef 92       	push	r14
     64e:	0f 93       	push	r16
		uint8_t Result = FALSE;
		switch (aInf) {
     650:	88 23       	and	r24, r24
     652:	11 f0       	breq	.+4      	; 0x658 <Isb_Inf_Can_Init+0x12>
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	0d c0       	rjmp	.+26     	; 0x672 <Isb_Inf_Can_Init+0x2c>
			#if ISB_INF_CAN0 == 1
				case 0:
					Result = Inf_Can_Init(INF_CAN0_SSPORT, INF_CAN0_SSPIN, INF_CAN0_SPICFG, INF_CAN0_CNF1, INF_CAN0_CNF2, INF_CAN0_CNF3, INF_CAN0_RSPORT, INF_CAN0_RSPIN, INF_CAN0_MODE);
     658:	82 e0       	ldi	r24, 0x02	; 2
     65a:	64 e0       	ldi	r22, 0x04	; 4
     65c:	41 e5       	ldi	r20, 0x51	; 81
     65e:	21 e0       	ldi	r18, 0x01	; 1
     660:	06 eb       	ldi	r16, 0xB6	; 182
     662:	e4 e0       	ldi	r30, 0x04	; 4
     664:	ee 2e       	mov	r14, r30
     666:	7c ef       	ldi	r23, 0xFC	; 252
     668:	c7 2e       	mov	r12, r23
     66a:	aa 24       	eor	r10, r10
     66c:	88 24       	eor	r8, r8
     66e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Inf_Can_Init>
					Result = Inf_Can_Init(INF_CAN2_SSPORT, INF_CAN2_SSPIN, INF_CAN2_SPICFG, INF_CAN2_CNF1, INF_CAN2_CNF2, INF_CAN2_CNF3, INF_CAN2_RSPORT, INF_CAN2_RSPIN, INF_CAN2_MODE);
					break;
			#endif /* ISB_INF_CAN2 == 1 */
		}
		return Result;
	}
     672:	0f 91       	pop	r16
     674:	ef 90       	pop	r14
     676:	cf 90       	pop	r12
     678:	af 90       	pop	r10
     67a:	8f 90       	pop	r8
     67c:	08 95       	ret

0000067e <Isb_Inf_Can_Rx>:



	uint8_t Isb_Inf_Can_Rx(const uint8_t aInf, Isb_Msg_t * aIsb_Msg) {
     67e:	af 92       	push	r10
     680:	bf 92       	push	r11
     682:	cf 92       	push	r12
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	df 93       	push	r29
     68e:	cf 93       	push	r28
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
     694:	2d 97       	sbiw	r28, 0x0d	; 13
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	f8 94       	cli
     69a:	de bf       	out	0x3e, r29	; 62
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	cd bf       	out	0x3d, r28	; 61
     6a0:	6b 01       	movw	r12, r22
		uint8_t aSSPort;
		uint8_t aSSPin;
		uint8_t aSpiCfg;
		uint8_t aRSPort;
		uint8_t aRSPin;
		switch (aInf) {
     6a2:	88 23       	and	r24, r24
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <Isb_Inf_Can_Rx+0x2a>
     6a6:	66 c0       	rjmp	.+204    	; 0x774 <Isb_Inf_Can_Rx+0xf6>
			default:
				return FALSE;
				break;
		}
		Inf_Can_Msg_t aCanMsg;
		if (Inf_Can_Rx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
     6a8:	82 e0       	ldi	r24, 0x02	; 2
     6aa:	64 e0       	ldi	r22, 0x04	; 4
     6ac:	41 e5       	ldi	r20, 0x51	; 81
     6ae:	2c ef       	ldi	r18, 0xFC	; 252
     6b0:	00 e0       	ldi	r16, 0x00	; 0
     6b2:	5e 01       	movw	r10, r28
     6b4:	08 94       	sec
     6b6:	a1 1c       	adc	r10, r1
     6b8:	b1 1c       	adc	r11, r1
     6ba:	75 01       	movw	r14, r10
     6bc:	0e 94 09 02 	call	0x412	; 0x412 <Inf_Can_Rx>
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <Isb_Inf_Can_Rx+0x48>
     6c4:	57 c0       	rjmp	.+174    	; 0x774 <Isb_Inf_Can_Rx+0xf6>
			aIsb_Msg->Flags = ((aCanMsg.SIdH & 0xC0) >> 2) | (aCanMsg.Dlc & ISB_MSG_FLAGS_DLC_MASK);
     6c6:	ea 81       	ldd	r30, Y+2	; 0x02
     6c8:	8e 2f       	mov	r24, r30
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	80 7c       	andi	r24, 0xC0	; 192
     6ce:	90 70       	andi	r25, 0x00	; 0
     6d0:	95 95       	asr	r25
     6d2:	87 95       	ror	r24
     6d4:	95 95       	asr	r25
     6d6:	87 95       	ror	r24
     6d8:	0d 81       	ldd	r16, Y+5	; 0x05
     6da:	f0 2f       	mov	r31, r16
     6dc:	ff 70       	andi	r31, 0x0F	; 15
     6de:	f8 2b       	or	r31, r24
     6e0:	d6 01       	movw	r26, r12
     6e2:	fc 93       	st	X, r31
			aIsb_Msg->DestId = (uint16_t)((aCanMsg.EIdH & 0xF8) >> 3) + (uint16_t)((aCanMsg.SIdL & 0x03) << 5) + (uint16_t)((aCanMsg.SIdL & 0xE0) << 2) + (uint16_t)((aCanMsg.SIdH & 0x3F) << 10);
     6e4:	6c 81       	ldd	r22, Y+4	; 0x04
     6e6:	49 81       	ldd	r20, Y+1	; 0x01
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	3e 2f       	mov	r19, r30
     6ec:	33 0f       	add	r19, r19
     6ee:	33 0f       	add	r19, r19
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	86 2f       	mov	r24, r22
     6f4:	86 95       	lsr	r24
     6f6:	86 95       	lsr	r24
     6f8:	86 95       	lsr	r24
     6fa:	28 0f       	add	r18, r24
     6fc:	31 1d       	adc	r19, r1
     6fe:	ca 01       	movw	r24, r20
     700:	83 70       	andi	r24, 0x03	; 3
     702:	90 70       	andi	r25, 0x00	; 0
     704:	75 e0       	ldi	r23, 0x05	; 5
     706:	88 0f       	add	r24, r24
     708:	99 1f       	adc	r25, r25
     70a:	7a 95       	dec	r23
     70c:	e1 f7       	brne	.-8      	; 0x706 <Isb_Inf_Can_Rx+0x88>
     70e:	28 0f       	add	r18, r24
     710:	39 1f       	adc	r19, r25
     712:	40 7e       	andi	r20, 0xE0	; 224
     714:	50 70       	andi	r21, 0x00	; 0
     716:	44 0f       	add	r20, r20
     718:	55 1f       	adc	r21, r21
     71a:	44 0f       	add	r20, r20
     71c:	55 1f       	adc	r21, r21
     71e:	24 0f       	add	r18, r20
     720:	35 1f       	adc	r19, r21
     722:	12 96       	adiw	r26, 0x02	; 2
     724:	3c 93       	st	X, r19
     726:	2e 93       	st	-X, r18
     728:	11 97       	sbiw	r26, 0x01	; 1
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	67 70       	andi	r22, 0x07	; 7
     72e:	70 70       	andi	r23, 0x00	; 0
     730:	76 2f       	mov	r23, r22
     732:	66 27       	eor	r22, r22
     734:	8b 81       	ldd	r24, Y+3	; 0x03
     736:	68 0f       	add	r22, r24
     738:	71 1d       	adc	r23, r1
     73a:	14 96       	adiw	r26, 0x04	; 4
     73c:	7c 93       	st	X, r23
     73e:	6e 93       	st	-X, r22
     740:	13 97       	sbiw	r26, 0x03	; 3
			if (bit_is_set(aCanMsg.Dlc, 6)) {
     742:	8d 81       	ldd	r24, Y+5	; 0x05
     744:	86 fd       	sbrc	r24, 6
     746:	0a c0       	rjmp	.+20     	; 0x75c <Isb_Inf_Can_Rx+0xde>
				aIsb_Msg->Flags |= 0x40;
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     748:	de 01       	movw	r26, r28
     74a:	16 96       	adiw	r26, 0x06	; 6
     74c:	f6 01       	movw	r30, r12
     74e:	20 2f       	mov	r18, r16
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	2b 5f       	subi	r18, 0xFB	; 251
     754:	3f 4f       	sbci	r19, 0xFF	; 255
     756:	2a 0d       	add	r18, r10
     758:	3b 1d       	adc	r19, r11
     75a:	06 c0       	rjmp	.+12     	; 0x768 <Isb_Inf_Can_Rx+0xea>
		if (Inf_Can_Rx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
			aIsb_Msg->Flags = ((aCanMsg.SIdH & 0xC0) >> 2) | (aCanMsg.Dlc & ISB_MSG_FLAGS_DLC_MASK);
			aIsb_Msg->DestId = (uint16_t)((aCanMsg.EIdH & 0xF8) >> 3) + (uint16_t)((aCanMsg.SIdL & 0x03) << 5) + (uint16_t)((aCanMsg.SIdL & 0xE0) << 2) + (uint16_t)((aCanMsg.SIdH & 0x3F) << 10);
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
			if (bit_is_set(aCanMsg.Dlc, 6)) {
				aIsb_Msg->Flags |= 0x40;
     75c:	f0 64       	ori	r31, 0x40	; 64
     75e:	d6 01       	movw	r26, r12
     760:	fc 93       	st	X, r31
     762:	06 c0       	rjmp	.+12     	; 0x770 <Isb_Inf_Can_Rx+0xf2>
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
					aIsb_Msg->Data[i] = aCanMsg.Data[i];
     764:	8d 91       	ld	r24, X+
     766:	84 83       	std	Z+4, r24	; 0x04
     768:	31 96       	adiw	r30, 0x01	; 1
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
			if (bit_is_set(aCanMsg.Dlc, 6)) {
				aIsb_Msg->Flags |= 0x40;
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     76a:	a2 17       	cp	r26, r18
     76c:	b3 07       	cpc	r27, r19
     76e:	d1 f7       	brne	.-12     	; 0x764 <Isb_Inf_Can_Rx+0xe6>
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	01 c0       	rjmp	.+2      	; 0x776 <Isb_Inf_Can_Rx+0xf8>
     774:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			return TRUE;
		}
		return FALSE;
	}
     776:	2d 96       	adiw	r28, 0x0d	; 13
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	cd bf       	out	0x3d, r28	; 61
     782:	cf 91       	pop	r28
     784:	df 91       	pop	r29
     786:	0f 91       	pop	r16
     788:	ff 90       	pop	r15
     78a:	ef 90       	pop	r14
     78c:	df 90       	pop	r13
     78e:	cf 90       	pop	r12
     790:	bf 90       	pop	r11
     792:	af 90       	pop	r10
     794:	08 95       	ret

00000796 <Isb_Inf_Can_Tx>:



	uint8_t Isb_Inf_Can_Tx(const uint8_t aInf, const Isb_Msg_t * aIsb_Msg) {
     796:	ef 92       	push	r14
     798:	ff 92       	push	r15
     79a:	0f 93       	push	r16
     79c:	df 93       	push	r29
     79e:	cf 93       	push	r28
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	2d 97       	sbiw	r28, 0x0d	; 13
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	fb 01       	movw	r30, r22
		uint8_t aSSPort;
		uint8_t aSSPin;
		uint8_t aSpiCfg;
		uint8_t aRSPort;
		uint8_t aRSPin;
		switch (aInf) {
     7b2:	88 23       	and	r24, r24
     7b4:	11 f0       	breq	.+4      	; 0x7ba <Isb_Inf_Can_Tx+0x24>
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	4e c0       	rjmp	.+156    	; 0x856 <Isb_Inf_Can_Tx+0xc0>
		}
		Inf_Can_Msg_t aCanMsg;
		// Write Message to SendBuffer - TXBnSIDH:
		//	[7..6] = Type
		//	[5..0] = Dest[15..10]
		aCanMsg.SIdH = ((aIsb_Msg->Flags << 2) & 0xC0) | (aIsb_Msg->DestId >> 10);
     7ba:	92 81       	ldd	r25, Z+2	; 0x02
     7bc:	96 95       	lsr	r25
     7be:	96 95       	lsr	r25
     7c0:	60 81       	ld	r22, Z
     7c2:	86 2f       	mov	r24, r22
     7c4:	88 0f       	add	r24, r24
     7c6:	88 0f       	add	r24, r24
     7c8:	80 7c       	andi	r24, 0xC0	; 192
     7ca:	89 2b       	or	r24, r25
     7cc:	8a 83       	std	Y+2, r24	; 0x02
		//	[7..5] = Dest[9..7]
		//	[4] = 0
		//	[3] = 1
		//	[2] = 0
		//	[1..0] = Dest[6..5]
		aCanMsg.SIdL = ((uint8_t)(aIsb_Msg->DestId >> 2) & 0xE0) | 0x08 | ((uint8_t)(aIsb_Msg->DestId >> 5) & 0x03);
     7ce:	41 81       	ldd	r20, Z+1	; 0x01
     7d0:	52 81       	ldd	r21, Z+2	; 0x02
     7d2:	ca 01       	movw	r24, r20
     7d4:	96 95       	lsr	r25
     7d6:	87 95       	ror	r24
     7d8:	96 95       	lsr	r25
     7da:	87 95       	ror	r24
     7dc:	80 7e       	andi	r24, 0xE0	; 224
     7de:	9a 01       	movw	r18, r20
     7e0:	a5 e0       	ldi	r26, 0x05	; 5
     7e2:	36 95       	lsr	r19
     7e4:	27 95       	ror	r18
     7e6:	aa 95       	dec	r26
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <Isb_Inf_Can_Tx+0x4c>
     7ea:	23 70       	andi	r18, 0x03	; 3
     7ec:	82 2b       	or	r24, r18
     7ee:	88 60       	ori	r24, 0x08	; 8
     7f0:	89 83       	std	Y+1, r24	; 0x01
		// Write Message to SendBuffer - TXBnEID8:
		//	[7..3] = Dest[4..0]
		//	[2..0] = Source[10..8]
		aCanMsg.EIdH = ((uint8_t)((aIsb_Msg->DestId << 3) & 0xF8)) | ((uint8_t)((aIsb_Msg->SourceId >> 8) & 0x07));
     7f2:	84 81       	ldd	r24, Z+4	; 0x04
     7f4:	87 70       	andi	r24, 0x07	; 7
     7f6:	44 0f       	add	r20, r20
     7f8:	44 0f       	add	r20, r20
     7fa:	44 0f       	add	r20, r20
     7fc:	84 2b       	or	r24, r20
     7fe:	8c 83       	std	Y+4, r24	; 0x04
		// Write Message to SendBuffer - TXBnEID0:
		//	[7..0] = Source[7..0]
		aCanMsg.EIdL = (uint8_t)aIsb_Msg->SourceId;
     800:	83 81       	ldd	r24, Z+3	; 0x03
     802:	8b 83       	std	Y+3, r24	; 0x03
		// Write Message to SendBuffer - DataLength
		aCanMsg.Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
     804:	6f 70       	andi	r22, 0x0F	; 15
     806:	6d 83       	std	Y+5, r22	; 0x05
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
     808:	80 81       	ld	r24, Z
     80a:	86 fd       	sbrc	r24, 6
     80c:	0a c0       	rjmp	.+20     	; 0x822 <Isb_Inf_Can_Tx+0x8c>
     80e:	df 01       	movw	r26, r30
     810:	fe 01       	movw	r30, r28
     812:	36 96       	adiw	r30, 0x06	; 6
			aCanMsg.Dlc |= 0x40;
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     814:	ce 01       	movw	r24, r28
     816:	86 0f       	add	r24, r22
     818:	91 1d       	adc	r25, r1
     81a:	bc 01       	movw	r22, r24
     81c:	6a 5f       	subi	r22, 0xFA	; 250
     81e:	7f 4f       	sbci	r23, 0xFF	; 255
     820:	07 c0       	rjmp	.+14     	; 0x830 <Isb_Inf_Can_Tx+0x9a>
		aCanMsg.EIdL = (uint8_t)aIsb_Msg->SourceId;
		// Write Message to SendBuffer - DataLength
		aCanMsg.Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
			aCanMsg.Dlc |= 0x40;
     822:	60 64       	ori	r22, 0x40	; 64
     824:	6d 83       	std	Y+5, r22	; 0x05
     826:	08 c0       	rjmp	.+16     	; 0x838 <Isb_Inf_Can_Tx+0xa2>
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
				aCanMsg.Data[i] = aIsb_Msg->Data[i];
     828:	14 96       	adiw	r26, 0x04	; 4
     82a:	8c 91       	ld	r24, X
     82c:	14 97       	sbiw	r26, 0x04	; 4
     82e:	81 93       	st	Z+, r24
     830:	11 96       	adiw	r26, 0x01	; 1
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
			aCanMsg.Dlc |= 0x40;
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     832:	e6 17       	cp	r30, r22
     834:	f7 07       	cpc	r31, r23
     836:	c1 f7       	brne	.-16     	; 0x828 <Isb_Inf_Can_Tx+0x92>
				aCanMsg.Data[i] = aIsb_Msg->Data[i];
			}
		}
		if (Inf_Can_Tx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	64 e0       	ldi	r22, 0x04	; 4
     83c:	41 e5       	ldi	r20, 0x51	; 81
     83e:	2c ef       	ldi	r18, 0xFC	; 252
     840:	00 e0       	ldi	r16, 0x00	; 0
     842:	7e 01       	movw	r14, r28
     844:	08 94       	sec
     846:	e1 1c       	adc	r14, r1
     848:	f1 1c       	adc	r15, r1
     84a:	0e 94 90 02 	call	0x520	; 0x520 <Inf_Can_Tx>
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	81 30       	cpi	r24, 0x01	; 1
     852:	09 f4       	brne	.+2      	; 0x856 <Isb_Inf_Can_Tx+0xc0>
     854:	91 e0       	ldi	r25, 0x01	; 1
			return TRUE;
		}
		return FALSE;
	}
     856:	89 2f       	mov	r24, r25
     858:	2d 96       	adiw	r28, 0x0d	; 13
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	de bf       	out	0x3e, r29	; 62
     860:	0f be       	out	0x3f, r0	; 63
     862:	cd bf       	out	0x3d, r28	; 61
     864:	cf 91       	pop	r28
     866:	df 91       	pop	r29
     868:	0f 91       	pop	r16
     86a:	ff 90       	pop	r15
     86c:	ef 90       	pop	r14
     86e:	08 95       	ret

00000870 <Isb_Systick_Init>:

	#if defined(__AVR_ATmega8__)
		#warning "TIMER0_COMP_vect missing."
		#error "No definition for this MCU available."
	#elif defined(__AVR_ATmega16__)
	TCCR0 = (1 << WGM01) | (1 << CS01) | (1 << CS00);
     870:	8b e0       	ldi	r24, 0x0B	; 11
     872:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
     874:	12 be       	out	0x32, r1	; 50
	OCR0 = (F_CPU / 64) / 1000;
     876:	86 ee       	ldi	r24, 0xE6	; 230
     878:	8c bf       	out	0x3c, r24	; 60
	TIMSK = (1 << OCIE0);
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	89 bf       	out	0x39, r24	; 57
	TIMSK0 = (1 << OCIE0A);
	#else
		#error "No definition for this MCU available."
	#endif

	Isb_Systick_Clock.Seconds = 0;
     87e:	10 92 81 01 	sts	0x0181, r1
	Isb_Systick_Clock.Minutes = 0;
     882:	10 92 82 01 	sts	0x0182, r1
	Isb_Systick_Clock.Hour = 0;
     886:	10 92 83 01 	sts	0x0183, r1
	Isb_Systick_Clock.Dow = 1;
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	80 93 85 01 	sts	0x0185, r24
	Isb_Systick_Clock.Day = 1;
     890:	80 93 84 01 	sts	0x0184, r24
	Isb_Systick_Clock.Month = 1;
     894:	80 93 86 01 	sts	0x0186, r24
	Isb_Systick_Clock.Year = 0;;
     898:	10 92 88 01 	sts	0x0188, r1
     89c:	10 92 87 01 	sts	0x0187, r1

}
     8a0:	08 95       	ret

000008a2 <Isb_Systick_Exec>:



void Isb_Systick_Exec(void)
{
     8a2:	1f 93       	push	r17

	if (bit_is_set(Isb_Systick_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
     8a4:	80 91 a0 00 	lds	r24, 0x00A0
     8a8:	80 ff       	sbrs	r24, 0
     8aa:	ca c0       	rjmp	.+404    	; 0xa40 <Isb_Systick_Exec+0x19e>
	{

		if (Isb_Systick_IrqClock >= 1000)
     8ac:	80 91 a1 00 	lds	r24, 0x00A1
     8b0:	90 91 a2 00 	lds	r25, 0x00A2
     8b4:	88 5e       	subi	r24, 0xE8	; 232
     8b6:	93 40       	sbci	r25, 0x03	; 3
     8b8:	08 f4       	brcc	.+2      	; 0x8bc <Isb_Systick_Exec+0x1a>
     8ba:	72 c0       	rjmp	.+228    	; 0x9a0 <Isb_Systick_Exec+0xfe>
		{
			Isb_Systick_IrqClock = 0;
     8bc:	10 92 a2 00 	sts	0x00A2, r1
     8c0:	10 92 a1 00 	sts	0x00A1, r1
			Isb_Systick_Clock.Seconds++;
     8c4:	80 91 81 01 	lds	r24, 0x0181
     8c8:	8f 5f       	subi	r24, 0xFF	; 255
     8ca:	80 93 81 01 	sts	0x0181, r24
			if (Isb_Systick_Clock.Seconds == 60)
     8ce:	8c 33       	cpi	r24, 0x3C	; 60
     8d0:	09 f0       	breq	.+2      	; 0x8d4 <Isb_Systick_Exec+0x32>
     8d2:	66 c0       	rjmp	.+204    	; 0x9a0 <Isb_Systick_Exec+0xfe>
			{
				Isb_Systick_Clock.Seconds = 0;
     8d4:	10 92 81 01 	sts	0x0181, r1
				Isb_Systick_Clock.Minutes++;
     8d8:	80 91 82 01 	lds	r24, 0x0182
     8dc:	8f 5f       	subi	r24, 0xFF	; 255
     8de:	80 93 82 01 	sts	0x0182, r24
				if (Isb_Systick_Clock.Minutes == 60)
     8e2:	8c 33       	cpi	r24, 0x3C	; 60
     8e4:	09 f0       	breq	.+2      	; 0x8e8 <Isb_Systick_Exec+0x46>
     8e6:	5c c0       	rjmp	.+184    	; 0x9a0 <Isb_Systick_Exec+0xfe>
				{
					Isb_Systick_Clock.Minutes = 0;
     8e8:	10 92 82 01 	sts	0x0182, r1
					Isb_Systick_Clock.Hour++;
     8ec:	80 91 83 01 	lds	r24, 0x0183
     8f0:	8f 5f       	subi	r24, 0xFF	; 255
     8f2:	80 93 83 01 	sts	0x0183, r24
					if (Isb_Systick_Clock.Hour == 24)
     8f6:	88 31       	cpi	r24, 0x18	; 24
     8f8:	09 f0       	breq	.+2      	; 0x8fc <Isb_Systick_Exec+0x5a>
     8fa:	52 c0       	rjmp	.+164    	; 0x9a0 <Isb_Systick_Exec+0xfe>
					{
						Isb_Systick_Clock.Hour = 0;
     8fc:	10 92 83 01 	sts	0x0183, r1
						Isb_Systick_Clock.Day++;
     900:	40 91 84 01 	lds	r20, 0x0184
     904:	4f 5f       	subi	r20, 0xFF	; 255
     906:	40 93 84 01 	sts	0x0184, r20
						Isb_Systick_Clock.Dow++;
     90a:	80 91 85 01 	lds	r24, 0x0185
     90e:	8f 5f       	subi	r24, 0xFF	; 255
     910:	80 93 85 01 	sts	0x0185, r24
						if (Isb_Systick_Clock.Dow == 8)
     914:	88 30       	cpi	r24, 0x08	; 8
     916:	19 f4       	brne	.+6      	; 0x91e <Isb_Systick_Exec+0x7c>
						{
							Isb_Systick_Clock.Dow = 1;
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	80 93 85 01 	sts	0x0185, r24
						}
						uint8_t newMonth = 0;
						if (Isb_Systick_Clock.Month == 2)
     91e:	10 91 86 01 	lds	r17, 0x0186
     922:	12 30       	cpi	r17, 0x02	; 2
     924:	e1 f4       	brne	.+56     	; 0x95e <Isb_Systick_Exec+0xbc>
						{
							if ((Isb_Systick_Clock.Year % 4) == 0)
     926:	20 91 87 01 	lds	r18, 0x0187
     92a:	30 91 88 01 	lds	r19, 0x0188
     92e:	c9 01       	movw	r24, r18
     930:	83 70       	andi	r24, 0x03	; 3
     932:	90 70       	andi	r25, 0x00	; 0
     934:	89 2b       	or	r24, r25
     936:	81 f4       	brne	.+32     	; 0x958 <Isb_Systick_Exec+0xb6>
							{
								newMonth = 1;
								if ((Isb_Systick_Clock.Year % 100) == 0)
     938:	c9 01       	movw	r24, r18
     93a:	64 e6       	ldi	r22, 0x64	; 100
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <__udivmodhi4>
     942:	89 2b       	or	r24, r25
     944:	09 f0       	breq	.+2      	; 0x948 <Isb_Systick_Exec+0xa6>
     946:	76 c0       	rjmp	.+236    	; 0xa34 <Isb_Systick_Exec+0x192>
								{
									newMonth = 0;
									if ((Isb_Systick_Clock.Year % 400) == 0)
     948:	c9 01       	movw	r24, r18
     94a:	60 e9       	ldi	r22, 0x90	; 144
     94c:	71 e0       	ldi	r23, 0x01	; 1
     94e:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <__udivmodhi4>
     952:	89 2b       	or	r24, r25
     954:	09 f4       	brne	.+2      	; 0x958 <Isb_Systick_Exec+0xb6>
     956:	6e c0       	rjmp	.+220    	; 0xa34 <Isb_Systick_Exec+0x192>
									newMonth = 0;
								}
							}
							else
							{
								if (Isb_Systick_Clock.Day == (daysPerMonth[Isb_Systick_Clock.Month] + 1))
     958:	40 32       	cpi	r20, 0x20	; 32
     95a:	11 f5       	brne	.+68     	; 0x9a0 <Isb_Systick_Exec+0xfe>
     95c:	0d c0       	rjmp	.+26     	; 0x978 <Isb_Systick_Exec+0xd6>
								}
							}
						}
						else
						{
							if (Isb_Systick_Clock.Day == (daysPerMonth[Isb_Systick_Clock.Month] + 1))
     95e:	84 2f       	mov	r24, r20
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	e1 2f       	mov	r30, r17
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	ec 56       	subi	r30, 0x6C	; 108
     968:	ff 4f       	sbci	r31, 0xFF	; 255
     96a:	20 81       	ld	r18, Z
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	2f 5f       	subi	r18, 0xFF	; 255
     970:	3f 4f       	sbci	r19, 0xFF	; 255
     972:	82 17       	cp	r24, r18
     974:	93 07       	cpc	r25, r19
     976:	a1 f4       	brne	.+40     	; 0x9a0 <Isb_Systick_Exec+0xfe>
								newMonth = 1;
							}
						}
						if (newMonth)
						{
							Isb_Systick_Clock.Day = 1;
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	90 93 84 01 	sts	0x0184, r25
							Isb_Systick_Clock.Month++;
     97e:	81 2f       	mov	r24, r17
     980:	8f 5f       	subi	r24, 0xFF	; 255
     982:	80 93 86 01 	sts	0x0186, r24
							if (Isb_Systick_Clock.Month == 13)
     986:	8d 30       	cpi	r24, 0x0D	; 13
     988:	59 f4       	brne	.+22     	; 0x9a0 <Isb_Systick_Exec+0xfe>
							{
								Isb_Systick_Clock.Month = 1;
     98a:	90 93 86 01 	sts	0x0186, r25
								Isb_Systick_Clock.Year++;
     98e:	80 91 87 01 	lds	r24, 0x0187
     992:	90 91 88 01 	lds	r25, 0x0188
     996:	01 96       	adiw	r24, 0x01	; 1
     998:	90 93 88 01 	sts	0x0188, r25
     99c:	80 93 87 01 	sts	0x0187, r24
					}
				}
			}
		}

		if (bit_is_clear(Isb_Systick_Ctrl, ISB_CTRL_RUNNING))
     9a0:	80 91 a0 00 	lds	r24, 0x00A0
     9a4:	86 fd       	sbrc	r24, 6
     9a6:	13 c0       	rjmp	.+38     	; 0x9ce <Isb_Systick_Exec+0x12c>
		{
			uint16_t Isb_Systick_Delay = 1000;
			if (Isb_Systick_Delay_Counter == Isb_Systick_Delay)
     9a8:	20 91 a3 00 	lds	r18, 0x00A3
     9ac:	30 91 a4 00 	lds	r19, 0x00A4
     9b0:	83 e0       	ldi	r24, 0x03	; 3
     9b2:	28 3e       	cpi	r18, 0xE8	; 232
     9b4:	38 07       	cpc	r19, r24
     9b6:	29 f4       	brne	.+10     	; 0x9c2 <Isb_Systick_Exec+0x120>
			{
				Isb_Systick_Ctrl |= (1<<ISB_CTRL_RUNNING);
     9b8:	80 91 a0 00 	lds	r24, 0x00A0
     9bc:	80 64       	ori	r24, 0x40	; 64
     9be:	80 93 a0 00 	sts	0x00A0, r24
			}
			Isb_Systick_Delay_Counter++;
     9c2:	2f 5f       	subi	r18, 0xFF	; 255
     9c4:	3f 4f       	sbci	r19, 0xFF	; 255
     9c6:	30 93 a4 00 	sts	0x00A4, r19
     9ca:	20 93 a3 00 	sts	0x00A3, r18
			If_Rf_Rfm12_Ctrl |= (1 << IF_RF_RFM12_CTRL_SOFTIRQ_EXEC);
		}
	#endif /* IF_RF_RFM12 */

	#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
		if (Isb_App_DigOut_IrqExec >= ISB_APP_DIGOUT_EXECTIME)
     9ce:	80 91 ad 00 	lds	r24, 0x00AD
     9d2:	90 91 ae 00 	lds	r25, 0x00AE
     9d6:	0a 97       	sbiw	r24, 0x0a	; 10
     9d8:	48 f0       	brcs	.+18     	; 0x9ec <Isb_Systick_Exec+0x14a>
		{
			Isb_App_DigOut_IrqExec = 0;
     9da:	10 92 ae 00 	sts	0x00AE, r1
     9de:	10 92 ad 00 	sts	0x00AD, r1
			Isb_App_DigOut_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     9e2:	80 91 ac 00 	lds	r24, 0x00AC
     9e6:	81 60       	ori	r24, 0x01	; 1
     9e8:	80 93 ac 00 	sts	0x00AC, r24
		}
	#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

	#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
		if (Isb_App_DigIn_IrqExec >= ISB_APP_DIGIN_EXECTIME)
     9ec:	80 91 af 00 	lds	r24, 0x00AF
     9f0:	90 91 b0 00 	lds	r25, 0x00B0
     9f4:	0a 97       	sbiw	r24, 0x0a	; 10
     9f6:	48 f0       	brcs	.+18     	; 0xa0a <Isb_Systick_Exec+0x168>
		{
			Isb_App_DigIn_IrqExec = 0;
     9f8:	10 92 b0 00 	sts	0x00B0, r1
     9fc:	10 92 af 00 	sts	0x00AF, r1
			Isb_App_DigIn_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a00:	80 91 ab 00 	lds	r24, 0x00AB
     a04:	81 60       	ori	r24, 0x01	; 1
     a06:	80 93 ab 00 	sts	0x00AB, r24
			Isb_App_Clock_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
		}
	#endif /* ISB_APP_CLOCK_MAX && ISB_APP_H_ */

	#if defined(ISB_OBJ_MAX) && defined(ISB_OBJ_H_)
		if (Isb_Obj_IrqExec >= ISB_OBJ_EXECTIME)
     a0a:	80 91 b1 00 	lds	r24, 0x00B1
     a0e:	90 91 b2 00 	lds	r25, 0x00B2
     a12:	08 97       	sbiw	r24, 0x08	; 8
     a14:	48 f0       	brcs	.+18     	; 0xa28 <Isb_Systick_Exec+0x186>
		{
			Isb_Obj_IrqExec = 0;
     a16:	10 92 b2 00 	sts	0x00B2, r1
     a1a:	10 92 b1 00 	sts	0x00B1, r1
			Isb_Obj_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a1e:	80 91 aa 00 	lds	r24, 0x00AA
     a22:	81 60       	ori	r24, 0x01	; 1
     a24:	80 93 aa 00 	sts	0x00AA, r24
			Isb_Obj_Float_IrqExec = 0;
			Isb_Obj_Float_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
		}
	#endif /* ISB_OBJ_FLOAT_MAX && ISB_OBJ_H_ */

	Isb_Systick_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
     a28:	80 91 a0 00 	lds	r24, 0x00A0
     a2c:	8e 7f       	andi	r24, 0xFE	; 254
     a2e:	80 93 a0 00 	sts	0x00A0, r24
     a32:	06 c0       	rjmp	.+12     	; 0xa40 <Isb_Systick_Exec+0x19e>
									}
								}
							}
							if (newMonth)
							{
								if (Isb_Systick_Clock.Day < (daysPerMonth[Isb_Systick_Clock.Month] + 2))
     a34:	84 2f       	mov	r24, r20
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	81 97       	sbiw	r24, 0x21	; 33
     a3a:	0c f4       	brge	.+2      	; 0xa3e <Isb_Systick_Exec+0x19c>
     a3c:	b1 cf       	rjmp	.-158    	; 0x9a0 <Isb_Systick_Exec+0xfe>
     a3e:	9c cf       	rjmp	.-200    	; 0x978 <Isb_Systick_Exec+0xd6>
	#endif /* ISB_OBJ_FLOAT_MAX && ISB_OBJ_H_ */

	Isb_Systick_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
	}

}
     a40:	1f 91       	pop	r17
     a42:	08 95       	ret

00000a44 <Isb_Systick_Irq_Timer>:


void Isb_Systick_Irq_Timer(void)
{

	Isb_Systick_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a44:	80 91 a0 00 	lds	r24, 0x00A0
     a48:	81 60       	ori	r24, 0x01	; 1
     a4a:	80 93 a0 00 	sts	0x00A0, r24
	Isb_Systick_IrqClock++;
     a4e:	80 91 a1 00 	lds	r24, 0x00A1
     a52:	90 91 a2 00 	lds	r25, 0x00A2
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	90 93 a2 00 	sts	0x00A2, r25
     a5c:	80 93 a1 00 	sts	0x00A1, r24
	#if defined(IF_RF_RFM12)
	If_Rf_Rfm12_IrqExec++;
	#endif /* IF_RF_RFM12 */

	#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
	Isb_App_DigOut_IrqExec++;
     a60:	80 91 ad 00 	lds	r24, 0x00AD
     a64:	90 91 ae 00 	lds	r25, 0x00AE
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	90 93 ae 00 	sts	0x00AE, r25
     a6e:	80 93 ad 00 	sts	0x00AD, r24
	#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

	#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
	Isb_App_DigIn_IrqExec++;
     a72:	80 91 af 00 	lds	r24, 0x00AF
     a76:	90 91 b0 00 	lds	r25, 0x00B0
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	90 93 b0 00 	sts	0x00B0, r25
     a80:	80 93 af 00 	sts	0x00AF, r24
	#if defined(ISB_APP_CLOCK_MAX) && defined(ISB_APP_H_)
	Isb_App_Clock_IrqExec++;
	#endif /* ISB_APP_CLOCK_MAX && ISB_APP_H_ */

	#if defined(ISB_OBJ_MAX) && defined(ISB_OBJ_H_)
	Isb_Obj_IrqExec++;
     a84:	80 91 b1 00 	lds	r24, 0x00B1
     a88:	90 91 b2 00 	lds	r25, 0x00B2
     a8c:	01 96       	adiw	r24, 0x01	; 1
     a8e:	90 93 b2 00 	sts	0x00B2, r25
     a92:	80 93 b1 00 	sts	0x00B1, r24

	#if defined(HW_EUROTRONIC_SPARMATIC_ZERO_H_) && defined(HW_EUROTRONIC_SPARMATIC_ZERO_H_)
	Hw_Eurotronic_Sparmatic_Zero_MotorUeberwachungCount++;
	#endif /* HW_EUROTRONIC_SPARMATIC_ZERO_H_ && HW_EUROTRONIC_SPARMATIC_ZERO_H_ */

}
     a96:	08 95       	ret

00000a98 <__vector_19>:
	#if defined(__AVR_ATmega8__)
		#warning "TIMER0_COMP_vect missing."
		#error "No definition for this MCU available."
	#elif defined(__AVR_ATmega16__)
ISR(TIMER0_COMP_vect)
{
     a98:	1f 92       	push	r1
     a9a:	0f 92       	push	r0
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	0f 92       	push	r0
     aa0:	11 24       	eor	r1, r1
     aa2:	8f 93       	push	r24
     aa4:	9f 93       	push	r25


void Isb_Systick_Irq_Timer(void)
{

	Isb_Systick_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     aa6:	80 91 a0 00 	lds	r24, 0x00A0
     aaa:	81 60       	ori	r24, 0x01	; 1
     aac:	80 93 a0 00 	sts	0x00A0, r24
	Isb_Systick_IrqClock++;
     ab0:	80 91 a1 00 	lds	r24, 0x00A1
     ab4:	90 91 a2 00 	lds	r25, 0x00A2
     ab8:	01 96       	adiw	r24, 0x01	; 1
     aba:	90 93 a2 00 	sts	0x00A2, r25
     abe:	80 93 a1 00 	sts	0x00A1, r24
	#if defined(IF_RF_RFM12)
	If_Rf_Rfm12_IrqExec++;
	#endif /* IF_RF_RFM12 */

	#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
	Isb_App_DigOut_IrqExec++;
     ac2:	80 91 ad 00 	lds	r24, 0x00AD
     ac6:	90 91 ae 00 	lds	r25, 0x00AE
     aca:	01 96       	adiw	r24, 0x01	; 1
     acc:	90 93 ae 00 	sts	0x00AE, r25
     ad0:	80 93 ad 00 	sts	0x00AD, r24
	#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

	#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
	Isb_App_DigIn_IrqExec++;
     ad4:	80 91 af 00 	lds	r24, 0x00AF
     ad8:	90 91 b0 00 	lds	r25, 0x00B0
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	90 93 b0 00 	sts	0x00B0, r25
     ae2:	80 93 af 00 	sts	0x00AF, r24
	#if defined(ISB_APP_CLOCK_MAX) && defined(ISB_APP_H_)
	Isb_App_Clock_IrqExec++;
	#endif /* ISB_APP_CLOCK_MAX && ISB_APP_H_ */

	#if defined(ISB_OBJ_MAX) && defined(ISB_OBJ_H_)
	Isb_Obj_IrqExec++;
     ae6:	80 91 b1 00 	lds	r24, 0x00B1
     aea:	90 91 b2 00 	lds	r25, 0x00B2
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	90 93 b2 00 	sts	0x00B2, r25
     af4:	80 93 b1 00 	sts	0x00B1, r24
		#error "No definition for this MCU available."
	#elif defined(__AVR_ATmega16__)
ISR(TIMER0_COMP_vect)
{
	Isb_Systick_Irq_Timer();
}
     af8:	9f 91       	pop	r25
     afa:	8f 91       	pop	r24
     afc:	0f 90       	pop	r0
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	0f 90       	pop	r0
     b02:	1f 90       	pop	r1
     b04:	18 95       	reti

00000b06 <Isb_App_Init>:
//			}
// TODO: Alles
// TODO: <-
		#endif /* ISB_APP_LCD_MAX */

	}
     b06:	08 95       	ret

00000b08 <Isb_App_Convert_None>:



	void Isb_App_Convert_None(uint16_t Value, void *Destination)
	{
     b08:	fb 01       	movw	r30, r22

		*(uint16_t *)Destination = Value;
     b0a:	91 83       	std	Z+1, r25	; 0x01
     b0c:	80 83       	st	Z, r24

	}
     b0e:	08 95       	ret

00000b10 <Isb_App_Convert_PT100>:



	void Isb_App_Convert_PT100(uint16_t Value, void *Destination)
	{
     b10:	fb 01       	movw	r30, r22

		Value = Value << 1;
		*(uint16_t *)Destination = Value;
     b12:	88 0f       	add	r24, r24
     b14:	99 1f       	adc	r25, r25
     b16:	91 83       	std	Z+1, r25	; 0x01
     b18:	80 83       	st	Z, r24

	}
     b1a:	08 95       	ret

00000b1c <Lib_FloatToInteger>:



	int32_t Lib_FloatToInteger(uint16_t Float)
	{
     b1c:	df 93       	push	r29
     b1e:	cf 93       	push	r28
     b20:	00 d0       	rcall	.+0      	; 0xb22 <Lib_FloatToInteger+0x6>
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	9a 83       	std	Y+2, r25	; 0x02
     b28:	89 83       	std	Y+1, r24	; 0x01

		uint32_t Integer = 0;
		uint16_t Exponent = (Float & 0x7C00)>>11;
     b2a:	9c 01       	movw	r18, r24
		uint16_t Mantisse = Float & 0x03FF;

		if (bit_is_set(Float, 15))
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	c9 01       	movw	r24, r18
     b30:	80 70       	andi	r24, 0x00	; 0
     b32:	9c 77       	andi	r25, 0x7C	; 124
     b34:	89 2f       	mov	r24, r25
     b36:	86 95       	lsr	r24
     b38:	86 95       	lsr	r24
     b3a:	86 95       	lsr	r24
     b3c:	33 70       	andi	r19, 0x03	; 3
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <Lib_FloatToInteger+0x28>
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	8a 95       	dec	r24
     b46:	e2 f7       	brpl	.-8      	; 0xb40 <Lib_FloatToInteger+0x24>
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	50 95       	com	r21
     b4e:	40 95       	com	r20
     b50:	30 95       	com	r19
     b52:	21 95       	neg	r18
     b54:	3f 4f       	sbci	r19, 0xFF	; 255
     b56:	4f 4f       	sbci	r20, 0xFF	; 255
     b58:	5f 4f       	sbci	r21, 0xFF	; 255
			Integer -= Mantisse * (1<<Exponent);
		}

		return Integer;

	}
     b5a:	b9 01       	movw	r22, r18
     b5c:	ca 01       	movw	r24, r20
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Lib_IntegerToFloat>:
	{

		uint16_t Float = 0;

		// Vorzeichen
		if (Integer >= 0)
     b68:	97 fd       	sbrc	r25, 7
     b6a:	03 c0       	rjmp	.+6      	; 0xb72 <Lib_IntegerToFloat+0xa>
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e8       	ldi	r21, 0x80	; 128
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <Lib_IntegerToFloat+0xe>
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	06 c0       	rjmp	.+12     	; 0xb88 <Lib_IntegerToFloat+0x20>
		}

		uint16_t Exponent = 0;
		while (Integer > 2047)
		{
			Exponent++;
     b7c:	2f 5f       	subi	r18, 0xFF	; 255
     b7e:	3f 4f       	sbci	r19, 0xFF	; 255
			Integer = Integer >> 1;
     b80:	95 95       	asr	r25
     b82:	87 95       	ror	r24
     b84:	77 95       	ror	r23
     b86:	67 95       	ror	r22
		{
			Float |= 0x8000;
		}

		uint16_t Exponent = 0;
		while (Integer > 2047)
     b88:	60 30       	cpi	r22, 0x00	; 0
     b8a:	e8 e0       	ldi	r30, 0x08	; 8
     b8c:	7e 07       	cpc	r23, r30
     b8e:	e0 e0       	ldi	r30, 0x00	; 0
     b90:	8e 07       	cpc	r24, r30
     b92:	e0 e0       	ldi	r30, 0x00	; 0
     b94:	9e 07       	cpc	r25, r30
     b96:	94 f7       	brge	.-28     	; 0xb7c <Lib_IntegerToFloat+0x14>
			Exponent++;
			Integer = Integer >> 1;
		}
		Exponent = Exponent << 11;

		Float |= Exponent;
     b98:	32 2f       	mov	r19, r18
     b9a:	22 27       	eor	r18, r18
     b9c:	33 0f       	add	r19, r19
     b9e:	33 0f       	add	r19, r19
     ba0:	33 0f       	add	r19, r19
     ba2:	26 2b       	or	r18, r22
     ba4:	37 2b       	or	r19, r23
     ba6:	24 2b       	or	r18, r20
     ba8:	35 2b       	or	r19, r21
		Float |= (uint16_t)Integer;

		return Float;

	}
     baa:	c9 01       	movw	r24, r18
     bac:	08 95       	ret

00000bae <Isb_App_Exec>:



	void Isb_App_Exec(void)
	{
     bae:	2f 92       	push	r2
     bb0:	3f 92       	push	r3
     bb2:	4f 92       	push	r4
     bb4:	5f 92       	push	r5
     bb6:	6f 92       	push	r6
     bb8:	7f 92       	push	r7
     bba:	8f 92       	push	r8
     bbc:	9f 92       	push	r9
     bbe:	af 92       	push	r10
     bc0:	bf 92       	push	r11
     bc2:	cf 92       	push	r12
     bc4:	df 92       	push	r13
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	e9 97       	sbiw	r28, 0x39	; 57
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	cd bf       	out	0x3d, r28	; 61
				Isb_App_Clock_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
			}
		#endif /* ISB_APP_CLOCK_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			if (bit_is_set(Isb_App_DigIn_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
     be2:	80 91 ab 00 	lds	r24, 0x00AB
     be6:	80 ff       	sbrs	r24, 0
     be8:	d6 c5       	rjmp	.+2988   	; 0x1796 <Isb_App_Exec+0xbe8>
     bea:	2b eb       	ldi	r18, 0xBB	; 187
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	39 af       	std	Y+57, r19	; 0x39
     bf0:	28 af       	std	Y+56, r18	; 0x38
     bf2:	88 24       	eor	r8, r8
     bf4:	99 24       	eor	r9, r9
								{
									Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT_PULLUP);
								}
							}
							Isb_Obj[Obj_0].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Ctrl);
							Isb_Obj[Obj_0].Top = ISB_MSG_TOP_1BIT;
     bf6:	55 24       	eor	r5, r5
     bf8:	53 94       	inc	r5
				Isb_App_Clock_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
			}
		#endif /* ISB_APP_CLOCK_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			if (bit_is_set(Isb_App_DigIn_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
     bfa:	28 2d       	mov	r18, r8
			{
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++)
				{
					uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigIn_Ch_Array[AppIndex]);
     bfc:	f4 01       	movw	r30, r8
     bfe:	ee 59       	subi	r30, 0x9E	; 158
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	94 91       	lpm	r25, Z+
					uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigIn_Pin0_Array[AppIndex]);
     c04:	f4 01       	movw	r30, r8
     c06:	ec 59       	subi	r30, 0x9C	; 156
     c08:	ff 4f       	sbci	r31, 0xFF	; 255
     c0a:	34 91       	lpm	r19, Z+
     c0c:	3f a7       	std	Y+47, r19	; 0x2f
					uint8_t Obj_0 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_0_Array[AppIndex]);
     c0e:	f4 01       	movw	r30, r8
     c10:	ea 59       	subi	r30, 0x9A	; 154
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	44 91       	lpm	r20, Z+
     c16:	4e a7       	std	Y+46, r20	; 0x2e
					uint8_t Obj_1 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_1_Array[AppIndex]);
     c18:	f4 01       	movw	r30, r8
     c1a:	e8 59       	subi	r30, 0x98	; 152
     c1c:	ff 4f       	sbci	r31, 0xFF	; 255
     c1e:	44 90       	lpm	r4, Z+
					uint8_t Obj_2 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_2_Array[AppIndex]);
     c20:	f4 01       	movw	r30, r8
     c22:	e6 59       	subi	r30, 0x96	; 150
     c24:	ff 4f       	sbci	r31, 0xFF	; 255
     c26:	54 91       	lpm	r21, Z+
     c28:	5d a7       	std	Y+45, r21	; 0x2d
					// Initialize
					if (bit_is_clear(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_INITIALIZED))
     c2a:	a9 2f       	mov	r26, r25
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	bf ab       	std	Y+55, r27	; 0x37
     c30:	ae ab       	std	Y+54, r26	; 0x36
     c32:	aa 0f       	add	r26, r26
     c34:	bb 1f       	adc	r27, r27
     c36:	ad 54       	subi	r26, 0x4D	; 77
     c38:	bf 4f       	sbci	r27, 0xFF	; 255
     c3a:	bd ab       	std	Y+53, r27	; 0x35
     c3c:	ac ab       	std	Y+52, r26	; 0x34
     c3e:	8c 91       	ld	r24, X
     c40:	86 fd       	sbrc	r24, 6
     c42:	07 c2       	rjmp	.+1038   	; 0x1052 <Isb_App_Exec+0x4a4>
						uint16_t eepAddr_Obj_1_Tov = 0;
						uint16_t eepAddr_Obj_1_InitValue = 0;
						uint16_t eepAddr_Obj_2_Ctrl = 0;
						uint16_t eepAddr_Obj_2_Tov = 0;
						uint16_t eepAddr_Obj_2_InitValue = 0;
						switch (AppIndex)
     c44:	88 20       	and	r8, r8
     c46:	19 f0       	breq	.+6      	; 0xc4e <Isb_App_Exec+0xa0>
     c48:	21 30       	cpi	r18, 0x01	; 1
     c4a:	59 f5       	brne	.+86     	; 0xca2 <Isb_App_Exec+0xf4>
     c4c:	45 c0       	rjmp	.+138    	; 0xcd8 <Isb_App_Exec+0x12a>
     c4e:	61 e0       	ldi	r22, 0x01	; 1
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	a2 e0       	ldi	r26, 0x02	; 2
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	03 e0       	ldi	r16, 0x03	; 3
     c58:	10 e0       	ldi	r17, 0x00	; 0
     c5a:	34 e0       	ldi	r19, 0x04	; 4
     c5c:	e3 2e       	mov	r14, r19
     c5e:	f1 2c       	mov	r15, r1
     c60:	25 e0       	ldi	r18, 0x05	; 5
     c62:	c2 2e       	mov	r12, r18
     c64:	d1 2c       	mov	r13, r1
     c66:	86 e0       	ldi	r24, 0x06	; 6
     c68:	a8 2e       	mov	r10, r24
     c6a:	b1 2c       	mov	r11, r1
     c6c:	e7 e0       	ldi	r30, 0x07	; 7
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	fc a7       	std	Y+44, r31	; 0x2c
     c72:	eb a7       	std	Y+43, r30	; 0x2b
     c74:	fc e0       	ldi	r31, 0x0C	; 12
     c76:	6f 2e       	mov	r6, r31
     c78:	71 2c       	mov	r7, r1
     c7a:	ed e0       	ldi	r30, 0x0D	; 13
     c7c:	2e 2e       	mov	r2, r30
     c7e:	31 2c       	mov	r3, r1
     c80:	2e e0       	ldi	r18, 0x0E	; 14
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	3a a7       	std	Y+42, r19	; 0x2a
     c86:	29 a7       	std	Y+41, r18	; 0x29
     c88:	43 e1       	ldi	r20, 0x13	; 19
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	58 a7       	std	Y+40, r21	; 0x28
     c8e:	4f a3       	std	Y+39, r20	; 0x27
     c90:	e4 e1       	ldi	r30, 0x14	; 20
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	fe a3       	std	Y+38, r31	; 0x26
     c96:	ed a3       	std	Y+37, r30	; 0x25
     c98:	25 e1       	ldi	r18, 0x15	; 21
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	3c a3       	std	Y+36, r19	; 0x24
     c9e:	2b a3       	std	Y+35, r18	; 0x23
     ca0:	44 c0       	rjmp	.+136    	; 0xd2a <Isb_App_Exec+0x17c>
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	a0 e0       	ldi	r26, 0x00	; 0
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	00 e0       	ldi	r16, 0x00	; 0
     cac:	10 e0       	ldi	r17, 0x00	; 0
     cae:	ee 24       	eor	r14, r14
     cb0:	ff 24       	eor	r15, r15
     cb2:	cc 24       	eor	r12, r12
     cb4:	dd 24       	eor	r13, r13
     cb6:	aa 24       	eor	r10, r10
     cb8:	bb 24       	eor	r11, r11
     cba:	1c a6       	std	Y+44, r1	; 0x2c
     cbc:	1b a6       	std	Y+43, r1	; 0x2b
     cbe:	66 24       	eor	r6, r6
     cc0:	77 24       	eor	r7, r7
     cc2:	22 24       	eor	r2, r2
     cc4:	33 24       	eor	r3, r3
     cc6:	1a a6       	std	Y+42, r1	; 0x2a
     cc8:	19 a6       	std	Y+41, r1	; 0x29
     cca:	18 a6       	std	Y+40, r1	; 0x28
     ccc:	1f a2       	std	Y+39, r1	; 0x27
     cce:	1e a2       	std	Y+38, r1	; 0x26
     cd0:	1d a2       	std	Y+37, r1	; 0x25
     cd2:	1c a2       	std	Y+36, r1	; 0x24
     cd4:	1b a2       	std	Y+35, r1	; 0x23
     cd6:	29 c0       	rjmp	.+82     	; 0xd2a <Isb_App_Exec+0x17c>
     cd8:	6c e1       	ldi	r22, 0x1C	; 28
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	ad e1       	ldi	r26, 0x1D	; 29
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	0e e1       	ldi	r16, 0x1E	; 30
     ce2:	10 e0       	ldi	r17, 0x00	; 0
     ce4:	5f e1       	ldi	r21, 0x1F	; 31
     ce6:	e5 2e       	mov	r14, r21
     ce8:	f1 2c       	mov	r15, r1
     cea:	40 e2       	ldi	r20, 0x20	; 32
     cec:	c4 2e       	mov	r12, r20
     cee:	d1 2c       	mov	r13, r1
     cf0:	31 e2       	ldi	r19, 0x21	; 33
     cf2:	a3 2e       	mov	r10, r19
     cf4:	b1 2c       	mov	r11, r1
     cf6:	42 e2       	ldi	r20, 0x22	; 34
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	5c a7       	std	Y+44, r21	; 0x2c
     cfc:	4b a7       	std	Y+43, r20	; 0x2b
     cfe:	27 e2       	ldi	r18, 0x27	; 39
     d00:	62 2e       	mov	r6, r18
     d02:	71 2c       	mov	r7, r1
     d04:	88 e2       	ldi	r24, 0x28	; 40
     d06:	28 2e       	mov	r2, r24
     d08:	31 2c       	mov	r3, r1
     d0a:	e9 e2       	ldi	r30, 0x29	; 41
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	fa a7       	std	Y+42, r31	; 0x2a
     d10:	e9 a7       	std	Y+41, r30	; 0x29
     d12:	2e e2       	ldi	r18, 0x2E	; 46
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	38 a7       	std	Y+40, r19	; 0x28
     d18:	2f a3       	std	Y+39, r18	; 0x27
     d1a:	4f e2       	ldi	r20, 0x2F	; 47
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	5e a3       	std	Y+38, r21	; 0x26
     d20:	4d a3       	std	Y+37, r20	; 0x25
     d22:	e0 e3       	ldi	r30, 0x30	; 48
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	fc a3       	std	Y+36, r31	; 0x24
     d28:	eb a3       	std	Y+35, r30	; 0x23
		uint8_t Isb_Ch_Ctrl_Get(uint8_t Ch)
		{
			uint8_t Ctrl = 0;
			uint16_t eepAddrCtrl = 0;
			uint16_t eepAddrCrc = 0;
			switch (Ch)
     d2a:	91 30       	cpi	r25, 0x01	; 1
     d2c:	61 f0       	breq	.+24     	; 0xd46 <Isb_App_Exec+0x198>
     d2e:	91 30       	cpi	r25, 0x01	; 1
     d30:	28 f0       	brcs	.+10     	; 0xd3c <Isb_App_Exec+0x18e>
     d32:	92 30       	cpi	r25, 0x02	; 2
     d34:	69 f0       	breq	.+26     	; 0xd50 <Isb_App_Exec+0x1a2>
     d36:	93 30       	cpi	r25, 0x03	; 3
     d38:	b9 f4       	brne	.+46     	; 0xd68 <Isb_App_Exec+0x1ba>
     d3a:	0f c0       	rjmp	.+30     	; 0xd5a <Isb_App_Exec+0x1ac>
     d3c:	4a e1       	ldi	r20, 0x1A	; 26
     d3e:	50 e0       	ldi	r21, 0x00	; 0
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e c0       	rjmp	.+28     	; 0xd62 <Isb_App_Exec+0x1b4>
     d46:	45 e3       	ldi	r20, 0x35	; 53
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	8b e1       	ldi	r24, 0x1B	; 27
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	09 c0       	rjmp	.+18     	; 0xd62 <Isb_App_Exec+0x1b4>
     d50:	4e e5       	ldi	r20, 0x5E	; 94
     d52:	50 e0       	ldi	r21, 0x00	; 0
     d54:	86 e3       	ldi	r24, 0x36	; 54
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	04 c0       	rjmp	.+8      	; 0xd62 <Isb_App_Exec+0x1b4>
     d5a:	47 e8       	ldi	r20, 0x87	; 135
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	8f e5       	ldi	r24, 0x5F	; 95
     d60:	90 e0       	ldi	r25, 0x00	; 0
//-				default:
//-					eepAddrCtrl = 0;
//-					eepAddrCrc = 0;
//-					break;
			}
			if ((eepAddrCrc != 0) & (eepAddrCtrl < eepAddrCrc))
     d62:	84 17       	cp	r24, r20
     d64:	95 07       	cpc	r25, r21
     d66:	10 f0       	brcs	.+4      	; 0xd6c <Isb_App_Exec+0x1be>
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	12 c0       	rjmp	.+36     	; 0xd90 <Isb_App_Exec+0x1e2>
     d6c:	9c 01       	movw	r18, r24
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <Isb_App_Exec+0x1c6>
			{
				uint8_t Crc = 0;
				for (uint16_t eepAddr = eepAddrCtrl; eepAddr <= eepAddrCrc; eepAddr++)
     d70:	2f 5f       	subi	r18, 0xFF	; 255
     d72:	3f 4f       	sbci	r19, 0xFF	; 255
     d74:	42 17       	cp	r20, r18
     d76:	53 07       	cpc	r21, r19
     d78:	d8 f7       	brcc	.-10     	; 0xd70 <Isb_App_Exec+0x1c2>
	}



	uint8_t __attribute__((always_inline)) lib_eep_fw_read_byte(uint8_t * aAddr) {
		return eeprom_read_byte(Isb_Firmware_Offset + aAddr);;
     d7a:	20 91 a7 00 	lds	r18, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d7e:	e1 99       	sbic	0x1c, 1	; 28
     d80:	fe cf       	rjmp	.-4      	; 0xd7e <Isb_App_Exec+0x1d0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     d82:	82 0f       	add	r24, r18
     d84:	91 1d       	adc	r25, r1
     d86:	9f bb       	out	0x1f, r25	; 31
     d88:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     d8a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     d8c:	8d b3       	in	r24, 0x1d	; 29
				}
				else
				{
					Ctrl = (1<<ISB_CH_CTRL_ERROR_CRC);
				}
				Ctrl &= ~(1<<ISB_CH_CTRL_INITIALIZED);
     d8e:	8f 73       	andi	r24, 0x3F	; 63
									eepAddr_Obj_2_Tov = ISB_APP_DIGIN_15_OBJ_2_EEADDR_TOV;
									eepAddr_Obj_2_InitValue = ISB_APP_DIGIN_15_OBJ_2_EEADDR_INITVALUE;
									break;
							#endif /* ISB_APP_DIGIN_15 */
						}
						Isb_Ch[Ch].Ctrl = Isb_Ch_Ctrl_Get(Ch);
     d90:	2e a9       	ldd	r18, Y+54	; 0x36
     d92:	3f a9       	ldd	r19, Y+55	; 0x37
     d94:	22 0f       	add	r18, r18
     d96:	33 1f       	adc	r19, r19
     d98:	2d 54       	subi	r18, 0x4D	; 77
     d9a:	3f 4f       	sbci	r19, 0xFF	; 255
     d9c:	f9 01       	movw	r30, r18
     d9e:	80 83       	st	Z, r24
     da0:	11 82       	std	Z+1, r1	; 0x01
						if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED))
     da2:	ec a9       	ldd	r30, Y+52	; 0x34
     da4:	fd a9       	ldd	r31, Y+53	; 0x35
     da6:	80 81       	ld	r24, Z
     da8:	80 ff       	sbrs	r24, 0
     daa:	48 c1       	rjmp	.+656    	; 0x103c <Isb_App_Exec+0x48e>
     dac:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     db0:	e1 99       	sbic	0x1c, 1	; 28
     db2:	fe cf       	rjmp	.-4      	; 0xdb0 <Isb_App_Exec+0x202>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     db4:	68 0f       	add	r22, r24
     db6:	71 1d       	adc	r23, r1
     db8:	7f bb       	out	0x1f, r23	; 31
     dba:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
     dbc:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     dbe:	8d b3       	in	r24, 0x1d	; 29
						{
							Isb_App_DigIn[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg0);
     dc0:	e8 ad       	ldd	r30, Y+56	; 0x38
     dc2:	f9 ad       	ldd	r31, Y+57	; 0x39
     dc4:	80 83       	st	Z, r24
     dc6:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     dca:	e1 99       	sbic	0x1c, 1	; 28
     dcc:	fe cf       	rjmp	.-4      	; 0xdca <Isb_App_Exec+0x21c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     dce:	a8 0f       	add	r26, r24
     dd0:	b1 1d       	adc	r27, r1
     dd2:	bf bb       	out	0x1f, r27	; 31
     dd4:	ae bb       	out	0x1e, r26	; 30
#endif
    EECR |= (1 << EERE);
     dd6:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     dd8:	8d b3       	in	r24, 0x1d	; 29
							Isb_App_DigIn[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg1);
     dda:	a8 ad       	ldd	r26, Y+56	; 0x38
     ddc:	b9 ad       	ldd	r27, Y+57	; 0x39
     dde:	11 96       	adiw	r26, 0x01	; 1
     de0:	8c 93       	st	X, r24
     de2:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     de6:	e1 99       	sbic	0x1c, 1	; 28
     de8:	fe cf       	rjmp	.-4      	; 0xde6 <Isb_App_Exec+0x238>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     dea:	08 0f       	add	r16, r24
     dec:	11 1d       	adc	r17, r1
     dee:	1f bb       	out	0x1f, r17	; 31
     df0:	0e bb       	out	0x1e, r16	; 30
#endif
    EECR |= (1 << EERE);
     df2:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     df4:	8d b3       	in	r24, 0x1d	; 29
							Isb_App_DigIn[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg2);
     df6:	e8 ad       	ldd	r30, Y+56	; 0x38
     df8:	f9 ad       	ldd	r31, Y+57	; 0x39
     dfa:	82 83       	std	Z+2, r24	; 0x02
     dfc:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e00:	e1 99       	sbic	0x1c, 1	; 28
     e02:	fe cf       	rjmp	.-4      	; 0xe00 <Isb_App_Exec+0x252>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     e04:	e8 0e       	add	r14, r24
     e06:	f1 1c       	adc	r15, r1
     e08:	ff ba       	out	0x1f, r15	; 31
     e0a:	ee ba       	out	0x1e, r14	; 30
#endif
    EECR |= (1 << EERE);
     e0c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     e0e:	8d b3       	in	r24, 0x1d	; 29
							Isb_App_DigIn[AppIndex].Cfg3 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg3);
     e10:	a8 ad       	ldd	r26, Y+56	; 0x38
     e12:	b9 ad       	ldd	r27, Y+57	; 0x39
     e14:	13 96       	adiw	r26, 0x03	; 3
     e16:	8c 93       	st	X, r24
							uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
     e18:	bf a5       	ldd	r27, Y+47	; 0x2f
     e1a:	2b 2f       	mov	r18, r27
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	c9 01       	movw	r24, r18
     e20:	88 73       	andi	r24, 0x38	; 56
     e22:	90 70       	andi	r25, 0x00	; 0
     e24:	e3 e0       	ldi	r30, 0x03	; 3
     e26:	95 95       	asr	r25
     e28:	87 95       	ror	r24
     e2a:	ea 95       	dec	r30
     e2c:	e1 f7       	brne	.-8      	; 0xe26 <Isb_App_Exec+0x278>
							uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
							if (Port != 0)
     e2e:	88 23       	and	r24, r24
     e30:	49 f0       	breq	.+18     	; 0xe44 <Isb_App_Exec+0x296>
							Isb_App_DigIn[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg0);
							Isb_App_DigIn[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg1);
							Isb_App_DigIn[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg2);
							Isb_App_DigIn[AppIndex].Cfg3 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg3);
							uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
							uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
     e32:	6b 2f       	mov	r22, r27
     e34:	67 70       	andi	r22, 0x07	; 7
							if (Port != 0)
							{
								if ((Pin0 & PULLUP) == 0)
     e36:	b6 fd       	sbrc	r27, 6
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <Isb_App_Exec+0x290>
								{
									Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT);
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <Isb_App_Exec+0x292>
								}
								else
								{
									Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT_PULLUP);
     e3e:	42 e0       	ldi	r20, 0x02	; 2
     e40:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>
								}
							}
							Isb_Obj[Obj_0].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Ctrl);
     e44:	ee a5       	ldd	r30, Y+46	; 0x2e
     e46:	4e 2f       	mov	r20, r30
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e4e:	e1 99       	sbic	0x1c, 1	; 28
     e50:	fe cf       	rjmp	.-4      	; 0xe4e <Isb_App_Exec+0x2a0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     e52:	c8 0e       	add	r12, r24
     e54:	d1 1c       	adc	r13, r1
     e56:	df ba       	out	0x1f, r13	; 31
     e58:	ce ba       	out	0x1e, r12	; 30
#endif
    EECR |= (1 << EERE);
     e5a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     e5c:	8d b3       	in	r24, 0x1d	; 29
     e5e:	fa 01       	movw	r30, r20
     e60:	73 e0       	ldi	r23, 0x03	; 3
     e62:	ee 0f       	add	r30, r30
     e64:	ff 1f       	adc	r31, r31
     e66:	7a 95       	dec	r23
     e68:	e1 f7       	brne	.-8      	; 0xe62 <Isb_App_Exec+0x2b4>
     e6a:	e4 0f       	add	r30, r20
     e6c:	f5 1f       	adc	r31, r21
     e6e:	ed 5f       	subi	r30, 0xFD	; 253
     e70:	fe 4f       	sbci	r31, 0xFE	; 254
     e72:	80 83       	st	Z, r24
							Isb_Obj[Obj_0].Top = ISB_MSG_TOP_1BIT;
     e74:	51 82       	std	Z+1, r5	; 0x01
     e76:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     e7a:	e1 99       	sbic	0x1c, 1	; 28
     e7c:	fe cf       	rjmp	.-4      	; 0xe7a <Isb_App_Exec+0x2cc>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     e7e:	a8 0e       	add	r10, r24
     e80:	b1 1c       	adc	r11, r1
     e82:	bf ba       	out	0x1f, r11	; 31
     e84:	ae ba       	out	0x1e, r10	; 30
#endif
    EECR |= (1 << EERE);
     e86:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     e88:	8d b3       	in	r24, 0x1d	; 29
							Isb_Obj[Obj_0].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Tov);
     e8a:	9a 01       	movw	r18, r20
     e8c:	63 e0       	ldi	r22, 0x03	; 3
     e8e:	22 0f       	add	r18, r18
     e90:	33 1f       	adc	r19, r19
     e92:	6a 95       	dec	r22
     e94:	e1 f7       	brne	.-8      	; 0xe8e <Isb_App_Exec+0x2e0>
     e96:	24 0f       	add	r18, r20
     e98:	35 1f       	adc	r19, r21
     e9a:	f9 01       	movw	r30, r18
     e9c:	ed 5f       	subi	r30, 0xFD	; 253
     e9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ea0:	82 83       	std	Z+2, r24	; 0x02
     ea2:	f9 01       	movw	r30, r18
     ea4:	ea 5f       	subi	r30, 0xFA	; 250
     ea6:	fe 4f       	sbci	r31, 0xFE	; 254
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	60 91 a7 00 	lds	r22, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     eb0:	e1 99       	sbic	0x1c, 1	; 28
     eb2:	fe cf       	rjmp	.-4      	; 0xeb0 <Isb_App_Exec+0x302>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     eb4:	8b a5       	ldd	r24, Y+43	; 0x2b
     eb6:	9c a5       	ldd	r25, Y+44	; 0x2c
     eb8:	82 0f       	add	r24, r18
     eba:	93 1f       	adc	r25, r19
     ebc:	86 0f       	add	r24, r22
     ebe:	91 1d       	adc	r25, r1
     ec0:	9f bb       	out	0x1f, r25	; 31
     ec2:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     ec4:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     ec6:	8d b3       	in	r24, 0x1d	; 29
							for (uint8_t i = 0; i < 5; i++)
							{
								Isb_Obj[Obj_0].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_0_InitValue + i));
     ec8:	81 93       	st	Z+, r24
     eca:	2f 5f       	subi	r18, 0xFF	; 255
     ecc:	3f 4f       	sbci	r19, 0xFF	; 255
								}
							}
							Isb_Obj[Obj_0].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Ctrl);
							Isb_Obj[Obj_0].Top = ISB_MSG_TOP_1BIT;
							Isb_Obj[Obj_0].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Tov);
							for (uint8_t i = 0; i < 5; i++)
     ece:	25 30       	cpi	r18, 0x05	; 5
     ed0:	31 05       	cpc	r19, r1
     ed2:	61 f7       	brne	.-40     	; 0xeac <Isb_App_Exec+0x2fe>
							{
								Isb_Obj[Obj_0].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_0_InitValue + i));
							}
							Isb_Obj[Obj_0].IsChanged = FALSE;
     ed4:	fa 01       	movw	r30, r20
     ed6:	33 e0       	ldi	r19, 0x03	; 3
     ed8:	ee 0f       	add	r30, r30
     eda:	ff 1f       	adc	r31, r31
     edc:	3a 95       	dec	r19
     ede:	e1 f7       	brne	.-8      	; 0xed8 <Isb_App_Exec+0x32a>
     ee0:	e4 0f       	add	r30, r20
     ee2:	f5 1f       	adc	r31, r21
     ee4:	ed 5f       	subi	r30, 0xFD	; 253
     ee6:	fe 4f       	sbci	r31, 0xFE	; 254
     ee8:	10 86       	std	Z+8, r1	; 0x08
							Isb_Obj[Obj_1].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_1_Ctrl);
     eea:	44 2d       	mov	r20, r4
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     ef2:	e1 99       	sbic	0x1c, 1	; 28
     ef4:	fe cf       	rjmp	.-4      	; 0xef2 <Isb_App_Exec+0x344>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     ef6:	68 0e       	add	r6, r24
     ef8:	71 1c       	adc	r7, r1
     efa:	7f ba       	out	0x1f, r7	; 31
     efc:	6e ba       	out	0x1e, r6	; 30
#endif
    EECR |= (1 << EERE);
     efe:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     f00:	8d b3       	in	r24, 0x1d	; 29
     f02:	fa 01       	movw	r30, r20
     f04:	23 e0       	ldi	r18, 0x03	; 3
     f06:	ee 0f       	add	r30, r30
     f08:	ff 1f       	adc	r31, r31
     f0a:	2a 95       	dec	r18
     f0c:	e1 f7       	brne	.-8      	; 0xf06 <Isb_App_Exec+0x358>
     f0e:	e4 0f       	add	r30, r20
     f10:	f5 1f       	adc	r31, r21
     f12:	ed 5f       	subi	r30, 0xFD	; 253
     f14:	fe 4f       	sbci	r31, 0xFE	; 254
     f16:	80 83       	st	Z, r24
							Isb_Obj[Obj_1].Top = ISB_MSG_TOP_1BIT;
     f18:	51 82       	std	Z+1, r5	; 0x01
     f1a:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f1e:	e1 99       	sbic	0x1c, 1	; 28
     f20:	fe cf       	rjmp	.-4      	; 0xf1e <Isb_App_Exec+0x370>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     f22:	28 0e       	add	r2, r24
     f24:	31 1c       	adc	r3, r1
     f26:	3f ba       	out	0x1f, r3	; 31
     f28:	2e ba       	out	0x1e, r2	; 30
#endif
    EECR |= (1 << EERE);
     f2a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     f2c:	8d b3       	in	r24, 0x1d	; 29
							Isb_Obj[Obj_1].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_1_Tov);
     f2e:	9a 01       	movw	r18, r20
     f30:	93 e0       	ldi	r25, 0x03	; 3
     f32:	22 0f       	add	r18, r18
     f34:	33 1f       	adc	r19, r19
     f36:	9a 95       	dec	r25
     f38:	e1 f7       	brne	.-8      	; 0xf32 <Isb_App_Exec+0x384>
     f3a:	24 0f       	add	r18, r20
     f3c:	35 1f       	adc	r19, r21
     f3e:	f9 01       	movw	r30, r18
     f40:	ed 5f       	subi	r30, 0xFD	; 253
     f42:	fe 4f       	sbci	r31, 0xFE	; 254
     f44:	82 83       	std	Z+2, r24	; 0x02
     f46:	f9 01       	movw	r30, r18
     f48:	ea 5f       	subi	r30, 0xFA	; 250
     f4a:	fe 4f       	sbci	r31, 0xFE	; 254
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	60 91 a7 00 	lds	r22, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f54:	e1 99       	sbic	0x1c, 1	; 28
     f56:	fe cf       	rjmp	.-4      	; 0xf54 <Isb_App_Exec+0x3a6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     f58:	89 a5       	ldd	r24, Y+41	; 0x29
     f5a:	9a a5       	ldd	r25, Y+42	; 0x2a
     f5c:	82 0f       	add	r24, r18
     f5e:	93 1f       	adc	r25, r19
     f60:	86 0f       	add	r24, r22
     f62:	91 1d       	adc	r25, r1
     f64:	9f bb       	out	0x1f, r25	; 31
     f66:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     f68:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     f6a:	8d b3       	in	r24, 0x1d	; 29
							for (uint8_t i = 0; i < 5; i++)
							{
								Isb_Obj[Obj_1].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_1_InitValue + i));
     f6c:	81 93       	st	Z+, r24
     f6e:	2f 5f       	subi	r18, 0xFF	; 255
     f70:	3f 4f       	sbci	r19, 0xFF	; 255
							}
							Isb_Obj[Obj_0].IsChanged = FALSE;
							Isb_Obj[Obj_1].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_1_Ctrl);
							Isb_Obj[Obj_1].Top = ISB_MSG_TOP_1BIT;
							Isb_Obj[Obj_1].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_1_Tov);
							for (uint8_t i = 0; i < 5; i++)
     f72:	25 30       	cpi	r18, 0x05	; 5
     f74:	31 05       	cpc	r19, r1
     f76:	61 f7       	brne	.-40     	; 0xf50 <Isb_App_Exec+0x3a2>
							{
								Isb_Obj[Obj_1].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_1_InitValue + i));
							}
							Isb_Obj[Obj_1].IsChanged = FALSE;
     f78:	fa 01       	movw	r30, r20
     f7a:	83 e0       	ldi	r24, 0x03	; 3
     f7c:	ee 0f       	add	r30, r30
     f7e:	ff 1f       	adc	r31, r31
     f80:	8a 95       	dec	r24
     f82:	e1 f7       	brne	.-8      	; 0xf7c <Isb_App_Exec+0x3ce>
     f84:	e4 0f       	add	r30, r20
     f86:	f5 1f       	adc	r31, r21
     f88:	ed 5f       	subi	r30, 0xFD	; 253
     f8a:	fe 4f       	sbci	r31, 0xFE	; 254
     f8c:	10 86       	std	Z+8, r1	; 0x08
							Isb_Obj[Obj_2].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_2_Ctrl);
     f8e:	fd a5       	ldd	r31, Y+45	; 0x2d
     f90:	4f 2f       	mov	r20, r31
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     f98:	e1 99       	sbic	0x1c, 1	; 28
     f9a:	fe cf       	rjmp	.-4      	; 0xf98 <Isb_App_Exec+0x3ea>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     f9c:	2f a1       	ldd	r18, Y+39	; 0x27
     f9e:	38 a5       	ldd	r19, Y+40	; 0x28
     fa0:	28 0f       	add	r18, r24
     fa2:	31 1d       	adc	r19, r1
     fa4:	3f bb       	out	0x1f, r19	; 31
     fa6:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
     fa8:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     faa:	8d b3       	in	r24, 0x1d	; 29
     fac:	fa 01       	movw	r30, r20
     fae:	03 e0       	ldi	r16, 0x03	; 3
     fb0:	ee 0f       	add	r30, r30
     fb2:	ff 1f       	adc	r31, r31
     fb4:	0a 95       	dec	r16
     fb6:	e1 f7       	brne	.-8      	; 0xfb0 <Isb_App_Exec+0x402>
     fb8:	e4 0f       	add	r30, r20
     fba:	f5 1f       	adc	r31, r21
     fbc:	ed 5f       	subi	r30, 0xFD	; 253
     fbe:	fe 4f       	sbci	r31, 0xFE	; 254
     fc0:	80 83       	st	Z, r24
							Isb_Obj[Obj_2].Top = ISB_MSG_TOP_1BIT;
     fc2:	51 82       	std	Z+1, r5	; 0x01
     fc4:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     fc8:	e1 99       	sbic	0x1c, 1	; 28
     fca:	fe cf       	rjmp	.-4      	; 0xfc8 <Isb_App_Exec+0x41a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     fcc:	ad a1       	ldd	r26, Y+37	; 0x25
     fce:	be a1       	ldd	r27, Y+38	; 0x26
     fd0:	a8 0f       	add	r26, r24
     fd2:	b1 1d       	adc	r27, r1
     fd4:	bf bb       	out	0x1f, r27	; 31
     fd6:	ae bb       	out	0x1e, r26	; 30
#endif
    EECR |= (1 << EERE);
     fd8:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     fda:	8d b3       	in	r24, 0x1d	; 29
							Isb_Obj[Obj_2].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_2_Tov);
     fdc:	9a 01       	movw	r18, r20
     fde:	13 e0       	ldi	r17, 0x03	; 3
     fe0:	22 0f       	add	r18, r18
     fe2:	33 1f       	adc	r19, r19
     fe4:	1a 95       	dec	r17
     fe6:	e1 f7       	brne	.-8      	; 0xfe0 <Isb_App_Exec+0x432>
     fe8:	24 0f       	add	r18, r20
     fea:	35 1f       	adc	r19, r21
     fec:	f9 01       	movw	r30, r18
     fee:	ed 5f       	subi	r30, 0xFD	; 253
     ff0:	fe 4f       	sbci	r31, 0xFE	; 254
     ff2:	82 83       	std	Z+2, r24	; 0x02
     ff4:	f9 01       	movw	r30, r18
     ff6:	ea 5f       	subi	r30, 0xFA	; 250
     ff8:	fe 4f       	sbci	r31, 0xFE	; 254
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	60 91 a7 00 	lds	r22, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1002:	e1 99       	sbic	0x1c, 1	; 28
    1004:	fe cf       	rjmp	.-4      	; 0x1002 <Isb_App_Exec+0x454>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1006:	8b a1       	ldd	r24, Y+35	; 0x23
    1008:	9c a1       	ldd	r25, Y+36	; 0x24
    100a:	82 0f       	add	r24, r18
    100c:	93 1f       	adc	r25, r19
    100e:	86 0f       	add	r24, r22
    1010:	91 1d       	adc	r25, r1
    1012:	9f bb       	out	0x1f, r25	; 31
    1014:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    1016:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1018:	8d b3       	in	r24, 0x1d	; 29
							for (uint8_t i = 0; i < 5; i++)
							{
								Isb_Obj[Obj_2].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_2_InitValue + i));
    101a:	81 93       	st	Z+, r24
    101c:	2f 5f       	subi	r18, 0xFF	; 255
    101e:	3f 4f       	sbci	r19, 0xFF	; 255
							}
							Isb_Obj[Obj_1].IsChanged = FALSE;
							Isb_Obj[Obj_2].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_2_Ctrl);
							Isb_Obj[Obj_2].Top = ISB_MSG_TOP_1BIT;
							Isb_Obj[Obj_2].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_2_Tov);
							for (uint8_t i = 0; i < 5; i++)
    1020:	25 30       	cpi	r18, 0x05	; 5
    1022:	31 05       	cpc	r19, r1
    1024:	61 f7       	brne	.-40     	; 0xffe <Isb_App_Exec+0x450>
							{
								Isb_Obj[Obj_2].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_2_InitValue + i));
							}
							Isb_Obj[Obj_2].IsChanged = FALSE;
    1026:	fa 01       	movw	r30, r20
    1028:	b3 e0       	ldi	r27, 0x03	; 3
    102a:	ee 0f       	add	r30, r30
    102c:	ff 1f       	adc	r31, r31
    102e:	ba 95       	dec	r27
    1030:	e1 f7       	brne	.-8      	; 0x102a <Isb_App_Exec+0x47c>
    1032:	e4 0f       	add	r30, r20
    1034:	f5 1f       	adc	r31, r21
    1036:	ed 5f       	subi	r30, 0xFD	; 253
    1038:	fe 4f       	sbci	r31, 0xFE	; 254
    103a:	10 86       	std	Z+8, r1	; 0x08
						}
						Isb_Ch[Ch].Ctrl |= (1<<ISB_CH_CTRL_INITIALIZED);
    103c:	ee a9       	ldd	r30, Y+54	; 0x36
    103e:	ff a9       	ldd	r31, Y+55	; 0x37
    1040:	ee 0f       	add	r30, r30
    1042:	ff 1f       	adc	r31, r31
    1044:	ed 54       	subi	r30, 0x4D	; 77
    1046:	ff 4f       	sbci	r31, 0xFF	; 255
    1048:	80 81       	ld	r24, Z
    104a:	91 81       	ldd	r25, Z+1	; 0x01
    104c:	80 64       	ori	r24, 0x40	; 64
    104e:	91 83       	std	Z+1, r25	; 0x01
    1050:	80 83       	st	Z, r24
					}
					// Exec
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED))
    1052:	ec a9       	ldd	r30, Y+52	; 0x34
    1054:	fd a9       	ldd	r31, Y+53	; 0x35
    1056:	80 81       	ld	r24, Z
    1058:	80 ff       	sbrs	r24, 0
    105a:	8b c3       	rjmp	.+1814   	; 0x1772 <Isb_App_Exec+0xbc4>
					{
// -> TODO:
//						if (Isb_Obj[Obj_0].Data[0] == 0)
//						{
							// Pin einlesen
							switch (Isb_App_DigIn[AppIndex].Cfg0 & ISB_APP_DIGIN_CFG0_SOURCE_MASK)
    105c:	a8 ad       	ldd	r26, Y+56	; 0x38
    105e:	b9 ad       	ldd	r27, Y+57	; 0x39
    1060:	8c 91       	ld	r24, X
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	83 70       	andi	r24, 0x03	; 3
    1066:	90 70       	andi	r25, 0x00	; 0
    1068:	89 2b       	or	r24, r25
    106a:	09 f0       	breq	.+2      	; 0x106e <Isb_App_Exec+0x4c0>
    106c:	4e c0       	rjmp	.+156    	; 0x110a <Isb_App_Exec+0x55c>
							{
								#if ISB_APP_DIGIN_SOURCE_FEATURE_PIN == TRUE
									case ISB_APP_DIGIN_CFG0_SOURCE_STD:
										;
										uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
    106e:	bf a5       	ldd	r27, Y+47	; 0x2f
    1070:	8b 2f       	mov	r24, r27
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	88 73       	andi	r24, 0x38	; 56
    1076:	90 70       	andi	r25, 0x00	; 0
    1078:	e3 e0       	ldi	r30, 0x03	; 3
    107a:	95 95       	asr	r25
    107c:	87 95       	ror	r24
    107e:	ea 95       	dec	r30
    1080:	e1 f7       	brne	.-8      	; 0x107a <Isb_App_Exec+0x4cc>
    1082:	98 2f       	mov	r25, r24
										uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
										if (Port != 0)
    1084:	88 23       	and	r24, r24
    1086:	09 f4       	brne	.+2      	; 0x108a <Isb_App_Exec+0x4dc>
    1088:	40 c0       	rjmp	.+128    	; 0x110a <Isb_App_Exec+0x55c>
							{
								#if ISB_APP_DIGIN_SOURCE_FEATURE_PIN == TRUE
									case ISB_APP_DIGIN_CFG0_SOURCE_STD:
										;
										uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
										uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
    108a:	2b 2f       	mov	r18, r27
    108c:	27 70       	andi	r18, 0x07	; 7
										if (Port != 0)
										{
											if (bit_is_clear(Isb_App_DigIn[AppIndex].Cfg0, ISB_APP_DIGIN_CFG0_PIN0_INVERTED))
    108e:	f4 01       	movw	r30, r8
    1090:	73 e0       	ldi	r23, 0x03	; 3
    1092:	ee 0f       	add	r30, r30
    1094:	ff 1f       	adc	r31, r31
    1096:	7a 95       	dec	r23
    1098:	e1 f7       	brne	.-8      	; 0x1092 <Isb_App_Exec+0x4e4>
    109a:	e5 54       	subi	r30, 0x45	; 69
    109c:	ff 4f       	sbci	r31, 0xFF	; 255
    109e:	80 81       	ld	r24, Z
    10a0:	e9 2f       	mov	r30, r25
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	82 fd       	sbrc	r24, 2
    10a6:	19 c0       	rjmp	.+50     	; 0x10da <Isb_App_Exec+0x52c>
	#endif



	uint8_t Lib_Pin_Get(const uint8_t aPort, const uint8_t aPin) {
		return (*(PINx[aPort]) >> aPin) & 1;
    10a8:	ee 0f       	add	r30, r30
    10aa:	ff 1f       	adc	r31, r31
    10ac:	ec 57       	subi	r30, 0x7C	; 124
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	01 90       	ld	r0, Z+
    10b2:	f0 81       	ld	r31, Z
    10b4:	e0 2d       	mov	r30, r0
    10b6:	80 81       	ld	r24, Z
											{
												if (Lib_Pin_Get(Port, Pin) != 0)
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <Isb_App_Exec+0x512>
    10bc:	95 95       	asr	r25
    10be:	87 95       	ror	r24
    10c0:	2a 95       	dec	r18
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <Isb_App_Exec+0x50e>
    10c4:	80 ff       	sbrs	r24, 0
    10c6:	04 c0       	rjmp	.+8      	; 0x10d0 <Isb_App_Exec+0x522>
												{
													Isb_App_DigIn[AppIndex].Value = 1;
    10c8:	e8 ad       	ldd	r30, Y+56	; 0x38
    10ca:	f9 ad       	ldd	r31, Y+57	; 0x39
    10cc:	54 82       	std	Z+4, r5	; 0x04
    10ce:	1d c0       	rjmp	.+58     	; 0x110a <Isb_App_Exec+0x55c>
												}
												else
												{
													Isb_App_DigIn[AppIndex].Value = 0;
    10d0:	a8 ad       	ldd	r26, Y+56	; 0x38
    10d2:	b9 ad       	ldd	r27, Y+57	; 0x39
    10d4:	14 96       	adiw	r26, 0x04	; 4
    10d6:	1c 92       	st	X, r1
    10d8:	18 c0       	rjmp	.+48     	; 0x110a <Isb_App_Exec+0x55c>
    10da:	ee 0f       	add	r30, r30
    10dc:	ff 1f       	adc	r31, r31
    10de:	ec 57       	subi	r30, 0x7C	; 124
    10e0:	ff 4f       	sbci	r31, 0xFF	; 255
    10e2:	01 90       	ld	r0, Z+
    10e4:	f0 81       	ld	r31, Z
    10e6:	e0 2d       	mov	r30, r0
    10e8:	80 81       	ld	r24, Z
												}
											}
											else
											{
												if (Lib_Pin_Get(Port, Pin) != 0)
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <Isb_App_Exec+0x544>
    10ee:	95 95       	asr	r25
    10f0:	87 95       	ror	r24
    10f2:	2a 95       	dec	r18
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <Isb_App_Exec+0x540>
    10f6:	80 ff       	sbrs	r24, 0
    10f8:	04 c0       	rjmp	.+8      	; 0x1102 <Isb_App_Exec+0x554>
												{
													Isb_App_DigIn[AppIndex].Value = 0;
    10fa:	e8 ad       	ldd	r30, Y+56	; 0x38
    10fc:	f9 ad       	ldd	r31, Y+57	; 0x39
    10fe:	14 82       	std	Z+4, r1	; 0x04
    1100:	04 c0       	rjmp	.+8      	; 0x110a <Isb_App_Exec+0x55c>
												}
												else
												{
													Isb_App_DigIn[AppIndex].Value = 1;
    1102:	a8 ad       	ldd	r26, Y+56	; 0x38
    1104:	b9 ad       	ldd	r27, Y+57	; 0x39
    1106:	14 96       	adiw	r26, 0x04	; 4
    1108:	5c 92       	st	X, r5
										Isb_App_DigIn[AppIndex].Value = 0;
										break;
								#endif /* ISB_APP_DIGIN_SOURCE_FEATURE_SLAVE_USART1 == TRUE */
							}
							// Pin auswerten
							if (Isb_App_DigIn[AppIndex].Value != 0)
    110a:	e8 ad       	ldd	r30, Y+56	; 0x38
    110c:	f9 ad       	ldd	r31, Y+57	; 0x39
    110e:	84 81       	ldd	r24, Z+4	; 0x04
    1110:	88 23       	and	r24, r24
    1112:	21 f1       	breq	.+72     	; 0x115c <Isb_App_Exec+0x5ae>
							{
								// Global
								Isb_App_DigIn[AppIndex].CountHigh++;
    1114:	87 81       	ldd	r24, Z+7	; 0x07
    1116:	8f 5f       	subi	r24, 0xFF	; 255
    1118:	87 83       	std	Z+7, r24	; 0x07
								// Event "High" > 40ms
								if (Isb_App_DigIn[AppIndex].CountHigh == 4)
    111a:	84 30       	cpi	r24, 0x04	; 4
    111c:	19 f4       	brne	.+6      	; 0x1124 <Isb_App_Exec+0x576>
								{
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGH);
    111e:	85 81       	ldd	r24, Z+5	; 0x05
    1120:	80 61       	ori	r24, 0x10	; 16
    1122:	85 83       	std	Z+5, r24	; 0x05
								}
								// Event "High Long" > 400ms
								if (Isb_App_DigIn[AppIndex].CountHigh == 40)
    1124:	a8 ad       	ldd	r26, Y+56	; 0x38
    1126:	b9 ad       	ldd	r27, Y+57	; 0x39
    1128:	17 96       	adiw	r26, 0x07	; 7
    112a:	8c 91       	ld	r24, X
    112c:	17 97       	sbiw	r26, 0x07	; 7
    112e:	88 32       	cpi	r24, 0x28	; 40
    1130:	31 f4       	brne	.+12     	; 0x113e <Isb_App_Exec+0x590>
								{
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHLONG);
    1132:	15 96       	adiw	r26, 0x05	; 5
    1134:	8c 91       	ld	r24, X
    1136:	15 97       	sbiw	r26, 0x05	; 5
    1138:	80 64       	ori	r24, 0x40	; 64
    113a:	15 96       	adiw	r26, 0x05	; 5
    113c:	8c 93       	st	X, r24
								}
								// Event "High Repeat"
								if (Isb_App_DigIn[AppIndex].CountHigh == 100)
    113e:	e8 ad       	ldd	r30, Y+56	; 0x38
    1140:	f9 ad       	ldd	r31, Y+57	; 0x39
    1142:	87 81       	ldd	r24, Z+7	; 0x07
    1144:	84 36       	cpi	r24, 0x64	; 100
    1146:	29 f4       	brne	.+10     	; 0x1152 <Isb_App_Exec+0x5a4>
								{
									Isb_App_DigIn[AppIndex].CountHigh = 90;
    1148:	8a e5       	ldi	r24, 0x5A	; 90
    114a:	87 83       	std	Z+7, r24	; 0x07
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHREPEAT);
    114c:	85 81       	ldd	r24, Z+5	; 0x05
    114e:	80 68       	ori	r24, 0x80	; 128
    1150:	85 83       	std	Z+5, r24	; 0x05
//-									{
//-										Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOWSHORT);
//-									}
//-								}
								// Global
								Isb_App_DigIn[AppIndex].CountLow = 0;
    1152:	a8 ad       	ldd	r26, Y+56	; 0x38
    1154:	b9 ad       	ldd	r27, Y+57	; 0x39
    1156:	16 96       	adiw	r26, 0x06	; 6
    1158:	1c 92       	st	X, r1
    115a:	1c c0       	rjmp	.+56     	; 0x1194 <Isb_App_Exec+0x5e6>
							}
							else
							{
								// Global
								Isb_App_DigIn[AppIndex].CountLow++;
    115c:	e8 ad       	ldd	r30, Y+56	; 0x38
    115e:	f9 ad       	ldd	r31, Y+57	; 0x39
    1160:	86 81       	ldd	r24, Z+6	; 0x06
    1162:	8f 5f       	subi	r24, 0xFF	; 255
    1164:	86 83       	std	Z+6, r24	; 0x06
								// Event "Low" > 40ms
								if (Isb_App_DigIn[AppIndex].CountLow == 4)
    1166:	84 30       	cpi	r24, 0x04	; 4
    1168:	19 f4       	brne	.+6      	; 0x1170 <Isb_App_Exec+0x5c2>
								{
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOW);
    116a:	85 81       	ldd	r24, Z+5	; 0x05
    116c:	81 60       	ori	r24, 0x01	; 1
    116e:	85 83       	std	Z+5, r24	; 0x05
//-								{
//-									Isb_App_DigIn[AppIndex].CountLow = 90;
//-									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOWREPEAT);
//-								}
								// Event "High Short" = 40-400ms
								if (Isb_App_DigIn[AppIndex].CountHigh != 0)
    1170:	a8 ad       	ldd	r26, Y+56	; 0x38
    1172:	b9 ad       	ldd	r27, Y+57	; 0x39
    1174:	17 96       	adiw	r26, 0x07	; 7
    1176:	8c 91       	ld	r24, X
    1178:	17 97       	sbiw	r26, 0x07	; 7
    117a:	88 23       	and	r24, r24
    117c:	41 f0       	breq	.+16     	; 0x118e <Isb_App_Exec+0x5e0>
								{
									if (Isb_App_DigIn[AppIndex].CountHigh < 40)
    117e:	88 32       	cpi	r24, 0x28	; 40
    1180:	30 f4       	brcc	.+12     	; 0x118e <Isb_App_Exec+0x5e0>
									{
										Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHSHORT);
    1182:	15 96       	adiw	r26, 0x05	; 5
    1184:	8c 91       	ld	r24, X
    1186:	15 97       	sbiw	r26, 0x05	; 5
    1188:	80 62       	ori	r24, 0x20	; 32
    118a:	15 96       	adiw	r26, 0x05	; 5
    118c:	8c 93       	st	X, r24
									}
								}
								// Global
								Isb_App_DigIn[AppIndex].CountHigh = 0;
    118e:	e8 ad       	ldd	r30, Y+56	; 0x38
    1190:	f9 ad       	ldd	r31, Y+57	; 0x39
    1192:	17 82       	std	Z+7, r1	; 0x07
							}
							// Event auswerten
							switch (Isb_App_DigIn[AppIndex].Cfg1 & ISB_APP_DIGIN_CFG1_MODE_MASK)
    1194:	a8 ad       	ldd	r26, Y+56	; 0x38
    1196:	b9 ad       	ldd	r27, Y+57	; 0x39
    1198:	11 96       	adiw	r26, 0x01	; 1
    119a:	8c 91       	ld	r24, X
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	c9 01       	movw	r24, r18
    11a2:	87 70       	andi	r24, 0x07	; 7
    11a4:	90 70       	andi	r25, 0x00	; 0
    11a6:	89 2b       	or	r24, r25
    11a8:	09 f0       	breq	.+2      	; 0x11ac <Isb_App_Exec+0x5fe>
    11aa:	e3 c2       	rjmp	.+1478   	; 0x1772 <Isb_App_Exec+0xbc4>
							{
								#if ISB_APP_DIGIN_MODE_FEATURE_SWITCH == TRUE
									case ISB_APP_DIGIN_CFG1_MODE_SWITCH:
										// Betriebsart = Schaltsensor/Störmeldeeingang
										switch (Isb_App_DigIn[AppIndex].Cfg1 & ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_MASK)
    11ac:	c9 01       	movw	r24, r18
    11ae:	88 73       	andi	r24, 0x38	; 56
    11b0:	90 70       	andi	r25, 0x00	; 0
    11b2:	88 30       	cpi	r24, 0x08	; 8
    11b4:	91 05       	cpc	r25, r1
    11b6:	09 f4       	brne	.+2      	; 0x11ba <Isb_App_Exec+0x60c>
    11b8:	be c0       	rjmp	.+380    	; 0x1336 <Isb_App_Exec+0x788>
    11ba:	89 30       	cpi	r24, 0x09	; 9
    11bc:	91 05       	cpc	r25, r1
    11be:	1c f4       	brge	.+6      	; 0x11c6 <Isb_App_Exec+0x618>
    11c0:	89 2b       	or	r24, r25
    11c2:	49 f0       	breq	.+18     	; 0x11d6 <Isb_App_Exec+0x628>
    11c4:	d6 c2       	rjmp	.+1452   	; 0x1772 <Isb_App_Exec+0xbc4>
    11c6:	80 31       	cpi	r24, 0x10	; 16
    11c8:	91 05       	cpc	r25, r1
    11ca:	09 f4       	brne	.+2      	; 0x11ce <Isb_App_Exec+0x620>
    11cc:	62 c1       	rjmp	.+708    	; 0x1492 <Isb_App_Exec+0x8e4>
    11ce:	48 97       	sbiw	r24, 0x18	; 24
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <Isb_App_Exec+0x626>
    11d2:	cf c2       	rjmp	.+1438   	; 0x1772 <Isb_App_Exec+0xbc4>
    11d4:	12 c2       	rjmp	.+1060   	; 0x15fa <Isb_App_Exec+0xa4c>
										{
											#if ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_1SOUKLOR == TRUE
												case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_0:
													// 1 Schaltobjekt - Ohne Unterscheidung Kurz/Lang - Ohne Repeat
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGH))
    11d6:	d4 01       	movw	r26, r8
    11d8:	43 e0       	ldi	r20, 0x03	; 3
    11da:	aa 0f       	add	r26, r26
    11dc:	bb 1f       	adc	r27, r27
    11de:	4a 95       	dec	r20
    11e0:	e1 f7       	brne	.-8      	; 0x11da <Isb_App_Exec+0x62c>
    11e2:	a0 54       	subi	r26, 0x40	; 64
    11e4:	bf 4f       	sbci	r27, 0xFF	; 255
    11e6:	8c 91       	ld	r24, X
    11e8:	84 ff       	sbrs	r24, 4
    11ea:	50 c0       	rjmp	.+160    	; 0x128c <Isb_App_Exec+0x6de>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1)
    11ec:	e8 ad       	ldd	r30, Y+56	; 0x38
    11ee:	f9 ad       	ldd	r31, Y+57	; 0x39
    11f0:	82 81       	ldd	r24, Z+2	; 0x02
    11f2:	8f 70       	andi	r24, 0x0F	; 15
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	71 f4       	brne	.+28     	; 0x1214 <Isb_App_Exec+0x666>
														{
															// Aus
															Isb_Obj[Obj_1].Data[0] = 0;
    11f8:	84 2d       	mov	r24, r4
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	fc 01       	movw	r30, r24
    11fe:	33 e0       	ldi	r19, 0x03	; 3
    1200:	ee 0f       	add	r30, r30
    1202:	ff 1f       	adc	r31, r31
    1204:	3a 95       	dec	r19
    1206:	e1 f7       	brne	.-8      	; 0x1200 <Isb_App_Exec+0x652>
    1208:	e8 0f       	add	r30, r24
    120a:	f9 1f       	adc	r31, r25
    120c:	ed 5f       	subi	r30, 0xFD	; 253
    120e:	fe 4f       	sbci	r31, 0xFE	; 254
    1210:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1212:	50 86       	std	Z+8, r5	; 0x08
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2)
    1214:	e8 ad       	ldd	r30, Y+56	; 0x38
    1216:	f9 ad       	ldd	r31, Y+57	; 0x39
    1218:	82 81       	ldd	r24, Z+2	; 0x02
    121a:	8f 70       	andi	r24, 0x0F	; 15
    121c:	82 30       	cpi	r24, 0x02	; 2
    121e:	71 f4       	brne	.+28     	; 0x123c <Isb_App_Exec+0x68e>
														{
															// Ein
															Isb_Obj[Obj_1].Data[0] = 1;
    1220:	84 2d       	mov	r24, r4
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	fc 01       	movw	r30, r24
    1226:	23 e0       	ldi	r18, 0x03	; 3
    1228:	ee 0f       	add	r30, r30
    122a:	ff 1f       	adc	r31, r31
    122c:	2a 95       	dec	r18
    122e:	e1 f7       	brne	.-8      	; 0x1228 <Isb_App_Exec+0x67a>
    1230:	e8 0f       	add	r30, r24
    1232:	f9 1f       	adc	r31, r25
    1234:	ed 5f       	subi	r30, 0xFD	; 253
    1236:	fe 4f       	sbci	r31, 0xFE	; 254
    1238:	53 82       	std	Z+3, r5	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    123a:	50 86       	std	Z+8, r5	; 0x08
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3)
    123c:	e8 ad       	ldd	r30, Y+56	; 0x38
    123e:	f9 ad       	ldd	r31, Y+57	; 0x39
    1240:	82 81       	ldd	r24, Z+2	; 0x02
    1242:	8f 70       	andi	r24, 0x0F	; 15
    1244:	83 30       	cpi	r24, 0x03	; 3
    1246:	e9 f4       	brne	.+58     	; 0x1282 <Isb_App_Exec+0x6d4>
														{
															// Um
															if (Isb_Obj[Obj_1].Data[0] == 0)
    1248:	24 2d       	mov	r18, r4
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	f9 01       	movw	r30, r18
    124e:	03 e0       	ldi	r16, 0x03	; 3
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	0a 95       	dec	r16
    1256:	e1 f7       	brne	.-8      	; 0x1250 <Isb_App_Exec+0x6a2>
    1258:	e2 0f       	add	r30, r18
    125a:	f3 1f       	adc	r31, r19
    125c:	ed 5f       	subi	r30, 0xFD	; 253
    125e:	fe 4f       	sbci	r31, 0xFE	; 254
    1260:	83 81       	ldd	r24, Z+3	; 0x03
    1262:	88 23       	and	r24, r24
    1264:	11 f4       	brne	.+4      	; 0x126a <Isb_App_Exec+0x6bc>
															{
																Isb_Obj[Obj_1].Data[0] = 1;
    1266:	53 82       	std	Z+3, r5	; 0x03
    1268:	01 c0       	rjmp	.+2      	; 0x126c <Isb_App_Exec+0x6be>
															}
															else
															{
																Isb_Obj[Obj_1].Data[0] = 0;
    126a:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_1].IsChanged = TRUE;
    126c:	f9 01       	movw	r30, r18
    126e:	13 e0       	ldi	r17, 0x03	; 3
    1270:	ee 0f       	add	r30, r30
    1272:	ff 1f       	adc	r31, r31
    1274:	1a 95       	dec	r17
    1276:	e1 f7       	brne	.-8      	; 0x1270 <Isb_App_Exec+0x6c2>
    1278:	e2 0f       	add	r30, r18
    127a:	f3 1f       	adc	r31, r19
    127c:	ed 5f       	subi	r30, 0xFD	; 253
    127e:	fe 4f       	sbci	r31, 0xFE	; 254
    1280:	50 86       	std	Z+8, r5	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGH);
    1282:	e8 ad       	ldd	r30, Y+56	; 0x38
    1284:	f9 ad       	ldd	r31, Y+57	; 0x39
    1286:	85 81       	ldd	r24, Z+5	; 0x05
    1288:	8f 7e       	andi	r24, 0xEF	; 239
    128a:	85 83       	std	Z+5, r24	; 0x05
													}
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_LOW))
    128c:	8c 91       	ld	r24, X
    128e:	80 ff       	sbrs	r24, 0
    1290:	70 c2       	rjmp	.+1248   	; 0x1772 <Isb_App_Exec+0xbc4>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1)
    1292:	a8 ad       	ldd	r26, Y+56	; 0x38
    1294:	b9 ad       	ldd	r27, Y+57	; 0x39
    1296:	12 96       	adiw	r26, 0x02	; 2
    1298:	8c 91       	ld	r24, X
    129a:	80 7f       	andi	r24, 0xF0	; 240
    129c:	80 31       	cpi	r24, 0x10	; 16
    129e:	71 f4       	brne	.+28     	; 0x12bc <Isb_App_Exec+0x70e>
														{
															// Aus
															Isb_Obj[Obj_1].Data[0] = 0;
    12a0:	84 2d       	mov	r24, r4
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	fc 01       	movw	r30, r24
    12a6:	a3 e0       	ldi	r26, 0x03	; 3
    12a8:	ee 0f       	add	r30, r30
    12aa:	ff 1f       	adc	r31, r31
    12ac:	aa 95       	dec	r26
    12ae:	e1 f7       	brne	.-8      	; 0x12a8 <Isb_App_Exec+0x6fa>
    12b0:	e8 0f       	add	r30, r24
    12b2:	f9 1f       	adc	r31, r25
    12b4:	ed 5f       	subi	r30, 0xFD	; 253
    12b6:	fe 4f       	sbci	r31, 0xFE	; 254
    12b8:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    12ba:	50 86       	std	Z+8, r5	; 0x08
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2)
    12bc:	e8 ad       	ldd	r30, Y+56	; 0x38
    12be:	f9 ad       	ldd	r31, Y+57	; 0x39
    12c0:	82 81       	ldd	r24, Z+2	; 0x02
    12c2:	80 7f       	andi	r24, 0xF0	; 240
    12c4:	80 32       	cpi	r24, 0x20	; 32
    12c6:	71 f4       	brne	.+28     	; 0x12e4 <Isb_App_Exec+0x736>
														{
															// Ein
															Isb_Obj[Obj_1].Data[0] = 1;
    12c8:	84 2d       	mov	r24, r4
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	fc 01       	movw	r30, r24
    12ce:	73 e0       	ldi	r23, 0x03	; 3
    12d0:	ee 0f       	add	r30, r30
    12d2:	ff 1f       	adc	r31, r31
    12d4:	7a 95       	dec	r23
    12d6:	e1 f7       	brne	.-8      	; 0x12d0 <Isb_App_Exec+0x722>
    12d8:	e8 0f       	add	r30, r24
    12da:	f9 1f       	adc	r31, r25
    12dc:	ed 5f       	subi	r30, 0xFD	; 253
    12de:	fe 4f       	sbci	r31, 0xFE	; 254
    12e0:	53 82       	std	Z+3, r5	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    12e2:	50 86       	std	Z+8, r5	; 0x08
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3)
    12e4:	a8 ad       	ldd	r26, Y+56	; 0x38
    12e6:	b9 ad       	ldd	r27, Y+57	; 0x39
    12e8:	12 96       	adiw	r26, 0x02	; 2
    12ea:	8c 91       	ld	r24, X
    12ec:	80 7f       	andi	r24, 0xF0	; 240
    12ee:	80 33       	cpi	r24, 0x30	; 48
    12f0:	e9 f4       	brne	.+58     	; 0x132c <Isb_App_Exec+0x77e>
														{
															// Um
															if (Isb_Obj[Obj_1].Data[0] == 0)
    12f2:	24 2d       	mov	r18, r4
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	f9 01       	movw	r30, r18
    12f8:	63 e0       	ldi	r22, 0x03	; 3
    12fa:	ee 0f       	add	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	6a 95       	dec	r22
    1300:	e1 f7       	brne	.-8      	; 0x12fa <Isb_App_Exec+0x74c>
    1302:	e2 0f       	add	r30, r18
    1304:	f3 1f       	adc	r31, r19
    1306:	ed 5f       	subi	r30, 0xFD	; 253
    1308:	fe 4f       	sbci	r31, 0xFE	; 254
    130a:	83 81       	ldd	r24, Z+3	; 0x03
    130c:	88 23       	and	r24, r24
    130e:	11 f4       	brne	.+4      	; 0x1314 <Isb_App_Exec+0x766>
															{
																Isb_Obj[Obj_1].Data[0] = 1;
    1310:	53 82       	std	Z+3, r5	; 0x03
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <Isb_App_Exec+0x768>
															}
															else
															{
																Isb_Obj[Obj_1].Data[0] = 0;
    1314:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1316:	f9 01       	movw	r30, r18
    1318:	53 e0       	ldi	r21, 0x03	; 3
    131a:	ee 0f       	add	r30, r30
    131c:	ff 1f       	adc	r31, r31
    131e:	5a 95       	dec	r21
    1320:	e1 f7       	brne	.-8      	; 0x131a <Isb_App_Exec+0x76c>
    1322:	e2 0f       	add	r30, r18
    1324:	f3 1f       	adc	r31, r19
    1326:	ed 5f       	subi	r30, 0xFD	; 253
    1328:	fe 4f       	sbci	r31, 0xFE	; 254
    132a:	50 86       	std	Z+8, r5	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_LOW);
    132c:	e8 ad       	ldd	r30, Y+56	; 0x38
    132e:	f9 ad       	ldd	r31, Y+57	; 0x39
    1330:	85 81       	ldd	r24, Z+5	; 0x05
    1332:	8e 7f       	andi	r24, 0xFE	; 254
    1334:	60 c1       	rjmp	.+704    	; 0x15f6 <Isb_App_Exec+0xa48>
													break;
											#endif /* ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_1SOUKLOR == TRUE */
											#if ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_1SOUKLMR == TRUE
												case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_1:
													// 1 Schaltobjekt - Ohne Unterscheidung Kurz/Lang - Mit Repeat
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGH))
    1336:	d4 01       	movw	r26, r8
    1338:	43 e0       	ldi	r20, 0x03	; 3
    133a:	aa 0f       	add	r26, r26
    133c:	bb 1f       	adc	r27, r27
    133e:	4a 95       	dec	r20
    1340:	e1 f7       	brne	.-8      	; 0x133a <Isb_App_Exec+0x78c>
    1342:	a0 54       	subi	r26, 0x40	; 64
    1344:	bf 4f       	sbci	r27, 0xFF	; 255
    1346:	8c 91       	ld	r24, X
    1348:	84 ff       	sbrs	r24, 4
    134a:	50 c0       	rjmp	.+160    	; 0x13ec <Isb_App_Exec+0x83e>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1)
    134c:	e8 ad       	ldd	r30, Y+56	; 0x38
    134e:	f9 ad       	ldd	r31, Y+57	; 0x39
    1350:	82 81       	ldd	r24, Z+2	; 0x02
    1352:	8f 70       	andi	r24, 0x0F	; 15
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	71 f4       	brne	.+28     	; 0x1374 <Isb_App_Exec+0x7c6>
														{
															// Aus
															Isb_Obj[Obj_1].Data[0] = 0;
    1358:	84 2d       	mov	r24, r4
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	fc 01       	movw	r30, r24
    135e:	33 e0       	ldi	r19, 0x03	; 3
    1360:	ee 0f       	add	r30, r30
    1362:	ff 1f       	adc	r31, r31
    1364:	3a 95       	dec	r19
    1366:	e1 f7       	brne	.-8      	; 0x1360 <Isb_App_Exec+0x7b2>
    1368:	e8 0f       	add	r30, r24
    136a:	f9 1f       	adc	r31, r25
    136c:	ed 5f       	subi	r30, 0xFD	; 253
    136e:	fe 4f       	sbci	r31, 0xFE	; 254
    1370:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1372:	50 86       	std	Z+8, r5	; 0x08
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2)
    1374:	e8 ad       	ldd	r30, Y+56	; 0x38
    1376:	f9 ad       	ldd	r31, Y+57	; 0x39
    1378:	82 81       	ldd	r24, Z+2	; 0x02
    137a:	8f 70       	andi	r24, 0x0F	; 15
    137c:	82 30       	cpi	r24, 0x02	; 2
    137e:	71 f4       	brne	.+28     	; 0x139c <Isb_App_Exec+0x7ee>
														{
															// Ein
															Isb_Obj[Obj_1].Data[0] = 1;
    1380:	84 2d       	mov	r24, r4
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	fc 01       	movw	r30, r24
    1386:	23 e0       	ldi	r18, 0x03	; 3
    1388:	ee 0f       	add	r30, r30
    138a:	ff 1f       	adc	r31, r31
    138c:	2a 95       	dec	r18
    138e:	e1 f7       	brne	.-8      	; 0x1388 <Isb_App_Exec+0x7da>
    1390:	e8 0f       	add	r30, r24
    1392:	f9 1f       	adc	r31, r25
    1394:	ed 5f       	subi	r30, 0xFD	; 253
    1396:	fe 4f       	sbci	r31, 0xFE	; 254
    1398:	53 82       	std	Z+3, r5	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    139a:	50 86       	std	Z+8, r5	; 0x08
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3)
    139c:	e8 ad       	ldd	r30, Y+56	; 0x38
    139e:	f9 ad       	ldd	r31, Y+57	; 0x39
    13a0:	82 81       	ldd	r24, Z+2	; 0x02
    13a2:	8f 70       	andi	r24, 0x0F	; 15
    13a4:	83 30       	cpi	r24, 0x03	; 3
    13a6:	e9 f4       	brne	.+58     	; 0x13e2 <Isb_App_Exec+0x834>
														{
															// Um
															if (Isb_Obj[Obj_1].Data[0] == 0)
    13a8:	24 2d       	mov	r18, r4
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	f9 01       	movw	r30, r18
    13ae:	83 e0       	ldi	r24, 0x03	; 3
    13b0:	ee 0f       	add	r30, r30
    13b2:	ff 1f       	adc	r31, r31
    13b4:	8a 95       	dec	r24
    13b6:	e1 f7       	brne	.-8      	; 0x13b0 <Isb_App_Exec+0x802>
    13b8:	e2 0f       	add	r30, r18
    13ba:	f3 1f       	adc	r31, r19
    13bc:	ed 5f       	subi	r30, 0xFD	; 253
    13be:	fe 4f       	sbci	r31, 0xFE	; 254
    13c0:	83 81       	ldd	r24, Z+3	; 0x03
    13c2:	88 23       	and	r24, r24
    13c4:	11 f4       	brne	.+4      	; 0x13ca <Isb_App_Exec+0x81c>
															{
																Isb_Obj[Obj_1].Data[0] = 1;
    13c6:	53 82       	std	Z+3, r5	; 0x03
    13c8:	01 c0       	rjmp	.+2      	; 0x13cc <Isb_App_Exec+0x81e>
															}
															else
															{
																Isb_Obj[Obj_1].Data[0] = 0;
    13ca:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_1].IsChanged = TRUE;
    13cc:	f9 01       	movw	r30, r18
    13ce:	03 e0       	ldi	r16, 0x03	; 3
    13d0:	ee 0f       	add	r30, r30
    13d2:	ff 1f       	adc	r31, r31
    13d4:	0a 95       	dec	r16
    13d6:	e1 f7       	brne	.-8      	; 0x13d0 <Isb_App_Exec+0x822>
    13d8:	e2 0f       	add	r30, r18
    13da:	f3 1f       	adc	r31, r19
    13dc:	ed 5f       	subi	r30, 0xFD	; 253
    13de:	fe 4f       	sbci	r31, 0xFE	; 254
    13e0:	50 86       	std	Z+8, r5	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGH);
    13e2:	e8 ad       	ldd	r30, Y+56	; 0x38
    13e4:	f9 ad       	ldd	r31, Y+57	; 0x39
    13e6:	85 81       	ldd	r24, Z+5	; 0x05
    13e8:	8f 7e       	andi	r24, 0xEF	; 239
    13ea:	85 83       	std	Z+5, r24	; 0x05
													}
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_LOW))
    13ec:	8c 91       	ld	r24, X
    13ee:	80 ff       	sbrs	r24, 0
    13f0:	b5 c1       	rjmp	.+874    	; 0x175c <Isb_App_Exec+0xbae>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1)
    13f2:	e8 ad       	ldd	r30, Y+56	; 0x38
    13f4:	f9 ad       	ldd	r31, Y+57	; 0x39
    13f6:	82 81       	ldd	r24, Z+2	; 0x02
    13f8:	80 7f       	andi	r24, 0xF0	; 240
    13fa:	80 31       	cpi	r24, 0x10	; 16
    13fc:	71 f4       	brne	.+28     	; 0x141a <Isb_App_Exec+0x86c>
														{
															// Aus
															Isb_Obj[Obj_1].Data[0] = 0;
    13fe:	84 2d       	mov	r24, r4
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	fc 01       	movw	r30, r24
    1404:	13 e0       	ldi	r17, 0x03	; 3
    1406:	ee 0f       	add	r30, r30
    1408:	ff 1f       	adc	r31, r31
    140a:	1a 95       	dec	r17
    140c:	e1 f7       	brne	.-8      	; 0x1406 <Isb_App_Exec+0x858>
    140e:	e8 0f       	add	r30, r24
    1410:	f9 1f       	adc	r31, r25
    1412:	ed 5f       	subi	r30, 0xFD	; 253
    1414:	fe 4f       	sbci	r31, 0xFE	; 254
    1416:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1418:	50 86       	std	Z+8, r5	; 0x08
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2)
    141a:	e8 ad       	ldd	r30, Y+56	; 0x38
    141c:	f9 ad       	ldd	r31, Y+57	; 0x39
    141e:	82 81       	ldd	r24, Z+2	; 0x02
    1420:	80 7f       	andi	r24, 0xF0	; 240
    1422:	80 32       	cpi	r24, 0x20	; 32
    1424:	71 f4       	brne	.+28     	; 0x1442 <Isb_App_Exec+0x894>
														{
															// Ein
															Isb_Obj[Obj_1].Data[0] = 1;
    1426:	84 2d       	mov	r24, r4
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	fc 01       	movw	r30, r24
    142c:	73 e0       	ldi	r23, 0x03	; 3
    142e:	ee 0f       	add	r30, r30
    1430:	ff 1f       	adc	r31, r31
    1432:	7a 95       	dec	r23
    1434:	e1 f7       	brne	.-8      	; 0x142e <Isb_App_Exec+0x880>
    1436:	e8 0f       	add	r30, r24
    1438:	f9 1f       	adc	r31, r25
    143a:	ed 5f       	subi	r30, 0xFD	; 253
    143c:	fe 4f       	sbci	r31, 0xFE	; 254
    143e:	53 82       	std	Z+3, r5	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1440:	50 86       	std	Z+8, r5	; 0x08
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3)
    1442:	e8 ad       	ldd	r30, Y+56	; 0x38
    1444:	f9 ad       	ldd	r31, Y+57	; 0x39
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	80 7f       	andi	r24, 0xF0	; 240
    144a:	80 33       	cpi	r24, 0x30	; 48
    144c:	e9 f4       	brne	.+58     	; 0x1488 <Isb_App_Exec+0x8da>
														{
															// Um
															if (Isb_Obj[Obj_1].Data[0] == 0)
    144e:	24 2d       	mov	r18, r4
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	f9 01       	movw	r30, r18
    1454:	63 e0       	ldi	r22, 0x03	; 3
    1456:	ee 0f       	add	r30, r30
    1458:	ff 1f       	adc	r31, r31
    145a:	6a 95       	dec	r22
    145c:	e1 f7       	brne	.-8      	; 0x1456 <Isb_App_Exec+0x8a8>
    145e:	e2 0f       	add	r30, r18
    1460:	f3 1f       	adc	r31, r19
    1462:	ed 5f       	subi	r30, 0xFD	; 253
    1464:	fe 4f       	sbci	r31, 0xFE	; 254
    1466:	83 81       	ldd	r24, Z+3	; 0x03
    1468:	88 23       	and	r24, r24
    146a:	11 f4       	brne	.+4      	; 0x1470 <Isb_App_Exec+0x8c2>
															{
																Isb_Obj[Obj_1].Data[0] = 1;
    146c:	53 82       	std	Z+3, r5	; 0x03
    146e:	01 c0       	rjmp	.+2      	; 0x1472 <Isb_App_Exec+0x8c4>
															}
															else
															{
																Isb_Obj[Obj_1].Data[0] = 0;
    1470:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1472:	f9 01       	movw	r30, r18
    1474:	53 e0       	ldi	r21, 0x03	; 3
    1476:	ee 0f       	add	r30, r30
    1478:	ff 1f       	adc	r31, r31
    147a:	5a 95       	dec	r21
    147c:	e1 f7       	brne	.-8      	; 0x1476 <Isb_App_Exec+0x8c8>
    147e:	e2 0f       	add	r30, r18
    1480:	f3 1f       	adc	r31, r19
    1482:	ed 5f       	subi	r30, 0xFD	; 253
    1484:	fe 4f       	sbci	r31, 0xFE	; 254
    1486:	50 86       	std	Z+8, r5	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_LOW);
    1488:	e8 ad       	ldd	r30, Y+56	; 0x38
    148a:	f9 ad       	ldd	r31, Y+57	; 0x39
    148c:	85 81       	ldd	r24, Z+5	; 0x05
    148e:	8e 7f       	andi	r24, 0xFE	; 254
    1490:	64 c1       	rjmp	.+712    	; 0x175a <Isb_App_Exec+0xbac>
													break;
											#endif /* ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_1SOUKLMR == TRUE */
											#if ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_2SMUKLOR == TRUE
												case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_2:
													// 2 Schaltobjekte - Mit Unterscheidung Kurz/Lang - Ohne Repeat
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHSHORT))
    1492:	d4 01       	movw	r26, r8
    1494:	43 e0       	ldi	r20, 0x03	; 3
    1496:	aa 0f       	add	r26, r26
    1498:	bb 1f       	adc	r27, r27
    149a:	4a 95       	dec	r20
    149c:	e1 f7       	brne	.-8      	; 0x1496 <Isb_App_Exec+0x8e8>
    149e:	a0 54       	subi	r26, 0x40	; 64
    14a0:	bf 4f       	sbci	r27, 0xFF	; 255
    14a2:	8c 91       	ld	r24, X
    14a4:	85 ff       	sbrs	r24, 5
    14a6:	50 c0       	rjmp	.+160    	; 0x1548 <Isb_App_Exec+0x99a>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1)
    14a8:	e8 ad       	ldd	r30, Y+56	; 0x38
    14aa:	f9 ad       	ldd	r31, Y+57	; 0x39
    14ac:	82 81       	ldd	r24, Z+2	; 0x02
    14ae:	8f 70       	andi	r24, 0x0F	; 15
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	71 f4       	brne	.+28     	; 0x14d0 <Isb_App_Exec+0x922>
														{
															// Aus
															Isb_Obj[Obj_1].Data[0] = 0;
    14b4:	84 2d       	mov	r24, r4
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	fc 01       	movw	r30, r24
    14ba:	33 e0       	ldi	r19, 0x03	; 3
    14bc:	ee 0f       	add	r30, r30
    14be:	ff 1f       	adc	r31, r31
    14c0:	3a 95       	dec	r19
    14c2:	e1 f7       	brne	.-8      	; 0x14bc <Isb_App_Exec+0x90e>
    14c4:	e8 0f       	add	r30, r24
    14c6:	f9 1f       	adc	r31, r25
    14c8:	ed 5f       	subi	r30, 0xFD	; 253
    14ca:	fe 4f       	sbci	r31, 0xFE	; 254
    14cc:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    14ce:	50 86       	std	Z+8, r5	; 0x08
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2)
    14d0:	e8 ad       	ldd	r30, Y+56	; 0x38
    14d2:	f9 ad       	ldd	r31, Y+57	; 0x39
    14d4:	82 81       	ldd	r24, Z+2	; 0x02
    14d6:	8f 70       	andi	r24, 0x0F	; 15
    14d8:	82 30       	cpi	r24, 0x02	; 2
    14da:	71 f4       	brne	.+28     	; 0x14f8 <Isb_App_Exec+0x94a>
														{
															// Ein
															Isb_Obj[Obj_1].Data[0] = 1;
    14dc:	84 2d       	mov	r24, r4
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	fc 01       	movw	r30, r24
    14e2:	23 e0       	ldi	r18, 0x03	; 3
    14e4:	ee 0f       	add	r30, r30
    14e6:	ff 1f       	adc	r31, r31
    14e8:	2a 95       	dec	r18
    14ea:	e1 f7       	brne	.-8      	; 0x14e4 <Isb_App_Exec+0x936>
    14ec:	e8 0f       	add	r30, r24
    14ee:	f9 1f       	adc	r31, r25
    14f0:	ed 5f       	subi	r30, 0xFD	; 253
    14f2:	fe 4f       	sbci	r31, 0xFE	; 254
    14f4:	53 82       	std	Z+3, r5	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    14f6:	50 86       	std	Z+8, r5	; 0x08
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3)
    14f8:	e8 ad       	ldd	r30, Y+56	; 0x38
    14fa:	f9 ad       	ldd	r31, Y+57	; 0x39
    14fc:	82 81       	ldd	r24, Z+2	; 0x02
    14fe:	8f 70       	andi	r24, 0x0F	; 15
    1500:	83 30       	cpi	r24, 0x03	; 3
    1502:	e9 f4       	brne	.+58     	; 0x153e <Isb_App_Exec+0x990>
														{
															// Um
															if (Isb_Obj[Obj_1].Data[0] == 0)
    1504:	24 2d       	mov	r18, r4
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	f9 01       	movw	r30, r18
    150a:	03 e0       	ldi	r16, 0x03	; 3
    150c:	ee 0f       	add	r30, r30
    150e:	ff 1f       	adc	r31, r31
    1510:	0a 95       	dec	r16
    1512:	e1 f7       	brne	.-8      	; 0x150c <Isb_App_Exec+0x95e>
    1514:	e2 0f       	add	r30, r18
    1516:	f3 1f       	adc	r31, r19
    1518:	ed 5f       	subi	r30, 0xFD	; 253
    151a:	fe 4f       	sbci	r31, 0xFE	; 254
    151c:	83 81       	ldd	r24, Z+3	; 0x03
    151e:	88 23       	and	r24, r24
    1520:	11 f4       	brne	.+4      	; 0x1526 <Isb_App_Exec+0x978>
															{
																Isb_Obj[Obj_1].Data[0] = 1;
    1522:	53 82       	std	Z+3, r5	; 0x03
    1524:	01 c0       	rjmp	.+2      	; 0x1528 <Isb_App_Exec+0x97a>
															}
															else
															{
																Isb_Obj[Obj_1].Data[0] = 0;
    1526:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1528:	f9 01       	movw	r30, r18
    152a:	13 e0       	ldi	r17, 0x03	; 3
    152c:	ee 0f       	add	r30, r30
    152e:	ff 1f       	adc	r31, r31
    1530:	1a 95       	dec	r17
    1532:	e1 f7       	brne	.-8      	; 0x152c <Isb_App_Exec+0x97e>
    1534:	e2 0f       	add	r30, r18
    1536:	f3 1f       	adc	r31, r19
    1538:	ed 5f       	subi	r30, 0xFD	; 253
    153a:	fe 4f       	sbci	r31, 0xFE	; 254
    153c:	50 86       	std	Z+8, r5	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHSHORT);
    153e:	e8 ad       	ldd	r30, Y+56	; 0x38
    1540:	f9 ad       	ldd	r31, Y+57	; 0x39
    1542:	85 81       	ldd	r24, Z+5	; 0x05
    1544:	8f 7d       	andi	r24, 0xDF	; 223
    1546:	85 83       	std	Z+5, r24	; 0x05
													}
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHLONG))
    1548:	8c 91       	ld	r24, X
    154a:	86 ff       	sbrs	r24, 6
    154c:	12 c1       	rjmp	.+548    	; 0x1772 <Isb_App_Exec+0xbc4>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1)
    154e:	a8 ad       	ldd	r26, Y+56	; 0x38
    1550:	b9 ad       	ldd	r27, Y+57	; 0x39
    1552:	12 96       	adiw	r26, 0x02	; 2
    1554:	8c 91       	ld	r24, X
    1556:	80 7f       	andi	r24, 0xF0	; 240
    1558:	80 31       	cpi	r24, 0x10	; 16
    155a:	79 f4       	brne	.+30     	; 0x157a <Isb_App_Exec+0x9cc>
														{
															// Aus
															Isb_Obj[Obj_2].Data[0] = 0;
    155c:	bd a5       	ldd	r27, Y+45	; 0x2d
    155e:	8b 2f       	mov	r24, r27
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	fc 01       	movw	r30, r24
    1564:	a3 e0       	ldi	r26, 0x03	; 3
    1566:	ee 0f       	add	r30, r30
    1568:	ff 1f       	adc	r31, r31
    156a:	aa 95       	dec	r26
    156c:	e1 f7       	brne	.-8      	; 0x1566 <Isb_App_Exec+0x9b8>
    156e:	e8 0f       	add	r30, r24
    1570:	f9 1f       	adc	r31, r25
    1572:	ed 5f       	subi	r30, 0xFD	; 253
    1574:	fe 4f       	sbci	r31, 0xFE	; 254
    1576:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_2].IsChanged = TRUE;
    1578:	50 86       	std	Z+8, r5	; 0x08
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2)
    157a:	e8 ad       	ldd	r30, Y+56	; 0x38
    157c:	f9 ad       	ldd	r31, Y+57	; 0x39
    157e:	82 81       	ldd	r24, Z+2	; 0x02
    1580:	80 7f       	andi	r24, 0xF0	; 240
    1582:	80 32       	cpi	r24, 0x20	; 32
    1584:	79 f4       	brne	.+30     	; 0x15a4 <Isb_App_Exec+0x9f6>
														{
															// Ein
															Isb_Obj[Obj_2].Data[0] = 1;
    1586:	fd a5       	ldd	r31, Y+45	; 0x2d
    1588:	8f 2f       	mov	r24, r31
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	fc 01       	movw	r30, r24
    158e:	73 e0       	ldi	r23, 0x03	; 3
    1590:	ee 0f       	add	r30, r30
    1592:	ff 1f       	adc	r31, r31
    1594:	7a 95       	dec	r23
    1596:	e1 f7       	brne	.-8      	; 0x1590 <Isb_App_Exec+0x9e2>
    1598:	e8 0f       	add	r30, r24
    159a:	f9 1f       	adc	r31, r25
    159c:	ed 5f       	subi	r30, 0xFD	; 253
    159e:	fe 4f       	sbci	r31, 0xFE	; 254
    15a0:	53 82       	std	Z+3, r5	; 0x03
															Isb_Obj[Obj_2].IsChanged = TRUE;
    15a2:	50 86       	std	Z+8, r5	; 0x08
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3)
    15a4:	a8 ad       	ldd	r26, Y+56	; 0x38
    15a6:	b9 ad       	ldd	r27, Y+57	; 0x39
    15a8:	12 96       	adiw	r26, 0x02	; 2
    15aa:	8c 91       	ld	r24, X
    15ac:	80 7f       	andi	r24, 0xF0	; 240
    15ae:	80 33       	cpi	r24, 0x30	; 48
    15b0:	f1 f4       	brne	.+60     	; 0x15ee <Isb_App_Exec+0xa40>
														{
															// Um
															if (Isb_Obj[Obj_2].Data[0] == 0)
    15b2:	bd a5       	ldd	r27, Y+45	; 0x2d
    15b4:	2b 2f       	mov	r18, r27
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	f9 01       	movw	r30, r18
    15ba:	63 e0       	ldi	r22, 0x03	; 3
    15bc:	ee 0f       	add	r30, r30
    15be:	ff 1f       	adc	r31, r31
    15c0:	6a 95       	dec	r22
    15c2:	e1 f7       	brne	.-8      	; 0x15bc <Isb_App_Exec+0xa0e>
    15c4:	e2 0f       	add	r30, r18
    15c6:	f3 1f       	adc	r31, r19
    15c8:	ed 5f       	subi	r30, 0xFD	; 253
    15ca:	fe 4f       	sbci	r31, 0xFE	; 254
    15cc:	83 81       	ldd	r24, Z+3	; 0x03
    15ce:	88 23       	and	r24, r24
    15d0:	11 f4       	brne	.+4      	; 0x15d6 <Isb_App_Exec+0xa28>
															{
																Isb_Obj[Obj_2].Data[0] = 1;
    15d2:	53 82       	std	Z+3, r5	; 0x03
    15d4:	01 c0       	rjmp	.+2      	; 0x15d8 <Isb_App_Exec+0xa2a>
															}
															else
															{
																Isb_Obj[Obj_2].Data[0] = 0;
    15d6:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_2].IsChanged = TRUE;
    15d8:	f9 01       	movw	r30, r18
    15da:	53 e0       	ldi	r21, 0x03	; 3
    15dc:	ee 0f       	add	r30, r30
    15de:	ff 1f       	adc	r31, r31
    15e0:	5a 95       	dec	r21
    15e2:	e1 f7       	brne	.-8      	; 0x15dc <Isb_App_Exec+0xa2e>
    15e4:	e2 0f       	add	r30, r18
    15e6:	f3 1f       	adc	r31, r19
    15e8:	ed 5f       	subi	r30, 0xFD	; 253
    15ea:	fe 4f       	sbci	r31, 0xFE	; 254
    15ec:	50 86       	std	Z+8, r5	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHLONG);
    15ee:	e8 ad       	ldd	r30, Y+56	; 0x38
    15f0:	f9 ad       	ldd	r31, Y+57	; 0x39
    15f2:	85 81       	ldd	r24, Z+5	; 0x05
    15f4:	8f 7b       	andi	r24, 0xBF	; 191
    15f6:	85 83       	std	Z+5, r24	; 0x05
    15f8:	bc c0       	rjmp	.+376    	; 0x1772 <Isb_App_Exec+0xbc4>
													break;
											#endif /* ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_2SMUKLOR == TRUE */
											#if ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_2SMUKLMR == TRUE
												case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_3:
													// 2 Schaltobjekte - Mit Unterscheidung Kurz/Lang - Mit Repeat
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHSHORT))
    15fa:	d4 01       	movw	r26, r8
    15fc:	43 e0       	ldi	r20, 0x03	; 3
    15fe:	aa 0f       	add	r26, r26
    1600:	bb 1f       	adc	r27, r27
    1602:	4a 95       	dec	r20
    1604:	e1 f7       	brne	.-8      	; 0x15fe <Isb_App_Exec+0xa50>
    1606:	a0 54       	subi	r26, 0x40	; 64
    1608:	bf 4f       	sbci	r27, 0xFF	; 255
    160a:	8c 91       	ld	r24, X
    160c:	85 ff       	sbrs	r24, 5
    160e:	50 c0       	rjmp	.+160    	; 0x16b0 <Isb_App_Exec+0xb02>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1)
    1610:	e8 ad       	ldd	r30, Y+56	; 0x38
    1612:	f9 ad       	ldd	r31, Y+57	; 0x39
    1614:	82 81       	ldd	r24, Z+2	; 0x02
    1616:	8f 70       	andi	r24, 0x0F	; 15
    1618:	81 30       	cpi	r24, 0x01	; 1
    161a:	71 f4       	brne	.+28     	; 0x1638 <Isb_App_Exec+0xa8a>
														{
															// Aus
															Isb_Obj[Obj_1].Data[0] = 0;
    161c:	84 2d       	mov	r24, r4
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	fc 01       	movw	r30, r24
    1622:	33 e0       	ldi	r19, 0x03	; 3
    1624:	ee 0f       	add	r30, r30
    1626:	ff 1f       	adc	r31, r31
    1628:	3a 95       	dec	r19
    162a:	e1 f7       	brne	.-8      	; 0x1624 <Isb_App_Exec+0xa76>
    162c:	e8 0f       	add	r30, r24
    162e:	f9 1f       	adc	r31, r25
    1630:	ed 5f       	subi	r30, 0xFD	; 253
    1632:	fe 4f       	sbci	r31, 0xFE	; 254
    1634:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1636:	50 86       	std	Z+8, r5	; 0x08
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2)
    1638:	e8 ad       	ldd	r30, Y+56	; 0x38
    163a:	f9 ad       	ldd	r31, Y+57	; 0x39
    163c:	82 81       	ldd	r24, Z+2	; 0x02
    163e:	8f 70       	andi	r24, 0x0F	; 15
    1640:	82 30       	cpi	r24, 0x02	; 2
    1642:	71 f4       	brne	.+28     	; 0x1660 <Isb_App_Exec+0xab2>
														{
															// Ein
															Isb_Obj[Obj_1].Data[0] = 1;
    1644:	84 2d       	mov	r24, r4
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	fc 01       	movw	r30, r24
    164a:	23 e0       	ldi	r18, 0x03	; 3
    164c:	ee 0f       	add	r30, r30
    164e:	ff 1f       	adc	r31, r31
    1650:	2a 95       	dec	r18
    1652:	e1 f7       	brne	.-8      	; 0x164c <Isb_App_Exec+0xa9e>
    1654:	e8 0f       	add	r30, r24
    1656:	f9 1f       	adc	r31, r25
    1658:	ed 5f       	subi	r30, 0xFD	; 253
    165a:	fe 4f       	sbci	r31, 0xFE	; 254
    165c:	53 82       	std	Z+3, r5	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    165e:	50 86       	std	Z+8, r5	; 0x08
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3)
    1660:	e8 ad       	ldd	r30, Y+56	; 0x38
    1662:	f9 ad       	ldd	r31, Y+57	; 0x39
    1664:	82 81       	ldd	r24, Z+2	; 0x02
    1666:	8f 70       	andi	r24, 0x0F	; 15
    1668:	83 30       	cpi	r24, 0x03	; 3
    166a:	e9 f4       	brne	.+58     	; 0x16a6 <Isb_App_Exec+0xaf8>
														{
															// Um
															if (Isb_Obj[Obj_1].Data[0] == 0)
    166c:	24 2d       	mov	r18, r4
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	f9 01       	movw	r30, r18
    1672:	03 e0       	ldi	r16, 0x03	; 3
    1674:	ee 0f       	add	r30, r30
    1676:	ff 1f       	adc	r31, r31
    1678:	0a 95       	dec	r16
    167a:	e1 f7       	brne	.-8      	; 0x1674 <Isb_App_Exec+0xac6>
    167c:	e2 0f       	add	r30, r18
    167e:	f3 1f       	adc	r31, r19
    1680:	ed 5f       	subi	r30, 0xFD	; 253
    1682:	fe 4f       	sbci	r31, 0xFE	; 254
    1684:	83 81       	ldd	r24, Z+3	; 0x03
    1686:	88 23       	and	r24, r24
    1688:	11 f4       	brne	.+4      	; 0x168e <Isb_App_Exec+0xae0>
															{
																Isb_Obj[Obj_1].Data[0] = 1;
    168a:	53 82       	std	Z+3, r5	; 0x03
    168c:	01 c0       	rjmp	.+2      	; 0x1690 <Isb_App_Exec+0xae2>
															}
															else
															{
																Isb_Obj[Obj_1].Data[0] = 0;
    168e:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1690:	f9 01       	movw	r30, r18
    1692:	13 e0       	ldi	r17, 0x03	; 3
    1694:	ee 0f       	add	r30, r30
    1696:	ff 1f       	adc	r31, r31
    1698:	1a 95       	dec	r17
    169a:	e1 f7       	brne	.-8      	; 0x1694 <Isb_App_Exec+0xae6>
    169c:	e2 0f       	add	r30, r18
    169e:	f3 1f       	adc	r31, r19
    16a0:	ed 5f       	subi	r30, 0xFD	; 253
    16a2:	fe 4f       	sbci	r31, 0xFE	; 254
    16a4:	50 86       	std	Z+8, r5	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHSHORT);
    16a6:	e8 ad       	ldd	r30, Y+56	; 0x38
    16a8:	f9 ad       	ldd	r31, Y+57	; 0x39
    16aa:	85 81       	ldd	r24, Z+5	; 0x05
    16ac:	8f 7d       	andi	r24, 0xDF	; 223
    16ae:	85 83       	std	Z+5, r24	; 0x05
													}
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHLONG))
    16b0:	8c 91       	ld	r24, X
    16b2:	86 ff       	sbrs	r24, 6
    16b4:	53 c0       	rjmp	.+166    	; 0x175c <Isb_App_Exec+0xbae>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1)
    16b6:	e8 ad       	ldd	r30, Y+56	; 0x38
    16b8:	f9 ad       	ldd	r31, Y+57	; 0x39
    16ba:	82 81       	ldd	r24, Z+2	; 0x02
    16bc:	80 7f       	andi	r24, 0xF0	; 240
    16be:	80 31       	cpi	r24, 0x10	; 16
    16c0:	79 f4       	brne	.+30     	; 0x16e0 <Isb_App_Exec+0xb32>
														{
															// Aus
															Isb_Obj[Obj_2].Data[0] = 0;
    16c2:	fd a5       	ldd	r31, Y+45	; 0x2d
    16c4:	8f 2f       	mov	r24, r31
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	fc 01       	movw	r30, r24
    16ca:	73 e0       	ldi	r23, 0x03	; 3
    16cc:	ee 0f       	add	r30, r30
    16ce:	ff 1f       	adc	r31, r31
    16d0:	7a 95       	dec	r23
    16d2:	e1 f7       	brne	.-8      	; 0x16cc <Isb_App_Exec+0xb1e>
    16d4:	e8 0f       	add	r30, r24
    16d6:	f9 1f       	adc	r31, r25
    16d8:	ed 5f       	subi	r30, 0xFD	; 253
    16da:	fe 4f       	sbci	r31, 0xFE	; 254
    16dc:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_2].IsChanged = TRUE;
    16de:	50 86       	std	Z+8, r5	; 0x08
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2)
    16e0:	e8 ad       	ldd	r30, Y+56	; 0x38
    16e2:	f9 ad       	ldd	r31, Y+57	; 0x39
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	80 7f       	andi	r24, 0xF0	; 240
    16e8:	80 32       	cpi	r24, 0x20	; 32
    16ea:	79 f4       	brne	.+30     	; 0x170a <Isb_App_Exec+0xb5c>
														{
															// Ein
															Isb_Obj[Obj_2].Data[0] = 1;
    16ec:	fd a5       	ldd	r31, Y+45	; 0x2d
    16ee:	8f 2f       	mov	r24, r31
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	fc 01       	movw	r30, r24
    16f4:	63 e0       	ldi	r22, 0x03	; 3
    16f6:	ee 0f       	add	r30, r30
    16f8:	ff 1f       	adc	r31, r31
    16fa:	6a 95       	dec	r22
    16fc:	e1 f7       	brne	.-8      	; 0x16f6 <Isb_App_Exec+0xb48>
    16fe:	e8 0f       	add	r30, r24
    1700:	f9 1f       	adc	r31, r25
    1702:	ed 5f       	subi	r30, 0xFD	; 253
    1704:	fe 4f       	sbci	r31, 0xFE	; 254
    1706:	53 82       	std	Z+3, r5	; 0x03
															Isb_Obj[Obj_2].IsChanged = TRUE;
    1708:	50 86       	std	Z+8, r5	; 0x08
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3)
    170a:	e8 ad       	ldd	r30, Y+56	; 0x38
    170c:	f9 ad       	ldd	r31, Y+57	; 0x39
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	80 7f       	andi	r24, 0xF0	; 240
    1712:	80 33       	cpi	r24, 0x30	; 48
    1714:	f1 f4       	brne	.+60     	; 0x1752 <Isb_App_Exec+0xba4>
														{
															// Um
															if (Isb_Obj[Obj_2].Data[0] == 0)
    1716:	fd a5       	ldd	r31, Y+45	; 0x2d
    1718:	2f 2f       	mov	r18, r31
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	f9 01       	movw	r30, r18
    171e:	53 e0       	ldi	r21, 0x03	; 3
    1720:	ee 0f       	add	r30, r30
    1722:	ff 1f       	adc	r31, r31
    1724:	5a 95       	dec	r21
    1726:	e1 f7       	brne	.-8      	; 0x1720 <Isb_App_Exec+0xb72>
    1728:	e2 0f       	add	r30, r18
    172a:	f3 1f       	adc	r31, r19
    172c:	ed 5f       	subi	r30, 0xFD	; 253
    172e:	fe 4f       	sbci	r31, 0xFE	; 254
    1730:	83 81       	ldd	r24, Z+3	; 0x03
    1732:	88 23       	and	r24, r24
    1734:	11 f4       	brne	.+4      	; 0x173a <Isb_App_Exec+0xb8c>
															{
																Isb_Obj[Obj_2].Data[0] = 1;
    1736:	53 82       	std	Z+3, r5	; 0x03
    1738:	01 c0       	rjmp	.+2      	; 0x173c <Isb_App_Exec+0xb8e>
															}
															else
															{
																Isb_Obj[Obj_2].Data[0] = 0;
    173a:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_2].IsChanged = TRUE;
    173c:	f9 01       	movw	r30, r18
    173e:	43 e0       	ldi	r20, 0x03	; 3
    1740:	ee 0f       	add	r30, r30
    1742:	ff 1f       	adc	r31, r31
    1744:	4a 95       	dec	r20
    1746:	e1 f7       	brne	.-8      	; 0x1740 <Isb_App_Exec+0xb92>
    1748:	e2 0f       	add	r30, r18
    174a:	f3 1f       	adc	r31, r19
    174c:	ed 5f       	subi	r30, 0xFD	; 253
    174e:	fe 4f       	sbci	r31, 0xFE	; 254
    1750:	50 86       	std	Z+8, r5	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHLONG);
    1752:	e8 ad       	ldd	r30, Y+56	; 0x38
    1754:	f9 ad       	ldd	r31, Y+57	; 0x39
    1756:	85 81       	ldd	r24, Z+5	; 0x05
    1758:	8f 7b       	andi	r24, 0xBF	; 191
    175a:	85 83       	std	Z+5, r24	; 0x05
													}
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHREPEAT))
    175c:	8c 91       	ld	r24, X
    175e:	87 ff       	sbrs	r24, 7
    1760:	08 c0       	rjmp	.+16     	; 0x1772 <Isb_App_Exec+0xbc4>
													{
// TODO: REPEAT
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHREPEAT);
    1762:	a8 ad       	ldd	r26, Y+56	; 0x38
    1764:	b9 ad       	ldd	r27, Y+57	; 0x39
    1766:	15 96       	adiw	r26, 0x05	; 5
    1768:	8c 91       	ld	r24, X
    176a:	15 97       	sbiw	r26, 0x05	; 5
    176c:	8f 77       	andi	r24, 0x7F	; 127
    176e:	15 96       	adiw	r26, 0x05	; 5
    1770:	8c 93       	st	X, r24
    1772:	08 94       	sec
    1774:	81 1c       	adc	r8, r1
    1776:	91 1c       	adc	r9, r1
    1778:	e8 ad       	ldd	r30, Y+56	; 0x38
    177a:	f9 ad       	ldd	r31, Y+57	; 0x39
    177c:	38 96       	adiw	r30, 0x08	; 8
    177e:	f9 af       	std	Y+57, r31	; 0x39
    1780:	e8 af       	std	Y+56, r30	; 0x38
		#endif /* ISB_APP_CLOCK_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			if (bit_is_set(Isb_App_DigIn_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
			{
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++)
    1782:	f2 e0       	ldi	r31, 0x02	; 2
    1784:	8f 16       	cp	r8, r31
    1786:	91 04       	cpc	r9, r1
    1788:	09 f0       	breq	.+2      	; 0x178c <Isb_App_Exec+0xbde>
    178a:	37 ca       	rjmp	.-2962   	; 0xbfa <Isb_App_Exec+0x4c>
								#endif /* ISB_APP_DIGIN_MODE_FEATURE_COUNTER == TRUE */
							}
//						}
					}
				}
				Isb_App_DigIn_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    178c:	80 91 ab 00 	lds	r24, 0x00AB
    1790:	8e 7f       	andi	r24, 0xFE	; 254
    1792:	80 93 ab 00 	sts	0x00AB, r24
			}
		#endif /* ISB_APP_DIGIN_MAX */

		#if defined(ISB_APP_DIGOUT_MAX)
			if (bit_is_set(Isb_App_DigOut_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
    1796:	80 91 ac 00 	lds	r24, 0x00AC
    179a:	80 ff       	sbrs	r24, 0
    179c:	5f c7       	rjmp	.+3774   	; 0x265c <Isb_App_Exec+0x1aae>
    179e:	2b ec       	ldi	r18, 0xCB	; 203
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	39 af       	std	Y+57, r19	; 0x39
    17a4:	28 af       	std	Y+56, r18	; 0x38
    17a6:	3a 83       	std	Y+2, r19	; 0x02
    17a8:	29 83       	std	Y+1, r18	; 0x01
    17aa:	cc 24       	eor	r12, r12
    17ac:	dd 24       	eor	r13, r13
    17ae:	2c 2d       	mov	r18, r12
			{
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGOUT_MAX; AppIndex++)
				{
					uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigOut_Ch_Array[AppIndex]);
    17b0:	f6 01       	movw	r30, r12
    17b2:	e4 59       	subi	r30, 0x94	; 148
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	94 91       	lpm	r25, Z+
					uint8_t Obj_0 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_0_Array[AppIndex]);
    17b8:	f6 01       	movw	r30, r12
    17ba:	e2 59       	subi	r30, 0x92	; 146
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	34 91       	lpm	r19, Z+
    17c0:	3a a3       	std	Y+34, r19	; 0x22
					#if ISB_APP_DIGOUT_FEATURE_RESULT == TRUE
						uint8_t Obj_1 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_1_Array[AppIndex]);
    17c2:	f6 01       	movw	r30, r12
    17c4:	e0 59       	subi	r30, 0x90	; 144
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	44 91       	lpm	r20, Z+
    17ca:	49 a3       	std	Y+33, r20	; 0x21
					#endif /* ISB_APP_DIGOUT_FEATURE_RESULT == TRUE */
					#if ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION == TRUE
						uint8_t Obj_2 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_2_Array[AppIndex]);
    17cc:	f6 01       	movw	r30, r12
    17ce:	ee 58       	subi	r30, 0x8E	; 142
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	54 91       	lpm	r21, Z+
    17d4:	58 a3       	std	Y+32, r21	; 0x20
					#endif /* ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION == TRUE */
					#if ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE
						uint8_t Obj_3 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_3_Array[AppIndex]);
    17d6:	f6 01       	movw	r30, r12
    17d8:	ec 58       	subi	r30, 0x8C	; 140
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	84 91       	lpm	r24, Z+
    17de:	8f 8f       	std	Y+31, r24	; 0x1f
					#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
					// Initialize
					if (bit_is_clear(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_INITIALIZED))
    17e0:	a9 2f       	mov	r26, r25
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	bb ab       	std	Y+51, r27	; 0x33
    17e6:	aa ab       	std	Y+50, r26	; 0x32
    17e8:	aa 0f       	add	r26, r26
    17ea:	bb 1f       	adc	r27, r27
    17ec:	ad 54       	subi	r26, 0x4D	; 77
    17ee:	bf 4f       	sbci	r27, 0xFF	; 255
    17f0:	b9 ab       	std	Y+49, r27	; 0x31
    17f2:	a8 ab       	std	Y+48, r26	; 0x30
    17f4:	8c 91       	ld	r24, X
    17f6:	86 fd       	sbrc	r24, 6
    17f8:	1f c3       	rjmp	.+1598   	; 0x1e38 <Isb_App_Exec+0x128a>
							uint16_t eepAddr_Cfg10 = 0;
							uint16_t eepAddr_Obj_3_Ctrl = 0;
							uint16_t eepAddr_Obj_3_Tov = 0;
							uint16_t eepAddr_Obj_3_InitValue = 0;
						#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
						switch (AppIndex)
    17fa:	cc 20       	and	r12, r12
    17fc:	21 f0       	breq	.+8      	; 0x1806 <Isb_App_Exec+0xc58>
    17fe:	21 30       	cpi	r18, 0x01	; 1
    1800:	09 f0       	breq	.+2      	; 0x1804 <Isb_App_Exec+0xc56>
    1802:	52 c0       	rjmp	.+164    	; 0x18a8 <Isb_App_Exec+0xcfa>
    1804:	80 c0       	rjmp	.+256    	; 0x1906 <Isb_App_Exec+0xd58>
    1806:	67 e3       	ldi	r22, 0x37	; 55
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	a8 e3       	ldi	r26, 0x38	; 56
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	09 e3       	ldi	r16, 0x39	; 57
    1810:	10 e0       	ldi	r17, 0x00	; 0
    1812:	ea e3       	ldi	r30, 0x3A	; 58
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	fe 8f       	std	Y+30, r31	; 0x1e
    1818:	ed 8f       	std	Y+29, r30	; 0x1d
    181a:	2f e3       	ldi	r18, 0x3F	; 63
    181c:	e2 2e       	mov	r14, r18
    181e:	f1 2c       	mov	r15, r1
    1820:	80 e4       	ldi	r24, 0x40	; 64
    1822:	a8 2e       	mov	r10, r24
    1824:	b1 2c       	mov	r11, r1
    1826:	f1 e4       	ldi	r31, 0x41	; 65
    1828:	8f 2e       	mov	r8, r31
    182a:	91 2c       	mov	r9, r1
    182c:	22 e4       	ldi	r18, 0x42	; 66
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	3c 8f       	std	Y+28, r19	; 0x1c
    1832:	2b 8f       	std	Y+27, r18	; 0x1b
    1834:	e7 e4       	ldi	r30, 0x47	; 71
    1836:	6e 2e       	mov	r6, r30
    1838:	71 2c       	mov	r7, r1
    183a:	58 e4       	ldi	r21, 0x48	; 72
    183c:	45 2e       	mov	r4, r21
    183e:	51 2c       	mov	r5, r1
    1840:	49 e4       	ldi	r20, 0x49	; 73
    1842:	24 2e       	mov	r2, r20
    1844:	31 2c       	mov	r3, r1
    1846:	4a e4       	ldi	r20, 0x4A	; 74
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	5a 8f       	std	Y+26, r21	; 0x1a
    184c:	49 8f       	std	Y+25, r20	; 0x19
    184e:	ef e4       	ldi	r30, 0x4F	; 79
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	f8 8f       	std	Y+24, r31	; 0x18
    1854:	ef 8b       	std	Y+23, r30	; 0x17
    1856:	20 e5       	ldi	r18, 0x50	; 80
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	3e 8b       	std	Y+22, r19	; 0x16
    185c:	2d 8b       	std	Y+21, r18	; 0x15
    185e:	41 e5       	ldi	r20, 0x51	; 81
    1860:	50 e0       	ldi	r21, 0x00	; 0
    1862:	5c 8b       	std	Y+20, r21	; 0x14
    1864:	4b 8b       	std	Y+19, r20	; 0x13
    1866:	e2 e5       	ldi	r30, 0x52	; 82
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	fa 8b       	std	Y+18, r31	; 0x12
    186c:	e9 8b       	std	Y+17, r30	; 0x11
    186e:	23 e5       	ldi	r18, 0x53	; 83
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	38 8b       	std	Y+16, r19	; 0x10
    1874:	2f 87       	std	Y+15, r18	; 0x0f
    1876:	44 e5       	ldi	r20, 0x54	; 84
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	5e 87       	std	Y+14, r21	; 0x0e
    187c:	4d 87       	std	Y+13, r20	; 0x0d
    187e:	e5 e5       	ldi	r30, 0x55	; 85
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	fc 87       	std	Y+12, r31	; 0x0c
    1884:	eb 87       	std	Y+11, r30	; 0x0b
    1886:	26 e5       	ldi	r18, 0x56	; 86
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	3a 87       	std	Y+10, r19	; 0x0a
    188c:	29 87       	std	Y+9, r18	; 0x09
    188e:	47 e5       	ldi	r20, 0x57	; 87
    1890:	50 e0       	ldi	r21, 0x00	; 0
    1892:	58 87       	std	Y+8, r21	; 0x08
    1894:	4f 83       	std	Y+7, r20	; 0x07
    1896:	e8 e5       	ldi	r30, 0x58	; 88
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	fe 83       	std	Y+6, r31	; 0x06
    189c:	ed 83       	std	Y+5, r30	; 0x05
    189e:	29 e5       	ldi	r18, 0x59	; 89
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	3c 83       	std	Y+4, r19	; 0x04
    18a4:	2b 83       	std	Y+3, r18	; 0x03
    18a6:	7f c0       	rjmp	.+254    	; 0x19a6 <Isb_App_Exec+0xdf8>
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	a0 e0       	ldi	r26, 0x00	; 0
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	00 e0       	ldi	r16, 0x00	; 0
    18b2:	10 e0       	ldi	r17, 0x00	; 0
    18b4:	1e 8e       	std	Y+30, r1	; 0x1e
    18b6:	1d 8e       	std	Y+29, r1	; 0x1d
    18b8:	ee 24       	eor	r14, r14
    18ba:	ff 24       	eor	r15, r15
    18bc:	aa 24       	eor	r10, r10
    18be:	bb 24       	eor	r11, r11
    18c0:	88 24       	eor	r8, r8
    18c2:	99 24       	eor	r9, r9
    18c4:	1c 8e       	std	Y+28, r1	; 0x1c
    18c6:	1b 8e       	std	Y+27, r1	; 0x1b
    18c8:	66 24       	eor	r6, r6
    18ca:	77 24       	eor	r7, r7
    18cc:	44 24       	eor	r4, r4
    18ce:	55 24       	eor	r5, r5
    18d0:	22 24       	eor	r2, r2
    18d2:	33 24       	eor	r3, r3
    18d4:	1a 8e       	std	Y+26, r1	; 0x1a
    18d6:	19 8e       	std	Y+25, r1	; 0x19
    18d8:	18 8e       	std	Y+24, r1	; 0x18
    18da:	1f 8a       	std	Y+23, r1	; 0x17
    18dc:	1e 8a       	std	Y+22, r1	; 0x16
    18de:	1d 8a       	std	Y+21, r1	; 0x15
    18e0:	1c 8a       	std	Y+20, r1	; 0x14
    18e2:	1b 8a       	std	Y+19, r1	; 0x13
    18e4:	1a 8a       	std	Y+18, r1	; 0x12
    18e6:	19 8a       	std	Y+17, r1	; 0x11
    18e8:	18 8a       	std	Y+16, r1	; 0x10
    18ea:	1f 86       	std	Y+15, r1	; 0x0f
    18ec:	1e 86       	std	Y+14, r1	; 0x0e
    18ee:	1d 86       	std	Y+13, r1	; 0x0d
    18f0:	1c 86       	std	Y+12, r1	; 0x0c
    18f2:	1b 86       	std	Y+11, r1	; 0x0b
    18f4:	1a 86       	std	Y+10, r1	; 0x0a
    18f6:	19 86       	std	Y+9, r1	; 0x09
    18f8:	18 86       	std	Y+8, r1	; 0x08
    18fa:	1f 82       	std	Y+7, r1	; 0x07
    18fc:	1e 82       	std	Y+6, r1	; 0x06
    18fe:	1d 82       	std	Y+5, r1	; 0x05
    1900:	1c 82       	std	Y+4, r1	; 0x04
    1902:	1b 82       	std	Y+3, r1	; 0x03
    1904:	50 c0       	rjmp	.+160    	; 0x19a6 <Isb_App_Exec+0xdf8>
    1906:	60 e6       	ldi	r22, 0x60	; 96
    1908:	70 e0       	ldi	r23, 0x00	; 0
    190a:	a1 e6       	ldi	r26, 0x61	; 97
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	02 e6       	ldi	r16, 0x62	; 98
    1910:	10 e0       	ldi	r17, 0x00	; 0
    1912:	43 e6       	ldi	r20, 0x63	; 99
    1914:	50 e0       	ldi	r21, 0x00	; 0
    1916:	5e 8f       	std	Y+30, r21	; 0x1e
    1918:	4d 8f       	std	Y+29, r20	; 0x1d
    191a:	38 e6       	ldi	r19, 0x68	; 104
    191c:	e3 2e       	mov	r14, r19
    191e:	f1 2c       	mov	r15, r1
    1920:	29 e6       	ldi	r18, 0x69	; 105
    1922:	a2 2e       	mov	r10, r18
    1924:	b1 2c       	mov	r11, r1
    1926:	8a e6       	ldi	r24, 0x6A	; 106
    1928:	88 2e       	mov	r8, r24
    192a:	91 2c       	mov	r9, r1
    192c:	eb e6       	ldi	r30, 0x6B	; 107
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	fc 8f       	std	Y+28, r31	; 0x1c
    1932:	eb 8f       	std	Y+27, r30	; 0x1b
    1934:	f0 e7       	ldi	r31, 0x70	; 112
    1936:	6f 2e       	mov	r6, r31
    1938:	71 2c       	mov	r7, r1
    193a:	e1 e7       	ldi	r30, 0x71	; 113
    193c:	4e 2e       	mov	r4, r30
    193e:	51 2c       	mov	r5, r1
    1940:	52 e7       	ldi	r21, 0x72	; 114
    1942:	25 2e       	mov	r2, r21
    1944:	31 2c       	mov	r3, r1
    1946:	23 e7       	ldi	r18, 0x73	; 115
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	3a 8f       	std	Y+26, r19	; 0x1a
    194c:	29 8f       	std	Y+25, r18	; 0x19
    194e:	48 e7       	ldi	r20, 0x78	; 120
    1950:	50 e0       	ldi	r21, 0x00	; 0
    1952:	58 8f       	std	Y+24, r21	; 0x18
    1954:	4f 8b       	std	Y+23, r20	; 0x17
    1956:	e9 e7       	ldi	r30, 0x79	; 121
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	fe 8b       	std	Y+22, r31	; 0x16
    195c:	ed 8b       	std	Y+21, r30	; 0x15
    195e:	2a e7       	ldi	r18, 0x7A	; 122
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	3c 8b       	std	Y+20, r19	; 0x14
    1964:	2b 8b       	std	Y+19, r18	; 0x13
    1966:	4b e7       	ldi	r20, 0x7B	; 123
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	5a 8b       	std	Y+18, r21	; 0x12
    196c:	49 8b       	std	Y+17, r20	; 0x11
    196e:	ec e7       	ldi	r30, 0x7C	; 124
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	f8 8b       	std	Y+16, r31	; 0x10
    1974:	ef 87       	std	Y+15, r30	; 0x0f
    1976:	2d e7       	ldi	r18, 0x7D	; 125
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	3e 87       	std	Y+14, r19	; 0x0e
    197c:	2d 87       	std	Y+13, r18	; 0x0d
    197e:	4e e7       	ldi	r20, 0x7E	; 126
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	5c 87       	std	Y+12, r21	; 0x0c
    1984:	4b 87       	std	Y+11, r20	; 0x0b
    1986:	ef e7       	ldi	r30, 0x7F	; 127
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	fa 87       	std	Y+10, r31	; 0x0a
    198c:	e9 87       	std	Y+9, r30	; 0x09
    198e:	20 e8       	ldi	r18, 0x80	; 128
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	38 87       	std	Y+8, r19	; 0x08
    1994:	2f 83       	std	Y+7, r18	; 0x07
    1996:	41 e8       	ldi	r20, 0x81	; 129
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	5e 83       	std	Y+6, r21	; 0x06
    199c:	4d 83       	std	Y+5, r20	; 0x05
    199e:	e2 e8       	ldi	r30, 0x82	; 130
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	fc 83       	std	Y+4, r31	; 0x04
    19a4:	eb 83       	std	Y+3, r30	; 0x03
		uint8_t Isb_Ch_Ctrl_Get(uint8_t Ch)
		{
			uint8_t Ctrl = 0;
			uint16_t eepAddrCtrl = 0;
			uint16_t eepAddrCrc = 0;
			switch (Ch)
    19a6:	91 30       	cpi	r25, 0x01	; 1
    19a8:	61 f0       	breq	.+24     	; 0x19c2 <Isb_App_Exec+0xe14>
    19aa:	91 30       	cpi	r25, 0x01	; 1
    19ac:	28 f0       	brcs	.+10     	; 0x19b8 <Isb_App_Exec+0xe0a>
    19ae:	92 30       	cpi	r25, 0x02	; 2
    19b0:	69 f0       	breq	.+26     	; 0x19cc <Isb_App_Exec+0xe1e>
    19b2:	93 30       	cpi	r25, 0x03	; 3
    19b4:	b9 f4       	brne	.+46     	; 0x19e4 <Isb_App_Exec+0xe36>
    19b6:	0f c0       	rjmp	.+30     	; 0x19d6 <Isb_App_Exec+0xe28>
    19b8:	4a e1       	ldi	r20, 0x1A	; 26
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	0e c0       	rjmp	.+28     	; 0x19de <Isb_App_Exec+0xe30>
    19c2:	45 e3       	ldi	r20, 0x35	; 53
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	8b e1       	ldi	r24, 0x1B	; 27
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	09 c0       	rjmp	.+18     	; 0x19de <Isb_App_Exec+0xe30>
    19cc:	4e e5       	ldi	r20, 0x5E	; 94
    19ce:	50 e0       	ldi	r21, 0x00	; 0
    19d0:	86 e3       	ldi	r24, 0x36	; 54
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	04 c0       	rjmp	.+8      	; 0x19de <Isb_App_Exec+0xe30>
    19d6:	47 e8       	ldi	r20, 0x87	; 135
    19d8:	50 e0       	ldi	r21, 0x00	; 0
    19da:	8f e5       	ldi	r24, 0x5F	; 95
    19dc:	90 e0       	ldi	r25, 0x00	; 0
//-				default:
//-					eepAddrCtrl = 0;
//-					eepAddrCrc = 0;
//-					break;
			}
			if ((eepAddrCrc != 0) & (eepAddrCtrl < eepAddrCrc))
    19de:	84 17       	cp	r24, r20
    19e0:	95 07       	cpc	r25, r21
    19e2:	10 f0       	brcs	.+4      	; 0x19e8 <Isb_App_Exec+0xe3a>
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	12 c0       	rjmp	.+36     	; 0x1a0c <Isb_App_Exec+0xe5e>
    19e8:	9c 01       	movw	r18, r24
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <Isb_App_Exec+0xe42>
			{
				uint8_t Crc = 0;
				for (uint16_t eepAddr = eepAddrCtrl; eepAddr <= eepAddrCrc; eepAddr++)
    19ec:	2f 5f       	subi	r18, 0xFF	; 255
    19ee:	3f 4f       	sbci	r19, 0xFF	; 255
    19f0:	42 17       	cp	r20, r18
    19f2:	53 07       	cpc	r21, r19
    19f4:	d8 f7       	brcc	.-10     	; 0x19ec <Isb_App_Exec+0xe3e>
    19f6:	20 91 a7 00 	lds	r18, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    19fa:	e1 99       	sbic	0x1c, 1	; 28
    19fc:	fe cf       	rjmp	.-4      	; 0x19fa <Isb_App_Exec+0xe4c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    19fe:	82 0f       	add	r24, r18
    1a00:	91 1d       	adc	r25, r1
    1a02:	9f bb       	out	0x1f, r25	; 31
    1a04:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    1a06:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1a08:	8d b3       	in	r24, 0x1d	; 29
				}
				else
				{
					Ctrl = (1<<ISB_CH_CTRL_ERROR_CRC);
				}
				Ctrl &= ~(1<<ISB_CH_CTRL_INITIALIZED);
    1a0a:	8f 73       	andi	r24, 0x3F	; 63
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_15_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
							#endif /* ISB_APP_DIGOUT_15 */
						}
						Isb_Ch[Ch].Ctrl = Isb_Ch_Ctrl_Get(Ch);
    1a0c:	2a a9       	ldd	r18, Y+50	; 0x32
    1a0e:	3b a9       	ldd	r19, Y+51	; 0x33
    1a10:	22 0f       	add	r18, r18
    1a12:	33 1f       	adc	r19, r19
    1a14:	2d 54       	subi	r18, 0x4D	; 77
    1a16:	3f 4f       	sbci	r19, 0xFF	; 255
    1a18:	f9 01       	movw	r30, r18
    1a1a:	80 83       	st	Z, r24
    1a1c:	11 82       	std	Z+1, r1	; 0x01
						if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED))
    1a1e:	e8 a9       	ldd	r30, Y+48	; 0x30
    1a20:	f9 a9       	ldd	r31, Y+49	; 0x31
    1a22:	80 81       	ld	r24, Z
    1a24:	80 ff       	sbrs	r24, 0
    1a26:	fd c1       	rjmp	.+1018   	; 0x1e22 <Isb_App_Exec+0x1274>
    1a28:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1a2c:	e1 99       	sbic	0x1c, 1	; 28
    1a2e:	fe cf       	rjmp	.-4      	; 0x1a2c <Isb_App_Exec+0xe7e>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1a30:	68 0f       	add	r22, r24
    1a32:	71 1d       	adc	r23, r1
    1a34:	7f bb       	out	0x1f, r23	; 31
    1a36:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
    1a38:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1a3a:	8d b3       	in	r24, 0x1d	; 29
						{
							Isb_App_DigOut[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg0);
    1a3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a40:	80 83       	st	Z, r24
							Isb_Obj[Obj_0].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Ctrl);
    1a42:	fa a1       	ldd	r31, Y+34	; 0x22
    1a44:	4f 2f       	mov	r20, r31
    1a46:	50 e0       	ldi	r21, 0x00	; 0
    1a48:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1a4c:	e1 99       	sbic	0x1c, 1	; 28
    1a4e:	fe cf       	rjmp	.-4      	; 0x1a4c <Isb_App_Exec+0xe9e>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1a50:	a8 0f       	add	r26, r24
    1a52:	b1 1d       	adc	r27, r1
    1a54:	bf bb       	out	0x1f, r27	; 31
    1a56:	ae bb       	out	0x1e, r26	; 30
#endif
    EECR |= (1 << EERE);
    1a58:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1a5a:	8d b3       	in	r24, 0x1d	; 29
    1a5c:	fa 01       	movw	r30, r20
    1a5e:	23 e0       	ldi	r18, 0x03	; 3
    1a60:	ee 0f       	add	r30, r30
    1a62:	ff 1f       	adc	r31, r31
    1a64:	2a 95       	dec	r18
    1a66:	e1 f7       	brne	.-8      	; 0x1a60 <Isb_App_Exec+0xeb2>
    1a68:	e4 0f       	add	r30, r20
    1a6a:	f5 1f       	adc	r31, r21
    1a6c:	ed 5f       	subi	r30, 0xFD	; 253
    1a6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a70:	80 83       	st	Z, r24
							Isb_Obj[Obj_0].Top = ISB_MSG_TOP_1BIT;
    1a72:	21 e0       	ldi	r18, 0x01	; 1
    1a74:	21 83       	std	Z+1, r18	; 0x01
    1a76:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1a7a:	e1 99       	sbic	0x1c, 1	; 28
    1a7c:	fe cf       	rjmp	.-4      	; 0x1a7a <Isb_App_Exec+0xecc>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1a7e:	08 0f       	add	r16, r24
    1a80:	11 1d       	adc	r17, r1
    1a82:	1f bb       	out	0x1f, r17	; 31
    1a84:	0e bb       	out	0x1e, r16	; 30
#endif
    EECR |= (1 << EERE);
    1a86:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1a88:	8d b3       	in	r24, 0x1d	; 29
							Isb_Obj[Obj_0].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Tov);
    1a8a:	9a 01       	movw	r18, r20
    1a8c:	93 e0       	ldi	r25, 0x03	; 3
    1a8e:	22 0f       	add	r18, r18
    1a90:	33 1f       	adc	r19, r19
    1a92:	9a 95       	dec	r25
    1a94:	e1 f7       	brne	.-8      	; 0x1a8e <Isb_App_Exec+0xee0>
    1a96:	24 0f       	add	r18, r20
    1a98:	35 1f       	adc	r19, r21
    1a9a:	f9 01       	movw	r30, r18
    1a9c:	ed 5f       	subi	r30, 0xFD	; 253
    1a9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1aa0:	82 83       	std	Z+2, r24	; 0x02
    1aa2:	f9 01       	movw	r30, r18
    1aa4:	ea 5f       	subi	r30, 0xFA	; 250
    1aa6:	fe 4f       	sbci	r31, 0xFE	; 254
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	60 91 a7 00 	lds	r22, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1ab0:	e1 99       	sbic	0x1c, 1	; 28
    1ab2:	fe cf       	rjmp	.-4      	; 0x1ab0 <Isb_App_Exec+0xf02>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1ab4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ab6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ab8:	82 0f       	add	r24, r18
    1aba:	93 1f       	adc	r25, r19
    1abc:	86 0f       	add	r24, r22
    1abe:	91 1d       	adc	r25, r1
    1ac0:	9f bb       	out	0x1f, r25	; 31
    1ac2:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    1ac4:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1ac6:	8d b3       	in	r24, 0x1d	; 29
							for (uint8_t i = 0; i < 5; i++)
							{
								Isb_Obj[Obj_0].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_0_InitValue + i));
    1ac8:	81 93       	st	Z+, r24
    1aca:	2f 5f       	subi	r18, 0xFF	; 255
    1acc:	3f 4f       	sbci	r19, 0xFF	; 255
						{
							Isb_App_DigOut[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg0);
							Isb_Obj[Obj_0].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Ctrl);
							Isb_Obj[Obj_0].Top = ISB_MSG_TOP_1BIT;
							Isb_Obj[Obj_0].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Tov);
							for (uint8_t i = 0; i < 5; i++)
    1ace:	25 30       	cpi	r18, 0x05	; 5
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	61 f7       	brne	.-40     	; 0x1aac <Isb_App_Exec+0xefe>
							{
								Isb_Obj[Obj_0].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_0_InitValue + i));
							}
							Isb_Obj[Obj_0].IsChanged = FALSE;
    1ad4:	fa 01       	movw	r30, r20
    1ad6:	03 e0       	ldi	r16, 0x03	; 3
    1ad8:	ee 0f       	add	r30, r30
    1ada:	ff 1f       	adc	r31, r31
    1adc:	0a 95       	dec	r16
    1ade:	e1 f7       	brne	.-8      	; 0x1ad8 <Isb_App_Exec+0xf2a>
    1ae0:	e4 0f       	add	r30, r20
    1ae2:	f5 1f       	adc	r31, r21
    1ae4:	ed 5f       	subi	r30, 0xFD	; 253
    1ae6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae8:	10 86       	std	Z+8, r1	; 0x08
    1aea:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1aee:	e1 99       	sbic	0x1c, 1	; 28
    1af0:	fe cf       	rjmp	.-4      	; 0x1aee <Isb_App_Exec+0xf40>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1af2:	e8 0e       	add	r14, r24
    1af4:	f1 1c       	adc	r15, r1
    1af6:	ff ba       	out	0x1f, r15	; 31
    1af8:	ee ba       	out	0x1e, r14	; 30
#endif
    EECR |= (1 << EERE);
    1afa:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1afc:	8d b3       	in	r24, 0x1d	; 29
							#if ISB_APP_DIGOUT_FEATURE_RESULT == TRUE
								Isb_App_DigOut[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg1);
    1afe:	a8 ad       	ldd	r26, Y+56	; 0x38
    1b00:	b9 ad       	ldd	r27, Y+57	; 0x39
    1b02:	15 96       	adiw	r26, 0x05	; 5
    1b04:	8c 93       	st	X, r24
								Isb_Obj[Obj_1].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_1_Ctrl);
    1b06:	b9 a1       	ldd	r27, Y+33	; 0x21
    1b08:	4b 2f       	mov	r20, r27
    1b0a:	50 e0       	ldi	r21, 0x00	; 0
    1b0c:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1b10:	e1 99       	sbic	0x1c, 1	; 28
    1b12:	fe cf       	rjmp	.-4      	; 0x1b10 <Isb_App_Exec+0xf62>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1b14:	a8 0e       	add	r10, r24
    1b16:	b1 1c       	adc	r11, r1
    1b18:	bf ba       	out	0x1f, r11	; 31
    1b1a:	ae ba       	out	0x1e, r10	; 30
#endif
    EECR |= (1 << EERE);
    1b1c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1b1e:	8d b3       	in	r24, 0x1d	; 29
    1b20:	fa 01       	movw	r30, r20
    1b22:	13 e0       	ldi	r17, 0x03	; 3
    1b24:	ee 0f       	add	r30, r30
    1b26:	ff 1f       	adc	r31, r31
    1b28:	1a 95       	dec	r17
    1b2a:	e1 f7       	brne	.-8      	; 0x1b24 <Isb_App_Exec+0xf76>
    1b2c:	e4 0f       	add	r30, r20
    1b2e:	f5 1f       	adc	r31, r21
    1b30:	ed 5f       	subi	r30, 0xFD	; 253
    1b32:	fe 4f       	sbci	r31, 0xFE	; 254
    1b34:	80 83       	st	Z, r24
								Isb_Obj[Obj_1].Top = ISB_MSG_TOP_1BIT;
    1b36:	21 e0       	ldi	r18, 0x01	; 1
    1b38:	21 83       	std	Z+1, r18	; 0x01
    1b3a:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1b3e:	e1 99       	sbic	0x1c, 1	; 28
    1b40:	fe cf       	rjmp	.-4      	; 0x1b3e <Isb_App_Exec+0xf90>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1b42:	88 0e       	add	r8, r24
    1b44:	91 1c       	adc	r9, r1
    1b46:	9f ba       	out	0x1f, r9	; 31
    1b48:	8e ba       	out	0x1e, r8	; 30
#endif
    EECR |= (1 << EERE);
    1b4a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1b4c:	8d b3       	in	r24, 0x1d	; 29
								Isb_Obj[Obj_1].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_1_Tov);
    1b4e:	9a 01       	movw	r18, r20
    1b50:	b3 e0       	ldi	r27, 0x03	; 3
    1b52:	22 0f       	add	r18, r18
    1b54:	33 1f       	adc	r19, r19
    1b56:	ba 95       	dec	r27
    1b58:	e1 f7       	brne	.-8      	; 0x1b52 <Isb_App_Exec+0xfa4>
    1b5a:	24 0f       	add	r18, r20
    1b5c:	35 1f       	adc	r19, r21
    1b5e:	f9 01       	movw	r30, r18
    1b60:	ed 5f       	subi	r30, 0xFD	; 253
    1b62:	fe 4f       	sbci	r31, 0xFE	; 254
    1b64:	82 83       	std	Z+2, r24	; 0x02
    1b66:	f9 01       	movw	r30, r18
    1b68:	ea 5f       	subi	r30, 0xFA	; 250
    1b6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	60 91 a7 00 	lds	r22, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1b74:	e1 99       	sbic	0x1c, 1	; 28
    1b76:	fe cf       	rjmp	.-4      	; 0x1b74 <Isb_App_Exec+0xfc6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1b78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b7c:	82 0f       	add	r24, r18
    1b7e:	93 1f       	adc	r25, r19
    1b80:	86 0f       	add	r24, r22
    1b82:	91 1d       	adc	r25, r1
    1b84:	9f bb       	out	0x1f, r25	; 31
    1b86:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    1b88:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1b8a:	8d b3       	in	r24, 0x1d	; 29
								for (uint8_t i = 0; i < 5; i++)
								{
									Isb_Obj[Obj_1].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_1_InitValue + i));
    1b8c:	81 93       	st	Z+, r24
    1b8e:	2f 5f       	subi	r18, 0xFF	; 255
    1b90:	3f 4f       	sbci	r19, 0xFF	; 255
							#if ISB_APP_DIGOUT_FEATURE_RESULT == TRUE
								Isb_App_DigOut[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg1);
								Isb_Obj[Obj_1].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_1_Ctrl);
								Isb_Obj[Obj_1].Top = ISB_MSG_TOP_1BIT;
								Isb_Obj[Obj_1].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_1_Tov);
								for (uint8_t i = 0; i < 5; i++)
    1b92:	25 30       	cpi	r18, 0x05	; 5
    1b94:	31 05       	cpc	r19, r1
    1b96:	61 f7       	brne	.-40     	; 0x1b70 <Isb_App_Exec+0xfc2>
								{
									Isb_Obj[Obj_1].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_1_InitValue + i));
								}
								Isb_Obj[Obj_1].IsChanged = FALSE;
    1b98:	fa 01       	movw	r30, r20
    1b9a:	a3 e0       	ldi	r26, 0x03	; 3
    1b9c:	ee 0f       	add	r30, r30
    1b9e:	ff 1f       	adc	r31, r31
    1ba0:	aa 95       	dec	r26
    1ba2:	e1 f7       	brne	.-8      	; 0x1b9c <Isb_App_Exec+0xfee>
    1ba4:	e4 0f       	add	r30, r20
    1ba6:	f5 1f       	adc	r31, r21
    1ba8:	ed 5f       	subi	r30, 0xFD	; 253
    1baa:	fe 4f       	sbci	r31, 0xFE	; 254
    1bac:	10 86       	std	Z+8, r1	; 0x08
    1bae:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1bb2:	e1 99       	sbic	0x1c, 1	; 28
    1bb4:	fe cf       	rjmp	.-4      	; 0x1bb2 <Isb_App_Exec+0x1004>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1bb6:	68 0e       	add	r6, r24
    1bb8:	71 1c       	adc	r7, r1
    1bba:	7f ba       	out	0x1f, r7	; 31
    1bbc:	6e ba       	out	0x1e, r6	; 30
#endif
    EECR |= (1 << EERE);
    1bbe:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1bc0:	8d b3       	in	r24, 0x1d	; 29
							#endif /* ISB_APP_DIGOUT_FEATURE_RESULT == TRUE */
							#if ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION == TRUE
								Isb_App_DigOut[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg2);
    1bc2:	a8 ad       	ldd	r26, Y+56	; 0x38
    1bc4:	b9 ad       	ldd	r27, Y+57	; 0x39
    1bc6:	16 96       	adiw	r26, 0x06	; 6
    1bc8:	8c 93       	st	X, r24
								Isb_Obj[Obj_2].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_2_Ctrl);
    1bca:	b8 a1       	ldd	r27, Y+32	; 0x20
    1bcc:	4b 2f       	mov	r20, r27
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1bd4:	e1 99       	sbic	0x1c, 1	; 28
    1bd6:	fe cf       	rjmp	.-4      	; 0x1bd4 <Isb_App_Exec+0x1026>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1bd8:	48 0e       	add	r4, r24
    1bda:	51 1c       	adc	r5, r1
    1bdc:	5f ba       	out	0x1f, r5	; 31
    1bde:	4e ba       	out	0x1e, r4	; 30
#endif
    EECR |= (1 << EERE);
    1be0:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1be2:	8d b3       	in	r24, 0x1d	; 29
    1be4:	fa 01       	movw	r30, r20
    1be6:	73 e0       	ldi	r23, 0x03	; 3
    1be8:	ee 0f       	add	r30, r30
    1bea:	ff 1f       	adc	r31, r31
    1bec:	7a 95       	dec	r23
    1bee:	e1 f7       	brne	.-8      	; 0x1be8 <Isb_App_Exec+0x103a>
    1bf0:	e4 0f       	add	r30, r20
    1bf2:	f5 1f       	adc	r31, r21
    1bf4:	ed 5f       	subi	r30, 0xFD	; 253
    1bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf8:	80 83       	st	Z, r24
								Isb_Obj[Obj_2].Top = ISB_MSG_TOP_1BIT;
    1bfa:	21 e0       	ldi	r18, 0x01	; 1
    1bfc:	21 83       	std	Z+1, r18	; 0x01
    1bfe:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1c02:	e1 99       	sbic	0x1c, 1	; 28
    1c04:	fe cf       	rjmp	.-4      	; 0x1c02 <Isb_App_Exec+0x1054>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1c06:	28 0e       	add	r2, r24
    1c08:	31 1c       	adc	r3, r1
    1c0a:	3f ba       	out	0x1f, r3	; 31
    1c0c:	2e ba       	out	0x1e, r2	; 30
#endif
    EECR |= (1 << EERE);
    1c0e:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1c10:	8d b3       	in	r24, 0x1d	; 29
								Isb_Obj[Obj_2].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_2_Tov);
    1c12:	9a 01       	movw	r18, r20
    1c14:	63 e0       	ldi	r22, 0x03	; 3
    1c16:	22 0f       	add	r18, r18
    1c18:	33 1f       	adc	r19, r19
    1c1a:	6a 95       	dec	r22
    1c1c:	e1 f7       	brne	.-8      	; 0x1c16 <Isb_App_Exec+0x1068>
    1c1e:	24 0f       	add	r18, r20
    1c20:	35 1f       	adc	r19, r21
    1c22:	f9 01       	movw	r30, r18
    1c24:	ed 5f       	subi	r30, 0xFD	; 253
    1c26:	fe 4f       	sbci	r31, 0xFE	; 254
    1c28:	82 83       	std	Z+2, r24	; 0x02
    1c2a:	f9 01       	movw	r30, r18
    1c2c:	ea 5f       	subi	r30, 0xFA	; 250
    1c2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	60 91 a7 00 	lds	r22, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1c38:	e1 99       	sbic	0x1c, 1	; 28
    1c3a:	fe cf       	rjmp	.-4      	; 0x1c38 <Isb_App_Exec+0x108a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1c3c:	89 8d       	ldd	r24, Y+25	; 0x19
    1c3e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c40:	82 0f       	add	r24, r18
    1c42:	93 1f       	adc	r25, r19
    1c44:	86 0f       	add	r24, r22
    1c46:	91 1d       	adc	r25, r1
    1c48:	9f bb       	out	0x1f, r25	; 31
    1c4a:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    1c4c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1c4e:	8d b3       	in	r24, 0x1d	; 29
								for (uint8_t i = 0; i < 5; i++)
								{
									Isb_Obj[Obj_2].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_2_InitValue + i));
    1c50:	81 93       	st	Z+, r24
    1c52:	2f 5f       	subi	r18, 0xFF	; 255
    1c54:	3f 4f       	sbci	r19, 0xFF	; 255
							#if ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION == TRUE
								Isb_App_DigOut[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg2);
								Isb_Obj[Obj_2].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_2_Ctrl);
								Isb_Obj[Obj_2].Top = ISB_MSG_TOP_1BIT;
								Isb_Obj[Obj_2].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_2_Tov);
								for (uint8_t i = 0; i < 5; i++)
    1c56:	25 30       	cpi	r18, 0x05	; 5
    1c58:	31 05       	cpc	r19, r1
    1c5a:	61 f7       	brne	.-40     	; 0x1c34 <Isb_App_Exec+0x1086>
								{
									Isb_Obj[Obj_2].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_2_InitValue + i));
								}
								Isb_Obj[Obj_2].IsChanged = FALSE;
    1c5c:	fa 01       	movw	r30, r20
    1c5e:	23 e0       	ldi	r18, 0x03	; 3
    1c60:	ee 0f       	add	r30, r30
    1c62:	ff 1f       	adc	r31, r31
    1c64:	2a 95       	dec	r18
    1c66:	e1 f7       	brne	.-8      	; 0x1c60 <Isb_App_Exec+0x10b2>
    1c68:	e4 0f       	add	r30, r20
    1c6a:	f5 1f       	adc	r31, r21
    1c6c:	ed 5f       	subi	r30, 0xFD	; 253
    1c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c70:	10 86       	std	Z+8, r1	; 0x08
    1c72:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1c76:	e1 99       	sbic	0x1c, 1	; 28
    1c78:	fe cf       	rjmp	.-4      	; 0x1c76 <Isb_App_Exec+0x10c8>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1c7a:	4f 89       	ldd	r20, Y+23	; 0x17
    1c7c:	58 8d       	ldd	r21, Y+24	; 0x18
    1c7e:	48 0f       	add	r20, r24
    1c80:	51 1d       	adc	r21, r1
    1c82:	5f bb       	out	0x1f, r21	; 31
    1c84:	4e bb       	out	0x1e, r20	; 30
#endif
    EECR |= (1 << EERE);
    1c86:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1c88:	8d b3       	in	r24, 0x1d	; 29
							#endif /* ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION == TRUE */
							#if ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION == TRUE
								Isb_App_DigOut[AppIndex].Cfg3 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg3);
    1c8a:	a8 ad       	ldd	r26, Y+56	; 0x38
    1c8c:	b9 ad       	ldd	r27, Y+57	; 0x39
    1c8e:	19 96       	adiw	r26, 0x09	; 9
    1c90:	8c 93       	st	X, r24
    1c92:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1c96:	e1 99       	sbic	0x1c, 1	; 28
    1c98:	fe cf       	rjmp	.-4      	; 0x1c96 <Isb_App_Exec+0x10e8>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1c9a:	ed 89       	ldd	r30, Y+21	; 0x15
    1c9c:	fe 89       	ldd	r31, Y+22	; 0x16
    1c9e:	e8 0f       	add	r30, r24
    1ca0:	f1 1d       	adc	r31, r1
    1ca2:	ff bb       	out	0x1f, r31	; 31
    1ca4:	ee bb       	out	0x1e, r30	; 30
#endif
    EECR |= (1 << EERE);
    1ca6:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1ca8:	8d b3       	in	r24, 0x1d	; 29
								Isb_App_DigOut[AppIndex].Cfg4 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg4);
    1caa:	a8 ad       	ldd	r26, Y+56	; 0x38
    1cac:	b9 ad       	ldd	r27, Y+57	; 0x39
    1cae:	1a 96       	adiw	r26, 0x0a	; 10
    1cb0:	8c 93       	st	X, r24
    1cb2:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1cb6:	e1 99       	sbic	0x1c, 1	; 28
    1cb8:	fe cf       	rjmp	.-4      	; 0x1cb6 <Isb_App_Exec+0x1108>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1cba:	eb 89       	ldd	r30, Y+19	; 0x13
    1cbc:	fc 89       	ldd	r31, Y+20	; 0x14
    1cbe:	e8 0f       	add	r30, r24
    1cc0:	f1 1d       	adc	r31, r1
    1cc2:	ff bb       	out	0x1f, r31	; 31
    1cc4:	ee bb       	out	0x1e, r30	; 30
#endif
    EECR |= (1 << EERE);
    1cc6:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1cc8:	8d b3       	in	r24, 0x1d	; 29
								Isb_App_DigOut[AppIndex].Cfg5 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg5);
    1cca:	a8 ad       	ldd	r26, Y+56	; 0x38
    1ccc:	b9 ad       	ldd	r27, Y+57	; 0x39
    1cce:	1b 96       	adiw	r26, 0x0b	; 11
    1cd0:	8c 93       	st	X, r24
    1cd2:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1cd6:	e1 99       	sbic	0x1c, 1	; 28
    1cd8:	fe cf       	rjmp	.-4      	; 0x1cd6 <Isb_App_Exec+0x1128>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1cda:	e9 89       	ldd	r30, Y+17	; 0x11
    1cdc:	fa 89       	ldd	r31, Y+18	; 0x12
    1cde:	e8 0f       	add	r30, r24
    1ce0:	f1 1d       	adc	r31, r1
    1ce2:	ff bb       	out	0x1f, r31	; 31
    1ce4:	ee bb       	out	0x1e, r30	; 30
#endif
    EECR |= (1 << EERE);
    1ce6:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1ce8:	8d b3       	in	r24, 0x1d	; 29
								Isb_App_DigOut[AppIndex].Cfg6 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg6);
    1cea:	a8 ad       	ldd	r26, Y+56	; 0x38
    1cec:	b9 ad       	ldd	r27, Y+57	; 0x39
    1cee:	1c 96       	adiw	r26, 0x0c	; 12
    1cf0:	8c 93       	st	X, r24
    1cf2:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1cf6:	e1 99       	sbic	0x1c, 1	; 28
    1cf8:	fe cf       	rjmp	.-4      	; 0x1cf6 <Isb_App_Exec+0x1148>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1cfa:	ef 85       	ldd	r30, Y+15	; 0x0f
    1cfc:	f8 89       	ldd	r31, Y+16	; 0x10
    1cfe:	e8 0f       	add	r30, r24
    1d00:	f1 1d       	adc	r31, r1
    1d02:	ff bb       	out	0x1f, r31	; 31
    1d04:	ee bb       	out	0x1e, r30	; 30
#endif
    EECR |= (1 << EERE);
    1d06:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1d08:	8d b3       	in	r24, 0x1d	; 29
								Isb_App_DigOut[AppIndex].Cfg7 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg7);
    1d0a:	a8 ad       	ldd	r26, Y+56	; 0x38
    1d0c:	b9 ad       	ldd	r27, Y+57	; 0x39
    1d0e:	1d 96       	adiw	r26, 0x0d	; 13
    1d10:	8c 93       	st	X, r24
    1d12:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1d16:	e1 99       	sbic	0x1c, 1	; 28
    1d18:	fe cf       	rjmp	.-4      	; 0x1d16 <Isb_App_Exec+0x1168>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1d1a:	ed 85       	ldd	r30, Y+13	; 0x0d
    1d1c:	fe 85       	ldd	r31, Y+14	; 0x0e
    1d1e:	e8 0f       	add	r30, r24
    1d20:	f1 1d       	adc	r31, r1
    1d22:	ff bb       	out	0x1f, r31	; 31
    1d24:	ee bb       	out	0x1e, r30	; 30
#endif
    EECR |= (1 << EERE);
    1d26:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1d28:	8d b3       	in	r24, 0x1d	; 29
								Isb_App_DigOut[AppIndex].Cfg8 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg8);
    1d2a:	a8 ad       	ldd	r26, Y+56	; 0x38
    1d2c:	b9 ad       	ldd	r27, Y+57	; 0x39
    1d2e:	1e 96       	adiw	r26, 0x0e	; 14
    1d30:	8c 93       	st	X, r24
    1d32:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1d36:	e1 99       	sbic	0x1c, 1	; 28
    1d38:	fe cf       	rjmp	.-4      	; 0x1d36 <Isb_App_Exec+0x1188>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1d3a:	eb 85       	ldd	r30, Y+11	; 0x0b
    1d3c:	fc 85       	ldd	r31, Y+12	; 0x0c
    1d3e:	e8 0f       	add	r30, r24
    1d40:	f1 1d       	adc	r31, r1
    1d42:	ff bb       	out	0x1f, r31	; 31
    1d44:	ee bb       	out	0x1e, r30	; 30
#endif
    EECR |= (1 << EERE);
    1d46:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1d48:	8d b3       	in	r24, 0x1d	; 29
								Isb_App_DigOut[AppIndex].Cfg9 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg9);
    1d4a:	a8 ad       	ldd	r26, Y+56	; 0x38
    1d4c:	b9 ad       	ldd	r27, Y+57	; 0x39
    1d4e:	1f 96       	adiw	r26, 0x0f	; 15
    1d50:	8c 93       	st	X, r24
    1d52:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1d56:	e1 99       	sbic	0x1c, 1	; 28
    1d58:	fe cf       	rjmp	.-4      	; 0x1d56 <Isb_App_Exec+0x11a8>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1d5a:	e9 85       	ldd	r30, Y+9	; 0x09
    1d5c:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d5e:	e8 0f       	add	r30, r24
    1d60:	f1 1d       	adc	r31, r1
    1d62:	ff bb       	out	0x1f, r31	; 31
    1d64:	ee bb       	out	0x1e, r30	; 30
#endif
    EECR |= (1 << EERE);
    1d66:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1d68:	8d b3       	in	r24, 0x1d	; 29
							#endif /* ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION == TRUE */
							#if ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE
								Isb_App_DigOut[AppIndex].Cfg10 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg10);
    1d6a:	a8 ad       	ldd	r26, Y+56	; 0x38
    1d6c:	b9 ad       	ldd	r27, Y+57	; 0x39
    1d6e:	5a 96       	adiw	r26, 0x1a	; 26
    1d70:	8c 93       	st	X, r24
								Isb_Obj[Obj_3].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_3_Ctrl);
    1d72:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1d74:	4b 2f       	mov	r20, r27
    1d76:	50 e0       	ldi	r21, 0x00	; 0
    1d78:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1d7c:	e1 99       	sbic	0x1c, 1	; 28
    1d7e:	fe cf       	rjmp	.-4      	; 0x1d7c <Isb_App_Exec+0x11ce>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1d80:	ef 81       	ldd	r30, Y+7	; 0x07
    1d82:	f8 85       	ldd	r31, Y+8	; 0x08
    1d84:	e8 0f       	add	r30, r24
    1d86:	f1 1d       	adc	r31, r1
    1d88:	ff bb       	out	0x1f, r31	; 31
    1d8a:	ee bb       	out	0x1e, r30	; 30
#endif
    EECR |= (1 << EERE);
    1d8c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1d8e:	8d b3       	in	r24, 0x1d	; 29
    1d90:	fa 01       	movw	r30, r20
    1d92:	93 e0       	ldi	r25, 0x03	; 3
    1d94:	ee 0f       	add	r30, r30
    1d96:	ff 1f       	adc	r31, r31
    1d98:	9a 95       	dec	r25
    1d9a:	e1 f7       	brne	.-8      	; 0x1d94 <Isb_App_Exec+0x11e6>
    1d9c:	e4 0f       	add	r30, r20
    1d9e:	f5 1f       	adc	r31, r21
    1da0:	ed 5f       	subi	r30, 0xFD	; 253
    1da2:	fe 4f       	sbci	r31, 0xFE	; 254
    1da4:	80 83       	st	Z, r24
								Isb_Obj[Obj_3].Top = ISB_MSG_TOP_1BIT;
    1da6:	21 e0       	ldi	r18, 0x01	; 1
    1da8:	21 83       	std	Z+1, r18	; 0x01
    1daa:	80 91 a7 00 	lds	r24, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1dae:	e1 99       	sbic	0x1c, 1	; 28
    1db0:	fe cf       	rjmp	.-4      	; 0x1dae <Isb_App_Exec+0x1200>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1db2:	ad 81       	ldd	r26, Y+5	; 0x05
    1db4:	be 81       	ldd	r27, Y+6	; 0x06
    1db6:	a8 0f       	add	r26, r24
    1db8:	b1 1d       	adc	r27, r1
    1dba:	bf bb       	out	0x1f, r27	; 31
    1dbc:	ae bb       	out	0x1e, r26	; 30
#endif
    EECR |= (1 << EERE);
    1dbe:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1dc0:	8d b3       	in	r24, 0x1d	; 29
								Isb_Obj[Obj_3].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_3_Tov);
    1dc2:	9a 01       	movw	r18, r20
    1dc4:	03 e0       	ldi	r16, 0x03	; 3
    1dc6:	22 0f       	add	r18, r18
    1dc8:	33 1f       	adc	r19, r19
    1dca:	0a 95       	dec	r16
    1dcc:	e1 f7       	brne	.-8      	; 0x1dc6 <Isb_App_Exec+0x1218>
    1dce:	24 0f       	add	r18, r20
    1dd0:	35 1f       	adc	r19, r21
    1dd2:	f9 01       	movw	r30, r18
    1dd4:	ed 5f       	subi	r30, 0xFD	; 253
    1dd6:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd8:	82 83       	std	Z+2, r24	; 0x02
    1dda:	f9 01       	movw	r30, r18
    1ddc:	ea 5f       	subi	r30, 0xFA	; 250
    1dde:	fe 4f       	sbci	r31, 0xFE	; 254
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	60 91 a7 00 	lds	r22, 0x00A7
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1de8:	e1 99       	sbic	0x1c, 1	; 28
    1dea:	fe cf       	rjmp	.-4      	; 0x1de8 <Isb_App_Exec+0x123a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	9c 81       	ldd	r25, Y+4	; 0x04
    1df0:	82 0f       	add	r24, r18
    1df2:	93 1f       	adc	r25, r19
    1df4:	86 0f       	add	r24, r22
    1df6:	91 1d       	adc	r25, r1
    1df8:	9f bb       	out	0x1f, r25	; 31
    1dfa:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    1dfc:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    1dfe:	8d b3       	in	r24, 0x1d	; 29
								for (uint8_t i = 0; i < 5; i++)
								{
									Isb_Obj[Obj_3].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_3_InitValue + i));
    1e00:	81 93       	st	Z+, r24
    1e02:	2f 5f       	subi	r18, 0xFF	; 255
    1e04:	3f 4f       	sbci	r19, 0xFF	; 255
							#if ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE
								Isb_App_DigOut[AppIndex].Cfg10 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg10);
								Isb_Obj[Obj_3].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_3_Ctrl);
								Isb_Obj[Obj_3].Top = ISB_MSG_TOP_1BIT;
								Isb_Obj[Obj_3].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_3_Tov);
								for (uint8_t i = 0; i < 5; i++)
    1e06:	25 30       	cpi	r18, 0x05	; 5
    1e08:	31 05       	cpc	r19, r1
    1e0a:	61 f7       	brne	.-40     	; 0x1de4 <Isb_App_Exec+0x1236>
								{
									Isb_Obj[Obj_3].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_3_InitValue + i));
								}
								Isb_Obj[Obj_3].IsChanged = FALSE;
    1e0c:	fa 01       	movw	r30, r20
    1e0e:	13 e0       	ldi	r17, 0x03	; 3
    1e10:	ee 0f       	add	r30, r30
    1e12:	ff 1f       	adc	r31, r31
    1e14:	1a 95       	dec	r17
    1e16:	e1 f7       	brne	.-8      	; 0x1e10 <Isb_App_Exec+0x1262>
    1e18:	e4 0f       	add	r30, r20
    1e1a:	f5 1f       	adc	r31, r21
    1e1c:	ed 5f       	subi	r30, 0xFD	; 253
    1e1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e20:	10 86       	std	Z+8, r1	; 0x08
							#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
						}
						Isb_Ch[Ch].Ctrl |= (1<<ISB_CH_CTRL_INITIALIZED);
    1e22:	ea a9       	ldd	r30, Y+50	; 0x32
    1e24:	fb a9       	ldd	r31, Y+51	; 0x33
    1e26:	ee 0f       	add	r30, r30
    1e28:	ff 1f       	adc	r31, r31
    1e2a:	ed 54       	subi	r30, 0x4D	; 77
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	80 81       	ld	r24, Z
    1e30:	91 81       	ldd	r25, Z+1	; 0x01
    1e32:	80 64       	ori	r24, 0x40	; 64
    1e34:	91 83       	std	Z+1, r25	; 0x01
    1e36:	80 83       	st	Z, r24
					}
					// Exec
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED))
    1e38:	e8 a9       	ldd	r30, Y+48	; 0x30
    1e3a:	f9 a9       	ldd	r31, Y+49	; 0x31
    1e3c:	80 81       	ld	r24, Z
    1e3e:	80 ff       	sbrs	r24, 0
    1e40:	f4 c3       	rjmp	.+2024   	; 0x262a <Isb_App_Exec+0x1a7c>
					{
						uint8_t Value = Isb_App_DigOut[AppIndex].Value;
						uint8_t IsChanged = Isb_App_DigOut[AppIndex].IsChanged;
						// Logikfunktion
						#if ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION == TRUE
							switch (Isb_App_DigOut[AppIndex].Cfg2 & ISB_APP_DIGOUT_CFG2_LOGIC_MODE_MASK)
    1e42:	a8 ad       	ldd	r26, Y+56	; 0x38
    1e44:	b9 ad       	ldd	r27, Y+57	; 0x39
    1e46:	16 96       	adiw	r26, 0x06	; 6
    1e48:	8c 91       	ld	r24, X
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	87 70       	andi	r24, 0x07	; 7
    1e4e:	90 70       	andi	r25, 0x00	; 0
    1e50:	81 30       	cpi	r24, 0x01	; 1
    1e52:	91 05       	cpc	r25, r1
    1e54:	39 f0       	breq	.+14     	; 0x1e64 <Isb_App_Exec+0x12b6>
    1e56:	ba a1       	ldd	r27, Y+34	; 0x22
    1e58:	2b 2f       	mov	r18, r27
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	02 97       	sbiw	r24, 0x02	; 2
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <Isb_App_Exec+0x12b4>
    1e60:	62 c0       	rjmp	.+196    	; 0x1f26 <Isb_App_Exec+0x1378>
    1e62:	14 c0       	rjmp	.+40     	; 0x1e8c <Isb_App_Exec+0x12de>
							{
								#if ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION_AND == TRUE
									case ISB_APP_DIGOUT_CFG2_LOGIC_MODE_AND:
										if ((Isb_Obj[Obj_0].Data[0] != FALSE) & (Isb_Obj[Obj_2].Data[0] != FALSE))
    1e64:	ea a1       	ldd	r30, Y+34	; 0x22
    1e66:	2e 2f       	mov	r18, r30
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	f8 a1       	ldd	r31, Y+32	; 0x20
    1e6c:	4f 2f       	mov	r20, r31
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
    1e70:	f9 01       	movw	r30, r18
    1e72:	a3 e0       	ldi	r26, 0x03	; 3
    1e74:	ee 0f       	add	r30, r30
    1e76:	ff 1f       	adc	r31, r31
    1e78:	aa 95       	dec	r26
    1e7a:	e1 f7       	brne	.-8      	; 0x1e74 <Isb_App_Exec+0x12c6>
    1e7c:	e2 0f       	add	r30, r18
    1e7e:	f3 1f       	adc	r31, r19
    1e80:	ed 5f       	subi	r30, 0xFD	; 253
    1e82:	fe 4f       	sbci	r31, 0xFE	; 254
    1e84:	83 81       	ldd	r24, Z+3	; 0x03
    1e86:	88 23       	and	r24, r24
    1e88:	69 f1       	breq	.+90     	; 0x1ee4 <Isb_App_Exec+0x1336>
    1e8a:	10 c0       	rjmp	.+32     	; 0x1eac <Isb_App_Exec+0x12fe>
										Isb_Obj[Obj_2].IsChanged = FALSE;
										break;
								#endif /* ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION_AND == TRUE */
								#if ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION_OR == TRUE
									case ISB_APP_DIGOUT_CFG2_LOGIC_MODE_OR:
										if ((Isb_Obj[Obj_0].Data[0] != FALSE) | (Isb_Obj[Obj_2].Data[0] != FALSE))
    1e8c:	f8 a1       	ldd	r31, Y+32	; 0x20
    1e8e:	4f 2f       	mov	r20, r31
    1e90:	50 e0       	ldi	r21, 0x00	; 0
    1e92:	f9 01       	movw	r30, r18
    1e94:	73 e0       	ldi	r23, 0x03	; 3
    1e96:	ee 0f       	add	r30, r30
    1e98:	ff 1f       	adc	r31, r31
    1e9a:	7a 95       	dec	r23
    1e9c:	e1 f7       	brne	.-8      	; 0x1e96 <Isb_App_Exec+0x12e8>
    1e9e:	e2 0f       	add	r30, r18
    1ea0:	f3 1f       	adc	r31, r19
    1ea2:	ed 5f       	subi	r30, 0xFD	; 253
    1ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea6:	83 81       	ldd	r24, Z+3	; 0x03
    1ea8:	88 23       	and	r24, r24
    1eaa:	69 f4       	brne	.+26     	; 0x1ec6 <Isb_App_Exec+0x1318>
    1eac:	fa 01       	movw	r30, r20
    1eae:	63 e0       	ldi	r22, 0x03	; 3
    1eb0:	ee 0f       	add	r30, r30
    1eb2:	ff 1f       	adc	r31, r31
    1eb4:	6a 95       	dec	r22
    1eb6:	e1 f7       	brne	.-8      	; 0x1eb0 <Isb_App_Exec+0x1302>
    1eb8:	e4 0f       	add	r30, r20
    1eba:	f5 1f       	adc	r31, r21
    1ebc:	ed 5f       	subi	r30, 0xFD	; 253
    1ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    1ec0:	83 81       	ldd	r24, Z+3	; 0x03
    1ec2:	88 23       	and	r24, r24
    1ec4:	79 f0       	breq	.+30     	; 0x1ee4 <Isb_App_Exec+0x1336>
										{
											if (Isb_App_DigOut[AppIndex].LogicValue != TRUE)
    1ec6:	a8 ad       	ldd	r26, Y+56	; 0x38
    1ec8:	b9 ad       	ldd	r27, Y+57	; 0x39
    1eca:	17 96       	adiw	r26, 0x07	; 7
    1ecc:	8c 91       	ld	r24, X
    1ece:	17 97       	sbiw	r26, 0x07	; 7
    1ed0:	81 30       	cpi	r24, 0x01	; 1
    1ed2:	a9 f0       	breq	.+42     	; 0x1efe <Isb_App_Exec+0x1350>
											{
												Isb_App_DigOut[AppIndex].LogicValue = TRUE;
    1ed4:	e1 e0       	ldi	r30, 0x01	; 1
    1ed6:	17 96       	adiw	r26, 0x07	; 7
    1ed8:	ec 93       	st	X, r30
    1eda:	17 97       	sbiw	r26, 0x07	; 7
												Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
    1edc:	f1 e0       	ldi	r31, 0x01	; 1
    1ede:	18 96       	adiw	r26, 0x08	; 8
    1ee0:	fc 93       	st	X, r31
    1ee2:	0d c0       	rjmp	.+26     	; 0x1efe <Isb_App_Exec+0x1350>
											}
										}
										else
										{
											if (Isb_App_DigOut[AppIndex].LogicValue != FALSE)
    1ee4:	a8 ad       	ldd	r26, Y+56	; 0x38
    1ee6:	b9 ad       	ldd	r27, Y+57	; 0x39
    1ee8:	17 96       	adiw	r26, 0x07	; 7
    1eea:	8c 91       	ld	r24, X
    1eec:	17 97       	sbiw	r26, 0x07	; 7
    1eee:	88 23       	and	r24, r24
    1ef0:	31 f0       	breq	.+12     	; 0x1efe <Isb_App_Exec+0x1350>
											{
												Isb_App_DigOut[AppIndex].LogicValue = FALSE;
    1ef2:	17 96       	adiw	r26, 0x07	; 7
    1ef4:	1c 92       	st	X, r1
    1ef6:	17 97       	sbiw	r26, 0x07	; 7
												Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
    1ef8:	e1 e0       	ldi	r30, 0x01	; 1
    1efa:	18 96       	adiw	r26, 0x08	; 8
    1efc:	ec 93       	st	X, r30
											}
										}
										Isb_Obj[Obj_0].IsChanged = FALSE;
    1efe:	f9 01       	movw	r30, r18
    1f00:	93 e0       	ldi	r25, 0x03	; 3
    1f02:	ee 0f       	add	r30, r30
    1f04:	ff 1f       	adc	r31, r31
    1f06:	9a 95       	dec	r25
    1f08:	e1 f7       	brne	.-8      	; 0x1f02 <Isb_App_Exec+0x1354>
    1f0a:	e2 0f       	add	r30, r18
    1f0c:	f3 1f       	adc	r31, r19
    1f0e:	ed 5f       	subi	r30, 0xFD	; 253
    1f10:	fe 4f       	sbci	r31, 0xFE	; 254
    1f12:	10 86       	std	Z+8, r1	; 0x08
										Isb_Obj[Obj_2].IsChanged = FALSE;
    1f14:	fa 01       	movw	r30, r20
    1f16:	83 e0       	ldi	r24, 0x03	; 3
    1f18:	ee 0f       	add	r30, r30
    1f1a:	ff 1f       	adc	r31, r31
    1f1c:	8a 95       	dec	r24
    1f1e:	e1 f7       	brne	.-8      	; 0x1f18 <Isb_App_Exec+0x136a>
    1f20:	e4 0f       	add	r30, r20
    1f22:	f5 1f       	adc	r31, r21
    1f24:	20 c0       	rjmp	.+64     	; 0x1f66 <Isb_App_Exec+0x13b8>
										break;
								#endif /* ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION_OR == TRUE */
								default:
									if (Isb_App_DigOut[AppIndex].LogicValue != Isb_Obj[Obj_0].Data[0])
    1f26:	f9 01       	movw	r30, r18
    1f28:	03 e0       	ldi	r16, 0x03	; 3
    1f2a:	ee 0f       	add	r30, r30
    1f2c:	ff 1f       	adc	r31, r31
    1f2e:	0a 95       	dec	r16
    1f30:	e1 f7       	brne	.-8      	; 0x1f2a <Isb_App_Exec+0x137c>
    1f32:	e2 0f       	add	r30, r18
    1f34:	f3 1f       	adc	r31, r19
    1f36:	ed 5f       	subi	r30, 0xFD	; 253
    1f38:	fe 4f       	sbci	r31, 0xFE	; 254
    1f3a:	93 81       	ldd	r25, Z+3	; 0x03
    1f3c:	a8 ad       	ldd	r26, Y+56	; 0x38
    1f3e:	b9 ad       	ldd	r27, Y+57	; 0x39
    1f40:	17 96       	adiw	r26, 0x07	; 7
    1f42:	8c 91       	ld	r24, X
    1f44:	17 97       	sbiw	r26, 0x07	; 7
    1f46:	89 17       	cp	r24, r25
    1f48:	31 f0       	breq	.+12     	; 0x1f56 <Isb_App_Exec+0x13a8>
									{
										Isb_App_DigOut[AppIndex].LogicValue = Isb_Obj[Obj_0].Data[0];
    1f4a:	17 96       	adiw	r26, 0x07	; 7
    1f4c:	9c 93       	st	X, r25
    1f4e:	17 97       	sbiw	r26, 0x07	; 7
										Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
    1f50:	e1 e0       	ldi	r30, 0x01	; 1
    1f52:	18 96       	adiw	r26, 0x08	; 8
    1f54:	ec 93       	st	X, r30
									}
									Isb_Obj[Obj_0].IsChanged = FALSE;
    1f56:	f9 01       	movw	r30, r18
    1f58:	13 e0       	ldi	r17, 0x03	; 3
    1f5a:	ee 0f       	add	r30, r30
    1f5c:	ff 1f       	adc	r31, r31
    1f5e:	1a 95       	dec	r17
    1f60:	e1 f7       	brne	.-8      	; 0x1f5a <Isb_App_Exec+0x13ac>
    1f62:	e2 0f       	add	r30, r18
    1f64:	f3 1f       	adc	r31, r19
    1f66:	ed 5f       	subi	r30, 0xFD	; 253
    1f68:	fe 4f       	sbci	r31, 0xFE	; 254
    1f6a:	10 86       	std	Z+8, r1	; 0x08
									break;
							}
							Value = Isb_App_DigOut[AppIndex].LogicValue;
    1f6c:	a8 ad       	ldd	r26, Y+56	; 0x38
    1f6e:	b9 ad       	ldd	r27, Y+57	; 0x39
    1f70:	17 96       	adiw	r26, 0x07	; 7
    1f72:	1c 91       	ld	r17, X
    1f74:	17 97       	sbiw	r26, 0x07	; 7
							IsChanged = Isb_App_DigOut[AppIndex].LogicIsChanged;
    1f76:	18 96       	adiw	r26, 0x08	; 8
    1f78:	0c 91       	ld	r16, X
    1f7a:	18 97       	sbiw	r26, 0x08	; 8
							}
							Isb_Obj[Obj_0].IsChanged = FALSE;
						#endif /* ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION == TRUE */
						// Zeitfunktion
						#if ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION == TRUE
							switch (Isb_App_DigOut[AppIndex].Cfg3 & ISB_APP_DIGOUT_CFG3_TIME_MODE_MASK)
    1f7c:	19 96       	adiw	r26, 0x09	; 9
    1f7e:	8c 91       	ld	r24, X
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	83 70       	andi	r24, 0x03	; 3
    1f84:	90 70       	andi	r25, 0x00	; 0
    1f86:	81 30       	cpi	r24, 0x01	; 1
    1f88:	91 05       	cpc	r25, r1
    1f8a:	21 f0       	breq	.+8      	; 0x1f94 <Isb_App_Exec+0x13e6>
    1f8c:	02 97       	sbiw	r24, 0x02	; 2
    1f8e:	09 f0       	breq	.+2      	; 0x1f92 <Isb_App_Exec+0x13e4>
    1f90:	35 c1       	rjmp	.+618    	; 0x21fc <Isb_App_Exec+0x164e>
    1f92:	70 c0       	rjmp	.+224    	; 0x2074 <Isb_App_Exec+0x14c6>
							{
								#if ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION_POWERUPDELAY == TRUE | ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION_POWERDOWNDELAY == TRUE
									case ISB_APP_DIGOUT_CFG3_TIME_MODE_DELAY:
										#if ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION_POWERUPDELAY == TRUE
											if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg3, ISB_APP_DIGOUT_CFG3_TIME_POWERUPDELAY_ENABLED))
    1f94:	8c e1       	ldi	r24, 0x1C	; 28
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	c8 9e       	mul	r12, r24
    1f9a:	b0 01       	movw	r22, r0
    1f9c:	c9 9e       	mul	r12, r25
    1f9e:	70 0d       	add	r23, r0
    1fa0:	d8 9e       	mul	r13, r24
    1fa2:	70 0d       	add	r23, r0
    1fa4:	11 24       	eor	r1, r1
    1fa6:	6c 52       	subi	r22, 0x2C	; 44
    1fa8:	7f 4f       	sbci	r23, 0xFF	; 255
    1faa:	fb 01       	movw	r30, r22
    1fac:	80 81       	ld	r24, Z
    1fae:	82 ff       	sbrs	r24, 2
    1fb0:	46 c0       	rjmp	.+140    	; 0x203e <Isb_App_Exec+0x1490>
											{
												if (Value == TRUE)
    1fb2:	11 30       	cpi	r17, 0x01	; 1
    1fb4:	99 f4       	brne	.+38     	; 0x1fdc <Isb_App_Exec+0x142e>
												{
													if (Isb_App_DigOut[AppIndex].TimeOnCount != 0)
    1fb6:	e8 ad       	ldd	r30, Y+56	; 0x38
    1fb8:	f9 ad       	ldd	r31, Y+57	; 0x39
    1fba:	80 89       	ldd	r24, Z+16	; 0x10
    1fbc:	91 89       	ldd	r25, Z+17	; 0x11
    1fbe:	a2 89       	ldd	r26, Z+18	; 0x12
    1fc0:	b3 89       	ldd	r27, Z+19	; 0x13
    1fc2:	00 97       	sbiw	r24, 0x00	; 0
    1fc4:	a1 05       	cpc	r26, r1
    1fc6:	b1 05       	cpc	r27, r1
    1fc8:	d1 f1       	breq	.+116    	; 0x203e <Isb_App_Exec+0x1490>
													{
														Isb_App_DigOut[AppIndex].TimeOnCount--;
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	a1 09       	sbc	r26, r1
    1fce:	b1 09       	sbc	r27, r1
    1fd0:	80 8b       	std	Z+16, r24	; 0x10
    1fd2:	91 8b       	std	Z+17, r25	; 0x11
    1fd4:	a2 8b       	std	Z+18, r26	; 0x12
    1fd6:	b3 8b       	std	Z+19, r27	; 0x13
    1fd8:	10 e0       	ldi	r17, 0x00	; 0
    1fda:	31 c0       	rjmp	.+98     	; 0x203e <Isb_App_Exec+0x1490>
														Value = FALSE;
													}
												}
												else
												{
													Isb_App_DigOut[AppIndex].TimeOnCount = (Isb_App_DigOut[AppIndex].Cfg4 + Isb_App_DigOut[AppIndex].Cfg5 * 60 + Isb_App_DigOut[AppIndex].Cfg6 * 60 * 60) * 1000 / ISB_APP_DIGOUT_EXECTIME;
    1fdc:	a8 ad       	ldd	r26, Y+56	; 0x38
    1fde:	b9 ad       	ldd	r27, Y+57	; 0x39
    1fe0:	1c 96       	adiw	r26, 0x0c	; 12
    1fe2:	8c 91       	ld	r24, X
    1fe4:	1c 97       	sbiw	r26, 0x0c	; 12
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	20 e1       	ldi	r18, 0x10	; 16
    1fea:	3e e0       	ldi	r19, 0x0E	; 14
    1fec:	f9 01       	movw	r30, r18
    1fee:	8e 9f       	mul	r24, r30
    1ff0:	90 01       	movw	r18, r0
    1ff2:	8f 9f       	mul	r24, r31
    1ff4:	30 0d       	add	r19, r0
    1ff6:	9e 9f       	mul	r25, r30
    1ff8:	30 0d       	add	r19, r0
    1ffa:	11 24       	eor	r1, r1
    1ffc:	1b 96       	adiw	r26, 0x0b	; 11
    1ffe:	8c 91       	ld	r24, X
    2000:	1b 97       	sbiw	r26, 0x0b	; 11
    2002:	4c e3       	ldi	r20, 0x3C	; 60
    2004:	84 9f       	mul	r24, r20
    2006:	c0 01       	movw	r24, r0
    2008:	11 24       	eor	r1, r1
    200a:	28 0f       	add	r18, r24
    200c:	39 1f       	adc	r19, r25
    200e:	1a 96       	adiw	r26, 0x0a	; 10
    2010:	8c 91       	ld	r24, X
    2012:	28 0f       	add	r18, r24
    2014:	31 1d       	adc	r19, r1
    2016:	84 e6       	ldi	r24, 0x64	; 100
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	ac 01       	movw	r20, r24
    201c:	24 9f       	mul	r18, r20
    201e:	c0 01       	movw	r24, r0
    2020:	25 9f       	mul	r18, r21
    2022:	90 0d       	add	r25, r0
    2024:	34 9f       	mul	r19, r20
    2026:	90 0d       	add	r25, r0
    2028:	11 24       	eor	r1, r1
    202a:	aa 27       	eor	r26, r26
    202c:	97 fd       	sbrc	r25, 7
    202e:	a0 95       	com	r26
    2030:	ba 2f       	mov	r27, r26
    2032:	e8 ad       	ldd	r30, Y+56	; 0x38
    2034:	f9 ad       	ldd	r31, Y+57	; 0x39
    2036:	80 8b       	std	Z+16, r24	; 0x10
    2038:	91 8b       	std	Z+17, r25	; 0x11
    203a:	a2 8b       	std	Z+18, r26	; 0x12
    203c:	b3 8b       	std	Z+19, r27	; 0x13
												}
											}
										#endif /* ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION_POWERUPDELAY == TRUE */
										#if ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION_POWERDOWNDELAY == TRUE
											if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg3, ISB_APP_DIGOUT_CFG3_TIME_POWERDOWNDELAY_ENABLED))
    203e:	db 01       	movw	r26, r22
    2040:	8c 91       	ld	r24, X
    2042:	83 ff       	sbrs	r24, 3
    2044:	db c0       	rjmp	.+438    	; 0x21fc <Isb_App_Exec+0x164e>
											{
												if (Value == FALSE)
    2046:	11 23       	and	r17, r17
    2048:	09 f0       	breq	.+2      	; 0x204c <Isb_App_Exec+0x149e>
    204a:	a7 c0       	rjmp	.+334    	; 0x219a <Isb_App_Exec+0x15ec>
												{
													if (Isb_App_DigOut[AppIndex].TimeOffCount != 0)
    204c:	e8 ad       	ldd	r30, Y+56	; 0x38
    204e:	f9 ad       	ldd	r31, Y+57	; 0x39
    2050:	84 89       	ldd	r24, Z+20	; 0x14
    2052:	95 89       	ldd	r25, Z+21	; 0x15
    2054:	a6 89       	ldd	r26, Z+22	; 0x16
    2056:	b7 89       	ldd	r27, Z+23	; 0x17
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	a1 05       	cpc	r26, r1
    205c:	b1 05       	cpc	r27, r1
    205e:	09 f4       	brne	.+2      	; 0x2062 <Isb_App_Exec+0x14b4>
    2060:	cd c0       	rjmp	.+410    	; 0x21fc <Isb_App_Exec+0x164e>
													{
														Isb_App_DigOut[AppIndex].TimeOffCount--;
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	a1 09       	sbc	r26, r1
    2066:	b1 09       	sbc	r27, r1
    2068:	84 8b       	std	Z+20, r24	; 0x14
    206a:	95 8b       	std	Z+21, r25	; 0x15
    206c:	a6 8b       	std	Z+22, r26	; 0x16
    206e:	b7 8b       	std	Z+23, r27	; 0x17
    2070:	11 e0       	ldi	r17, 0x01	; 1
    2072:	c4 c0       	rjmp	.+392    	; 0x21fc <Isb_App_Exec+0x164e>
										#endif /* ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION_POWERDOWNDELAY == TRUE */
									break;
								#endif /* ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION_POWERUPDELAY == TRUE | ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION_POWERDOWNDELAY == TRUE */
								#if ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION_STAIRCASEFUNCTION == TRUE
									case ISB_APP_DIGOUT_CFG3_TIME_MODE_STAIRCASEFUNCTION:
										if (Value == FALSE)
    2074:	11 23       	and	r17, r17
    2076:	09 f0       	breq	.+2      	; 0x207a <Isb_App_Exec+0x14cc>
    2078:	90 c0       	rjmp	.+288    	; 0x219a <Isb_App_Exec+0x15ec>
										{
											if (Isb_App_DigOut[AppIndex].TimeOffCount != 0)
    207a:	e8 ad       	ldd	r30, Y+56	; 0x38
    207c:	f9 ad       	ldd	r31, Y+57	; 0x39
    207e:	84 89       	ldd	r24, Z+20	; 0x14
    2080:	95 89       	ldd	r25, Z+21	; 0x15
    2082:	a6 89       	ldd	r26, Z+22	; 0x16
    2084:	b7 89       	ldd	r27, Z+23	; 0x17
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	a1 05       	cpc	r26, r1
    208a:	b1 05       	cpc	r27, r1
    208c:	41 f0       	breq	.+16     	; 0x209e <Isb_App_Exec+0x14f0>
											{
												Isb_App_DigOut[AppIndex].TimeOffCount--;
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	a1 09       	sbc	r26, r1
    2092:	b1 09       	sbc	r27, r1
    2094:	84 8b       	std	Z+20, r24	; 0x14
    2096:	95 8b       	std	Z+21, r25	; 0x15
    2098:	a6 8b       	std	Z+22, r26	; 0x16
    209a:	b7 8b       	std	Z+23, r27	; 0x17
    209c:	11 e0       	ldi	r17, 0x01	; 1
												Value = TRUE;
											}
											if ((bit_is_set(Isb_App_DigOut[AppIndex].Cfg3, ISB_APP_DIGOUT_CFG3_TIME_RETRIGGER_ENABLED)) | (Isb_App_DigOut[AppIndex].TimeOnCount == 0))
    209e:	8c e1       	ldi	r24, 0x1C	; 28
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	c8 9e       	mul	r12, r24
    20a4:	f0 01       	movw	r30, r0
    20a6:	c9 9e       	mul	r12, r25
    20a8:	f0 0d       	add	r31, r0
    20aa:	d8 9e       	mul	r13, r24
    20ac:	f0 0d       	add	r31, r0
    20ae:	11 24       	eor	r1, r1
    20b0:	ec 52       	subi	r30, 0x2C	; 44
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	80 81       	ld	r24, Z
    20b6:	a8 ad       	ldd	r26, Y+56	; 0x38
    20b8:	b9 ad       	ldd	r27, Y+57	; 0x39
    20ba:	50 96       	adiw	r26, 0x10	; 16
    20bc:	4d 91       	ld	r20, X+
    20be:	5d 91       	ld	r21, X+
    20c0:	6d 91       	ld	r22, X+
    20c2:	7c 91       	ld	r23, X
    20c4:	53 97       	sbiw	r26, 0x13	; 19
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	84 70       	andi	r24, 0x04	; 4
    20ca:	90 70       	andi	r25, 0x00	; 0
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	41 15       	cp	r20, r1
    20d2:	51 05       	cpc	r21, r1
    20d4:	61 05       	cpc	r22, r1
    20d6:	71 05       	cpc	r23, r1
    20d8:	11 f4       	brne	.+4      	; 0x20de <Isb_App_Exec+0x1530>
    20da:	21 e0       	ldi	r18, 0x01	; 1
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	82 2b       	or	r24, r18
    20e0:	93 2b       	or	r25, r19
    20e2:	89 2b       	or	r24, r25
    20e4:	09 f4       	brne	.+2      	; 0x20e8 <Isb_App_Exec+0x153a>
    20e6:	8a c0       	rjmp	.+276    	; 0x21fc <Isb_App_Exec+0x164e>
											{
												if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg3, ISB_APP_DIGOUT_CFG3_TIME_PUMP_ENABLED))
    20e8:	80 81       	ld	r24, Z
    20ea:	e8 ad       	ldd	r30, Y+56	; 0x38
    20ec:	f9 ad       	ldd	r31, Y+57	; 0x39
    20ee:	24 85       	ldd	r18, Z+12	; 0x0c
    20f0:	e3 85       	ldd	r30, Z+11	; 0x0b
    20f2:	a8 ad       	ldd	r26, Y+56	; 0x38
    20f4:	b9 ad       	ldd	r27, Y+57	; 0x39
    20f6:	1a 96       	adiw	r26, 0x0a	; 10
    20f8:	fc 91       	ld	r31, X
    20fa:	83 ff       	sbrs	r24, 3
    20fc:	26 c0       	rjmp	.+76     	; 0x214a <Isb_App_Exec+0x159c>
												{
													Isb_App_DigOut[AppIndex].TimeOnCount += (Isb_App_DigOut[AppIndex].Cfg4 + Isb_App_DigOut[AppIndex].Cfg5 * 60 + Isb_App_DigOut[AppIndex].Cfg6 * 60 * 60) * 1000 / ISB_APP_DIGOUT_EXECTIME;
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	80 e1       	ldi	r24, 0x10	; 16
    2102:	9e e0       	ldi	r25, 0x0E	; 14
    2104:	d9 01       	movw	r26, r18
    2106:	a8 9f       	mul	r26, r24
    2108:	90 01       	movw	r18, r0
    210a:	a9 9f       	mul	r26, r25
    210c:	30 0d       	add	r19, r0
    210e:	b8 9f       	mul	r27, r24
    2110:	30 0d       	add	r19, r0
    2112:	11 24       	eor	r1, r1
    2114:	8c e3       	ldi	r24, 0x3C	; 60
    2116:	e8 9f       	mul	r30, r24
    2118:	c0 01       	movw	r24, r0
    211a:	11 24       	eor	r1, r1
    211c:	28 0f       	add	r18, r24
    211e:	39 1f       	adc	r19, r25
    2120:	2f 0f       	add	r18, r31
    2122:	31 1d       	adc	r19, r1
    2124:	84 e6       	ldi	r24, 0x64	; 100
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	fc 01       	movw	r30, r24
    212a:	2e 9f       	mul	r18, r30
    212c:	c0 01       	movw	r24, r0
    212e:	2f 9f       	mul	r18, r31
    2130:	90 0d       	add	r25, r0
    2132:	3e 9f       	mul	r19, r30
    2134:	90 0d       	add	r25, r0
    2136:	11 24       	eor	r1, r1
    2138:	aa 27       	eor	r26, r26
    213a:	97 fd       	sbrc	r25, 7
    213c:	a0 95       	com	r26
    213e:	ba 2f       	mov	r27, r26
    2140:	84 0f       	add	r24, r20
    2142:	95 1f       	adc	r25, r21
    2144:	a6 1f       	adc	r26, r22
    2146:	b7 1f       	adc	r27, r23
    2148:	21 c0       	rjmp	.+66     	; 0x218c <Isb_App_Exec+0x15de>
												}
												else
												{
													Isb_App_DigOut[AppIndex].TimeOnCount = (Isb_App_DigOut[AppIndex].Cfg4 + Isb_App_DigOut[AppIndex].Cfg5 * 60 + Isb_App_DigOut[AppIndex].Cfg6 * 60 * 60) * 1000 / ISB_APP_DIGOUT_EXECTIME;
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	80 e1       	ldi	r24, 0x10	; 16
    214e:	9e e0       	ldi	r25, 0x0E	; 14
    2150:	a9 01       	movw	r20, r18
    2152:	48 9f       	mul	r20, r24
    2154:	90 01       	movw	r18, r0
    2156:	49 9f       	mul	r20, r25
    2158:	30 0d       	add	r19, r0
    215a:	58 9f       	mul	r21, r24
    215c:	30 0d       	add	r19, r0
    215e:	11 24       	eor	r1, r1
    2160:	8c e3       	ldi	r24, 0x3C	; 60
    2162:	e8 9f       	mul	r30, r24
    2164:	c0 01       	movw	r24, r0
    2166:	11 24       	eor	r1, r1
    2168:	28 0f       	add	r18, r24
    216a:	39 1f       	adc	r19, r25
    216c:	2f 0f       	add	r18, r31
    216e:	31 1d       	adc	r19, r1
    2170:	84 e6       	ldi	r24, 0x64	; 100
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	dc 01       	movw	r26, r24
    2176:	2a 9f       	mul	r18, r26
    2178:	c0 01       	movw	r24, r0
    217a:	2b 9f       	mul	r18, r27
    217c:	90 0d       	add	r25, r0
    217e:	3a 9f       	mul	r19, r26
    2180:	90 0d       	add	r25, r0
    2182:	11 24       	eor	r1, r1
    2184:	aa 27       	eor	r26, r26
    2186:	97 fd       	sbrc	r25, 7
    2188:	a0 95       	com	r26
    218a:	ba 2f       	mov	r27, r26
    218c:	e8 ad       	ldd	r30, Y+56	; 0x38
    218e:	f9 ad       	ldd	r31, Y+57	; 0x39
    2190:	80 8b       	std	Z+16, r24	; 0x10
    2192:	91 8b       	std	Z+17, r25	; 0x11
    2194:	a2 8b       	std	Z+18, r26	; 0x12
    2196:	b3 8b       	std	Z+19, r27	; 0x13
    2198:	31 c0       	rjmp	.+98     	; 0x21fc <Isb_App_Exec+0x164e>
												}
											}
										}
										else
										{
											Isb_App_DigOut[AppIndex].TimeOffCount = (Isb_App_DigOut[AppIndex].Cfg7 + Isb_App_DigOut[AppIndex].Cfg8 * 60 + Isb_App_DigOut[AppIndex].Cfg9 * 60 * 60) * 1000 / ISB_APP_DIGOUT_EXECTIME;
    219a:	a8 ad       	ldd	r26, Y+56	; 0x38
    219c:	b9 ad       	ldd	r27, Y+57	; 0x39
    219e:	1f 96       	adiw	r26, 0x0f	; 15
    21a0:	8c 91       	ld	r24, X
    21a2:	1f 97       	sbiw	r26, 0x0f	; 15
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	20 e1       	ldi	r18, 0x10	; 16
    21a8:	3e e0       	ldi	r19, 0x0E	; 14
    21aa:	f9 01       	movw	r30, r18
    21ac:	8e 9f       	mul	r24, r30
    21ae:	90 01       	movw	r18, r0
    21b0:	8f 9f       	mul	r24, r31
    21b2:	30 0d       	add	r19, r0
    21b4:	9e 9f       	mul	r25, r30
    21b6:	30 0d       	add	r19, r0
    21b8:	11 24       	eor	r1, r1
    21ba:	1e 96       	adiw	r26, 0x0e	; 14
    21bc:	8c 91       	ld	r24, X
    21be:	1e 97       	sbiw	r26, 0x0e	; 14
    21c0:	4c e3       	ldi	r20, 0x3C	; 60
    21c2:	84 9f       	mul	r24, r20
    21c4:	c0 01       	movw	r24, r0
    21c6:	11 24       	eor	r1, r1
    21c8:	28 0f       	add	r18, r24
    21ca:	39 1f       	adc	r19, r25
    21cc:	1d 96       	adiw	r26, 0x0d	; 13
    21ce:	8c 91       	ld	r24, X
    21d0:	28 0f       	add	r18, r24
    21d2:	31 1d       	adc	r19, r1
    21d4:	84 e6       	ldi	r24, 0x64	; 100
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	ac 01       	movw	r20, r24
    21da:	24 9f       	mul	r18, r20
    21dc:	c0 01       	movw	r24, r0
    21de:	25 9f       	mul	r18, r21
    21e0:	90 0d       	add	r25, r0
    21e2:	34 9f       	mul	r19, r20
    21e4:	90 0d       	add	r25, r0
    21e6:	11 24       	eor	r1, r1
    21e8:	aa 27       	eor	r26, r26
    21ea:	97 fd       	sbrc	r25, 7
    21ec:	a0 95       	com	r26
    21ee:	ba 2f       	mov	r27, r26
    21f0:	e8 ad       	ldd	r30, Y+56	; 0x38
    21f2:	f9 ad       	ldd	r31, Y+57	; 0x39
    21f4:	84 8b       	std	Z+20, r24	; 0x14
    21f6:	95 8b       	std	Z+21, r25	; 0x15
    21f8:	a6 8b       	std	Z+22, r26	; 0x16
    21fa:	b7 8b       	std	Z+23, r27	; 0x17
										break;
								#endif /* ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION_STAIRCASEFUNCTION == TRUE */
								default:
									break;
							}
							if (Isb_App_DigOut[AppIndex].TimeValue != Value)
    21fc:	a8 ad       	ldd	r26, Y+56	; 0x38
    21fe:	b9 ad       	ldd	r27, Y+57	; 0x39
    2200:	58 96       	adiw	r26, 0x18	; 24
    2202:	8c 91       	ld	r24, X
    2204:	58 97       	sbiw	r26, 0x18	; 24
    2206:	81 17       	cp	r24, r17
    2208:	31 f0       	breq	.+12     	; 0x2216 <Isb_App_Exec+0x1668>
							{
								Isb_App_DigOut[AppIndex].TimeValue = Value;
    220a:	58 96       	adiw	r26, 0x18	; 24
    220c:	1c 93       	st	X, r17
    220e:	58 97       	sbiw	r26, 0x18	; 24
								Isb_App_DigOut[AppIndex].TimeIsChanged = TRUE;
    2210:	e1 e0       	ldi	r30, 0x01	; 1
    2212:	59 96       	adiw	r26, 0x19	; 25
    2214:	ec 93       	st	X, r30
							}
						#endif /* ISB_APP_DIGOUT_FEATURE_TIMEFUNCTION == TRUE */
						// Spezialfunktion
						#if ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE
							if (Isb_Obj[Obj_3].IsChanged == TRUE)
    2216:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2218:	6f 2f       	mov	r22, r31
    221a:	70 e0       	ldi	r23, 0x00	; 0
    221c:	fb 01       	movw	r30, r22
    221e:	b3 e0       	ldi	r27, 0x03	; 3
    2220:	ee 0f       	add	r30, r30
    2222:	ff 1f       	adc	r31, r31
    2224:	ba 95       	dec	r27
    2226:	e1 f7       	brne	.-8      	; 0x2220 <Isb_App_Exec+0x1672>
    2228:	e6 0f       	add	r30, r22
    222a:	f7 1f       	adc	r31, r23
    222c:	ed 5f       	subi	r30, 0xFD	; 253
    222e:	fe 4f       	sbci	r31, 0xFE	; 254
    2230:	80 85       	ldd	r24, Z+8	; 0x08
    2232:	81 30       	cpi	r24, 0x01	; 1
    2234:	09 f0       	breq	.+2      	; 0x2238 <Isb_App_Exec+0x168a>
    2236:	d5 c0       	rjmp	.+426    	; 0x23e2 <Isb_App_Exec+0x1834>
							{
								switch (Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_MODE_MASK)
    2238:	a8 ad       	ldd	r26, Y+56	; 0x38
    223a:	b9 ad       	ldd	r27, Y+57	; 0x39
    223c:	5a 96       	adiw	r26, 0x1a	; 26
    223e:	8c 91       	ld	r24, X
    2240:	28 2f       	mov	r18, r24
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	c9 01       	movw	r24, r18
    2246:	83 70       	andi	r24, 0x03	; 3
    2248:	90 70       	andi	r25, 0x00	; 0
    224a:	81 30       	cpi	r24, 0x01	; 1
    224c:	91 05       	cpc	r25, r1
    224e:	21 f0       	breq	.+8      	; 0x2258 <Isb_App_Exec+0x16aa>
    2250:	02 97       	sbiw	r24, 0x02	; 2
    2252:	09 f0       	breq	.+2      	; 0x2256 <Isb_App_Exec+0x16a8>
    2254:	b8 c0       	rjmp	.+368    	; 0x23c6 <Isb_App_Exec+0x1818>
    2256:	70 c0       	rjmp	.+224    	; 0x2338 <Isb_App_Exec+0x178a>
								{
									#if ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION_BLOCKING == TRUE
										// Sperrfunktion
										case ISB_APP_DIGOUT_CFG10_SPECIAL_MODE_BLOCKINGFUNCTION:
											if (((Isb_Obj[Obj_3].Data[0] == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg10, ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_INVERTED))) | ((Isb_Obj[Obj_3].Data[0] == 0) & (bit_is_set(Isb_App_DigOut[AppIndex].Cfg10, ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_INVERTED))))
    2258:	43 81       	ldd	r20, Z+3	; 0x03
    225a:	8c e1       	ldi	r24, 0x1C	; 28
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	c8 9e       	mul	r12, r24
    2260:	f0 01       	movw	r30, r0
    2262:	c9 9e       	mul	r12, r25
    2264:	f0 0d       	add	r31, r0
    2266:	d8 9e       	mul	r13, r24
    2268:	f0 0d       	add	r31, r0
    226a:	11 24       	eor	r1, r1
    226c:	eb 51       	subi	r30, 0x1B	; 27
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	80 81       	ld	r24, Z
    2272:	e0 81       	ld	r30, Z
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	41 30       	cpi	r20, 0x01	; 1
    2278:	09 f4       	brne	.+2      	; 0x227c <Isb_App_Exec+0x16ce>
    227a:	91 e0       	ldi	r25, 0x01	; 1
    227c:	86 95       	lsr	r24
    227e:	86 95       	lsr	r24
    2280:	80 95       	com	r24
    2282:	89 23       	and	r24, r25
    2284:	e8 2f       	mov	r30, r24
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	ef 2b       	or	r30, r31
    228a:	41 f1       	breq	.+80     	; 0x22dc <Isb_App_Exec+0x172e>
											{
												// Activiert
												// Verhalten zu Beginn der Sperrfunktion
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_ON_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_ON_NONE)
    228c:	28 71       	andi	r18, 0x18	; 24
    228e:	30 70       	andi	r19, 0x00	; 0
    2290:	23 2b       	or	r18, r19
    2292:	21 f4       	brne	.+8      	; 0x229c <Isb_App_Exec+0x16ee>
												{
													// -> keine Änderung des Schaltzustandes
													Isb_App_DigOut[AppIndex].Special_Action = 11;
    2294:	8b e0       	ldi	r24, 0x0B	; 11
    2296:	e8 ad       	ldd	r30, Y+56	; 0x38
    2298:	f9 ad       	ldd	r31, Y+57	; 0x39
    229a:	83 8f       	std	Z+27, r24	; 0x1b
												}
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_ON_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_ON_OFF)
    229c:	a8 ad       	ldd	r26, Y+56	; 0x38
    229e:	b9 ad       	ldd	r27, Y+57	; 0x39
    22a0:	5a 96       	adiw	r26, 0x1a	; 26
    22a2:	8c 91       	ld	r24, X
    22a4:	5a 97       	sbiw	r26, 0x1a	; 26
    22a6:	88 71       	andi	r24, 0x18	; 24
    22a8:	88 30       	cpi	r24, 0x08	; 8
    22aa:	19 f4       	brne	.+6      	; 0x22b2 <Isb_App_Exec+0x1704>
												{
													// -> ausschalten
													Isb_App_DigOut[AppIndex].Special_Action = 12;
    22ac:	8c e0       	ldi	r24, 0x0C	; 12
    22ae:	5b 96       	adiw	r26, 0x1b	; 27
    22b0:	8c 93       	st	X, r24
												}
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_ON_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_ON_ON)
    22b2:	e8 ad       	ldd	r30, Y+56	; 0x38
    22b4:	f9 ad       	ldd	r31, Y+57	; 0x39
    22b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    22b8:	88 71       	andi	r24, 0x18	; 24
    22ba:	80 31       	cpi	r24, 0x10	; 16
    22bc:	11 f4       	brne	.+4      	; 0x22c2 <Isb_App_Exec+0x1714>
												{
													// -> einschalten
													Isb_App_DigOut[AppIndex].Special_Action = 13;
    22be:	8d e0       	ldi	r24, 0x0D	; 13
    22c0:	83 8f       	std	Z+27, r24	; 0x1b
												}
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_ON_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_ON_BLINK)
    22c2:	a8 ad       	ldd	r26, Y+56	; 0x38
    22c4:	b9 ad       	ldd	r27, Y+57	; 0x39
    22c6:	5a 96       	adiw	r26, 0x1a	; 26
    22c8:	8c 91       	ld	r24, X
    22ca:	5a 97       	sbiw	r26, 0x1a	; 26
    22cc:	88 71       	andi	r24, 0x18	; 24
    22ce:	88 31       	cpi	r24, 0x18	; 24
    22d0:	09 f0       	breq	.+2      	; 0x22d4 <Isb_App_Exec+0x1726>
    22d2:	7c c0       	rjmp	.+248    	; 0x23cc <Isb_App_Exec+0x181e>
												{
													// -> blinken
													Isb_App_DigOut[AppIndex].Special_Action = 14;
    22d4:	8e e0       	ldi	r24, 0x0E	; 14
    22d6:	5b 96       	adiw	r26, 0x1b	; 27
    22d8:	8c 93       	st	X, r24
    22da:	78 c0       	rjmp	.+240    	; 0x23cc <Isb_App_Exec+0x181e>
											}
											else
											{
												// Deaktiviert
												// Verhalten am Ende der Sperrfunktion
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_OFF_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_OFF_NONE)
    22dc:	82 2f       	mov	r24, r18
    22de:	80 7e       	andi	r24, 0xE0	; 224
    22e0:	21 f4       	brne	.+8      	; 0x22ea <Isb_App_Exec+0x173c>
												{
													// -> keine Änderung des Schaltzustandes
													Isb_App_DigOut[AppIndex].Special_Action = 01;
    22e2:	21 e0       	ldi	r18, 0x01	; 1
    22e4:	e8 ad       	ldd	r30, Y+56	; 0x38
    22e6:	f9 ad       	ldd	r31, Y+57	; 0x39
    22e8:	23 8f       	std	Z+27, r18	; 0x1b
												}
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_OFF_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_OFF_OFF)
    22ea:	a8 ad       	ldd	r26, Y+56	; 0x38
    22ec:	b9 ad       	ldd	r27, Y+57	; 0x39
    22ee:	5a 96       	adiw	r26, 0x1a	; 26
    22f0:	8c 91       	ld	r24, X
    22f2:	5a 97       	sbiw	r26, 0x1a	; 26
    22f4:	80 7e       	andi	r24, 0xE0	; 224
    22f6:	80 32       	cpi	r24, 0x20	; 32
    22f8:	19 f4       	brne	.+6      	; 0x2300 <Isb_App_Exec+0x1752>
												{
													// -> ausschalten
													Isb_App_DigOut[AppIndex].Special_Action = 02;
    22fa:	82 e0       	ldi	r24, 0x02	; 2
    22fc:	5b 96       	adiw	r26, 0x1b	; 27
    22fe:	8c 93       	st	X, r24
												}
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_OFF_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_OFF_ON)
    2300:	e8 ad       	ldd	r30, Y+56	; 0x38
    2302:	f9 ad       	ldd	r31, Y+57	; 0x39
    2304:	82 8d       	ldd	r24, Z+26	; 0x1a
    2306:	80 7e       	andi	r24, 0xE0	; 224
    2308:	80 34       	cpi	r24, 0x40	; 64
    230a:	11 f4       	brne	.+4      	; 0x2310 <Isb_App_Exec+0x1762>
												{
													// -> einschalten
													Isb_App_DigOut[AppIndex].Special_Action = 03;
    230c:	83 e0       	ldi	r24, 0x03	; 3
    230e:	83 8f       	std	Z+27, r24	; 0x1b
												}
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_OFF_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_OFFF_REAL)
    2310:	a8 ad       	ldd	r26, Y+56	; 0x38
    2312:	b9 ad       	ldd	r27, Y+57	; 0x39
    2314:	5a 96       	adiw	r26, 0x1a	; 26
    2316:	8c 91       	ld	r24, X
    2318:	5a 97       	sbiw	r26, 0x1a	; 26
    231a:	80 7e       	andi	r24, 0xE0	; 224
    231c:	80 36       	cpi	r24, 0x60	; 96
    231e:	11 f4       	brne	.+4      	; 0x2324 <Isb_App_Exec+0x1776>
												{
													// -> nachgeführten Zustand einstellen
													Isb_App_DigOut[AppIndex].Special_Action = 00;
    2320:	5b 96       	adiw	r26, 0x1b	; 27
    2322:	1c 92       	st	X, r1
												}
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_OFF_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BLOCKINGFUNCTION_ACTION_OFF_BLINK)
    2324:	e8 ad       	ldd	r30, Y+56	; 0x38
    2326:	f9 ad       	ldd	r31, Y+57	; 0x39
    2328:	82 8d       	ldd	r24, Z+26	; 0x1a
    232a:	80 7e       	andi	r24, 0xE0	; 224
    232c:	80 38       	cpi	r24, 0x80	; 128
    232e:	09 f0       	breq	.+2      	; 0x2332 <Isb_App_Exec+0x1784>
    2330:	4d c0       	rjmp	.+154    	; 0x23cc <Isb_App_Exec+0x181e>
												{
													// -> blinken
													Isb_App_DigOut[AppIndex].Special_Action = 04;
    2332:	84 e0       	ldi	r24, 0x04	; 4
    2334:	83 8f       	std	Z+27, r24	; 0x1b
    2336:	4a c0       	rjmp	.+148    	; 0x23cc <Isb_App_Exec+0x181e>
											break;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION_BLOCKING == TRUE */
									#if ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION_BONDAGE == TRUE
										// Zwangsstellungsfunktion
										case ISB_APP_DIGOUT_CFG10_SPECIAL_MODE_BONDAGEFUNCTION:
											if (((Isb_Obj[Obj_3].Data[0] == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg10, ISB_APP_DIGOUT_CFG10_SPECIAL_BONDAGEFUNCTION_INVERTED))) | ((Isb_Obj[Obj_3].Data[0] == 0) & (bit_is_set(Isb_App_DigOut[AppIndex].Cfg10, ISB_APP_DIGOUT_CFG10_SPECIAL_BONDAGEFUNCTION_INVERTED))))
    2338:	43 81       	ldd	r20, Z+3	; 0x03
    233a:	8c e1       	ldi	r24, 0x1C	; 28
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	c8 9e       	mul	r12, r24
    2340:	f0 01       	movw	r30, r0
    2342:	c9 9e       	mul	r12, r25
    2344:	f0 0d       	add	r31, r0
    2346:	d8 9e       	mul	r13, r24
    2348:	f0 0d       	add	r31, r0
    234a:	11 24       	eor	r1, r1
    234c:	eb 51       	subi	r30, 0x1B	; 27
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	80 81       	ld	r24, Z
    2352:	e0 81       	ld	r30, Z
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	41 30       	cpi	r20, 0x01	; 1
    2358:	09 f4       	brne	.+2      	; 0x235c <Isb_App_Exec+0x17ae>
    235a:	91 e0       	ldi	r25, 0x01	; 1
    235c:	86 95       	lsr	r24
    235e:	86 95       	lsr	r24
    2360:	80 95       	com	r24
    2362:	89 23       	and	r24, r25
    2364:	e8 2f       	mov	r30, r24
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	ef 2b       	or	r30, r31
    236a:	31 f0       	breq	.+12     	; 0x2378 <Isb_App_Exec+0x17ca>
											{
												// Aktiviert
												// Verhalten am Anfang der Zwangsstellung
												// -> keine Änderung des Schaltzustandes
												Isb_App_DigOut[AppIndex].Special_Action = 01;
    236c:	e1 e0       	ldi	r30, 0x01	; 1
    236e:	a8 ad       	ldd	r26, Y+56	; 0x38
    2370:	b9 ad       	ldd	r27, Y+57	; 0x39
    2372:	5b 96       	adiw	r26, 0x1b	; 27
    2374:	ec 93       	st	X, r30
    2376:	2a c0       	rjmp	.+84     	; 0x23cc <Isb_App_Exec+0x181e>
											}
											else
											{
												// Deaktiviert
												// Verhalten am Ende der Zwangsstellung
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BONDAGEFUNCTION_ACTION_OFF_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BONDAGEFUNCTION_ACTION_OFF_NONE)
    2378:	28 71       	andi	r18, 0x18	; 24
    237a:	30 70       	andi	r19, 0x00	; 0
    237c:	23 2b       	or	r18, r19
    237e:	29 f4       	brne	.+10     	; 0x238a <Isb_App_Exec+0x17dc>
												{
													// -> keine Änderung des Schaltzustandes
													Isb_App_DigOut[AppIndex].Special_Action = 01;
    2380:	e1 e0       	ldi	r30, 0x01	; 1
    2382:	a8 ad       	ldd	r26, Y+56	; 0x38
    2384:	b9 ad       	ldd	r27, Y+57	; 0x39
    2386:	5b 96       	adiw	r26, 0x1b	; 27
    2388:	ec 93       	st	X, r30
												}
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BONDAGEFUNCTION_ACTION_OFF_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BONDAGEFUNCTION_ACTION_OFF_OFF)
    238a:	a8 ad       	ldd	r26, Y+56	; 0x38
    238c:	b9 ad       	ldd	r27, Y+57	; 0x39
    238e:	5a 96       	adiw	r26, 0x1a	; 26
    2390:	8c 91       	ld	r24, X
    2392:	5a 97       	sbiw	r26, 0x1a	; 26
    2394:	88 71       	andi	r24, 0x18	; 24
    2396:	88 30       	cpi	r24, 0x08	; 8
    2398:	19 f4       	brne	.+6      	; 0x23a0 <Isb_App_Exec+0x17f2>
												{
													// -> ausschalten
													Isb_App_DigOut[AppIndex].Special_Action = 02;
    239a:	82 e0       	ldi	r24, 0x02	; 2
    239c:	5b 96       	adiw	r26, 0x1b	; 27
    239e:	8c 93       	st	X, r24
												}
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BONDAGEFUNCTION_ACTION_OFF_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BONDAGEFUNCTION_ACTION_OFF_ON)
    23a0:	e8 ad       	ldd	r30, Y+56	; 0x38
    23a2:	f9 ad       	ldd	r31, Y+57	; 0x39
    23a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    23a6:	88 71       	andi	r24, 0x18	; 24
    23a8:	80 31       	cpi	r24, 0x10	; 16
    23aa:	11 f4       	brne	.+4      	; 0x23b0 <Isb_App_Exec+0x1802>
												{
													// -> einschalten
													Isb_App_DigOut[AppIndex].Special_Action = 03;
    23ac:	83 e0       	ldi	r24, 0x03	; 3
    23ae:	83 8f       	std	Z+27, r24	; 0x1b
												}
												if ((Isb_App_DigOut[AppIndex].Cfg10 & ISB_APP_DIGOUT_CFG10_SPECIAL_BONDAGEFUNCTION_ACTION_OFF_MASK) == ISB_APP_DIGOUT_CFG10_SPECIAL_BONDAGEFUNCTION_ACTION_OFF_REAL)
    23b0:	a8 ad       	ldd	r26, Y+56	; 0x38
    23b2:	b9 ad       	ldd	r27, Y+57	; 0x39
    23b4:	5a 96       	adiw	r26, 0x1a	; 26
    23b6:	8c 91       	ld	r24, X
    23b8:	5a 97       	sbiw	r26, 0x1a	; 26
    23ba:	88 71       	andi	r24, 0x18	; 24
    23bc:	88 31       	cpi	r24, 0x18	; 24
    23be:	31 f4       	brne	.+12     	; 0x23cc <Isb_App_Exec+0x181e>
												{
													// -> nachgeführten Zustand einstellen
													Isb_App_DigOut[AppIndex].Special_Action = 00;
    23c0:	5b 96       	adiw	r26, 0x1b	; 27
    23c2:	1c 92       	st	X, r1
    23c4:	03 c0       	rjmp	.+6      	; 0x23cc <Isb_App_Exec+0x181e>
												}
											}
											break;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION_BONDAGE == TRUE */
									default:
										Isb_App_DigOut[AppIndex].Special_Action = 00;
    23c6:	e8 ad       	ldd	r30, Y+56	; 0x38
    23c8:	f9 ad       	ldd	r31, Y+57	; 0x39
    23ca:	13 8e       	std	Z+27, r1	; 0x1b
										break;
								}
								Isb_Obj[Obj_3].IsChanged = FALSE;
    23cc:	fb 01       	movw	r30, r22
    23ce:	a3 e0       	ldi	r26, 0x03	; 3
    23d0:	ee 0f       	add	r30, r30
    23d2:	ff 1f       	adc	r31, r31
    23d4:	aa 95       	dec	r26
    23d6:	e1 f7       	brne	.-8      	; 0x23d0 <Isb_App_Exec+0x1822>
    23d8:	e6 0f       	add	r30, r22
    23da:	f7 1f       	adc	r31, r23
    23dc:	ed 5f       	subi	r30, 0xFD	; 253
    23de:	fe 4f       	sbci	r31, 0xFE	; 254
    23e0:	10 86       	std	Z+8, r1	; 0x08
							}
							switch (Isb_App_DigOut[AppIndex].Special_Action)
    23e2:	a8 ad       	ldd	r26, Y+56	; 0x38
    23e4:	b9 ad       	ldd	r27, Y+57	; 0x39
    23e6:	5b 96       	adiw	r26, 0x1b	; 27
    23e8:	8c 91       	ld	r24, X
    23ea:	84 30       	cpi	r24, 0x04	; 4
    23ec:	69 f1       	breq	.+90     	; 0x2448 <Isb_App_Exec+0x189a>
    23ee:	85 30       	cpi	r24, 0x05	; 5
    23f0:	40 f4       	brcc	.+16     	; 0x2402 <Isb_App_Exec+0x1854>
    23f2:	82 30       	cpi	r24, 0x02	; 2
    23f4:	c1 f0       	breq	.+48     	; 0x2426 <Isb_App_Exec+0x1878>
    23f6:	83 30       	cpi	r24, 0x03	; 3
    23f8:	f0 f4       	brcc	.+60     	; 0x2436 <Isb_App_Exec+0x1888>
    23fa:	81 30       	cpi	r24, 0x01	; 1
    23fc:	09 f0       	breq	.+2      	; 0x2400 <Isb_App_Exec+0x1852>
    23fe:	49 c0       	rjmp	.+146    	; 0x2492 <Isb_App_Exec+0x18e4>
    2400:	0d c0       	rjmp	.+26     	; 0x241c <Isb_App_Exec+0x186e>
    2402:	8c 30       	cpi	r24, 0x0C	; 12
    2404:	79 f1       	breq	.+94     	; 0x2464 <Isb_App_Exec+0x18b6>
    2406:	8d 30       	cpi	r24, 0x0D	; 13
    2408:	20 f4       	brcc	.+8      	; 0x2412 <Isb_App_Exec+0x1864>
    240a:	8b 30       	cpi	r24, 0x0B	; 11
    240c:	09 f0       	breq	.+2      	; 0x2410 <Isb_App_Exec+0x1862>
    240e:	41 c0       	rjmp	.+130    	; 0x2492 <Isb_App_Exec+0x18e4>
    2410:	21 c0       	rjmp	.+66     	; 0x2454 <Isb_App_Exec+0x18a6>
    2412:	8d 30       	cpi	r24, 0x0D	; 13
    2414:	79 f1       	breq	.+94     	; 0x2474 <Isb_App_Exec+0x18c6>
    2416:	8e 30       	cpi	r24, 0x0E	; 14
    2418:	e1 f5       	brne	.+120    	; 0x2492 <Isb_App_Exec+0x18e4>
    241a:	36 c0       	rjmp	.+108    	; 0x2488 <Isb_App_Exec+0x18da>
							{
								case 01:
									//  Ende - keine Änderung des Schaltzustandes
									Value = Isb_App_DigOut[AppIndex].Value;
    241c:	e8 ad       	ldd	r30, Y+56	; 0x38
    241e:	f9 ad       	ldd	r31, Y+57	; 0x39
    2420:	13 81       	ldd	r17, Z+3	; 0x03
									IsChanged = Isb_App_DigOut[AppIndex].IsChanged;
    2422:	04 81       	ldd	r16, Z+4	; 0x04
    2424:	36 c0       	rjmp	.+108    	; 0x2492 <Isb_App_Exec+0x18e4>
									break;
								case 02:
									// Ende - ausschalten
									if (Value != FALSE)
    2426:	11 11       	cpse	r17, r1
    2428:	01 e0       	ldi	r16, 0x01	; 1
									{
										Value = FALSE;
										IsChanged = TRUE;
									}
									Isb_App_DigOut[AppIndex].Special_Action = 01;
    242a:	e1 e0       	ldi	r30, 0x01	; 1
    242c:	a8 ad       	ldd	r26, Y+56	; 0x38
    242e:	b9 ad       	ldd	r27, Y+57	; 0x39
    2430:	5b 96       	adiw	r26, 0x1b	; 27
    2432:	ec 93       	st	X, r30
    2434:	1d c0       	rjmp	.+58     	; 0x2470 <Isb_App_Exec+0x18c2>
									break;
								case 03:
									// Ende - einschalten
									if (Value != TRUE)
    2436:	11 30       	cpi	r17, 0x01	; 1
    2438:	09 f0       	breq	.+2      	; 0x243c <Isb_App_Exec+0x188e>
    243a:	01 e0       	ldi	r16, 0x01	; 1
									{
										Value = TRUE;
										IsChanged = TRUE;
									}
									Isb_App_DigOut[AppIndex].Special_Action = 01;
    243c:	e1 e0       	ldi	r30, 0x01	; 1
    243e:	a8 ad       	ldd	r26, Y+56	; 0x38
    2440:	b9 ad       	ldd	r27, Y+57	; 0x39
    2442:	5b 96       	adiw	r26, 0x1b	; 27
    2444:	ec 93       	st	X, r30
    2446:	1e c0       	rjmp	.+60     	; 0x2484 <Isb_App_Exec+0x18d6>
//									if (Value != Blinker_Value)
//									{
//										Value = Blinker_Value;
										IsChanged = TRUE;
//									}
									Isb_App_DigOut[AppIndex].Special_Action = 01;
    2448:	e1 e0       	ldi	r30, 0x01	; 1
    244a:	a8 ad       	ldd	r26, Y+56	; 0x38
    244c:	b9 ad       	ldd	r27, Y+57	; 0x39
    244e:	5b 96       	adiw	r26, 0x1b	; 27
    2450:	ec 93       	st	X, r30
    2452:	1e c0       	rjmp	.+60     	; 0x2490 <Isb_App_Exec+0x18e2>
									break;
								case 11:
									//  Beginn - keine Änderung des Schaltzustandes
									Value = Isb_App_DigOut[AppIndex].Value;
    2454:	a8 ad       	ldd	r26, Y+56	; 0x38
    2456:	b9 ad       	ldd	r27, Y+57	; 0x39
    2458:	13 96       	adiw	r26, 0x03	; 3
    245a:	1c 91       	ld	r17, X
    245c:	13 97       	sbiw	r26, 0x03	; 3
									IsChanged = Isb_App_DigOut[AppIndex].IsChanged;
    245e:	14 96       	adiw	r26, 0x04	; 4
    2460:	0c 91       	ld	r16, X
    2462:	17 c0       	rjmp	.+46     	; 0x2492 <Isb_App_Exec+0x18e4>
									break;
								case 12:
									// Beginn - ausschalten
									if (Value != FALSE)
    2464:	11 11       	cpse	r17, r1
    2466:	01 e0       	ldi	r16, 0x01	; 1
									{
										Value = FALSE;
										IsChanged = TRUE;
									}
									Isb_App_DigOut[AppIndex].Special_Action = 11;
    2468:	8b e0       	ldi	r24, 0x0B	; 11
    246a:	e8 ad       	ldd	r30, Y+56	; 0x38
    246c:	f9 ad       	ldd	r31, Y+57	; 0x39
    246e:	83 8f       	std	Z+27, r24	; 0x1b
    2470:	10 e0       	ldi	r17, 0x00	; 0
    2472:	0f c0       	rjmp	.+30     	; 0x2492 <Isb_App_Exec+0x18e4>
									break;
								case 13:
									// Beginn - einschalten
									if (Value != TRUE)
    2474:	11 30       	cpi	r17, 0x01	; 1
    2476:	09 f0       	breq	.+2      	; 0x247a <Isb_App_Exec+0x18cc>
    2478:	01 e0       	ldi	r16, 0x01	; 1
									{
										Value = TRUE;
										IsChanged = TRUE;
									}
									Isb_App_DigOut[AppIndex].Special_Action = 11;
    247a:	8b e0       	ldi	r24, 0x0B	; 11
    247c:	a8 ad       	ldd	r26, Y+56	; 0x38
    247e:	b9 ad       	ldd	r27, Y+57	; 0x39
    2480:	5b 96       	adiw	r26, 0x1b	; 27
    2482:	8c 93       	st	X, r24
    2484:	11 e0       	ldi	r17, 0x01	; 1
    2486:	05 c0       	rjmp	.+10     	; 0x2492 <Isb_App_Exec+0x18e4>
//									if (Value != Blinker_Value)
//									{
//										Value = Blinker_Value;
										IsChanged = TRUE;
//									}
									Isb_App_DigOut[AppIndex].Special_Action = 11;
    2488:	8b e0       	ldi	r24, 0x0B	; 11
    248a:	e8 ad       	ldd	r30, Y+56	; 0x38
    248c:	f9 ad       	ldd	r31, Y+57	; 0x39
    248e:	83 8f       	std	Z+27, r24	; 0x1b
    2490:	01 e0       	ldi	r16, 0x01	; 1
									// nachgeführten Zustand einstellen
									break;
							}
						#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
						// Ausgang
						Isb_App_DigOut[AppIndex].Value = Value;
    2492:	a8 ad       	ldd	r26, Y+56	; 0x38
    2494:	b9 ad       	ldd	r27, Y+57	; 0x39
    2496:	13 96       	adiw	r26, 0x03	; 3
    2498:	1c 93       	st	X, r17
    249a:	13 97       	sbiw	r26, 0x03	; 3
						Isb_App_DigOut[AppIndex].IsChanged = IsChanged;
    249c:	14 96       	adiw	r26, 0x04	; 4
    249e:	0c 93       	st	X, r16
						uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigOut_Pin0_Array[AppIndex]);
    24a0:	f6 01       	movw	r30, r12
    24a2:	ea 58       	subi	r30, 0x8A	; 138
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	64 91       	lpm	r22, Z+
						#if (ISB_APP_DIGOUT_DESTINATION_FEATURE_SSR == TRUE) | (ISB_APP_DIGOUT_FEATURE_RESULT == TRUE)
							uint8_t Pin1 = pgm_read_byte(&pgmIsb_App_DigOut_Pin1_Array[AppIndex]);
    24a8:	f6 01       	movw	r30, r12
    24aa:	e8 58       	subi	r30, 0x88	; 136
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	f4 90       	lpm	r15, Z+
						#endif /* (ISB_APP_DIGOUT_DESTINATION_FEATURE_SSR == TRUE) | (ISB_APP_DIGOUT_FEATURE_RESULT == TRUE) */
						switch (Isb_App_DigOut[AppIndex].Cfg0 & ISB_APP_DIGOUT_CFG0_OPERATION_MASK)
    24b0:	e9 81       	ldd	r30, Y+1	; 0x01
    24b2:	fa 81       	ldd	r31, Y+2	; 0x02
    24b4:	80 81       	ld	r24, Z
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	87 70       	andi	r24, 0x07	; 7
    24ba:	90 70       	andi	r25, 0x00	; 0
    24bc:	89 2b       	or	r24, r25
    24be:	09 f0       	breq	.+2      	; 0x24c2 <Isb_App_Exec+0x1914>
    24c0:	3f c0       	rjmp	.+126    	; 0x2540 <Isb_App_Exec+0x1992>
						{
							#if ISB_APP_DIGOUT_DESTINATION_FEATURE_RELAIS == TRUE
								case ISB_APP_DIGOUT_CFG0_OPERATION_STD:
									if (Isb_App_DigOut[AppIndex].IsChanged == TRUE)
    24c2:	01 30       	cpi	r16, 0x01	; 1
    24c4:	e9 f5       	brne	.+122    	; 0x2540 <Isb_App_Exec+0x1992>
									{
										if (bit_is_set(Isb_App_DigOut[AppIndex].Value, 0))
    24c6:	8c e1       	ldi	r24, 0x1C	; 28
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	c8 9e       	mul	r12, r24
    24cc:	a0 01       	movw	r20, r0
    24ce:	c9 9e       	mul	r12, r25
    24d0:	50 0d       	add	r21, r0
    24d2:	d8 9e       	mul	r13, r24
    24d4:	50 0d       	add	r21, r0
    24d6:	11 24       	eor	r1, r1
    24d8:	fa 01       	movw	r30, r20
    24da:	e2 53       	subi	r30, 0x32	; 50
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	80 81       	ld	r24, Z
    24e0:	26 2f       	mov	r18, r22
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	80 ff       	sbrs	r24, 0
    24e6:	11 c0       	rjmp	.+34     	; 0x250a <Isb_App_Exec+0x195c>
										{
											uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
    24e8:	28 73       	andi	r18, 0x38	; 56
    24ea:	30 70       	andi	r19, 0x00	; 0
    24ec:	e3 e0       	ldi	r30, 0x03	; 3
    24ee:	35 95       	asr	r19
    24f0:	27 95       	ror	r18
    24f2:	ea 95       	dec	r30
    24f4:	e1 f7       	brne	.-8      	; 0x24ee <Isb_App_Exec+0x1940>
											uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
											if (Port != 0)
    24f6:	22 23       	and	r18, r18
    24f8:	f9 f0       	breq	.+62     	; 0x2538 <Isb_App_Exec+0x198a>
									if (Isb_App_DigOut[AppIndex].IsChanged == TRUE)
									{
										if (bit_is_set(Isb_App_DigOut[AppIndex].Value, 0))
										{
											uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
											uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
    24fa:	67 70       	andi	r22, 0x07	; 7
											if (Port != 0)
											{
												if (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN0_INVERTED))
    24fc:	fa 01       	movw	r30, r20
    24fe:	e5 53       	subi	r30, 0x35	; 53
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	80 81       	ld	r24, Z
    2504:	84 fd       	sbrc	r24, 4
    2506:	11 c0       	rjmp	.+34     	; 0x252a <Isb_App_Exec+0x197c>
    2508:	13 c0       	rjmp	.+38     	; 0x2530 <Isb_App_Exec+0x1982>
												}
											}
										}
										else
										{
											uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
    250a:	28 73       	andi	r18, 0x38	; 56
    250c:	30 70       	andi	r19, 0x00	; 0
    250e:	73 e0       	ldi	r23, 0x03	; 3
    2510:	35 95       	asr	r19
    2512:	27 95       	ror	r18
    2514:	7a 95       	dec	r23
    2516:	e1 f7       	brne	.-8      	; 0x2510 <Isb_App_Exec+0x1962>
											uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
											if (Port != 0)
    2518:	22 23       	and	r18, r18
    251a:	71 f0       	breq	.+28     	; 0x2538 <Isb_App_Exec+0x198a>
											}
										}
										else
										{
											uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
											uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
    251c:	67 70       	andi	r22, 0x07	; 7
											if (Port != 0)
											{
												if (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN0_INVERTED))
    251e:	fa 01       	movw	r30, r20
    2520:	e5 53       	subi	r30, 0x35	; 53
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	80 81       	ld	r24, Z
    2526:	84 fd       	sbrc	r24, 4
    2528:	03 c0       	rjmp	.+6      	; 0x2530 <Isb_App_Exec+0x1982>
												{
													Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_HIGH);
    252a:	82 2f       	mov	r24, r18
    252c:	43 e0       	ldi	r20, 0x03	; 3
    252e:	02 c0       	rjmp	.+4      	; 0x2534 <Isb_App_Exec+0x1986>
												}
												else
												{
													Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_LOW);
    2530:	82 2f       	mov	r24, r18
    2532:	41 e0       	ldi	r20, 0x01	; 1
    2534:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>
												}
											}
										}
										Isb_App_DigOut[AppIndex].IsChanged = FALSE;
    2538:	a8 ad       	ldd	r26, Y+56	; 0x38
    253a:	b9 ad       	ldd	r27, Y+57	; 0x39
    253c:	14 96       	adiw	r26, 0x04	; 4
    253e:	1c 92       	st	X, r1
								break;
						}
						// Rückmeldungsfunktion
						#if ISB_APP_DIGOUT_FEATURE_RESULT == TRUE
							uint8_t Result = 0;
							if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN1_ENABLED))
    2540:	8c e1       	ldi	r24, 0x1C	; 28
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	c8 9e       	mul	r12, r24
    2546:	f0 01       	movw	r30, r0
    2548:	c9 9e       	mul	r12, r25
    254a:	f0 0d       	add	r31, r0
    254c:	d8 9e       	mul	r13, r24
    254e:	f0 0d       	add	r31, r0
    2550:	11 24       	eor	r1, r1
    2552:	8f 01       	movw	r16, r30
    2554:	05 53       	subi	r16, 0x35	; 53
    2556:	1f 4f       	sbci	r17, 0xFF	; 255
    2558:	d8 01       	movw	r26, r16
    255a:	8c 91       	ld	r24, X
    255c:	85 ff       	sbrs	r24, 5
    255e:	38 c0       	rjmp	.+112    	; 0x25d0 <Isb_App_Exec+0x1a22>
							{
								uint8_t Port = (Pin1 & ISB_APP_DIGOUT_PIN1_MASKPORT) >> 3;
    2560:	2f 2d       	mov	r18, r15
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	28 73       	andi	r18, 0x38	; 56
    2566:	30 70       	andi	r19, 0x00	; 0
    2568:	93 e0       	ldi	r25, 0x03	; 3
    256a:	35 95       	asr	r19
    256c:	27 95       	ror	r18
    256e:	9a 95       	dec	r25
    2570:	e1 f7       	brne	.-8      	; 0x256a <Isb_App_Exec+0x19bc>
    2572:	e2 2e       	mov	r14, r18
								uint8_t Pin = Pin1 & ISB_APP_DIGOUT_PIN1_MASKPIN;
    2574:	b7 e0       	ldi	r27, 0x07	; 7
    2576:	fb 22       	and	r15, r27
								if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN1_PULLUP))
    2578:	f8 01       	movw	r30, r16
    257a:	80 81       	ld	r24, Z
    257c:	87 ff       	sbrs	r24, 7
    257e:	04 c0       	rjmp	.+8      	; 0x2588 <Isb_App_Exec+0x19da>
								{
									Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT_PULLUP);
    2580:	82 2f       	mov	r24, r18
    2582:	6f 2d       	mov	r22, r15
    2584:	42 e0       	ldi	r20, 0x02	; 2
    2586:	03 c0       	rjmp	.+6      	; 0x258e <Isb_App_Exec+0x19e0>
								}
								else
								{
									Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT);
    2588:	82 2f       	mov	r24, r18
    258a:	6f 2d       	mov	r22, r15
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>
								}
								Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT_PULLUP);
    2592:	8e 2d       	mov	r24, r14
    2594:	6f 2d       	mov	r22, r15
    2596:	42 e0       	ldi	r20, 0x02	; 2
    2598:	0e 94 ba 00 	call	0x174	; 0x174 <Lib_Pin_Set>
    259c:	ee 2d       	mov	r30, r14
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	ee 0f       	add	r30, r30
    25a2:	ff 1f       	adc	r31, r31
    25a4:	ec 57       	subi	r30, 0x7C	; 124
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	01 90       	ld	r0, Z+
    25aa:	f0 81       	ld	r31, Z
    25ac:	e0 2d       	mov	r30, r0
    25ae:	80 81       	ld	r24, Z
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	02 c0       	rjmp	.+4      	; 0x25b8 <Isb_App_Exec+0x1a0a>
    25b4:	95 95       	asr	r25
    25b6:	87 95       	ror	r24
    25b8:	fa 94       	dec	r15
    25ba:	e2 f7       	brpl	.-8      	; 0x25b4 <Isb_App_Exec+0x1a06>
    25bc:	e8 2f       	mov	r30, r24
    25be:	e1 70       	andi	r30, 0x01	; 1
								Result = Lib_Pin_Get(Port, Pin);
								if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN1_INVERTED))
    25c0:	d8 01       	movw	r26, r16
    25c2:	8c 91       	ld	r24, X
    25c4:	86 ff       	sbrs	r24, 6
    25c6:	19 c0       	rjmp	.+50     	; 0x25fa <Isb_App_Exec+0x1a4c>
								{
									if (Result != 0)
    25c8:	ee 23       	and	r30, r30
    25ca:	b1 f0       	breq	.+44     	; 0x25f8 <Isb_App_Exec+0x1a4a>
    25cc:	e0 e0       	ldi	r30, 0x00	; 0
    25ce:	15 c0       	rjmp	.+42     	; 0x25fa <Isb_App_Exec+0x1a4c>
								}
							}
							else
							{
								Result = 0;
								if ((Isb_App_DigOut[AppIndex].Value == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg1, ISB_APP_DIGOUT_CFG1_RESULT_INVERTED)))
    25d0:	a8 ad       	ldd	r26, Y+56	; 0x38
    25d2:	b9 ad       	ldd	r27, Y+57	; 0x39
    25d4:	13 96       	adiw	r26, 0x03	; 3
    25d6:	2c 91       	ld	r18, X
    25d8:	e0 53       	subi	r30, 0x30	; 48
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	80 81       	ld	r24, Z
								{
									Result = 1;
								}
								if ((Isb_App_DigOut[AppIndex].Value == 0) & (bit_is_set(Isb_App_DigOut[AppIndex].Cfg1, ISB_APP_DIGOUT_CFG1_RESULT_INVERTED)))
    25de:	e0 81       	ld	r30, Z
    25e0:	22 23       	and	r18, r18
    25e2:	11 f4       	brne	.+4      	; 0x25e8 <Isb_App_Exec+0x1a3a>
    25e4:	e0 fd       	sbrc	r30, 0
    25e6:	08 c0       	rjmp	.+16     	; 0x25f8 <Isb_App_Exec+0x1a4a>
								}
							}
							else
							{
								Result = 0;
								if ((Isb_App_DigOut[AppIndex].Value == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg1, ISB_APP_DIGOUT_CFG1_RESULT_INVERTED)))
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	21 30       	cpi	r18, 0x01	; 1
    25ec:	09 f4       	brne	.+2      	; 0x25f0 <Isb_App_Exec+0x1a42>
    25ee:	91 e0       	ldi	r25, 0x01	; 1
    25f0:	e8 2f       	mov	r30, r24
    25f2:	e0 95       	com	r30
    25f4:	e9 23       	and	r30, r25
    25f6:	01 c0       	rjmp	.+2      	; 0x25fa <Isb_App_Exec+0x1a4c>
    25f8:	e1 e0       	ldi	r30, 0x01	; 1
								if ((Isb_App_DigOut[AppIndex].Value == 0) & (bit_is_set(Isb_App_DigOut[AppIndex].Cfg1, ISB_APP_DIGOUT_CFG1_RESULT_INVERTED)))
								{
									Result = 1;
								}
							}
							if (Isb_Obj[Obj_1].Data[0] != Result)
    25fa:	b9 a1       	ldd	r27, Y+33	; 0x21
    25fc:	8b 2f       	mov	r24, r27
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	dc 01       	movw	r26, r24
    2602:	13 e0       	ldi	r17, 0x03	; 3
    2604:	aa 0f       	add	r26, r26
    2606:	bb 1f       	adc	r27, r27
    2608:	1a 95       	dec	r17
    260a:	e1 f7       	brne	.-8      	; 0x2604 <Isb_App_Exec+0x1a56>
    260c:	a8 0f       	add	r26, r24
    260e:	b9 1f       	adc	r27, r25
    2610:	ad 5f       	subi	r26, 0xFD	; 253
    2612:	be 4f       	sbci	r27, 0xFE	; 254
    2614:	13 96       	adiw	r26, 0x03	; 3
    2616:	8c 91       	ld	r24, X
    2618:	13 97       	sbiw	r26, 0x03	; 3
    261a:	8e 17       	cp	r24, r30
    261c:	31 f0       	breq	.+12     	; 0x262a <Isb_App_Exec+0x1a7c>
							{
								Isb_Obj[Obj_1].Data[0] = Result;
    261e:	13 96       	adiw	r26, 0x03	; 3
    2620:	ec 93       	st	X, r30
    2622:	13 97       	sbiw	r26, 0x03	; 3
								Isb_Obj[Obj_1].IsChanged = TRUE;
    2624:	e1 e0       	ldi	r30, 0x01	; 1
    2626:	18 96       	adiw	r26, 0x08	; 8
    2628:	ec 93       	st	X, r30
    262a:	08 94       	sec
    262c:	c1 1c       	adc	r12, r1
    262e:	d1 1c       	adc	r13, r1
    2630:	28 ad       	ldd	r18, Y+56	; 0x38
    2632:	39 ad       	ldd	r19, Y+57	; 0x39
    2634:	24 5e       	subi	r18, 0xE4	; 228
    2636:	3f 4f       	sbci	r19, 0xFF	; 255
    2638:	39 af       	std	Y+57, r19	; 0x39
    263a:	28 af       	std	Y+56, r18	; 0x38
    263c:	49 81       	ldd	r20, Y+1	; 0x01
    263e:	5a 81       	ldd	r21, Y+2	; 0x02
    2640:	44 5e       	subi	r20, 0xE4	; 228
    2642:	5f 4f       	sbci	r21, 0xFF	; 255
    2644:	5a 83       	std	Y+2, r21	; 0x02
    2646:	49 83       	std	Y+1, r20	; 0x01
		#endif /* ISB_APP_DIGIN_MAX */

		#if defined(ISB_APP_DIGOUT_MAX)
			if (bit_is_set(Isb_App_DigOut_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
			{
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGOUT_MAX; AppIndex++)
    2648:	52 e0       	ldi	r21, 0x02	; 2
    264a:	c5 16       	cp	r12, r21
    264c:	d1 04       	cpc	r13, r1
    264e:	09 f0       	breq	.+2      	; 0x2652 <Isb_App_Exec+0x1aa4>
    2650:	ae c8       	rjmp	.-3748   	; 0x17ae <Isb_App_Exec+0xc00>
								Isb_Obj[Obj_1].IsChanged = TRUE;
							}
						#endif /* ISB_APP_DIGOUT_FEATURE_RESULT == TRUE */
					}
				}
				Isb_App_DigOut_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    2652:	80 91 ac 00 	lds	r24, 0x00AC
    2656:	8e 7f       	andi	r24, 0xFE	; 254
    2658:	80 93 ac 00 	sts	0x00AC, r24
				}
				Isb_App_HotWater_Circulation_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
			}
		#endif /* ISB_APP_HOTWATER_CIRCULATION_MAX */

	}
    265c:	e9 96       	adiw	r28, 0x39	; 57
    265e:	0f b6       	in	r0, 0x3f	; 63
    2660:	f8 94       	cli
    2662:	de bf       	out	0x3e, r29	; 62
    2664:	0f be       	out	0x3f, r0	; 63
    2666:	cd bf       	out	0x3d, r28	; 61
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	1f 91       	pop	r17
    266e:	0f 91       	pop	r16
    2670:	ff 90       	pop	r15
    2672:	ef 90       	pop	r14
    2674:	df 90       	pop	r13
    2676:	cf 90       	pop	r12
    2678:	bf 90       	pop	r11
    267a:	af 90       	pop	r10
    267c:	9f 90       	pop	r9
    267e:	8f 90       	pop	r8
    2680:	7f 90       	pop	r7
    2682:	6f 90       	pop	r6
    2684:	5f 90       	pop	r5
    2686:	4f 90       	pop	r4
    2688:	3f 90       	pop	r3
    268a:	2f 90       	pop	r2
    268c:	08 95       	ret

0000268e <Isb_Obj_getDlc>:
	uint8_t Isb_Obj_getDlc(uint8_t aTop)
	{

		uint8_t Dlc = 0;

		switch (aTop)
    268e:	85 30       	cpi	r24, 0x05	; 5
    2690:	71 f0       	breq	.+28     	; 0x26ae <Isb_Obj_getDlc+0x20>
    2692:	86 30       	cpi	r24, 0x06	; 6
    2694:	18 f4       	brcc	.+6      	; 0x269c <Isb_Obj_getDlc+0xe>
    2696:	81 30       	cpi	r24, 0x01	; 1
    2698:	41 f4       	brne	.+16     	; 0x26aa <Isb_Obj_getDlc+0x1c>
    269a:	05 c0       	rjmp	.+10     	; 0x26a6 <Isb_Obj_getDlc+0x18>
    269c:	86 30       	cpi	r24, 0x06	; 6
    269e:	49 f0       	breq	.+18     	; 0x26b2 <Isb_Obj_getDlc+0x24>
    26a0:	87 30       	cpi	r24, 0x07	; 7
    26a2:	19 f4       	brne	.+6      	; 0x26aa <Isb_Obj_getDlc+0x1c>
    26a4:	08 c0       	rjmp	.+16     	; 0x26b6 <Isb_Obj_getDlc+0x28>
    26a6:	84 e0       	ldi	r24, 0x04	; 4
    26a8:	08 95       	ret
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	08 95       	ret
    26ae:	85 e0       	ldi	r24, 0x05	; 5
    26b0:	08 95       	ret
//			case ISB_MSG_TOP_4BIT:
//				Dlc = 4;
//				break;
			case ISB_MSG_TOP_FLOAT:
				Dlc = 5;
				break;
    26b2:	86 e0       	ldi	r24, 0x06	; 6
    26b4:	08 95       	ret
			case ISB_MSG_TOP_TIME:
				Dlc = 6;
				break;
    26b6:	88 e0       	ldi	r24, 0x08	; 8
//				break;
		}

		return Dlc;

	}
    26b8:	08 95       	ret

000026ba <Isb_Grp_Init>:
#ifndef ISB_GRP_C_
	#define ISB_GRP_C_



	void Isb_Grp_Init(void) {
    26ba:	80 91 a7 00 	lds	r24, 0x00A7
    26be:	28 2f       	mov	r18, r24
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	26 57       	subi	r18, 0x76	; 118
    26c4:	3f 4f       	sbci	r19, 0xFF	; 255
    26c6:	ea e8       	ldi	r30, 0x8A	; 138
    26c8:	f1 e0       	ldi	r31, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    26ca:	e1 99       	sbic	0x1c, 1	; 28
    26cc:	fe cf       	rjmp	.-4      	; 0x26ca <Isb_Grp_Init+0x10>
    26ce:	22 50       	subi	r18, 0x02	; 2
    26d0:	30 40       	sbci	r19, 0x00	; 0
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    26d2:	3f bb       	out	0x1f, r19	; 31
    26d4:	2e bb       	out	0x1e, r18	; 30
    26d6:	2e 5f       	subi	r18, 0xFE	; 254
    26d8:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
    EECR |= (1 << EERE);
    26da:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    26dc:	9d b3       	in	r25, 0x1d	; 29
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    26de:	e1 99       	sbic	0x1c, 1	; 28
    26e0:	fe cf       	rjmp	.-4      	; 0x26de <Isb_Grp_Init+0x24>
    26e2:	21 50       	subi	r18, 0x01	; 1
    26e4:	30 40       	sbci	r19, 0x00	; 0
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    26e6:	3f bb       	out	0x1f, r19	; 31
    26e8:	2e bb       	out	0x1e, r18	; 30
    26ea:	2f 5f       	subi	r18, 0xFF	; 255
    26ec:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
    EECR |= (1 << EERE);
    26ee:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    26f0:	8d b3       	in	r24, 0x1d	; 29
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
			Isb_Grp[GrpIndex].Id = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3));
			Isb_Grp[GrpIndex].Id |= lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 1)) << 8;
    26f2:	58 2f       	mov	r21, r24
    26f4:	40 e0       	ldi	r20, 0x00	; 0
    26f6:	89 2f       	mov	r24, r25
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	84 2b       	or	r24, r20
    26fc:	95 2b       	or	r25, r21
    26fe:	91 83       	std	Z+1, r25	; 0x01
    2700:	80 83       	st	Z, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2702:	e1 99       	sbic	0x1c, 1	; 28
    2704:	fe cf       	rjmp	.-4      	; 0x2702 <Isb_Grp_Init+0x48>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2706:	3f bb       	out	0x1f, r19	; 31
    2708:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    270a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    270c:	8d b3       	in	r24, 0x1d	; 29
			Isb_Grp[GrpIndex].Obj = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 2));
    270e:	82 83       	std	Z+2, r24	; 0x02
    2710:	2d 5f       	subi	r18, 0xFD	; 253
    2712:	3f 4f       	sbci	r19, 0xFF	; 255
    2714:	33 96       	adiw	r30, 0x03	; 3
	#define ISB_GRP_C_



	void Isb_Grp_Init(void) {
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	e2 3a       	cpi	r30, 0xA2	; 162
    271a:	f8 07       	cpc	r31, r24
    271c:	b1 f6       	brne	.-84     	; 0x26ca <Isb_Grp_Init+0x10>
			Isb_Grp[GrpIndex].Id = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3));
			Isb_Grp[GrpIndex].Id |= lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 1)) << 8;
			Isb_Grp[GrpIndex].Obj = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 2));
		}
	}
    271e:	08 95       	ret

00002720 <Node_Reboot>:
	#include "./../lib/isb_obj.c"
	#include "./../lib/isb_grp.c"



	void Node_Reboot(void) {
    2720:	ff cf       	rjmp	.-2      	; 0x2720 <Node_Reboot>

00002722 <Isb_SendMsg>:
		while (1) ;
	}



	void Isb_SendMsg(Isb_Msg_t * aMsg) {
    2722:	cf 93       	push	r28
    2724:	df 93       	push	r29
    2726:	ec 01       	movw	r28, r24
		#endif /* ISB_INF_USART0 == 1 */
		#if ISB_INF_USART1 == 1
			Isb_Inf_Usart_Tx(1, aMsg);
		#endif /* ISB_INF_USART1 == 1 */
		#if ISB_INF_CAN0 == 1
			Isb_Inf_Can_Tx(0, aMsg);
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	be 01       	movw	r22, r28
    272c:	0e 94 cb 03 	call	0x796	; 0x796 <Isb_Inf_Can_Tx>
			Isb_Inf_Can_Tx(1, aMsg);
		#endif /* ISB_INF_CAN1 == 1 */
		#if ISB_INF_CAN2 == 1
			Isb_Inf_Can_Tx(2, aMsg);
		#endif /* ISB_INF_CAN2 == 1 */
		if ((aMsg->Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_MULTICAST) {
    2730:	88 81       	ld	r24, Y
    2732:	80 73       	andi	r24, 0x30	; 48
    2734:	80 32       	cpi	r24, 0x20	; 32
    2736:	39 f4       	brne	.+14     	; 0x2746 <Isb_SendMsg+0x24>
			if (Error == 0) {
    2738:	80 91 a9 00 	lds	r24, 0x00A9
    273c:	88 23       	and	r24, r24
    273e:	19 f4       	brne	.+6      	; 0x2746 <Isb_SendMsg+0x24>
				Isb_Obj_Rx(aMsg);
    2740:	ce 01       	movw	r24, r28
    2742:	0e 94 a6 13 	call	0x274c	; 0x274c <Isb_Obj_Rx>
			}
		}
	}
    2746:	df 91       	pop	r29
    2748:	cf 91       	pop	r28
    274a:	08 95       	ret

0000274c <Isb_Obj_Rx>:
	}



	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg)
	{
    274c:	2f 92       	push	r2
    274e:	3f 92       	push	r3
    2750:	4f 92       	push	r4
    2752:	5f 92       	push	r5
    2754:	6f 92       	push	r6
    2756:	7f 92       	push	r7
    2758:	8f 92       	push	r8
    275a:	9f 92       	push	r9
    275c:	af 92       	push	r10
    275e:	bf 92       	push	r11
    2760:	cf 92       	push	r12
    2762:	df 92       	push	r13
    2764:	ef 92       	push	r14
    2766:	ff 92       	push	r15
    2768:	0f 93       	push	r16
    276a:	1f 93       	push	r17
    276c:	df 93       	push	r29
    276e:	cf 93       	push	r28
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	2d 97       	sbiw	r28, 0x0d	; 13
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	de bf       	out	0x3e, r29	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	5c 01       	movw	r10, r24
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ))
											{
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
												TxMsg.DestId = aIsb_Msg->DestId;
												TxMsg.SourceId = Isb_Node_Id;
    2782:	20 90 a5 00 	lds	r2, 0x00A5
    2786:	30 90 a6 00 	lds	r3, 0x00A6
    278a:	0a e8       	ldi	r16, 0x8A	; 138
    278c:	40 2e       	mov	r4, r16
    278e:	01 e0       	ldi	r16, 0x01	; 1
    2790:	50 2e       	mov	r5, r16

	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg)
	{
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
		{
			if ((aIsb_Msg->DestId == Isb_Grp[GrpIndex].Id) & (aIsb_Msg->DestId != 0))
    2792:	f5 01       	movw	r30, r10
    2794:	21 81       	ldd	r18, Z+1	; 0x01
    2796:	32 81       	ldd	r19, Z+2	; 0x02
    2798:	f2 01       	movw	r30, r4
    279a:	80 81       	ld	r24, Z
    279c:	91 81       	ldd	r25, Z+1	; 0x01
    279e:	28 17       	cp	r18, r24
    27a0:	39 07       	cpc	r19, r25
    27a2:	09 f0       	breq	.+2      	; 0x27a6 <Isb_Obj_Rx+0x5a>
    27a4:	f0 c0       	rjmp	.+480    	; 0x2986 <Isb_Obj_Rx+0x23a>
    27a6:	23 2b       	or	r18, r19
    27a8:	09 f4       	brne	.+2      	; 0x27ac <Isb_Obj_Rx+0x60>
    27aa:	ed c0       	rjmp	.+474    	; 0x2986 <Isb_Obj_Rx+0x23a>
    27ac:	13 e0       	ldi	r17, 0x03	; 3
    27ae:	e1 2e       	mov	r14, r17
    27b0:	11 e0       	ldi	r17, 0x01	; 1
    27b2:	f1 2e       	mov	r15, r17
    27b4:	00 e0       	ldi	r16, 0x00	; 0
    27b6:	10 e0       	ldi	r17, 0x00	; 0
					{
//						uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_Ch_Array[ObjIndex]);
//						uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_Obj_Array[ObjIndex]);
// TODO:
uint8_t Obj = ObjIndex;
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED))
    27b8:	68 01       	movw	r12, r16
    27ba:	b3 e0       	ldi	r27, 0x03	; 3
    27bc:	cc 0c       	add	r12, r12
    27be:	dd 1c       	adc	r13, r13
    27c0:	ba 95       	dec	r27
    27c2:	e1 f7       	brne	.-8      	; 0x27bc <Isb_Obj_Rx+0x70>
    27c4:	c0 0e       	add	r12, r16
    27c6:	d1 1e       	adc	r13, r17
    27c8:	23 e0       	ldi	r18, 0x03	; 3
    27ca:	31 e0       	ldi	r19, 0x01	; 1
    27cc:	c2 0e       	add	r12, r18
    27ce:	d3 1e       	adc	r13, r19
    27d0:	f6 01       	movw	r30, r12
    27d2:	80 81       	ld	r24, Z
    27d4:	80 ff       	sbrs	r24, 0
    27d6:	cd c0       	rjmp	.+410    	; 0x2972 <Isb_Obj_Rx+0x226>
						{
							if (Obj == Isb_Grp[GrpIndex].Obj)
    27d8:	f2 01       	movw	r30, r4
    27da:	82 81       	ldd	r24, Z+2	; 0x02
    27dc:	08 17       	cp	r16, r24
    27de:	09 f0       	breq	.+2      	; 0x27e2 <Isb_Obj_Rx+0x96>
    27e0:	c8 c0       	rjmp	.+400    	; 0x2972 <Isb_Obj_Rx+0x226>
							{
								uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
    27e2:	f7 01       	movw	r30, r14
    27e4:	21 81       	ldd	r18, Z+1	; 0x01
	uint8_t Isb_Obj_getDlc(uint8_t aTop)
	{

		uint8_t Dlc = 0;

		switch (aTop)
    27e6:	25 30       	cpi	r18, 0x05	; 5
    27e8:	69 f0       	breq	.+26     	; 0x2804 <Isb_Obj_Rx+0xb8>
    27ea:	26 30       	cpi	r18, 0x06	; 6
    27ec:	18 f4       	brcc	.+6      	; 0x27f4 <Isb_Obj_Rx+0xa8>
    27ee:	21 30       	cpi	r18, 0x01	; 1
    27f0:	29 f4       	brne	.+10     	; 0x27fc <Isb_Obj_Rx+0xb0>
    27f2:	06 c0       	rjmp	.+12     	; 0x2800 <Isb_Obj_Rx+0xb4>
    27f4:	26 30       	cpi	r18, 0x06	; 6
    27f6:	41 f0       	breq	.+16     	; 0x2808 <Isb_Obj_Rx+0xbc>
    27f8:	27 30       	cpi	r18, 0x07	; 7
    27fa:	41 f0       	breq	.+16     	; 0x280c <Isb_Obj_Rx+0xc0>
    27fc:	40 e0       	ldi	r20, 0x00	; 0
    27fe:	07 c0       	rjmp	.+14     	; 0x280e <Isb_Obj_Rx+0xc2>
    2800:	44 e0       	ldi	r20, 0x04	; 4
    2802:	05 c0       	rjmp	.+10     	; 0x280e <Isb_Obj_Rx+0xc2>
    2804:	45 e0       	ldi	r20, 0x05	; 5
    2806:	03 c0       	rjmp	.+6      	; 0x280e <Isb_Obj_Rx+0xc2>
    2808:	46 e0       	ldi	r20, 0x06	; 6
    280a:	01 c0       	rjmp	.+2      	; 0x280e <Isb_Obj_Rx+0xc2>
    280c:	48 e0       	ldi	r20, 0x08	; 8
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED))
						{
							if (Obj == Isb_Grp[GrpIndex].Obj)
							{
								uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
								if ((aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK) == Dlc)
    280e:	f5 01       	movw	r30, r10
    2810:	80 81       	ld	r24, Z
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	8f 70       	andi	r24, 0x0F	; 15
    2816:	90 70       	andi	r25, 0x00	; 0
    2818:	84 2e       	mov	r8, r20
    281a:	99 24       	eor	r9, r9
    281c:	88 15       	cp	r24, r8
    281e:	99 05       	cpc	r25, r9
    2820:	09 f0       	breq	.+2      	; 0x2824 <Isb_Obj_Rx+0xd8>
    2822:	a7 c0       	rjmp	.+334    	; 0x2972 <Isb_Obj_Rx+0x226>
								{
									if (aIsb_Msg->Data[0] == Isb_Obj[ObjIndex].Top)
    2824:	85 81       	ldd	r24, Z+5	; 0x05
    2826:	82 17       	cp	r24, r18
    2828:	09 f0       	breq	.+2      	; 0x282c <Isb_Obj_Rx+0xe0>
    282a:	a3 c0       	rjmp	.+326    	; 0x2972 <Isb_Obj_Rx+0x226>
									{
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ)
    282c:	86 81       	ldd	r24, Z+6	; 0x06
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	83 70       	andi	r24, 0x03	; 3
    2832:	90 70       	andi	r25, 0x00	; 0
    2834:	89 2b       	or	r24, r25
    2836:	b9 f5       	brne	.+110    	; 0x28a6 <Isb_Obj_Rx+0x15a>
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ))
    2838:	f6 01       	movw	r30, r12
    283a:	80 81       	ld	r24, Z
    283c:	81 ff       	sbrs	r24, 1
    283e:	33 c0       	rjmp	.+102    	; 0x28a6 <Isb_Obj_Rx+0x15a>
											{
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
												TxMsg.DestId = aIsb_Msg->DestId;
    2840:	f5 01       	movw	r30, r10
    2842:	61 80       	ldd	r6, Z+1	; 0x01
    2844:	72 80       	ldd	r7, Z+2	; 0x02
												TxMsg.SourceId = Isb_Node_Id;
												TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
    2846:	2e 83       	std	Y+6, r18	; 0x06
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
    2848:	f1 e0       	ldi	r31, 0x01	; 1
    284a:	ff 83       	std	Y+7, r31	; 0x07
												TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
    284c:	f7 01       	movw	r30, r14
    284e:	82 81       	ldd	r24, Z+2	; 0x02
    2850:	88 87       	std	Y+8, r24	; 0x08
    2852:	90 e0       	ldi	r25, 0x00	; 0
												for (uint8_t i = 0; i < (Dlc - 3); i++)
    2854:	b4 01       	movw	r22, r8
    2856:	63 50       	subi	r22, 0x03	; 3
    2858:	70 40       	sbci	r23, 0x00	; 0
												{
													TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
    285a:	98 01       	movw	r18, r16
    285c:	a3 e0       	ldi	r26, 0x03	; 3
    285e:	22 0f       	add	r18, r18
    2860:	33 1f       	adc	r19, r19
    2862:	aa 95       	dec	r26
    2864:	e1 f7       	brne	.-8      	; 0x285e <Isb_Obj_Rx+0x112>
    2866:	20 0f       	add	r18, r16
    2868:	31 1f       	adc	r19, r17
    286a:	2d 5f       	subi	r18, 0xFD	; 253
    286c:	3e 4f       	sbci	r19, 0xFE	; 254
    286e:	0c c0       	rjmp	.+24     	; 0x2888 <Isb_Obj_Rx+0x13c>
    2870:	e9 e0       	ldi	r30, 0x09	; 9
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	ec 0f       	add	r30, r28
    2876:	fd 1f       	adc	r31, r29
    2878:	ea 0f       	add	r30, r26
    287a:	fb 1f       	adc	r31, r27
    287c:	a2 0f       	add	r26, r18
    287e:	b3 1f       	adc	r27, r19
    2880:	13 96       	adiw	r26, 0x03	; 3
    2882:	8c 91       	ld	r24, X
    2884:	80 83       	st	Z, r24
												TxMsg.DestId = aIsb_Msg->DestId;
												TxMsg.SourceId = Isb_Node_Id;
												TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
												TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
												for (uint8_t i = 0; i < (Dlc - 3); i++)
    2886:	9f 5f       	subi	r25, 0xFF	; 255
    2888:	a9 2f       	mov	r26, r25
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	a6 17       	cp	r26, r22
    288e:	b7 07       	cpc	r27, r23
    2890:	7c f3       	brlt	.-34     	; 0x2870 <Isb_Obj_Rx+0x124>
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ))
											{
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
												TxMsg.DestId = aIsb_Msg->DestId;
												TxMsg.SourceId = Isb_Node_Id;
    2892:	3d 82       	std	Y+5, r3	; 0x05
    2894:	2c 82       	std	Y+4, r2	; 0x04
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ))
											{
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
												TxMsg.DestId = aIsb_Msg->DestId;
    2896:	7b 82       	std	Y+3, r7	; 0x03
    2898:	6a 82       	std	Y+2, r6	; 0x02
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ)
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ))
											{
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
    289a:	40 62       	ori	r20, 0x20	; 32
    289c:	49 83       	std	Y+1, r20	; 0x01
												TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
												for (uint8_t i = 0; i < (Dlc - 3); i++)
												{
													TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
												}
												Isb_SendMsg(&TxMsg);
    289e:	ce 01       	movw	r24, r28
    28a0:	01 96       	adiw	r24, 0x01	; 1
    28a2:	0e 94 91 13 	call	0x2722	; 0x2722 <Isb_SendMsg>
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_ANSWER)
    28a6:	f5 01       	movw	r30, r10
    28a8:	86 81       	ldd	r24, Z+6	; 0x06
    28aa:	83 70       	andi	r24, 0x03	; 3
    28ac:	81 30       	cpi	r24, 0x01	; 1
    28ae:	59 f5       	brne	.+86     	; 0x2906 <Isb_Obj_Rx+0x1ba>
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_UPDATE))
    28b0:	f6 01       	movw	r30, r12
    28b2:	80 81       	ld	r24, Z
    28b4:	84 ff       	sbrs	r24, 4
    28b6:	27 c0       	rjmp	.+78     	; 0x2906 <Isb_Obj_Rx+0x1ba>
											{
												if (aIsb_Msg->Data[2] == Isb_Obj[ObjIndex].Tov)
    28b8:	f5 01       	movw	r30, r10
    28ba:	97 81       	ldd	r25, Z+7	; 0x07
    28bc:	f7 01       	movw	r30, r14
    28be:	82 81       	ldd	r24, Z+2	; 0x02
    28c0:	98 17       	cp	r25, r24
    28c2:	09 f5       	brne	.+66     	; 0x2906 <Isb_Obj_Rx+0x1ba>
    28c4:	90 e0       	ldi	r25, 0x00	; 0
												{
													for (uint8_t i = 0; i < (Dlc - 3); i++)
    28c6:	a4 01       	movw	r20, r8
    28c8:	43 50       	subi	r20, 0x03	; 3
    28ca:	50 40       	sbci	r21, 0x00	; 0
													{
														Isb_Obj[ObjIndex].Data[i] = aIsb_Msg->Data[i + 3];
    28cc:	98 01       	movw	r18, r16
    28ce:	f3 e0       	ldi	r31, 0x03	; 3
    28d0:	22 0f       	add	r18, r18
    28d2:	33 1f       	adc	r19, r19
    28d4:	fa 95       	dec	r31
    28d6:	e1 f7       	brne	.-8      	; 0x28d0 <Isb_Obj_Rx+0x184>
    28d8:	20 0f       	add	r18, r16
    28da:	31 1f       	adc	r19, r17
    28dc:	2d 5f       	subi	r18, 0xFD	; 253
    28de:	3e 4f       	sbci	r19, 0xFE	; 254
    28e0:	09 c0       	rjmp	.+18     	; 0x28f4 <Isb_Obj_Rx+0x1a8>
    28e2:	f9 01       	movw	r30, r18
    28e4:	ea 0f       	add	r30, r26
    28e6:	fb 1f       	adc	r31, r27
    28e8:	aa 0d       	add	r26, r10
    28ea:	bb 1d       	adc	r27, r11
    28ec:	18 96       	adiw	r26, 0x08	; 8
    28ee:	8c 91       	ld	r24, X
    28f0:	83 83       	std	Z+3, r24	; 0x03
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_UPDATE))
											{
												if (aIsb_Msg->Data[2] == Isb_Obj[ObjIndex].Tov)
												{
													for (uint8_t i = 0; i < (Dlc - 3); i++)
    28f2:	9f 5f       	subi	r25, 0xFF	; 255
    28f4:	a9 2f       	mov	r26, r25
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	a4 17       	cp	r26, r20
    28fa:	b5 07       	cpc	r27, r21
    28fc:	94 f3       	brlt	.-28     	; 0x28e2 <Isb_Obj_Rx+0x196>
													{
														Isb_Obj[ObjIndex].Data[i] = aIsb_Msg->Data[i + 3];
													}
													Isb_Obj[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    28fe:	f7 01       	movw	r30, r14
    2900:	80 81       	ld	r24, Z
    2902:	8f 7d       	andi	r24, 0xDF	; 223
    2904:	80 83       	st	Z, r24
												}
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE)
    2906:	f5 01       	movw	r30, r10
    2908:	86 81       	ldd	r24, Z+6	; 0x06
    290a:	83 70       	andi	r24, 0x03	; 3
    290c:	82 30       	cpi	r24, 0x02	; 2
    290e:	89 f5       	brne	.+98     	; 0x2972 <Isb_Obj_Rx+0x226>
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE))
    2910:	f6 01       	movw	r30, r12
    2912:	80 81       	ld	r24, Z
    2914:	82 ff       	sbrs	r24, 2
    2916:	2d c0       	rjmp	.+90     	; 0x2972 <Isb_Obj_Rx+0x226>
											{
												if (aIsb_Msg->Data[2] == Isb_Obj[ObjIndex].Tov)
    2918:	f5 01       	movw	r30, r10
    291a:	97 81       	ldd	r25, Z+7	; 0x07
    291c:	f7 01       	movw	r30, r14
    291e:	82 81       	ldd	r24, Z+2	; 0x02
    2920:	98 17       	cp	r25, r24
    2922:	39 f5       	brne	.+78     	; 0x2972 <Isb_Obj_Rx+0x226>
    2924:	50 e0       	ldi	r21, 0x00	; 0
												{
													for (uint8_t i = 0; i < (Dlc - 3); i++)
    2926:	b4 01       	movw	r22, r8
    2928:	63 50       	subi	r22, 0x03	; 3
    292a:	70 40       	sbci	r23, 0x00	; 0
													{
														if (Isb_Obj[ObjIndex].Data[i] != aIsb_Msg->Data[i + 3])
    292c:	98 01       	movw	r18, r16
    292e:	e3 e0       	ldi	r30, 0x03	; 3
    2930:	22 0f       	add	r18, r18
    2932:	33 1f       	adc	r19, r19
    2934:	ea 95       	dec	r30
    2936:	e1 f7       	brne	.-8      	; 0x2930 <Isb_Obj_Rx+0x1e4>
    2938:	20 0f       	add	r18, r16
    293a:	31 1f       	adc	r19, r17
    293c:	2d 5f       	subi	r18, 0xFD	; 253
    293e:	3e 4f       	sbci	r19, 0xFE	; 254
    2940:	0f c0       	rjmp	.+30     	; 0x2960 <Isb_Obj_Rx+0x214>
    2942:	f5 01       	movw	r30, r10
    2944:	e8 0f       	add	r30, r24
    2946:	f9 1f       	adc	r31, r25
    2948:	40 85       	ldd	r20, Z+8	; 0x08
    294a:	f9 01       	movw	r30, r18
    294c:	e8 0f       	add	r30, r24
    294e:	f9 1f       	adc	r31, r25
    2950:	83 81       	ldd	r24, Z+3	; 0x03
    2952:	84 17       	cp	r24, r20
    2954:	21 f0       	breq	.+8      	; 0x295e <Isb_Obj_Rx+0x212>
														{
															Isb_Obj[ObjIndex].Data[i] = aIsb_Msg->Data[i + 3];
    2956:	43 83       	std	Z+3, r20	; 0x03
															Isb_Obj[ObjIndex].IsChanged = TRUE;
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	f7 01       	movw	r30, r14
    295c:	80 87       	std	Z+8, r24	; 0x08
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE))
											{
												if (aIsb_Msg->Data[2] == Isb_Obj[ObjIndex].Tov)
												{
													for (uint8_t i = 0; i < (Dlc - 3); i++)
    295e:	5f 5f       	subi	r21, 0xFF	; 255
    2960:	85 2f       	mov	r24, r21
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	86 17       	cp	r24, r22
    2966:	97 07       	cpc	r25, r23
    2968:	64 f3       	brlt	.-40     	; 0x2942 <Isb_Obj_Rx+0x1f6>
														{
															Isb_Obj[ObjIndex].Data[i] = aIsb_Msg->Data[i + 3];
															Isb_Obj[ObjIndex].IsChanged = TRUE;
														}
													}
													Isb_Obj[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    296a:	f7 01       	movw	r30, r14
    296c:	80 81       	ld	r24, Z
    296e:	8f 7d       	andi	r24, 0xDF	; 223
    2970:	80 83       	st	Z, r24
    2972:	0f 5f       	subi	r16, 0xFF	; 255
    2974:	1f 4f       	sbci	r17, 0xFF	; 255
    2976:	29 e0       	ldi	r18, 0x09	; 9
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	e2 0e       	add	r14, r18
    297c:	f3 1e       	adc	r15, r19
		{
			if ((aIsb_Msg->DestId == Isb_Grp[GrpIndex].Id) & (aIsb_Msg->DestId != 0))
			{

				#if defined(ISB_OBJ_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_MAX; ObjIndex++)
    297e:	0e 30       	cpi	r16, 0x0E	; 14
    2980:	11 05       	cpc	r17, r1
    2982:	09 f0       	breq	.+2      	; 0x2986 <Isb_Obj_Rx+0x23a>
    2984:	19 cf       	rjmp	.-462    	; 0x27b8 <Isb_Obj_Rx+0x6c>
    2986:	83 e0       	ldi	r24, 0x03	; 3
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	48 0e       	add	r4, r24
    298c:	59 1e       	adc	r5, r25



	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg)
	{
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
    298e:	92 ea       	ldi	r25, 0xA2	; 162
    2990:	49 16       	cp	r4, r25
    2992:	91 e0       	ldi	r25, 0x01	; 1
    2994:	59 06       	cpc	r5, r25
    2996:	09 f0       	breq	.+2      	; 0x299a <Isb_Obj_Rx+0x24e>
    2998:	fc ce       	rjmp	.-520    	; 0x2792 <Isb_Obj_Rx+0x46>
					}
				#endif /* ISB_OBJ_MAX */

			}
		}
	}
    299a:	2d 96       	adiw	r28, 0x0d	; 13
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	f8 94       	cli
    29a0:	de bf       	out	0x3e, r29	; 62
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	cd bf       	out	0x3d, r28	; 61
    29a6:	cf 91       	pop	r28
    29a8:	df 91       	pop	r29
    29aa:	1f 91       	pop	r17
    29ac:	0f 91       	pop	r16
    29ae:	ff 90       	pop	r15
    29b0:	ef 90       	pop	r14
    29b2:	df 90       	pop	r13
    29b4:	cf 90       	pop	r12
    29b6:	bf 90       	pop	r11
    29b8:	af 90       	pop	r10
    29ba:	9f 90       	pop	r9
    29bc:	8f 90       	pop	r8
    29be:	7f 90       	pop	r7
    29c0:	6f 90       	pop	r6
    29c2:	5f 90       	pop	r5
    29c4:	4f 90       	pop	r4
    29c6:	3f 90       	pop	r3
    29c8:	2f 90       	pop	r2
    29ca:	08 95       	ret

000029cc <Isb_Obj_Exec>:
	#define ISB_OBJ_C_



	void Isb_Obj_Exec(void)
	{
    29cc:	2f 92       	push	r2
    29ce:	3f 92       	push	r3
    29d0:	4f 92       	push	r4
    29d2:	5f 92       	push	r5
    29d4:	6f 92       	push	r6
    29d6:	7f 92       	push	r7
    29d8:	8f 92       	push	r8
    29da:	9f 92       	push	r9
    29dc:	af 92       	push	r10
    29de:	bf 92       	push	r11
    29e0:	cf 92       	push	r12
    29e2:	df 92       	push	r13
    29e4:	ef 92       	push	r14
    29e6:	ff 92       	push	r15
    29e8:	0f 93       	push	r16
    29ea:	1f 93       	push	r17
    29ec:	df 93       	push	r29
    29ee:	cf 93       	push	r28
    29f0:	cd b7       	in	r28, 0x3d	; 61
    29f2:	de b7       	in	r29, 0x3e	; 62
    29f4:	2d 97       	sbiw	r28, 0x0d	; 13
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	cd bf       	out	0x3d, r28	; 61

		#if defined(ISB_OBJ_MAX)
		if (bit_is_set(Isb_Obj_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
    2a00:	80 91 aa 00 	lds	r24, 0x00AA
    2a04:	80 ff       	sbrs	r24, 0
    2a06:	fd c0       	rjmp	.+506    	; 0x2c02 <Isb_Obj_Exec+0x236>
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
    2a08:	80 90 a5 00 	lds	r8, 0x00A5
    2a0c:	90 90 a6 00 	lds	r9, 0x00A6
    2a10:	03 e0       	ldi	r16, 0x03	; 3
    2a12:	c0 2e       	mov	r12, r16
    2a14:	01 e0       	ldi	r16, 0x01	; 1
    2a16:	d0 2e       	mov	r13, r16
    2a18:	ee 24       	eor	r14, r14
    2a1a:	ff 24       	eor	r15, r15
									TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
									TxMsg.Data[1] = ISB_MSG_CTRL_CMD_READ;
									TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
									for (uint8_t i = 0; i < (Dlc - 3); i++)
									{
										TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
    2a1c:	19 e0       	ldi	r17, 0x09	; 9
    2a1e:	21 2e       	mov	r2, r17
    2a20:	31 2c       	mov	r3, r1
    2a22:	2c 0e       	add	r2, r28
    2a24:	3d 1e       	adc	r3, r29
									}
									Isb_SendMsg(&TxMsg);
    2a26:	2e 01       	movw	r4, r28
    2a28:	08 94       	sec
    2a2a:	41 1c       	adc	r4, r1
    2a2c:	51 1c       	adc	r5, r1
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
										TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
										TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    2a2e:	b2 e0       	ldi	r27, 0x02	; 2
    2a30:	6b 2e       	mov	r6, r27
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
    2a32:	7e 2c       	mov	r7, r14
		#if defined(ISB_OBJ_MAX)
		if (bit_is_set(Isb_Obj_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
		{
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_MAX; ObjIndex++)
			{
				uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_Ch_Array[ObjIndex]);
    2a34:	f7 01       	movw	r30, r14
    2a36:	ec 5a       	subi	r30, 0xAC	; 172
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	e4 91       	lpm	r30, Z+
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED))
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	ee 0f       	add	r30, r30
    2a40:	ff 1f       	adc	r31, r31
    2a42:	ed 54       	subi	r30, 0x4D	; 77
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	80 81       	ld	r24, Z
    2a48:	80 ff       	sbrs	r24, 0
    2a4a:	ca c0       	rjmp	.+404    	; 0x2be0 <Isb_Obj_Exec+0x214>
				{
					if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED))
    2a4c:	87 01       	movw	r16, r14
    2a4e:	e3 e0       	ldi	r30, 0x03	; 3
    2a50:	00 0f       	add	r16, r16
    2a52:	11 1f       	adc	r17, r17
    2a54:	ea 95       	dec	r30
    2a56:	e1 f7       	brne	.-8      	; 0x2a50 <Isb_Obj_Exec+0x84>
    2a58:	0e 0d       	add	r16, r14
    2a5a:	1f 1d       	adc	r17, r15
    2a5c:	0d 5f       	subi	r16, 0xFD	; 253
    2a5e:	1e 4f       	sbci	r17, 0xFE	; 254
    2a60:	f8 01       	movw	r30, r16
    2a62:	80 81       	ld	r24, Z
    2a64:	80 ff       	sbrs	r24, 0
    2a66:	bc c0       	rjmp	.+376    	; 0x2be0 <Isb_Obj_Exec+0x214>
					{
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND))
    2a68:	80 81       	ld	r24, Z
    2a6a:	83 ff       	sbrs	r24, 3
    2a6c:	5c c0       	rjmp	.+184    	; 0x2b26 <Isb_Obj_Exec+0x15a>
						{
							if (Isb_Obj[ObjIndex].IsChanged == TRUE)
    2a6e:	f6 01       	movw	r30, r12
    2a70:	80 85       	ldd	r24, Z+8	; 0x08
    2a72:	81 30       	cpi	r24, 0x01	; 1
    2a74:	09 f0       	breq	.+2      	; 0x2a78 <Isb_Obj_Exec+0xac>
    2a76:	57 c0       	rjmp	.+174    	; 0x2b26 <Isb_Obj_Exec+0x15a>
    2a78:	ea e8       	ldi	r30, 0x8A	; 138
    2a7a:	f1 e0       	ldi	r31, 0x01	; 1
								for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
								{
//									uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_Obj_Array[ObjIndex]);
// TODO:
uint8_t Obj = ObjIndex;
									if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
    2a7c:	a0 80       	ld	r10, Z
    2a7e:	b1 80       	ldd	r11, Z+1	; 0x01
    2a80:	82 81       	ldd	r24, Z+2	; 0x02
    2a82:	87 15       	cp	r24, r7
    2a84:	09 f0       	breq	.+2      	; 0x2a88 <Isb_Obj_Exec+0xbc>
    2a86:	47 c0       	rjmp	.+142    	; 0x2b16 <Isb_Obj_Exec+0x14a>
    2a88:	a1 14       	cp	r10, r1
    2a8a:	b1 04       	cpc	r11, r1
    2a8c:	09 f4       	brne	.+2      	; 0x2a90 <Isb_Obj_Exec+0xc4>
    2a8e:	43 c0       	rjmp	.+134    	; 0x2b16 <Isb_Obj_Exec+0x14a>
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
    2a90:	f6 01       	movw	r30, r12
    2a92:	81 81       	ldd	r24, Z+1	; 0x01
	uint8_t Isb_Obj_getDlc(uint8_t aTop)
	{

		uint8_t Dlc = 0;

		switch (aTop)
    2a94:	85 30       	cpi	r24, 0x05	; 5
    2a96:	69 f0       	breq	.+26     	; 0x2ab2 <Isb_Obj_Exec+0xe6>
    2a98:	86 30       	cpi	r24, 0x06	; 6
    2a9a:	18 f4       	brcc	.+6      	; 0x2aa2 <Isb_Obj_Exec+0xd6>
    2a9c:	81 30       	cpi	r24, 0x01	; 1
    2a9e:	29 f4       	brne	.+10     	; 0x2aaa <Isb_Obj_Exec+0xde>
    2aa0:	06 c0       	rjmp	.+12     	; 0x2aae <Isb_Obj_Exec+0xe2>
    2aa2:	86 30       	cpi	r24, 0x06	; 6
    2aa4:	41 f0       	breq	.+16     	; 0x2ab6 <Isb_Obj_Exec+0xea>
    2aa6:	87 30       	cpi	r24, 0x07	; 7
    2aa8:	41 f0       	breq	.+16     	; 0x2aba <Isb_Obj_Exec+0xee>
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	07 c0       	rjmp	.+14     	; 0x2abc <Isb_Obj_Exec+0xf0>
    2aae:	94 e0       	ldi	r25, 0x04	; 4
    2ab0:	05 c0       	rjmp	.+10     	; 0x2abc <Isb_Obj_Exec+0xf0>
    2ab2:	95 e0       	ldi	r25, 0x05	; 5
    2ab4:	03 c0       	rjmp	.+6      	; 0x2abc <Isb_Obj_Exec+0xf0>
    2ab6:	96 e0       	ldi	r25, 0x06	; 6
    2ab8:	01 c0       	rjmp	.+2      	; 0x2abc <Isb_Obj_Exec+0xf0>
    2aba:	98 e0       	ldi	r25, 0x08	; 8
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
										TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
    2abc:	8e 83       	std	Y+6, r24	; 0x06
										TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    2abe:	6f 82       	std	Y+7, r6	; 0x07
										TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
    2ac0:	f6 01       	movw	r30, r12
    2ac2:	82 81       	ldd	r24, Z+2	; 0x02
    2ac4:	88 87       	std	Y+8, r24	; 0x08
    2ac6:	60 e0       	ldi	r22, 0x00	; 0
										for (uint8_t i = 0; i < (Dlc - 3); i++)
    2ac8:	49 2f       	mov	r20, r25
    2aca:	50 e0       	ldi	r21, 0x00	; 0
    2acc:	43 50       	subi	r20, 0x03	; 3
    2ace:	50 40       	sbci	r21, 0x00	; 0
										{
											TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
    2ad0:	97 01       	movw	r18, r14
    2ad2:	73 e0       	ldi	r23, 0x03	; 3
    2ad4:	22 0f       	add	r18, r18
    2ad6:	33 1f       	adc	r19, r19
    2ad8:	7a 95       	dec	r23
    2ada:	e1 f7       	brne	.-8      	; 0x2ad4 <Isb_Obj_Exec+0x108>
    2adc:	2e 0d       	add	r18, r14
    2ade:	3f 1d       	adc	r19, r15
    2ae0:	2d 5f       	subi	r18, 0xFD	; 253
    2ae2:	3e 4f       	sbci	r19, 0xFE	; 254
    2ae4:	09 c0       	rjmp	.+18     	; 0x2af8 <Isb_Obj_Exec+0x12c>
    2ae6:	f1 01       	movw	r30, r2
    2ae8:	ea 0f       	add	r30, r26
    2aea:	fb 1f       	adc	r31, r27
    2aec:	a2 0f       	add	r26, r18
    2aee:	b3 1f       	adc	r27, r19
    2af0:	13 96       	adiw	r26, 0x03	; 3
    2af2:	8c 91       	ld	r24, X
    2af4:	80 83       	st	Z, r24
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
										TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
										TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
										TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
										for (uint8_t i = 0; i < (Dlc - 3); i++)
    2af6:	6f 5f       	subi	r22, 0xFF	; 255
    2af8:	a6 2f       	mov	r26, r22
    2afa:	b0 e0       	ldi	r27, 0x00	; 0
    2afc:	a4 17       	cp	r26, r20
    2afe:	b5 07       	cpc	r27, r21
    2b00:	94 f3       	brlt	.-28     	; 0x2ae6 <Isb_Obj_Exec+0x11a>
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
    2b02:	9d 82       	std	Y+5, r9	; 0x05
    2b04:	8c 82       	std	Y+4, r8	; 0x04
									if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
    2b06:	bb 82       	std	Y+3, r11	; 0x03
    2b08:	aa 82       	std	Y+2, r10	; 0x02
uint8_t Obj = ObjIndex;
									if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
    2b0a:	90 62       	ori	r25, 0x20	; 32
    2b0c:	99 83       	std	Y+1, r25	; 0x01
										TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
										for (uint8_t i = 0; i < (Dlc - 3); i++)
										{
											TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
										}
										Isb_SendMsg(&TxMsg);
    2b0e:	c2 01       	movw	r24, r4
    2b10:	0e 94 91 13 	call	0x2722	; 0x2722 <Isb_SendMsg>
    2b14:	06 c0       	rjmp	.+12     	; 0x2b22 <Isb_Obj_Exec+0x156>
										break;
    2b16:	33 96       	adiw	r30, 0x03	; 3
					{
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND))
						{
							if (Isb_Obj[ObjIndex].IsChanged == TRUE)
							{
								for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	e2 3a       	cpi	r30, 0xA2	; 162
    2b1c:	f8 07       	cpc	r31, r24
    2b1e:	09 f0       	breq	.+2      	; 0x2b22 <Isb_Obj_Exec+0x156>
    2b20:	ad cf       	rjmp	.-166    	; 0x2a7c <Isb_Obj_Exec+0xb0>
										}
										Isb_SendMsg(&TxMsg);
										break;
									}
								}
								Isb_Obj[ObjIndex].IsChanged = FALSE;
    2b22:	f6 01       	movw	r30, r12
    2b24:	10 86       	std	Z+8, r1	; 0x08
							}
						}
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READONINIT))
    2b26:	f8 01       	movw	r30, r16
    2b28:	80 81       	ld	r24, Z
    2b2a:	85 ff       	sbrs	r24, 5
    2b2c:	59 c0       	rjmp	.+178    	; 0x2be0 <Isb_Obj_Exec+0x214>
    2b2e:	ea e8       	ldi	r30, 0x8A	; 138
    2b30:	f1 e0       	ldi	r31, 0x01	; 1
							for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
							{
//								uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_Obj_Array[ObjIndex]);
// TODO:
uint8_t Obj = ObjIndex;
								if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
    2b32:	00 81       	ld	r16, Z
    2b34:	11 81       	ldd	r17, Z+1	; 0x01
    2b36:	82 81       	ldd	r24, Z+2	; 0x02
    2b38:	87 15       	cp	r24, r7
    2b3a:	09 f0       	breq	.+2      	; 0x2b3e <Isb_Obj_Exec+0x172>
    2b3c:	4b c0       	rjmp	.+150    	; 0x2bd4 <Isb_Obj_Exec+0x208>
    2b3e:	01 15       	cp	r16, r1
    2b40:	11 05       	cpc	r17, r1
    2b42:	09 f4       	brne	.+2      	; 0x2b46 <Isb_Obj_Exec+0x17a>
    2b44:	47 c0       	rjmp	.+142    	; 0x2bd4 <Isb_Obj_Exec+0x208>
								{
									Isb_Msg_t TxMsg;
									uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
    2b46:	f6 01       	movw	r30, r12
    2b48:	81 81       	ldd	r24, Z+1	; 0x01
	uint8_t Isb_Obj_getDlc(uint8_t aTop)
	{

		uint8_t Dlc = 0;

		switch (aTop)
    2b4a:	85 30       	cpi	r24, 0x05	; 5
    2b4c:	69 f0       	breq	.+26     	; 0x2b68 <Isb_Obj_Exec+0x19c>
    2b4e:	86 30       	cpi	r24, 0x06	; 6
    2b50:	18 f4       	brcc	.+6      	; 0x2b58 <Isb_Obj_Exec+0x18c>
    2b52:	81 30       	cpi	r24, 0x01	; 1
    2b54:	29 f4       	brne	.+10     	; 0x2b60 <Isb_Obj_Exec+0x194>
    2b56:	06 c0       	rjmp	.+12     	; 0x2b64 <Isb_Obj_Exec+0x198>
    2b58:	86 30       	cpi	r24, 0x06	; 6
    2b5a:	41 f0       	breq	.+16     	; 0x2b6c <Isb_Obj_Exec+0x1a0>
    2b5c:	87 30       	cpi	r24, 0x07	; 7
    2b5e:	41 f0       	breq	.+16     	; 0x2b70 <Isb_Obj_Exec+0x1a4>
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	07 c0       	rjmp	.+14     	; 0x2b72 <Isb_Obj_Exec+0x1a6>
    2b64:	94 e0       	ldi	r25, 0x04	; 4
    2b66:	05 c0       	rjmp	.+10     	; 0x2b72 <Isb_Obj_Exec+0x1a6>
    2b68:	95 e0       	ldi	r25, 0x05	; 5
    2b6a:	03 c0       	rjmp	.+6      	; 0x2b72 <Isb_Obj_Exec+0x1a6>
    2b6c:	96 e0       	ldi	r25, 0x06	; 6
    2b6e:	01 c0       	rjmp	.+2      	; 0x2b72 <Isb_Obj_Exec+0x1a6>
    2b70:	98 e0       	ldi	r25, 0x08	; 8
									Isb_Msg_t TxMsg;
									uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
									TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
									TxMsg.DestId = Isb_Grp[GrpIndex].Id;
									TxMsg.SourceId = Isb_Node_Id;
									TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
    2b72:	8e 83       	std	Y+6, r24	; 0x06
									TxMsg.Data[1] = ISB_MSG_CTRL_CMD_READ;
    2b74:	1f 82       	std	Y+7, r1	; 0x07
									TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
    2b76:	f6 01       	movw	r30, r12
    2b78:	82 81       	ldd	r24, Z+2	; 0x02
    2b7a:	88 87       	std	Y+8, r24	; 0x08
    2b7c:	60 e0       	ldi	r22, 0x00	; 0
									for (uint8_t i = 0; i < (Dlc - 3); i++)
    2b7e:	49 2f       	mov	r20, r25
    2b80:	50 e0       	ldi	r21, 0x00	; 0
    2b82:	43 50       	subi	r20, 0x03	; 3
    2b84:	50 40       	sbci	r21, 0x00	; 0
									{
										TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
    2b86:	97 01       	movw	r18, r14
    2b88:	83 e0       	ldi	r24, 0x03	; 3
    2b8a:	22 0f       	add	r18, r18
    2b8c:	33 1f       	adc	r19, r19
    2b8e:	8a 95       	dec	r24
    2b90:	e1 f7       	brne	.-8      	; 0x2b8a <Isb_Obj_Exec+0x1be>
    2b92:	2e 0d       	add	r18, r14
    2b94:	3f 1d       	adc	r19, r15
    2b96:	2d 5f       	subi	r18, 0xFD	; 253
    2b98:	3e 4f       	sbci	r19, 0xFE	; 254
    2b9a:	09 c0       	rjmp	.+18     	; 0x2bae <Isb_Obj_Exec+0x1e2>
    2b9c:	f1 01       	movw	r30, r2
    2b9e:	ea 0f       	add	r30, r26
    2ba0:	fb 1f       	adc	r31, r27
    2ba2:	a2 0f       	add	r26, r18
    2ba4:	b3 1f       	adc	r27, r19
    2ba6:	13 96       	adiw	r26, 0x03	; 3
    2ba8:	8c 91       	ld	r24, X
    2baa:	80 83       	st	Z, r24
									TxMsg.DestId = Isb_Grp[GrpIndex].Id;
									TxMsg.SourceId = Isb_Node_Id;
									TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
									TxMsg.Data[1] = ISB_MSG_CTRL_CMD_READ;
									TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
									for (uint8_t i = 0; i < (Dlc - 3); i++)
    2bac:	6f 5f       	subi	r22, 0xFF	; 255
    2bae:	a6 2f       	mov	r26, r22
    2bb0:	b0 e0       	ldi	r27, 0x00	; 0
    2bb2:	a4 17       	cp	r26, r20
    2bb4:	b5 07       	cpc	r27, r21
    2bb6:	94 f3       	brlt	.-28     	; 0x2b9c <Isb_Obj_Exec+0x1d0>
								{
									Isb_Msg_t TxMsg;
									uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
									TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
									TxMsg.DestId = Isb_Grp[GrpIndex].Id;
									TxMsg.SourceId = Isb_Node_Id;
    2bb8:	9d 82       	std	Y+5, r9	; 0x05
    2bba:	8c 82       	std	Y+4, r8	; 0x04
								if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
								{
									Isb_Msg_t TxMsg;
									uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
									TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
									TxMsg.DestId = Isb_Grp[GrpIndex].Id;
    2bbc:	1b 83       	std	Y+3, r17	; 0x03
    2bbe:	0a 83       	std	Y+2, r16	; 0x02
uint8_t Obj = ObjIndex;
								if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
								{
									Isb_Msg_t TxMsg;
									uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
									TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
    2bc0:	90 62       	ori	r25, 0x20	; 32
    2bc2:	99 83       	std	Y+1, r25	; 0x01
									TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
									for (uint8_t i = 0; i < (Dlc - 3); i++)
									{
										TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
									}
									Isb_SendMsg(&TxMsg);
    2bc4:	c2 01       	movw	r24, r4
    2bc6:	0e 94 91 13 	call	0x2722	; 0x2722 <Isb_SendMsg>
									Isb_Obj[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    2bca:	f6 01       	movw	r30, r12
    2bcc:	80 81       	ld	r24, Z
    2bce:	8f 7d       	andi	r24, 0xDF	; 223
    2bd0:	80 83       	st	Z, r24
    2bd2:	06 c0       	rjmp	.+12     	; 0x2be0 <Isb_Obj_Exec+0x214>
									break;
    2bd4:	33 96       	adiw	r30, 0x03	; 3
								Isb_Obj[ObjIndex].IsChanged = FALSE;
							}
						}
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READONINIT))
						{
							for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	e2 3a       	cpi	r30, 0xA2	; 162
    2bda:	f8 07       	cpc	r31, r24
    2bdc:	09 f0       	breq	.+2      	; 0x2be0 <Isb_Obj_Exec+0x214>
    2bde:	a9 cf       	rjmp	.-174    	; 0x2b32 <Isb_Obj_Exec+0x166>
    2be0:	08 94       	sec
    2be2:	e1 1c       	adc	r14, r1
    2be4:	f1 1c       	adc	r15, r1
    2be6:	e9 e0       	ldi	r30, 0x09	; 9
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	ce 0e       	add	r12, r30
    2bec:	df 1e       	adc	r13, r31
	{

		#if defined(ISB_OBJ_MAX)
		if (bit_is_set(Isb_Obj_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
		{
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_MAX; ObjIndex++)
    2bee:	fe e0       	ldi	r31, 0x0E	; 14
    2bf0:	ef 16       	cp	r14, r31
    2bf2:	f1 04       	cpc	r15, r1
    2bf4:	09 f0       	breq	.+2      	; 0x2bf8 <Isb_Obj_Exec+0x22c>
    2bf6:	1d cf       	rjmp	.-454    	; 0x2a32 <Isb_Obj_Exec+0x66>
							}
						}
					}
				}
			}
			Isb_Obj_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    2bf8:	80 91 aa 00 	lds	r24, 0x00AA
    2bfc:	8e 7f       	andi	r24, 0xFE	; 254
    2bfe:	80 93 aa 00 	sts	0x00AA, r24
		}
		#endif /* ISB_OBJ_MAX */

	}
    2c02:	2d 96       	adiw	r28, 0x0d	; 13
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	cd bf       	out	0x3d, r28	; 61
    2c0e:	cf 91       	pop	r28
    2c10:	df 91       	pop	r29
    2c12:	1f 91       	pop	r17
    2c14:	0f 91       	pop	r16
    2c16:	ff 90       	pop	r15
    2c18:	ef 90       	pop	r14
    2c1a:	df 90       	pop	r13
    2c1c:	cf 90       	pop	r12
    2c1e:	bf 90       	pop	r11
    2c20:	af 90       	pop	r10
    2c22:	9f 90       	pop	r9
    2c24:	8f 90       	pop	r8
    2c26:	7f 90       	pop	r7
    2c28:	6f 90       	pop	r6
    2c2a:	5f 90       	pop	r5
    2c2c:	4f 90       	pop	r4
    2c2e:	3f 90       	pop	r3
    2c30:	2f 90       	pop	r2
    2c32:	08 95       	ret

00002c34 <Isb_Config_Rx>:
#ifndef ISB_SRV_CONFIG_C_
	#define ISB_SRV_CONFIG_C_



	void Isb_Config_Rx(Isb_Msg_t * aIsb_Msg) {
    2c34:	df 92       	push	r13
    2c36:	ef 92       	push	r14
    2c38:	ff 92       	push	r15
    2c3a:	0f 93       	push	r16
    2c3c:	1f 93       	push	r17
    2c3e:	df 93       	push	r29
    2c40:	cf 93       	push	r28
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
    2c46:	2d 97       	sbiw	r28, 0x0d	; 13
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	cd bf       	out	0x3d, r28	; 61
    2c52:	ac 01       	movw	r20, r24
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
    2c54:	fc 01       	movw	r30, r24
    2c56:	d0 80       	ld	r13, Z
    2c58:	6d 2d       	mov	r22, r13
    2c5a:	6f 70       	andi	r22, 0x0F	; 15
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
    2c5c:	e3 80       	ldd	r14, Z+3	; 0x03
    2c5e:	f4 80       	ldd	r15, Z+4	; 0x04
		MsgTx.SourceId = Isb_Node_Id;
    2c60:	00 91 a5 00 	lds	r16, 0x00A5
    2c64:	10 91 a6 00 	lds	r17, 0x00A6
    2c68:	dc 01       	movw	r26, r24
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	36 96       	adiw	r30, 0x06	; 6
		for (uint8_t i = 0; i < Dlc; i++) {
    2c6e:	9e 01       	movw	r18, r28
    2c70:	26 0f       	add	r18, r22
    2c72:	31 1d       	adc	r19, r1
    2c74:	2a 5f       	subi	r18, 0xFA	; 250
    2c76:	3f 4f       	sbci	r19, 0xFF	; 255
    2c78:	04 c0       	rjmp	.+8      	; 0x2c82 <Isb_Config_Rx+0x4e>
			MsgTx.Data[i] = aIsb_Msg->Data[i];
    2c7a:	14 96       	adiw	r26, 0x04	; 4
    2c7c:	8c 91       	ld	r24, X
    2c7e:	14 97       	sbiw	r26, 0x04	; 4
    2c80:	81 93       	st	Z+, r24
    2c82:	11 96       	adiw	r26, 0x01	; 1
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
		MsgTx.SourceId = Isb_Node_Id;
		for (uint8_t i = 0; i < Dlc; i++) {
    2c84:	e2 17       	cp	r30, r18
    2c86:	f3 07       	cpc	r31, r19
    2c88:	c1 f7       	brne	.-16     	; 0x2c7a <Isb_Config_Rx+0x46>
			MsgTx.Data[i] = aIsb_Msg->Data[i];
		}
		if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_SETMODE) {
    2c8a:	fa 01       	movw	r30, r20
    2c8c:	85 81       	ldd	r24, Z+5	; 0x05
    2c8e:	82 30       	cpi	r24, 0x02	; 2
    2c90:	09 f0       	breq	.+2      	; 0x2c94 <Isb_Config_Rx+0x60>
    2c92:	90 c0       	rjmp	.+288    	; 0x2db4 <Isb_Config_Rx+0x180>
			if (Dlc == ISB_MSG_FLAGS_DLC_2) {
    2c94:	62 30       	cpi	r22, 0x02	; 2
    2c96:	09 f0       	breq	.+2      	; 0x2c9a <Isb_Config_Rx+0x66>
    2c98:	46 c1       	rjmp	.+652    	; 0x2f26 <Isb_Config_Rx+0x2f2>
				MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_2;
				MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    2c9a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c9c:	80 6c       	ori	r24, 0xC0	; 192
    2c9e:	8e 83       	std	Y+6, r24	; 0x06
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__BL_NORM) {
    2ca0:	26 81       	ldd	r18, Z+6	; 0x06
    2ca2:	22 23       	and	r18, r18
    2ca4:	c1 f4       	brne	.+48     	; 0x2cd6 <Isb_Config_Rx+0xa2>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2ca6:	e1 99       	sbic	0x1c, 1	; 28
    2ca8:	fe cf       	rjmp	.-4      	; 0x2ca6 <Isb_Config_Rx+0x72>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2caa:	82 e1       	ldi	r24, 0x12	; 18
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	9f bb       	out	0x1f, r25	; 31
    2cb0:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2cb2:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2cb4:	8d b3       	in	r24, 0x1d	; 29
	}



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
    2cb6:	88 23       	and	r24, r24
    2cb8:	09 f4       	brne	.+2      	; 0x2cbc <Isb_Config_Rx+0x88>
    2cba:	62 c0       	rjmp	.+196    	; 0x2d80 <Isb_Config_Rx+0x14c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2cbc:	e1 99       	sbic	0x1c, 1	; 28
    2cbe:	fe cf       	rjmp	.-4      	; 0x2cbc <Isb_Config_Rx+0x88>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2cc0:	82 e1       	ldi	r24, 0x12	; 18
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	9f bb       	out	0x1f, r25	; 31
    2cc6:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2cc8:	1d ba       	out	0x1d, r1	; 29

    __asm__ __volatile__ (
    2cca:	0f b6       	in	r0, 0x3f	; 63
    2ccc:	f8 94       	cli
    2cce:	e2 9a       	sbi	0x1c, 2	; 28
    2cd0:	e1 9a       	sbi	0x1c, 1	; 28
    2cd2:	0f be       	out	0x3f, r0	; 63
    2cd4:	6e c0       	rjmp	.+220    	; 0x2db2 <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__BL_FLASH) {
    2cd6:	21 30       	cpi	r18, 0x01	; 1
    2cd8:	c9 f4       	brne	.+50     	; 0x2d0c <Isb_Config_Rx+0xd8>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2cda:	e1 99       	sbic	0x1c, 1	; 28
    2cdc:	fe cf       	rjmp	.-4      	; 0x2cda <Isb_Config_Rx+0xa6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2cde:	82 e1       	ldi	r24, 0x12	; 18
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	9f bb       	out	0x1f, r25	; 31
    2ce4:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2ce6:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2ce8:	8d b3       	in	r24, 0x1d	; 29
    2cea:	81 30       	cpi	r24, 0x01	; 1
    2cec:	09 f4       	brne	.+2      	; 0x2cf0 <Isb_Config_Rx+0xbc>
    2cee:	61 c0       	rjmp	.+194    	; 0x2db2 <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2cf0:	e1 99       	sbic	0x1c, 1	; 28
    2cf2:	fe cf       	rjmp	.-4      	; 0x2cf0 <Isb_Config_Rx+0xbc>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2cf4:	82 e1       	ldi	r24, 0x12	; 18
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	9f bb       	out	0x1f, r25	; 31
    2cfa:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	e2 9a       	sbi	0x1c, 2	; 28
    2d06:	e1 9a       	sbi	0x1c, 1	; 28
    2d08:	0f be       	out	0x3f, r0	; 63
    2d0a:	53 c0       	rjmp	.+166    	; 0x2db2 <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_FLASH);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__FW_NORM) {
    2d0c:	28 30       	cpi	r18, 0x08	; 8
    2d0e:	09 f0       	breq	.+2      	; 0x2d12 <Isb_Config_Rx+0xde>
    2d10:	37 c0       	rjmp	.+110    	; 0x2d80 <Isb_Config_Rx+0x14c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2d12:	e1 99       	sbic	0x1c, 1	; 28
    2d14:	fe cf       	rjmp	.-4      	; 0x2d12 <Isb_Config_Rx+0xde>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d16:	8b e1       	ldi	r24, 0x1B	; 27
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	9f bb       	out	0x1f, r25	; 31
    2d1c:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2d1e:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2d20:	2d b3       	in	r18, 0x1d	; 29
					uint8_t crc = lib_eep_read_byte((uint8_t *)EEP__ISB_CONFIG_CRC);
					crc++;
    2d22:	2f 5f       	subi	r18, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2d24:	e1 99       	sbic	0x1c, 1	; 28
    2d26:	fe cf       	rjmp	.-4      	; 0x2d24 <Isb_Config_Rx+0xf0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d28:	8b e1       	ldi	r24, 0x1B	; 27
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	9f bb       	out	0x1f, r25	; 31
    2d2e:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2d30:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2d32:	8d b3       	in	r24, 0x1d	; 29
    2d34:	82 17       	cp	r24, r18
    2d36:	61 f0       	breq	.+24     	; 0x2d50 <Isb_Config_Rx+0x11c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2d38:	e1 99       	sbic	0x1c, 1	; 28
    2d3a:	fe cf       	rjmp	.-4      	; 0x2d38 <Isb_Config_Rx+0x104>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d3c:	8b e1       	ldi	r24, 0x1B	; 27
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	9f bb       	out	0x1f, r25	; 31
    2d42:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2d44:	2d bb       	out	0x1d, r18	; 29

    __asm__ __volatile__ (
    2d46:	0f b6       	in	r0, 0x3f	; 63
    2d48:	f8 94       	cli
    2d4a:	e2 9a       	sbi	0x1c, 2	; 28
    2d4c:	e1 9a       	sbi	0x1c, 1	; 28
    2d4e:	0f be       	out	0x3f, r0	; 63
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2d50:	e1 99       	sbic	0x1c, 1	; 28
    2d52:	fe cf       	rjmp	.-4      	; 0x2d50 <Isb_Config_Rx+0x11c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d54:	82 e1       	ldi	r24, 0x12	; 18
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	9f bb       	out	0x1f, r25	; 31
    2d5a:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2d5c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2d5e:	8d b3       	in	r24, 0x1d	; 29
    2d60:	88 30       	cpi	r24, 0x08	; 8
    2d62:	39 f1       	breq	.+78     	; 0x2db2 <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2d64:	e1 99       	sbic	0x1c, 1	; 28
    2d66:	fe cf       	rjmp	.-4      	; 0x2d64 <Isb_Config_Rx+0x130>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d68:	82 e1       	ldi	r24, 0x12	; 18
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	9f bb       	out	0x1f, r25	; 31
    2d6e:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2d70:	88 e0       	ldi	r24, 0x08	; 8
    2d72:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	e2 9a       	sbi	0x1c, 2	; 28
    2d7a:	e1 9a       	sbi	0x1c, 1	; 28
    2d7c:	0f be       	out	0x3f, r0	; 63
    2d7e:	19 c0       	rjmp	.+50     	; 0x2db2 <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_CONFIG_CRC, crc);
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__FW_NORM);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__FW_CFG) {
    2d80:	29 30       	cpi	r18, 0x09	; 9
    2d82:	b9 f4       	brne	.+46     	; 0x2db2 <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2d84:	e1 99       	sbic	0x1c, 1	; 28
    2d86:	fe cf       	rjmp	.-4      	; 0x2d84 <Isb_Config_Rx+0x150>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d88:	82 e1       	ldi	r24, 0x12	; 18
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	9f bb       	out	0x1f, r25	; 31
    2d8e:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2d90:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2d92:	8d b3       	in	r24, 0x1d	; 29
    2d94:	89 30       	cpi	r24, 0x09	; 9
    2d96:	69 f0       	breq	.+26     	; 0x2db2 <Isb_Config_Rx+0x17e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2d98:	e1 99       	sbic	0x1c, 1	; 28
    2d9a:	fe cf       	rjmp	.-4      	; 0x2d98 <Isb_Config_Rx+0x164>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d9c:	82 e1       	ldi	r24, 0x12	; 18
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	9f bb       	out	0x1f, r25	; 31
    2da2:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2da4:	89 e0       	ldi	r24, 0x09	; 9
    2da6:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	f8 94       	cli
    2dac:	e2 9a       	sbi	0x1c, 2	; 28
    2dae:	e1 9a       	sbi	0x1c, 1	; 28
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	ff cf       	rjmp	.-2      	; 0x2db2 <Isb_Config_Rx+0x17e>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__FW_CFG);
				}
				Node_Reboot();
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_INITEEPROM) {
    2db4:	86 30       	cpi	r24, 0x06	; 6
    2db6:	09 f0       	breq	.+2      	; 0x2dba <Isb_Config_Rx+0x186>
    2db8:	43 c0       	rjmp	.+134    	; 0x2e40 <Isb_Config_Rx+0x20c>
			if (Dlc == ISB_MSG_FLAGS_DLC_1) {
    2dba:	61 30       	cpi	r22, 0x01	; 1
    2dbc:	09 f0       	breq	.+2      	; 0x2dc0 <Isb_Config_Rx+0x18c>
    2dbe:	b3 c0       	rjmp	.+358    	; 0x2f26 <Isb_Config_Rx+0x2f2>
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
    2dc0:	80 91 a8 00 	lds	r24, 0x00A8
    2dc4:	89 30       	cpi	r24, 0x09	; 9
    2dc6:	09 f0       	breq	.+2      	; 0x2dca <Isb_Config_Rx+0x196>
    2dc8:	ae c0       	rjmp	.+348    	; 0x2f26 <Isb_Config_Rx+0x2f2>
					MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_1;
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
    2dca:	80 91 a7 00 	lds	r24, 0x00A7
    2dce:	28 2f       	mov	r18, r24
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
						wdt_reset();
    2dd2:	a8 95       	wdr
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2dd4:	e1 99       	sbic	0x1c, 1	; 28
    2dd6:	fe cf       	rjmp	.-4      	; 0x2dd4 <Isb_Config_Rx+0x1a0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2dd8:	3f bb       	out	0x1f, r19	; 31
    2dda:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2ddc:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2dde:	8d b3       	in	r24, 0x1d	; 29
    2de0:	88 23       	and	r24, r24
    2de2:	51 f0       	breq	.+20     	; 0x2df8 <Isb_Config_Rx+0x1c4>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2de4:	e1 99       	sbic	0x1c, 1	; 28
    2de6:	fe cf       	rjmp	.-4      	; 0x2de4 <Isb_Config_Rx+0x1b0>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2de8:	3f bb       	out	0x1f, r19	; 31
    2dea:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    2dec:	1d ba       	out	0x1d, r1	; 29

    __asm__ __volatile__ (
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	f8 94       	cli
    2df2:	e2 9a       	sbi	0x1c, 2	; 28
    2df4:	e1 9a       	sbi	0x1c, 1	; 28
    2df6:	0f be       	out	0x3f, r0	; 63
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_INITEEPROM) {
			if (Dlc == ISB_MSG_FLAGS_DLC_1) {
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
					MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_1;
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
    2df8:	2f 5f       	subi	r18, 0xFF	; 255
    2dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    2dfc:	f2 e0       	ldi	r31, 0x02	; 2
    2dfe:	20 30       	cpi	r18, 0x00	; 0
    2e00:	3f 07       	cpc	r19, r31
    2e02:	38 f3       	brcs	.-50     	; 0x2dd2 <Isb_Config_Rx+0x19e>
    2e04:	2c e1       	ldi	r18, 0x1C	; 28
    2e06:	30 e0       	ldi	r19, 0x00	; 0
						wdt_reset();
						lib_eep_write_byte((uint8_t *) ee_Addr, 0x00);
					}
					for (uint8_t i = 0; i < 4; i++) {
						lib_eep_write_byte((uint8_t *)(EEP__ISB_CONFIG_CODE_0 + i), Isb_Firmware_Code[i]);
    2e08:	f9 01       	movw	r30, r18
    2e0a:	ec 5b       	subi	r30, 0xBC	; 188
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2e10:	e1 99       	sbic	0x1c, 1	; 28
    2e12:	fe cf       	rjmp	.-4      	; 0x2e10 <Isb_Config_Rx+0x1dc>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2e14:	3f bb       	out	0x1f, r19	; 31
    2e16:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    2e18:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2e1a:	8d b3       	in	r24, 0x1d	; 29
    2e1c:	8e 17       	cp	r24, r30
    2e1e:	51 f0       	breq	.+20     	; 0x2e34 <Isb_Config_Rx+0x200>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2e20:	e1 99       	sbic	0x1c, 1	; 28
    2e22:	fe cf       	rjmp	.-4      	; 0x2e20 <Isb_Config_Rx+0x1ec>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2e24:	3f bb       	out	0x1f, r19	; 31
    2e26:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    2e28:	ed bb       	out	0x1d, r30	; 29

    __asm__ __volatile__ (
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	e2 9a       	sbi	0x1c, 2	; 28
    2e30:	e1 9a       	sbi	0x1c, 1	; 28
    2e32:	0f be       	out	0x3f, r0	; 63
    2e34:	2f 5f       	subi	r18, 0xFF	; 255
    2e36:	3f 4f       	sbci	r19, 0xFF	; 255
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
						wdt_reset();
						lib_eep_write_byte((uint8_t *) ee_Addr, 0x00);
					}
					for (uint8_t i = 0; i < 4; i++) {
    2e38:	20 32       	cpi	r18, 0x20	; 32
    2e3a:	31 05       	cpc	r19, r1
    2e3c:	29 f7       	brne	.-54     	; 0x2e08 <Isb_Config_Rx+0x1d4>
    2e3e:	ff cf       	rjmp	.-2      	; 0x2e3e <Isb_Config_Rx+0x20a>
					}
					Node_Reboot();
				}
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_READEEPROMBLOCK) {
    2e40:	87 30       	cpi	r24, 0x07	; 7
    2e42:	71 f5       	brne	.+92     	; 0x2ea0 <Isb_Config_Rx+0x26c>
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
    2e44:	64 30       	cpi	r22, 0x04	; 4
    2e46:	08 f4       	brcc	.+2      	; 0x2e4a <Isb_Config_Rx+0x216>
    2e48:	6e c0       	rjmp	.+220    	; 0x2f26 <Isb_Config_Rx+0x2f2>
				Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
    2e4a:	fa 01       	movw	r30, r20
    2e4c:	97 81       	ldd	r25, Z+7	; 0x07
    2e4e:	80 e0       	ldi	r24, 0x00	; 0
    2e50:	26 81       	ldd	r18, Z+6	; 0x06
    2e52:	dc 01       	movw	r26, r24
    2e54:	a2 0f       	add	r26, r18
    2e56:	b1 1d       	adc	r27, r1
				if (Addr < EEP_SIZE) {
    2e58:	f2 e0       	ldi	r31, 0x02	; 2
    2e5a:	a0 30       	cpi	r26, 0x00	; 0
    2e5c:	bf 07       	cpc	r27, r31
    2e5e:	08 f0       	brcs	.+2      	; 0x2e62 <Isb_Config_Rx+0x22e>
    2e60:	62 c0       	rjmp	.+196    	; 0x2f26 <Isb_Config_Rx+0x2f2>
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    2e62:	8e 81       	ldd	r24, Y+6	; 0x06
    2e64:	80 6c       	ori	r24, 0xC0	; 192
    2e66:	8e 83       	std	Y+6, r24	; 0x06
    2e68:	40 e0       	ldi	r20, 0x00	; 0
					for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2e6a:	26 2f       	mov	r18, r22
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	23 50       	subi	r18, 0x03	; 3
    2e70:	30 40       	sbci	r19, 0x00	; 0
						MsgTx.Data[3 + i] = lib_eep_read_byte((uint8_t *)(Addr + i));
    2e72:	be 01       	movw	r22, r28
    2e74:	67 5f       	subi	r22, 0xF7	; 247
    2e76:	7f 4f       	sbci	r23, 0xFF	; 255
    2e78:	0d c0       	rjmp	.+26     	; 0x2e94 <Isb_Config_Rx+0x260>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2e7a:	e1 99       	sbic	0x1c, 1	; 28
    2e7c:	fe cf       	rjmp	.-4      	; 0x2e7a <Isb_Config_Rx+0x246>
    2e7e:	cd 01       	movw	r24, r26
    2e80:	84 0f       	add	r24, r20
    2e82:	91 1d       	adc	r25, r1
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2e84:	9f bb       	out	0x1f, r25	; 31
    2e86:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2e88:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2e8a:	8d b3       	in	r24, 0x1d	; 29
    2e8c:	e6 0f       	add	r30, r22
    2e8e:	f7 1f       	adc	r31, r23
    2e90:	80 83       	st	Z, r24
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_READEEPROMBLOCK) {
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
				Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
				if (Addr < EEP_SIZE) {
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2e92:	4f 5f       	subi	r20, 0xFF	; 255
    2e94:	e4 2f       	mov	r30, r20
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	e2 17       	cp	r30, r18
    2e9a:	f3 07       	cpc	r31, r19
    2e9c:	74 f3       	brlt	.-36     	; 0x2e7a <Isb_Config_Rx+0x246>
    2e9e:	43 c0       	rjmp	.+134    	; 0x2f26 <Isb_Config_Rx+0x2f2>
						MsgTx.Data[3 + i] = lib_eep_read_byte((uint8_t *)(Addr + i));
					}
				}
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_WRITEEEPROMBLOCK) {
    2ea0:	88 30       	cpi	r24, 0x08	; 8
    2ea2:	09 f0       	breq	.+2      	; 0x2ea6 <Isb_Config_Rx+0x272>
    2ea4:	40 c0       	rjmp	.+128    	; 0x2f26 <Isb_Config_Rx+0x2f2>
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
    2ea6:	64 30       	cpi	r22, 0x04	; 4
    2ea8:	08 f4       	brcc	.+2      	; 0x2eac <Isb_Config_Rx+0x278>
    2eaa:	3d c0       	rjmp	.+122    	; 0x2f26 <Isb_Config_Rx+0x2f2>
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
    2eac:	80 91 a8 00 	lds	r24, 0x00A8
    2eb0:	89 30       	cpi	r24, 0x09	; 9
    2eb2:	09 f0       	breq	.+2      	; 0x2eb6 <Isb_Config_Rx+0x282>
    2eb4:	38 c0       	rjmp	.+112    	; 0x2f26 <Isb_Config_Rx+0x2f2>
					Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
    2eb6:	fa 01       	movw	r30, r20
    2eb8:	97 81       	ldd	r25, Z+7	; 0x07
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	26 81       	ldd	r18, Z+6	; 0x06
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	a2 0f       	add	r26, r18
    2ec2:	b1 1d       	adc	r27, r1
					if ((Addr >= Isb_Firmware_Offset) & (Addr < EEP_SIZE)) {
    2ec4:	80 91 a7 00 	lds	r24, 0x00A7
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	a8 17       	cp	r26, r24
    2ecc:	b9 07       	cpc	r27, r25
    2ece:	58 f1       	brcs	.+86     	; 0x2f26 <Isb_Config_Rx+0x2f2>
    2ed0:	f2 e0       	ldi	r31, 0x02	; 2
    2ed2:	a0 30       	cpi	r26, 0x00	; 0
    2ed4:	bf 07       	cpc	r27, r31
    2ed6:	38 f5       	brcc	.+78     	; 0x2f26 <Isb_Config_Rx+0x2f2>
						MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    2ed8:	8e 81       	ldd	r24, Y+6	; 0x06
    2eda:	80 6c       	ori	r24, 0xC0	; 192
    2edc:	8e 83       	std	Y+6, r24	; 0x06
    2ede:	90 e0       	ldi	r25, 0x00	; 0
						for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2ee0:	26 2f       	mov	r18, r22
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	23 50       	subi	r18, 0x03	; 3
    2ee6:	30 40       	sbci	r19, 0x00	; 0
    2ee8:	19 c0       	rjmp	.+50     	; 0x2f1c <Isb_Config_Rx+0x2e8>
							lib_eep_write_byte((uint8_t *)(Addr + i), aIsb_Msg->Data[3 + i]);
    2eea:	bf 01       	movw	r22, r30
    2eec:	6a 0f       	add	r22, r26
    2eee:	7b 1f       	adc	r23, r27
    2ef0:	e4 0f       	add	r30, r20
    2ef2:	f5 1f       	adc	r31, r21
    2ef4:	e0 85       	ldd	r30, Z+8	; 0x08
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2ef6:	e1 99       	sbic	0x1c, 1	; 28
    2ef8:	fe cf       	rjmp	.-4      	; 0x2ef6 <Isb_Config_Rx+0x2c2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2efa:	7f bb       	out	0x1f, r23	; 31
    2efc:	6e bb       	out	0x1e, r22	; 30
#endif
    EECR |= (1 << EERE);
    2efe:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2f00:	8d b3       	in	r24, 0x1d	; 29
    2f02:	8e 17       	cp	r24, r30
    2f04:	51 f0       	breq	.+20     	; 0x2f1a <Isb_Config_Rx+0x2e6>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2f06:	e1 99       	sbic	0x1c, 1	; 28
    2f08:	fe cf       	rjmp	.-4      	; 0x2f06 <Isb_Config_Rx+0x2d2>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2f0a:	7f bb       	out	0x1f, r23	; 31
    2f0c:	6e bb       	out	0x1e, r22	; 30
#endif
    EEDR = __value;
    2f0e:	ed bb       	out	0x1d, r30	; 29

    __asm__ __volatile__ (
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	e2 9a       	sbi	0x1c, 2	; 28
    2f16:	e1 9a       	sbi	0x1c, 1	; 28
    2f18:	0f be       	out	0x3f, r0	; 63
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
					Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
					if ((Addr >= Isb_Firmware_Offset) & (Addr < EEP_SIZE)) {
						MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
						for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2f1a:	9f 5f       	subi	r25, 0xFF	; 255
    2f1c:	e9 2f       	mov	r30, r25
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	e2 17       	cp	r30, r18
    2f22:	f3 07       	cpc	r31, r19
    2f24:	14 f3       	brlt	.-60     	; 0x2eea <Isb_Config_Rx+0x2b6>
						}
					}
				}
			}
		}
		MsgTx.Data[0] |= ISB_CONFIG_ANSWER_NACK;
    2f26:	8e 81       	ldd	r24, Y+6	; 0x06
    2f28:	80 64       	ori	r24, 0x40	; 64
    2f2a:	8e 83       	std	Y+6, r24	; 0x06
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
		MsgTx.SourceId = Isb_Node_Id;
    2f2c:	1d 83       	std	Y+5, r17	; 0x05
    2f2e:	0c 83       	std	Y+4, r16	; 0x04
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
    2f30:	fb 82       	std	Y+3, r15	; 0x03
    2f32:	ea 82       	std	Y+2, r14	; 0x02
	void Isb_Config_Rx(Isb_Msg_t * aIsb_Msg) {
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
    2f34:	d9 82       	std	Y+1, r13	; 0x01
					}
				}
			}
		}
		MsgTx.Data[0] |= ISB_CONFIG_ANSWER_NACK;
		Isb_SendMsg(&MsgTx);
    2f36:	ce 01       	movw	r24, r28
    2f38:	01 96       	adiw	r24, 0x01	; 1
    2f3a:	0e 94 91 13 	call	0x2722	; 0x2722 <Isb_SendMsg>
	}
    2f3e:	2d 96       	adiw	r28, 0x0d	; 13
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	de bf       	out	0x3e, r29	; 62
    2f46:	0f be       	out	0x3f, r0	; 63
    2f48:	cd bf       	out	0x3d, r28	; 61
    2f4a:	cf 91       	pop	r28
    2f4c:	df 91       	pop	r29
    2f4e:	1f 91       	pop	r17
    2f50:	0f 91       	pop	r16
    2f52:	ff 90       	pop	r15
    2f54:	ef 90       	pop	r14
    2f56:	df 90       	pop	r13
    2f58:	08 95       	ret

00002f5a <lib_eep_fw_read_word>:
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    return __eerd_word (__p, eeprom_read_byte);
    2f5a:	20 91 a7 00 	lds	r18, 0x00A7
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	22 0f       	add	r18, r18
    2f62:	33 1f       	adc	r19, r19
    2f64:	82 0f       	add	r24, r18
    2f66:	93 1f       	adc	r25, r19
    2f68:	6c e5       	ldi	r22, 0x5C	; 92
    2f6a:	70 e0       	ldi	r23, 0x00	; 0
    2f6c:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__eerd_word>



	uint16_t __attribute__((always_inline)) lib_eep_fw_read_word(uint16_t * aAddr) {
		return eeprom_read_word(Isb_Firmware_Offset + aAddr);;
	}
    2f70:	08 95       	ret

00002f72 <lib_eep_read_word>:
    2f72:	6c e5       	ldi	r22, 0x5C	; 92
    2f74:	70 e0       	ldi	r23, 0x00	; 0
    2f76:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__eerd_word>



	uint16_t __attribute__((always_inline)) lib_eep_read_word(uint16_t * aAddr) {
		return eeprom_read_word(aAddr);;
	}
    2f7a:	08 95       	ret

00002f7c <main>:



	int main(void)
	{
    2f7c:	cf 92       	push	r12
    2f7e:	df 92       	push	r13
    2f80:	ef 92       	push	r14
    2f82:	ff 92       	push	r15
    2f84:	0f 93       	push	r16
    2f86:	1f 93       	push	r17
    2f88:	df 93       	push	r29
    2f8a:	cf 93       	push	r28
    2f8c:	cd b7       	in	r28, 0x3d	; 61
    2f8e:	de b7       	in	r29, 0x3e	; 62
    2f90:	2d 97       	sbiw	r28, 0x0d	; 13
    2f92:	0f b6       	in	r0, 0x3f	; 63
    2f94:	f8 94       	cli
    2f96:	de bf       	out	0x3e, r29	; 62
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	cd bf       	out	0x3d, r28	; 61
		wdt_enable(WDTO_500MS);
    2f9c:	8d e0       	ldi	r24, 0x0D	; 13
    2f9e:	28 e1       	ldi	r18, 0x18	; 24
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	0f b6       	in	r0, 0x3f	; 63
    2fa4:	f8 94       	cli
    2fa6:	a8 95       	wdr
    2fa8:	21 bd       	out	0x21, r18	; 33
    2faa:	0f be       	out	0x3f, r0	; 63
    2fac:	81 bd       	out	0x21, r24	; 33
		wdt_reset();
    2fae:	a8 95       	wdr
    2fb0:	80 e1       	ldi	r24, 0x10	; 16
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	6c e5       	ldi	r22, 0x5C	; 92
    2fb6:	70 e0       	ldi	r23, 0x00	; 0
    2fb8:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__eerd_word>
    2fbc:	6c 01       	movw	r12, r24
		Isb_Node_Id = lib_eep_read_word((uint16_t *)EEP__ISB_NODE_ID_0);
    2fbe:	90 93 a6 00 	sts	0x00A6, r25
    2fc2:	80 93 a5 00 	sts	0x00A5, r24
		if ((Isb_Node_Id == 0) | (Isb_Node_Id > 2047)) {
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	8f 5f       	subi	r24, 0xFF	; 255
    2fca:	97 40       	sbci	r25, 0x07	; 7
    2fcc:	b8 f0       	brcs	.+46     	; 0x2ffc <main+0x80>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2fce:	e1 99       	sbic	0x1c, 1	; 28
    2fd0:	fe cf       	rjmp	.-4      	; 0x2fce <main+0x52>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2fd2:	82 e1       	ldi	r24, 0x12	; 18
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	9f bb       	out	0x1f, r25	; 31
    2fd8:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    2fda:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    2fdc:	8d b3       	in	r24, 0x1d	; 29



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
    2fde:	88 23       	and	r24, r24
    2fe0:	61 f0       	breq	.+24     	; 0x2ffa <main+0x7e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2fe2:	e1 99       	sbic	0x1c, 1	; 28
    2fe4:	fe cf       	rjmp	.-4      	; 0x2fe2 <main+0x66>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2fe6:	82 e1       	ldi	r24, 0x12	; 18
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	9f bb       	out	0x1f, r25	; 31
    2fec:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2fee:	1d ba       	out	0x1d, r1	; 29

    __asm__ __volatile__ (
    2ff0:	0f b6       	in	r0, 0x3f	; 63
    2ff2:	f8 94       	cli
    2ff4:	e2 9a       	sbi	0x1c, 2	; 28
    2ff6:	e1 9a       	sbi	0x1c, 1	; 28
    2ff8:	0f be       	out	0x3f, r0	; 63
    2ffa:	ff cf       	rjmp	.-2      	; 0x2ffa <main+0x7e>
    2ffc:	2c e0       	ldi	r18, 0x0C	; 12
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
			Node_Reboot();
		}
		for (uint8_t i = 0; i < 4; i++) {
			lib_eep_write_byte((uint8_t *)(EEP__ISB_FIRMWARE_CODE_0 + i), Isb_Firmware_Code[i]);
    3000:	f9 01       	movw	r30, r18
    3002:	ec 5a       	subi	r30, 0xAC	; 172
    3004:	ff 4f       	sbci	r31, 0xFF	; 255
    3006:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3008:	e1 99       	sbic	0x1c, 1	; 28
    300a:	fe cf       	rjmp	.-4      	; 0x3008 <main+0x8c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    300c:	3f bb       	out	0x1f, r19	; 31
    300e:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    3010:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    3012:	8d b3       	in	r24, 0x1d	; 29
    3014:	8e 17       	cp	r24, r30
    3016:	51 f0       	breq	.+20     	; 0x302c <main+0xb0>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    3018:	e1 99       	sbic	0x1c, 1	; 28
    301a:	fe cf       	rjmp	.-4      	; 0x3018 <main+0x9c>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    301c:	3f bb       	out	0x1f, r19	; 31
    301e:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    3020:	ed bb       	out	0x1d, r30	; 29

    __asm__ __volatile__ (
    3022:	0f b6       	in	r0, 0x3f	; 63
    3024:	f8 94       	cli
    3026:	e2 9a       	sbi	0x1c, 2	; 28
    3028:	e1 9a       	sbi	0x1c, 1	; 28
    302a:	0f be       	out	0x3f, r0	; 63
    302c:	2f 5f       	subi	r18, 0xFF	; 255
    302e:	3f 4f       	sbci	r19, 0xFF	; 255
		Isb_Node_Id = lib_eep_read_word((uint16_t *)EEP__ISB_NODE_ID_0);
		if ((Isb_Node_Id == 0) | (Isb_Node_Id > 2047)) {
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
			Node_Reboot();
		}
		for (uint8_t i = 0; i < 4; i++) {
    3030:	20 31       	cpi	r18, 0x10	; 16
    3032:	31 05       	cpc	r19, r1
    3034:	29 f7       	brne	.-54     	; 0x3000 <main+0x84>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3036:	e1 99       	sbic	0x1c, 1	; 28
    3038:	fe cf       	rjmp	.-4      	; 0x3036 <main+0xba>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    303a:	8a e1       	ldi	r24, 0x1A	; 26
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	9f bb       	out	0x1f, r25	; 31
    3040:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    3042:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    3044:	8d b3       	in	r24, 0x1d	; 29
			lib_eep_write_byte((uint8_t *)(EEP__ISB_FIRMWARE_CODE_0 + i), Isb_Firmware_Code[i]);
		}
		Isb_Firmware_Offset = lib_eep_read_byte((uint8_t *)EEP__ISB_FIRMWARE_OFFSET);
    3046:	80 93 a7 00 	sts	0x00A7, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    304a:	e1 99       	sbic	0x1c, 1	; 28
    304c:	fe cf       	rjmp	.-4      	; 0x304a <main+0xce>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    304e:	82 e1       	ldi	r24, 0x12	; 18
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	9f bb       	out	0x1f, r25	; 31
    3054:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    3056:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    3058:	8d b3       	in	r24, 0x1d	; 29
		Isb_Node_Operating_Mode = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
    305a:	80 93 a8 00 	sts	0x00A8, r24
		if ((Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_NORM) & (Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_CFG))
    305e:	88 50       	subi	r24, 0x08	; 8
    3060:	82 30       	cpi	r24, 0x02	; 2
    3062:	d0 f0       	brcs	.+52     	; 0x3098 <main+0x11c>
		{
			Isb_Node_Operating_Mode = ISB_NODE_OPERATING_MODE__FW_NORM;
    3064:	88 e0       	ldi	r24, 0x08	; 8
    3066:	80 93 a8 00 	sts	0x00A8, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    306a:	e1 99       	sbic	0x1c, 1	; 28
    306c:	fe cf       	rjmp	.-4      	; 0x306a <main+0xee>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    306e:	82 e1       	ldi	r24, 0x12	; 18
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	9f bb       	out	0x1f, r25	; 31
    3074:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    3076:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    3078:	8d b3       	in	r24, 0x1d	; 29
    307a:	88 30       	cpi	r24, 0x08	; 8
    307c:	69 f0       	breq	.+26     	; 0x3098 <main+0x11c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    307e:	e1 99       	sbic	0x1c, 1	; 28
    3080:	fe cf       	rjmp	.-4      	; 0x307e <main+0x102>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3082:	82 e1       	ldi	r24, 0x12	; 18
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	9f bb       	out	0x1f, r25	; 31
    3088:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    308a:	88 e0       	ldi	r24, 0x08	; 8
    308c:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    308e:	0f b6       	in	r0, 0x3f	; 63
    3090:	f8 94       	cli
    3092:	e2 9a       	sbi	0x1c, 2	; 28
    3094:	e1 9a       	sbi	0x1c, 1	; 28
    3096:	0f be       	out	0x3f, r0	; 63
    3098:	f0 90 a9 00 	lds	r15, 0x00A9
    309c:	2c e1       	ldi	r18, 0x1C	; 28
    309e:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    30a0:	e1 99       	sbic	0x1c, 1	; 28
    30a2:	fe cf       	rjmp	.-4      	; 0x30a0 <main+0x124>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    30a4:	3f bb       	out	0x1f, r19	; 31
    30a6:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    30a8:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    30aa:	8d b3       	in	r24, 0x1d	; 29
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, Isb_Node_Operating_Mode);
		}
		for (uint8_t i = 0; i < 4; i++)
		{
			if (lib_eep_read_byte((uint8_t *)(EEP__ISB_CONFIG_CODE_0 + i)) != Isb_Firmware_Code[i])
    30ac:	f9 01       	movw	r30, r18
    30ae:	ec 5b       	subi	r30, 0xBC	; 188
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	90 81       	ld	r25, Z
    30b4:	89 17       	cp	r24, r25
    30b6:	11 f0       	breq	.+4      	; 0x30bc <main+0x140>
			{
				Error |= ERROR__CONFIG_CODE;
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	f8 2a       	or	r15, r24
    30bc:	2f 5f       	subi	r18, 0xFF	; 255
    30be:	3f 4f       	sbci	r19, 0xFF	; 255
		if ((Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_NORM) & (Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_CFG))
		{
			Isb_Node_Operating_Mode = ISB_NODE_OPERATING_MODE__FW_NORM;
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, Isb_Node_Operating_Mode);
		}
		for (uint8_t i = 0; i < 4; i++)
    30c0:	20 32       	cpi	r18, 0x20	; 32
    30c2:	31 05       	cpc	r19, r1
    30c4:	69 f7       	brne	.-38     	; 0x30a0 <main+0x124>
    30c6:	f0 92 a9 00 	sts	0x00A9, r15
//			Inf_Twi_Init(0, 12);
			Inf_Twi_Init(0, 255);
// TODO:
Lib_Pin_Set(4, 2, LIB_PIN_OUTPUT_HIGH);
		#endif /* INF_TWI_C_ */
		if (Error == 0) {
    30ca:	ff 20       	and	r15, r15
    30cc:	f1 f4       	brne	.+60     	; 0x310a <main+0x18e>

	#if defined(__AVR_ATmega8__)
		#warning "TIMER0_COMP_vect missing."
		#error "No definition for this MCU available."
	#elif defined(__AVR_ATmega16__)
	TCCR0 = (1 << WGM01) | (1 << CS01) | (1 << CS00);
    30ce:	8b e0       	ldi	r24, 0x0B	; 11
    30d0:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
    30d2:	12 be       	out	0x32, r1	; 50
	OCR0 = (F_CPU / 64) / 1000;
    30d4:	86 ee       	ldi	r24, 0xE6	; 230
    30d6:	8c bf       	out	0x3c, r24	; 60
	TIMSK = (1 << OCIE0);
    30d8:	82 e0       	ldi	r24, 0x02	; 2
    30da:	89 bf       	out	0x39, r24	; 57
	TIMSK0 = (1 << OCIE0A);
	#else
		#error "No definition for this MCU available."
	#endif

	Isb_Systick_Clock.Seconds = 0;
    30dc:	10 92 81 01 	sts	0x0181, r1
	Isb_Systick_Clock.Minutes = 0;
    30e0:	10 92 82 01 	sts	0x0182, r1
	Isb_Systick_Clock.Hour = 0;
    30e4:	10 92 83 01 	sts	0x0183, r1
	Isb_Systick_Clock.Dow = 1;
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	80 93 85 01 	sts	0x0185, r24
	Isb_Systick_Clock.Day = 1;
    30ee:	80 93 84 01 	sts	0x0184, r24
	Isb_Systick_Clock.Month = 1;
    30f2:	80 93 86 01 	sts	0x0186, r24
	Isb_Systick_Clock.Year = 0;;
    30f6:	10 92 88 01 	sts	0x0188, r1
    30fa:	10 92 87 01 	sts	0x0187, r1
			Isb_Systick_Init();
//			Isb_Ch_Init();
			Isb_Grp_Init();
    30fe:	0e 94 5d 13 	call	0x26ba	; 0x26ba <Isb_Grp_Init>
//			Isb_Obj_Init();
			Isb_Obj_Exec();
    3102:	0e 94 e6 14 	call	0x29cc	; 0x29cc <Isb_Obj_Exec>
//			Isb_App_Init();
			Isb_App_Exec();
    3106:	0e 94 d7 05 	call	0xbae	; 0xbae <Isb_App_Exec>
		}
		sei();
    310a:	78 94       	sei
		#endif /* ISB_INF_USART0 == 1 */
		#if ISB_INF_USART1 == 1
			Isb_Inf_Usart_Init(1);
		#endif /* ISB_INF_USART1 == 1 */
		#if ISB_INF_CAN0 == 1
			Isb_Inf_Can_Init(0);
    310c:	80 e0       	ldi	r24, 0x00	; 0
    310e:	0e 94 23 03 	call	0x646	; 0x646 <Isb_Inf_Can_Init>
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
		Isb_Msg.Data[0] = ISB_MSG_TOP__SERIAL_NUMBER__MODE__ERROR;
    3112:	81 e2       	ldi	r24, 0x21	; 33
    3114:	8e 83       	std	Y+6, r24	; 0x06
    3116:	fe 01       	movw	r30, r28
    3118:	37 96       	adiw	r30, 0x07	; 7
    311a:	24 e0       	ldi	r18, 0x04	; 4
    311c:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    311e:	e1 99       	sbic	0x1c, 1	; 28
    3120:	fe cf       	rjmp	.-4      	; 0x311e <main+0x1a2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    3122:	3f bb       	out	0x1f, r19	; 31
    3124:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
    3126:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    3128:	8d b3       	in	r24, 0x1d	; 29
		for (uint8_t i = 0; i < 4; i++) {
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
    312a:	81 93       	st	Z+, r24
    312c:	2f 5f       	subi	r18, 0xFF	; 255
    312e:	3f 4f       	sbci	r19, 0xFF	; 255
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
		Isb_Msg.Data[0] = ISB_MSG_TOP__SERIAL_NUMBER__MODE__ERROR;
		for (uint8_t i = 0; i < 4; i++) {
    3130:	28 30       	cpi	r18, 0x08	; 8
    3132:	31 05       	cpc	r19, r1
    3134:	a1 f7       	brne	.-24     	; 0x311e <main+0x1a2>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    3136:	e1 99       	sbic	0x1c, 1	; 28
    3138:	fe cf       	rjmp	.-4      	; 0x3136 <main+0x1ba>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    313a:	82 e1       	ldi	r24, 0x12	; 18
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	9f bb       	out	0x1f, r25	; 31
    3140:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
    3142:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
    3144:	8d b3       	in	r24, 0x1d	; 29
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
    3146:	8b 87       	std	Y+11, r24	; 0x0b
		Isb_Msg.Data[6] = Error;
    3148:	fc 86       	std	Y+12, r15	; 0x0c
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
    314a:	dd 82       	std	Y+5, r13	; 0x05
    314c:	cc 82       	std	Y+4, r12	; 0x04
		#if ISB_INF_USART1_SLAVE == 1
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
    314e:	82 e0       	ldi	r24, 0x02	; 2
    3150:	90 ef       	ldi	r25, 0xF0	; 240
    3152:	9b 83       	std	Y+3, r25	; 0x03
    3154:	8a 83       	std	Y+2, r24	; 0x02
		#endif /* ISB_INF_USART0_SLAVE == 1 */
		#if ISB_INF_USART1_SLAVE == 1
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
    3156:	87 e2       	ldi	r24, 0x27	; 39
    3158:	89 83       	std	Y+1, r24	; 0x01
		for (uint8_t i = 0; i < 4; i++) {
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
		Isb_Msg.Data[6] = Error;
		Isb_SendMsg(&Isb_Msg);
    315a:	8e 01       	movw	r16, r28
    315c:	0f 5f       	subi	r16, 0xFF	; 255
    315e:	1f 4f       	sbci	r17, 0xFF	; 255
    3160:	c8 01       	movw	r24, r16
    3162:	0e 94 91 13 	call	0x2722	; 0x2722 <Isb_SendMsg>
						}
					}
				}
			#endif /* ISB_INF_USART1 == 1 */
			#if ISB_INF_CAN0 == 1
				if (Isb_Inf_Can_Rx(0, &Isb_Msg) == TRUE) {
    3166:	e0 2e       	mov	r14, r16
    3168:	01 2f       	mov	r16, r17
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
		Isb_Msg.Data[6] = Error;
		Isb_SendMsg(&Isb_Msg);
		for (;;) {
			wdt_reset();
    316a:	a8 95       	wdr
			if (Error == 0) {
    316c:	ff 20       	and	r15, r15
    316e:	31 f4       	brne	.+12     	; 0x317c <main+0x200>
				Isb_Systick_Exec();
    3170:	0e 94 51 04 	call	0x8a2	; 0x8a2 <Isb_Systick_Exec>
				Isb_Obj_Exec();
    3174:	0e 94 e6 14 	call	0x29cc	; 0x29cc <Isb_Obj_Exec>
				Isb_App_Exec();
    3178:	0e 94 d7 05 	call	0xbae	; 0xbae <Isb_App_Exec>
						}
					}
				}
			#endif /* ISB_INF_USART1 == 1 */
			#if ISB_INF_CAN0 == 1
				if (Isb_Inf_Can_Rx(0, &Isb_Msg) == TRUE) {
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	6e 2d       	mov	r22, r14
    3180:	70 2f       	mov	r23, r16
    3182:	0e 94 3f 03 	call	0x67e	; 0x67e <Isb_Inf_Can_Rx>
    3186:	81 30       	cpi	r24, 0x01	; 1
    3188:	81 f7       	brne	.-32     	; 0x316a <main+0x1ee>
						Isb_Inf_Can_Tx(1, &Isb_Msg);
					#endif /* ISB_INF_CAN1 == 1 */
					#if ISB_INF_CAN2 == 1
						Isb_Inf_Can_Tx(2, &Isb_Msg);
					#endif /* ISB_INF_CAN2 == 1 */
					if ((Isb_Msg.Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_UNICAST) {
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	80 73       	andi	r24, 0x30	; 48
    318e:	49 f4       	brne	.+18     	; 0x31a2 <main+0x226>
						if (Isb_Msg.DestId == Isb_Node_Id) {
    3190:	8a 81       	ldd	r24, Y+2	; 0x02
    3192:	9b 81       	ldd	r25, Y+3	; 0x03
    3194:	8c 15       	cp	r24, r12
    3196:	9d 05       	cpc	r25, r13
    3198:	21 f4       	brne	.+8      	; 0x31a2 <main+0x226>
							Isb_Config_Rx(&Isb_Msg);
    319a:	8e 2d       	mov	r24, r14
    319c:	90 2f       	mov	r25, r16
    319e:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <Isb_Config_Rx>
						}
					}
					if ((Isb_Msg.Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_MULTICAST) {
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	80 73       	andi	r24, 0x30	; 48
    31a6:	80 32       	cpi	r24, 0x20	; 32
    31a8:	01 f7       	brne	.-64     	; 0x316a <main+0x1ee>
						if (Error == 0) {
    31aa:	ff 20       	and	r15, r15
    31ac:	f1 f6       	brne	.-68     	; 0x316a <main+0x1ee>
							Isb_Obj_Rx(&Isb_Msg);
    31ae:	8e 2d       	mov	r24, r14
    31b0:	90 2f       	mov	r25, r16
    31b2:	0e 94 a6 13 	call	0x274c	; 0x274c <Isb_Obj_Rx>
    31b6:	d9 cf       	rjmp	.-78     	; 0x316a <main+0x1ee>

000031b8 <__eerd_word>:
    31b8:	df 92       	push	r13
    31ba:	ef 92       	push	r14
    31bc:	ff 92       	push	r15
    31be:	0f 93       	push	r16
    31c0:	1f 93       	push	r17
    31c2:	7b 01       	movw	r14, r22
    31c4:	8c 01       	movw	r16, r24
    31c6:	fb 01       	movw	r30, r22
    31c8:	09 95       	icall
    31ca:	d8 2e       	mov	r13, r24
    31cc:	c8 01       	movw	r24, r16
    31ce:	01 96       	adiw	r24, 0x01	; 1
    31d0:	f7 01       	movw	r30, r14
    31d2:	09 95       	icall
    31d4:	98 2f       	mov	r25, r24
    31d6:	8d 2d       	mov	r24, r13
    31d8:	1f 91       	pop	r17
    31da:	0f 91       	pop	r16
    31dc:	ff 90       	pop	r15
    31de:	ef 90       	pop	r14
    31e0:	df 90       	pop	r13
    31e2:	08 95       	ret

000031e4 <__udivmodhi4>:
    31e4:	aa 1b       	sub	r26, r26
    31e6:	bb 1b       	sub	r27, r27
    31e8:	51 e1       	ldi	r21, 0x11	; 17
    31ea:	07 c0       	rjmp	.+14     	; 0x31fa <__udivmodhi4_ep>

000031ec <__udivmodhi4_loop>:
    31ec:	aa 1f       	adc	r26, r26
    31ee:	bb 1f       	adc	r27, r27
    31f0:	a6 17       	cp	r26, r22
    31f2:	b7 07       	cpc	r27, r23
    31f4:	10 f0       	brcs	.+4      	; 0x31fa <__udivmodhi4_ep>
    31f6:	a6 1b       	sub	r26, r22
    31f8:	b7 0b       	sbc	r27, r23

000031fa <__udivmodhi4_ep>:
    31fa:	88 1f       	adc	r24, r24
    31fc:	99 1f       	adc	r25, r25
    31fe:	5a 95       	dec	r21
    3200:	a9 f7       	brne	.-22     	; 0x31ec <__udivmodhi4_loop>
    3202:	80 95       	com	r24
    3204:	90 95       	com	r25
    3206:	bc 01       	movw	r22, r24
    3208:	cd 01       	movw	r24, r26
    320a:	08 95       	ret

0000320c <_exit>:
    320c:	f8 94       	cli

0000320e <__stop_program>:
    320e:	ff cf       	rjmp	.-2      	; 0x320e <__stop_program>
