
fw_34-1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00003000  00003074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003000  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000030c  00800134  00003034  000030a8  2**0
                  ALLOC
  3 .stab         000060b4  00000000  00000000  000030a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000271e  00000000  00000000  0000915c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__ctors_end>
       4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
       8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
       c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      10:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      14:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      18:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      1c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      20:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      24:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      28:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      2c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      30:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      34:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      38:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      3c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      40:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      44:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      48:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      4c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      50:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      54:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      58:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      5c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      60:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      64:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      68:	83 0e       	add	r8, r19
      6a:	91 0e       	add	r9, r17
      6c:	98 0e       	add	r9, r24
      6e:	9f 0e       	add	r9, r31
      70:	a6 0e       	add	r10, r22
      72:	ad 0e       	add	r10, r29
      74:	b4 0e       	add	r11, r20
      76:	bb 0e       	add	r11, r27
      78:	c2 0e       	add	r12, r18
      7a:	c9 0e       	add	r12, r25
      7c:	d0 0e       	add	r13, r16
      7e:	d7 0e       	add	r13, r23
      80:	de 0e       	add	r13, r30
      82:	e5 0e       	add	r14, r21
      84:	ec 0e       	add	r14, r28
      86:	f3 0e       	add	r15, r19
      88:	fa 0e       	add	r15, r26
      8a:	01 0f       	add	r16, r17
      8c:	08 0f       	add	r16, r24
      8e:	0f 0f       	add	r16, r31
      90:	16 0f       	add	r17, r22
      92:	1d 0f       	add	r17, r29
      94:	24 0f       	add	r18, r20
      96:	2b 0f       	add	r18, r27
      98:	32 0f       	add	r19, r18
      9a:	39 0f       	add	r19, r25
      9c:	40 0f       	add	r20, r16
      9e:	47 0f       	add	r20, r23
      a0:	4e 0f       	add	r20, r30
      a2:	55 0f       	add	r21, r21
      a4:	5c 0f       	add	r21, r28
      a6:	63 0f       	add	r22, r19
      a8:	6a 0f       	add	r22, r26
      aa:	71 0f       	add	r23, r17
      ac:	78 0f       	add	r23, r24
      ae:	7f 0f       	add	r23, r31
      b0:	86 0f       	add	r24, r22
      b2:	8d 0f       	add	r24, r29
      b4:	94 0f       	add	r25, r20
      b6:	9b 0f       	add	r25, r27
      b8:	a2 0f       	add	r26, r18
      ba:	a9 0f       	add	r26, r25
      bc:	b0 0f       	add	r27, r16
      be:	b7 0f       	add	r27, r23
      c0:	be 0f       	add	r27, r30
      c2:	c5 0f       	add	r28, r21
      c4:	cc 0f       	add	r28, r28
      c6:	d3 0f       	add	r29, r19
      c8:	da 0f       	add	r29, r26
      ca:	e1 0f       	add	r30, r17
      cc:	e8 0f       	add	r30, r24
      ce:	ef 0f       	add	r30, r31
      d0:	f6 0f       	add	r31, r22
      d2:	fd 0f       	add	r31, r29
      d4:	04 10       	cpse	r0, r4
      d6:	0b 10       	cpse	r0, r11
      d8:	12 10       	cpse	r1, r2
      da:	19 10       	cpse	r1, r9
      dc:	20 10       	cpse	r2, r0
      de:	27 10       	cpse	r2, r7

000000e0 <pgmIsb_Obj_1Bit_Obj_Array>:
      e0:	00 01 02 05 06 07 0a 0b 0c 0f 10 11 14 15 16 19     ................
      f0:	1a 1b 1e 1f 20 23 24 25 28 29 2a 2b 2c 2d 2e 2f     .... #$%()*+,-./
     100:	30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f     0123456789:;<=>?
     110:	40 41 42 43 44 45 46 47 48 49 4a 4b                 @ABCDEFGHIJK

0000011c <pgmIsb_Obj_4Bit_Obj_Array>:
     11c:	03 08 0d 12 17 1c 21 26                             ......!&

00000124 <pgmIsb_Obj_8Bit_Obj_Array>:
     124:	04 09 0e 13 18 1d 22 27                             ......"'

0000012c <pgmIsb_Obj_1Bit_Ch_Array>:
     12c:	00 00 00 01 01 01 02 02 02 03 03 03 04 04 04 05     ................
     13c:	05 05 06 06 06 07 07 07 08 08 08 08 09 09 09 09     ................
     14c:	0a 0a 0a 0a 0b 0b 0b 0b 0c 0c 0c 0c 0d 0d 0d 0d     ................
     15c:	0e 0e 0e 0e 0f 0f 0f 0f 10 10 10 10                 ............

00000168 <pgmIsb_Obj_4Bit_Ch_Array>:
     168:	00 01 02 03 04 05 06 07                             ........

00000170 <pgmIsb_Obj_8Bit_Ch_Array>:
     170:	00 01 02 03 04 05 06 07                             ........

00000178 <pgmIsb_App_DigOut_Ch_Array>:
     178:	08 09 0a 0b 0c 0d 0e 0f 10                          .........

00000181 <pgmIsb_App_DigOut_Obj_1Bit_0_Array>:
     181:	18 1c 20 24 28 2c 30 34 38                          .. $(,048

0000018a <pgmIsb_App_DigOut_Obj_1Bit_1_Array>:
     18a:	19 1d 21 25 29 2d 31 35 39                          ..!%)-159

00000193 <pgmIsb_App_DigOut_Obj_1Bit_2_Array>:
     193:	1a 1e 22 26 2a 2e 32 36 3a                          .."&*.26:

0000019c <pgmIsb_App_DigOut_Obj_1Bit_3_Array>:
     19c:	1b 1f 23 27 2b 2f 33 37 3b                          ..#'+/37;

000001a5 <pgmIsb_App_DigOut_Pin0_Array>:
     1a5:	23 24 16 17 25 26 27 11 12                          #$..%&'..

000001ae <pgmIsb_App_DigIn_Ch_Array>:
     1ae:	00 01 02 03 04 05 06 07                             ........

000001b6 <pgmIsb_App_DigIn_Pin0_Array>:
     1b6:	58 59 5a 5b 5c 5d 60 61                             XYZ[\]`a

000001be <pgmIsb_App_DigIn_Obj_1Bit_1_Array>:
     1be:	01 04 07 0a 0d 10 13 16                             ........

000001c6 <pgmIsb_App_DigIn_Obj_1Bit_2_Array>:
     1c6:	02 05 08 0b 0e 11 14 17                             ........

000001ce <__ctors_end>:
     1ce:	11 24       	eor	r1, r1
     1d0:	1f be       	out	0x3f, r1	; 63
     1d2:	cf ef       	ldi	r28, 0xFF	; 255
     1d4:	d4 e0       	ldi	r29, 0x04	; 4
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	cd bf       	out	0x3d, r28	; 61

000001da <__do_copy_data>:
     1da:	11 e0       	ldi	r17, 0x01	; 1
     1dc:	a0 e0       	ldi	r26, 0x00	; 0
     1de:	b1 e0       	ldi	r27, 0x01	; 1
     1e0:	e0 e0       	ldi	r30, 0x00	; 0
     1e2:	f0 e3       	ldi	r31, 0x30	; 48
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <.do_copy_data_start>

000001e6 <.do_copy_data_loop>:
     1e6:	05 90       	lpm	r0, Z+
     1e8:	0d 92       	st	X+, r0

000001ea <.do_copy_data_start>:
     1ea:	a4 33       	cpi	r26, 0x34	; 52
     1ec:	b1 07       	cpc	r27, r17
     1ee:	d9 f7       	brne	.-10     	; 0x1e6 <.do_copy_data_loop>

000001f0 <__do_clear_bss>:
     1f0:	14 e0       	ldi	r17, 0x04	; 4
     1f2:	a4 e3       	ldi	r26, 0x34	; 52
     1f4:	b1 e0       	ldi	r27, 0x01	; 1
     1f6:	01 c0       	rjmp	.+2      	; 0x1fa <.do_clear_bss_start>

000001f8 <.do_clear_bss_loop>:
     1f8:	1d 92       	st	X+, r1

000001fa <.do_clear_bss_start>:
     1fa:	a0 34       	cpi	r26, 0x40	; 64
     1fc:	b1 07       	cpc	r27, r17
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <.do_clear_bss_loop>
     200:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <main>
     204:	0c 94 fe 17 	jmp	0x2ffc	; 0x2ffc <_exit>

00000208 <__bad_interrupt>:
     208:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

0000020c <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
     20c:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
     20e:	f9 99       	sbic	0x1f, 1	; 31
     210:	fe cf       	rjmp	.-4      	; 0x20e <eeprom_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     212:	32 bd       	out	0x22, r19	; 34
     214:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
     216:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
     218:	80 b5       	in	r24, 0x20	; 32
}
     21a:	08 95       	ret

0000021c <lib_eep_read_byte>:
#ifndef LIB_EEP_C_
	#define LIB_EEP_C_



	uint8_t __attribute__((always_inline)) lib_eep_read_byte(uint8_t * aAddr) {
     21c:	9c 01       	movw	r18, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     21e:	f9 99       	sbic	0x1f, 1	; 31
     220:	fe cf       	rjmp	.-4      	; 0x21e <lib_eep_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     222:	32 bd       	out	0x22, r19	; 34
     224:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
     226:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
     228:	80 b5       	in	r24, 0x20	; 32
		return eeprom_read_byte(aAddr);;
	}
     22a:	08 95       	ret

0000022c <lib_eep_write_byte>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     22c:	f9 99       	sbic	0x1f, 1	; 31
     22e:	fe cf       	rjmp	.-4      	; 0x22c <lib_eep_write_byte>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     230:	9c 01       	movw	r18, r24
     232:	92 bd       	out	0x22, r25	; 34
     234:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
     236:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
     238:	80 b5       	in	r24, 0x20	; 32
	}



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
     23a:	86 17       	cp	r24, r22
     23c:	59 f0       	breq	.+22     	; 0x254 <lib_eep_write_byte+0x28>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     23e:	f9 99       	sbic	0x1f, 1	; 31
     240:	fe cf       	rjmp	.-4      	; 0x23e <lib_eep_write_byte+0x12>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     242:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     244:	32 bd       	out	0x22, r19	; 34
     246:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
     248:	60 bd       	out	0x20, r22	; 32

    __asm__ __volatile__ (
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	fa 9a       	sbi	0x1f, 2	; 31
     250:	f9 9a       	sbi	0x1f, 1	; 31
     252:	0f be       	out	0x3f, r0	; 63
     254:	08 95       	ret

00000256 <lib_eep_fw_read_byte>:
	}



	uint8_t __attribute__((always_inline)) lib_eep_fw_read_byte(uint8_t * aAddr) {
		return eeprom_read_byte(Isb_Firmware_Offset + aAddr);;
     256:	20 91 36 01 	lds	r18, 0x0136
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     25a:	f9 99       	sbic	0x1f, 1	; 31
     25c:	fe cf       	rjmp	.-4      	; 0x25a <lib_eep_fw_read_byte+0x4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     25e:	82 0f       	add	r24, r18
     260:	91 1d       	adc	r25, r1
     262:	92 bd       	out	0x22, r25	; 34
     264:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
     266:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
     268:	80 b5       	in	r24, 0x20	; 32
	}
     26a:	08 95       	ret

0000026c <lib_eep_fw_write_byte>:
		return eeprom_read_word(Isb_Firmware_Offset + aAddr);;
	}



	void __attribute__((always_inline)) lib_eep_fw_write_byte(uint8_t * aAddr, uint8_t aData) {
     26c:	ac 01       	movw	r20, r24
		if (eeprom_read_byte(Isb_Firmware_Offset + aAddr) != aData) {
     26e:	80 91 36 01 	lds	r24, 0x0136
     272:	28 2f       	mov	r18, r24
     274:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     276:	f9 99       	sbic	0x1f, 1	; 31
     278:	fe cf       	rjmp	.-4      	; 0x276 <lib_eep_fw_write_byte+0xa>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     27a:	ca 01       	movw	r24, r20
     27c:	82 0f       	add	r24, r18
     27e:	93 1f       	adc	r25, r19
     280:	92 bd       	out	0x22, r25	; 34
     282:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
     284:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
     286:	80 b5       	in	r24, 0x20	; 32
     288:	86 17       	cp	r24, r22
     28a:	69 f0       	breq	.+26     	; 0x2a6 <lib_eep_fw_write_byte+0x3a>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     28c:	f9 99       	sbic	0x1f, 1	; 31
     28e:	fe cf       	rjmp	.-4      	; 0x28c <lib_eep_fw_write_byte+0x20>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     290:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     292:	24 0f       	add	r18, r20
     294:	35 1f       	adc	r19, r21
     296:	32 bd       	out	0x22, r19	; 34
     298:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
     29a:	60 bd       	out	0x20, r22	; 32

    __asm__ __volatile__ (
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	f8 94       	cli
     2a0:	fa 9a       	sbi	0x1f, 2	; 31
     2a2:	f9 9a       	sbi	0x1f, 1	; 31
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	08 95       	ret

000002a8 <Lib_Pin_Get>:
	#endif



	uint8_t Lib_Pin_Get(const uint8_t aPort, const uint8_t aPin) {
		return (*(PINx[aPort]) >> aPin) & 1;
     2a8:	e8 2f       	mov	r30, r24
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	ee 0f       	add	r30, r30
     2ae:	ff 1f       	adc	r31, r31
     2b0:	ec 5d       	subi	r30, 0xDC	; 220
     2b2:	fe 4f       	sbci	r31, 0xFE	; 254
     2b4:	01 90       	ld	r0, Z+
     2b6:	f0 81       	ld	r31, Z
     2b8:	e0 2d       	mov	r30, r0
     2ba:	80 81       	ld	r24, Z
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <Lib_Pin_Get+0x1c>
     2c0:	95 95       	asr	r25
     2c2:	87 95       	ror	r24
     2c4:	6a 95       	dec	r22
     2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <Lib_Pin_Get+0x18>
	}
     2c8:	81 70       	andi	r24, 0x01	; 1
     2ca:	08 95       	ret

000002cc <Lib_Pin_Set>:



	void __attribute__((noinline)) Lib_Pin_Set(const uint8_t aPort, const uint8_t aPin, const uint8_t aCmd) {
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <Lib_Pin_Set+0x8>
		uint8_t mask;
		uint8_t tmp;
		volatile uint8_t *reg;
		uint8_t Pxx = aPin;
		for (mask = 1; Pxx--; mask <<= 1) ;
     2d0:	99 0f       	add	r25, r25
     2d2:	61 50       	subi	r22, 0x01	; 1
     2d4:	66 23       	and	r22, r22
     2d6:	e1 f7       	brne	.-8      	; 0x2d0 <Lib_Pin_Set+0x4>
		reg = PORTx[aPort];
     2d8:	a8 2f       	mov	r26, r24
     2da:	b0 e0       	ldi	r27, 0x00	; 0
     2dc:	fd 01       	movw	r30, r26
     2de:	ee 0f       	add	r30, r30
     2e0:	ff 1f       	adc	r31, r31
     2e2:	ec 5e       	subi	r30, 0xEC	; 236
     2e4:	fe 4f       	sbci	r31, 0xFE	; 254
     2e6:	01 90       	ld	r0, Z+
     2e8:	f0 81       	ld	r31, Z
     2ea:	e0 2d       	mov	r30, r0
		tmp = *reg | mask;
     2ec:	80 81       	ld	r24, Z
     2ee:	89 2b       	or	r24, r25
		if (! (aCmd & 2)) {
     2f0:	41 ff       	sbrs	r20, 1
			tmp ^= mask;
     2f2:	89 27       	eor	r24, r25
		}
		*reg = tmp;
     2f4:	80 83       	st	Z, r24
		reg = DDRx[aPort];
     2f6:	aa 0f       	add	r26, r26
     2f8:	bb 1f       	adc	r27, r27
     2fa:	ac 5f       	subi	r26, 0xFC	; 252
     2fc:	be 4f       	sbci	r27, 0xFE	; 254
     2fe:	ed 91       	ld	r30, X+
     300:	fc 91       	ld	r31, X
		tmp = *reg | mask;
     302:	80 81       	ld	r24, Z
     304:	89 2b       	or	r24, r25
		if (! (aCmd & 1)) {
     306:	40 ff       	sbrs	r20, 0
			tmp ^= mask;
     308:	89 27       	eor	r24, r25
		}
		*reg = tmp;
     30a:	80 83       	st	Z, r24
	}
     30c:	08 95       	ret

0000030e <Inf_Spi_Init>:
#ifndef INF_SPI_C_
	#define INF_SPI_C_



	void Inf_Spi_Init(const uint8_t aCfg) {
     30e:	df 93       	push	r29
     310:	cf 93       	push	r28
     312:	0f 92       	push	r0
     314:	cd b7       	in	r28, 0x3d	; 61
     316:	de b7       	in	r29, 0x3e	; 62
     318:	89 83       	std	Y+1, r24	; 0x01
		// Bit 3	CPOL (Clock Polarity)
		// Bit 4	CPHA (Clock Phase)
		// Bit 5	SPR0
		// Bit 6	SPR1
		// Bit 7	SPI2X
		SPCR &= ~(1 << SPE);
     31a:	8c b5       	in	r24, 0x2c	; 44
     31c:	8f 7b       	andi	r24, 0xBF	; 191
     31e:	8c bd       	out	0x2c, r24	; 44
		if (bit_is_set(aCfg, 0)) {
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	80 ff       	sbrs	r24, 0
     324:	15 c0       	rjmp	.+42     	; 0x350 <Inf_Spi_Init+0x42>
			if (bit_is_set(aCfg, 1)) {
     326:	89 81       	ldd	r24, Y+1	; 0x01
     328:	81 ff       	sbrs	r24, 1
     32a:	07 c0       	rjmp	.+14     	; 0x33a <Inf_Spi_Init+0x2c>
				INF_SPI_DDR |= (1 << INF_SPI_DD_MOSI) | (1 << INF_SPI_DD_SCK);
     32c:	84 b1       	in	r24, 0x04	; 4
     32e:	88 62       	ori	r24, 0x28	; 40
     330:	84 b9       	out	0x04, r24	; 4
				INF_SPI_DDR &= ~(1 << INF_SPI_DD_MISO);
     332:	24 98       	cbi	0x04, 4	; 4
				SPCR |= (1 << MSTR);
     334:	8c b5       	in	r24, 0x2c	; 44
     336:	80 61       	ori	r24, 0x10	; 16
     338:	06 c0       	rjmp	.+12     	; 0x346 <Inf_Spi_Init+0x38>
			}
			else {
				INF_SPI_DDR |= (1 << INF_SPI_DD_MISO);
     33a:	24 9a       	sbi	0x04, 4	; 4
				INF_SPI_DDR &= ~(1 << INF_SPI_DD_MOSI) & ~(1 << INF_SPI_DD_SCK);
     33c:	84 b1       	in	r24, 0x04	; 4
     33e:	87 7d       	andi	r24, 0xD7	; 215
     340:	84 b9       	out	0x04, r24	; 4
				SPCR &= ~(1 << MSTR);
     342:	8c b5       	in	r24, 0x2c	; 44
     344:	8f 7e       	andi	r24, 0xEF	; 239
     346:	8c bd       	out	0x2c, r24	; 44
			}
			SPCR |= (1 << SPE);
     348:	8c b5       	in	r24, 0x2c	; 44
     34a:	80 64       	ori	r24, 0x40	; 64
     34c:	8c bd       	out	0x2c, r24	; 44
     34e:	03 c0       	rjmp	.+6      	; 0x356 <Inf_Spi_Init+0x48>
		}
		else {
			INF_SPI_DDR &= ~(1 << INF_SPI_DD_MISO) & ~(1 << INF_SPI_DD_MOSI) & ~(1 << INF_SPI_DD_SCK);
     350:	84 b1       	in	r24, 0x04	; 4
     352:	87 7c       	andi	r24, 0xC7	; 199
     354:	84 b9       	out	0x04, r24	; 4
		}
	}
     356:	0f 90       	pop	r0
     358:	cf 91       	pop	r28
     35a:	df 91       	pop	r29
     35c:	08 95       	ret

0000035e <Inf_Spi_Rx>:



	uint8_t Inf_Spi_Rx(void) {
		SPDR = 0;
     35e:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     360:	0d b4       	in	r0, 0x2d	; 45
     362:	07 fe       	sbrs	r0, 7
     364:	fd cf       	rjmp	.-6      	; 0x360 <Inf_Spi_Rx+0x2>
		return SPDR;
     366:	8e b5       	in	r24, 0x2e	; 46
	}
     368:	08 95       	ret

0000036a <Inf_Spi_Tx>:
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     36a:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     36c:	0d b4       	in	r0, 0x2d	; 45
     36e:	07 fe       	sbrs	r0, 7
     370:	fd cf       	rjmp	.-6      	; 0x36c <Inf_Spi_Tx+0x2>
	}
     372:	08 95       	ret

00000374 <Inf_Spi_TxRx>:



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     374:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     376:	0d b4       	in	r0, 0x2d	; 45
     378:	07 fe       	sbrs	r0, 7
     37a:	fd cf       	rjmp	.-6      	; 0x376 <Inf_Spi_TxRx+0x2>
		return SPDR;
     37c:	8e b5       	in	r24, 0x2e	; 46
	}
     37e:	08 95       	ret

00000380 <Lib_Mcp2515_Read>:
#ifndef LIB_MCP2515_C_
	#define LIB_MCP2515_C_



	uint8_t Lib_Mcp2515_Read(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr) {
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	08 2f       	mov	r16, r24
     388:	f6 2e       	mov	r15, r22
     38a:	14 2f       	mov	r17, r20
		uint8_t aData;
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     38c:	41 e0       	ldi	r20, 0x01	; 1
     38e:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     392:	83 e0       	ldi	r24, 0x03	; 3
     394:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     396:	0d b4       	in	r0, 0x2d	; 45
     398:	07 fe       	sbrs	r0, 7
     39a:	fd cf       	rjmp	.-6      	; 0x396 <Lib_Mcp2515_Read+0x16>
		return SPDR;
     39c:	8e b5       	in	r24, 0x2e	; 46
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     39e:	1e bd       	out	0x2e, r17	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     3a0:	0d b4       	in	r0, 0x2d	; 45
     3a2:	07 fe       	sbrs	r0, 7
     3a4:	fd cf       	rjmp	.-6      	; 0x3a0 <Lib_Mcp2515_Read+0x20>
		return SPDR;
     3a6:	8e b5       	in	r24, 0x2e	; 46
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     3a8:	8f ef       	ldi	r24, 0xFF	; 255
     3aa:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     3ac:	0d b4       	in	r0, 0x2d	; 45
     3ae:	07 fe       	sbrs	r0, 7
     3b0:	fd cf       	rjmp	.-6      	; 0x3ac <Lib_Mcp2515_Read+0x2c>
		return SPDR;
     3b2:	1e b5       	in	r17, 0x2e	; 46
		Inf_Spi_TxRx(LIB_MCP2515_READ);
		Inf_Spi_TxRx(aAddr);
		aData = Inf_Spi_TxRx(0xff);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     3b4:	80 2f       	mov	r24, r16
     3b6:	6f 2d       	mov	r22, r15
     3b8:	43 e0       	ldi	r20, 0x03	; 3
     3ba:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
		return aData;
	}
     3be:	81 2f       	mov	r24, r17
     3c0:	1f 91       	pop	r17
     3c2:	0f 91       	pop	r16
     3c4:	ff 90       	pop	r15
     3c6:	08 95       	ret

000003c8 <Lib_Mcp2515_Write>:



	void Lib_Mcp2515_Write(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr, const uint8_t aData) {
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	08 2f       	mov	r16, r24
     3d2:	f6 2e       	mov	r15, r22
     3d4:	14 2f       	mov	r17, r20
     3d6:	e2 2e       	mov	r14, r18
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     3d8:	41 e0       	ldi	r20, 0x01	; 1
     3da:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     3e2:	0d b4       	in	r0, 0x2d	; 45
     3e4:	07 fe       	sbrs	r0, 7
     3e6:	fd cf       	rjmp	.-6      	; 0x3e2 <Lib_Mcp2515_Write+0x1a>
		return SPDR;
     3e8:	8e b5       	in	r24, 0x2e	; 46
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     3ea:	1e bd       	out	0x2e, r17	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     3ec:	0d b4       	in	r0, 0x2d	; 45
     3ee:	07 fe       	sbrs	r0, 7
     3f0:	fd cf       	rjmp	.-6      	; 0x3ec <Lib_Mcp2515_Write+0x24>
		return SPDR;
     3f2:	8e b5       	in	r24, 0x2e	; 46
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     3f4:	ee bc       	out	0x2e, r14	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     3f6:	0d b4       	in	r0, 0x2d	; 45
     3f8:	07 fe       	sbrs	r0, 7
     3fa:	fd cf       	rjmp	.-6      	; 0x3f6 <Lib_Mcp2515_Write+0x2e>
		return SPDR;
     3fc:	8e b5       	in	r24, 0x2e	; 46
		Inf_Spi_TxRx(LIB_MCP2515_WRITE);
		Inf_Spi_TxRx(aAddr);
		Inf_Spi_TxRx(aData);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     3fe:	80 2f       	mov	r24, r16
     400:	6f 2d       	mov	r22, r15
     402:	43 e0       	ldi	r20, 0x03	; 3
     404:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
	}
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	ff 90       	pop	r15
     40e:	ef 90       	pop	r14
     410:	08 95       	ret

00000412 <Lib_Mcp2515_Modify>:



	void Lib_Mcp2515_Modify(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr, const uint8_t aMask, const uint8_t aData) {
     412:	df 92       	push	r13
     414:	ef 92       	push	r14
     416:	ff 92       	push	r15
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	e8 2e       	mov	r14, r24
     41e:	d6 2e       	mov	r13, r22
     420:	14 2f       	mov	r17, r20
     422:	f2 2e       	mov	r15, r18
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     424:	41 e0       	ldi	r20, 0x01	; 1
     426:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     42a:	85 e0       	ldi	r24, 0x05	; 5
     42c:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     42e:	0d b4       	in	r0, 0x2d	; 45
     430:	07 fe       	sbrs	r0, 7
     432:	fd cf       	rjmp	.-6      	; 0x42e <Lib_Mcp2515_Modify+0x1c>
		return SPDR;
     434:	8e b5       	in	r24, 0x2e	; 46
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     436:	1e bd       	out	0x2e, r17	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     438:	0d b4       	in	r0, 0x2d	; 45
     43a:	07 fe       	sbrs	r0, 7
     43c:	fd cf       	rjmp	.-6      	; 0x438 <Lib_Mcp2515_Modify+0x26>
		return SPDR;
     43e:	8e b5       	in	r24, 0x2e	; 46
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     440:	fe bc       	out	0x2e, r15	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     442:	0d b4       	in	r0, 0x2d	; 45
     444:	07 fe       	sbrs	r0, 7
     446:	fd cf       	rjmp	.-6      	; 0x442 <Lib_Mcp2515_Modify+0x30>
		return SPDR;
     448:	8e b5       	in	r24, 0x2e	; 46
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     44a:	0e bd       	out	0x2e, r16	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     44c:	0d b4       	in	r0, 0x2d	; 45
     44e:	07 fe       	sbrs	r0, 7
     450:	fd cf       	rjmp	.-6      	; 0x44c <Lib_Mcp2515_Modify+0x3a>
		return SPDR;
     452:	8e b5       	in	r24, 0x2e	; 46
		Inf_Spi_TxRx(LIB_MCP2515_BIT_MODIFY);
		Inf_Spi_TxRx(aAddr);
		Inf_Spi_TxRx(aMask);
		Inf_Spi_TxRx(aData);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     454:	8e 2d       	mov	r24, r14
     456:	6d 2d       	mov	r22, r13
     458:	43 e0       	ldi	r20, 0x03	; 3
     45a:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
	}
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	df 90       	pop	r13
     468:	08 95       	ret

0000046a <Inf_Can_Init>:
	#define INF_CAN_C_



	#if defined(INF_CAN0_TX) || defined(INF_CAN0_RX) || defined(INF_CAN1_TX) || defined(INF_CAN1_RX) || defined(INF_CAN2_TX) || defined(INF_CAN2_RX)
		uint8_t Inf_Can_Init(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aCnf1, const uint8_t aCnf2, const uint8_t aCnf3, const uint8_t aRSPort, const uint8_t aRSPin, const uint8_t aMode) {
     46a:	8f 92       	push	r8
     46c:	9f 92       	push	r9
     46e:	af 92       	push	r10
     470:	bf 92       	push	r11
     472:	cf 92       	push	r12
     474:	df 92       	push	r13
     476:	ef 92       	push	r14
     478:	ff 92       	push	r15
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	df 93       	push	r29
     480:	cf 93       	push	r28
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
     486:	f8 2e       	mov	r15, r24
     488:	d6 2e       	mov	r13, r22
     48a:	14 2f       	mov	r17, r20
     48c:	b2 2e       	mov	r11, r18
     48e:	90 2e       	mov	r9, r16
     490:	0c 2d       	mov	r16, r12
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     492:	43 e0       	ldi	r20, 0x03	; 3
     494:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     498:	81 2f       	mov	r24, r17
     49a:	0e 94 87 01 	call	0x30e	; 0x30e <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     49e:	8f 2d       	mov	r24, r15
     4a0:	6d 2d       	mov	r22, r13
     4a2:	41 e0       	ldi	r20, 0x01	; 1
     4a4:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     4a8:	80 ec       	ldi	r24, 0xC0	; 192
     4aa:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     4ac:	0d b4       	in	r0, 0x2d	; 45
     4ae:	07 fe       	sbrs	r0, 7
     4b0:	fd cf       	rjmp	.-6      	; 0x4ac <Inf_Can_Init+0x42>
		return SPDR;
     4b2:	8e b5       	in	r24, 0x2e	; 46
			Inf_Spi_TxRx(LIB_MCP2515_RESET);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     4b4:	8f 2d       	mov	r24, r15
     4b6:	6d 2d       	mov	r22, r13
     4b8:	43 e0       	ldi	r20, 0x03	; 3
     4ba:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4be:	80 ea       	ldi	r24, 0xA0	; 160
     4c0:	9f e0       	ldi	r25, 0x0F	; 15
     4c2:	01 97       	sbiw	r24, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <Inf_Can_Init+0x58>
			_delay_ms(2);
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF1, aCnf1);
     4c6:	8f 2d       	mov	r24, r15
     4c8:	6d 2d       	mov	r22, r13
     4ca:	4a e2       	ldi	r20, 0x2A	; 42
     4cc:	2b 2d       	mov	r18, r11
     4ce:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF2, aCnf2);
     4d2:	8f 2d       	mov	r24, r15
     4d4:	6d 2d       	mov	r22, r13
     4d6:	49 e2       	ldi	r20, 0x29	; 41
     4d8:	29 2d       	mov	r18, r9
     4da:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF3, aCnf3);
     4de:	8f 2d       	mov	r24, r15
     4e0:	6d 2d       	mov	r22, r13
     4e2:	48 e2       	ldi	r20, 0x28	; 40
     4e4:	2e 2d       	mov	r18, r14
     4e6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_RXB0CTRL, 0x64);
     4ea:	8f 2d       	mov	r24, r15
     4ec:	6d 2d       	mov	r22, r13
     4ee:	40 e6       	ldi	r20, 0x60	; 96
     4f0:	24 e6       	ldi	r18, 0x64	; 100
     4f2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_RXB1CTRL, 0x60);
     4f6:	8f 2d       	mov	r24, r15
     4f8:	6d 2d       	mov	r22, r13
     4fa:	40 e7       	ldi	r20, 0x70	; 112
     4fc:	20 e6       	ldi	r18, 0x60	; 96
     4fe:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CANINTE, 0x03);
     502:	8f 2d       	mov	r24, r15
     504:	6d 2d       	mov	r22, r13
     506:	4b e2       	ldi	r20, 0x2B	; 43
     508:	23 e0       	ldi	r18, 0x03	; 3
     50a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <Lib_Mcp2515_Write>
			if (aRSPort != 0) {
     50e:	00 23       	and	r16, r16
     510:	79 f1       	breq	.+94     	; 0x570 <__stack+0x71>
				if (aRSPort < 8) {
     512:	08 30       	cpi	r16, 0x08	; 8
     514:	20 f4       	brcc	.+8      	; 0x51e <__stack+0x1f>
					Lib_Pin_Set(aRSPort, aRSPin, LIB_PIN_OUTPUT_LOW);
     516:	80 2f       	mov	r24, r16
     518:	6a 2d       	mov	r22, r10
     51a:	41 e0       	ldi	r20, 0x01	; 1
     51c:	05 c0       	rjmp	.+10     	; 0x528 <__stack+0x29>
				}
				else if (aRSPort < 16) {
     51e:	00 31       	cpi	r16, 0x10	; 16
     520:	30 f4       	brcc	.+12     	; 0x52e <__stack+0x2f>
					Lib_Pin_Set(aRSPort, aRSPin, LIB_PIN_OUTPUT_HIGH);
     522:	80 2f       	mov	r24, r16
     524:	6a 2d       	mov	r22, r10
     526:	43 e0       	ldi	r20, 0x03	; 3
     528:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
     52c:	21 c0       	rjmp	.+66     	; 0x570 <__stack+0x71>
				}
				else if (aRSPort == 0xFC) {
     52e:	0c 3f       	cpi	r16, 0xFC	; 252
     530:	31 f4       	brne	.+12     	; 0x53e <__stack+0x3f>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x14, 0x04);
     532:	8f 2d       	mov	r24, r15
     534:	6d 2d       	mov	r22, r13
     536:	4c e0       	ldi	r20, 0x0C	; 12
     538:	24 e1       	ldi	r18, 0x14	; 20
     53a:	04 e0       	ldi	r16, 0x04	; 4
     53c:	17 c0       	rjmp	.+46     	; 0x56c <__stack+0x6d>
				}
				else if (aRSPort == 0xFD) {
     53e:	0d 3f       	cpi	r16, 0xFD	; 253
     540:	31 f4       	brne	.+12     	; 0x54e <__stack+0x4f>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x28, 0x08);
     542:	8f 2d       	mov	r24, r15
     544:	6d 2d       	mov	r22, r13
     546:	4c e0       	ldi	r20, 0x0C	; 12
     548:	28 e2       	ldi	r18, 0x28	; 40
     54a:	08 e0       	ldi	r16, 0x08	; 8
     54c:	0f c0       	rjmp	.+30     	; 0x56c <__stack+0x6d>
				}
				else if (aRSPort == 0xFE) {
     54e:	0e 3f       	cpi	r16, 0xFE	; 254
     550:	31 f4       	brne	.+12     	; 0x55e <__stack+0x5f>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x14, 0x14);
     552:	8f 2d       	mov	r24, r15
     554:	6d 2d       	mov	r22, r13
     556:	4c e0       	ldi	r20, 0x0C	; 12
     558:	24 e1       	ldi	r18, 0x14	; 20
     55a:	04 e1       	ldi	r16, 0x14	; 20
     55c:	07 c0       	rjmp	.+14     	; 0x56c <__stack+0x6d>
				}
				else if (aRSPort == 0xFF) {
     55e:	0f 3f       	cpi	r16, 0xFF	; 255
     560:	39 f4       	brne	.+14     	; 0x570 <__stack+0x71>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x28, 0x28);
     562:	8f 2d       	mov	r24, r15
     564:	6d 2d       	mov	r22, r13
     566:	4c e0       	ldi	r20, 0x0C	; 12
     568:	28 e2       	ldi	r18, 0x28	; 40
     56a:	08 e2       	ldi	r16, 0x28	; 40
     56c:	0e 94 09 02 	call	0x412	; 0x412 <Lib_Mcp2515_Modify>
				}
			}
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x0C);
     570:	8f 2d       	mov	r24, r15
     572:	6d 2d       	mov	r22, r13
     574:	4c e0       	ldi	r20, 0x0C	; 12
     576:	2c e0       	ldi	r18, 0x0C	; 12
     578:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_CANCTRL, 0xE0, aMode);
     57c:	8f 2d       	mov	r24, r15
     57e:	6d 2d       	mov	r22, r13
     580:	4f e0       	ldi	r20, 0x0F	; 15
     582:	20 ee       	ldi	r18, 0xE0	; 224
     584:	08 2d       	mov	r16, r8
     586:	0e 94 09 02 	call	0x412	; 0x412 <Lib_Mcp2515_Modify>
			if (((Lib_Mcp2515_Read(aSSPort, aSSPin, LIB_MCP2515_CANCTRL)) & 0xE0) == aMode) {
     58a:	8f 2d       	mov	r24, r15
     58c:	6d 2d       	mov	r22, r13
     58e:	4f e0       	ldi	r20, 0x0F	; 15
     590:	0e 94 c0 01 	call	0x380	; 0x380 <Lib_Mcp2515_Read>
     594:	40 e0       	ldi	r20, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	80 7e       	andi	r24, 0xE0	; 224
     59a:	90 70       	andi	r25, 0x00	; 0
     59c:	28 2d       	mov	r18, r8
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	82 17       	cp	r24, r18
     5a2:	93 07       	cpc	r25, r19
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <__stack+0xa9>
     5a6:	41 e0       	ldi	r20, 0x01	; 1
				return TRUE;
			}
			return FALSE;
		}
     5a8:	84 2f       	mov	r24, r20
     5aa:	cf 91       	pop	r28
     5ac:	df 91       	pop	r29
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	cf 90       	pop	r12
     5ba:	bf 90       	pop	r11
     5bc:	af 90       	pop	r10
     5be:	9f 90       	pop	r9
     5c0:	8f 90       	pop	r8
     5c2:	08 95       	ret

000005c4 <Inf_Can_Rx>:
	#endif /* INF_CAN0_TX || INF_CAN0_RX || INF_CAN1_TX || INF_CAN1_RX || INF_CAN2_TX || INF_CAN2_RX */



	#if defined(INF_CAN0_RX) || defined(INF_CAN1_RX) || defined(INF_CAN2_RX)
		uint8_t Inf_Can_Rx(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aRSPort, const uint8_t aRSPin, Inf_Can_Msg_t * aInf_Can_Msg) {
     5c4:	df 92       	push	r13
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	df 93       	push	r29
     5d0:	cf 93       	push	r28
     5d2:	0f 92       	push	r0
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	08 2f       	mov	r16, r24
     5da:	d6 2e       	mov	r13, r22
     5dc:	14 2f       	mov	r17, r20
			uint8_t State = 0;
     5de:	19 82       	std	Y+1, r1	; 0x01
			uint8_t CmdSave = 0;
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     5e0:	43 e0       	ldi	r20, 0x03	; 3
     5e2:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     5e6:	81 2f       	mov	r24, r17
     5e8:	0e 94 87 01 	call	0x30e	; 0x30e <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     5ec:	80 2f       	mov	r24, r16
     5ee:	6d 2d       	mov	r22, r13
     5f0:	41 e0       	ldi	r20, 0x01	; 1
     5f2:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     5f6:	80 eb       	ldi	r24, 0xB0	; 176
     5f8:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     5fa:	0d b4       	in	r0, 0x2d	; 45
     5fc:	07 fe       	sbrs	r0, 7
     5fe:	fd cf       	rjmp	.-6      	; 0x5fa <Inf_Can_Rx+0x36>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     600:	8f ef       	ldi	r24, 0xFF	; 255
     602:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     604:	0d b4       	in	r0, 0x2d	; 45
     606:	07 fe       	sbrs	r0, 7
     608:	fd cf       	rjmp	.-6      	; 0x604 <Inf_Can_Rx+0x40>
		return SPDR;
     60a:	9e b5       	in	r25, 0x2e	; 46
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     60c:	8f ef       	ldi	r24, 0xFF	; 255
     60e:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     610:	0d b4       	in	r0, 0x2d	; 45
     612:	07 fe       	sbrs	r0, 7
     614:	fd cf       	rjmp	.-6      	; 0x610 <Inf_Can_Rx+0x4c>
		return SPDR;
     616:	8e b5       	in	r24, 0x2e	; 46
			Inf_Spi_Tx(LIB_MCP2515_RX_STATUS);
			State = Inf_Spi_TxRx(0xFF);
     618:	99 83       	std	Y+1, r25	; 0x01
			Inf_Spi_TxRx(0xFF);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     61a:	80 2f       	mov	r24, r16
     61c:	6d 2d       	mov	r22, r13
     61e:	43 e0       	ldi	r20, 0x03	; 3
     620:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
			if (bit_is_set(State, LIB_MCP2515_RX_STATUS_INSTRUCTION_CANINTF_RX0IF)) {
     624:	89 81       	ldd	r24, Y+1	; 0x01
     626:	86 ff       	sbrs	r24, 6
     628:	02 c0       	rjmp	.+4      	; 0x62e <Inf_Can_Rx+0x6a>
     62a:	10 e9       	ldi	r17, 0x90	; 144
     62c:	06 c0       	rjmp	.+12     	; 0x63a <Inf_Can_Rx+0x76>
				CmdSave = LIB_MCP2515_READ_RX_BUFFER0;
			}
			else if (bit_is_set(State, LIB_MCP2515_RX_STATUS_INSTRUCTION_CANINTF_RX1IF)) {
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	87 fd       	sbrc	r24, 7
     632:	02 c0       	rjmp	.+4      	; 0x638 <Inf_Can_Rx+0x74>
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	4e c0       	rjmp	.+156    	; 0x6d4 <Inf_Can_Rx+0x110>
     638:	14 e9       	ldi	r17, 0x94	; 148
				CmdSave = LIB_MCP2515_READ_RX_BUFFER1;
			}
			else {
				return FALSE;
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     63a:	80 2f       	mov	r24, r16
     63c:	6d 2d       	mov	r22, r13
     63e:	41 e0       	ldi	r20, 0x01	; 1
     640:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     644:	1e bd       	out	0x2e, r17	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     646:	0d b4       	in	r0, 0x2d	; 45
     648:	07 fe       	sbrs	r0, 7
     64a:	fd cf       	rjmp	.-6      	; 0x646 <Inf_Can_Rx+0x82>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     64c:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     64e:	0d b4       	in	r0, 0x2d	; 45
     650:	07 fe       	sbrs	r0, 7
     652:	fd cf       	rjmp	.-6      	; 0x64e <Inf_Can_Rx+0x8a>
		return SPDR;
     654:	8e b5       	in	r24, 0x2e	; 46
			Inf_Spi_Tx(CmdSave);
			aInf_Can_Msg->SIdH = Inf_Spi_TxRx(0x00);
     656:	f7 01       	movw	r30, r14
     658:	81 83       	std	Z+1, r24	; 0x01
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     65a:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     65c:	0d b4       	in	r0, 0x2d	; 45
     65e:	07 fe       	sbrs	r0, 7
     660:	fd cf       	rjmp	.-6      	; 0x65c <Inf_Can_Rx+0x98>
		return SPDR;
     662:	8e b5       	in	r24, 0x2e	; 46
			aInf_Can_Msg->SIdL = Inf_Spi_TxRx(0x00);
     664:	f7 01       	movw	r30, r14
     666:	80 83       	st	Z, r24
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     668:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     66a:	0d b4       	in	r0, 0x2d	; 45
     66c:	07 fe       	sbrs	r0, 7
     66e:	fd cf       	rjmp	.-6      	; 0x66a <Inf_Can_Rx+0xa6>
		return SPDR;
     670:	8e b5       	in	r24, 0x2e	; 46
			aInf_Can_Msg->EIdH = Inf_Spi_TxRx(0x00);
     672:	f7 01       	movw	r30, r14
     674:	83 83       	std	Z+3, r24	; 0x03
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     676:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     678:	0d b4       	in	r0, 0x2d	; 45
     67a:	07 fe       	sbrs	r0, 7
     67c:	fd cf       	rjmp	.-6      	; 0x678 <Inf_Can_Rx+0xb4>
		return SPDR;
     67e:	8e b5       	in	r24, 0x2e	; 46
			aInf_Can_Msg->EIdL = Inf_Spi_TxRx(0x00);
     680:	f7 01       	movw	r30, r14
     682:	82 83       	std	Z+2, r24	; 0x02
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     684:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     686:	0d b4       	in	r0, 0x2d	; 45
     688:	07 fe       	sbrs	r0, 7
     68a:	fd cf       	rjmp	.-6      	; 0x686 <Inf_Can_Rx+0xc2>
		return SPDR;
     68c:	8e b5       	in	r24, 0x2e	; 46
			aInf_Can_Msg->Dlc = Inf_Spi_TxRx(0x00);
     68e:	f7 01       	movw	r30, r14
     690:	84 83       	std	Z+4, r24	; 0x04
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
     692:	84 81       	ldd	r24, Z+4	; 0x04
     694:	86 fd       	sbrc	r24, 6
     696:	11 c0       	rjmp	.+34     	; 0x6ba <Inf_Can_Rx+0xf6>
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0a c0       	rjmp	.+20     	; 0x6b0 <Inf_Can_Rx+0xec>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     69c:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     69e:	0d b4       	in	r0, 0x2d	; 45
     6a0:	07 fe       	sbrs	r0, 7
     6a2:	fd cf       	rjmp	.-6      	; 0x69e <Inf_Can_Rx+0xda>
		return SPDR;
     6a4:	8e b5       	in	r24, 0x2e	; 46
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
     6a6:	f7 01       	movw	r30, r14
     6a8:	e9 0f       	add	r30, r25
     6aa:	f1 1d       	adc	r31, r1
     6ac:	85 83       	std	Z+5, r24	; 0x05
			aInf_Can_Msg->SIdL = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->EIdH = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->EIdL = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->Dlc = Inf_Spi_TxRx(0x00);
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
     6ae:	9f 5f       	subi	r25, 0xFF	; 255
     6b0:	f7 01       	movw	r30, r14
     6b2:	84 81       	ldd	r24, Z+4	; 0x04
     6b4:	98 17       	cp	r25, r24
     6b6:	90 f3       	brcs	.-28     	; 0x69c <Inf_Can_Rx+0xd8>
     6b8:	07 c0       	rjmp	.+14     	; 0x6c8 <Inf_Can_Rx+0x104>
     6ba:	f7 01       	movw	r30, r14
     6bc:	80 e0       	ldi	r24, 0x00	; 0
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
				}
			}
			else {
				for (uint8_t i = 0; i < 8; i++) {
					aInf_Can_Msg->Data[i] = 0x00;
     6be:	15 82       	std	Z+5, r1	; 0x05
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
				}
			}
			else {
				for (uint8_t i = 0; i < 8; i++) {
     6c0:	8f 5f       	subi	r24, 0xFF	; 255
     6c2:	31 96       	adiw	r30, 0x01	; 1
     6c4:	88 30       	cpi	r24, 0x08	; 8
     6c6:	d9 f7       	brne	.-10     	; 0x6be <Inf_Can_Rx+0xfa>
					aInf_Can_Msg->Data[i] = 0x00;
				}
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     6c8:	80 2f       	mov	r24, r16
     6ca:	6d 2d       	mov	r22, r13
     6cc:	43 e0       	ldi	r20, 0x03	; 3
     6ce:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
     6d2:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
		}
     6d4:	0f 90       	pop	r0
     6d6:	cf 91       	pop	r28
     6d8:	df 91       	pop	r29
     6da:	1f 91       	pop	r17
     6dc:	0f 91       	pop	r16
     6de:	ff 90       	pop	r15
     6e0:	ef 90       	pop	r14
     6e2:	df 90       	pop	r13
     6e4:	08 95       	ret

000006e6 <Inf_Can_Tx>:
	#endif /* INF_CAN0_RX || INF_CAN1_RX || INF_CAN2_RX */



	#if defined(INF_CAN0_TX) || defined(INF_CAN1_TX) || defined(INF_CAN2_TX)
		uint8_t Inf_Can_Tx(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aRSPort, const uint8_t aRSPin, Inf_Can_Msg_t * aInf_Can_Msg) {
     6e6:	cf 92       	push	r12
     6e8:	df 92       	push	r13
     6ea:	ef 92       	push	r14
     6ec:	ff 92       	push	r15
     6ee:	0f 93       	push	r16
     6f0:	1f 93       	push	r17
     6f2:	df 93       	push	r29
     6f4:	cf 93       	push	r28
     6f6:	0f 92       	push	r0
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
     6fc:	08 2f       	mov	r16, r24
     6fe:	d6 2e       	mov	r13, r22
     700:	14 2f       	mov	r17, r20
			uint8_t State = 0;
     702:	19 82       	std	Y+1, r1	; 0x01
			uint8_t CmdLoad = 0;
			uint8_t CmdSend = 0;
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     704:	43 e0       	ldi	r20, 0x03	; 3
     706:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     70a:	81 2f       	mov	r24, r17
     70c:	0e 94 87 01 	call	0x30e	; 0x30e <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     710:	80 2f       	mov	r24, r16
     712:	6d 2d       	mov	r22, r13
     714:	41 e0       	ldi	r20, 0x01	; 1
     716:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     71a:	80 ea       	ldi	r24, 0xA0	; 160
     71c:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     71e:	0d b4       	in	r0, 0x2d	; 45
     720:	07 fe       	sbrs	r0, 7
     722:	fd cf       	rjmp	.-6      	; 0x71e <Inf_Can_Tx+0x38>
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     728:	0d b4       	in	r0, 0x2d	; 45
     72a:	07 fe       	sbrs	r0, 7
     72c:	fd cf       	rjmp	.-6      	; 0x728 <Inf_Can_Tx+0x42>
		return SPDR;
     72e:	9e b5       	in	r25, 0x2e	; 46
	}



	uint8_t Inf_Spi_TxRx(const uint8_t Data) {
		SPDR = Data;
     730:	8f ef       	ldi	r24, 0xFF	; 255
     732:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     734:	0d b4       	in	r0, 0x2d	; 45
     736:	07 fe       	sbrs	r0, 7
     738:	fd cf       	rjmp	.-6      	; 0x734 <Inf_Can_Tx+0x4e>
		return SPDR;
     73a:	8e b5       	in	r24, 0x2e	; 46
			Inf_Spi_Tx(LIB_MCP2515_READ_STATUS);
			State = Inf_Spi_TxRx(0xFF);
     73c:	99 83       	std	Y+1, r25	; 0x01
			Inf_Spi_TxRx(0xFF);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     73e:	80 2f       	mov	r24, r16
     740:	6d 2d       	mov	r22, r13
     742:	43 e0       	ldi	r20, 0x03	; 3
     744:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
			if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB0CTRL_TXREQ)) {
     748:	89 81       	ldd	r24, Y+1	; 0x01
     74a:	82 fd       	sbrc	r24, 2
     74c:	04 c0       	rjmp	.+8      	; 0x756 <Inf_Can_Tx+0x70>
     74e:	10 e4       	ldi	r17, 0x40	; 64
     750:	61 e8       	ldi	r22, 0x81	; 129
     752:	c6 2e       	mov	r12, r22
     754:	0f c0       	rjmp	.+30     	; 0x774 <Inf_Can_Tx+0x8e>
				CmdLoad = LIB_MCP2515_LOAD_TX_BUFFER0;
				CmdSend = LIB_MCP2515_RTS_TX0;
			}
			else if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB1CTRL_TXREQ)) {
     756:	89 81       	ldd	r24, Y+1	; 0x01
     758:	84 fd       	sbrc	r24, 4
     75a:	04 c0       	rjmp	.+8      	; 0x764 <Inf_Can_Tx+0x7e>
     75c:	12 e4       	ldi	r17, 0x42	; 66
     75e:	52 e8       	ldi	r21, 0x82	; 130
     760:	c5 2e       	mov	r12, r21
     762:	08 c0       	rjmp	.+16     	; 0x774 <Inf_Can_Tx+0x8e>
				CmdLoad = LIB_MCP2515_LOAD_TX_BUFFER1;
				CmdSend = LIB_MCP2515_RTS_TX1;
			}
			else if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB2CTRL_TXREQ)) {
     764:	89 81       	ldd	r24, Y+1	; 0x01
     766:	86 ff       	sbrs	r24, 6
     768:	02 c0       	rjmp	.+4      	; 0x76e <Inf_Can_Tx+0x88>
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	50 c0       	rjmp	.+160    	; 0x80e <Inf_Can_Tx+0x128>
     76e:	14 e4       	ldi	r17, 0x44	; 68
     770:	44 e8       	ldi	r20, 0x84	; 132
     772:	c4 2e       	mov	r12, r20
				CmdSend = LIB_MCP2515_RTS_TX2;
			}
			else {
				return FALSE;
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     774:	80 2f       	mov	r24, r16
     776:	6d 2d       	mov	r22, r13
     778:	41 e0       	ldi	r20, 0x01	; 1
     77a:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     77e:	1e bd       	out	0x2e, r17	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     780:	0d b4       	in	r0, 0x2d	; 45
     782:	07 fe       	sbrs	r0, 7
     784:	fd cf       	rjmp	.-6      	; 0x780 <Inf_Can_Tx+0x9a>
			Inf_Spi_Tx(CmdLoad);
			Inf_Spi_Tx(aInf_Can_Msg->SIdH);
     786:	f7 01       	movw	r30, r14
     788:	81 81       	ldd	r24, Z+1	; 0x01
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     78a:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     78c:	0d b4       	in	r0, 0x2d	; 45
     78e:	07 fe       	sbrs	r0, 7
     790:	fd cf       	rjmp	.-6      	; 0x78c <Inf_Can_Tx+0xa6>
			Inf_Spi_Tx(aInf_Can_Msg->SIdL);
     792:	f7 01       	movw	r30, r14
     794:	80 81       	ld	r24, Z
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     796:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     798:	0d b4       	in	r0, 0x2d	; 45
     79a:	07 fe       	sbrs	r0, 7
     79c:	fd cf       	rjmp	.-6      	; 0x798 <Inf_Can_Tx+0xb2>
			Inf_Spi_Tx(aInf_Can_Msg->EIdH);
     79e:	f7 01       	movw	r30, r14
     7a0:	83 81       	ldd	r24, Z+3	; 0x03
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     7a2:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     7a4:	0d b4       	in	r0, 0x2d	; 45
     7a6:	07 fe       	sbrs	r0, 7
     7a8:	fd cf       	rjmp	.-6      	; 0x7a4 <Inf_Can_Tx+0xbe>
			Inf_Spi_Tx(aInf_Can_Msg->EIdL);
     7aa:	f7 01       	movw	r30, r14
     7ac:	82 81       	ldd	r24, Z+2	; 0x02
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     7ae:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     7b0:	0d b4       	in	r0, 0x2d	; 45
     7b2:	07 fe       	sbrs	r0, 7
     7b4:	fd cf       	rjmp	.-6      	; 0x7b0 <Inf_Can_Tx+0xca>
			Inf_Spi_Tx(aInf_Can_Msg->Dlc);
     7b6:	f7 01       	movw	r30, r14
     7b8:	24 81       	ldd	r18, Z+4	; 0x04
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     7ba:	2e bd       	out	0x2e, r18	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     7bc:	0d b4       	in	r0, 0x2d	; 45
     7be:	07 fe       	sbrs	r0, 7
     7c0:	fd cf       	rjmp	.-6      	; 0x7bc <Inf_Can_Tx+0xd6>
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
     7c2:	f7 01       	movw	r30, r14
     7c4:	84 81       	ldd	r24, Z+4	; 0x04
     7c6:	86 fd       	sbrc	r24, 6
     7c8:	0d c0       	rjmp	.+26     	; 0x7e4 <Inf_Can_Tx+0xfe>
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	09 c0       	rjmp	.+18     	; 0x7e0 <Inf_Can_Tx+0xfa>
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++)
				{
					Inf_Spi_Tx(aInf_Can_Msg->Data[i]);
     7ce:	f7 01       	movw	r30, r14
     7d0:	e9 0f       	add	r30, r25
     7d2:	f1 1d       	adc	r31, r1
     7d4:	85 81       	ldd	r24, Z+5	; 0x05
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     7d6:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     7d8:	0d b4       	in	r0, 0x2d	; 45
     7da:	07 fe       	sbrs	r0, 7
     7dc:	fd cf       	rjmp	.-6      	; 0x7d8 <Inf_Can_Tx+0xf2>
			Inf_Spi_Tx(aInf_Can_Msg->SIdL);
			Inf_Spi_Tx(aInf_Can_Msg->EIdH);
			Inf_Spi_Tx(aInf_Can_Msg->EIdL);
			Inf_Spi_Tx(aInf_Can_Msg->Dlc);
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++)
     7de:	9f 5f       	subi	r25, 0xFF	; 255
     7e0:	92 17       	cp	r25, r18
     7e2:	a8 f3       	brcs	.-22     	; 0x7ce <Inf_Can_Tx+0xe8>
				{
					Inf_Spi_Tx(aInf_Can_Msg->Data[i]);
				}
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     7e4:	80 2f       	mov	r24, r16
     7e6:	6d 2d       	mov	r22, r13
     7e8:	43 e0       	ldi	r20, 0x03	; 3
     7ea:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
			asm volatile("nop");
     7ee:	00 00       	nop
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     7f0:	80 2f       	mov	r24, r16
     7f2:	6d 2d       	mov	r22, r13
     7f4:	41 e0       	ldi	r20, 0x01	; 1
     7f6:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
	}
 


	void Inf_Spi_Tx(const uint8_t Data) {
		SPDR = Data;
     7fa:	ce bc       	out	0x2e, r12	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     7fc:	0d b4       	in	r0, 0x2d	; 45
     7fe:	07 fe       	sbrs	r0, 7
     800:	fd cf       	rjmp	.-6      	; 0x7fc <Inf_Can_Tx+0x116>
			Inf_Spi_Tx(CmdSend);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     802:	80 2f       	mov	r24, r16
     804:	6d 2d       	mov	r22, r13
     806:	43 e0       	ldi	r20, 0x03	; 3
     808:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
     80c:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
		}
     80e:	0f 90       	pop	r0
     810:	cf 91       	pop	r28
     812:	df 91       	pop	r29
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	ff 90       	pop	r15
     81a:	ef 90       	pop	r14
     81c:	df 90       	pop	r13
     81e:	cf 90       	pop	r12
     820:	08 95       	ret

00000822 <Isb_Inf_Can_Init>:
#ifndef ISB_INF_CAN_C_
	#define ISB_INF_CAN_C_



	uint8_t Isb_Inf_Can_Init(const uint8_t aInf) {
     822:	8f 92       	push	r8
     824:	af 92       	push	r10
     826:	cf 92       	push	r12
     828:	ef 92       	push	r14
     82a:	0f 93       	push	r16
		uint8_t Result = FALSE;
		switch (aInf) {
     82c:	88 23       	and	r24, r24
     82e:	11 f0       	breq	.+4      	; 0x834 <Isb_Inf_Can_Init+0x12>
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	0e c0       	rjmp	.+28     	; 0x850 <Isb_Inf_Can_Init+0x2e>
			#if ISB_INF_CAN0 == 1
				case 0:
					Result = Inf_Can_Init(INF_CAN0_SSPORT, INF_CAN0_SSPIN, INF_CAN0_SPICFG, INF_CAN0_CNF1, INF_CAN0_CNF2, INF_CAN0_CNF3, INF_CAN0_RSPORT, INF_CAN0_RSPIN, INF_CAN0_MODE);
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	43 e0       	ldi	r20, 0x03	; 3
     83a:	21 e0       	ldi	r18, 0x01	; 1
     83c:	06 eb       	ldi	r16, 0xB6	; 182
     83e:	e4 e0       	ldi	r30, 0x04	; 4
     840:	ee 2e       	mov	r14, r30
     842:	cc 24       	eor	r12, r12
     844:	ca 94       	dec	r12
     846:	72 e0       	ldi	r23, 0x02	; 2
     848:	a7 2e       	mov	r10, r23
     84a:	88 24       	eor	r8, r8
     84c:	0e 94 35 02 	call	0x46a	; 0x46a <Inf_Can_Init>
					Result = Inf_Can_Init(INF_CAN2_SSPORT, INF_CAN2_SSPIN, INF_CAN2_SPICFG, INF_CAN2_CNF1, INF_CAN2_CNF2, INF_CAN2_CNF3, INF_CAN2_RSPORT, INF_CAN2_RSPIN, INF_CAN2_MODE);
					break;
			#endif /* ISB_INF_CAN2 == 1 */
		}
		return Result;
	}
     850:	0f 91       	pop	r16
     852:	ef 90       	pop	r14
     854:	cf 90       	pop	r12
     856:	af 90       	pop	r10
     858:	8f 90       	pop	r8
     85a:	08 95       	ret

0000085c <Isb_Inf_Can_Rx>:



	uint8_t Isb_Inf_Can_Rx(const uint8_t aInf, Isb_Msg_t * aIsb_Msg) {
     85c:	af 92       	push	r10
     85e:	bf 92       	push	r11
     860:	cf 92       	push	r12
     862:	df 92       	push	r13
     864:	ef 92       	push	r14
     866:	ff 92       	push	r15
     868:	0f 93       	push	r16
     86a:	df 93       	push	r29
     86c:	cf 93       	push	r28
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
     872:	2d 97       	sbiw	r28, 0x0d	; 13
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	de bf       	out	0x3e, r29	; 62
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	cd bf       	out	0x3d, r28	; 61
     87e:	6b 01       	movw	r12, r22
		uint8_t aSSPort;
		uint8_t aSSPin;
		uint8_t aSpiCfg;
		uint8_t aRSPort;
		uint8_t aRSPin;
		switch (aInf) {
     880:	88 23       	and	r24, r24
     882:	09 f0       	breq	.+2      	; 0x886 <Isb_Inf_Can_Rx+0x2a>
     884:	66 c0       	rjmp	.+204    	; 0x952 <Isb_Inf_Can_Rx+0xf6>
			default:
				return FALSE;
				break;
		}
		Inf_Can_Msg_t aCanMsg;
		if (Inf_Can_Rx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
     886:	82 e0       	ldi	r24, 0x02	; 2
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	43 e0       	ldi	r20, 0x03	; 3
     88c:	2f ef       	ldi	r18, 0xFF	; 255
     88e:	02 e0       	ldi	r16, 0x02	; 2
     890:	5e 01       	movw	r10, r28
     892:	08 94       	sec
     894:	a1 1c       	adc	r10, r1
     896:	b1 1c       	adc	r11, r1
     898:	75 01       	movw	r14, r10
     89a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <Inf_Can_Rx>
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <Isb_Inf_Can_Rx+0x48>
     8a2:	57 c0       	rjmp	.+174    	; 0x952 <Isb_Inf_Can_Rx+0xf6>
			aIsb_Msg->Flags = ((aCanMsg.SIdH & 0xC0) >> 2) | (aCanMsg.Dlc & ISB_MSG_FLAGS_DLC_MASK);
     8a4:	ea 81       	ldd	r30, Y+2	; 0x02
     8a6:	8e 2f       	mov	r24, r30
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	80 7c       	andi	r24, 0xC0	; 192
     8ac:	90 70       	andi	r25, 0x00	; 0
     8ae:	95 95       	asr	r25
     8b0:	87 95       	ror	r24
     8b2:	95 95       	asr	r25
     8b4:	87 95       	ror	r24
     8b6:	0d 81       	ldd	r16, Y+5	; 0x05
     8b8:	f0 2f       	mov	r31, r16
     8ba:	ff 70       	andi	r31, 0x0F	; 15
     8bc:	f8 2b       	or	r31, r24
     8be:	d6 01       	movw	r26, r12
     8c0:	fc 93       	st	X, r31
			aIsb_Msg->DestId = (uint16_t)((aCanMsg.EIdH & 0xF8) >> 3) + (uint16_t)((aCanMsg.SIdL & 0x03) << 5) + (uint16_t)((aCanMsg.SIdL & 0xE0) << 2) + (uint16_t)((aCanMsg.SIdH & 0x3F) << 10);
     8c2:	6c 81       	ldd	r22, Y+4	; 0x04
     8c4:	49 81       	ldd	r20, Y+1	; 0x01
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	3e 2f       	mov	r19, r30
     8ca:	33 0f       	add	r19, r19
     8cc:	33 0f       	add	r19, r19
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	86 2f       	mov	r24, r22
     8d2:	86 95       	lsr	r24
     8d4:	86 95       	lsr	r24
     8d6:	86 95       	lsr	r24
     8d8:	28 0f       	add	r18, r24
     8da:	31 1d       	adc	r19, r1
     8dc:	ca 01       	movw	r24, r20
     8de:	83 70       	andi	r24, 0x03	; 3
     8e0:	90 70       	andi	r25, 0x00	; 0
     8e2:	75 e0       	ldi	r23, 0x05	; 5
     8e4:	88 0f       	add	r24, r24
     8e6:	99 1f       	adc	r25, r25
     8e8:	7a 95       	dec	r23
     8ea:	e1 f7       	brne	.-8      	; 0x8e4 <Isb_Inf_Can_Rx+0x88>
     8ec:	28 0f       	add	r18, r24
     8ee:	39 1f       	adc	r19, r25
     8f0:	40 7e       	andi	r20, 0xE0	; 224
     8f2:	50 70       	andi	r21, 0x00	; 0
     8f4:	44 0f       	add	r20, r20
     8f6:	55 1f       	adc	r21, r21
     8f8:	44 0f       	add	r20, r20
     8fa:	55 1f       	adc	r21, r21
     8fc:	24 0f       	add	r18, r20
     8fe:	35 1f       	adc	r19, r21
     900:	12 96       	adiw	r26, 0x02	; 2
     902:	3c 93       	st	X, r19
     904:	2e 93       	st	-X, r18
     906:	11 97       	sbiw	r26, 0x01	; 1
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	67 70       	andi	r22, 0x07	; 7
     90c:	70 70       	andi	r23, 0x00	; 0
     90e:	76 2f       	mov	r23, r22
     910:	66 27       	eor	r22, r22
     912:	8b 81       	ldd	r24, Y+3	; 0x03
     914:	68 0f       	add	r22, r24
     916:	71 1d       	adc	r23, r1
     918:	14 96       	adiw	r26, 0x04	; 4
     91a:	7c 93       	st	X, r23
     91c:	6e 93       	st	-X, r22
     91e:	13 97       	sbiw	r26, 0x03	; 3
			if (bit_is_set(aCanMsg.Dlc, 6)) {
     920:	8d 81       	ldd	r24, Y+5	; 0x05
     922:	86 fd       	sbrc	r24, 6
     924:	0a c0       	rjmp	.+20     	; 0x93a <Isb_Inf_Can_Rx+0xde>
				aIsb_Msg->Flags |= 0x40;
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     926:	de 01       	movw	r26, r28
     928:	16 96       	adiw	r26, 0x06	; 6
     92a:	f6 01       	movw	r30, r12
     92c:	20 2f       	mov	r18, r16
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	2b 5f       	subi	r18, 0xFB	; 251
     932:	3f 4f       	sbci	r19, 0xFF	; 255
     934:	2a 0d       	add	r18, r10
     936:	3b 1d       	adc	r19, r11
     938:	06 c0       	rjmp	.+12     	; 0x946 <Isb_Inf_Can_Rx+0xea>
		if (Inf_Can_Rx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
			aIsb_Msg->Flags = ((aCanMsg.SIdH & 0xC0) >> 2) | (aCanMsg.Dlc & ISB_MSG_FLAGS_DLC_MASK);
			aIsb_Msg->DestId = (uint16_t)((aCanMsg.EIdH & 0xF8) >> 3) + (uint16_t)((aCanMsg.SIdL & 0x03) << 5) + (uint16_t)((aCanMsg.SIdL & 0xE0) << 2) + (uint16_t)((aCanMsg.SIdH & 0x3F) << 10);
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
			if (bit_is_set(aCanMsg.Dlc, 6)) {
				aIsb_Msg->Flags |= 0x40;
     93a:	f0 64       	ori	r31, 0x40	; 64
     93c:	d6 01       	movw	r26, r12
     93e:	fc 93       	st	X, r31
     940:	06 c0       	rjmp	.+12     	; 0x94e <Isb_Inf_Can_Rx+0xf2>
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
					aIsb_Msg->Data[i] = aCanMsg.Data[i];
     942:	8d 91       	ld	r24, X+
     944:	84 83       	std	Z+4, r24	; 0x04
     946:	31 96       	adiw	r30, 0x01	; 1
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
			if (bit_is_set(aCanMsg.Dlc, 6)) {
				aIsb_Msg->Flags |= 0x40;
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     948:	a2 17       	cp	r26, r18
     94a:	b3 07       	cpc	r27, r19
     94c:	d1 f7       	brne	.-12     	; 0x942 <Isb_Inf_Can_Rx+0xe6>
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	01 c0       	rjmp	.+2      	; 0x954 <Isb_Inf_Can_Rx+0xf8>
     952:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			return TRUE;
		}
		return FALSE;
	}
     954:	2d 96       	adiw	r28, 0x0d	; 13
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	cf 91       	pop	r28
     962:	df 91       	pop	r29
     964:	0f 91       	pop	r16
     966:	ff 90       	pop	r15
     968:	ef 90       	pop	r14
     96a:	df 90       	pop	r13
     96c:	cf 90       	pop	r12
     96e:	bf 90       	pop	r11
     970:	af 90       	pop	r10
     972:	08 95       	ret

00000974 <Isb_Inf_Can_Tx>:



	uint8_t Isb_Inf_Can_Tx(const uint8_t aInf, const Isb_Msg_t * aIsb_Msg) {
     974:	ef 92       	push	r14
     976:	ff 92       	push	r15
     978:	0f 93       	push	r16
     97a:	df 93       	push	r29
     97c:	cf 93       	push	r28
     97e:	cd b7       	in	r28, 0x3d	; 61
     980:	de b7       	in	r29, 0x3e	; 62
     982:	2d 97       	sbiw	r28, 0x0d	; 13
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	f8 94       	cli
     988:	de bf       	out	0x3e, r29	; 62
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	cd bf       	out	0x3d, r28	; 61
     98e:	fb 01       	movw	r30, r22
		uint8_t aSSPort;
		uint8_t aSSPin;
		uint8_t aSpiCfg;
		uint8_t aRSPort;
		uint8_t aRSPin;
		switch (aInf) {
     990:	88 23       	and	r24, r24
     992:	11 f0       	breq	.+4      	; 0x998 <Isb_Inf_Can_Tx+0x24>
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	4e c0       	rjmp	.+156    	; 0xa34 <Isb_Inf_Can_Tx+0xc0>
		}
		Inf_Can_Msg_t aCanMsg;
		// Write Message to SendBuffer - TXBnSIDH:
		//	[7..6] = Type
		//	[5..0] = Dest[15..10]
		aCanMsg.SIdH = ((aIsb_Msg->Flags << 2) & 0xC0) | (aIsb_Msg->DestId >> 10);
     998:	92 81       	ldd	r25, Z+2	; 0x02
     99a:	96 95       	lsr	r25
     99c:	96 95       	lsr	r25
     99e:	60 81       	ld	r22, Z
     9a0:	86 2f       	mov	r24, r22
     9a2:	88 0f       	add	r24, r24
     9a4:	88 0f       	add	r24, r24
     9a6:	80 7c       	andi	r24, 0xC0	; 192
     9a8:	89 2b       	or	r24, r25
     9aa:	8a 83       	std	Y+2, r24	; 0x02
		//	[7..5] = Dest[9..7]
		//	[4] = 0
		//	[3] = 1
		//	[2] = 0
		//	[1..0] = Dest[6..5]
		aCanMsg.SIdL = ((uint8_t)(aIsb_Msg->DestId >> 2) & 0xE0) | 0x08 | ((uint8_t)(aIsb_Msg->DestId >> 5) & 0x03);
     9ac:	41 81       	ldd	r20, Z+1	; 0x01
     9ae:	52 81       	ldd	r21, Z+2	; 0x02
     9b0:	ca 01       	movw	r24, r20
     9b2:	96 95       	lsr	r25
     9b4:	87 95       	ror	r24
     9b6:	96 95       	lsr	r25
     9b8:	87 95       	ror	r24
     9ba:	80 7e       	andi	r24, 0xE0	; 224
     9bc:	9a 01       	movw	r18, r20
     9be:	a5 e0       	ldi	r26, 0x05	; 5
     9c0:	36 95       	lsr	r19
     9c2:	27 95       	ror	r18
     9c4:	aa 95       	dec	r26
     9c6:	e1 f7       	brne	.-8      	; 0x9c0 <Isb_Inf_Can_Tx+0x4c>
     9c8:	23 70       	andi	r18, 0x03	; 3
     9ca:	82 2b       	or	r24, r18
     9cc:	88 60       	ori	r24, 0x08	; 8
     9ce:	89 83       	std	Y+1, r24	; 0x01
		// Write Message to SendBuffer - TXBnEID8:
		//	[7..3] = Dest[4..0]
		//	[2..0] = Source[10..8]
		aCanMsg.EIdH = ((uint8_t)((aIsb_Msg->DestId << 3) & 0xF8)) | ((uint8_t)((aIsb_Msg->SourceId >> 8) & 0x07));
     9d0:	84 81       	ldd	r24, Z+4	; 0x04
     9d2:	87 70       	andi	r24, 0x07	; 7
     9d4:	44 0f       	add	r20, r20
     9d6:	44 0f       	add	r20, r20
     9d8:	44 0f       	add	r20, r20
     9da:	84 2b       	or	r24, r20
     9dc:	8c 83       	std	Y+4, r24	; 0x04
		// Write Message to SendBuffer - TXBnEID0:
		//	[7..0] = Source[7..0]
		aCanMsg.EIdL = (uint8_t)aIsb_Msg->SourceId;
     9de:	83 81       	ldd	r24, Z+3	; 0x03
     9e0:	8b 83       	std	Y+3, r24	; 0x03
		// Write Message to SendBuffer - DataLength
		aCanMsg.Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
     9e2:	6f 70       	andi	r22, 0x0F	; 15
     9e4:	6d 83       	std	Y+5, r22	; 0x05
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
     9e6:	80 81       	ld	r24, Z
     9e8:	86 fd       	sbrc	r24, 6
     9ea:	0a c0       	rjmp	.+20     	; 0xa00 <Isb_Inf_Can_Tx+0x8c>
     9ec:	df 01       	movw	r26, r30
     9ee:	fe 01       	movw	r30, r28
     9f0:	36 96       	adiw	r30, 0x06	; 6
			aCanMsg.Dlc |= 0x40;
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     9f2:	ce 01       	movw	r24, r28
     9f4:	86 0f       	add	r24, r22
     9f6:	91 1d       	adc	r25, r1
     9f8:	bc 01       	movw	r22, r24
     9fa:	6a 5f       	subi	r22, 0xFA	; 250
     9fc:	7f 4f       	sbci	r23, 0xFF	; 255
     9fe:	07 c0       	rjmp	.+14     	; 0xa0e <Isb_Inf_Can_Tx+0x9a>
		aCanMsg.EIdL = (uint8_t)aIsb_Msg->SourceId;
		// Write Message to SendBuffer - DataLength
		aCanMsg.Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
			aCanMsg.Dlc |= 0x40;
     a00:	60 64       	ori	r22, 0x40	; 64
     a02:	6d 83       	std	Y+5, r22	; 0x05
     a04:	08 c0       	rjmp	.+16     	; 0xa16 <Isb_Inf_Can_Tx+0xa2>
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
				aCanMsg.Data[i] = aIsb_Msg->Data[i];
     a06:	14 96       	adiw	r26, 0x04	; 4
     a08:	8c 91       	ld	r24, X
     a0a:	14 97       	sbiw	r26, 0x04	; 4
     a0c:	81 93       	st	Z+, r24
     a0e:	11 96       	adiw	r26, 0x01	; 1
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
			aCanMsg.Dlc |= 0x40;
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     a10:	e6 17       	cp	r30, r22
     a12:	f7 07       	cpc	r31, r23
     a14:	c1 f7       	brne	.-16     	; 0xa06 <Isb_Inf_Can_Tx+0x92>
				aCanMsg.Data[i] = aIsb_Msg->Data[i];
			}
		}
		if (Inf_Can_Tx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	43 e0       	ldi	r20, 0x03	; 3
     a1c:	2f ef       	ldi	r18, 0xFF	; 255
     a1e:	02 e0       	ldi	r16, 0x02	; 2
     a20:	7e 01       	movw	r14, r28
     a22:	08 94       	sec
     a24:	e1 1c       	adc	r14, r1
     a26:	f1 1c       	adc	r15, r1
     a28:	0e 94 73 03 	call	0x6e6	; 0x6e6 <Inf_Can_Tx>
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	81 30       	cpi	r24, 0x01	; 1
     a30:	09 f4       	brne	.+2      	; 0xa34 <Isb_Inf_Can_Tx+0xc0>
     a32:	91 e0       	ldi	r25, 0x01	; 1
			return TRUE;
		}
		return FALSE;
	}
     a34:	89 2f       	mov	r24, r25
     a36:	2d 96       	adiw	r28, 0x0d	; 13
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	de bf       	out	0x3e, r29	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	cd bf       	out	0x3d, r28	; 61
     a42:	cf 91       	pop	r28
     a44:	df 91       	pop	r29
     a46:	0f 91       	pop	r16
     a48:	ff 90       	pop	r15
     a4a:	ef 90       	pop	r14
     a4c:	08 95       	ret

00000a4e <Isb_Systick_Init>:
			TCCR0 = (1 << WGM01) | (1 << CS01) | (1 << CS00);
			TCNT0 = 0;
			OCR0 = (F_CPU / 64) / 1000;
			TIMSK = (1 << OCIE0);
		#elif defined(__AVR_ATmega48__) || defined(__AVR_ATmega88__) || defined(__AVR_ATmega168__)
			TCCR0A = (1 << WGM01);
     a4e:	82 e0       	ldi	r24, 0x02	; 2
     a50:	84 bd       	out	0x24, r24	; 36
			TCCR0B = (1 << CS01) | (1 << CS00);
     a52:	93 e0       	ldi	r25, 0x03	; 3
     a54:	95 bd       	out	0x25, r25	; 37
			TCNT0 = 0;
     a56:	16 bc       	out	0x26, r1	; 38
			OCR0A = (F_CPU / 64) / 1000;
     a58:	9d e7       	ldi	r25, 0x7D	; 125
     a5a:	97 bd       	out	0x27, r25	; 39
			TIMSK0 = (1 << OCIE0A);
     a5c:	80 93 6e 00 	sts	0x006E, r24
			OCR0A = (F_CPU / 64) / 1000;
			TIMSK0 = (1 << OCIE0A);
		#else
			#error "No definition for this MCU available."
		#endif
	}
     a60:	08 95       	ret

00000a62 <Isb_Systick_Exec>:



	void Isb_Systick_Exec(void) {
		if (bit_is_set(Isb_Systick_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
     a62:	80 91 39 01 	lds	r24, 0x0139
     a66:	80 ff       	sbrs	r24, 0
     a68:	50 c0       	rjmp	.+160    	; 0xb0a <Isb_Systick_Exec+0xa8>

			#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
				if (Isb_App_DigOut_IrqExec >= ISB_APP_DIGOUT_EXECTIME) {
     a6a:	80 91 3b 01 	lds	r24, 0x013B
     a6e:	90 91 3c 01 	lds	r25, 0x013C
     a72:	0a 97       	sbiw	r24, 0x0a	; 10
     a74:	48 f0       	brcs	.+18     	; 0xa88 <Isb_Systick_Exec+0x26>
					Isb_App_DigOut_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a76:	80 91 3a 01 	lds	r24, 0x013A
     a7a:	81 60       	ori	r24, 0x01	; 1
     a7c:	80 93 3a 01 	sts	0x013A, r24
					Isb_App_DigOut_IrqExec = 0;
     a80:	10 92 3c 01 	sts	0x013C, r1
     a84:	10 92 3b 01 	sts	0x013B, r1
				}
			#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

			#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
				if (Isb_App_DigIn_IrqExec >= ISB_APP_DIGIN_EXECTIME) {
     a88:	80 91 40 01 	lds	r24, 0x0140
     a8c:	90 91 41 01 	lds	r25, 0x0141
     a90:	0a 97       	sbiw	r24, 0x0a	; 10
     a92:	48 f0       	brcs	.+18     	; 0xaa6 <Isb_Systick_Exec+0x44>
					Isb_App_DigIn_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a94:	80 91 3f 01 	lds	r24, 0x013F
     a98:	81 60       	ori	r24, 0x01	; 1
     a9a:	80 93 3f 01 	sts	0x013F, r24
					Isb_App_DigIn_IrqExec = 0;
     a9e:	10 92 41 01 	sts	0x0141, r1
     aa2:	10 92 40 01 	sts	0x0140, r1
					Isb_App_Lcd_IrqExec = 0;
				}
			#endif /* ISB_APP_LCD_MAX && ISB_APP_H_ */

			#if defined(ISB_OBJ_1BIT_MAX) && defined(ISB_OBJ_H_)
				if (Isb_Obj_1Bit_IrqExec >= ISB_OBJ_1BIT_EXECTIME) {
     aa6:	80 91 43 01 	lds	r24, 0x0143
     aaa:	90 91 44 01 	lds	r25, 0x0144
     aae:	0a 97       	sbiw	r24, 0x0a	; 10
     ab0:	48 f0       	brcs	.+18     	; 0xac4 <Isb_Systick_Exec+0x62>
					Isb_Obj_1Bit_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     ab2:	80 91 42 01 	lds	r24, 0x0142
     ab6:	81 60       	ori	r24, 0x01	; 1
     ab8:	80 93 42 01 	sts	0x0142, r24
					Isb_Obj_1Bit_IrqExec = 0;
     abc:	10 92 44 01 	sts	0x0144, r1
     ac0:	10 92 43 01 	sts	0x0143, r1
				}
			#endif /* ISB_OBJ_1BIT_MAX && ISB_OBJ_H_ */

			#if defined(ISB_OBJ_4BIT_MAX) && defined(ISB_OBJ_H_)
				if (Isb_Obj_4Bit_IrqExec >= ISB_OBJ_4BIT_EXECTIME) {
     ac4:	80 91 46 01 	lds	r24, 0x0146
     ac8:	90 91 47 01 	lds	r25, 0x0147
     acc:	0a 97       	sbiw	r24, 0x0a	; 10
     ace:	48 f0       	brcs	.+18     	; 0xae2 <Isb_Systick_Exec+0x80>
					Isb_Obj_4Bit_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     ad0:	80 91 45 01 	lds	r24, 0x0145
     ad4:	81 60       	ori	r24, 0x01	; 1
     ad6:	80 93 45 01 	sts	0x0145, r24
					Isb_Obj_4Bit_IrqExec = 0;
     ada:	10 92 47 01 	sts	0x0147, r1
     ade:	10 92 46 01 	sts	0x0146, r1
				}
			#endif /* ISB_OBJ_4BIT_MAX && ISB_OBJ_H_ */

			#if defined(ISB_OBJ_8BIT_MAX) && defined(ISB_OBJ_H_)
				if (Isb_Obj_8Bit_IrqExec >= ISB_OBJ_8BIT_EXECTIME) {
     ae2:	80 91 49 01 	lds	r24, 0x0149
     ae6:	90 91 4a 01 	lds	r25, 0x014A
     aea:	0a 97       	sbiw	r24, 0x0a	; 10
     aec:	48 f0       	brcs	.+18     	; 0xb00 <Isb_Systick_Exec+0x9e>
					Isb_Obj_8Bit_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     aee:	80 91 48 01 	lds	r24, 0x0148
     af2:	81 60       	ori	r24, 0x01	; 1
     af4:	80 93 48 01 	sts	0x0148, r24
					Isb_Obj_8Bit_IrqExec = 0;
     af8:	10 92 4a 01 	sts	0x014A, r1
     afc:	10 92 49 01 	sts	0x0149, r1
					Isb_Obj_Float_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
					Isb_Obj_Float_IrqExec = 0;
				}
			#endif /* ISB_OBJ_FLOAT_MAX && ISB_OBJ_H_ */

			Isb_Systick_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
     b00:	80 91 39 01 	lds	r24, 0x0139
     b04:	8e 7f       	andi	r24, 0xFE	; 254
     b06:	80 93 39 01 	sts	0x0139, r24
     b0a:	08 95       	ret

00000b0c <Isb_Systick_Irq_Timer>:
	}



	void Isb_Systick_Irq_Timer(void) {
		Isb_Systick_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     b0c:	80 91 39 01 	lds	r24, 0x0139
     b10:	81 60       	ori	r24, 0x01	; 1
     b12:	80 93 39 01 	sts	0x0139, r24

		#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
			Isb_App_DigOut_IrqExec++;
     b16:	80 91 3b 01 	lds	r24, 0x013B
     b1a:	90 91 3c 01 	lds	r25, 0x013C
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	90 93 3c 01 	sts	0x013C, r25
     b24:	80 93 3b 01 	sts	0x013B, r24
		#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

		#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
			Isb_App_DigIn_IrqExec++;
     b28:	80 91 40 01 	lds	r24, 0x0140
     b2c:	90 91 41 01 	lds	r25, 0x0141
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	90 93 41 01 	sts	0x0141, r25
     b36:	80 93 40 01 	sts	0x0140, r24
		#if defined(ISB_APP_LCD_MAX) && defined(ISB_APP_H_)
			Isb_App_Lcd_IrqExec++;
		#endif /* ISB_APP_LCD_MAX && ISB_APP_H_ */

		#if defined(ISB_OBJ_1BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_1Bit_IrqExec++;
     b3a:	80 91 43 01 	lds	r24, 0x0143
     b3e:	90 91 44 01 	lds	r25, 0x0144
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	90 93 44 01 	sts	0x0144, r25
     b48:	80 93 43 01 	sts	0x0143, r24
		#endif /* ISB_OBJ_1BIT_MAX && ISB_OBJ_H_ */

		#if defined(ISB_OBJ_4BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_4Bit_IrqExec++;
     b4c:	80 91 46 01 	lds	r24, 0x0146
     b50:	90 91 47 01 	lds	r25, 0x0147
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	90 93 47 01 	sts	0x0147, r25
     b5a:	80 93 46 01 	sts	0x0146, r24
		#endif /* ISB_OBJ_4BIT_MAX && ISB_OBJ_H_ */

		#if defined(ISB_OBJ_8BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_8Bit_IrqExec++;
     b5e:	80 91 49 01 	lds	r24, 0x0149
     b62:	90 91 4a 01 	lds	r25, 0x014A
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	90 93 4a 01 	sts	0x014A, r25
     b6c:	80 93 49 01 	sts	0x0149, r24

		#if defined(ISB_OBJ_FLOAT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_Float_IrqExec++;
		#endif /* ISB_OBJ_FLOAT_MAX && ISB_OBJ_H_ */

	}
     b70:	08 95       	ret

00000b72 <TIMER0_COMP_vect>:
	#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega16__) || defined(__AVR_ATmega32__) || defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
		ISR(TIMER0_COMP_vect) {
			Isb_Systick_Irq_Timer();
		}
	#elif defined(__AVR_ATmega48__) || defined(__AVR_ATmega88__) || defined(__AVR_ATmega168__)
		ISR(TIMER0_COMP_vect) {
     b72:	1f 92       	push	r1
     b74:	0f 92       	push	r0
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	0f 92       	push	r0
     b7a:	11 24       	eor	r1, r1
     b7c:	8f 93       	push	r24
     b7e:	9f 93       	push	r25
	}



	void Isb_Systick_Irq_Timer(void) {
		Isb_Systick_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     b80:	80 91 39 01 	lds	r24, 0x0139
     b84:	81 60       	ori	r24, 0x01	; 1
     b86:	80 93 39 01 	sts	0x0139, r24

		#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
			Isb_App_DigOut_IrqExec++;
     b8a:	80 91 3b 01 	lds	r24, 0x013B
     b8e:	90 91 3c 01 	lds	r25, 0x013C
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	90 93 3c 01 	sts	0x013C, r25
     b98:	80 93 3b 01 	sts	0x013B, r24
		#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

		#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
			Isb_App_DigIn_IrqExec++;
     b9c:	80 91 40 01 	lds	r24, 0x0140
     ba0:	90 91 41 01 	lds	r25, 0x0141
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	90 93 41 01 	sts	0x0141, r25
     baa:	80 93 40 01 	sts	0x0140, r24
		#if defined(ISB_APP_LCD_MAX) && defined(ISB_APP_H_)
			Isb_App_Lcd_IrqExec++;
		#endif /* ISB_APP_LCD_MAX && ISB_APP_H_ */

		#if defined(ISB_OBJ_1BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_1Bit_IrqExec++;
     bae:	80 91 43 01 	lds	r24, 0x0143
     bb2:	90 91 44 01 	lds	r25, 0x0144
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	90 93 44 01 	sts	0x0144, r25
     bbc:	80 93 43 01 	sts	0x0143, r24
		#endif /* ISB_OBJ_1BIT_MAX && ISB_OBJ_H_ */

		#if defined(ISB_OBJ_4BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_4Bit_IrqExec++;
     bc0:	80 91 46 01 	lds	r24, 0x0146
     bc4:	90 91 47 01 	lds	r25, 0x0147
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	90 93 47 01 	sts	0x0147, r25
     bce:	80 93 46 01 	sts	0x0146, r24
		#endif /* ISB_OBJ_4BIT_MAX && ISB_OBJ_H_ */

		#if defined(ISB_OBJ_8BIT_MAX) && defined(ISB_OBJ_H_)
			Isb_Obj_8Bit_IrqExec++;
     bd2:	80 91 49 01 	lds	r24, 0x0149
     bd6:	90 91 4a 01 	lds	r25, 0x014A
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	90 93 4a 01 	sts	0x014A, r25
     be0:	80 93 49 01 	sts	0x0149, r24
			Isb_Systick_Irq_Timer();
		}
	#elif defined(__AVR_ATmega48__) || defined(__AVR_ATmega88__) || defined(__AVR_ATmega168__)
		ISR(TIMER0_COMP_vect) {
			Isb_Systick_Irq_Timer();
		}
     be4:	9f 91       	pop	r25
     be6:	8f 91       	pop	r24
     be8:	0f 90       	pop	r0
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	0f 90       	pop	r0
     bee:	1f 90       	pop	r1
     bf0:	18 95       	reti

00000bf2 <Isb_Ch_Init>:
	}



	uint8_t __attribute__((always_inline)) lib_eep_fw_read_byte(uint8_t * aAddr) {
		return eeprom_read_byte(Isb_Firmware_Offset + aAddr);;
     bf2:	80 91 36 01 	lds	r24, 0x0136
     bf6:	a8 2f       	mov	r26, r24
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	ee e1       	ldi	r30, 0x1E	; 30
     bfc:	f4 e0       	ldi	r31, 0x04	; 4
     bfe:	60 e0       	ldi	r22, 0x00	; 0

	void Isb_Ch_Init(void) {
		for (uint8_t ChIndex = 0; ChIndex < ISB_CH_MAX; ChIndex++) {
			uint16_t eepAddrCtrl = 0;
			uint16_t eepAddrCrc = 0;
			switch (ChIndex) {
     c00:	67 30       	cpi	r22, 0x07	; 7
     c02:	09 f4       	brne	.+2      	; 0xc06 <Isb_Ch_Init+0x14>
     c04:	4b c0       	rjmp	.+150    	; 0xc9c <Isb_Ch_Init+0xaa>
     c06:	68 30       	cpi	r22, 0x08	; 8
     c08:	70 f4       	brcc	.+28     	; 0xc26 <Isb_Ch_Init+0x34>
     c0a:	63 30       	cpi	r22, 0x03	; 3
     c0c:	99 f1       	breq	.+102    	; 0xc74 <Isb_Ch_Init+0x82>
     c0e:	64 30       	cpi	r22, 0x04	; 4
     c10:	28 f4       	brcc	.+10     	; 0xc1c <Isb_Ch_Init+0x2a>
     c12:	61 30       	cpi	r22, 0x01	; 1
     c14:	01 f1       	breq	.+64     	; 0xc56 <Isb_Ch_Init+0x64>
     c16:	62 30       	cpi	r22, 0x02	; 2
     c18:	40 f5       	brcc	.+80     	; 0xc6a <Isb_Ch_Init+0x78>
     c1a:	22 c0       	rjmp	.+68     	; 0xc60 <Isb_Ch_Init+0x6e>
     c1c:	65 30       	cpi	r22, 0x05	; 5
     c1e:	a1 f1       	breq	.+104    	; 0xc88 <Isb_Ch_Init+0x96>
     c20:	66 30       	cpi	r22, 0x06	; 6
     c22:	b8 f5       	brcc	.+110    	; 0xc92 <Isb_Ch_Init+0xa0>
     c24:	2c c0       	rjmp	.+88     	; 0xc7e <Isb_Ch_Init+0x8c>
     c26:	6b 30       	cpi	r22, 0x0B	; 11
     c28:	09 f4       	brne	.+2      	; 0xc2c <Isb_Ch_Init+0x3a>
     c2a:	4c c0       	rjmp	.+152    	; 0xcc4 <Isb_Ch_Init+0xd2>
     c2c:	6c 30       	cpi	r22, 0x0C	; 12
     c2e:	30 f4       	brcc	.+12     	; 0xc3c <Isb_Ch_Init+0x4a>
     c30:	69 30       	cpi	r22, 0x09	; 9
     c32:	f1 f1       	breq	.+124    	; 0xcb0 <Isb_Ch_Init+0xbe>
     c34:	6a 30       	cpi	r22, 0x0A	; 10
     c36:	08 f0       	brcs	.+2      	; 0xc3a <Isb_Ch_Init+0x48>
     c38:	40 c0       	rjmp	.+128    	; 0xcba <Isb_Ch_Init+0xc8>
     c3a:	35 c0       	rjmp	.+106    	; 0xca6 <Isb_Ch_Init+0xb4>
     c3c:	6d 30       	cpi	r22, 0x0D	; 13
     c3e:	09 f4       	brne	.+2      	; 0xc42 <Isb_Ch_Init+0x50>
     c40:	4b c0       	rjmp	.+150    	; 0xcd8 <Isb_Ch_Init+0xe6>
     c42:	6d 30       	cpi	r22, 0x0D	; 13
     c44:	08 f4       	brcc	.+2      	; 0xc48 <Isb_Ch_Init+0x56>
     c46:	43 c0       	rjmp	.+134    	; 0xcce <Isb_Ch_Init+0xdc>
     c48:	6e 30       	cpi	r22, 0x0E	; 14
     c4a:	09 f4       	brne	.+2      	; 0xc4e <Isb_Ch_Init+0x5c>
     c4c:	4a c0       	rjmp	.+148    	; 0xce2 <Isb_Ch_Init+0xf0>
     c4e:	6f 30       	cpi	r22, 0x0F	; 15
     c50:	09 f0       	breq	.+2      	; 0xc54 <Isb_Ch_Init+0x62>
     c52:	51 c0       	rjmp	.+162    	; 0xcf6 <Isb_Ch_Init+0x104>
     c54:	4b c0       	rjmp	.+150    	; 0xcec <Isb_Ch_Init+0xfa>
     c56:	45 e1       	ldi	r20, 0x15	; 21
     c58:	50 e0       	ldi	r21, 0x00	; 0
     c5a:	89 e2       	ldi	r24, 0x29	; 41
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	4f c0       	rjmp	.+158    	; 0xcfe <Isb_Ch_Init+0x10c>
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	50 e0       	ldi	r21, 0x00	; 0
     c64:	84 e1       	ldi	r24, 0x14	; 20
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	4a c0       	rjmp	.+148    	; 0xcfe <Isb_Ch_Init+0x10c>
     c6a:	4a e2       	ldi	r20, 0x2A	; 42
     c6c:	50 e0       	ldi	r21, 0x00	; 0
     c6e:	8e e3       	ldi	r24, 0x3E	; 62
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	45 c0       	rjmp	.+138    	; 0xcfe <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_1 */
				#if defined(ISB_CH_2)
					case 2:
						eepAddrCtrl = ISB_CH_2_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_2_EEADDR_CRC;
						break;
     c74:	4f e3       	ldi	r20, 0x3F	; 63
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	83 e5       	ldi	r24, 0x53	; 83
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	40 c0       	rjmp	.+128    	; 0xcfe <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_2 */
				#if defined(ISB_CH_3)
					case 3:
						eepAddrCtrl = ISB_CH_3_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_3_EEADDR_CRC;
						break;
     c7e:	44 e5       	ldi	r20, 0x54	; 84
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	88 e6       	ldi	r24, 0x68	; 104
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	3b c0       	rjmp	.+118    	; 0xcfe <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_3 */
				#if defined(ISB_CH_4)
					case 4:
						eepAddrCtrl = ISB_CH_4_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_4_EEADDR_CRC;
						break;
     c88:	49 e6       	ldi	r20, 0x69	; 105
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	8d e7       	ldi	r24, 0x7D	; 125
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	36 c0       	rjmp	.+108    	; 0xcfe <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_4 */
				#if defined(ISB_CH_5)
					case 5:
						eepAddrCtrl = ISB_CH_5_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_5_EEADDR_CRC;
						break;
     c92:	4e e7       	ldi	r20, 0x7E	; 126
     c94:	50 e0       	ldi	r21, 0x00	; 0
     c96:	82 e9       	ldi	r24, 0x92	; 146
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	31 c0       	rjmp	.+98     	; 0xcfe <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_5 */
				#if defined(ISB_CH_6)
					case 6:
						eepAddrCtrl = ISB_CH_6_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_6_EEADDR_CRC;
						break;
     c9c:	43 e9       	ldi	r20, 0x93	; 147
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	87 ea       	ldi	r24, 0xA7	; 167
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	2c c0       	rjmp	.+88     	; 0xcfe <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_6 */
				#if defined(ISB_CH_7)
					case 7:
						eepAddrCtrl = ISB_CH_7_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_7_EEADDR_CRC;
						break;
     ca6:	48 ea       	ldi	r20, 0xA8	; 168
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	8f eb       	ldi	r24, 0xBF	; 191
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	27 c0       	rjmp	.+78     	; 0xcfe <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_7 */
				#if defined(ISB_CH_8)
					case 8:
						eepAddrCtrl = ISB_CH_8_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_8_EEADDR_CRC;
						break;
     cb0:	40 ec       	ldi	r20, 0xC0	; 192
     cb2:	50 e0       	ldi	r21, 0x00	; 0
     cb4:	87 ed       	ldi	r24, 0xD7	; 215
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	22 c0       	rjmp	.+68     	; 0xcfe <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_8 */
				#if defined(ISB_CH_9)
					case 9:
						eepAddrCtrl = ISB_CH_9_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_9_EEADDR_CRC;
						break;
     cba:	48 ed       	ldi	r20, 0xD8	; 216
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	8f ee       	ldi	r24, 0xEF	; 239
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	1d c0       	rjmp	.+58     	; 0xcfe <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_9 */
				#if defined(ISB_CH_10)
					case 10:
						eepAddrCtrl = ISB_CH_10_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_10_EEADDR_CRC;
						break;
     cc4:	40 ef       	ldi	r20, 0xF0	; 240
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	87 e0       	ldi	r24, 0x07	; 7
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	18 c0       	rjmp	.+48     	; 0xcfe <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_10 */
				#if defined(ISB_CH_11)
					case 11:
						eepAddrCtrl = ISB_CH_11_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_11_EEADDR_CRC;
						break;
     cce:	48 e0       	ldi	r20, 0x08	; 8
     cd0:	51 e0       	ldi	r21, 0x01	; 1
     cd2:	8f e1       	ldi	r24, 0x1F	; 31
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	13 c0       	rjmp	.+38     	; 0xcfe <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_11 */
				#if defined(ISB_CH_12)
					case 12:
						eepAddrCtrl = ISB_CH_12_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_12_EEADDR_CRC;
						break;
     cd8:	40 e2       	ldi	r20, 0x20	; 32
     cda:	51 e0       	ldi	r21, 0x01	; 1
     cdc:	87 e3       	ldi	r24, 0x37	; 55
     cde:	91 e0       	ldi	r25, 0x01	; 1
     ce0:	0e c0       	rjmp	.+28     	; 0xcfe <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_12 */
				#if defined(ISB_CH_13)
					case 13:
						eepAddrCtrl = ISB_CH_13_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_13_EEADDR_CRC;
						break;
     ce2:	48 e3       	ldi	r20, 0x38	; 56
     ce4:	51 e0       	ldi	r21, 0x01	; 1
     ce6:	8f e4       	ldi	r24, 0x4F	; 79
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	09 c0       	rjmp	.+18     	; 0xcfe <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_13 */
				#if defined(ISB_CH_14)
					case 14:
						eepAddrCtrl = ISB_CH_14_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_14_EEADDR_CRC;
						break;
     cec:	40 e5       	ldi	r20, 0x50	; 80
     cee:	51 e0       	ldi	r21, 0x01	; 1
     cf0:	87 e6       	ldi	r24, 0x67	; 103
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	04 c0       	rjmp	.+8      	; 0xcfe <Isb_Ch_Init+0x10c>
				#endif /* ISB_CH_14 */
				#if defined(ISB_CH_15)
					case 15:
						eepAddrCtrl = ISB_CH_15_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_15_EEADDR_CRC;
						break;
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	90 e0       	ldi	r25, 0x00	; 0
				default:
					eepAddrCtrl = 0;
					eepAddrCrc = 0;
					break;
			}
			Isb_Ch[ChIndex].Ctrl = 0;
     cfe:	11 82       	std	Z+1, r1	; 0x01
     d00:	10 82       	st	Z, r1
			if (eepAddrCtrl < eepAddrCrc) {
     d02:	48 17       	cp	r20, r24
     d04:	59 07       	cpc	r21, r25
     d06:	80 f4       	brcc	.+32     	; 0xd28 <Isb_Ch_Init+0x136>
     d08:	9a 01       	movw	r18, r20
				uint8_t Crc = 0;
				for (uint16_t eepAddr = eepAddrCtrl; eepAddr <= eepAddrCrc; eepAddr++) {
     d0a:	2f 5f       	subi	r18, 0xFF	; 255
     d0c:	3f 4f       	sbci	r19, 0xFF	; 255
     d0e:	82 17       	cp	r24, r18
     d10:	93 07       	cpc	r25, r19
     d12:	d8 f7       	brcc	.-10     	; 0xd0a <Isb_Ch_Init+0x118>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d14:	f9 99       	sbic	0x1f, 1	; 31
     d16:	fe cf       	rjmp	.-4      	; 0xd14 <Isb_Ch_Init+0x122>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     d18:	4a 0f       	add	r20, r26
     d1a:	5b 1f       	adc	r21, r27
     d1c:	52 bd       	out	0x22, r21	; 34
     d1e:	41 bd       	out	0x21, r20	; 33
#endif
    EECR |= (1 << EERE);
     d20:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
     d22:	80 b5       	in	r24, 0x20	; 32
//					Crc += lib_eep_fw_read_byte((uint8_t *)eepAddr);
				}
				if (Crc == 0) {
					Isb_Ch[ChIndex].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddrCtrl);
     d24:	80 83       	st	Z, r24
     d26:	11 82       	std	Z+1, r1	; 0x01
	#define ISB_CH_C_



	void Isb_Ch_Init(void) {
		for (uint8_t ChIndex = 0; ChIndex < ISB_CH_MAX; ChIndex++) {
     d28:	6f 5f       	subi	r22, 0xFF	; 255
     d2a:	32 96       	adiw	r30, 0x02	; 2
     d2c:	61 31       	cpi	r22, 0x11	; 17
     d2e:	09 f0       	breq	.+2      	; 0xd32 <Isb_Ch_Init+0x140>
     d30:	67 cf       	rjmp	.-306    	; 0xc00 <Isb_Ch_Init+0xe>
				if (Crc == 0) {
					Isb_Ch[ChIndex].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddrCtrl);
				}
			}
		}
	}
     d32:	08 95       	ret

00000d34 <Isb_App_Init>:
#ifndef ISB_APP_C_
	#define ISB_APP_C_



	void Isb_App_Init(void) {
     d34:	2f 92       	push	r2
     d36:	3f 92       	push	r3
     d38:	4f 92       	push	r4
     d3a:	5f 92       	push	r5
     d3c:	6f 92       	push	r6
     d3e:	7f 92       	push	r7
     d40:	8f 92       	push	r8
     d42:	9f 92       	push	r9
     d44:	af 92       	push	r10
     d46:	bf 92       	push	r11
     d48:	cf 92       	push	r12
     d4a:	df 92       	push	r13
     d4c:	ef 92       	push	r14
     d4e:	ff 92       	push	r15
     d50:	0f 93       	push	r16
     d52:	1f 93       	push	r17
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	80 91 36 01 	lds	r24, 0x0136
     d5c:	28 2e       	mov	r2, r24
     d5e:	33 24       	eor	r3, r3
     d60:	a4 e3       	ldi	r26, 0x34	; 52
     d62:	4a 2e       	mov	r4, r26
     d64:	a3 e0       	ldi	r26, 0x03	; 3
     d66:	5a 2e       	mov	r5, r26
     d68:	66 24       	eor	r6, r6
     d6a:	77 24       	eor	r7, r7
				uint16_t eeAddrCfg5 = 0;
				uint16_t eeAddrCfg6 = 0;
				uint16_t eeAddrCfg7 = 0;
				uint16_t eeAddrCfg8 = 0;
				uint16_t eeAddrCfg9 = 0;
				switch (AppIndex) {
     d6c:	84 e0       	ldi	r24, 0x04	; 4
     d6e:	68 16       	cp	r6, r24
     d70:	09 f4       	brne	.+2      	; 0xd74 <Isb_App_Init+0x40>
     d72:	98 c0       	rjmp	.+304    	; 0xea4 <Isb_App_Init+0x170>
     d74:	86 15       	cp	r24, r6
     d76:	70 f0       	brcs	.+28     	; 0xd94 <Isb_App_Init+0x60>
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	69 16       	cp	r6, r25
     d7c:	09 f4       	brne	.+2      	; 0xd80 <Isb_App_Init+0x4c>
     d7e:	47 c0       	rjmp	.+142    	; 0xe0e <Isb_App_Init+0xda>
     d80:	69 16       	cp	r6, r25
     d82:	b8 f0       	brcs	.+46     	; 0xdb2 <Isb_App_Init+0x7e>
     d84:	a2 e0       	ldi	r26, 0x02	; 2
     d86:	6a 16       	cp	r6, r26
     d88:	09 f4       	brne	.+2      	; 0xd8c <Isb_App_Init+0x58>
     d8a:	5a c0       	rjmp	.+180    	; 0xe40 <Isb_App_Init+0x10c>
     d8c:	b3 e0       	ldi	r27, 0x03	; 3
     d8e:	6b 16       	cp	r6, r27
     d90:	49 f5       	brne	.+82     	; 0xde4 <Isb_App_Init+0xb0>
     d92:	6f c0       	rjmp	.+222    	; 0xe72 <Isb_App_Init+0x13e>
     d94:	e6 e0       	ldi	r30, 0x06	; 6
     d96:	6e 16       	cp	r6, r30
     d98:	09 f4       	brne	.+2      	; 0xd9c <Isb_App_Init+0x68>
     d9a:	be c0       	rjmp	.+380    	; 0xf18 <Isb_App_Init+0x1e4>
     d9c:	6e 16       	cp	r6, r30
     d9e:	08 f4       	brcc	.+2      	; 0xda2 <Isb_App_Init+0x6e>
     da0:	9e c0       	rjmp	.+316    	; 0xede <Isb_App_Init+0x1aa>
     da2:	f7 e0       	ldi	r31, 0x07	; 7
     da4:	6f 16       	cp	r6, r31
     da6:	09 f4       	brne	.+2      	; 0xdaa <Isb_App_Init+0x76>
     da8:	d4 c0       	rjmp	.+424    	; 0xf52 <Isb_App_Init+0x21e>
     daa:	88 e0       	ldi	r24, 0x08	; 8
     dac:	68 16       	cp	r6, r24
     dae:	d1 f4       	brne	.+52     	; 0xde4 <Isb_App_Init+0xb0>
     db0:	ed c0       	rjmp	.+474    	; 0xf8c <Isb_App_Init+0x258>
     db2:	f9 ea       	ldi	r31, 0xA9	; 169
     db4:	8f 2e       	mov	r8, r31
     db6:	91 2c       	mov	r9, r1
     db8:	ea ea       	ldi	r30, 0xAA	; 170
     dba:	ae 2e       	mov	r10, r30
     dbc:	b1 2c       	mov	r11, r1
     dbe:	7b ea       	ldi	r23, 0xAB	; 171
     dc0:	c7 2e       	mov	r12, r23
     dc2:	d1 2c       	mov	r13, r1
     dc4:	6c ea       	ldi	r22, 0xAC	; 172
     dc6:	e6 2e       	mov	r14, r22
     dc8:	f1 2c       	mov	r15, r1
     dca:	0d ea       	ldi	r16, 0xAD	; 173
     dcc:	10 e0       	ldi	r17, 0x00	; 0
     dce:	ce ea       	ldi	r28, 0xAE	; 174
     dd0:	d0 e0       	ldi	r29, 0x00	; 0
     dd2:	af ea       	ldi	r26, 0xAF	; 175
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	60 eb       	ldi	r22, 0xB0	; 176
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	41 eb       	ldi	r20, 0xB1	; 177
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	22 eb       	ldi	r18, 0xB2	; 178
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	f0 c0       	rjmp	.+480    	; 0xfc4 <Isb_App_Init+0x290>
     de4:	88 24       	eor	r8, r8
     de6:	99 24       	eor	r9, r9
     de8:	aa 24       	eor	r10, r10
     dea:	bb 24       	eor	r11, r11
     dec:	cc 24       	eor	r12, r12
     dee:	dd 24       	eor	r13, r13
     df0:	ee 24       	eor	r14, r14
     df2:	ff 24       	eor	r15, r15
     df4:	00 e0       	ldi	r16, 0x00	; 0
     df6:	10 e0       	ldi	r17, 0x00	; 0
     df8:	c0 e0       	ldi	r28, 0x00	; 0
     dfa:	d0 e0       	ldi	r29, 0x00	; 0
     dfc:	a0 e0       	ldi	r26, 0x00	; 0
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	db c0       	rjmp	.+438    	; 0xfc4 <Isb_App_Init+0x290>
     e0e:	51 ec       	ldi	r21, 0xC1	; 193
     e10:	85 2e       	mov	r8, r21
     e12:	91 2c       	mov	r9, r1
     e14:	42 ec       	ldi	r20, 0xC2	; 194
     e16:	a4 2e       	mov	r10, r20
     e18:	b1 2c       	mov	r11, r1
     e1a:	33 ec       	ldi	r19, 0xC3	; 195
     e1c:	c3 2e       	mov	r12, r19
     e1e:	d1 2c       	mov	r13, r1
     e20:	24 ec       	ldi	r18, 0xC4	; 196
     e22:	e2 2e       	mov	r14, r18
     e24:	f1 2c       	mov	r15, r1
     e26:	05 ec       	ldi	r16, 0xC5	; 197
     e28:	10 e0       	ldi	r17, 0x00	; 0
     e2a:	c6 ec       	ldi	r28, 0xC6	; 198
     e2c:	d0 e0       	ldi	r29, 0x00	; 0
     e2e:	a7 ec       	ldi	r26, 0xC7	; 199
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	68 ec       	ldi	r22, 0xC8	; 200
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	49 ec       	ldi	r20, 0xC9	; 201
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	2a ec       	ldi	r18, 0xCA	; 202
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	c2 c0       	rjmp	.+388    	; 0xfc4 <Isb_App_Init+0x290>
							eeAddrCfg5 = ISB_APP_DIGOUT_1_EEADDR_CFG5;
							eeAddrCfg6 = ISB_APP_DIGOUT_1_EEADDR_CFG6;
							eeAddrCfg7 = ISB_APP_DIGOUT_1_EEADDR_CFG7;
							eeAddrCfg8 = ISB_APP_DIGOUT_1_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_1_EEADDR_CFG9;
							break;
     e40:	99 ed       	ldi	r25, 0xD9	; 217
     e42:	89 2e       	mov	r8, r25
     e44:	91 2c       	mov	r9, r1
     e46:	8a ed       	ldi	r24, 0xDA	; 218
     e48:	a8 2e       	mov	r10, r24
     e4a:	b1 2c       	mov	r11, r1
     e4c:	0b ed       	ldi	r16, 0xDB	; 219
     e4e:	c0 2e       	mov	r12, r16
     e50:	d1 2c       	mov	r13, r1
     e52:	1c ed       	ldi	r17, 0xDC	; 220
     e54:	e1 2e       	mov	r14, r17
     e56:	f1 2c       	mov	r15, r1
     e58:	0d ed       	ldi	r16, 0xDD	; 221
     e5a:	10 e0       	ldi	r17, 0x00	; 0
     e5c:	ce ed       	ldi	r28, 0xDE	; 222
     e5e:	d0 e0       	ldi	r29, 0x00	; 0
     e60:	af ed       	ldi	r26, 0xDF	; 223
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	60 ee       	ldi	r22, 0xE0	; 224
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	41 ee       	ldi	r20, 0xE1	; 225
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	22 ee       	ldi	r18, 0xE2	; 226
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	a9 c0       	rjmp	.+338    	; 0xfc4 <Isb_App_Init+0x290>
							eeAddrCfg5 = ISB_APP_DIGOUT_2_EEADDR_CFG5;
							eeAddrCfg6 = ISB_APP_DIGOUT_2_EEADDR_CFG6;
							eeAddrCfg7 = ISB_APP_DIGOUT_2_EEADDR_CFG7;
							eeAddrCfg8 = ISB_APP_DIGOUT_2_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_2_EEADDR_CFG9;
							break;
     e72:	b1 ef       	ldi	r27, 0xF1	; 241
     e74:	8b 2e       	mov	r8, r27
     e76:	91 2c       	mov	r9, r1
     e78:	a2 ef       	ldi	r26, 0xF2	; 242
     e7a:	aa 2e       	mov	r10, r26
     e7c:	b1 2c       	mov	r11, r1
     e7e:	f3 ef       	ldi	r31, 0xF3	; 243
     e80:	cf 2e       	mov	r12, r31
     e82:	d1 2c       	mov	r13, r1
     e84:	e4 ef       	ldi	r30, 0xF4	; 244
     e86:	ee 2e       	mov	r14, r30
     e88:	f1 2c       	mov	r15, r1
     e8a:	05 ef       	ldi	r16, 0xF5	; 245
     e8c:	10 e0       	ldi	r17, 0x00	; 0
     e8e:	c6 ef       	ldi	r28, 0xF6	; 246
     e90:	d0 e0       	ldi	r29, 0x00	; 0
     e92:	a7 ef       	ldi	r26, 0xF7	; 247
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	68 ef       	ldi	r22, 0xF8	; 248
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	49 ef       	ldi	r20, 0xF9	; 249
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	2a ef       	ldi	r18, 0xFA	; 250
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	90 c0       	rjmp	.+288    	; 0xfc4 <Isb_App_Init+0x290>
							eeAddrCfg5 = ISB_APP_DIGOUT_3_EEADDR_CFG5;
							eeAddrCfg6 = ISB_APP_DIGOUT_3_EEADDR_CFG6;
							eeAddrCfg7 = ISB_APP_DIGOUT_3_EEADDR_CFG7;
							eeAddrCfg8 = ISB_APP_DIGOUT_3_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_3_EEADDR_CFG9;
							break;
     ea4:	79 e0       	ldi	r23, 0x09	; 9
     ea6:	87 2e       	mov	r8, r23
     ea8:	71 e0       	ldi	r23, 0x01	; 1
     eaa:	97 2e       	mov	r9, r23
     eac:	6a e0       	ldi	r22, 0x0A	; 10
     eae:	a6 2e       	mov	r10, r22
     eb0:	61 e0       	ldi	r22, 0x01	; 1
     eb2:	b6 2e       	mov	r11, r22
     eb4:	5b e0       	ldi	r21, 0x0B	; 11
     eb6:	c5 2e       	mov	r12, r21
     eb8:	51 e0       	ldi	r21, 0x01	; 1
     eba:	d5 2e       	mov	r13, r21
     ebc:	4c e0       	ldi	r20, 0x0C	; 12
     ebe:	e4 2e       	mov	r14, r20
     ec0:	41 e0       	ldi	r20, 0x01	; 1
     ec2:	f4 2e       	mov	r15, r20
     ec4:	0d e0       	ldi	r16, 0x0D	; 13
     ec6:	11 e0       	ldi	r17, 0x01	; 1
     ec8:	ce e0       	ldi	r28, 0x0E	; 14
     eca:	d1 e0       	ldi	r29, 0x01	; 1
     ecc:	af e0       	ldi	r26, 0x0F	; 15
     ece:	b1 e0       	ldi	r27, 0x01	; 1
     ed0:	60 e1       	ldi	r22, 0x10	; 16
     ed2:	71 e0       	ldi	r23, 0x01	; 1
     ed4:	41 e1       	ldi	r20, 0x11	; 17
     ed6:	51 e0       	ldi	r21, 0x01	; 1
     ed8:	22 e1       	ldi	r18, 0x12	; 18
     eda:	31 e0       	ldi	r19, 0x01	; 1
     edc:	73 c0       	rjmp	.+230    	; 0xfc4 <Isb_App_Init+0x290>
							eeAddrCfg5 = ISB_APP_DIGOUT_4_EEADDR_CFG5;
							eeAddrCfg6 = ISB_APP_DIGOUT_4_EEADDR_CFG6;
							eeAddrCfg7 = ISB_APP_DIGOUT_4_EEADDR_CFG7;
							eeAddrCfg8 = ISB_APP_DIGOUT_4_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_4_EEADDR_CFG9;
							break;
     ede:	31 e2       	ldi	r19, 0x21	; 33
     ee0:	83 2e       	mov	r8, r19
     ee2:	31 e0       	ldi	r19, 0x01	; 1
     ee4:	93 2e       	mov	r9, r19
     ee6:	22 e2       	ldi	r18, 0x22	; 34
     ee8:	a2 2e       	mov	r10, r18
     eea:	21 e0       	ldi	r18, 0x01	; 1
     eec:	b2 2e       	mov	r11, r18
     eee:	93 e2       	ldi	r25, 0x23	; 35
     ef0:	c9 2e       	mov	r12, r25
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	d9 2e       	mov	r13, r25
     ef6:	84 e2       	ldi	r24, 0x24	; 36
     ef8:	e8 2e       	mov	r14, r24
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	f8 2e       	mov	r15, r24
     efe:	05 e2       	ldi	r16, 0x25	; 37
     f00:	11 e0       	ldi	r17, 0x01	; 1
     f02:	c6 e2       	ldi	r28, 0x26	; 38
     f04:	d1 e0       	ldi	r29, 0x01	; 1
     f06:	a7 e2       	ldi	r26, 0x27	; 39
     f08:	b1 e0       	ldi	r27, 0x01	; 1
     f0a:	68 e2       	ldi	r22, 0x28	; 40
     f0c:	71 e0       	ldi	r23, 0x01	; 1
     f0e:	49 e2       	ldi	r20, 0x29	; 41
     f10:	51 e0       	ldi	r21, 0x01	; 1
     f12:	2a e2       	ldi	r18, 0x2A	; 42
     f14:	31 e0       	ldi	r19, 0x01	; 1
     f16:	56 c0       	rjmp	.+172    	; 0xfc4 <Isb_App_Init+0x290>
							eeAddrCfg5 = ISB_APP_DIGOUT_5_EEADDR_CFG5;
							eeAddrCfg6 = ISB_APP_DIGOUT_5_EEADDR_CFG6;
							eeAddrCfg7 = ISB_APP_DIGOUT_5_EEADDR_CFG7;
							eeAddrCfg8 = ISB_APP_DIGOUT_5_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_5_EEADDR_CFG9;
							break;
     f18:	09 e3       	ldi	r16, 0x39	; 57
     f1a:	80 2e       	mov	r8, r16
     f1c:	01 e0       	ldi	r16, 0x01	; 1
     f1e:	90 2e       	mov	r9, r16
     f20:	1a e3       	ldi	r17, 0x3A	; 58
     f22:	a1 2e       	mov	r10, r17
     f24:	11 e0       	ldi	r17, 0x01	; 1
     f26:	b1 2e       	mov	r11, r17
     f28:	bb e3       	ldi	r27, 0x3B	; 59
     f2a:	cb 2e       	mov	r12, r27
     f2c:	b1 e0       	ldi	r27, 0x01	; 1
     f2e:	db 2e       	mov	r13, r27
     f30:	ac e3       	ldi	r26, 0x3C	; 60
     f32:	ea 2e       	mov	r14, r26
     f34:	a1 e0       	ldi	r26, 0x01	; 1
     f36:	fa 2e       	mov	r15, r26
     f38:	0d e3       	ldi	r16, 0x3D	; 61
     f3a:	11 e0       	ldi	r17, 0x01	; 1
     f3c:	ce e3       	ldi	r28, 0x3E	; 62
     f3e:	d1 e0       	ldi	r29, 0x01	; 1
     f40:	af e3       	ldi	r26, 0x3F	; 63
     f42:	b1 e0       	ldi	r27, 0x01	; 1
     f44:	60 e4       	ldi	r22, 0x40	; 64
     f46:	71 e0       	ldi	r23, 0x01	; 1
     f48:	41 e4       	ldi	r20, 0x41	; 65
     f4a:	51 e0       	ldi	r21, 0x01	; 1
     f4c:	22 e4       	ldi	r18, 0x42	; 66
     f4e:	31 e0       	ldi	r19, 0x01	; 1
     f50:	39 c0       	rjmp	.+114    	; 0xfc4 <Isb_App_Init+0x290>
							eeAddrCfg5 = ISB_APP_DIGOUT_6_EEADDR_CFG5;
							eeAddrCfg6 = ISB_APP_DIGOUT_6_EEADDR_CFG6;
							eeAddrCfg7 = ISB_APP_DIGOUT_6_EEADDR_CFG7;
							eeAddrCfg8 = ISB_APP_DIGOUT_6_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_6_EEADDR_CFG9;
							break;
     f52:	f1 e5       	ldi	r31, 0x51	; 81
     f54:	8f 2e       	mov	r8, r31
     f56:	f1 e0       	ldi	r31, 0x01	; 1
     f58:	9f 2e       	mov	r9, r31
     f5a:	e2 e5       	ldi	r30, 0x52	; 82
     f5c:	ae 2e       	mov	r10, r30
     f5e:	e1 e0       	ldi	r30, 0x01	; 1
     f60:	be 2e       	mov	r11, r30
     f62:	73 e5       	ldi	r23, 0x53	; 83
     f64:	c7 2e       	mov	r12, r23
     f66:	71 e0       	ldi	r23, 0x01	; 1
     f68:	d7 2e       	mov	r13, r23
     f6a:	64 e5       	ldi	r22, 0x54	; 84
     f6c:	e6 2e       	mov	r14, r22
     f6e:	61 e0       	ldi	r22, 0x01	; 1
     f70:	f6 2e       	mov	r15, r22
     f72:	05 e5       	ldi	r16, 0x55	; 85
     f74:	11 e0       	ldi	r17, 0x01	; 1
     f76:	c6 e5       	ldi	r28, 0x56	; 86
     f78:	d1 e0       	ldi	r29, 0x01	; 1
     f7a:	a7 e5       	ldi	r26, 0x57	; 87
     f7c:	b1 e0       	ldi	r27, 0x01	; 1
     f7e:	68 e5       	ldi	r22, 0x58	; 88
     f80:	71 e0       	ldi	r23, 0x01	; 1
     f82:	49 e5       	ldi	r20, 0x59	; 89
     f84:	51 e0       	ldi	r21, 0x01	; 1
     f86:	2a e5       	ldi	r18, 0x5A	; 90
     f88:	31 e0       	ldi	r19, 0x01	; 1
     f8a:	1c c0       	rjmp	.+56     	; 0xfc4 <Isb_App_Init+0x290>
							eeAddrCfg5 = ISB_APP_DIGOUT_7_EEADDR_CFG5;
							eeAddrCfg6 = ISB_APP_DIGOUT_7_EEADDR_CFG6;
							eeAddrCfg7 = ISB_APP_DIGOUT_7_EEADDR_CFG7;
							eeAddrCfg8 = ISB_APP_DIGOUT_7_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_7_EEADDR_CFG9;
							break;
     f8c:	59 e6       	ldi	r21, 0x69	; 105
     f8e:	85 2e       	mov	r8, r21
     f90:	51 e0       	ldi	r21, 0x01	; 1
     f92:	95 2e       	mov	r9, r21
     f94:	4a e6       	ldi	r20, 0x6A	; 106
     f96:	a4 2e       	mov	r10, r20
     f98:	41 e0       	ldi	r20, 0x01	; 1
     f9a:	b4 2e       	mov	r11, r20
     f9c:	3b e6       	ldi	r19, 0x6B	; 107
     f9e:	c3 2e       	mov	r12, r19
     fa0:	31 e0       	ldi	r19, 0x01	; 1
     fa2:	d3 2e       	mov	r13, r19
     fa4:	2c e6       	ldi	r18, 0x6C	; 108
     fa6:	e2 2e       	mov	r14, r18
     fa8:	21 e0       	ldi	r18, 0x01	; 1
     faa:	f2 2e       	mov	r15, r18
     fac:	0d e6       	ldi	r16, 0x6D	; 109
     fae:	11 e0       	ldi	r17, 0x01	; 1
     fb0:	ce e6       	ldi	r28, 0x6E	; 110
     fb2:	d1 e0       	ldi	r29, 0x01	; 1
     fb4:	af e6       	ldi	r26, 0x6F	; 111
     fb6:	b1 e0       	ldi	r27, 0x01	; 1
     fb8:	60 e7       	ldi	r22, 0x70	; 112
     fba:	71 e0       	ldi	r23, 0x01	; 1
     fbc:	41 e7       	ldi	r20, 0x71	; 113
     fbe:	51 e0       	ldi	r21, 0x01	; 1
     fc0:	22 e7       	ldi	r18, 0x72	; 114
     fc2:	31 e0       	ldi	r19, 0x01	; 1
							eeAddrCfg8 = ISB_APP_DIGOUT_15_EEADDR_CFG8;
							eeAddrCfg9 = ISB_APP_DIGOUT_15_EEADDR_CFG9;
							break;
					#endif /* ISB_APP_DIGOUT_15 */
				}
				uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigOut_Ch_Array[AppIndex]);
     fc4:	f3 01       	movw	r30, r6
     fc6:	e8 58       	subi	r30, 0x88	; 136
     fc8:	fe 4f       	sbci	r31, 0xFE	; 254
     fca:	e4 91       	lpm	r30, Z+
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	ee 0f       	add	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	e2 5e       	subi	r30, 0xE2	; 226
     fd4:	fb 4f       	sbci	r31, 0xFB	; 251
     fd6:	80 81       	ld	r24, Z
     fd8:	80 ff       	sbrs	r24, 0
     fda:	66 c0       	rjmp	.+204    	; 0x10a8 <Isb_App_Init+0x374>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     fdc:	f9 99       	sbic	0x1f, 1	; 31
     fde:	fe cf       	rjmp	.-4      	; 0xfdc <Isb_App_Init+0x2a8>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     fe0:	82 0c       	add	r8, r2
     fe2:	93 1c       	adc	r9, r3
     fe4:	92 bc       	out	0x22, r9	; 34
     fe6:	81 bc       	out	0x21, r8	; 33
#endif
    EECR |= (1 << EERE);
     fe8:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
     fea:	80 b5       	in	r24, 0x20	; 32
					Isb_App_DigOut[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg0);
     fec:	f2 01       	movw	r30, r4
     fee:	80 83       	st	Z, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     ff0:	f9 99       	sbic	0x1f, 1	; 31
     ff2:	fe cf       	rjmp	.-4      	; 0xff0 <Isb_App_Init+0x2bc>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     ff4:	a2 0c       	add	r10, r2
     ff6:	b3 1c       	adc	r11, r3
     ff8:	b2 bc       	out	0x22, r11	; 34
     ffa:	a1 bc       	out	0x21, r10	; 33
#endif
    EECR |= (1 << EERE);
     ffc:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
     ffe:	80 b5       	in	r24, 0x20	; 32
					Isb_App_DigOut[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg1);
    1000:	f2 01       	movw	r30, r4
    1002:	81 83       	std	Z+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1004:	f9 99       	sbic	0x1f, 1	; 31
    1006:	fe cf       	rjmp	.-4      	; 0x1004 <Isb_App_Init+0x2d0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1008:	c2 0c       	add	r12, r2
    100a:	d3 1c       	adc	r13, r3
    100c:	d2 bc       	out	0x22, r13	; 34
    100e:	c1 bc       	out	0x21, r12	; 33
#endif
    EECR |= (1 << EERE);
    1010:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    1012:	80 b5       	in	r24, 0x20	; 32
					Isb_App_DigOut[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg2);
    1014:	f2 01       	movw	r30, r4
    1016:	82 83       	std	Z+2, r24	; 0x02
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1018:	f9 99       	sbic	0x1f, 1	; 31
    101a:	fe cf       	rjmp	.-4      	; 0x1018 <Isb_App_Init+0x2e4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    101c:	e2 0c       	add	r14, r2
    101e:	f3 1c       	adc	r15, r3
    1020:	f2 bc       	out	0x22, r15	; 34
    1022:	e1 bc       	out	0x21, r14	; 33
#endif
    EECR |= (1 << EERE);
    1024:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    1026:	80 b5       	in	r24, 0x20	; 32
					Isb_App_DigOut[AppIndex].Cfg3 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg3);
    1028:	f2 01       	movw	r30, r4
    102a:	83 83       	std	Z+3, r24	; 0x03
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    102c:	f9 99       	sbic	0x1f, 1	; 31
    102e:	fe cf       	rjmp	.-4      	; 0x102c <Isb_App_Init+0x2f8>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1030:	02 0d       	add	r16, r2
    1032:	13 1d       	adc	r17, r3
    1034:	12 bd       	out	0x22, r17	; 34
    1036:	01 bd       	out	0x21, r16	; 33
#endif
    EECR |= (1 << EERE);
    1038:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    103a:	80 b5       	in	r24, 0x20	; 32
					Isb_App_DigOut[AppIndex].Cfg4 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg4);
    103c:	f2 01       	movw	r30, r4
    103e:	84 83       	std	Z+4, r24	; 0x04
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1040:	f9 99       	sbic	0x1f, 1	; 31
    1042:	fe cf       	rjmp	.-4      	; 0x1040 <Isb_App_Init+0x30c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1044:	c2 0d       	add	r28, r2
    1046:	d3 1d       	adc	r29, r3
    1048:	d2 bd       	out	0x22, r29	; 34
    104a:	c1 bd       	out	0x21, r28	; 33
#endif
    EECR |= (1 << EERE);
    104c:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    104e:	80 b5       	in	r24, 0x20	; 32
					Isb_App_DigOut[AppIndex].Cfg5 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg5);
    1050:	f2 01       	movw	r30, r4
    1052:	85 83       	std	Z+5, r24	; 0x05
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1054:	f9 99       	sbic	0x1f, 1	; 31
    1056:	fe cf       	rjmp	.-4      	; 0x1054 <Isb_App_Init+0x320>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1058:	a2 0d       	add	r26, r2
    105a:	b3 1d       	adc	r27, r3
    105c:	b2 bd       	out	0x22, r27	; 34
    105e:	a1 bd       	out	0x21, r26	; 33
#endif
    EECR |= (1 << EERE);
    1060:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    1062:	80 b5       	in	r24, 0x20	; 32
					Isb_App_DigOut[AppIndex].Cfg6 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg6);
    1064:	d2 01       	movw	r26, r4
    1066:	16 96       	adiw	r26, 0x06	; 6
    1068:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    106a:	f9 99       	sbic	0x1f, 1	; 31
    106c:	fe cf       	rjmp	.-4      	; 0x106a <Isb_App_Init+0x336>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    106e:	62 0d       	add	r22, r2
    1070:	73 1d       	adc	r23, r3
    1072:	72 bd       	out	0x22, r23	; 34
    1074:	61 bd       	out	0x21, r22	; 33
#endif
    EECR |= (1 << EERE);
    1076:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    1078:	80 b5       	in	r24, 0x20	; 32
					Isb_App_DigOut[AppIndex].Cfg7 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg7);
    107a:	f2 01       	movw	r30, r4
    107c:	87 83       	std	Z+7, r24	; 0x07
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    107e:	f9 99       	sbic	0x1f, 1	; 31
    1080:	fe cf       	rjmp	.-4      	; 0x107e <Isb_App_Init+0x34a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1082:	42 0d       	add	r20, r2
    1084:	53 1d       	adc	r21, r3
    1086:	52 bd       	out	0x22, r21	; 34
    1088:	41 bd       	out	0x21, r20	; 33
#endif
    EECR |= (1 << EERE);
    108a:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    108c:	80 b5       	in	r24, 0x20	; 32
					Isb_App_DigOut[AppIndex].Cfg8 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg8);
    108e:	d2 01       	movw	r26, r4
    1090:	18 96       	adiw	r26, 0x08	; 8
    1092:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1094:	f9 99       	sbic	0x1f, 1	; 31
    1096:	fe cf       	rjmp	.-4      	; 0x1094 <Isb_App_Init+0x360>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1098:	22 0d       	add	r18, r2
    109a:	33 1d       	adc	r19, r3
    109c:	32 bd       	out	0x22, r19	; 34
    109e:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
    10a0:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    10a2:	80 b5       	in	r24, 0x20	; 32
					Isb_App_DigOut[AppIndex].Cfg9 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg9);
    10a4:	f2 01       	movw	r30, r4
    10a6:	81 87       	std	Z+9, r24	; 0x09
    10a8:	08 94       	sec
    10aa:	61 1c       	adc	r6, r1
    10ac:	71 1c       	adc	r7, r1
    10ae:	8a e1       	ldi	r24, 0x1A	; 26
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	48 0e       	add	r4, r24
    10b4:	59 1e       	adc	r5, r25


	void Isb_App_Init(void) {

		#if defined(ISB_APP_DIGOUT_MAX)
			for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGOUT_MAX; AppIndex++) {
    10b6:	99 e0       	ldi	r25, 0x09	; 9
    10b8:	69 16       	cp	r6, r25
    10ba:	71 04       	cpc	r7, r1
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <Isb_App_Init+0x38c>
    10be:	56 ce       	rjmp	.-852    	; 0xd6c <Isb_App_Init+0x38>
    10c0:	0b e4       	ldi	r16, 0x4B	; 75
    10c2:	11 e0       	ldi	r17, 0x01	; 1
    10c4:	c0 e0       	ldi	r28, 0x00	; 0
    10c6:	d0 e0       	ldi	r29, 0x00	; 0
			for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++) {
				uint16_t eeAddrCfg0 = 0;
				uint16_t eeAddrCfg1 = 0;
				uint16_t eeAddrCfg2 = 0;
				uint16_t eeAddrCfg3 = 0;
				switch (AppIndex) {
    10c8:	c3 30       	cpi	r28, 0x03	; 3
    10ca:	a9 f1       	breq	.+106    	; 0x1136 <Isb_App_Init+0x402>
    10cc:	c4 30       	cpi	r28, 0x04	; 4
    10ce:	28 f4       	brcc	.+10     	; 0x10da <Isb_App_Init+0x3a6>
    10d0:	c1 30       	cpi	r28, 0x01	; 1
    10d2:	f9 f0       	breq	.+62     	; 0x1112 <Isb_App_Init+0x3de>
    10d4:	c2 30       	cpi	r28, 0x02	; 2
    10d6:	30 f5       	brcc	.+76     	; 0x1124 <Isb_App_Init+0x3f0>
    10d8:	0a c0       	rjmp	.+20     	; 0x10ee <Isb_App_Init+0x3ba>
    10da:	c5 30       	cpi	r28, 0x05	; 5
    10dc:	f1 f1       	breq	.+124    	; 0x115a <Isb_App_Init+0x426>
    10de:	c5 30       	cpi	r28, 0x05	; 5
    10e0:	98 f1       	brcs	.+102    	; 0x1148 <Isb_App_Init+0x414>
    10e2:	c6 30       	cpi	r28, 0x06	; 6
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <Isb_App_Init+0x3b4>
    10e6:	42 c0       	rjmp	.+132    	; 0x116c <Isb_App_Init+0x438>
    10e8:	c7 30       	cpi	r28, 0x07	; 7
    10ea:	51 f4       	brne	.+20     	; 0x1100 <Isb_App_Init+0x3cc>
    10ec:	48 c0       	rjmp	.+144    	; 0x117e <Isb_App_Init+0x44a>
    10ee:	a1 e0       	ldi	r26, 0x01	; 1
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	62 e0       	ldi	r22, 0x02	; 2
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	43 e0       	ldi	r20, 0x03	; 3
    10f8:	50 e0       	ldi	r21, 0x00	; 0
    10fa:	24 e0       	ldi	r18, 0x04	; 4
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	47 c0       	rjmp	.+142    	; 0x118e <Isb_App_Init+0x45a>
    1100:	a0 e0       	ldi	r26, 0x00	; 0
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	40 e0       	ldi	r20, 0x00	; 0
    110a:	50 e0       	ldi	r21, 0x00	; 0
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	3e c0       	rjmp	.+124    	; 0x118e <Isb_App_Init+0x45a>
    1112:	a6 e1       	ldi	r26, 0x16	; 22
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	67 e1       	ldi	r22, 0x17	; 23
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	48 e1       	ldi	r20, 0x18	; 24
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	29 e1       	ldi	r18, 0x19	; 25
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	35 c0       	rjmp	.+106    	; 0x118e <Isb_App_Init+0x45a>
						case 1:
							eeAddrCfg0 = ISB_APP_DIGIN_1_EEADDR_CFG0;
							eeAddrCfg1 = ISB_APP_DIGIN_1_EEADDR_CFG1;
							eeAddrCfg2 = ISB_APP_DIGIN_1_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_1_EEADDR_CFG3;
							break;
    1124:	ab e2       	ldi	r26, 0x2B	; 43
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	6c e2       	ldi	r22, 0x2C	; 44
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	4d e2       	ldi	r20, 0x2D	; 45
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	2e e2       	ldi	r18, 0x2E	; 46
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	2c c0       	rjmp	.+88     	; 0x118e <Isb_App_Init+0x45a>
						case 2:
							eeAddrCfg0 = ISB_APP_DIGIN_2_EEADDR_CFG0;
							eeAddrCfg1 = ISB_APP_DIGIN_2_EEADDR_CFG1;
							eeAddrCfg2 = ISB_APP_DIGIN_2_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_2_EEADDR_CFG3;
							break;
    1136:	a0 e4       	ldi	r26, 0x40	; 64
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	61 e4       	ldi	r22, 0x41	; 65
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	42 e4       	ldi	r20, 0x42	; 66
    1140:	50 e0       	ldi	r21, 0x00	; 0
    1142:	23 e4       	ldi	r18, 0x43	; 67
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	23 c0       	rjmp	.+70     	; 0x118e <Isb_App_Init+0x45a>
						case 3:
							eeAddrCfg0 = ISB_APP_DIGIN_3_EEADDR_CFG0;
							eeAddrCfg1 = ISB_APP_DIGIN_3_EEADDR_CFG1;
							eeAddrCfg2 = ISB_APP_DIGIN_3_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_3_EEADDR_CFG3;
							break;
    1148:	a5 e5       	ldi	r26, 0x55	; 85
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	66 e5       	ldi	r22, 0x56	; 86
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	47 e5       	ldi	r20, 0x57	; 87
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	28 e5       	ldi	r18, 0x58	; 88
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	1a c0       	rjmp	.+52     	; 0x118e <Isb_App_Init+0x45a>
						case 4:
							eeAddrCfg0 = ISB_APP_DIGIN_4_EEADDR_CFG0;
							eeAddrCfg1 = ISB_APP_DIGIN_4_EEADDR_CFG1;
							eeAddrCfg2 = ISB_APP_DIGIN_4_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_4_EEADDR_CFG3;
							break;
    115a:	aa e6       	ldi	r26, 0x6A	; 106
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	6b e6       	ldi	r22, 0x6B	; 107
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	4c e6       	ldi	r20, 0x6C	; 108
    1164:	50 e0       	ldi	r21, 0x00	; 0
    1166:	2d e6       	ldi	r18, 0x6D	; 109
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	11 c0       	rjmp	.+34     	; 0x118e <Isb_App_Init+0x45a>
						case 5:
							eeAddrCfg0 = ISB_APP_DIGIN_5_EEADDR_CFG0;
							eeAddrCfg1 = ISB_APP_DIGIN_5_EEADDR_CFG1;
							eeAddrCfg2 = ISB_APP_DIGIN_5_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_5_EEADDR_CFG3;
							break;
    116c:	af e7       	ldi	r26, 0x7F	; 127
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	60 e8       	ldi	r22, 0x80	; 128
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	41 e8       	ldi	r20, 0x81	; 129
    1176:	50 e0       	ldi	r21, 0x00	; 0
    1178:	22 e8       	ldi	r18, 0x82	; 130
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	08 c0       	rjmp	.+16     	; 0x118e <Isb_App_Init+0x45a>
						case 6:
							eeAddrCfg0 = ISB_APP_DIGIN_6_EEADDR_CFG0;
							eeAddrCfg1 = ISB_APP_DIGIN_6_EEADDR_CFG1;
							eeAddrCfg2 = ISB_APP_DIGIN_6_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_6_EEADDR_CFG3;
							break;
    117e:	a4 e9       	ldi	r26, 0x94	; 148
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	65 e9       	ldi	r22, 0x95	; 149
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	46 e9       	ldi	r20, 0x96	; 150
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	27 e9       	ldi	r18, 0x97	; 151
    118c:	30 e0       	ldi	r19, 0x00	; 0
							eeAddrCfg2 = ISB_APP_DIGIN_15_EEADDR_CFG2;
							eeAddrCfg3 = ISB_APP_DIGIN_15_EEADDR_CFG3;
							break;
					#endif /* ISB_APP_DIGIN_15 */
				}
				uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigIn_Ch_Array[AppIndex]);
    118e:	fe 01       	movw	r30, r28
    1190:	e2 55       	subi	r30, 0x52	; 82
    1192:	fe 4f       	sbci	r31, 0xFE	; 254
    1194:	e4 91       	lpm	r30, Z+
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	ee 0f       	add	r30, r30
    119a:	ff 1f       	adc	r31, r31
    119c:	e2 5e       	subi	r30, 0xE2	; 226
    119e:	fb 4f       	sbci	r31, 0xFB	; 251
    11a0:	80 81       	ld	r24, Z
    11a2:	80 ff       	sbrs	r24, 0
    11a4:	46 c0       	rjmp	.+140    	; 0x1232 <Isb_App_Init+0x4fe>
    11a6:	80 91 36 01 	lds	r24, 0x0136
    11aa:	e8 2f       	mov	r30, r24
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    11ae:	f9 99       	sbic	0x1f, 1	; 31
    11b0:	fe cf       	rjmp	.-4      	; 0x11ae <Isb_App_Init+0x47a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    11b2:	ae 0f       	add	r26, r30
    11b4:	bf 1f       	adc	r27, r31
    11b6:	b2 bd       	out	0x22, r27	; 34
    11b8:	a1 bd       	out	0x21, r26	; 33
#endif
    EECR |= (1 << EERE);
    11ba:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    11bc:	80 b5       	in	r24, 0x20	; 32
					Isb_App_DigIn[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg0);
    11be:	d8 01       	movw	r26, r16
    11c0:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    11c2:	f9 99       	sbic	0x1f, 1	; 31
    11c4:	fe cf       	rjmp	.-4      	; 0x11c2 <Isb_App_Init+0x48e>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    11c6:	6e 0f       	add	r22, r30
    11c8:	7f 1f       	adc	r23, r31
    11ca:	72 bd       	out	0x22, r23	; 34
    11cc:	61 bd       	out	0x21, r22	; 33
#endif
    EECR |= (1 << EERE);
    11ce:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    11d0:	80 b5       	in	r24, 0x20	; 32
					Isb_App_DigIn[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg1);
    11d2:	d8 01       	movw	r26, r16
    11d4:	11 96       	adiw	r26, 0x01	; 1
    11d6:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    11d8:	f9 99       	sbic	0x1f, 1	; 31
    11da:	fe cf       	rjmp	.-4      	; 0x11d8 <Isb_App_Init+0x4a4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    11dc:	4e 0f       	add	r20, r30
    11de:	5f 1f       	adc	r21, r31
    11e0:	52 bd       	out	0x22, r21	; 34
    11e2:	41 bd       	out	0x21, r20	; 33
#endif
    EECR |= (1 << EERE);
    11e4:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    11e6:	80 b5       	in	r24, 0x20	; 32
					Isb_App_DigIn[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg2);
    11e8:	d8 01       	movw	r26, r16
    11ea:	12 96       	adiw	r26, 0x02	; 2
    11ec:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    11ee:	f9 99       	sbic	0x1f, 1	; 31
    11f0:	fe cf       	rjmp	.-4      	; 0x11ee <Isb_App_Init+0x4ba>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    11f2:	2e 0f       	add	r18, r30
    11f4:	3f 1f       	adc	r19, r31
    11f6:	32 bd       	out	0x22, r19	; 34
    11f8:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
    11fa:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    11fc:	80 b5       	in	r24, 0x20	; 32
					Isb_App_DigIn[AppIndex].Cfg3 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg3);
    11fe:	f8 01       	movw	r30, r16
    1200:	83 83       	std	Z+3, r24	; 0x03
					uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigIn_Pin0_Array[AppIndex]);
    1202:	fe 01       	movw	r30, r28
    1204:	ea 54       	subi	r30, 0x4A	; 74
    1206:	fe 4f       	sbci	r31, 0xFE	; 254
    1208:	64 91       	lpm	r22, Z+
					uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
    120a:	26 2f       	mov	r18, r22
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	c9 01       	movw	r24, r18
    1210:	88 73       	andi	r24, 0x38	; 56
    1212:	90 70       	andi	r25, 0x00	; 0
    1214:	33 e0       	ldi	r19, 0x03	; 3
    1216:	95 95       	asr	r25
    1218:	87 95       	ror	r24
    121a:	3a 95       	dec	r19
    121c:	e1 f7       	brne	.-8      	; 0x1216 <Isb_App_Init+0x4e2>
					uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
					if (Port != 0) {
    121e:	88 23       	and	r24, r24
    1220:	41 f0       	breq	.+16     	; 0x1232 <Isb_App_Init+0x4fe>
					Isb_App_DigIn[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg1);
					Isb_App_DigIn[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg2);
					Isb_App_DigIn[AppIndex].Cfg3 = lib_eep_fw_read_byte((uint8_t *)eeAddrCfg3);
					uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigIn_Pin0_Array[AppIndex]);
					uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
					uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
    1222:	67 70       	andi	r22, 0x07	; 7
					if (Port != 0) {
						if ((Pin0 & PULLUP) == 0) {
    1224:	26 fd       	sbrc	r18, 6
    1226:	02 c0       	rjmp	.+4      	; 0x122c <Isb_App_Init+0x4f8>
							Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT);
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	01 c0       	rjmp	.+2      	; 0x122e <Isb_App_Init+0x4fa>
						}
						else {
							Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT_PULLUP);
    122c:	42 e0       	ldi	r20, 0x02	; 2
    122e:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
    1232:	21 96       	adiw	r28, 0x01	; 1
    1234:	08 5f       	subi	r16, 0xF8	; 248
    1236:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
		#endif /* ISB_APP_DIGOUT_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++) {
    1238:	c8 30       	cpi	r28, 0x08	; 8
    123a:	d1 05       	cpc	r29, r1
    123c:	09 f0       	breq	.+2      	; 0x1240 <Isb_App_Init+0x50c>
    123e:	44 cf       	rjmp	.-376    	; 0x10c8 <Isb_App_Init+0x394>
//						break;
//				}
//			}
		#endif /* ISB_APP_LCD_MAX */

	}
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	ff 90       	pop	r15
    124a:	ef 90       	pop	r14
    124c:	df 90       	pop	r13
    124e:	cf 90       	pop	r12
    1250:	bf 90       	pop	r11
    1252:	af 90       	pop	r10
    1254:	9f 90       	pop	r9
    1256:	8f 90       	pop	r8
    1258:	7f 90       	pop	r7
    125a:	6f 90       	pop	r6
    125c:	5f 90       	pop	r5
    125e:	4f 90       	pop	r4
    1260:	3f 90       	pop	r3
    1262:	2f 90       	pop	r2
    1264:	08 95       	ret

00001266 <Isb_App_Convert_None>:



	void Isb_App_Convert_None(uint16_t Value, void *Destination) {
    1266:	fb 01       	movw	r30, r22
		*(uint16_t *)Destination = Value;
    1268:	91 83       	std	Z+1, r25	; 0x01
    126a:	80 83       	st	Z, r24
	}
    126c:	08 95       	ret

0000126e <Isb_App_Convert_PT100>:



	void Isb_App_Convert_PT100(uint16_t Value, void *Destination) {
    126e:	fb 01       	movw	r30, r22
		Value = Value << 1;
		*(uint16_t *)Destination = Value;
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	91 83       	std	Z+1, r25	; 0x01
    1276:	80 83       	st	Z, r24
	}
    1278:	08 95       	ret

0000127a <Isb_App_Exec>:



	void Isb_App_Exec(void) {
    127a:	3f 92       	push	r3
    127c:	4f 92       	push	r4
    127e:	5f 92       	push	r5
    1280:	6f 92       	push	r6
    1282:	7f 92       	push	r7
    1284:	8f 92       	push	r8
    1286:	9f 92       	push	r9
    1288:	af 92       	push	r10
    128a:	bf 92       	push	r11
    128c:	cf 92       	push	r12
    128e:	df 92       	push	r13
    1290:	ef 92       	push	r14
    1292:	ff 92       	push	r15
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29

		#if defined(ISB_APP_DIGOUT_MAX)
			if (bit_is_set(Isb_App_DigOut_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
    129c:	80 91 3a 01 	lds	r24, 0x013A
    12a0:	80 ff       	sbrs	r24, 0
    12a2:	b9 c1       	rjmp	.+882    	; 0x1616 <Isb_App_Exec+0x39c>
    12a4:	c4 e3       	ldi	r28, 0x34	; 52
    12a6:	d3 e0       	ldi	r29, 0x03	; 3
    12a8:	7e 01       	movw	r14, r28
    12aa:	00 e0       	ldi	r16, 0x00	; 0
    12ac:	10 e0       	ldi	r17, 0x00	; 0



						// Rückmeldungsfunktion
						Value = 0;
						if ((Isb_App_DigOut[AppIndex].Value == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
    12ae:	7a e1       	ldi	r23, 0x1A	; 26
    12b0:	a7 2e       	mov	r10, r23
    12b2:	b1 2c       	mov	r11, r1
						if ((Isb_App_DigOut[AppIndex].Value == 0) & (bit_is_set(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
							Value = 1;
						}
						if (Isb_Obj_1Bit[Obj_1Bit_3].Value != Value) {
							Isb_Obj_1Bit[Obj_1Bit_3].Value = Value;
							Isb_Obj_1Bit[Obj_1Bit_3].IsChanged = TRUE;
    12b4:	dd 24       	eor	r13, r13
    12b6:	d3 94       	inc	r13



						// Rückmeldungsfunktion
						Value = 0;
						if ((Isb_App_DigOut[AppIndex].Value == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
    12b8:	61 e0       	ldi	r22, 0x01	; 1
    12ba:	46 2e       	mov	r4, r22
    12bc:	51 2c       	mov	r5, r1
											Isb_App_DigOut[AppIndex].TimeOffCount--;
											Value = 1;
										}
									}
									else {
										Isb_App_DigOut[AppIndex].TimeOffCount = (Isb_App_DigOut[AppIndex].Cfg5 + Isb_App_DigOut[AppIndex].Cfg6 * 60 + Isb_App_DigOut[AppIndex].Cfg7 * 60 * 60) * 1000;
    12be:	50 e1       	ldi	r21, 0x10	; 16
    12c0:	65 2e       	mov	r6, r21
    12c2:	5e e0       	ldi	r21, 0x0E	; 14
    12c4:	75 2e       	mov	r7, r21
    12c6:	4c e3       	ldi	r20, 0x3C	; 60
    12c8:	34 2e       	mov	r3, r20
    12ca:	38 ee       	ldi	r19, 0xE8	; 232
    12cc:	83 2e       	mov	r8, r19
    12ce:	33 e0       	ldi	r19, 0x03	; 3
    12d0:	93 2e       	mov	r9, r19
	void Isb_App_Exec(void) {

		#if defined(ISB_APP_DIGOUT_MAX)
			if (bit_is_set(Isb_App_DigOut_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGOUT_MAX; AppIndex++) {
					uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigOut_Ch_Array[AppIndex]);
    12d2:	f8 01       	movw	r30, r16
    12d4:	e8 58       	subi	r30, 0x88	; 136
    12d6:	fe 4f       	sbci	r31, 0xFE	; 254
    12d8:	e4 91       	lpm	r30, Z+
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	ee 0f       	add	r30, r30
    12de:	ff 1f       	adc	r31, r31
    12e0:	e2 5e       	subi	r30, 0xE2	; 226
    12e2:	fb 4f       	sbci	r31, 0xFB	; 251
    12e4:	80 81       	ld	r24, Z
    12e6:	80 ff       	sbrs	r24, 0
    12e8:	86 c1       	rjmp	.+780    	; 0x15f6 <Isb_App_Exec+0x37c>
						uint8_t Obj_1Bit_0 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_1Bit_0_Array[AppIndex]);
    12ea:	f8 01       	movw	r30, r16
    12ec:	ef 57       	subi	r30, 0x7F	; 127
    12ee:	fe 4f       	sbci	r31, 0xFE	; 254
    12f0:	24 91       	lpm	r18, Z+
						uint8_t Obj_1Bit_1 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_1Bit_1_Array[AppIndex]);
    12f2:	f8 01       	movw	r30, r16
    12f4:	e6 57       	subi	r30, 0x76	; 118
    12f6:	fe 4f       	sbci	r31, 0xFE	; 254
    12f8:	34 91       	lpm	r19, Z+
						uint8_t Obj_1Bit_2 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_1Bit_2_Array[AppIndex]);
						uint8_t Obj_1Bit_3 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_1Bit_3_Array[AppIndex]);
    12fa:	f8 01       	movw	r30, r16
    12fc:	e4 56       	subi	r30, 0x64	; 100
    12fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1300:	c4 90       	lpm	r12, Z+
						// Verknüpfungsfunktion
						switch (Isb_App_DigOut[AppIndex].Cfg0 & ISB_APP_DIGOUT_CFG0_LOGIC_MODE_MASK) {
    1302:	f7 01       	movw	r30, r14
    1304:	80 81       	ld	r24, Z
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	80 76       	andi	r24, 0x60	; 96
    130a:	90 70       	andi	r25, 0x00	; 0
    130c:	80 32       	cpi	r24, 0x20	; 32
    130e:	91 05       	cpc	r25, r1
    1310:	39 f0       	breq	.+14     	; 0x1320 <Isb_App_Exec+0xa6>
    1312:	a2 2f       	mov	r26, r18
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	80 34       	cpi	r24, 0x40	; 64
    1318:	91 05       	cpc	r25, r1
    131a:	09 f0       	breq	.+2      	; 0x131e <Isb_App_Exec+0xa4>
    131c:	52 c0       	rjmp	.+164    	; 0x13c2 <Isb_App_Exec+0x148>
    131e:	23 c0       	rjmp	.+70     	; 0x1366 <Isb_App_Exec+0xec>
							case ISB_APP_DIGOUT_CFG0_LOGIC_MODE_AND:
								if ((Isb_Obj_1Bit[Obj_1Bit_0].IsChanged == TRUE) | (Isb_Obj_1Bit[Obj_1Bit_1].IsChanged == TRUE)) {
    1320:	a2 2f       	mov	r26, r18
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	23 2f       	mov	r18, r19
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	fd 01       	movw	r30, r26
    132a:	ee 0f       	add	r30, r30
    132c:	ff 1f       	adc	r31, r31
    132e:	ee 0f       	add	r30, r30
    1330:	ff 1f       	adc	r31, r31
    1332:	ec 5b       	subi	r30, 0xBC	; 188
    1334:	fd 4f       	sbci	r31, 0xFD	; 253
    1336:	83 81       	ldd	r24, Z+3	; 0x03
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	59 f0       	breq	.+22     	; 0x1352 <Isb_App_Exec+0xd8>
    133c:	f9 01       	movw	r30, r18
    133e:	ee 0f       	add	r30, r30
    1340:	ff 1f       	adc	r31, r31
    1342:	ee 0f       	add	r30, r30
    1344:	ff 1f       	adc	r31, r31
    1346:	ec 5b       	subi	r30, 0xBC	; 188
    1348:	fd 4f       	sbci	r31, 0xFD	; 253
    134a:	83 81       	ldd	r24, Z+3	; 0x03
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	09 f0       	breq	.+2      	; 0x1352 <Isb_App_Exec+0xd8>
    1350:	4b c0       	rjmp	.+150    	; 0x13e8 <Isb_App_Exec+0x16e>
									if ((Isb_Obj_1Bit[Obj_1Bit_0].Value != 0) & (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0)) {
    1352:	aa 0f       	add	r26, r26
    1354:	bb 1f       	adc	r27, r27
    1356:	aa 0f       	add	r26, r26
    1358:	bb 1f       	adc	r27, r27
    135a:	aa 5b       	subi	r26, 0xBA	; 186
    135c:	bd 4f       	sbci	r27, 0xFD	; 253
    135e:	8c 91       	ld	r24, X
    1360:	88 23       	and	r24, r24
    1362:	69 f1       	breq	.+90     	; 0x13be <Isb_App_Exec+0x144>
    1364:	1f c0       	rjmp	.+62     	; 0x13a4 <Isb_App_Exec+0x12a>
										Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
									}
								}
								break;
							case ISB_APP_DIGOUT_CFG0_LOGIC_MODE_OR:
								if ((Isb_Obj_1Bit[Obj_1Bit_0].IsChanged == TRUE) | (Isb_Obj_1Bit[Obj_1Bit_1].IsChanged == TRUE)) {
    1366:	23 2f       	mov	r18, r19
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	fd 01       	movw	r30, r26
    136c:	ee 0f       	add	r30, r30
    136e:	ff 1f       	adc	r31, r31
    1370:	ee 0f       	add	r30, r30
    1372:	ff 1f       	adc	r31, r31
    1374:	ec 5b       	subi	r30, 0xBC	; 188
    1376:	fd 4f       	sbci	r31, 0xFD	; 253
    1378:	83 81       	ldd	r24, Z+3	; 0x03
    137a:	81 30       	cpi	r24, 0x01	; 1
    137c:	51 f0       	breq	.+20     	; 0x1392 <Isb_App_Exec+0x118>
    137e:	f9 01       	movw	r30, r18
    1380:	ee 0f       	add	r30, r30
    1382:	ff 1f       	adc	r31, r31
    1384:	ee 0f       	add	r30, r30
    1386:	ff 1f       	adc	r31, r31
    1388:	ec 5b       	subi	r30, 0xBC	; 188
    138a:	fd 4f       	sbci	r31, 0xFD	; 253
    138c:	83 81       	ldd	r24, Z+3	; 0x03
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	59 f5       	brne	.+86     	; 0x13e8 <Isb_App_Exec+0x16e>
									if ((Isb_Obj_1Bit[Obj_1Bit_0].Value != 0) | (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0)) {
    1392:	aa 0f       	add	r26, r26
    1394:	bb 1f       	adc	r27, r27
    1396:	aa 0f       	add	r26, r26
    1398:	bb 1f       	adc	r27, r27
    139a:	aa 5b       	subi	r26, 0xBA	; 186
    139c:	bd 4f       	sbci	r27, 0xFD	; 253
    139e:	8c 91       	ld	r24, X
    13a0:	88 23       	and	r24, r24
    13a2:	51 f4       	brne	.+20     	; 0x13b8 <Isb_App_Exec+0x13e>
    13a4:	22 0f       	add	r18, r18
    13a6:	33 1f       	adc	r19, r19
    13a8:	22 0f       	add	r18, r18
    13aa:	33 1f       	adc	r19, r19
    13ac:	2a 5b       	subi	r18, 0xBA	; 186
    13ae:	3d 4f       	sbci	r19, 0xFD	; 253
    13b0:	f9 01       	movw	r30, r18
    13b2:	80 81       	ld	r24, Z
    13b4:	88 23       	and	r24, r24
    13b6:	19 f0       	breq	.+6      	; 0x13be <Isb_App_Exec+0x144>
										Isb_App_DigOut[AppIndex].LogicValue = 1;
    13b8:	da 8a       	std	Y+18, r13	; 0x12
										Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
    13ba:	db 8a       	std	Y+19, r13	; 0x13
    13bc:	15 c0       	rjmp	.+42     	; 0x13e8 <Isb_App_Exec+0x16e>
									}
									else {
										Isb_App_DigOut[AppIndex].LogicValue = 0;
    13be:	1a 8a       	std	Y+18, r1	; 0x12
    13c0:	fc cf       	rjmp	.-8      	; 0x13ba <Isb_App_Exec+0x140>
										Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
									}
								}
								break;
							default:
								if (Isb_Obj_1Bit[Obj_1Bit_0].IsChanged == TRUE) {
    13c2:	fd 01       	movw	r30, r26
    13c4:	ee 0f       	add	r30, r30
    13c6:	ff 1f       	adc	r31, r31
    13c8:	ee 0f       	add	r30, r30
    13ca:	ff 1f       	adc	r31, r31
    13cc:	ec 5b       	subi	r30, 0xBC	; 188
    13ce:	fd 4f       	sbci	r31, 0xFD	; 253
    13d0:	93 81       	ldd	r25, Z+3	; 0x03
    13d2:	91 30       	cpi	r25, 0x01	; 1
    13d4:	49 f4       	brne	.+18     	; 0x13e8 <Isb_App_Exec+0x16e>
									Isb_App_DigOut[AppIndex].LogicValue = Isb_Obj_1Bit[Obj_1Bit_0].Value;
    13d6:	aa 0f       	add	r26, r26
    13d8:	bb 1f       	adc	r27, r27
    13da:	aa 0f       	add	r26, r26
    13dc:	bb 1f       	adc	r27, r27
    13de:	aa 5b       	subi	r26, 0xBA	; 186
    13e0:	bd 4f       	sbci	r27, 0xFD	; 253
    13e2:	8c 91       	ld	r24, X
    13e4:	8a 8b       	std	Y+18, r24	; 0x12
									Isb_App_DigOut[AppIndex].LogicIsChanged = TRUE;
    13e6:	9b 8b       	std	Y+19, r25	; 0x13
								}						
								break;
						}
						// Zeitfunktion
						uint8_t Value = Isb_App_DigOut[AppIndex].LogicValue;
    13e8:	4a 89       	ldd	r20, Y+18	; 0x12
						if ((Isb_App_DigOut[AppIndex].Cfg1 & ISB_APP_DIGOUT_CFG1_TIME_MODE_MASK) != ISB_APP_DIGOUT_CFG1_TIME_MODE_NONE) {
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	83 70       	andi	r24, 0x03	; 3
    13f0:	90 70       	andi	r25, 0x00	; 0
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <Isb_App_Exec+0x17e>
    13f6:	7a c0       	rjmp	.+244    	; 0x14ec <Isb_App_Exec+0x272>
							if ((Isb_App_DigOut[AppIndex].Cfg1 & ISB_APP_DIGOUT_CFG1_TIME_MODE_MASK) == ISB_APP_DIGOUT_CFG1_TIME_MODE_DELAY) {
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	09 f0       	breq	.+2      	; 0x13fe <Isb_App_Exec+0x184>
    13fc:	77 c0       	rjmp	.+238    	; 0x14ec <Isb_App_Exec+0x272>
								if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg1, ISB_APP_DIGOUT_CFG1_TIME_POWERUPDELAY_ENABLED)) {
    13fe:	0a 9d       	mul	r16, r10
    1400:	f0 01       	movw	r30, r0
    1402:	0b 9d       	mul	r16, r11
    1404:	f0 0d       	add	r31, r0
    1406:	1a 9d       	mul	r17, r10
    1408:	f0 0d       	add	r31, r0
    140a:	11 24       	eor	r1, r1
    140c:	eb 5c       	subi	r30, 0xCB	; 203
    140e:	fc 4f       	sbci	r31, 0xFC	; 252
    1410:	80 81       	ld	r24, Z
    1412:	82 ff       	sbrs	r24, 2
    1414:	34 c0       	rjmp	.+104    	; 0x147e <Isb_App_Exec+0x204>
									if (Value == 1) {
    1416:	41 30       	cpi	r20, 0x01	; 1
    1418:	89 f4       	brne	.+34     	; 0x143c <Isb_App_Exec+0x1c2>
										if (Isb_App_DigOut[AppIndex].TimeOnCount != 0) {
    141a:	8a 85       	ldd	r24, Y+10	; 0x0a
    141c:	9b 85       	ldd	r25, Y+11	; 0x0b
    141e:	ac 85       	ldd	r26, Y+12	; 0x0c
    1420:	bd 85       	ldd	r27, Y+13	; 0x0d
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	a1 05       	cpc	r26, r1
    1426:	b1 05       	cpc	r27, r1
    1428:	51 f1       	breq	.+84     	; 0x147e <Isb_App_Exec+0x204>
											Isb_App_DigOut[AppIndex].TimeOnCount--;
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	a1 09       	sbc	r26, r1
    142e:	b1 09       	sbc	r27, r1
    1430:	8a 87       	std	Y+10, r24	; 0x0a
    1432:	9b 87       	std	Y+11, r25	; 0x0b
    1434:	ac 87       	std	Y+12, r26	; 0x0c
    1436:	bd 87       	std	Y+13, r27	; 0x0d
    1438:	40 e0       	ldi	r20, 0x00	; 0
    143a:	21 c0       	rjmp	.+66     	; 0x147e <Isb_App_Exec+0x204>
											Value = 0;
										}
									}
									else {
										Isb_App_DigOut[AppIndex].TimeOnCount = (Isb_App_DigOut[AppIndex].Cfg2 + Isb_App_DigOut[AppIndex].Cfg3 * 60 + Isb_App_DigOut[AppIndex].Cfg4 * 60 * 60) * 1000;
    143c:	8c 81       	ldd	r24, Y+4	; 0x04
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	86 9d       	mul	r24, r6
    1442:	90 01       	movw	r18, r0
    1444:	87 9d       	mul	r24, r7
    1446:	30 0d       	add	r19, r0
    1448:	96 9d       	mul	r25, r6
    144a:	30 0d       	add	r19, r0
    144c:	11 24       	eor	r1, r1
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	83 9d       	mul	r24, r3
    1452:	c0 01       	movw	r24, r0
    1454:	11 24       	eor	r1, r1
    1456:	28 0f       	add	r18, r24
    1458:	39 1f       	adc	r19, r25
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 0f       	add	r18, r24
    145e:	31 1d       	adc	r19, r1
    1460:	28 9d       	mul	r18, r8
    1462:	c0 01       	movw	r24, r0
    1464:	29 9d       	mul	r18, r9
    1466:	90 0d       	add	r25, r0
    1468:	38 9d       	mul	r19, r8
    146a:	90 0d       	add	r25, r0
    146c:	11 24       	eor	r1, r1
    146e:	aa 27       	eor	r26, r26
    1470:	97 fd       	sbrc	r25, 7
    1472:	a0 95       	com	r26
    1474:	ba 2f       	mov	r27, r26
    1476:	8a 87       	std	Y+10, r24	; 0x0a
    1478:	9b 87       	std	Y+11, r25	; 0x0b
    147a:	ac 87       	std	Y+12, r26	; 0x0c
    147c:	bd 87       	std	Y+13, r27	; 0x0d
									}
								}
								if (bit_is_set(Isb_App_DigOut[AppIndex].Cfg1, ISB_APP_DIGOUT_CFG1_TIME_POWERDOWNDELAY_ENABLED)) {
    147e:	80 81       	ld	r24, Z
    1480:	83 ff       	sbrs	r24, 3
    1482:	34 c0       	rjmp	.+104    	; 0x14ec <Isb_App_Exec+0x272>
									if (Value == 0) {
    1484:	44 23       	and	r20, r20
    1486:	89 f4       	brne	.+34     	; 0x14aa <Isb_App_Exec+0x230>
										if (Isb_App_DigOut[AppIndex].TimeOffCount != 0) {
    1488:	8e 85       	ldd	r24, Y+14	; 0x0e
    148a:	9f 85       	ldd	r25, Y+15	; 0x0f
    148c:	a8 89       	ldd	r26, Y+16	; 0x10
    148e:	b9 89       	ldd	r27, Y+17	; 0x11
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	a1 05       	cpc	r26, r1
    1494:	b1 05       	cpc	r27, r1
    1496:	51 f1       	breq	.+84     	; 0x14ec <Isb_App_Exec+0x272>
											Isb_App_DigOut[AppIndex].TimeOffCount--;
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	a1 09       	sbc	r26, r1
    149c:	b1 09       	sbc	r27, r1
    149e:	8e 87       	std	Y+14, r24	; 0x0e
    14a0:	9f 87       	std	Y+15, r25	; 0x0f
    14a2:	a8 8b       	std	Y+16, r26	; 0x10
    14a4:	b9 8b       	std	Y+17, r27	; 0x11
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	21 c0       	rjmp	.+66     	; 0x14ec <Isb_App_Exec+0x272>
											Value = 1;
										}
									}
									else {
										Isb_App_DigOut[AppIndex].TimeOffCount = (Isb_App_DigOut[AppIndex].Cfg5 + Isb_App_DigOut[AppIndex].Cfg6 * 60 + Isb_App_DigOut[AppIndex].Cfg7 * 60 * 60) * 1000;
    14aa:	8f 81       	ldd	r24, Y+7	; 0x07
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	86 9d       	mul	r24, r6
    14b0:	90 01       	movw	r18, r0
    14b2:	87 9d       	mul	r24, r7
    14b4:	30 0d       	add	r19, r0
    14b6:	96 9d       	mul	r25, r6
    14b8:	30 0d       	add	r19, r0
    14ba:	11 24       	eor	r1, r1
    14bc:	8e 81       	ldd	r24, Y+6	; 0x06
    14be:	83 9d       	mul	r24, r3
    14c0:	c0 01       	movw	r24, r0
    14c2:	11 24       	eor	r1, r1
    14c4:	28 0f       	add	r18, r24
    14c6:	39 1f       	adc	r19, r25
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	28 0f       	add	r18, r24
    14cc:	31 1d       	adc	r19, r1
    14ce:	28 9d       	mul	r18, r8
    14d0:	c0 01       	movw	r24, r0
    14d2:	29 9d       	mul	r18, r9
    14d4:	90 0d       	add	r25, r0
    14d6:	38 9d       	mul	r19, r8
    14d8:	90 0d       	add	r25, r0
    14da:	11 24       	eor	r1, r1
    14dc:	aa 27       	eor	r26, r26
    14de:	97 fd       	sbrc	r25, 7
    14e0:	a0 95       	com	r26
    14e2:	ba 2f       	mov	r27, r26
    14e4:	8e 87       	std	Y+14, r24	; 0x0e
    14e6:	9f 87       	std	Y+15, r25	; 0x0f
    14e8:	a8 8b       	std	Y+16, r26	; 0x10
    14ea:	b9 8b       	std	Y+17, r27	; 0x11
									Isb_App_DigOut[AppIndex].TimeOffCount = (Isb_App_DigOut[AppIndex].Cfg5 + Isb_App_DigOut[AppIndex].Cfg6 * 60 + Isb_App_DigOut[AppIndex].Cfg7 * 60 * 60) * 1000;
								}
							}
*/
						}
						if (Isb_App_DigOut[AppIndex].TimeValue != Value) {
    14ec:	8c 89       	ldd	r24, Y+20	; 0x14
    14ee:	84 17       	cp	r24, r20
    14f0:	11 f0       	breq	.+4      	; 0x14f6 <Isb_App_Exec+0x27c>
							Isb_App_DigOut[AppIndex].TimeValue = Value;
    14f2:	4c 8b       	std	Y+20, r20	; 0x14
							Isb_App_DigOut[AppIndex].TimeIsChanged = TRUE;
    14f4:	dd 8a       	std	Y+21, r13	; 0x15
//									}
//								}
//							}
//						}
//						else {
							if (Isb_App_DigOut[AppIndex].TimeIsChanged == TRUE) {
    14f6:	9d 89       	ldd	r25, Y+21	; 0x15
    14f8:	91 30       	cpi	r25, 0x01	; 1
    14fa:	19 f4       	brne	.+6      	; 0x1502 <Isb_App_Exec+0x288>
								Isb_App_DigOut[AppIndex].SpecialValue = Isb_App_DigOut[AppIndex].TimeValue;
    14fc:	8c 89       	ldd	r24, Y+20	; 0x14
    14fe:	8e 8b       	std	Y+22, r24	; 0x16
								Isb_App_DigOut[AppIndex].SpecialIsChanged = TRUE;
    1500:	9f 8b       	std	Y+23, r25	; 0x17
//								}
//
//							}
//						}
//						else {
							if (Isb_App_DigOut[AppIndex].SpecialIsChanged == TRUE) {
    1502:	9f 89       	ldd	r25, Y+23	; 0x17
    1504:	91 30       	cpi	r25, 0x01	; 1
    1506:	19 f4       	brne	.+6      	; 0x150e <Isb_App_Exec+0x294>
								Isb_App_DigOut[AppIndex].Value = Isb_App_DigOut[AppIndex].SpecialValue;
    1508:	8e 89       	ldd	r24, Y+22	; 0x16
    150a:	88 8f       	std	Y+24, r24	; 0x18
								Isb_App_DigOut[AppIndex].IsChanged = TRUE;
    150c:	99 8f       	std	Y+25, r25	; 0x19
							}						
//						}
						// Ausgang
// -> TODO:
						if (Isb_App_DigOut[AppIndex].IsChanged == TRUE) {
    150e:	89 8d       	ldd	r24, Y+25	; 0x19
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	09 f0       	breq	.+2      	; 0x1516 <Isb_App_Exec+0x29c>
    1514:	43 c0       	rjmp	.+134    	; 0x159c <Isb_App_Exec+0x322>
							uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigOut_Pin0_Array[AppIndex]);
    1516:	f8 01       	movw	r30, r16
    1518:	eb 55       	subi	r30, 0x5B	; 91
    151a:	fe 4f       	sbci	r31, 0xFE	; 254
    151c:	64 91       	lpm	r22, Z+
//							uint8_t Pin1 = pgm_read_byte(&pgmIsb_App_DigOut_Pin1_Array[AppIndex]);
							switch (Isb_App_DigOut[AppIndex].Cfg0 & ISB_APP_DIGOUT_CFG0_OPERATION_MASK) {
    151e:	f7 01       	movw	r30, r14
    1520:	80 81       	ld	r24, Z
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	83 70       	andi	r24, 0x03	; 3
    1526:	90 70       	andi	r25, 0x00	; 0
    1528:	89 2b       	or	r24, r25
    152a:	c1 f5       	brne	.+112    	; 0x159c <Isb_App_Exec+0x322>
								case ISB_APP_DIGOUT_CFG0_OPERATION_STD:
									if (bit_is_set(Isb_App_DigOut[AppIndex].Value, 0)) {
    152c:	0a 9d       	mul	r16, r10
    152e:	a0 01       	movw	r20, r0
    1530:	0b 9d       	mul	r16, r11
    1532:	50 0d       	add	r21, r0
    1534:	1a 9d       	mul	r17, r10
    1536:	50 0d       	add	r21, r0
    1538:	11 24       	eor	r1, r1
    153a:	fa 01       	movw	r30, r20
    153c:	e4 5b       	subi	r30, 0xB4	; 180
    153e:	fc 4f       	sbci	r31, 0xFC	; 252
    1540:	80 81       	ld	r24, Z
    1542:	26 2f       	mov	r18, r22
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	80 ff       	sbrs	r24, 0
    1548:	11 c0       	rjmp	.+34     	; 0x156c <Isb_App_Exec+0x2f2>
										uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
    154a:	28 73       	andi	r18, 0x38	; 56
    154c:	30 70       	andi	r19, 0x00	; 0
    154e:	e3 e0       	ldi	r30, 0x03	; 3
    1550:	35 95       	asr	r19
    1552:	27 95       	ror	r18
    1554:	ea 95       	dec	r30
    1556:	e1 f7       	brne	.-8      	; 0x1550 <Isb_App_Exec+0x2d6>
										uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
										if (Port != 0) {
    1558:	22 23       	and	r18, r18
    155a:	f9 f0       	breq	.+62     	; 0x159a <Isb_App_Exec+0x320>
//							uint8_t Pin1 = pgm_read_byte(&pgmIsb_App_DigOut_Pin1_Array[AppIndex]);
							switch (Isb_App_DigOut[AppIndex].Cfg0 & ISB_APP_DIGOUT_CFG0_OPERATION_MASK) {
								case ISB_APP_DIGOUT_CFG0_OPERATION_STD:
									if (bit_is_set(Isb_App_DigOut[AppIndex].Value, 0)) {
										uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
										uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
    155c:	67 70       	andi	r22, 0x07	; 7
										if (Port != 0) {
											if (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN0_INVERTED)) {
    155e:	fa 01       	movw	r30, r20
    1560:	ec 5c       	subi	r30, 0xCC	; 204
    1562:	fc 4f       	sbci	r31, 0xFC	; 252
    1564:	80 81       	ld	r24, Z
    1566:	82 fd       	sbrc	r24, 2
    1568:	11 c0       	rjmp	.+34     	; 0x158c <Isb_App_Exec+0x312>
    156a:	13 c0       	rjmp	.+38     	; 0x1592 <Isb_App_Exec+0x318>
												Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_HIGH);
											}
										}
									}
									else {
										uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
    156c:	28 73       	andi	r18, 0x38	; 56
    156e:	30 70       	andi	r19, 0x00	; 0
    1570:	73 e0       	ldi	r23, 0x03	; 3
    1572:	35 95       	asr	r19
    1574:	27 95       	ror	r18
    1576:	7a 95       	dec	r23
    1578:	e1 f7       	brne	.-8      	; 0x1572 <Isb_App_Exec+0x2f8>
										uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
										if (Port != 0) {
    157a:	22 23       	and	r18, r18
    157c:	71 f0       	breq	.+28     	; 0x159a <Isb_App_Exec+0x320>
											}
										}
									}
									else {
										uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
										uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
    157e:	67 70       	andi	r22, 0x07	; 7
										if (Port != 0) {
											if (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN0_INVERTED)) {
    1580:	fa 01       	movw	r30, r20
    1582:	ec 5c       	subi	r30, 0xCC	; 204
    1584:	fc 4f       	sbci	r31, 0xFC	; 252
    1586:	80 81       	ld	r24, Z
    1588:	82 fd       	sbrc	r24, 2
    158a:	03 c0       	rjmp	.+6      	; 0x1592 <Isb_App_Exec+0x318>
												Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_HIGH);
    158c:	82 2f       	mov	r24, r18
    158e:	43 e0       	ldi	r20, 0x03	; 3
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <Isb_App_Exec+0x31c>
											}
											else {
												Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_LOW);
    1592:	82 2f       	mov	r24, r18
    1594:	41 e0       	ldi	r20, 0x01	; 1
    1596:	0e 94 66 01 	call	0x2cc	; 0x2cc <Lib_Pin_Set>
											}
										}
									}
									Isb_App_DigOut[AppIndex].IsChanged = FALSE;
    159a:	19 8e       	std	Y+25, r1	; 0x19



						// Rückmeldungsfunktion
						Value = 0;
						if ((Isb_App_DigOut[AppIndex].Value == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
    159c:	98 8d       	ldd	r25, Y+24	; 0x18
    159e:	0a 9d       	mul	r16, r10
    15a0:	f0 01       	movw	r30, r0
    15a2:	0b 9d       	mul	r16, r11
    15a4:	f0 0d       	add	r31, r0
    15a6:	1a 9d       	mul	r17, r10
    15a8:	f0 0d       	add	r31, r0
    15aa:	11 24       	eor	r1, r1
    15ac:	e3 5c       	subi	r30, 0xC3	; 195
    15ae:	fc 4f       	sbci	r31, 0xFC	; 252
    15b0:	20 81       	ld	r18, Z
							Value = 1;
						}
						if ((Isb_App_DigOut[AppIndex].Value == 0) & (bit_is_set(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
    15b2:	e0 81       	ld	r30, Z
    15b4:	99 23       	and	r25, r25
    15b6:	21 f4       	brne	.+8      	; 0x15c0 <Isb_App_Exec+0x346>
    15b8:	e0 ff       	sbrs	r30, 0
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <Isb_App_Exec+0x346>
    15bc:	91 e0       	ldi	r25, 0x01	; 1
    15be:	07 c0       	rjmp	.+14     	; 0x15ce <Isb_App_Exec+0x354>



						// Rückmeldungsfunktion
						Value = 0;
						if ((Isb_App_DigOut[AppIndex].Value == 1) & (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	91 30       	cpi	r25, 0x01	; 1
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <Isb_App_Exec+0x34e>
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	92 2f       	mov	r25, r18
    15ca:	94 25       	eor	r25, r4
    15cc:	98 23       	and	r25, r24
							Value = 1;
						}
						if ((Isb_App_DigOut[AppIndex].Value == 0) & (bit_is_set(Isb_App_DigOut[AppIndex].Cfg9, ISB_APP_DIGOUT_CFG9_RESULT_INVERTED))) {
							Value = 1;
						}
						if (Isb_Obj_1Bit[Obj_1Bit_3].Value != Value) {
    15ce:	ec 2d       	mov	r30, r12
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	df 01       	movw	r26, r30
    15d4:	aa 0f       	add	r26, r26
    15d6:	bb 1f       	adc	r27, r27
    15d8:	aa 0f       	add	r26, r26
    15da:	bb 1f       	adc	r27, r27
    15dc:	aa 5b       	subi	r26, 0xBA	; 186
    15de:	bd 4f       	sbci	r27, 0xFD	; 253
    15e0:	8c 91       	ld	r24, X
    15e2:	89 17       	cp	r24, r25
    15e4:	41 f0       	breq	.+16     	; 0x15f6 <Isb_App_Exec+0x37c>
							Isb_Obj_1Bit[Obj_1Bit_3].Value = Value;
    15e6:	9c 93       	st	X, r25
							Isb_Obj_1Bit[Obj_1Bit_3].IsChanged = TRUE;
    15e8:	ee 0f       	add	r30, r30
    15ea:	ff 1f       	adc	r31, r31
    15ec:	ee 0f       	add	r30, r30
    15ee:	ff 1f       	adc	r31, r31
    15f0:	ec 5b       	subi	r30, 0xBC	; 188
    15f2:	fd 4f       	sbci	r31, 0xFD	; 253
    15f4:	d3 82       	std	Z+3, r13	; 0x03
    15f6:	0f 5f       	subi	r16, 0xFF	; 255
    15f8:	1f 4f       	sbci	r17, 0xFF	; 255
    15fa:	6a 96       	adiw	r28, 0x1a	; 26
    15fc:	8a e1       	ldi	r24, 0x1A	; 26
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	e8 0e       	add	r14, r24
    1602:	f9 1e       	adc	r15, r25

	void Isb_App_Exec(void) {

		#if defined(ISB_APP_DIGOUT_MAX)
			if (bit_is_set(Isb_App_DigOut_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGOUT_MAX; AppIndex++) {
    1604:	09 30       	cpi	r16, 0x09	; 9
    1606:	11 05       	cpc	r17, r1
    1608:	09 f0       	breq	.+2      	; 0x160c <Isb_App_Exec+0x392>
    160a:	63 ce       	rjmp	.-826    	; 0x12d2 <Isb_App_Exec+0x58>
							Isb_Obj_1Bit[Obj_1Bit_3].Value = Value;
							Isb_Obj_1Bit[Obj_1Bit_3].IsChanged = TRUE;
						}
					}
				}
				Isb_App_DigOut_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    160c:	80 91 3a 01 	lds	r24, 0x013A
    1610:	8e 7f       	andi	r24, 0xFE	; 254
    1612:	80 93 3a 01 	sts	0x013A, r24
			}
		#endif /* ISB_APP_DIGOUT_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			if (bit_is_set(Isb_App_DigIn_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
    1616:	80 91 3f 01 	lds	r24, 0x013F
    161a:	80 ff       	sbrs	r24, 0
    161c:	45 c3       	rjmp	.+1674   	; 0x1ca8 <Isb_App_Exec+0xa2e>
    161e:	cb e4       	ldi	r28, 0x4B	; 75
    1620:	d1 e0       	ldi	r29, 0x01	; 1
    1622:	00 e0       	ldi	r16, 0x00	; 0
    1624:	10 e0       	ldi	r17, 0x00	; 0
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1626:	71 e0       	ldi	r23, 0x01	; 1
								if (Isb_App_DigIn[AppIndex].CountHigh == 40) {
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHLONG);
								}
								// Event "High Repeat"
								if (Isb_App_DigIn[AppIndex].CountHigh == 100) {
									Isb_App_DigIn[AppIndex].CountHigh = 90;
    1628:	ba e5       	ldi	r27, 0x5A	; 90
    162a:	eb 2e       	mov	r14, r27
		#endif /* ISB_APP_DIGOUT_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			if (bit_is_set(Isb_App_DigIn_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++) {
					uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigIn_Ch_Array[AppIndex]);
    162c:	f8 01       	movw	r30, r16
    162e:	e2 55       	subi	r30, 0x52	; 82
    1630:	fe 4f       	sbci	r31, 0xFE	; 254
    1632:	e4 91       	lpm	r30, Z+
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	ee 0f       	add	r30, r30
    1638:	ff 1f       	adc	r31, r31
    163a:	e2 5e       	subi	r30, 0xE2	; 226
    163c:	fb 4f       	sbci	r31, 0xFB	; 251
    163e:	80 81       	ld	r24, Z
    1640:	80 ff       	sbrs	r24, 0
    1642:	26 c3       	rjmp	.+1612   	; 0x1c90 <Isb_App_Exec+0xa16>
						uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigIn_Pin0_Array[AppIndex]);
    1644:	f8 01       	movw	r30, r16
    1646:	ea 54       	subi	r30, 0x4A	; 74
    1648:	fe 4f       	sbci	r31, 0xFE	; 254
    164a:	24 91       	lpm	r18, Z+
//						uint8_t Obj_1Bit_0 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_1Bit_0_Array[AppIndex]);
						uint8_t Obj_1Bit_1 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_1Bit_1_Array[AppIndex]);
    164c:	f8 01       	movw	r30, r16
    164e:	e2 54       	subi	r30, 0x42	; 66
    1650:	fe 4f       	sbci	r31, 0xFE	; 254
    1652:	64 91       	lpm	r22, Z+
						uint8_t Obj_1Bit_2 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_1Bit_2_Array[AppIndex]);
    1654:	f8 01       	movw	r30, r16
    1656:	ea 53       	subi	r30, 0x3A	; 58
    1658:	fe 4f       	sbci	r31, 0xFE	; 254
    165a:	f4 90       	lpm	r15, Z+
//						if (Isb_Obj_1Bit[Obj_1Bit_0].Value == 0) {



// Pin einlesen
							switch (Isb_App_DigIn[AppIndex].Cfg0 & ISB_APP_DIGIN_CFG0_MODE_MASK) {
    165c:	88 81       	ld	r24, Y
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	83 70       	andi	r24, 0x03	; 3
    1662:	90 70       	andi	r25, 0x00	; 0
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	91 05       	cpc	r25, r1
    1668:	09 f4       	brne	.+2      	; 0x166c <Isb_App_Exec+0x3f2>
    166a:	44 c0       	rjmp	.+136    	; 0x16f4 <Isb_App_Exec+0x47a>
    166c:	82 30       	cpi	r24, 0x02	; 2
    166e:	91 05       	cpc	r25, r1
    1670:	09 f4       	brne	.+2      	; 0x1674 <Isb_App_Exec+0x3fa>
    1672:	40 c0       	rjmp	.+128    	; 0x16f4 <Isb_App_Exec+0x47a>
    1674:	89 2b       	or	r24, r25
    1676:	09 f0       	breq	.+2      	; 0x167a <Isb_App_Exec+0x400>
    1678:	3e c0       	rjmp	.+124    	; 0x16f6 <Isb_App_Exec+0x47c>
								case ISB_APP_DIGIN_CFG0_MODE_STD:
									;
									uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
    167a:	82 2f       	mov	r24, r18
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	88 73       	andi	r24, 0x38	; 56
    1680:	90 70       	andi	r25, 0x00	; 0
    1682:	e3 e0       	ldi	r30, 0x03	; 3
    1684:	95 95       	asr	r25
    1686:	87 95       	ror	r24
    1688:	ea 95       	dec	r30
    168a:	e1 f7       	brne	.-8      	; 0x1684 <Isb_App_Exec+0x40a>
    168c:	98 2f       	mov	r25, r24
									uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
									if (Port != 0) {
    168e:	88 23       	and	r24, r24
    1690:	91 f1       	breq	.+100    	; 0x16f6 <Isb_App_Exec+0x47c>
// Pin einlesen
							switch (Isb_App_DigIn[AppIndex].Cfg0 & ISB_APP_DIGIN_CFG0_MODE_MASK) {
								case ISB_APP_DIGIN_CFG0_MODE_STD:
									;
									uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
									uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
    1692:	27 70       	andi	r18, 0x07	; 7
									if (Port != 0) {
										if (bit_is_clear(Isb_App_DigIn[AppIndex].Cfg0, ISB_APP_DIGIN_CFG0_PIN0_INVERTED)) {
    1694:	f8 01       	movw	r30, r16
    1696:	53 e0       	ldi	r21, 0x03	; 3
    1698:	ee 0f       	add	r30, r30
    169a:	ff 1f       	adc	r31, r31
    169c:	5a 95       	dec	r21
    169e:	e1 f7       	brne	.-8      	; 0x1698 <Isb_App_Exec+0x41e>
    16a0:	e5 5b       	subi	r30, 0xB5	; 181
    16a2:	fe 4f       	sbci	r31, 0xFE	; 254
    16a4:	80 81       	ld	r24, Z
    16a6:	e9 2f       	mov	r30, r25
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	82 fd       	sbrc	r24, 2
    16ac:	11 c0       	rjmp	.+34     	; 0x16d0 <Isb_App_Exec+0x456>
	#endif



	uint8_t Lib_Pin_Get(const uint8_t aPort, const uint8_t aPin) {
		return (*(PINx[aPort]) >> aPin) & 1;
    16ae:	ee 0f       	add	r30, r30
    16b0:	ff 1f       	adc	r31, r31
    16b2:	ec 5d       	subi	r30, 0xDC	; 220
    16b4:	fe 4f       	sbci	r31, 0xFE	; 254
    16b6:	01 90       	ld	r0, Z+
    16b8:	f0 81       	ld	r31, Z
    16ba:	e0 2d       	mov	r30, r0
    16bc:	80 81       	ld	r24, Z
											if (Lib_Pin_Get(Port, Pin) != 0) {
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <Isb_App_Exec+0x44c>
    16c2:	95 95       	asr	r25
    16c4:	87 95       	ror	r24
    16c6:	2a 95       	dec	r18
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <Isb_App_Exec+0x448>
    16ca:	80 ff       	sbrs	r24, 0
    16cc:	13 c0       	rjmp	.+38     	; 0x16f4 <Isb_App_Exec+0x47a>
    16ce:	10 c0       	rjmp	.+32     	; 0x16f0 <Isb_App_Exec+0x476>
    16d0:	ee 0f       	add	r30, r30
    16d2:	ff 1f       	adc	r31, r31
    16d4:	ec 5d       	subi	r30, 0xDC	; 220
    16d6:	fe 4f       	sbci	r31, 0xFE	; 254
    16d8:	01 90       	ld	r0, Z+
    16da:	f0 81       	ld	r31, Z
    16dc:	e0 2d       	mov	r30, r0
    16de:	80 81       	ld	r24, Z
											else {
												Isb_App_DigIn[AppIndex].Value = 0;
											}
										}
										else {
											if (Lib_Pin_Get(Port, Pin) != 0) {
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <Isb_App_Exec+0x46e>
    16e4:	95 95       	asr	r25
    16e6:	87 95       	ror	r24
    16e8:	2a 95       	dec	r18
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <Isb_App_Exec+0x46a>
    16ec:	80 fd       	sbrc	r24, 0
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <Isb_App_Exec+0x47a>
												Isb_App_DigIn[AppIndex].Value = 0;
											}
											else {
												Isb_App_DigIn[AppIndex].Value = 1;
    16f0:	7c 83       	std	Y+4, r23	; 0x04
    16f2:	01 c0       	rjmp	.+2      	; 0x16f6 <Isb_App_Exec+0x47c>
									Isb_App_DigIn[AppIndex].Value = 0;
// <- TODO:
									break;
								case ISB_APP_DIGIN_CFG0_MODE_SLAVEUSART1:
// -> TODO:
									Isb_App_DigIn[AppIndex].Value = 0;
    16f4:	1c 82       	std	Y+4, r1	; 0x04
							}



// Pin auswerten
							if (Isb_App_DigIn[AppIndex].Value != 0) {
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	88 23       	and	r24, r24
    16fa:	b9 f0       	breq	.+46     	; 0x172a <Isb_App_Exec+0x4b0>
								// Global
								Isb_App_DigIn[AppIndex].CountHigh++;
    16fc:	8f 81       	ldd	r24, Y+7	; 0x07
    16fe:	8f 5f       	subi	r24, 0xFF	; 255
    1700:	8f 83       	std	Y+7, r24	; 0x07
								// Event "High" > 40ms
								if (Isb_App_DigIn[AppIndex].CountHigh == 4) {
    1702:	84 30       	cpi	r24, 0x04	; 4
    1704:	19 f4       	brne	.+6      	; 0x170c <Isb_App_Exec+0x492>
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGH);
    1706:	8d 81       	ldd	r24, Y+5	; 0x05
    1708:	80 61       	ori	r24, 0x10	; 16
    170a:	8d 83       	std	Y+5, r24	; 0x05
								}
								// Event "High Long" > 400ms
								if (Isb_App_DigIn[AppIndex].CountHigh == 40) {
    170c:	8f 81       	ldd	r24, Y+7	; 0x07
    170e:	88 32       	cpi	r24, 0x28	; 40
    1710:	19 f4       	brne	.+6      	; 0x1718 <Isb_App_Exec+0x49e>
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHLONG);
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	80 64       	ori	r24, 0x40	; 64
    1716:	8d 83       	std	Y+5, r24	; 0x05
								}
								// Event "High Repeat"
								if (Isb_App_DigIn[AppIndex].CountHigh == 100) {
    1718:	8f 81       	ldd	r24, Y+7	; 0x07
    171a:	84 36       	cpi	r24, 0x64	; 100
    171c:	21 f4       	brne	.+8      	; 0x1726 <Isb_App_Exec+0x4ac>
									Isb_App_DigIn[AppIndex].CountHigh = 90;
    171e:	ef 82       	std	Y+7, r14	; 0x07
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHREPEAT);
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
    1722:	80 68       	ori	r24, 0x80	; 128
    1724:	8d 83       	std	Y+5, r24	; 0x05
//									if (Isb_App_DigIn[AppIndex].CountLow < 40) {
//										Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOWSHORT);
//									}
//								}
								// Global
								Isb_App_DigIn[AppIndex].CountLow = 0;
    1726:	1e 82       	std	Y+6, r1	; 0x06
    1728:	11 c0       	rjmp	.+34     	; 0x174c <Isb_App_Exec+0x4d2>
							}
							else {
								// Global
								Isb_App_DigIn[AppIndex].CountLow++;
    172a:	8e 81       	ldd	r24, Y+6	; 0x06
    172c:	8f 5f       	subi	r24, 0xFF	; 255
    172e:	8e 83       	std	Y+6, r24	; 0x06
								// Event "Low" > 40ms
								if (Isb_App_DigIn[AppIndex].CountLow == 4) {
    1730:	84 30       	cpi	r24, 0x04	; 4
    1732:	19 f4       	brne	.+6      	; 0x173a <Isb_App_Exec+0x4c0>
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOW);
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	81 60       	ori	r24, 0x01	; 1
    1738:	8d 83       	std	Y+5, r24	; 0x05
//								if (Isb_App_DigIn[AppIndex].CountLow == 100) {
//									Isb_App_DigIn[AppIndex].CountLow = 90;
//									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOWREPEAT);
//								}
								// Event "High Short" = 40-400ms
								if (Isb_App_DigIn[AppIndex].CountHigh != 0) {
    173a:	8f 81       	ldd	r24, Y+7	; 0x07
    173c:	88 23       	and	r24, r24
    173e:	29 f0       	breq	.+10     	; 0x174a <Isb_App_Exec+0x4d0>
									if (Isb_App_DigIn[AppIndex].CountHigh < 40) {
    1740:	88 32       	cpi	r24, 0x28	; 40
    1742:	18 f4       	brcc	.+6      	; 0x174a <Isb_App_Exec+0x4d0>
										Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHSHORT);
    1744:	8d 81       	ldd	r24, Y+5	; 0x05
    1746:	80 62       	ori	r24, 0x20	; 32
    1748:	8d 83       	std	Y+5, r24	; 0x05
									}
								}
								// Global
								Isb_App_DigIn[AppIndex].CountHigh = 0;
    174a:	1f 82       	std	Y+7, r1	; 0x07
							}



// Event auswerten
							switch (Isb_App_DigIn[AppIndex].Cfg1 & ISB_APP_DIGIN_CFG1_MODE_MASK) {
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	c9 01       	movw	r24, r18
    1754:	87 70       	andi	r24, 0x07	; 7
    1756:	90 70       	andi	r25, 0x00	; 0
    1758:	89 2b       	or	r24, r25
    175a:	09 f0       	breq	.+2      	; 0x175e <Isb_App_Exec+0x4e4>
    175c:	99 c2       	rjmp	.+1330   	; 0x1c90 <Isb_App_Exec+0xa16>
								case ISB_APP_DIGIN_CFG1_MODE_SWITCH:
									// Betriebsart = Schaltsensor/Störmeldeeingang
									switch (Isb_App_DigIn[AppIndex].Cfg1 & ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_MASK) {
    175e:	c9 01       	movw	r24, r18
    1760:	88 73       	andi	r24, 0x38	; 56
    1762:	90 70       	andi	r25, 0x00	; 0
    1764:	88 30       	cpi	r24, 0x08	; 8
    1766:	91 05       	cpc	r25, r1
    1768:	09 f4       	brne	.+2      	; 0x176c <Isb_App_Exec+0x4f2>
    176a:	aa c0       	rjmp	.+340    	; 0x18c0 <Isb_App_Exec+0x646>
    176c:	89 30       	cpi	r24, 0x09	; 9
    176e:	91 05       	cpc	r25, r1
    1770:	1c f4       	brge	.+6      	; 0x1778 <Isb_App_Exec+0x4fe>
    1772:	89 2b       	or	r24, r25
    1774:	49 f0       	breq	.+18     	; 0x1788 <Isb_App_Exec+0x50e>
    1776:	8c c2       	rjmp	.+1304   	; 0x1c90 <Isb_App_Exec+0xa16>
    1778:	80 31       	cpi	r24, 0x10	; 16
    177a:	91 05       	cpc	r25, r1
    177c:	09 f4       	brne	.+2      	; 0x1780 <Isb_App_Exec+0x506>
    177e:	3c c1       	rjmp	.+632    	; 0x19f8 <Isb_App_Exec+0x77e>
    1780:	48 97       	sbiw	r24, 0x18	; 24
    1782:	09 f0       	breq	.+2      	; 0x1786 <Isb_App_Exec+0x50c>
    1784:	85 c2       	rjmp	.+1290   	; 0x1c90 <Isb_App_Exec+0xa16>
    1786:	d4 c1       	rjmp	.+936    	; 0x1b30 <Isb_App_Exec+0x8b6>
										case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_0:
											// 1 Schaltobjekt - Ohne Unterscheidung Kurz/Lang - Ohne Repeat 
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGH)) {
    1788:	a8 01       	movw	r20, r16
    178a:	23 e0       	ldi	r18, 0x03	; 3
    178c:	44 0f       	add	r20, r20
    178e:	55 1f       	adc	r21, r21
    1790:	2a 95       	dec	r18
    1792:	e1 f7       	brne	.-8      	; 0x178c <Isb_App_Exec+0x512>
    1794:	40 5b       	subi	r20, 0xB0	; 176
    1796:	5e 4f       	sbci	r21, 0xFE	; 254
    1798:	fa 01       	movw	r30, r20
    179a:	80 81       	ld	r24, Z
    179c:	84 ff       	sbrs	r24, 4
    179e:	46 c0       	rjmp	.+140    	; 0x182c <Isb_App_Exec+0x5b2>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1) {
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	8f 70       	andi	r24, 0x0F	; 15
    17a6:	90 70       	andi	r25, 0x00	; 0
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	91 05       	cpc	r25, r1
    17ac:	71 f4       	brne	.+28     	; 0x17ca <Isb_App_Exec+0x550>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    17ae:	a6 2f       	mov	r26, r22
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	fd 01       	movw	r30, r26
    17b4:	ee 0f       	add	r30, r30
    17b6:	ff 1f       	adc	r31, r31
    17b8:	ee 0f       	add	r30, r30
    17ba:	ff 1f       	adc	r31, r31
    17bc:	ea 5b       	subi	r30, 0xBA	; 186
    17be:	fd 4f       	sbci	r31, 0xFD	; 253
    17c0:	80 81       	ld	r24, Z
    17c2:	88 23       	and	r24, r24
    17c4:	81 f1       	breq	.+96     	; 0x1826 <Isb_App_Exec+0x5ac>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    17c6:	10 82       	st	Z, r1
    17c8:	10 c0       	rjmp	.+32     	; 0x17ea <Isb_App_Exec+0x570>
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2) {
    17ca:	82 30       	cpi	r24, 0x02	; 2
    17cc:	91 05       	cpc	r25, r1
    17ce:	b1 f4       	brne	.+44     	; 0x17fc <Isb_App_Exec+0x582>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    17d0:	a6 2f       	mov	r26, r22
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	fd 01       	movw	r30, r26
    17d6:	ee 0f       	add	r30, r30
    17d8:	ff 1f       	adc	r31, r31
    17da:	ee 0f       	add	r30, r30
    17dc:	ff 1f       	adc	r31, r31
    17de:	ea 5b       	subi	r30, 0xBA	; 186
    17e0:	fd 4f       	sbci	r31, 0xFD	; 253
    17e2:	80 81       	ld	r24, Z
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	f9 f0       	breq	.+62     	; 0x1826 <Isb_App_Exec+0x5ac>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    17e8:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    17ea:	aa 0f       	add	r26, r26
    17ec:	bb 1f       	adc	r27, r27
    17ee:	aa 0f       	add	r26, r26
    17f0:	bb 1f       	adc	r27, r27
    17f2:	ac 5b       	subi	r26, 0xBC	; 188
    17f4:	bd 4f       	sbci	r27, 0xFD	; 253
    17f6:	13 96       	adiw	r26, 0x03	; 3
    17f8:	7c 93       	st	X, r23
    17fa:	15 c0       	rjmp	.+42     	; 0x1826 <Isb_App_Exec+0x5ac>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3) {
    17fc:	03 97       	sbiw	r24, 0x03	; 3
    17fe:	99 f4       	brne	.+38     	; 0x1826 <Isb_App_Exec+0x5ac>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    1800:	86 2f       	mov	r24, r22
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	dc 01       	movw	r26, r24
    180e:	aa 5b       	subi	r26, 0xBA	; 186
    1810:	bd 4f       	sbci	r27, 0xFD	; 253
    1812:	2c 91       	ld	r18, X
    1814:	fc 01       	movw	r30, r24
    1816:	22 23       	and	r18, r18
    1818:	11 f4       	brne	.+4      	; 0x181e <Isb_App_Exec+0x5a4>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    181a:	7c 93       	st	X, r23
    181c:	01 c0       	rjmp	.+2      	; 0x1820 <Isb_App_Exec+0x5a6>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    181e:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1820:	ec 5b       	subi	r30, 0xBC	; 188
    1822:	fd 4f       	sbci	r31, 0xFD	; 253
    1824:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGH);
    1826:	8d 81       	ldd	r24, Y+5	; 0x05
    1828:	8f 7e       	andi	r24, 0xEF	; 239
    182a:	8d 83       	std	Y+5, r24	; 0x05
											}
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_LOW)) {
    182c:	fa 01       	movw	r30, r20
    182e:	80 81       	ld	r24, Z
    1830:	80 ff       	sbrs	r24, 0
    1832:	2e c2       	rjmp	.+1116   	; 0x1c90 <Isb_App_Exec+0xa16>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1) {
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	80 7f       	andi	r24, 0xF0	; 240
    183a:	90 70       	andi	r25, 0x00	; 0
    183c:	80 31       	cpi	r24, 0x10	; 16
    183e:	91 05       	cpc	r25, r1
    1840:	71 f4       	brne	.+28     	; 0x185e <Isb_App_Exec+0x5e4>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    1842:	a6 2f       	mov	r26, r22
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	fd 01       	movw	r30, r26
    1848:	ee 0f       	add	r30, r30
    184a:	ff 1f       	adc	r31, r31
    184c:	ee 0f       	add	r30, r30
    184e:	ff 1f       	adc	r31, r31
    1850:	ea 5b       	subi	r30, 0xBA	; 186
    1852:	fd 4f       	sbci	r31, 0xFD	; 253
    1854:	80 81       	ld	r24, Z
    1856:	88 23       	and	r24, r24
    1858:	81 f1       	breq	.+96     	; 0x18ba <Isb_App_Exec+0x640>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    185a:	10 82       	st	Z, r1
    185c:	10 c0       	rjmp	.+32     	; 0x187e <Isb_App_Exec+0x604>
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2) {
    185e:	80 32       	cpi	r24, 0x20	; 32
    1860:	91 05       	cpc	r25, r1
    1862:	b1 f4       	brne	.+44     	; 0x1890 <Isb_App_Exec+0x616>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    1864:	a6 2f       	mov	r26, r22
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	fd 01       	movw	r30, r26
    186a:	ee 0f       	add	r30, r30
    186c:	ff 1f       	adc	r31, r31
    186e:	ee 0f       	add	r30, r30
    1870:	ff 1f       	adc	r31, r31
    1872:	ea 5b       	subi	r30, 0xBA	; 186
    1874:	fd 4f       	sbci	r31, 0xFD	; 253
    1876:	80 81       	ld	r24, Z
    1878:	81 30       	cpi	r24, 0x01	; 1
    187a:	f9 f0       	breq	.+62     	; 0x18ba <Isb_App_Exec+0x640>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    187c:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    187e:	aa 0f       	add	r26, r26
    1880:	bb 1f       	adc	r27, r27
    1882:	aa 0f       	add	r26, r26
    1884:	bb 1f       	adc	r27, r27
    1886:	ac 5b       	subi	r26, 0xBC	; 188
    1888:	bd 4f       	sbci	r27, 0xFD	; 253
    188a:	13 96       	adiw	r26, 0x03	; 3
    188c:	7c 93       	st	X, r23
    188e:	15 c0       	rjmp	.+42     	; 0x18ba <Isb_App_Exec+0x640>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3) {
    1890:	c0 97       	sbiw	r24, 0x30	; 48
    1892:	99 f4       	brne	.+38     	; 0x18ba <Isb_App_Exec+0x640>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    1894:	86 2f       	mov	r24, r22
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	dc 01       	movw	r26, r24
    18a2:	aa 5b       	subi	r26, 0xBA	; 186
    18a4:	bd 4f       	sbci	r27, 0xFD	; 253
    18a6:	2c 91       	ld	r18, X
    18a8:	fc 01       	movw	r30, r24
    18aa:	22 23       	and	r18, r18
    18ac:	11 f4       	brne	.+4      	; 0x18b2 <Isb_App_Exec+0x638>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    18ae:	7c 93       	st	X, r23
    18b0:	01 c0       	rjmp	.+2      	; 0x18b4 <Isb_App_Exec+0x63a>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    18b2:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    18b4:	ec 5b       	subi	r30, 0xBC	; 188
    18b6:	fd 4f       	sbci	r31, 0xFD	; 253
    18b8:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_LOW);
    18ba:	8d 81       	ldd	r24, Y+5	; 0x05
    18bc:	8e 7f       	andi	r24, 0xFE	; 254
    18be:	e7 c1       	rjmp	.+974    	; 0x1c8e <Isb_App_Exec+0xa14>
											}
											break;
										case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_1:
											// 1 Schaltobjekt - Ohne Unterscheidung Kurz/Lang - Mit Repeat 
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGH)) {
    18c0:	a8 01       	movw	r20, r16
    18c2:	23 e0       	ldi	r18, 0x03	; 3
    18c4:	44 0f       	add	r20, r20
    18c6:	55 1f       	adc	r21, r21
    18c8:	2a 95       	dec	r18
    18ca:	e1 f7       	brne	.-8      	; 0x18c4 <Isb_App_Exec+0x64a>
    18cc:	40 5b       	subi	r20, 0xB0	; 176
    18ce:	5e 4f       	sbci	r21, 0xFE	; 254
    18d0:	fa 01       	movw	r30, r20
    18d2:	80 81       	ld	r24, Z
    18d4:	84 ff       	sbrs	r24, 4
    18d6:	46 c0       	rjmp	.+140    	; 0x1964 <Isb_App_Exec+0x6ea>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1) {
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	8f 70       	andi	r24, 0x0F	; 15
    18de:	90 70       	andi	r25, 0x00	; 0
    18e0:	81 30       	cpi	r24, 0x01	; 1
    18e2:	91 05       	cpc	r25, r1
    18e4:	71 f4       	brne	.+28     	; 0x1902 <Isb_App_Exec+0x688>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    18e6:	a6 2f       	mov	r26, r22
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	fd 01       	movw	r30, r26
    18ec:	ee 0f       	add	r30, r30
    18ee:	ff 1f       	adc	r31, r31
    18f0:	ee 0f       	add	r30, r30
    18f2:	ff 1f       	adc	r31, r31
    18f4:	ea 5b       	subi	r30, 0xBA	; 186
    18f6:	fd 4f       	sbci	r31, 0xFD	; 253
    18f8:	80 81       	ld	r24, Z
    18fa:	88 23       	and	r24, r24
    18fc:	81 f1       	breq	.+96     	; 0x195e <Isb_App_Exec+0x6e4>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    18fe:	10 82       	st	Z, r1
    1900:	10 c0       	rjmp	.+32     	; 0x1922 <Isb_App_Exec+0x6a8>
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2) {
    1902:	82 30       	cpi	r24, 0x02	; 2
    1904:	91 05       	cpc	r25, r1
    1906:	b1 f4       	brne	.+44     	; 0x1934 <Isb_App_Exec+0x6ba>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    1908:	a6 2f       	mov	r26, r22
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	fd 01       	movw	r30, r26
    190e:	ee 0f       	add	r30, r30
    1910:	ff 1f       	adc	r31, r31
    1912:	ee 0f       	add	r30, r30
    1914:	ff 1f       	adc	r31, r31
    1916:	ea 5b       	subi	r30, 0xBA	; 186
    1918:	fd 4f       	sbci	r31, 0xFD	; 253
    191a:	80 81       	ld	r24, Z
    191c:	81 30       	cpi	r24, 0x01	; 1
    191e:	f9 f0       	breq	.+62     	; 0x195e <Isb_App_Exec+0x6e4>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1920:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1922:	aa 0f       	add	r26, r26
    1924:	bb 1f       	adc	r27, r27
    1926:	aa 0f       	add	r26, r26
    1928:	bb 1f       	adc	r27, r27
    192a:	ac 5b       	subi	r26, 0xBC	; 188
    192c:	bd 4f       	sbci	r27, 0xFD	; 253
    192e:	13 96       	adiw	r26, 0x03	; 3
    1930:	7c 93       	st	X, r23
    1932:	15 c0       	rjmp	.+42     	; 0x195e <Isb_App_Exec+0x6e4>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3) {
    1934:	03 97       	sbiw	r24, 0x03	; 3
    1936:	99 f4       	brne	.+38     	; 0x195e <Isb_App_Exec+0x6e4>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    1938:	86 2f       	mov	r24, r22
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	dc 01       	movw	r26, r24
    1946:	aa 5b       	subi	r26, 0xBA	; 186
    1948:	bd 4f       	sbci	r27, 0xFD	; 253
    194a:	2c 91       	ld	r18, X
    194c:	fc 01       	movw	r30, r24
    194e:	22 23       	and	r18, r18
    1950:	11 f4       	brne	.+4      	; 0x1956 <Isb_App_Exec+0x6dc>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1952:	7c 93       	st	X, r23
    1954:	01 c0       	rjmp	.+2      	; 0x1958 <Isb_App_Exec+0x6de>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    1956:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1958:	ec 5b       	subi	r30, 0xBC	; 188
    195a:	fd 4f       	sbci	r31, 0xFD	; 253
    195c:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGH);
    195e:	8d 81       	ldd	r24, Y+5	; 0x05
    1960:	8f 7e       	andi	r24, 0xEF	; 239
    1962:	8d 83       	std	Y+5, r24	; 0x05
											}
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_LOW)) {
    1964:	fa 01       	movw	r30, r20
    1966:	80 81       	ld	r24, Z
    1968:	80 ff       	sbrs	r24, 0
    196a:	8b c1       	rjmp	.+790    	; 0x1c82 <Isb_App_Exec+0xa08>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1) {
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	80 7f       	andi	r24, 0xF0	; 240
    1972:	90 70       	andi	r25, 0x00	; 0
    1974:	80 31       	cpi	r24, 0x10	; 16
    1976:	91 05       	cpc	r25, r1
    1978:	71 f4       	brne	.+28     	; 0x1996 <Isb_App_Exec+0x71c>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    197a:	a6 2f       	mov	r26, r22
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	fd 01       	movw	r30, r26
    1980:	ee 0f       	add	r30, r30
    1982:	ff 1f       	adc	r31, r31
    1984:	ee 0f       	add	r30, r30
    1986:	ff 1f       	adc	r31, r31
    1988:	ea 5b       	subi	r30, 0xBA	; 186
    198a:	fd 4f       	sbci	r31, 0xFD	; 253
    198c:	80 81       	ld	r24, Z
    198e:	88 23       	and	r24, r24
    1990:	81 f1       	breq	.+96     	; 0x19f2 <Isb_App_Exec+0x778>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    1992:	10 82       	st	Z, r1
    1994:	10 c0       	rjmp	.+32     	; 0x19b6 <Isb_App_Exec+0x73c>
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2) {
    1996:	80 32       	cpi	r24, 0x20	; 32
    1998:	91 05       	cpc	r25, r1
    199a:	b1 f4       	brne	.+44     	; 0x19c8 <Isb_App_Exec+0x74e>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    199c:	a6 2f       	mov	r26, r22
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	fd 01       	movw	r30, r26
    19a2:	ee 0f       	add	r30, r30
    19a4:	ff 1f       	adc	r31, r31
    19a6:	ee 0f       	add	r30, r30
    19a8:	ff 1f       	adc	r31, r31
    19aa:	ea 5b       	subi	r30, 0xBA	; 186
    19ac:	fd 4f       	sbci	r31, 0xFD	; 253
    19ae:	80 81       	ld	r24, Z
    19b0:	81 30       	cpi	r24, 0x01	; 1
    19b2:	f9 f0       	breq	.+62     	; 0x19f2 <Isb_App_Exec+0x778>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    19b4:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    19b6:	aa 0f       	add	r26, r26
    19b8:	bb 1f       	adc	r27, r27
    19ba:	aa 0f       	add	r26, r26
    19bc:	bb 1f       	adc	r27, r27
    19be:	ac 5b       	subi	r26, 0xBC	; 188
    19c0:	bd 4f       	sbci	r27, 0xFD	; 253
    19c2:	13 96       	adiw	r26, 0x03	; 3
    19c4:	7c 93       	st	X, r23
    19c6:	15 c0       	rjmp	.+42     	; 0x19f2 <Isb_App_Exec+0x778>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3) {
    19c8:	c0 97       	sbiw	r24, 0x30	; 48
    19ca:	99 f4       	brne	.+38     	; 0x19f2 <Isb_App_Exec+0x778>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    19cc:	86 2f       	mov	r24, r22
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	dc 01       	movw	r26, r24
    19da:	aa 5b       	subi	r26, 0xBA	; 186
    19dc:	bd 4f       	sbci	r27, 0xFD	; 253
    19de:	2c 91       	ld	r18, X
    19e0:	fc 01       	movw	r30, r24
    19e2:	22 23       	and	r18, r18
    19e4:	11 f4       	brne	.+4      	; 0x19ea <Isb_App_Exec+0x770>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    19e6:	7c 93       	st	X, r23
    19e8:	01 c0       	rjmp	.+2      	; 0x19ec <Isb_App_Exec+0x772>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    19ea:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    19ec:	ec 5b       	subi	r30, 0xBC	; 188
    19ee:	fd 4f       	sbci	r31, 0xFD	; 253
    19f0:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_LOW);
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	8e 7f       	andi	r24, 0xFE	; 254
    19f6:	44 c1       	rjmp	.+648    	; 0x1c80 <Isb_App_Exec+0xa06>
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHREPEAT);
											}
											break;
										case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_2:
											// 2 Schaltobjekte - Mit Unterscheidung Kurz/Lang - Ohne Repeat 
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHSHORT)) {
    19f8:	a8 01       	movw	r20, r16
    19fa:	93 e0       	ldi	r25, 0x03	; 3
    19fc:	44 0f       	add	r20, r20
    19fe:	55 1f       	adc	r21, r21
    1a00:	9a 95       	dec	r25
    1a02:	e1 f7       	brne	.-8      	; 0x19fc <Isb_App_Exec+0x782>
    1a04:	40 5b       	subi	r20, 0xB0	; 176
    1a06:	5e 4f       	sbci	r21, 0xFE	; 254
    1a08:	fa 01       	movw	r30, r20
    1a0a:	80 81       	ld	r24, Z
    1a0c:	85 ff       	sbrs	r24, 5
    1a0e:	46 c0       	rjmp	.+140    	; 0x1a9c <Isb_App_Exec+0x822>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1) {
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	8f 70       	andi	r24, 0x0F	; 15
    1a16:	90 70       	andi	r25, 0x00	; 0
    1a18:	81 30       	cpi	r24, 0x01	; 1
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	71 f4       	brne	.+28     	; 0x1a3a <Isb_App_Exec+0x7c0>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    1a1e:	a6 2f       	mov	r26, r22
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	fd 01       	movw	r30, r26
    1a24:	ee 0f       	add	r30, r30
    1a26:	ff 1f       	adc	r31, r31
    1a28:	ee 0f       	add	r30, r30
    1a2a:	ff 1f       	adc	r31, r31
    1a2c:	ea 5b       	subi	r30, 0xBA	; 186
    1a2e:	fd 4f       	sbci	r31, 0xFD	; 253
    1a30:	80 81       	ld	r24, Z
    1a32:	88 23       	and	r24, r24
    1a34:	81 f1       	breq	.+96     	; 0x1a96 <Isb_App_Exec+0x81c>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    1a36:	10 82       	st	Z, r1
    1a38:	10 c0       	rjmp	.+32     	; 0x1a5a <Isb_App_Exec+0x7e0>
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2) {
    1a3a:	82 30       	cpi	r24, 0x02	; 2
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	b1 f4       	brne	.+44     	; 0x1a6c <Isb_App_Exec+0x7f2>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    1a40:	a6 2f       	mov	r26, r22
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	fd 01       	movw	r30, r26
    1a46:	ee 0f       	add	r30, r30
    1a48:	ff 1f       	adc	r31, r31
    1a4a:	ee 0f       	add	r30, r30
    1a4c:	ff 1f       	adc	r31, r31
    1a4e:	ea 5b       	subi	r30, 0xBA	; 186
    1a50:	fd 4f       	sbci	r31, 0xFD	; 253
    1a52:	80 81       	ld	r24, Z
    1a54:	81 30       	cpi	r24, 0x01	; 1
    1a56:	f9 f0       	breq	.+62     	; 0x1a96 <Isb_App_Exec+0x81c>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1a58:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1a5a:	aa 0f       	add	r26, r26
    1a5c:	bb 1f       	adc	r27, r27
    1a5e:	aa 0f       	add	r26, r26
    1a60:	bb 1f       	adc	r27, r27
    1a62:	ac 5b       	subi	r26, 0xBC	; 188
    1a64:	bd 4f       	sbci	r27, 0xFD	; 253
    1a66:	13 96       	adiw	r26, 0x03	; 3
    1a68:	7c 93       	st	X, r23
    1a6a:	15 c0       	rjmp	.+42     	; 0x1a96 <Isb_App_Exec+0x81c>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3) {
    1a6c:	03 97       	sbiw	r24, 0x03	; 3
    1a6e:	99 f4       	brne	.+38     	; 0x1a96 <Isb_App_Exec+0x81c>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    1a70:	86 2f       	mov	r24, r22
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	aa 5b       	subi	r26, 0xBA	; 186
    1a80:	bd 4f       	sbci	r27, 0xFD	; 253
    1a82:	2c 91       	ld	r18, X
    1a84:	fc 01       	movw	r30, r24
    1a86:	22 23       	and	r18, r18
    1a88:	11 f4       	brne	.+4      	; 0x1a8e <Isb_App_Exec+0x814>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1a8a:	7c 93       	st	X, r23
    1a8c:	01 c0       	rjmp	.+2      	; 0x1a90 <Isb_App_Exec+0x816>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    1a8e:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1a90:	ec 5b       	subi	r30, 0xBC	; 188
    1a92:	fd 4f       	sbci	r31, 0xFD	; 253
    1a94:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHSHORT);
    1a96:	8d 81       	ldd	r24, Y+5	; 0x05
    1a98:	8f 7d       	andi	r24, 0xDF	; 223
    1a9a:	8d 83       	std	Y+5, r24	; 0x05
											}
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHLONG)) {
    1a9c:	fa 01       	movw	r30, r20
    1a9e:	80 81       	ld	r24, Z
    1aa0:	86 ff       	sbrs	r24, 6
    1aa2:	f6 c0       	rjmp	.+492    	; 0x1c90 <Isb_App_Exec+0xa16>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1) {
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	80 7f       	andi	r24, 0xF0	; 240
    1aaa:	90 70       	andi	r25, 0x00	; 0
    1aac:	80 31       	cpi	r24, 0x10	; 16
    1aae:	91 05       	cpc	r25, r1
    1ab0:	71 f4       	brne	.+28     	; 0x1ace <Isb_App_Exec+0x854>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 0) {
    1ab2:	af 2d       	mov	r26, r15
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	fd 01       	movw	r30, r26
    1ab8:	ee 0f       	add	r30, r30
    1aba:	ff 1f       	adc	r31, r31
    1abc:	ee 0f       	add	r30, r30
    1abe:	ff 1f       	adc	r31, r31
    1ac0:	ea 5b       	subi	r30, 0xBA	; 186
    1ac2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ac4:	80 81       	ld	r24, Z
    1ac6:	88 23       	and	r24, r24
    1ac8:	81 f1       	breq	.+96     	; 0x1b2a <Isb_App_Exec+0x8b0>
														Isb_Obj_1Bit[Obj_1Bit_2].Value = 0;
    1aca:	10 82       	st	Z, r1
    1acc:	10 c0       	rjmp	.+32     	; 0x1aee <Isb_App_Exec+0x874>
														Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2) {
    1ace:	80 32       	cpi	r24, 0x20	; 32
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	b1 f4       	brne	.+44     	; 0x1b00 <Isb_App_Exec+0x886>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 1) {
    1ad4:	af 2d       	mov	r26, r15
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	fd 01       	movw	r30, r26
    1ada:	ee 0f       	add	r30, r30
    1adc:	ff 1f       	adc	r31, r31
    1ade:	ee 0f       	add	r30, r30
    1ae0:	ff 1f       	adc	r31, r31
    1ae2:	ea 5b       	subi	r30, 0xBA	; 186
    1ae4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ae6:	80 81       	ld	r24, Z
    1ae8:	81 30       	cpi	r24, 0x01	; 1
    1aea:	f9 f0       	breq	.+62     	; 0x1b2a <Isb_App_Exec+0x8b0>
														Isb_Obj_1Bit[Obj_1Bit_2].Value = 1;
    1aec:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
    1aee:	aa 0f       	add	r26, r26
    1af0:	bb 1f       	adc	r27, r27
    1af2:	aa 0f       	add	r26, r26
    1af4:	bb 1f       	adc	r27, r27
    1af6:	ac 5b       	subi	r26, 0xBC	; 188
    1af8:	bd 4f       	sbci	r27, 0xFD	; 253
    1afa:	13 96       	adiw	r26, 0x03	; 3
    1afc:	7c 93       	st	X, r23
    1afe:	15 c0       	rjmp	.+42     	; 0x1b2a <Isb_App_Exec+0x8b0>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3) {
    1b00:	c0 97       	sbiw	r24, 0x30	; 48
    1b02:	99 f4       	brne	.+38     	; 0x1b2a <Isb_App_Exec+0x8b0>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value == 0) {
    1b04:	8f 2d       	mov	r24, r15
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	dc 01       	movw	r26, r24
    1b12:	aa 5b       	subi	r26, 0xBA	; 186
    1b14:	bd 4f       	sbci	r27, 0xFD	; 253
    1b16:	2c 91       	ld	r18, X
    1b18:	fc 01       	movw	r30, r24
    1b1a:	22 23       	and	r18, r18
    1b1c:	11 f4       	brne	.+4      	; 0x1b22 <Isb_App_Exec+0x8a8>
														if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_2].Value = 1;
    1b1e:	7c 93       	st	X, r23
    1b20:	01 c0       	rjmp	.+2      	; 0x1b24 <Isb_App_Exec+0x8aa>
															Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_2].Value = 0;
    1b22:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
    1b24:	ec 5b       	subi	r30, 0xBC	; 188
    1b26:	fd 4f       	sbci	r31, 0xFD	; 253
    1b28:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHLONG);
    1b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2c:	8f 7b       	andi	r24, 0xBF	; 191
    1b2e:	af c0       	rjmp	.+350    	; 0x1c8e <Isb_App_Exec+0xa14>
											}
											break;
										case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_3:
											// 2 Schaltobjekte - Mit Unterscheidung Kurz/Lang - Mit Repeat 
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHSHORT)) {
    1b30:	a8 01       	movw	r20, r16
    1b32:	23 e0       	ldi	r18, 0x03	; 3
    1b34:	44 0f       	add	r20, r20
    1b36:	55 1f       	adc	r21, r21
    1b38:	2a 95       	dec	r18
    1b3a:	e1 f7       	brne	.-8      	; 0x1b34 <Isb_App_Exec+0x8ba>
    1b3c:	40 5b       	subi	r20, 0xB0	; 176
    1b3e:	5e 4f       	sbci	r21, 0xFE	; 254
    1b40:	fa 01       	movw	r30, r20
    1b42:	80 81       	ld	r24, Z
    1b44:	85 ff       	sbrs	r24, 5
    1b46:	53 c0       	rjmp	.+166    	; 0x1bee <Isb_App_Exec+0x974>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1) {
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	8f 70       	andi	r24, 0x0F	; 15
    1b4e:	90 70       	andi	r25, 0x00	; 0
    1b50:	81 30       	cpi	r24, 0x01	; 1
    1b52:	91 05       	cpc	r25, r1
    1b54:	71 f4       	brne	.+28     	; 0x1b72 <Isb_App_Exec+0x8f8>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
    1b56:	a6 2f       	mov	r26, r22
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	fd 01       	movw	r30, r26
    1b5c:	ee 0f       	add	r30, r30
    1b5e:	ff 1f       	adc	r31, r31
    1b60:	ee 0f       	add	r30, r30
    1b62:	ff 1f       	adc	r31, r31
    1b64:	ea 5b       	subi	r30, 0xBA	; 186
    1b66:	fd 4f       	sbci	r31, 0xFD	; 253
    1b68:	80 81       	ld	r24, Z
    1b6a:	88 23       	and	r24, r24
    1b6c:	e9 f1       	breq	.+122    	; 0x1be8 <Isb_App_Exec+0x96e>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    1b6e:	10 82       	st	Z, r1
    1b70:	10 c0       	rjmp	.+32     	; 0x1b92 <Isb_App_Exec+0x918>
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2) {
    1b72:	82 30       	cpi	r24, 0x02	; 2
    1b74:	91 05       	cpc	r25, r1
    1b76:	b1 f4       	brne	.+44     	; 0x1ba4 <Isb_App_Exec+0x92a>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
    1b78:	a6 2f       	mov	r26, r22
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	fd 01       	movw	r30, r26
    1b7e:	ee 0f       	add	r30, r30
    1b80:	ff 1f       	adc	r31, r31
    1b82:	ee 0f       	add	r30, r30
    1b84:	ff 1f       	adc	r31, r31
    1b86:	ea 5b       	subi	r30, 0xBA	; 186
    1b88:	fd 4f       	sbci	r31, 0xFD	; 253
    1b8a:	80 81       	ld	r24, Z
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	61 f1       	breq	.+88     	; 0x1be8 <Isb_App_Exec+0x96e>
														Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1b90:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1b92:	aa 0f       	add	r26, r26
    1b94:	bb 1f       	adc	r27, r27
    1b96:	aa 0f       	add	r26, r26
    1b98:	bb 1f       	adc	r27, r27
    1b9a:	ac 5b       	subi	r26, 0xBC	; 188
    1b9c:	bd 4f       	sbci	r27, 0xFD	; 253
    1b9e:	13 96       	adiw	r26, 0x03	; 3
    1ba0:	7c 93       	st	X, r23
    1ba2:	22 c0       	rjmp	.+68     	; 0x1be8 <Isb_App_Exec+0x96e>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3) {
    1ba4:	03 97       	sbiw	r24, 0x03	; 3
    1ba6:	01 f5       	brne	.+64     	; 0x1be8 <Isb_App_Exec+0x96e>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_1].Value == 0) {
    1ba8:	86 2f       	mov	r24, r22
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	dc 01       	movw	r26, r24
    1bae:	aa 0f       	add	r26, r26
    1bb0:	bb 1f       	adc	r27, r27
    1bb2:	fd 01       	movw	r30, r26
    1bb4:	ee 0f       	add	r30, r30
    1bb6:	ff 1f       	adc	r31, r31
    1bb8:	ea 5b       	subi	r30, 0xBA	; 186
    1bba:	fd 4f       	sbci	r31, 0xFD	; 253
    1bbc:	20 81       	ld	r18, Z
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	ee 0f       	add	r30, r30
    1bc2:	ff 1f       	adc	r31, r31
    1bc4:	ee 0f       	add	r30, r30
    1bc6:	ff 1f       	adc	r31, r31
    1bc8:	22 23       	and	r18, r18
    1bca:	31 f4       	brne	.+12     	; 0x1bd8 <Isb_App_Exec+0x95e>
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 1;
    1bcc:	aa 0f       	add	r26, r26
    1bce:	bb 1f       	adc	r27, r27
    1bd0:	aa 5b       	subi	r26, 0xBA	; 186
    1bd2:	bd 4f       	sbci	r27, 0xFD	; 253
    1bd4:	7c 93       	st	X, r23
    1bd6:	05 c0       	rjmp	.+10     	; 0x1be2 <Isb_App_Exec+0x968>
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_1].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_1].Value = 0;
    1bd8:	aa 0f       	add	r26, r26
    1bda:	bb 1f       	adc	r27, r27
    1bdc:	aa 5b       	subi	r26, 0xBA	; 186
    1bde:	bd 4f       	sbci	r27, 0xFD	; 253
    1be0:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_1].IsChanged = TRUE;
    1be2:	ec 5b       	subi	r30, 0xBC	; 188
    1be4:	fd 4f       	sbci	r31, 0xFD	; 253
    1be6:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHSHORT);
    1be8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bea:	8f 7d       	andi	r24, 0xDF	; 223
    1bec:	8d 83       	std	Y+5, r24	; 0x05
											}
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHLONG)) {
    1bee:	fa 01       	movw	r30, r20
    1bf0:	80 81       	ld	r24, Z
    1bf2:	86 ff       	sbrs	r24, 6
    1bf4:	46 c0       	rjmp	.+140    	; 0x1c82 <Isb_App_Exec+0xa08>
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_0) {
													// None
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1) {
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	80 7f       	andi	r24, 0xF0	; 240
    1bfc:	90 70       	andi	r25, 0x00	; 0
    1bfe:	80 31       	cpi	r24, 0x10	; 16
    1c00:	91 05       	cpc	r25, r1
    1c02:	71 f4       	brne	.+28     	; 0x1c20 <Isb_App_Exec+0x9a6>
													// Aus
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 0) {
    1c04:	af 2d       	mov	r26, r15
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	fd 01       	movw	r30, r26
    1c0a:	ee 0f       	add	r30, r30
    1c0c:	ff 1f       	adc	r31, r31
    1c0e:	ee 0f       	add	r30, r30
    1c10:	ff 1f       	adc	r31, r31
    1c12:	ea 5b       	subi	r30, 0xBA	; 186
    1c14:	fd 4f       	sbci	r31, 0xFD	; 253
    1c16:	80 81       	ld	r24, Z
    1c18:	88 23       	and	r24, r24
    1c1a:	81 f1       	breq	.+96     	; 0x1c7c <Isb_App_Exec+0xa02>
														Isb_Obj_1Bit[Obj_1Bit_2].Value = 0;
    1c1c:	10 82       	st	Z, r1
    1c1e:	10 c0       	rjmp	.+32     	; 0x1c40 <Isb_App_Exec+0x9c6>
														Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2) {
    1c20:	80 32       	cpi	r24, 0x20	; 32
    1c22:	91 05       	cpc	r25, r1
    1c24:	b1 f4       	brne	.+44     	; 0x1c52 <Isb_App_Exec+0x9d8>
													// Ein
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 1) {
    1c26:	af 2d       	mov	r26, r15
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	fd 01       	movw	r30, r26
    1c2c:	ee 0f       	add	r30, r30
    1c2e:	ff 1f       	adc	r31, r31
    1c30:	ee 0f       	add	r30, r30
    1c32:	ff 1f       	adc	r31, r31
    1c34:	ea 5b       	subi	r30, 0xBA	; 186
    1c36:	fd 4f       	sbci	r31, 0xFD	; 253
    1c38:	80 81       	ld	r24, Z
    1c3a:	81 30       	cpi	r24, 0x01	; 1
    1c3c:	f9 f0       	breq	.+62     	; 0x1c7c <Isb_App_Exec+0xa02>
														Isb_Obj_1Bit[Obj_1Bit_2].Value = 1;
    1c3e:	70 83       	st	Z, r23
														Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
    1c40:	aa 0f       	add	r26, r26
    1c42:	bb 1f       	adc	r27, r27
    1c44:	aa 0f       	add	r26, r26
    1c46:	bb 1f       	adc	r27, r27
    1c48:	ac 5b       	subi	r26, 0xBC	; 188
    1c4a:	bd 4f       	sbci	r27, 0xFD	; 253
    1c4c:	13 96       	adiw	r26, 0x03	; 3
    1c4e:	7c 93       	st	X, r23
    1c50:	15 c0       	rjmp	.+42     	; 0x1c7c <Isb_App_Exec+0xa02>
													}
												}
												if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3) {
    1c52:	c0 97       	sbiw	r24, 0x30	; 48
    1c54:	99 f4       	brne	.+38     	; 0x1c7c <Isb_App_Exec+0xa02>
													// Um
													if (Isb_Obj_1Bit[Obj_1Bit_2].Value == 0) {
    1c56:	8f 2d       	mov	r24, r15
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	dc 01       	movw	r26, r24
    1c64:	aa 5b       	subi	r26, 0xBA	; 186
    1c66:	bd 4f       	sbci	r27, 0xFD	; 253
    1c68:	2c 91       	ld	r18, X
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	22 23       	and	r18, r18
    1c6e:	11 f4       	brne	.+4      	; 0x1c74 <Isb_App_Exec+0x9fa>
														if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 1) {
															Isb_Obj_1Bit[Obj_1Bit_2].Value = 1;
    1c70:	7c 93       	st	X, r23
    1c72:	01 c0       	rjmp	.+2      	; 0x1c76 <Isb_App_Exec+0x9fc>
															Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
														}
													}
													else {
														if (Isb_Obj_1Bit[Obj_1Bit_2].Value != 0) {
															Isb_Obj_1Bit[Obj_1Bit_2].Value = 0;
    1c74:	1c 92       	st	X, r1
															Isb_Obj_1Bit[Obj_1Bit_2].IsChanged = TRUE;
    1c76:	ec 5b       	subi	r30, 0xBC	; 188
    1c78:	fd 4f       	sbci	r31, 0xFD	; 253
    1c7a:	73 83       	std	Z+3, r23	; 0x03
														}
													}
												}
												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHLONG);
    1c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7e:	8f 7b       	andi	r24, 0xBF	; 191
    1c80:	8d 83       	std	Y+5, r24	; 0x05
											}
											if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHREPEAT)) {
    1c82:	fa 01       	movw	r30, r20
    1c84:	80 81       	ld	r24, Z
    1c86:	87 ff       	sbrs	r24, 7
    1c88:	03 c0       	rjmp	.+6      	; 0x1c90 <Isb_App_Exec+0xa16>
// TODO:


												Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHREPEAT);
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	8f 77       	andi	r24, 0x7F	; 127
    1c8e:	8d 83       	std	Y+5, r24	; 0x05
    1c90:	0f 5f       	subi	r16, 0xFF	; 255
    1c92:	1f 4f       	sbci	r17, 0xFF	; 255
    1c94:	28 96       	adiw	r28, 0x08	; 8
			}
		#endif /* ISB_APP_DIGOUT_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			if (bit_is_set(Isb_App_DigIn_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++) {
    1c96:	08 30       	cpi	r16, 0x08	; 8
    1c98:	11 05       	cpc	r17, r1
    1c9a:	09 f0       	breq	.+2      	; 0x1c9e <Isb_App_Exec+0xa24>
    1c9c:	c7 cc       	rjmp	.-1650   	; 0x162c <Isb_App_Exec+0x3b2>

//						}
// <- TODO:
					}
				}
				Isb_App_DigIn_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    1c9e:	80 91 3f 01 	lds	r24, 0x013F
    1ca2:	8e 7f       	andi	r24, 0xFE	; 254
    1ca4:	80 93 3f 01 	sts	0x013F, r24
//#				}
				Isb_App_Lcd_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
			}
		#endif /* ISB_APP_LCD_MAX */

	}
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	1f 91       	pop	r17
    1cae:	0f 91       	pop	r16
    1cb0:	ff 90       	pop	r15
    1cb2:	ef 90       	pop	r14
    1cb4:	df 90       	pop	r13
    1cb6:	cf 90       	pop	r12
    1cb8:	bf 90       	pop	r11
    1cba:	af 90       	pop	r10
    1cbc:	9f 90       	pop	r9
    1cbe:	8f 90       	pop	r8
    1cc0:	7f 90       	pop	r7
    1cc2:	6f 90       	pop	r6
    1cc4:	5f 90       	pop	r5
    1cc6:	4f 90       	pop	r4
    1cc8:	3f 90       	pop	r3
    1cca:	08 95       	ret

00001ccc <Isb_Obj_Init>:
#ifndef ISB_OBJ_C_
	#define ISB_OBJ_C_



	void Isb_Obj_Init(void) {
    1ccc:	0f 93       	push	r16
    1cce:	1f 93       	push	r17
    1cd0:	cf 93       	push	r28
    1cd2:	df 93       	push	r29
    1cd4:	80 91 36 01 	lds	r24, 0x0136
    1cd8:	08 2f       	mov	r16, r24
    1cda:	10 e0       	ldi	r17, 0x00	; 0
    1cdc:	c4 e4       	ldi	r28, 0x44	; 68
    1cde:	d2 e0       	ldi	r29, 0x02	; 2
    1ce0:	a0 e0       	ldi	r26, 0x00	; 0
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0

		#if defined(ISB_OBJ_1BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
				uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_1Bit_Ch_Array[ObjIndex]);
    1ce4:	fd 01       	movw	r30, r26
    1ce6:	e4 5d       	subi	r30, 0xD4	; 212
    1ce8:	fe 4f       	sbci	r31, 0xFE	; 254
    1cea:	84 91       	lpm	r24, Z+
				uint16_t eepAddrCtrl = 0;
				uint16_t eepAddrTov = 0;
				uint16_t eepAddrValueInit = 0;
				switch (ObjIndex) {
    1cec:	ea 2f       	mov	r30, r26
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	ec 33       	cpi	r30, 0x3C	; 60
    1cf2:	f1 05       	cpc	r31, r1
    1cf4:	78 f4       	brcc	.+30     	; 0x1d14 <Isb_Obj_Init+0x48>
    1cf6:	ec 5c       	subi	r30, 0xCC	; 204
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	ee 0f       	add	r30, r30
    1cfc:	ff 1f       	adc	r31, r31
    1cfe:	05 90       	lpm	r0, Z+
    1d00:	f4 91       	lpm	r31, Z+
    1d02:	e0 2d       	mov	r30, r0
    1d04:	09 94       	ijmp
    1d06:	65 e0       	ldi	r22, 0x05	; 5
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	46 e0       	ldi	r20, 0x06	; 6
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	27 e0       	ldi	r18, 0x07	; 7
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	a3 c1       	rjmp	.+838    	; 0x205a <Isb_Obj_Init+0x38e>
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	70 e0       	ldi	r23, 0x00	; 0
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	50 e0       	ldi	r21, 0x00	; 0
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	9c c1       	rjmp	.+824    	; 0x205a <Isb_Obj_Init+0x38e>
    1d22:	68 e0       	ldi	r22, 0x08	; 8
    1d24:	70 e0       	ldi	r23, 0x00	; 0
    1d26:	49 e0       	ldi	r20, 0x09	; 9
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	2a e0       	ldi	r18, 0x0A	; 10
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	95 c1       	rjmp	.+810    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_1)
						case 1:
							eepAddrCtrl = ISB_OBJ_1BIT_1_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_1_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_1_EEADDR_VALUEINIT;
							break;
    1d30:	6b e0       	ldi	r22, 0x0B	; 11
    1d32:	70 e0       	ldi	r23, 0x00	; 0
    1d34:	4c e0       	ldi	r20, 0x0C	; 12
    1d36:	50 e0       	ldi	r21, 0x00	; 0
    1d38:	2d e0       	ldi	r18, 0x0D	; 13
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	8e c1       	rjmp	.+796    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_2)
						case 2:
							eepAddrCtrl = ISB_OBJ_1BIT_2_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_2_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_2_EEADDR_VALUEINIT;
							break;
    1d3e:	6a e1       	ldi	r22, 0x1A	; 26
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	4b e1       	ldi	r20, 0x1B	; 27
    1d44:	50 e0       	ldi	r21, 0x00	; 0
    1d46:	2c e1       	ldi	r18, 0x1C	; 28
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	87 c1       	rjmp	.+782    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_3)
						case 3:
							eepAddrCtrl = ISB_OBJ_1BIT_3_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_3_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_3_EEADDR_VALUEINIT;
							break;
    1d4c:	6d e1       	ldi	r22, 0x1D	; 29
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	4e e1       	ldi	r20, 0x1E	; 30
    1d52:	50 e0       	ldi	r21, 0x00	; 0
    1d54:	2f e1       	ldi	r18, 0x1F	; 31
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	80 c1       	rjmp	.+768    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_4)
						case 4:
							eepAddrCtrl = ISB_OBJ_1BIT_4_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_4_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_4_EEADDR_VALUEINIT;
							break;
    1d5a:	60 e2       	ldi	r22, 0x20	; 32
    1d5c:	70 e0       	ldi	r23, 0x00	; 0
    1d5e:	41 e2       	ldi	r20, 0x21	; 33
    1d60:	50 e0       	ldi	r21, 0x00	; 0
    1d62:	22 e2       	ldi	r18, 0x22	; 34
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	79 c1       	rjmp	.+754    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_5)
						case 5:
							eepAddrCtrl = ISB_OBJ_1BIT_5_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_5_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_5_EEADDR_VALUEINIT;
							break;
    1d68:	6f e2       	ldi	r22, 0x2F	; 47
    1d6a:	70 e0       	ldi	r23, 0x00	; 0
    1d6c:	40 e3       	ldi	r20, 0x30	; 48
    1d6e:	50 e0       	ldi	r21, 0x00	; 0
    1d70:	21 e3       	ldi	r18, 0x31	; 49
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	72 c1       	rjmp	.+740    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_6)
						case 6:
							eepAddrCtrl = ISB_OBJ_1BIT_6_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_6_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_6_EEADDR_VALUEINIT;
							break;
    1d76:	62 e3       	ldi	r22, 0x32	; 50
    1d78:	70 e0       	ldi	r23, 0x00	; 0
    1d7a:	43 e3       	ldi	r20, 0x33	; 51
    1d7c:	50 e0       	ldi	r21, 0x00	; 0
    1d7e:	24 e3       	ldi	r18, 0x34	; 52
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	6b c1       	rjmp	.+726    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_7)
						case 7:
							eepAddrCtrl = ISB_OBJ_1BIT_7_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_7_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_7_EEADDR_VALUEINIT;
							break;
    1d84:	65 e3       	ldi	r22, 0x35	; 53
    1d86:	70 e0       	ldi	r23, 0x00	; 0
    1d88:	46 e3       	ldi	r20, 0x36	; 54
    1d8a:	50 e0       	ldi	r21, 0x00	; 0
    1d8c:	27 e3       	ldi	r18, 0x37	; 55
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	64 c1       	rjmp	.+712    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_8)
						case 8:
							eepAddrCtrl = ISB_OBJ_1BIT_8_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_8_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_8_EEADDR_VALUEINIT;
							break;
    1d92:	64 e4       	ldi	r22, 0x44	; 68
    1d94:	70 e0       	ldi	r23, 0x00	; 0
    1d96:	45 e4       	ldi	r20, 0x45	; 69
    1d98:	50 e0       	ldi	r21, 0x00	; 0
    1d9a:	26 e4       	ldi	r18, 0x46	; 70
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	5d c1       	rjmp	.+698    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_9)
						case 9:
							eepAddrCtrl = ISB_OBJ_1BIT_9_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_9_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_9_EEADDR_VALUEINIT;
							break;
    1da0:	67 e4       	ldi	r22, 0x47	; 71
    1da2:	70 e0       	ldi	r23, 0x00	; 0
    1da4:	48 e4       	ldi	r20, 0x48	; 72
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	29 e4       	ldi	r18, 0x49	; 73
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	56 c1       	rjmp	.+684    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_10)
						case 10:
							eepAddrCtrl = ISB_OBJ_1BIT_10_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_10_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_10_EEADDR_VALUEINIT;
							break;
    1dae:	6a e4       	ldi	r22, 0x4A	; 74
    1db0:	70 e0       	ldi	r23, 0x00	; 0
    1db2:	4b e4       	ldi	r20, 0x4B	; 75
    1db4:	50 e0       	ldi	r21, 0x00	; 0
    1db6:	2c e4       	ldi	r18, 0x4C	; 76
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	4f c1       	rjmp	.+670    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_11)
						case 11:
							eepAddrCtrl = ISB_OBJ_1BIT_11_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_11_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_11_EEADDR_VALUEINIT;
							break;
    1dbc:	69 e5       	ldi	r22, 0x59	; 89
    1dbe:	70 e0       	ldi	r23, 0x00	; 0
    1dc0:	4a e5       	ldi	r20, 0x5A	; 90
    1dc2:	50 e0       	ldi	r21, 0x00	; 0
    1dc4:	2b e5       	ldi	r18, 0x5B	; 91
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	48 c1       	rjmp	.+656    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_12)
						case 12:
							eepAddrCtrl = ISB_OBJ_1BIT_12_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_12_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_12_EEADDR_VALUEINIT;
							break;
    1dca:	6c e5       	ldi	r22, 0x5C	; 92
    1dcc:	70 e0       	ldi	r23, 0x00	; 0
    1dce:	4d e5       	ldi	r20, 0x5D	; 93
    1dd0:	50 e0       	ldi	r21, 0x00	; 0
    1dd2:	2e e5       	ldi	r18, 0x5E	; 94
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	41 c1       	rjmp	.+642    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_13)
						case 13:
							eepAddrCtrl = ISB_OBJ_1BIT_13_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_13_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_13_EEADDR_VALUEINIT;
							break;
    1dd8:	6f e5       	ldi	r22, 0x5F	; 95
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	40 e6       	ldi	r20, 0x60	; 96
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	21 e6       	ldi	r18, 0x61	; 97
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	3a c1       	rjmp	.+628    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_14)
						case 14:
							eepAddrCtrl = ISB_OBJ_1BIT_14_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_14_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_14_EEADDR_VALUEINIT;
							break;
    1de6:	6e e6       	ldi	r22, 0x6E	; 110
    1de8:	70 e0       	ldi	r23, 0x00	; 0
    1dea:	4f e6       	ldi	r20, 0x6F	; 111
    1dec:	50 e0       	ldi	r21, 0x00	; 0
    1dee:	20 e7       	ldi	r18, 0x70	; 112
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	33 c1       	rjmp	.+614    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_15)
						case 15:
							eepAddrCtrl = ISB_OBJ_1BIT_15_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_15_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_15_EEADDR_VALUEINIT;
							break;
    1df4:	61 e7       	ldi	r22, 0x71	; 113
    1df6:	70 e0       	ldi	r23, 0x00	; 0
    1df8:	42 e7       	ldi	r20, 0x72	; 114
    1dfa:	50 e0       	ldi	r21, 0x00	; 0
    1dfc:	23 e7       	ldi	r18, 0x73	; 115
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	2c c1       	rjmp	.+600    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_16)
						case 16:
							eepAddrCtrl = ISB_OBJ_1BIT_16_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_16_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_16_EEADDR_VALUEINIT;
							break;
    1e02:	64 e7       	ldi	r22, 0x74	; 116
    1e04:	70 e0       	ldi	r23, 0x00	; 0
    1e06:	45 e7       	ldi	r20, 0x75	; 117
    1e08:	50 e0       	ldi	r21, 0x00	; 0
    1e0a:	26 e7       	ldi	r18, 0x76	; 118
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	25 c1       	rjmp	.+586    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_17)
						case 17:
							eepAddrCtrl = ISB_OBJ_1BIT_17_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_17_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_17_EEADDR_VALUEINIT;
							break;
    1e10:	63 e8       	ldi	r22, 0x83	; 131
    1e12:	70 e0       	ldi	r23, 0x00	; 0
    1e14:	44 e8       	ldi	r20, 0x84	; 132
    1e16:	50 e0       	ldi	r21, 0x00	; 0
    1e18:	25 e8       	ldi	r18, 0x85	; 133
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	1e c1       	rjmp	.+572    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_18)
						case 18:
							eepAddrCtrl = ISB_OBJ_1BIT_18_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_18_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_18_EEADDR_VALUEINIT;
							break;
    1e1e:	66 e8       	ldi	r22, 0x86	; 134
    1e20:	70 e0       	ldi	r23, 0x00	; 0
    1e22:	47 e8       	ldi	r20, 0x87	; 135
    1e24:	50 e0       	ldi	r21, 0x00	; 0
    1e26:	28 e8       	ldi	r18, 0x88	; 136
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	17 c1       	rjmp	.+558    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_19)
						case 19:
							eepAddrCtrl = ISB_OBJ_1BIT_19_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_19_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_19_EEADDR_VALUEINIT;
							break;
    1e2c:	69 e8       	ldi	r22, 0x89	; 137
    1e2e:	70 e0       	ldi	r23, 0x00	; 0
    1e30:	4a e8       	ldi	r20, 0x8A	; 138
    1e32:	50 e0       	ldi	r21, 0x00	; 0
    1e34:	2b e8       	ldi	r18, 0x8B	; 139
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	10 c1       	rjmp	.+544    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_20)
						case 20:
							eepAddrCtrl = ISB_OBJ_1BIT_20_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_20_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_20_EEADDR_VALUEINIT;
							break;
    1e3a:	68 e9       	ldi	r22, 0x98	; 152
    1e3c:	70 e0       	ldi	r23, 0x00	; 0
    1e3e:	49 e9       	ldi	r20, 0x99	; 153
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	2a e9       	ldi	r18, 0x9A	; 154
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	09 c1       	rjmp	.+530    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_21)
						case 21:
							eepAddrCtrl = ISB_OBJ_1BIT_21_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_21_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_21_EEADDR_VALUEINIT;
							break;
    1e48:	6b e9       	ldi	r22, 0x9B	; 155
    1e4a:	70 e0       	ldi	r23, 0x00	; 0
    1e4c:	4c e9       	ldi	r20, 0x9C	; 156
    1e4e:	50 e0       	ldi	r21, 0x00	; 0
    1e50:	2d e9       	ldi	r18, 0x9D	; 157
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	02 c1       	rjmp	.+516    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_22)
						case 22:
							eepAddrCtrl = ISB_OBJ_1BIT_22_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_22_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_22_EEADDR_VALUEINIT;
							break;
    1e56:	6e e9       	ldi	r22, 0x9E	; 158
    1e58:	70 e0       	ldi	r23, 0x00	; 0
    1e5a:	4f e9       	ldi	r20, 0x9F	; 159
    1e5c:	50 e0       	ldi	r21, 0x00	; 0
    1e5e:	20 ea       	ldi	r18, 0xA0	; 160
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	fb c0       	rjmp	.+502    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_23)
						case 23:
							eepAddrCtrl = ISB_OBJ_1BIT_23_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_23_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_23_EEADDR_VALUEINIT;
							break;
    1e64:	63 eb       	ldi	r22, 0xB3	; 179
    1e66:	70 e0       	ldi	r23, 0x00	; 0
    1e68:	44 eb       	ldi	r20, 0xB4	; 180
    1e6a:	50 e0       	ldi	r21, 0x00	; 0
    1e6c:	25 eb       	ldi	r18, 0xB5	; 181
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	f4 c0       	rjmp	.+488    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_24)
						case 24:
							eepAddrCtrl = ISB_OBJ_1BIT_24_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_24_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_24_EEADDR_VALUEINIT;
							break;
    1e72:	66 eb       	ldi	r22, 0xB6	; 182
    1e74:	70 e0       	ldi	r23, 0x00	; 0
    1e76:	47 eb       	ldi	r20, 0xB7	; 183
    1e78:	50 e0       	ldi	r21, 0x00	; 0
    1e7a:	28 eb       	ldi	r18, 0xB8	; 184
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	ed c0       	rjmp	.+474    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_25)
						case 25:
							eepAddrCtrl = ISB_OBJ_1BIT_25_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_25_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_25_EEADDR_VALUEINIT;
							break;
    1e80:	69 eb       	ldi	r22, 0xB9	; 185
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	4a eb       	ldi	r20, 0xBA	; 186
    1e86:	50 e0       	ldi	r21, 0x00	; 0
    1e88:	2b eb       	ldi	r18, 0xBB	; 187
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	e6 c0       	rjmp	.+460    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_26)
						case 26:
							eepAddrCtrl = ISB_OBJ_1BIT_26_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_26_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_26_EEADDR_VALUEINIT;
							break;
    1e8e:	6c eb       	ldi	r22, 0xBC	; 188
    1e90:	70 e0       	ldi	r23, 0x00	; 0
    1e92:	4d eb       	ldi	r20, 0xBD	; 189
    1e94:	50 e0       	ldi	r21, 0x00	; 0
    1e96:	2e eb       	ldi	r18, 0xBE	; 190
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	df c0       	rjmp	.+446    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_27)
						case 27:
							eepAddrCtrl = ISB_OBJ_1BIT_27_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_27_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_27_EEADDR_VALUEINIT;
							break;
    1e9c:	6b ec       	ldi	r22, 0xCB	; 203
    1e9e:	70 e0       	ldi	r23, 0x00	; 0
    1ea0:	4c ec       	ldi	r20, 0xCC	; 204
    1ea2:	50 e0       	ldi	r21, 0x00	; 0
    1ea4:	2d ec       	ldi	r18, 0xCD	; 205
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	d8 c0       	rjmp	.+432    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_28)
						case 28:
							eepAddrCtrl = ISB_OBJ_1BIT_28_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_28_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_28_EEADDR_VALUEINIT;
							break;
    1eaa:	6e ec       	ldi	r22, 0xCE	; 206
    1eac:	70 e0       	ldi	r23, 0x00	; 0
    1eae:	4f ec       	ldi	r20, 0xCF	; 207
    1eb0:	50 e0       	ldi	r21, 0x00	; 0
    1eb2:	20 ed       	ldi	r18, 0xD0	; 208
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	d1 c0       	rjmp	.+418    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_29)
						case 29:
							eepAddrCtrl = ISB_OBJ_1BIT_29_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_29_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_29_EEADDR_VALUEINIT;
							break;
    1eb8:	61 ed       	ldi	r22, 0xD1	; 209
    1eba:	70 e0       	ldi	r23, 0x00	; 0
    1ebc:	42 ed       	ldi	r20, 0xD2	; 210
    1ebe:	50 e0       	ldi	r21, 0x00	; 0
    1ec0:	23 ed       	ldi	r18, 0xD3	; 211
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	ca c0       	rjmp	.+404    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_30)
						case 30:
							eepAddrCtrl = ISB_OBJ_1BIT_30_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_30_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_30_EEADDR_VALUEINIT;
							break;
    1ec6:	64 ed       	ldi	r22, 0xD4	; 212
    1ec8:	70 e0       	ldi	r23, 0x00	; 0
    1eca:	45 ed       	ldi	r20, 0xD5	; 213
    1ecc:	50 e0       	ldi	r21, 0x00	; 0
    1ece:	26 ed       	ldi	r18, 0xD6	; 214
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	c3 c0       	rjmp	.+390    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_31)
						case 31:
							eepAddrCtrl = ISB_OBJ_1BIT_31_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_31_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_31_EEADDR_VALUEINIT;
							break;
    1ed4:	63 ee       	ldi	r22, 0xE3	; 227
    1ed6:	70 e0       	ldi	r23, 0x00	; 0
    1ed8:	44 ee       	ldi	r20, 0xE4	; 228
    1eda:	50 e0       	ldi	r21, 0x00	; 0
    1edc:	25 ee       	ldi	r18, 0xE5	; 229
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	bc c0       	rjmp	.+376    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_32)
						case 32:
							eepAddrCtrl = ISB_OBJ_1BIT_32_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_32_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_32_EEADDR_VALUEINIT;
							break;
    1ee2:	66 ee       	ldi	r22, 0xE6	; 230
    1ee4:	70 e0       	ldi	r23, 0x00	; 0
    1ee6:	47 ee       	ldi	r20, 0xE7	; 231
    1ee8:	50 e0       	ldi	r21, 0x00	; 0
    1eea:	28 ee       	ldi	r18, 0xE8	; 232
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	b5 c0       	rjmp	.+362    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_33)
						case 33:
							eepAddrCtrl = ISB_OBJ_1BIT_33_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_33_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_33_EEADDR_VALUEINIT;
							break;
    1ef0:	69 ee       	ldi	r22, 0xE9	; 233
    1ef2:	70 e0       	ldi	r23, 0x00	; 0
    1ef4:	4a ee       	ldi	r20, 0xEA	; 234
    1ef6:	50 e0       	ldi	r21, 0x00	; 0
    1ef8:	2b ee       	ldi	r18, 0xEB	; 235
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	ae c0       	rjmp	.+348    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_34)
						case 34:
							eepAddrCtrl = ISB_OBJ_1BIT_34_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_34_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_34_EEADDR_VALUEINIT;
							break;
    1efe:	6c ee       	ldi	r22, 0xEC	; 236
    1f00:	70 e0       	ldi	r23, 0x00	; 0
    1f02:	4d ee       	ldi	r20, 0xED	; 237
    1f04:	50 e0       	ldi	r21, 0x00	; 0
    1f06:	2e ee       	ldi	r18, 0xEE	; 238
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	a7 c0       	rjmp	.+334    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_35)
						case 35:
							eepAddrCtrl = ISB_OBJ_1BIT_35_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_35_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_35_EEADDR_VALUEINIT;
							break;
    1f0c:	6b ef       	ldi	r22, 0xFB	; 251
    1f0e:	70 e0       	ldi	r23, 0x00	; 0
    1f10:	4c ef       	ldi	r20, 0xFC	; 252
    1f12:	50 e0       	ldi	r21, 0x00	; 0
    1f14:	2d ef       	ldi	r18, 0xFD	; 253
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	a0 c0       	rjmp	.+320    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_36)
						case 36:
							eepAddrCtrl = ISB_OBJ_1BIT_36_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_36_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_36_EEADDR_VALUEINIT;
							break;
    1f1a:	6e ef       	ldi	r22, 0xFE	; 254
    1f1c:	70 e0       	ldi	r23, 0x00	; 0
    1f1e:	4f ef       	ldi	r20, 0xFF	; 255
    1f20:	50 e0       	ldi	r21, 0x00	; 0
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	31 e0       	ldi	r19, 0x01	; 1
    1f26:	99 c0       	rjmp	.+306    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_37)
						case 37:
							eepAddrCtrl = ISB_OBJ_1BIT_37_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_37_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_37_EEADDR_VALUEINIT;
							break;
    1f28:	61 e0       	ldi	r22, 0x01	; 1
    1f2a:	71 e0       	ldi	r23, 0x01	; 1
    1f2c:	42 e0       	ldi	r20, 0x02	; 2
    1f2e:	51 e0       	ldi	r21, 0x01	; 1
    1f30:	23 e0       	ldi	r18, 0x03	; 3
    1f32:	31 e0       	ldi	r19, 0x01	; 1
    1f34:	92 c0       	rjmp	.+292    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_38)
						case 38:
							eepAddrCtrl = ISB_OBJ_1BIT_38_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_38_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_38_EEADDR_VALUEINIT;
							break;
    1f36:	64 e0       	ldi	r22, 0x04	; 4
    1f38:	71 e0       	ldi	r23, 0x01	; 1
    1f3a:	45 e0       	ldi	r20, 0x05	; 5
    1f3c:	51 e0       	ldi	r21, 0x01	; 1
    1f3e:	26 e0       	ldi	r18, 0x06	; 6
    1f40:	31 e0       	ldi	r19, 0x01	; 1
    1f42:	8b c0       	rjmp	.+278    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_39)
						case 39:
							eepAddrCtrl = ISB_OBJ_1BIT_39_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_39_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_39_EEADDR_VALUEINIT;
							break;
    1f44:	63 e1       	ldi	r22, 0x13	; 19
    1f46:	71 e0       	ldi	r23, 0x01	; 1
    1f48:	44 e1       	ldi	r20, 0x14	; 20
    1f4a:	51 e0       	ldi	r21, 0x01	; 1
    1f4c:	25 e1       	ldi	r18, 0x15	; 21
    1f4e:	31 e0       	ldi	r19, 0x01	; 1
    1f50:	84 c0       	rjmp	.+264    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_40)
						case 40:
							eepAddrCtrl = ISB_OBJ_1BIT_40_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_40_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_40_EEADDR_VALUEINIT;
							break;
    1f52:	66 e1       	ldi	r22, 0x16	; 22
    1f54:	71 e0       	ldi	r23, 0x01	; 1
    1f56:	47 e1       	ldi	r20, 0x17	; 23
    1f58:	51 e0       	ldi	r21, 0x01	; 1
    1f5a:	28 e1       	ldi	r18, 0x18	; 24
    1f5c:	31 e0       	ldi	r19, 0x01	; 1
    1f5e:	7d c0       	rjmp	.+250    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_41)
						case 41:
							eepAddrCtrl = ISB_OBJ_1BIT_41_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_41_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_41_EEADDR_VALUEINIT;
							break;
    1f60:	69 e1       	ldi	r22, 0x19	; 25
    1f62:	71 e0       	ldi	r23, 0x01	; 1
    1f64:	4a e1       	ldi	r20, 0x1A	; 26
    1f66:	51 e0       	ldi	r21, 0x01	; 1
    1f68:	2b e1       	ldi	r18, 0x1B	; 27
    1f6a:	31 e0       	ldi	r19, 0x01	; 1
    1f6c:	76 c0       	rjmp	.+236    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_42)
						case 42:
							eepAddrCtrl = ISB_OBJ_1BIT_42_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_42_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_42_EEADDR_VALUEINIT;
							break;
    1f6e:	6c e1       	ldi	r22, 0x1C	; 28
    1f70:	71 e0       	ldi	r23, 0x01	; 1
    1f72:	4d e1       	ldi	r20, 0x1D	; 29
    1f74:	51 e0       	ldi	r21, 0x01	; 1
    1f76:	2e e1       	ldi	r18, 0x1E	; 30
    1f78:	31 e0       	ldi	r19, 0x01	; 1
    1f7a:	6f c0       	rjmp	.+222    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_43)
						case 43:
							eepAddrCtrl = ISB_OBJ_1BIT_43_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_43_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_43_EEADDR_VALUEINIT;
							break;
    1f7c:	6b e2       	ldi	r22, 0x2B	; 43
    1f7e:	71 e0       	ldi	r23, 0x01	; 1
    1f80:	4c e2       	ldi	r20, 0x2C	; 44
    1f82:	51 e0       	ldi	r21, 0x01	; 1
    1f84:	2d e2       	ldi	r18, 0x2D	; 45
    1f86:	31 e0       	ldi	r19, 0x01	; 1
    1f88:	68 c0       	rjmp	.+208    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_44)
						case 44:
							eepAddrCtrl = ISB_OBJ_1BIT_44_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_44_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_44_EEADDR_VALUEINIT;
							break;
    1f8a:	6e e2       	ldi	r22, 0x2E	; 46
    1f8c:	71 e0       	ldi	r23, 0x01	; 1
    1f8e:	4f e2       	ldi	r20, 0x2F	; 47
    1f90:	51 e0       	ldi	r21, 0x01	; 1
    1f92:	20 e3       	ldi	r18, 0x30	; 48
    1f94:	31 e0       	ldi	r19, 0x01	; 1
    1f96:	61 c0       	rjmp	.+194    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_45)
						case 45:
							eepAddrCtrl = ISB_OBJ_1BIT_45_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_45_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_45_EEADDR_VALUEINIT;
							break;
    1f98:	61 e3       	ldi	r22, 0x31	; 49
    1f9a:	71 e0       	ldi	r23, 0x01	; 1
    1f9c:	42 e3       	ldi	r20, 0x32	; 50
    1f9e:	51 e0       	ldi	r21, 0x01	; 1
    1fa0:	23 e3       	ldi	r18, 0x33	; 51
    1fa2:	31 e0       	ldi	r19, 0x01	; 1
    1fa4:	5a c0       	rjmp	.+180    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_46)
						case 46:
							eepAddrCtrl = ISB_OBJ_1BIT_46_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_46_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_46_EEADDR_VALUEINIT;
							break;
    1fa6:	64 e3       	ldi	r22, 0x34	; 52
    1fa8:	71 e0       	ldi	r23, 0x01	; 1
    1faa:	45 e3       	ldi	r20, 0x35	; 53
    1fac:	51 e0       	ldi	r21, 0x01	; 1
    1fae:	26 e3       	ldi	r18, 0x36	; 54
    1fb0:	31 e0       	ldi	r19, 0x01	; 1
    1fb2:	53 c0       	rjmp	.+166    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_47)
						case 47:
							eepAddrCtrl = ISB_OBJ_1BIT_47_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_47_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_47_EEADDR_VALUEINIT;
							break;
    1fb4:	63 e4       	ldi	r22, 0x43	; 67
    1fb6:	71 e0       	ldi	r23, 0x01	; 1
    1fb8:	44 e4       	ldi	r20, 0x44	; 68
    1fba:	51 e0       	ldi	r21, 0x01	; 1
    1fbc:	25 e4       	ldi	r18, 0x45	; 69
    1fbe:	31 e0       	ldi	r19, 0x01	; 1
    1fc0:	4c c0       	rjmp	.+152    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_48)
						case 48:
							eepAddrCtrl = ISB_OBJ_1BIT_48_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_48_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_48_EEADDR_VALUEINIT;
							break;
    1fc2:	66 e4       	ldi	r22, 0x46	; 70
    1fc4:	71 e0       	ldi	r23, 0x01	; 1
    1fc6:	47 e4       	ldi	r20, 0x47	; 71
    1fc8:	51 e0       	ldi	r21, 0x01	; 1
    1fca:	28 e4       	ldi	r18, 0x48	; 72
    1fcc:	31 e0       	ldi	r19, 0x01	; 1
    1fce:	45 c0       	rjmp	.+138    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_49)
						case 49:
							eepAddrCtrl = ISB_OBJ_1BIT_49_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_49_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_49_EEADDR_VALUEINIT;
							break;
    1fd0:	69 e4       	ldi	r22, 0x49	; 73
    1fd2:	71 e0       	ldi	r23, 0x01	; 1
    1fd4:	4a e4       	ldi	r20, 0x4A	; 74
    1fd6:	51 e0       	ldi	r21, 0x01	; 1
    1fd8:	2b e4       	ldi	r18, 0x4B	; 75
    1fda:	31 e0       	ldi	r19, 0x01	; 1
    1fdc:	3e c0       	rjmp	.+124    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_50)
						case 50:
							eepAddrCtrl = ISB_OBJ_1BIT_50_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_50_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_50_EEADDR_VALUEINIT;
							break;
    1fde:	6c e4       	ldi	r22, 0x4C	; 76
    1fe0:	71 e0       	ldi	r23, 0x01	; 1
    1fe2:	4d e4       	ldi	r20, 0x4D	; 77
    1fe4:	51 e0       	ldi	r21, 0x01	; 1
    1fe6:	2e e4       	ldi	r18, 0x4E	; 78
    1fe8:	31 e0       	ldi	r19, 0x01	; 1
    1fea:	37 c0       	rjmp	.+110    	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_51)
						case 51:
							eepAddrCtrl = ISB_OBJ_1BIT_51_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_51_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_51_EEADDR_VALUEINIT;
							break;
    1fec:	6b e5       	ldi	r22, 0x5B	; 91
    1fee:	71 e0       	ldi	r23, 0x01	; 1
    1ff0:	4c e5       	ldi	r20, 0x5C	; 92
    1ff2:	51 e0       	ldi	r21, 0x01	; 1
    1ff4:	2d e5       	ldi	r18, 0x5D	; 93
    1ff6:	31 e0       	ldi	r19, 0x01	; 1
    1ff8:	30 c0       	rjmp	.+96     	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_52)
						case 52:
							eepAddrCtrl = ISB_OBJ_1BIT_52_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_52_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_52_EEADDR_VALUEINIT;
							break;
    1ffa:	6e e5       	ldi	r22, 0x5E	; 94
    1ffc:	71 e0       	ldi	r23, 0x01	; 1
    1ffe:	4f e5       	ldi	r20, 0x5F	; 95
    2000:	51 e0       	ldi	r21, 0x01	; 1
    2002:	20 e6       	ldi	r18, 0x60	; 96
    2004:	31 e0       	ldi	r19, 0x01	; 1
    2006:	29 c0       	rjmp	.+82     	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_53)
						case 53:
							eepAddrCtrl = ISB_OBJ_1BIT_53_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_53_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_53_EEADDR_VALUEINIT;
							break;
    2008:	61 e6       	ldi	r22, 0x61	; 97
    200a:	71 e0       	ldi	r23, 0x01	; 1
    200c:	42 e6       	ldi	r20, 0x62	; 98
    200e:	51 e0       	ldi	r21, 0x01	; 1
    2010:	23 e6       	ldi	r18, 0x63	; 99
    2012:	31 e0       	ldi	r19, 0x01	; 1
    2014:	22 c0       	rjmp	.+68     	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_54)
						case 54:
							eepAddrCtrl = ISB_OBJ_1BIT_54_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_54_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_54_EEADDR_VALUEINIT;
							break;
    2016:	64 e6       	ldi	r22, 0x64	; 100
    2018:	71 e0       	ldi	r23, 0x01	; 1
    201a:	45 e6       	ldi	r20, 0x65	; 101
    201c:	51 e0       	ldi	r21, 0x01	; 1
    201e:	26 e6       	ldi	r18, 0x66	; 102
    2020:	31 e0       	ldi	r19, 0x01	; 1
    2022:	1b c0       	rjmp	.+54     	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_55)
						case 55:
							eepAddrCtrl = ISB_OBJ_1BIT_55_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_55_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_55_EEADDR_VALUEINIT;
							break;
    2024:	63 e7       	ldi	r22, 0x73	; 115
    2026:	71 e0       	ldi	r23, 0x01	; 1
    2028:	44 e7       	ldi	r20, 0x74	; 116
    202a:	51 e0       	ldi	r21, 0x01	; 1
    202c:	25 e7       	ldi	r18, 0x75	; 117
    202e:	31 e0       	ldi	r19, 0x01	; 1
    2030:	14 c0       	rjmp	.+40     	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_56)
						case 56:
							eepAddrCtrl = ISB_OBJ_1BIT_56_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_56_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_56_EEADDR_VALUEINIT;
							break;
    2032:	66 e7       	ldi	r22, 0x76	; 118
    2034:	71 e0       	ldi	r23, 0x01	; 1
    2036:	47 e7       	ldi	r20, 0x77	; 119
    2038:	51 e0       	ldi	r21, 0x01	; 1
    203a:	28 e7       	ldi	r18, 0x78	; 120
    203c:	31 e0       	ldi	r19, 0x01	; 1
    203e:	0d c0       	rjmp	.+26     	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_57)
						case 57:
							eepAddrCtrl = ISB_OBJ_1BIT_57_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_57_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_57_EEADDR_VALUEINIT;
							break;
    2040:	69 e7       	ldi	r22, 0x79	; 121
    2042:	71 e0       	ldi	r23, 0x01	; 1
    2044:	4a e7       	ldi	r20, 0x7A	; 122
    2046:	51 e0       	ldi	r21, 0x01	; 1
    2048:	2b e7       	ldi	r18, 0x7B	; 123
    204a:	31 e0       	ldi	r19, 0x01	; 1
    204c:	06 c0       	rjmp	.+12     	; 0x205a <Isb_Obj_Init+0x38e>
					#if defined(ISB_OBJ_1BIT_58)
						case 58:
							eepAddrCtrl = ISB_OBJ_1BIT_58_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_1BIT_58_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_58_EEADDR_VALUEINIT;
							break;
    204e:	6c e7       	ldi	r22, 0x7C	; 124
    2050:	71 e0       	ldi	r23, 0x01	; 1
    2052:	4d e7       	ldi	r20, 0x7D	; 125
    2054:	51 e0       	ldi	r21, 0x01	; 1
    2056:	2e e7       	ldi	r18, 0x7E	; 126
    2058:	31 e0       	ldi	r19, 0x01	; 1
							eepAddrTov = ISB_OBJ_1BIT_63_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_1BIT_63_EEADDR_VALUEINIT;
							break;
					#endif /* ISB_OBJ_1BIT_63 */
				}
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    205a:	e8 2f       	mov	r30, r24
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	ee 0f       	add	r30, r30
    2060:	ff 1f       	adc	r31, r31
    2062:	e2 5e       	subi	r30, 0xE2	; 226
    2064:	fb 4f       	sbci	r31, 0xFB	; 251
    2066:	80 81       	ld	r24, Z
    2068:	80 ff       	sbrs	r24, 0
    206a:	26 c0       	rjmp	.+76     	; 0x20b8 <Isb_Obj_Init+0x3ec>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    206c:	f9 99       	sbic	0x1f, 1	; 31
    206e:	fe cf       	rjmp	.-4      	; 0x206c <Isb_Obj_Init+0x3a0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2070:	60 0f       	add	r22, r16
    2072:	71 1f       	adc	r23, r17
    2074:	72 bd       	out	0x22, r23	; 34
    2076:	61 bd       	out	0x21, r22	; 33
#endif
    EECR |= (1 << EERE);
    2078:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    207a:	80 b5       	in	r24, 0x20	; 32
					Isb_Obj_1Bit[ObjIndex].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddrCtrl);
    207c:	88 83       	st	Y, r24
					if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    207e:	fd 01       	movw	r30, r26
    2080:	ee 0f       	add	r30, r30
    2082:	ff 1f       	adc	r31, r31
    2084:	ee 0f       	add	r30, r30
    2086:	ff 1f       	adc	r31, r31
    2088:	ec 5b       	subi	r30, 0xBC	; 188
    208a:	fd 4f       	sbci	r31, 0xFD	; 253
    208c:	80 81       	ld	r24, Z
    208e:	80 ff       	sbrs	r24, 0
    2090:	13 c0       	rjmp	.+38     	; 0x20b8 <Isb_Obj_Init+0x3ec>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2092:	f9 99       	sbic	0x1f, 1	; 31
    2094:	fe cf       	rjmp	.-4      	; 0x2092 <Isb_Obj_Init+0x3c6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2096:	40 0f       	add	r20, r16
    2098:	51 1f       	adc	r21, r17
    209a:	52 bd       	out	0x22, r21	; 34
    209c:	41 bd       	out	0x21, r20	; 33
#endif
    EECR |= (1 << EERE);
    209e:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    20a0:	80 b5       	in	r24, 0x20	; 32
						Isb_Obj_1Bit[ObjIndex].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddrTov);
    20a2:	89 83       	std	Y+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    20a4:	f9 99       	sbic	0x1f, 1	; 31
    20a6:	fe cf       	rjmp	.-4      	; 0x20a4 <Isb_Obj_Init+0x3d8>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    20a8:	20 0f       	add	r18, r16
    20aa:	31 1f       	adc	r19, r17
    20ac:	32 bd       	out	0x22, r19	; 34
    20ae:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
    20b0:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    20b2:	80 b5       	in	r24, 0x20	; 32
						Isb_Obj_1Bit[ObjIndex].Value = lib_eep_fw_read_byte((uint8_t *)eepAddrValueInit);
    20b4:	8a 83       	std	Y+2, r24	; 0x02
						Isb_Obj_1Bit[ObjIndex].IsChanged = FALSE;
    20b6:	1b 82       	std	Y+3, r1	; 0x03
    20b8:	11 96       	adiw	r26, 0x01	; 1
    20ba:	24 96       	adiw	r28, 0x04	; 4


	void Isb_Obj_Init(void) {

		#if defined(ISB_OBJ_1BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
    20bc:	ac 33       	cpi	r26, 0x3C	; 60
    20be:	b1 05       	cpc	r27, r1
    20c0:	09 f0       	breq	.+2      	; 0x20c4 <Isb_Obj_Init+0x3f8>
    20c2:	10 ce       	rjmp	.-992    	; 0x1ce4 <Isb_Obj_Init+0x18>
    20c4:	cb e8       	ldi	r28, 0x8B	; 139
    20c6:	d1 e0       	ldi	r29, 0x01	; 1
    20c8:	a0 e0       	ldi	r26, 0x00	; 0
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
			}
		#endif /* ISB_OBJ_1BIT_MAX */

		#if defined(ISB_OBJ_4BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
				uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_4Bit_Ch_Array[ObjIndex]);
    20cc:	fd 01       	movw	r30, r26
    20ce:	e8 59       	subi	r30, 0x98	; 152
    20d0:	fe 4f       	sbci	r31, 0xFE	; 254
    20d2:	e4 91       	lpm	r30, Z+
				uint16_t eepAddrCtrl = 0;
				uint16_t eepAddrTov = 0;
				uint16_t eepAddrValueInit = 0;
				switch (ObjIndex) {
    20d4:	a3 30       	cpi	r26, 0x03	; 3
    20d6:	61 f1       	breq	.+88     	; 0x2130 <Isb_Obj_Init+0x464>
    20d8:	a4 30       	cpi	r26, 0x04	; 4
    20da:	28 f4       	brcc	.+10     	; 0x20e6 <Isb_Obj_Init+0x41a>
    20dc:	a1 30       	cpi	r26, 0x01	; 1
    20de:	d1 f0       	breq	.+52     	; 0x2114 <Isb_Obj_Init+0x448>
    20e0:	a2 30       	cpi	r26, 0x02	; 2
    20e2:	f8 f4       	brcc	.+62     	; 0x2122 <Isb_Obj_Init+0x456>
    20e4:	09 c0       	rjmp	.+18     	; 0x20f8 <Isb_Obj_Init+0x42c>
    20e6:	a5 30       	cpi	r26, 0x05	; 5
    20e8:	89 f1       	breq	.+98     	; 0x214c <Isb_Obj_Init+0x480>
    20ea:	a5 30       	cpi	r26, 0x05	; 5
    20ec:	40 f1       	brcs	.+80     	; 0x213e <Isb_Obj_Init+0x472>
    20ee:	a6 30       	cpi	r26, 0x06	; 6
    20f0:	a1 f1       	breq	.+104    	; 0x215a <Isb_Obj_Init+0x48e>
    20f2:	a7 30       	cpi	r26, 0x07	; 7
    20f4:	41 f4       	brne	.+16     	; 0x2106 <Isb_Obj_Init+0x43a>
    20f6:	38 c0       	rjmp	.+112    	; 0x2168 <Isb_Obj_Init+0x49c>
    20f8:	4e e0       	ldi	r20, 0x0E	; 14
    20fa:	50 e0       	ldi	r21, 0x00	; 0
    20fc:	6f e0       	ldi	r22, 0x0F	; 15
    20fe:	70 e0       	ldi	r23, 0x00	; 0
    2100:	20 e1       	ldi	r18, 0x10	; 16
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	37 c0       	rjmp	.+110    	; 0x2174 <Isb_Obj_Init+0x4a8>
    2106:	40 e0       	ldi	r20, 0x00	; 0
    2108:	50 e0       	ldi	r21, 0x00	; 0
    210a:	60 e0       	ldi	r22, 0x00	; 0
    210c:	70 e0       	ldi	r23, 0x00	; 0
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	30 c0       	rjmp	.+96     	; 0x2174 <Isb_Obj_Init+0x4a8>
    2114:	43 e2       	ldi	r20, 0x23	; 35
    2116:	50 e0       	ldi	r21, 0x00	; 0
    2118:	64 e2       	ldi	r22, 0x24	; 36
    211a:	70 e0       	ldi	r23, 0x00	; 0
    211c:	25 e2       	ldi	r18, 0x25	; 37
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	29 c0       	rjmp	.+82     	; 0x2174 <Isb_Obj_Init+0x4a8>
					#if defined(ISB_OBJ_4BIT_1)
						case 1:
							eepAddrCtrl = ISB_OBJ_4BIT_1_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_4BIT_1_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_1_EEADDR_VALUEINIT;
							break;
    2122:	48 e3       	ldi	r20, 0x38	; 56
    2124:	50 e0       	ldi	r21, 0x00	; 0
    2126:	69 e3       	ldi	r22, 0x39	; 57
    2128:	70 e0       	ldi	r23, 0x00	; 0
    212a:	2a e3       	ldi	r18, 0x3A	; 58
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	22 c0       	rjmp	.+68     	; 0x2174 <Isb_Obj_Init+0x4a8>
					#if defined(ISB_OBJ_4BIT_2)
						case 2:
							eepAddrCtrl = ISB_OBJ_4BIT_2_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_4BIT_2_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_2_EEADDR_VALUEINIT;
							break;
    2130:	4d e4       	ldi	r20, 0x4D	; 77
    2132:	50 e0       	ldi	r21, 0x00	; 0
    2134:	6e e4       	ldi	r22, 0x4E	; 78
    2136:	70 e0       	ldi	r23, 0x00	; 0
    2138:	2f e4       	ldi	r18, 0x4F	; 79
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	1b c0       	rjmp	.+54     	; 0x2174 <Isb_Obj_Init+0x4a8>
					#if defined(ISB_OBJ_4BIT_3)
						case 3:
							eepAddrCtrl = ISB_OBJ_4BIT_3_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_4BIT_3_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_3_EEADDR_VALUEINIT;
							break;
    213e:	42 e6       	ldi	r20, 0x62	; 98
    2140:	50 e0       	ldi	r21, 0x00	; 0
    2142:	63 e6       	ldi	r22, 0x63	; 99
    2144:	70 e0       	ldi	r23, 0x00	; 0
    2146:	24 e6       	ldi	r18, 0x64	; 100
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	14 c0       	rjmp	.+40     	; 0x2174 <Isb_Obj_Init+0x4a8>
					#if defined(ISB_OBJ_4BIT_4)
						case 4:
							eepAddrCtrl = ISB_OBJ_4BIT_4_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_4BIT_4_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_4_EEADDR_VALUEINIT;
							break;
    214c:	47 e7       	ldi	r20, 0x77	; 119
    214e:	50 e0       	ldi	r21, 0x00	; 0
    2150:	68 e7       	ldi	r22, 0x78	; 120
    2152:	70 e0       	ldi	r23, 0x00	; 0
    2154:	29 e7       	ldi	r18, 0x79	; 121
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	0d c0       	rjmp	.+26     	; 0x2174 <Isb_Obj_Init+0x4a8>
					#if defined(ISB_OBJ_4BIT_5)
						case 5:
							eepAddrCtrl = ISB_OBJ_4BIT_5_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_4BIT_5_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_5_EEADDR_VALUEINIT;
							break;
    215a:	4c e8       	ldi	r20, 0x8C	; 140
    215c:	50 e0       	ldi	r21, 0x00	; 0
    215e:	6d e8       	ldi	r22, 0x8D	; 141
    2160:	70 e0       	ldi	r23, 0x00	; 0
    2162:	2e e8       	ldi	r18, 0x8E	; 142
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	06 c0       	rjmp	.+12     	; 0x2174 <Isb_Obj_Init+0x4a8>
					#if defined(ISB_OBJ_4BIT_6)
						case 6:
							eepAddrCtrl = ISB_OBJ_4BIT_6_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_4BIT_6_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_6_EEADDR_VALUEINIT;
							break;
    2168:	41 ea       	ldi	r20, 0xA1	; 161
    216a:	50 e0       	ldi	r21, 0x00	; 0
    216c:	62 ea       	ldi	r22, 0xA2	; 162
    216e:	70 e0       	ldi	r23, 0x00	; 0
    2170:	23 ea       	ldi	r18, 0xA3	; 163
    2172:	30 e0       	ldi	r19, 0x00	; 0
							eepAddrTov = ISB_OBJ_4BIT_31_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_4BIT_31_EEADDR_VALUEINIT;
							break;
					#endif /* ISB_OBJ_4BIT_31 */
				}
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	ee 0f       	add	r30, r30
    2178:	ff 1f       	adc	r31, r31
    217a:	e2 5e       	subi	r30, 0xE2	; 226
    217c:	fb 4f       	sbci	r31, 0xFB	; 251
    217e:	80 81       	ld	r24, Z
    2180:	80 ff       	sbrs	r24, 0
    2182:	26 c0       	rjmp	.+76     	; 0x21d0 <Isb_Obj_Init+0x504>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2184:	f9 99       	sbic	0x1f, 1	; 31
    2186:	fe cf       	rjmp	.-4      	; 0x2184 <Isb_Obj_Init+0x4b8>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2188:	40 0f       	add	r20, r16
    218a:	51 1f       	adc	r21, r17
    218c:	52 bd       	out	0x22, r21	; 34
    218e:	41 bd       	out	0x21, r20	; 33
#endif
    EECR |= (1 << EERE);
    2190:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2192:	80 b5       	in	r24, 0x20	; 32
					Isb_Obj_4Bit[ObjIndex].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddrCtrl);
    2194:	88 83       	st	Y, r24
					if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    2196:	fd 01       	movw	r30, r26
    2198:	ee 0f       	add	r30, r30
    219a:	ff 1f       	adc	r31, r31
    219c:	ee 0f       	add	r30, r30
    219e:	ff 1f       	adc	r31, r31
    21a0:	e5 57       	subi	r30, 0x75	; 117
    21a2:	fe 4f       	sbci	r31, 0xFE	; 254
    21a4:	80 81       	ld	r24, Z
    21a6:	80 ff       	sbrs	r24, 0
    21a8:	13 c0       	rjmp	.+38     	; 0x21d0 <Isb_Obj_Init+0x504>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    21aa:	f9 99       	sbic	0x1f, 1	; 31
    21ac:	fe cf       	rjmp	.-4      	; 0x21aa <Isb_Obj_Init+0x4de>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    21ae:	60 0f       	add	r22, r16
    21b0:	71 1f       	adc	r23, r17
    21b2:	72 bd       	out	0x22, r23	; 34
    21b4:	61 bd       	out	0x21, r22	; 33
#endif
    EECR |= (1 << EERE);
    21b6:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    21b8:	80 b5       	in	r24, 0x20	; 32
						Isb_Obj_4Bit[ObjIndex].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddrTov);
    21ba:	89 83       	std	Y+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    21bc:	f9 99       	sbic	0x1f, 1	; 31
    21be:	fe cf       	rjmp	.-4      	; 0x21bc <Isb_Obj_Init+0x4f0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    21c0:	20 0f       	add	r18, r16
    21c2:	31 1f       	adc	r19, r17
    21c4:	32 bd       	out	0x22, r19	; 34
    21c6:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
    21c8:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    21ca:	80 b5       	in	r24, 0x20	; 32
						Isb_Obj_4Bit[ObjIndex].Value = lib_eep_fw_read_byte((uint8_t *)eepAddrValueInit);
    21cc:	8a 83       	std	Y+2, r24	; 0x02
						Isb_Obj_4Bit[ObjIndex].IsChanged = FALSE;
    21ce:	1b 82       	std	Y+3, r1	; 0x03
    21d0:	11 96       	adiw	r26, 0x01	; 1
    21d2:	24 96       	adiw	r28, 0x04	; 4
				}
			}
		#endif /* ISB_OBJ_1BIT_MAX */

		#if defined(ISB_OBJ_4BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
    21d4:	a8 30       	cpi	r26, 0x08	; 8
    21d6:	b1 05       	cpc	r27, r1
    21d8:	09 f0       	breq	.+2      	; 0x21dc <Isb_Obj_Init+0x510>
    21da:	78 cf       	rjmp	.-272    	; 0x20cc <Isb_Obj_Init+0x400>
    21dc:	cc ea       	ldi	r28, 0xAC	; 172
    21de:	d1 e0       	ldi	r29, 0x01	; 1
    21e0:	a0 e0       	ldi	r26, 0x00	; 0
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
			}
		#endif /* ISB_OBJ_4BIT_MAX */

		#if defined(ISB_OBJ_8BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
				uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_8Bit_Ch_Array[ObjIndex]);
    21e4:	fd 01       	movw	r30, r26
    21e6:	e0 59       	subi	r30, 0x90	; 144
    21e8:	fe 4f       	sbci	r31, 0xFE	; 254
    21ea:	e4 91       	lpm	r30, Z+
				uint16_t eepAddrCtrl = 0;
				uint16_t eepAddrTov = 0;
				uint16_t eepAddrValueInit = 0;
				switch (ObjIndex) {
    21ec:	a3 30       	cpi	r26, 0x03	; 3
    21ee:	61 f1       	breq	.+88     	; 0x2248 <Isb_Obj_Init+0x57c>
    21f0:	a4 30       	cpi	r26, 0x04	; 4
    21f2:	28 f4       	brcc	.+10     	; 0x21fe <Isb_Obj_Init+0x532>
    21f4:	a1 30       	cpi	r26, 0x01	; 1
    21f6:	d1 f0       	breq	.+52     	; 0x222c <Isb_Obj_Init+0x560>
    21f8:	a2 30       	cpi	r26, 0x02	; 2
    21fa:	f8 f4       	brcc	.+62     	; 0x223a <Isb_Obj_Init+0x56e>
    21fc:	09 c0       	rjmp	.+18     	; 0x2210 <Isb_Obj_Init+0x544>
    21fe:	a5 30       	cpi	r26, 0x05	; 5
    2200:	89 f1       	breq	.+98     	; 0x2264 <Isb_Obj_Init+0x598>
    2202:	a5 30       	cpi	r26, 0x05	; 5
    2204:	40 f1       	brcs	.+80     	; 0x2256 <Isb_Obj_Init+0x58a>
    2206:	a6 30       	cpi	r26, 0x06	; 6
    2208:	a1 f1       	breq	.+104    	; 0x2272 <Isb_Obj_Init+0x5a6>
    220a:	a7 30       	cpi	r26, 0x07	; 7
    220c:	41 f4       	brne	.+16     	; 0x221e <Isb_Obj_Init+0x552>
    220e:	38 c0       	rjmp	.+112    	; 0x2280 <Isb_Obj_Init+0x5b4>
    2210:	41 e1       	ldi	r20, 0x11	; 17
    2212:	50 e0       	ldi	r21, 0x00	; 0
    2214:	62 e1       	ldi	r22, 0x12	; 18
    2216:	70 e0       	ldi	r23, 0x00	; 0
    2218:	23 e1       	ldi	r18, 0x13	; 19
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	37 c0       	rjmp	.+110    	; 0x228c <Isb_Obj_Init+0x5c0>
    221e:	40 e0       	ldi	r20, 0x00	; 0
    2220:	50 e0       	ldi	r21, 0x00	; 0
    2222:	60 e0       	ldi	r22, 0x00	; 0
    2224:	70 e0       	ldi	r23, 0x00	; 0
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	30 c0       	rjmp	.+96     	; 0x228c <Isb_Obj_Init+0x5c0>
    222c:	46 e2       	ldi	r20, 0x26	; 38
    222e:	50 e0       	ldi	r21, 0x00	; 0
    2230:	67 e2       	ldi	r22, 0x27	; 39
    2232:	70 e0       	ldi	r23, 0x00	; 0
    2234:	28 e2       	ldi	r18, 0x28	; 40
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	29 c0       	rjmp	.+82     	; 0x228c <Isb_Obj_Init+0x5c0>
					#if defined(ISB_OBJ_8BIT_1)
						case 1:
							eepAddrCtrl = ISB_OBJ_8BIT_1_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_8BIT_1_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_1_EEADDR_VALUEINIT;
							break;
    223a:	4b e3       	ldi	r20, 0x3B	; 59
    223c:	50 e0       	ldi	r21, 0x00	; 0
    223e:	6c e3       	ldi	r22, 0x3C	; 60
    2240:	70 e0       	ldi	r23, 0x00	; 0
    2242:	2d e3       	ldi	r18, 0x3D	; 61
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	22 c0       	rjmp	.+68     	; 0x228c <Isb_Obj_Init+0x5c0>
					#if defined(ISB_OBJ_8BIT_2)
						case 2:
							eepAddrCtrl = ISB_OBJ_8BIT_2_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_8BIT_2_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_2_EEADDR_VALUEINIT;
							break;
    2248:	40 e5       	ldi	r20, 0x50	; 80
    224a:	50 e0       	ldi	r21, 0x00	; 0
    224c:	61 e5       	ldi	r22, 0x51	; 81
    224e:	70 e0       	ldi	r23, 0x00	; 0
    2250:	22 e5       	ldi	r18, 0x52	; 82
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	1b c0       	rjmp	.+54     	; 0x228c <Isb_Obj_Init+0x5c0>
					#if defined(ISB_OBJ_8BIT_3)
						case 3:
							eepAddrCtrl = ISB_OBJ_8BIT_3_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_8BIT_3_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_3_EEADDR_VALUEINIT;
							break;
    2256:	45 e6       	ldi	r20, 0x65	; 101
    2258:	50 e0       	ldi	r21, 0x00	; 0
    225a:	66 e6       	ldi	r22, 0x66	; 102
    225c:	70 e0       	ldi	r23, 0x00	; 0
    225e:	27 e6       	ldi	r18, 0x67	; 103
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	14 c0       	rjmp	.+40     	; 0x228c <Isb_Obj_Init+0x5c0>
					#if defined(ISB_OBJ_8BIT_4)
						case 4:
							eepAddrCtrl = ISB_OBJ_8BIT_4_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_8BIT_4_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_4_EEADDR_VALUEINIT;
							break;
    2264:	4a e7       	ldi	r20, 0x7A	; 122
    2266:	50 e0       	ldi	r21, 0x00	; 0
    2268:	6b e7       	ldi	r22, 0x7B	; 123
    226a:	70 e0       	ldi	r23, 0x00	; 0
    226c:	2c e7       	ldi	r18, 0x7C	; 124
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	0d c0       	rjmp	.+26     	; 0x228c <Isb_Obj_Init+0x5c0>
					#if defined(ISB_OBJ_8BIT_5)
						case 5:
							eepAddrCtrl = ISB_OBJ_8BIT_5_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_8BIT_5_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_5_EEADDR_VALUEINIT;
							break;
    2272:	4f e8       	ldi	r20, 0x8F	; 143
    2274:	50 e0       	ldi	r21, 0x00	; 0
    2276:	60 e9       	ldi	r22, 0x90	; 144
    2278:	70 e0       	ldi	r23, 0x00	; 0
    227a:	21 e9       	ldi	r18, 0x91	; 145
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	06 c0       	rjmp	.+12     	; 0x228c <Isb_Obj_Init+0x5c0>
					#if defined(ISB_OBJ_8BIT_6)
						case 6:
							eepAddrCtrl = ISB_OBJ_8BIT_6_EEADDR_CTRL;
							eepAddrTov = ISB_OBJ_8BIT_6_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_6_EEADDR_VALUEINIT;
							break;
    2280:	44 ea       	ldi	r20, 0xA4	; 164
    2282:	50 e0       	ldi	r21, 0x00	; 0
    2284:	65 ea       	ldi	r22, 0xA5	; 165
    2286:	70 e0       	ldi	r23, 0x00	; 0
    2288:	26 ea       	ldi	r18, 0xA6	; 166
    228a:	30 e0       	ldi	r19, 0x00	; 0
							eepAddrTov = ISB_OBJ_8BIT_31_EEADDR_TOV;
							eepAddrValueInit = ISB_OBJ_8BIT_31_EEADDR_VALUEINIT;
							break;
					#endif /* ISB_OBJ_8BIT_31 */
				}
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	ee 0f       	add	r30, r30
    2290:	ff 1f       	adc	r31, r31
    2292:	e2 5e       	subi	r30, 0xE2	; 226
    2294:	fb 4f       	sbci	r31, 0xFB	; 251
    2296:	80 81       	ld	r24, Z
    2298:	80 ff       	sbrs	r24, 0
    229a:	26 c0       	rjmp	.+76     	; 0x22e8 <Isb_Obj_Init+0x61c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    229c:	f9 99       	sbic	0x1f, 1	; 31
    229e:	fe cf       	rjmp	.-4      	; 0x229c <Isb_Obj_Init+0x5d0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    22a0:	40 0f       	add	r20, r16
    22a2:	51 1f       	adc	r21, r17
    22a4:	52 bd       	out	0x22, r21	; 34
    22a6:	41 bd       	out	0x21, r20	; 33
#endif
    EECR |= (1 << EERE);
    22a8:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    22aa:	80 b5       	in	r24, 0x20	; 32
					Isb_Obj_8Bit[ObjIndex].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddrCtrl);
    22ac:	88 83       	st	Y, r24
					if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    22ae:	fd 01       	movw	r30, r26
    22b0:	ee 0f       	add	r30, r30
    22b2:	ff 1f       	adc	r31, r31
    22b4:	ee 0f       	add	r30, r30
    22b6:	ff 1f       	adc	r31, r31
    22b8:	e4 55       	subi	r30, 0x54	; 84
    22ba:	fe 4f       	sbci	r31, 0xFE	; 254
    22bc:	80 81       	ld	r24, Z
    22be:	80 ff       	sbrs	r24, 0
    22c0:	13 c0       	rjmp	.+38     	; 0x22e8 <Isb_Obj_Init+0x61c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    22c2:	f9 99       	sbic	0x1f, 1	; 31
    22c4:	fe cf       	rjmp	.-4      	; 0x22c2 <Isb_Obj_Init+0x5f6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    22c6:	60 0f       	add	r22, r16
    22c8:	71 1f       	adc	r23, r17
    22ca:	72 bd       	out	0x22, r23	; 34
    22cc:	61 bd       	out	0x21, r22	; 33
#endif
    EECR |= (1 << EERE);
    22ce:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    22d0:	80 b5       	in	r24, 0x20	; 32
						Isb_Obj_8Bit[ObjIndex].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddrTov);
    22d2:	89 83       	std	Y+1, r24	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    22d4:	f9 99       	sbic	0x1f, 1	; 31
    22d6:	fe cf       	rjmp	.-4      	; 0x22d4 <Isb_Obj_Init+0x608>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    22d8:	20 0f       	add	r18, r16
    22da:	31 1f       	adc	r19, r17
    22dc:	32 bd       	out	0x22, r19	; 34
    22de:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
    22e0:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    22e2:	80 b5       	in	r24, 0x20	; 32
						Isb_Obj_8Bit[ObjIndex].Value = lib_eep_fw_read_byte((uint8_t *)eepAddrValueInit);
    22e4:	8a 83       	std	Y+2, r24	; 0x02
						Isb_Obj_8Bit[ObjIndex].IsChanged = FALSE;
    22e6:	1b 82       	std	Y+3, r1	; 0x03
    22e8:	11 96       	adiw	r26, 0x01	; 1
    22ea:	24 96       	adiw	r28, 0x04	; 4
				}
			}
		#endif /* ISB_OBJ_4BIT_MAX */

		#if defined(ISB_OBJ_8BIT_MAX)
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
    22ec:	a8 30       	cpi	r26, 0x08	; 8
    22ee:	b1 05       	cpc	r27, r1
    22f0:	09 f0       	breq	.+2      	; 0x22f4 <Isb_Obj_Init+0x628>
    22f2:	78 cf       	rjmp	.-272    	; 0x21e4 <Isb_Obj_Init+0x518>
					}
				}
			}
		#endif /* ISB_OBJ_FLOAT_MAX */

	}
    22f4:	df 91       	pop	r29
    22f6:	cf 91       	pop	r28
    22f8:	1f 91       	pop	r17
    22fa:	0f 91       	pop	r16
    22fc:	08 95       	ret

000022fe <Isb_Grp_Init>:
#ifndef ISB_GRP_C_
	#define ISB_GRP_C_



	void Isb_Grp_Init(void) {
    22fe:	80 91 36 01 	lds	r24, 0x0136
    2302:	28 2f       	mov	r18, r24
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	2e 57       	subi	r18, 0x7E	; 126
    2308:	3e 4f       	sbci	r19, 0xFE	; 254
    230a:	ec ec       	ldi	r30, 0xCC	; 204
    230c:	f1 e0       	ldi	r31, 0x01	; 1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    230e:	f9 99       	sbic	0x1f, 1	; 31
    2310:	fe cf       	rjmp	.-4      	; 0x230e <Isb_Grp_Init+0x10>
    2312:	22 50       	subi	r18, 0x02	; 2
    2314:	30 40       	sbci	r19, 0x00	; 0
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2316:	32 bd       	out	0x22, r19	; 34
    2318:	21 bd       	out	0x21, r18	; 33
    231a:	2e 5f       	subi	r18, 0xFE	; 254
    231c:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
    EECR |= (1 << EERE);
    231e:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2320:	90 b5       	in	r25, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2322:	f9 99       	sbic	0x1f, 1	; 31
    2324:	fe cf       	rjmp	.-4      	; 0x2322 <Isb_Grp_Init+0x24>
    2326:	21 50       	subi	r18, 0x01	; 1
    2328:	30 40       	sbci	r19, 0x00	; 0
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    232a:	32 bd       	out	0x22, r19	; 34
    232c:	21 bd       	out	0x21, r18	; 33
    232e:	2f 5f       	subi	r18, 0xFF	; 255
    2330:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
    EECR |= (1 << EERE);
    2332:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2334:	80 b5       	in	r24, 0x20	; 32
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
			Isb_Grp[GrpIndex].Id = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3));
			Isb_Grp[GrpIndex].Id |= lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 1)) << 8;
    2336:	58 2f       	mov	r21, r24
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	89 2f       	mov	r24, r25
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	84 2b       	or	r24, r20
    2340:	95 2b       	or	r25, r21
    2342:	91 83       	std	Z+1, r25	; 0x01
    2344:	80 83       	st	Z, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2346:	f9 99       	sbic	0x1f, 1	; 31
    2348:	fe cf       	rjmp	.-4      	; 0x2346 <Isb_Grp_Init+0x48>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    234a:	32 bd       	out	0x22, r19	; 34
    234c:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
    234e:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2350:	80 b5       	in	r24, 0x20	; 32
			Isb_Grp[GrpIndex].Obj = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 2));
    2352:	82 83       	std	Z+2, r24	; 0x02
    2354:	2d 5f       	subi	r18, 0xFD	; 253
    2356:	3f 4f       	sbci	r19, 0xFF	; 255
    2358:	33 96       	adiw	r30, 0x03	; 3
	#define ISB_GRP_C_



	void Isb_Grp_Init(void) {
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    235a:	82 e0       	ldi	r24, 0x02	; 2
    235c:	e4 34       	cpi	r30, 0x44	; 68
    235e:	f8 07       	cpc	r31, r24
    2360:	b1 f6       	brne	.-84     	; 0x230e <Isb_Grp_Init+0x10>
			Isb_Grp[GrpIndex].Id = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3));
			Isb_Grp[GrpIndex].Id |= lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 1)) << 8;
			Isb_Grp[GrpIndex].Obj = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 2));
		}
	}
    2362:	08 95       	ret

00002364 <Node_Reboot>:
	#include "./../lib/isb_obj.c"
	#include "./../lib/isb_grp.c"



	void Node_Reboot(void) {
    2364:	ff cf       	rjmp	.-2      	; 0x2364 <Node_Reboot>

00002366 <Isb_SendMsg>:
		while (1) ;
	}



	void Isb_SendMsg(Isb_Msg_t * aMsg) {
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	ec 01       	movw	r28, r24
		#endif /* ISB_INF_USART0 == 1 */
		#if ISB_INF_USART1 == 1
			Isb_Inf_Usart_Tx(1, aMsg);
		#endif /* ISB_INF_USART1 == 1 */
		#if ISB_INF_CAN0 == 1
			Isb_Inf_Can_Tx(0, aMsg);
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	be 01       	movw	r22, r28
    2370:	0e 94 ba 04 	call	0x974	; 0x974 <Isb_Inf_Can_Tx>
			Isb_Inf_Can_Tx(1, aMsg);
		#endif /* ISB_INF_CAN1 == 1 */
		#if ISB_INF_CAN2 == 1
			Isb_Inf_Can_Tx(2, aMsg);
		#endif /* ISB_INF_CAN2 == 1 */
		if ((aMsg->Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_MULTICAST) {
    2374:	88 81       	ld	r24, Y
    2376:	80 73       	andi	r24, 0x30	; 48
    2378:	80 32       	cpi	r24, 0x20	; 32
    237a:	39 f4       	brne	.+14     	; 0x238a <Isb_SendMsg+0x24>
			if (Error == 0) {
    237c:	80 91 38 01 	lds	r24, 0x0138
    2380:	88 23       	and	r24, r24
    2382:	19 f4       	brne	.+6      	; 0x238a <Isb_SendMsg+0x24>
				Isb_Obj_Rx(aMsg);
    2384:	ce 01       	movw	r24, r28
    2386:	0e 94 c8 11 	call	0x2390	; 0x2390 <Isb_Obj_Rx>
			}
		}
	}
    238a:	df 91       	pop	r29
    238c:	cf 91       	pop	r28
    238e:	08 95       	ret

00002390 <Isb_Obj_Rx>:

	}



	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg) {
    2390:	3f 92       	push	r3
    2392:	4f 92       	push	r4
    2394:	5f 92       	push	r5
    2396:	6f 92       	push	r6
    2398:	7f 92       	push	r7
    239a:	8f 92       	push	r8
    239c:	9f 92       	push	r9
    239e:	af 92       	push	r10
    23a0:	bf 92       	push	r11
    23a2:	cf 92       	push	r12
    23a4:	df 92       	push	r13
    23a6:	ef 92       	push	r14
    23a8:	ff 92       	push	r15
    23aa:	0f 93       	push	r16
    23ac:	1f 93       	push	r17
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	2d 97       	sbiw	r28, 0x0d	; 13
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
    23c2:	8c 01       	movw	r16, r24
    23c4:	fc ec       	ldi	r31, 0xCC	; 204
    23c6:	8f 2e       	mov	r8, r31
    23c8:	f1 e0       	ldi	r31, 0x01	; 1
    23ca:	9f 2e       	mov	r9, r31
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE) {
											if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE)) {
												if (aIsb_Msg->Data[2] == Isb_Obj_1Bit[ObjIndex].Tov) {
													if (Isb_Obj_1Bit[ObjIndex].Value != aIsb_Msg->Data[3]) {
														Isb_Obj_1Bit[ObjIndex].Value = aIsb_Msg->Data[3];
														Isb_Obj_1Bit[ObjIndex].IsChanged = TRUE;
    23cc:	44 24       	eor	r4, r4
    23ce:	43 94       	inc	r4
												TxMsg.SourceId = Isb_Node_Id;
												TxMsg.Data[0] = ISB_MSG_TOP_1BIT;
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
												TxMsg.Data[2] = Isb_Obj_1Bit[ObjIndex].Tov;
												TxMsg.Data[3] = Isb_Obj_1Bit[ObjIndex].Value;
												Isb_SendMsg(&TxMsg);
    23d0:	3e 01       	movw	r6, r28
    23d2:	08 94       	sec
    23d4:	61 1c       	adc	r6, r1
    23d6:	71 1c       	adc	r7, r1
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE) {
											if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE)) {
												if (aIsb_Msg->Data[2] == Isb_Obj_8Bit[ObjIndex].Tov) {
													if (Isb_Obj_8Bit[ObjIndex].Value != aIsb_Msg->Data[3]) {
														Isb_Obj_8Bit[ObjIndex].Value = aIsb_Msg->Data[3];
														Isb_Obj_8Bit[ObjIndex].IsChanged = TRUE;
    23d8:	33 24       	eor	r3, r3
    23da:	33 94       	inc	r3
								if ((aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK) == ISB_MSG_FLAGS_DLC_4) {
									if (aIsb_Msg->Data[0] == ISB_MSG_TOP_8BIT) {
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ) {
											if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ)) {
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    23dc:	e4 e2       	ldi	r30, 0x24	; 36
    23de:	5e 2e       	mov	r5, r30



	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg) {
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
			if ((aIsb_Msg->DestId == Isb_Grp[GrpIndex].Id) & (aIsb_Msg->DestId != 0)) {
    23e0:	f8 01       	movw	r30, r16
    23e2:	21 81       	ldd	r18, Z+1	; 0x01
    23e4:	32 81       	ldd	r19, Z+2	; 0x02
    23e6:	f4 01       	movw	r30, r8
    23e8:	80 81       	ld	r24, Z
    23ea:	91 81       	ldd	r25, Z+1	; 0x01
    23ec:	28 17       	cp	r18, r24
    23ee:	39 07       	cpc	r19, r25
    23f0:	09 f0       	breq	.+2      	; 0x23f4 <Isb_Obj_Rx+0x64>
    23f2:	77 c1       	rjmp	.+750    	; 0x26e2 <Isb_Obj_Rx+0x352>
    23f4:	23 2b       	or	r18, r19
    23f6:	09 f4       	brne	.+2      	; 0x23fa <Isb_Obj_Rx+0x6a>
    23f8:	74 c1       	rjmp	.+744    	; 0x26e2 <Isb_Obj_Rx+0x352>
    23fa:	75 e4       	ldi	r23, 0x45	; 69
    23fc:	e7 2e       	mov	r14, r23
    23fe:	72 e0       	ldi	r23, 0x02	; 2
    2400:	f7 2e       	mov	r15, r23
    2402:	aa 24       	eor	r10, r10
    2404:	bb 24       	eor	r11, r11

				#if defined(ISB_OBJ_1BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
//						uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_1Bit_Ch_Array[ObjIndex]);
						uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_1Bit_Obj_Array[ObjIndex]);
    2406:	f5 01       	movw	r30, r10
    2408:	e0 52       	subi	r30, 0x20	; 32
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	94 91       	lpm	r25, Z+
						if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    240e:	65 01       	movw	r12, r10
    2410:	cc 0c       	add	r12, r12
    2412:	dd 1c       	adc	r13, r13
    2414:	cc 0c       	add	r12, r12
    2416:	dd 1c       	adc	r13, r13
    2418:	24 e4       	ldi	r18, 0x44	; 68
    241a:	32 e0       	ldi	r19, 0x02	; 2
    241c:	c2 0e       	add	r12, r18
    241e:	d3 1e       	adc	r13, r19
    2420:	f6 01       	movw	r30, r12
    2422:	80 81       	ld	r24, Z
    2424:	80 ff       	sbrs	r24, 0
    2426:	59 c0       	rjmp	.+178    	; 0x24da <Isb_Obj_Rx+0x14a>
							if (Obj == Isb_Grp[GrpIndex].Obj) {
    2428:	f4 01       	movw	r30, r8
    242a:	82 81       	ldd	r24, Z+2	; 0x02
    242c:	98 17       	cp	r25, r24
    242e:	09 f0       	breq	.+2      	; 0x2432 <Isb_Obj_Rx+0xa2>
    2430:	54 c0       	rjmp	.+168    	; 0x24da <Isb_Obj_Rx+0x14a>
								if ((aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK) == ISB_MSG_FLAGS_DLC_4) {
    2432:	f8 01       	movw	r30, r16
    2434:	80 81       	ld	r24, Z
    2436:	8f 70       	andi	r24, 0x0F	; 15
    2438:	84 30       	cpi	r24, 0x04	; 4
    243a:	09 f0       	breq	.+2      	; 0x243e <Isb_Obj_Rx+0xae>
    243c:	4e c0       	rjmp	.+156    	; 0x24da <Isb_Obj_Rx+0x14a>
									if (aIsb_Msg->Data[0] == ISB_MSG_TOP_1BIT) {
    243e:	25 81       	ldd	r18, Z+5	; 0x05
    2440:	21 30       	cpi	r18, 0x01	; 1
    2442:	09 f0       	breq	.+2      	; 0x2446 <Isb_Obj_Rx+0xb6>
    2444:	4a c0       	rjmp	.+148    	; 0x24da <Isb_Obj_Rx+0x14a>
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ) {
    2446:	86 81       	ldd	r24, Z+6	; 0x06
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	83 70       	andi	r24, 0x03	; 3
    244c:	90 70       	andi	r25, 0x00	; 0
    244e:	89 2b       	or	r24, r25
    2450:	d1 f4       	brne	.+52     	; 0x2486 <Isb_Obj_Rx+0xf6>
											if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ)) {
    2452:	f6 01       	movw	r30, r12
    2454:	80 81       	ld	r24, Z
    2456:	81 ff       	sbrs	r24, 1
    2458:	16 c0       	rjmp	.+44     	; 0x2486 <Isb_Obj_Rx+0xf6>
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    245a:	59 82       	std	Y+1, r5	; 0x01
												TxMsg.DestId = aIsb_Msg->DestId;
    245c:	f8 01       	movw	r30, r16
    245e:	81 81       	ldd	r24, Z+1	; 0x01
    2460:	92 81       	ldd	r25, Z+2	; 0x02
    2462:	9b 83       	std	Y+3, r25	; 0x03
    2464:	8a 83       	std	Y+2, r24	; 0x02
												TxMsg.SourceId = Isb_Node_Id;
    2466:	80 91 34 01 	lds	r24, 0x0134
    246a:	90 91 35 01 	lds	r25, 0x0135
    246e:	9d 83       	std	Y+5, r25	; 0x05
    2470:	8c 83       	std	Y+4, r24	; 0x04
												TxMsg.Data[0] = ISB_MSG_TOP_1BIT;
    2472:	2e 83       	std	Y+6, r18	; 0x06
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
    2474:	2f 83       	std	Y+7, r18	; 0x07
												TxMsg.Data[2] = Isb_Obj_1Bit[ObjIndex].Tov;
    2476:	f7 01       	movw	r30, r14
    2478:	80 81       	ld	r24, Z
    247a:	88 87       	std	Y+8, r24	; 0x08
												TxMsg.Data[3] = Isb_Obj_1Bit[ObjIndex].Value;
    247c:	81 81       	ldd	r24, Z+1	; 0x01
    247e:	89 87       	std	Y+9, r24	; 0x09
												Isb_SendMsg(&TxMsg);
    2480:	c3 01       	movw	r24, r6
    2482:	0e 94 b3 11 	call	0x2366	; 0x2366 <Isb_SendMsg>
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_ANSWER) {
    2486:	f8 01       	movw	r30, r16
    2488:	86 81       	ldd	r24, Z+6	; 0x06
    248a:	83 70       	andi	r24, 0x03	; 3
    248c:	81 30       	cpi	r24, 0x01	; 1
    248e:	71 f4       	brne	.+28     	; 0x24ac <Isb_Obj_Rx+0x11c>
											if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_UPDATE)) {
    2490:	f6 01       	movw	r30, r12
    2492:	80 81       	ld	r24, Z
    2494:	84 ff       	sbrs	r24, 4
    2496:	0a c0       	rjmp	.+20     	; 0x24ac <Isb_Obj_Rx+0x11c>
												if (aIsb_Msg->Data[2] == Isb_Obj_1Bit[ObjIndex].Tov) {
    2498:	f8 01       	movw	r30, r16
    249a:	97 81       	ldd	r25, Z+7	; 0x07
    249c:	f7 01       	movw	r30, r14
    249e:	80 81       	ld	r24, Z
    24a0:	98 17       	cp	r25, r24
    24a2:	21 f4       	brne	.+8      	; 0x24ac <Isb_Obj_Rx+0x11c>
													Isb_Obj_1Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    24a4:	f8 01       	movw	r30, r16
    24a6:	80 85       	ldd	r24, Z+8	; 0x08
    24a8:	f7 01       	movw	r30, r14
    24aa:	81 83       	std	Z+1, r24	; 0x01
												}
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE) {
    24ac:	f8 01       	movw	r30, r16
    24ae:	86 81       	ldd	r24, Z+6	; 0x06
    24b0:	83 70       	andi	r24, 0x03	; 3
    24b2:	82 30       	cpi	r24, 0x02	; 2
    24b4:	91 f4       	brne	.+36     	; 0x24da <Isb_Obj_Rx+0x14a>
											if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE)) {
    24b6:	f6 01       	movw	r30, r12
    24b8:	80 81       	ld	r24, Z
    24ba:	82 ff       	sbrs	r24, 2
    24bc:	0e c0       	rjmp	.+28     	; 0x24da <Isb_Obj_Rx+0x14a>
												if (aIsb_Msg->Data[2] == Isb_Obj_1Bit[ObjIndex].Tov) {
    24be:	f8 01       	movw	r30, r16
    24c0:	97 81       	ldd	r25, Z+7	; 0x07
    24c2:	f7 01       	movw	r30, r14
    24c4:	80 81       	ld	r24, Z
    24c6:	98 17       	cp	r25, r24
    24c8:	41 f4       	brne	.+16     	; 0x24da <Isb_Obj_Rx+0x14a>
													if (Isb_Obj_1Bit[ObjIndex].Value != aIsb_Msg->Data[3]) {
    24ca:	f8 01       	movw	r30, r16
    24cc:	90 85       	ldd	r25, Z+8	; 0x08
    24ce:	f7 01       	movw	r30, r14
    24d0:	81 81       	ldd	r24, Z+1	; 0x01
    24d2:	89 17       	cp	r24, r25
    24d4:	11 f0       	breq	.+4      	; 0x24da <Isb_Obj_Rx+0x14a>
														Isb_Obj_1Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    24d6:	91 83       	std	Z+1, r25	; 0x01
														Isb_Obj_1Bit[ObjIndex].IsChanged = TRUE;
    24d8:	42 82       	std	Z+2, r4	; 0x02
    24da:	08 94       	sec
    24dc:	a1 1c       	adc	r10, r1
    24de:	b1 1c       	adc	r11, r1
    24e0:	24 e0       	ldi	r18, 0x04	; 4
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	e2 0e       	add	r14, r18
    24e6:	f3 1e       	adc	r15, r19
	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg) {
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
			if ((aIsb_Msg->DestId == Isb_Grp[GrpIndex].Id) & (aIsb_Msg->DestId != 0)) {

				#if defined(ISB_OBJ_1BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
    24e8:	3c e3       	ldi	r19, 0x3C	; 60
    24ea:	a3 16       	cp	r10, r19
    24ec:	b1 04       	cpc	r11, r1
    24ee:	09 f0       	breq	.+2      	; 0x24f2 <Isb_Obj_Rx+0x162>
    24f0:	8a cf       	rjmp	.-236    	; 0x2406 <Isb_Obj_Rx+0x76>
    24f2:	5c e8       	ldi	r21, 0x8C	; 140
    24f4:	e5 2e       	mov	r14, r21
    24f6:	51 e0       	ldi	r21, 0x01	; 1
    24f8:	f5 2e       	mov	r15, r21
    24fa:	aa 24       	eor	r10, r10
    24fc:	bb 24       	eor	r11, r11
				#endif /* ISB_OBJ_1BIT_MAX */

				#if defined(ISB_OBJ_4BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
//						uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_4Bit_Ch_Array[ObjIndex]);
						uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_4Bit_Obj_Array[ObjIndex]);
    24fe:	f5 01       	movw	r30, r10
    2500:	e4 5e       	subi	r30, 0xE4	; 228
    2502:	fe 4f       	sbci	r31, 0xFE	; 254
    2504:	94 91       	lpm	r25, Z+
						if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    2506:	65 01       	movw	r12, r10
    2508:	cc 0c       	add	r12, r12
    250a:	dd 1c       	adc	r13, r13
    250c:	cc 0c       	add	r12, r12
    250e:	dd 1c       	adc	r13, r13
    2510:	eb e8       	ldi	r30, 0x8B	; 139
    2512:	f1 e0       	ldi	r31, 0x01	; 1
    2514:	ce 0e       	add	r12, r30
    2516:	df 1e       	adc	r13, r31
    2518:	f6 01       	movw	r30, r12
    251a:	80 81       	ld	r24, Z
    251c:	80 ff       	sbrs	r24, 0
    251e:	59 c0       	rjmp	.+178    	; 0x25d2 <Isb_Obj_Rx+0x242>
							if (Obj == Isb_Grp[GrpIndex].Obj) {
    2520:	f4 01       	movw	r30, r8
    2522:	82 81       	ldd	r24, Z+2	; 0x02
    2524:	98 17       	cp	r25, r24
    2526:	09 f0       	breq	.+2      	; 0x252a <Isb_Obj_Rx+0x19a>
    2528:	54 c0       	rjmp	.+168    	; 0x25d2 <Isb_Obj_Rx+0x242>
								if ((aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK) == ISB_MSG_FLAGS_DLC_4) {
    252a:	f8 01       	movw	r30, r16
    252c:	80 81       	ld	r24, Z
    252e:	8f 70       	andi	r24, 0x0F	; 15
    2530:	84 30       	cpi	r24, 0x04	; 4
    2532:	09 f0       	breq	.+2      	; 0x2536 <Isb_Obj_Rx+0x1a6>
    2534:	4e c0       	rjmp	.+156    	; 0x25d2 <Isb_Obj_Rx+0x242>
									if (aIsb_Msg->Data[0] == ISB_MSG_TOP_4BIT) {
    2536:	25 81       	ldd	r18, Z+5	; 0x05
    2538:	22 30       	cpi	r18, 0x02	; 2
    253a:	09 f0       	breq	.+2      	; 0x253e <Isb_Obj_Rx+0x1ae>
    253c:	4a c0       	rjmp	.+148    	; 0x25d2 <Isb_Obj_Rx+0x242>
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ) {
    253e:	86 81       	ldd	r24, Z+6	; 0x06
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	83 70       	andi	r24, 0x03	; 3
    2544:	90 70       	andi	r25, 0x00	; 0
    2546:	89 2b       	or	r24, r25
    2548:	d1 f4       	brne	.+52     	; 0x257e <Isb_Obj_Rx+0x1ee>
											if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ)) {
    254a:	f6 01       	movw	r30, r12
    254c:	80 81       	ld	r24, Z
    254e:	81 ff       	sbrs	r24, 1
    2550:	16 c0       	rjmp	.+44     	; 0x257e <Isb_Obj_Rx+0x1ee>
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    2552:	59 82       	std	Y+1, r5	; 0x01
												TxMsg.DestId = aIsb_Msg->DestId;
    2554:	f8 01       	movw	r30, r16
    2556:	81 81       	ldd	r24, Z+1	; 0x01
    2558:	92 81       	ldd	r25, Z+2	; 0x02
    255a:	9b 83       	std	Y+3, r25	; 0x03
    255c:	8a 83       	std	Y+2, r24	; 0x02
												TxMsg.SourceId = Isb_Node_Id;
    255e:	80 91 34 01 	lds	r24, 0x0134
    2562:	90 91 35 01 	lds	r25, 0x0135
    2566:	9d 83       	std	Y+5, r25	; 0x05
    2568:	8c 83       	std	Y+4, r24	; 0x04
												TxMsg.Data[0] = ISB_MSG_TOP_4BIT;
    256a:	2e 83       	std	Y+6, r18	; 0x06
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
    256c:	3f 82       	std	Y+7, r3	; 0x07
												TxMsg.Data[2] = Isb_Obj_4Bit[ObjIndex].Tov;
    256e:	f7 01       	movw	r30, r14
    2570:	80 81       	ld	r24, Z
    2572:	88 87       	std	Y+8, r24	; 0x08
												TxMsg.Data[3] = Isb_Obj_4Bit[ObjIndex].Value;
    2574:	81 81       	ldd	r24, Z+1	; 0x01
    2576:	89 87       	std	Y+9, r24	; 0x09
												Isb_SendMsg(&TxMsg);
    2578:	c3 01       	movw	r24, r6
    257a:	0e 94 b3 11 	call	0x2366	; 0x2366 <Isb_SendMsg>
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_ANSWER) {
    257e:	f8 01       	movw	r30, r16
    2580:	86 81       	ldd	r24, Z+6	; 0x06
    2582:	83 70       	andi	r24, 0x03	; 3
    2584:	81 30       	cpi	r24, 0x01	; 1
    2586:	71 f4       	brne	.+28     	; 0x25a4 <Isb_Obj_Rx+0x214>
											if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_UPDATE)) {
    2588:	f6 01       	movw	r30, r12
    258a:	80 81       	ld	r24, Z
    258c:	84 ff       	sbrs	r24, 4
    258e:	0a c0       	rjmp	.+20     	; 0x25a4 <Isb_Obj_Rx+0x214>
												if (aIsb_Msg->Data[2] == Isb_Obj_4Bit[ObjIndex].Tov) {
    2590:	f8 01       	movw	r30, r16
    2592:	97 81       	ldd	r25, Z+7	; 0x07
    2594:	f7 01       	movw	r30, r14
    2596:	80 81       	ld	r24, Z
    2598:	98 17       	cp	r25, r24
    259a:	21 f4       	brne	.+8      	; 0x25a4 <Isb_Obj_Rx+0x214>
													Isb_Obj_4Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    259c:	f8 01       	movw	r30, r16
    259e:	80 85       	ldd	r24, Z+8	; 0x08
    25a0:	f7 01       	movw	r30, r14
    25a2:	81 83       	std	Z+1, r24	; 0x01
												}
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE) {
    25a4:	f8 01       	movw	r30, r16
    25a6:	86 81       	ldd	r24, Z+6	; 0x06
    25a8:	83 70       	andi	r24, 0x03	; 3
    25aa:	82 30       	cpi	r24, 0x02	; 2
    25ac:	91 f4       	brne	.+36     	; 0x25d2 <Isb_Obj_Rx+0x242>
											if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE)) {
    25ae:	f6 01       	movw	r30, r12
    25b0:	80 81       	ld	r24, Z
    25b2:	82 ff       	sbrs	r24, 2
    25b4:	0e c0       	rjmp	.+28     	; 0x25d2 <Isb_Obj_Rx+0x242>
												if (aIsb_Msg->Data[2] == Isb_Obj_4Bit[ObjIndex].Tov) {
    25b6:	f8 01       	movw	r30, r16
    25b8:	97 81       	ldd	r25, Z+7	; 0x07
    25ba:	f7 01       	movw	r30, r14
    25bc:	80 81       	ld	r24, Z
    25be:	98 17       	cp	r25, r24
    25c0:	41 f4       	brne	.+16     	; 0x25d2 <Isb_Obj_Rx+0x242>
													if (Isb_Obj_4Bit[ObjIndex].Value != aIsb_Msg->Data[3]) {
    25c2:	f8 01       	movw	r30, r16
    25c4:	90 85       	ldd	r25, Z+8	; 0x08
    25c6:	f7 01       	movw	r30, r14
    25c8:	81 81       	ldd	r24, Z+1	; 0x01
    25ca:	89 17       	cp	r24, r25
    25cc:	11 f0       	breq	.+4      	; 0x25d2 <Isb_Obj_Rx+0x242>
														Isb_Obj_4Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    25ce:	91 83       	std	Z+1, r25	; 0x01
														Isb_Obj_4Bit[ObjIndex].IsChanged = TRUE;
    25d0:	42 82       	std	Z+2, r4	; 0x02
    25d2:	08 94       	sec
    25d4:	a1 1c       	adc	r10, r1
    25d6:	b1 1c       	adc	r11, r1
    25d8:	24 e0       	ldi	r18, 0x04	; 4
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	e2 0e       	add	r14, r18
    25de:	f3 1e       	adc	r15, r19
						}
					}
				#endif /* ISB_OBJ_1BIT_MAX */

				#if defined(ISB_OBJ_4BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
    25e0:	38 e0       	ldi	r19, 0x08	; 8
    25e2:	a3 16       	cp	r10, r19
    25e4:	b1 04       	cpc	r11, r1
    25e6:	09 f0       	breq	.+2      	; 0x25ea <Isb_Obj_Rx+0x25a>
    25e8:	8a cf       	rjmp	.-236    	; 0x24fe <Isb_Obj_Rx+0x16e>
    25ea:	3d ea       	ldi	r19, 0xAD	; 173
    25ec:	e3 2e       	mov	r14, r19
    25ee:	31 e0       	ldi	r19, 0x01	; 1
    25f0:	f3 2e       	mov	r15, r19
    25f2:	aa 24       	eor	r10, r10
    25f4:	bb 24       	eor	r11, r11
				#endif /* ISB_OBJ_4BIT_MAX */

				#if defined(ISB_OBJ_8BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
//						uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_8Bit_Ch_Array[ObjIndex]);
						uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_8Bit_Obj_Array[ObjIndex]);
    25f6:	f5 01       	movw	r30, r10
    25f8:	ec 5d       	subi	r30, 0xDC	; 220
    25fa:	fe 4f       	sbci	r31, 0xFE	; 254
    25fc:	94 91       	lpm	r25, Z+
						if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    25fe:	65 01       	movw	r12, r10
    2600:	cc 0c       	add	r12, r12
    2602:	dd 1c       	adc	r13, r13
    2604:	cc 0c       	add	r12, r12
    2606:	dd 1c       	adc	r13, r13
    2608:	ec ea       	ldi	r30, 0xAC	; 172
    260a:	f1 e0       	ldi	r31, 0x01	; 1
    260c:	ce 0e       	add	r12, r30
    260e:	df 1e       	adc	r13, r31
    2610:	f6 01       	movw	r30, r12
    2612:	80 81       	ld	r24, Z
    2614:	80 ff       	sbrs	r24, 0
    2616:	59 c0       	rjmp	.+178    	; 0x26ca <Isb_Obj_Rx+0x33a>
							if (Obj == Isb_Grp[GrpIndex].Obj) {
    2618:	f4 01       	movw	r30, r8
    261a:	82 81       	ldd	r24, Z+2	; 0x02
    261c:	98 17       	cp	r25, r24
    261e:	09 f0       	breq	.+2      	; 0x2622 <Isb_Obj_Rx+0x292>
    2620:	54 c0       	rjmp	.+168    	; 0x26ca <Isb_Obj_Rx+0x33a>
								if ((aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK) == ISB_MSG_FLAGS_DLC_4) {
    2622:	f8 01       	movw	r30, r16
    2624:	80 81       	ld	r24, Z
    2626:	8f 70       	andi	r24, 0x0F	; 15
    2628:	84 30       	cpi	r24, 0x04	; 4
    262a:	09 f0       	breq	.+2      	; 0x262e <Isb_Obj_Rx+0x29e>
    262c:	4e c0       	rjmp	.+156    	; 0x26ca <Isb_Obj_Rx+0x33a>
									if (aIsb_Msg->Data[0] == ISB_MSG_TOP_8BIT) {
    262e:	25 81       	ldd	r18, Z+5	; 0x05
    2630:	23 30       	cpi	r18, 0x03	; 3
    2632:	09 f0       	breq	.+2      	; 0x2636 <Isb_Obj_Rx+0x2a6>
    2634:	4a c0       	rjmp	.+148    	; 0x26ca <Isb_Obj_Rx+0x33a>
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ) {
    2636:	86 81       	ldd	r24, Z+6	; 0x06
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	83 70       	andi	r24, 0x03	; 3
    263c:	90 70       	andi	r25, 0x00	; 0
    263e:	89 2b       	or	r24, r25
    2640:	d1 f4       	brne	.+52     	; 0x2676 <Isb_Obj_Rx+0x2e6>
											if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ)) {
    2642:	f6 01       	movw	r30, r12
    2644:	80 81       	ld	r24, Z
    2646:	81 ff       	sbrs	r24, 1
    2648:	16 c0       	rjmp	.+44     	; 0x2676 <Isb_Obj_Rx+0x2e6>
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    264a:	59 82       	std	Y+1, r5	; 0x01
												TxMsg.DestId = aIsb_Msg->DestId;
    264c:	f8 01       	movw	r30, r16
    264e:	81 81       	ldd	r24, Z+1	; 0x01
    2650:	92 81       	ldd	r25, Z+2	; 0x02
    2652:	9b 83       	std	Y+3, r25	; 0x03
    2654:	8a 83       	std	Y+2, r24	; 0x02
												TxMsg.SourceId = Isb_Node_Id;
    2656:	80 91 34 01 	lds	r24, 0x0134
    265a:	90 91 35 01 	lds	r25, 0x0135
    265e:	9d 83       	std	Y+5, r25	; 0x05
    2660:	8c 83       	std	Y+4, r24	; 0x04
												TxMsg.Data[0] = ISB_MSG_TOP_8BIT;
    2662:	2e 83       	std	Y+6, r18	; 0x06
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
    2664:	3f 82       	std	Y+7, r3	; 0x07
												TxMsg.Data[2] = Isb_Obj_8Bit[ObjIndex].Tov;
    2666:	f7 01       	movw	r30, r14
    2668:	80 81       	ld	r24, Z
    266a:	88 87       	std	Y+8, r24	; 0x08
												TxMsg.Data[3] = Isb_Obj_8Bit[ObjIndex].Value;
    266c:	81 81       	ldd	r24, Z+1	; 0x01
    266e:	89 87       	std	Y+9, r24	; 0x09
												Isb_SendMsg(&TxMsg);
    2670:	c3 01       	movw	r24, r6
    2672:	0e 94 b3 11 	call	0x2366	; 0x2366 <Isb_SendMsg>
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_ANSWER) {
    2676:	f8 01       	movw	r30, r16
    2678:	86 81       	ldd	r24, Z+6	; 0x06
    267a:	83 70       	andi	r24, 0x03	; 3
    267c:	81 30       	cpi	r24, 0x01	; 1
    267e:	71 f4       	brne	.+28     	; 0x269c <Isb_Obj_Rx+0x30c>
											if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_UPDATE)) {
    2680:	f6 01       	movw	r30, r12
    2682:	80 81       	ld	r24, Z
    2684:	84 ff       	sbrs	r24, 4
    2686:	0a c0       	rjmp	.+20     	; 0x269c <Isb_Obj_Rx+0x30c>
												if (aIsb_Msg->Data[2] == Isb_Obj_8Bit[ObjIndex].Tov) {
    2688:	f8 01       	movw	r30, r16
    268a:	97 81       	ldd	r25, Z+7	; 0x07
    268c:	f7 01       	movw	r30, r14
    268e:	80 81       	ld	r24, Z
    2690:	98 17       	cp	r25, r24
    2692:	21 f4       	brne	.+8      	; 0x269c <Isb_Obj_Rx+0x30c>
													Isb_Obj_8Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    2694:	f8 01       	movw	r30, r16
    2696:	80 85       	ldd	r24, Z+8	; 0x08
    2698:	f7 01       	movw	r30, r14
    269a:	81 83       	std	Z+1, r24	; 0x01
												}
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE) {
    269c:	f8 01       	movw	r30, r16
    269e:	86 81       	ldd	r24, Z+6	; 0x06
    26a0:	83 70       	andi	r24, 0x03	; 3
    26a2:	82 30       	cpi	r24, 0x02	; 2
    26a4:	91 f4       	brne	.+36     	; 0x26ca <Isb_Obj_Rx+0x33a>
											if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE)) {
    26a6:	f6 01       	movw	r30, r12
    26a8:	80 81       	ld	r24, Z
    26aa:	82 ff       	sbrs	r24, 2
    26ac:	0e c0       	rjmp	.+28     	; 0x26ca <Isb_Obj_Rx+0x33a>
												if (aIsb_Msg->Data[2] == Isb_Obj_8Bit[ObjIndex].Tov) {
    26ae:	f8 01       	movw	r30, r16
    26b0:	97 81       	ldd	r25, Z+7	; 0x07
    26b2:	f7 01       	movw	r30, r14
    26b4:	80 81       	ld	r24, Z
    26b6:	98 17       	cp	r25, r24
    26b8:	41 f4       	brne	.+16     	; 0x26ca <Isb_Obj_Rx+0x33a>
													if (Isb_Obj_8Bit[ObjIndex].Value != aIsb_Msg->Data[3]) {
    26ba:	f8 01       	movw	r30, r16
    26bc:	90 85       	ldd	r25, Z+8	; 0x08
    26be:	f7 01       	movw	r30, r14
    26c0:	81 81       	ldd	r24, Z+1	; 0x01
    26c2:	89 17       	cp	r24, r25
    26c4:	11 f0       	breq	.+4      	; 0x26ca <Isb_Obj_Rx+0x33a>
														Isb_Obj_8Bit[ObjIndex].Value = aIsb_Msg->Data[3];
    26c6:	91 83       	std	Z+1, r25	; 0x01
														Isb_Obj_8Bit[ObjIndex].IsChanged = TRUE;
    26c8:	42 82       	std	Z+2, r4	; 0x02
    26ca:	08 94       	sec
    26cc:	a1 1c       	adc	r10, r1
    26ce:	b1 1c       	adc	r11, r1
    26d0:	24 e0       	ldi	r18, 0x04	; 4
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	e2 0e       	add	r14, r18
    26d6:	f3 1e       	adc	r15, r19
						}
					}
				#endif /* ISB_OBJ_4BIT_MAX */

				#if defined(ISB_OBJ_8BIT_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
    26d8:	38 e0       	ldi	r19, 0x08	; 8
    26da:	a3 16       	cp	r10, r19
    26dc:	b1 04       	cpc	r11, r1
    26de:	09 f0       	breq	.+2      	; 0x26e2 <Isb_Obj_Rx+0x352>
    26e0:	8a cf       	rjmp	.-236    	; 0x25f6 <Isb_Obj_Rx+0x266>
    26e2:	83 e0       	ldi	r24, 0x03	; 3
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	88 0e       	add	r8, r24
    26e8:	99 1e       	adc	r9, r25
	}



	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg) {
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    26ea:	94 e4       	ldi	r25, 0x44	; 68
    26ec:	89 16       	cp	r8, r25
    26ee:	92 e0       	ldi	r25, 0x02	; 2
    26f0:	99 06       	cpc	r9, r25
    26f2:	09 f0       	breq	.+2      	; 0x26f6 <Isb_Obj_Rx+0x366>
    26f4:	75 ce       	rjmp	.-790    	; 0x23e0 <Isb_Obj_Rx+0x50>
					}
				#endif /* ISB_OBJ_FLOAT_MAX */

			}
		}
	}
    26f6:	2d 96       	adiw	r28, 0x0d	; 13
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	1f 91       	pop	r17
    2708:	0f 91       	pop	r16
    270a:	ff 90       	pop	r15
    270c:	ef 90       	pop	r14
    270e:	df 90       	pop	r13
    2710:	cf 90       	pop	r12
    2712:	bf 90       	pop	r11
    2714:	af 90       	pop	r10
    2716:	9f 90       	pop	r9
    2718:	8f 90       	pop	r8
    271a:	7f 90       	pop	r7
    271c:	6f 90       	pop	r6
    271e:	5f 90       	pop	r5
    2720:	4f 90       	pop	r4
    2722:	3f 90       	pop	r3
    2724:	08 95       	ret

00002726 <Isb_Obj_Exec>:

	}



	void Isb_Obj_Exec(void) {
    2726:	7f 92       	push	r7
    2728:	8f 92       	push	r8
    272a:	9f 92       	push	r9
    272c:	af 92       	push	r10
    272e:	bf 92       	push	r11
    2730:	cf 92       	push	r12
    2732:	df 92       	push	r13
    2734:	ef 92       	push	r14
    2736:	ff 92       	push	r15
    2738:	0f 93       	push	r16
    273a:	1f 93       	push	r17
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	2d 97       	sbiw	r28, 0x0d	; 13
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61

		#if defined(ISB_OBJ_1BIT_MAX)
			if (bit_is_set(Isb_Obj_1Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
    2750:	80 91 42 01 	lds	r24, 0x0142
    2754:	80 ff       	sbrs	r24, 0
    2756:	71 c0       	rjmp	.+226    	; 0x283a <Isb_Obj_Exec+0x114>
    2758:	04 e4       	ldi	r16, 0x44	; 68
    275a:	12 e0       	ldi	r17, 0x02	; 2
    275c:	cc 24       	eor	r12, r12
    275e:	dd 24       	eor	r13, r13
								if (Isb_Obj_1Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_1Bit_Obj_Array[ObjIndex]);
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    2760:	84 e2       	ldi	r24, 0x24	; 36
    2762:	78 2e       	mov	r7, r24
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
											TxMsg.SourceId = Isb_Node_Id;
											TxMsg.Data[0] = ISB_MSG_TOP_1BIT;
    2764:	88 24       	eor	r8, r8
    2766:	83 94       	inc	r8
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    2768:	b2 e0       	ldi	r27, 0x02	; 2
    276a:	9b 2e       	mov	r9, r27
											TxMsg.Data[2] = Isb_Obj_1Bit[ObjIndex].Tov;
											TxMsg.Data[3] = Isb_Obj_1Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
    276c:	5e 01       	movw	r10, r28
    276e:	08 94       	sec
    2770:	a1 1c       	adc	r10, r1
    2772:	b1 1c       	adc	r11, r1
	void Isb_Obj_Exec(void) {

		#if defined(ISB_OBJ_1BIT_MAX)
			if (bit_is_set(Isb_Obj_1Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_1Bit_Ch_Array[ObjIndex]);
    2774:	f6 01       	movw	r30, r12
    2776:	e4 5d       	subi	r30, 0xD4	; 212
    2778:	fe 4f       	sbci	r31, 0xFE	; 254
    277a:	e4 91       	lpm	r30, Z+
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	ee 0f       	add	r30, r30
    2780:	ff 1f       	adc	r31, r31
    2782:	e2 5e       	subi	r30, 0xE2	; 226
    2784:	fb 4f       	sbci	r31, 0xFB	; 251
    2786:	80 81       	ld	r24, Z
    2788:	80 ff       	sbrs	r24, 0
    278a:	48 c0       	rjmp	.+144    	; 0x281c <Isb_Obj_Exec+0xf6>
						if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    278c:	76 01       	movw	r14, r12
    278e:	ee 0c       	add	r14, r14
    2790:	ff 1c       	adc	r15, r15
    2792:	ee 0c       	add	r14, r14
    2794:	ff 1c       	adc	r15, r15
    2796:	84 e4       	ldi	r24, 0x44	; 68
    2798:	92 e0       	ldi	r25, 0x02	; 2
    279a:	e8 0e       	add	r14, r24
    279c:	f9 1e       	adc	r15, r25
    279e:	f7 01       	movw	r30, r14
    27a0:	80 81       	ld	r24, Z
    27a2:	80 ff       	sbrs	r24, 0
    27a4:	3b c0       	rjmp	.+118    	; 0x281c <Isb_Obj_Exec+0xf6>
							if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
    27a6:	80 81       	ld	r24, Z
    27a8:	83 ff       	sbrs	r24, 3
    27aa:	30 c0       	rjmp	.+96     	; 0x280c <Isb_Obj_Exec+0xe6>
								if (Isb_Obj_1Bit[ObjIndex].IsChanged == TRUE) {
    27ac:	f8 01       	movw	r30, r16
    27ae:	83 81       	ldd	r24, Z+3	; 0x03
    27b0:	81 30       	cpi	r24, 0x01	; 1
    27b2:	61 f5       	brne	.+88     	; 0x280c <Isb_Obj_Exec+0xe6>
    27b4:	ac ec       	ldi	r26, 0xCC	; 204
    27b6:	b1 e0       	ldi	r27, 0x01	; 1
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_1Bit_Obj_Array[ObjIndex]);
    27b8:	f6 01       	movw	r30, r12
    27ba:	e0 52       	subi	r30, 0x20	; 32
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	94 91       	lpm	r25, Z+
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
    27c0:	2d 91       	ld	r18, X+
    27c2:	3c 91       	ld	r19, X
    27c4:	11 97       	sbiw	r26, 0x01	; 1
    27c6:	12 96       	adiw	r26, 0x02	; 2
    27c8:	8c 91       	ld	r24, X
    27ca:	12 97       	sbiw	r26, 0x02	; 2
    27cc:	89 17       	cp	r24, r25
    27ce:	b9 f4       	brne	.+46     	; 0x27fe <Isb_Obj_Exec+0xd8>
    27d0:	21 15       	cp	r18, r1
    27d2:	31 05       	cpc	r19, r1
    27d4:	a1 f0       	breq	.+40     	; 0x27fe <Isb_Obj_Exec+0xd8>
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    27d6:	79 82       	std	Y+1, r7	; 0x01
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
    27d8:	3b 83       	std	Y+3, r19	; 0x03
    27da:	2a 83       	std	Y+2, r18	; 0x02
											TxMsg.SourceId = Isb_Node_Id;
    27dc:	80 91 34 01 	lds	r24, 0x0134
    27e0:	90 91 35 01 	lds	r25, 0x0135
    27e4:	9d 83       	std	Y+5, r25	; 0x05
    27e6:	8c 83       	std	Y+4, r24	; 0x04
											TxMsg.Data[0] = ISB_MSG_TOP_1BIT;
    27e8:	8e 82       	std	Y+6, r8	; 0x06
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    27ea:	9f 82       	std	Y+7, r9	; 0x07
											TxMsg.Data[2] = Isb_Obj_1Bit[ObjIndex].Tov;
    27ec:	f8 01       	movw	r30, r16
    27ee:	81 81       	ldd	r24, Z+1	; 0x01
    27f0:	88 87       	std	Y+8, r24	; 0x08
											TxMsg.Data[3] = Isb_Obj_1Bit[ObjIndex].Value;
    27f2:	82 81       	ldd	r24, Z+2	; 0x02
    27f4:	89 87       	std	Y+9, r24	; 0x09
											Isb_SendMsg(&TxMsg);
    27f6:	c5 01       	movw	r24, r10
    27f8:	0e 94 b3 11 	call	0x2366	; 0x2366 <Isb_SendMsg>
    27fc:	05 c0       	rjmp	.+10     	; 0x2808 <Isb_Obj_Exec+0xe2>
											break;
    27fe:	13 96       	adiw	r26, 0x03	; 3
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_1Bit_Ch_Array[ObjIndex]);
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
						if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
							if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
								if (Isb_Obj_1Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    2800:	f2 e0       	ldi	r31, 0x02	; 2
    2802:	a4 34       	cpi	r26, 0x44	; 68
    2804:	bf 07       	cpc	r27, r31
    2806:	e1 f6       	brne	.-72     	; 0x27c0 <Isb_Obj_Exec+0x9a>
											TxMsg.Data[3] = Isb_Obj_1Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
											break;
										}
									}
									Isb_Obj_1Bit[ObjIndex].IsChanged = FALSE;
    2808:	f8 01       	movw	r30, r16
    280a:	13 82       	std	Z+3, r1	; 0x03
								}
							}
							if (bit_is_set(Isb_Obj_1Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READONINIT)) {
    280c:	f7 01       	movw	r30, r14
    280e:	80 81       	ld	r24, Z
    2810:	85 ff       	sbrs	r24, 5
    2812:	04 c0       	rjmp	.+8      	; 0x281c <Isb_Obj_Exec+0xf6>
								// TODO;
								Isb_Obj_1Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    2814:	f8 01       	movw	r30, r16
    2816:	80 81       	ld	r24, Z
    2818:	8f 7d       	andi	r24, 0xDF	; 223
    281a:	80 83       	st	Z, r24
    281c:	08 94       	sec
    281e:	c1 1c       	adc	r12, r1
    2820:	d1 1c       	adc	r13, r1
    2822:	0c 5f       	subi	r16, 0xFC	; 252
    2824:	1f 4f       	sbci	r17, 0xFF	; 255

	void Isb_Obj_Exec(void) {

		#if defined(ISB_OBJ_1BIT_MAX)
			if (bit_is_set(Isb_Obj_1Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_1BIT_MAX; ObjIndex++) {
    2826:	fc e3       	ldi	r31, 0x3C	; 60
    2828:	cf 16       	cp	r12, r31
    282a:	d1 04       	cpc	r13, r1
    282c:	09 f0       	breq	.+2      	; 0x2830 <Isb_Obj_Exec+0x10a>
    282e:	a2 cf       	rjmp	.-188    	; 0x2774 <Isb_Obj_Exec+0x4e>
								Isb_Obj_1Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
							}
						}
					}
				}
				Isb_Obj_1Bit_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    2830:	80 91 42 01 	lds	r24, 0x0142
    2834:	8e 7f       	andi	r24, 0xFE	; 254
    2836:	80 93 42 01 	sts	0x0142, r24
			}
		#endif /* ISB_OBJ_1BIT_MAX */

		#if defined(ISB_OBJ_4BIT_MAX)
			if (bit_is_set(Isb_Obj_4Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
    283a:	80 91 45 01 	lds	r24, 0x0145
    283e:	80 ff       	sbrs	r24, 0
    2840:	6f c0       	rjmp	.+222    	; 0x2920 <Isb_Obj_Exec+0x1fa>
    2842:	0b e8       	ldi	r16, 0x8B	; 139
    2844:	11 e0       	ldi	r17, 0x01	; 1
    2846:	cc 24       	eor	r12, r12
    2848:	dd 24       	eor	r13, r13
								if (Isb_Obj_4Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_4Bit_Obj_Array[ObjIndex]);
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    284a:	64 e2       	ldi	r22, 0x24	; 36
    284c:	86 2e       	mov	r8, r22
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
											TxMsg.SourceId = Isb_Node_Id;
											TxMsg.Data[0] = ISB_MSG_TOP_4BIT;
    284e:	52 e0       	ldi	r21, 0x02	; 2
    2850:	95 2e       	mov	r9, r21
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
											TxMsg.Data[2] = Isb_Obj_4Bit[ObjIndex].Tov;
											TxMsg.Data[3] = Isb_Obj_4Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
    2852:	5e 01       	movw	r10, r28
    2854:	08 94       	sec
    2856:	a1 1c       	adc	r10, r1
    2858:	b1 1c       	adc	r11, r1
		#endif /* ISB_OBJ_1BIT_MAX */

		#if defined(ISB_OBJ_4BIT_MAX)
			if (bit_is_set(Isb_Obj_4Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_4Bit_Ch_Array[ObjIndex]);
    285a:	f6 01       	movw	r30, r12
    285c:	e8 59       	subi	r30, 0x98	; 152
    285e:	fe 4f       	sbci	r31, 0xFE	; 254
    2860:	e4 91       	lpm	r30, Z+
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	ee 0f       	add	r30, r30
    2866:	ff 1f       	adc	r31, r31
    2868:	e2 5e       	subi	r30, 0xE2	; 226
    286a:	fb 4f       	sbci	r31, 0xFB	; 251
    286c:	80 81       	ld	r24, Z
    286e:	80 ff       	sbrs	r24, 0
    2870:	48 c0       	rjmp	.+144    	; 0x2902 <Isb_Obj_Exec+0x1dc>
						if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    2872:	76 01       	movw	r14, r12
    2874:	ee 0c       	add	r14, r14
    2876:	ff 1c       	adc	r15, r15
    2878:	ee 0c       	add	r14, r14
    287a:	ff 1c       	adc	r15, r15
    287c:	8b e8       	ldi	r24, 0x8B	; 139
    287e:	91 e0       	ldi	r25, 0x01	; 1
    2880:	e8 0e       	add	r14, r24
    2882:	f9 1e       	adc	r15, r25
    2884:	f7 01       	movw	r30, r14
    2886:	80 81       	ld	r24, Z
    2888:	80 ff       	sbrs	r24, 0
    288a:	3b c0       	rjmp	.+118    	; 0x2902 <Isb_Obj_Exec+0x1dc>
							if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
    288c:	80 81       	ld	r24, Z
    288e:	83 ff       	sbrs	r24, 3
    2890:	30 c0       	rjmp	.+96     	; 0x28f2 <Isb_Obj_Exec+0x1cc>
								if (Isb_Obj_4Bit[ObjIndex].IsChanged == TRUE) {
    2892:	f8 01       	movw	r30, r16
    2894:	83 81       	ldd	r24, Z+3	; 0x03
    2896:	81 30       	cpi	r24, 0x01	; 1
    2898:	61 f5       	brne	.+88     	; 0x28f2 <Isb_Obj_Exec+0x1cc>
    289a:	ac ec       	ldi	r26, 0xCC	; 204
    289c:	b1 e0       	ldi	r27, 0x01	; 1
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_4Bit_Obj_Array[ObjIndex]);
    289e:	f6 01       	movw	r30, r12
    28a0:	e4 5e       	subi	r30, 0xE4	; 228
    28a2:	fe 4f       	sbci	r31, 0xFE	; 254
    28a4:	94 91       	lpm	r25, Z+
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
    28a6:	2d 91       	ld	r18, X+
    28a8:	3c 91       	ld	r19, X
    28aa:	11 97       	sbiw	r26, 0x01	; 1
    28ac:	12 96       	adiw	r26, 0x02	; 2
    28ae:	8c 91       	ld	r24, X
    28b0:	12 97       	sbiw	r26, 0x02	; 2
    28b2:	89 17       	cp	r24, r25
    28b4:	b9 f4       	brne	.+46     	; 0x28e4 <Isb_Obj_Exec+0x1be>
    28b6:	21 15       	cp	r18, r1
    28b8:	31 05       	cpc	r19, r1
    28ba:	a1 f0       	breq	.+40     	; 0x28e4 <Isb_Obj_Exec+0x1be>
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    28bc:	89 82       	std	Y+1, r8	; 0x01
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
    28be:	3b 83       	std	Y+3, r19	; 0x03
    28c0:	2a 83       	std	Y+2, r18	; 0x02
											TxMsg.SourceId = Isb_Node_Id;
    28c2:	80 91 34 01 	lds	r24, 0x0134
    28c6:	90 91 35 01 	lds	r25, 0x0135
    28ca:	9d 83       	std	Y+5, r25	; 0x05
    28cc:	8c 83       	std	Y+4, r24	; 0x04
											TxMsg.Data[0] = ISB_MSG_TOP_4BIT;
    28ce:	9e 82       	std	Y+6, r9	; 0x06
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    28d0:	9f 82       	std	Y+7, r9	; 0x07
											TxMsg.Data[2] = Isb_Obj_4Bit[ObjIndex].Tov;
    28d2:	f8 01       	movw	r30, r16
    28d4:	81 81       	ldd	r24, Z+1	; 0x01
    28d6:	88 87       	std	Y+8, r24	; 0x08
											TxMsg.Data[3] = Isb_Obj_4Bit[ObjIndex].Value;
    28d8:	82 81       	ldd	r24, Z+2	; 0x02
    28da:	89 87       	std	Y+9, r24	; 0x09
											Isb_SendMsg(&TxMsg);
    28dc:	c5 01       	movw	r24, r10
    28de:	0e 94 b3 11 	call	0x2366	; 0x2366 <Isb_SendMsg>
    28e2:	05 c0       	rjmp	.+10     	; 0x28ee <Isb_Obj_Exec+0x1c8>
											break;
    28e4:	13 96       	adiw	r26, 0x03	; 3
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_4Bit_Ch_Array[ObjIndex]);
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
						if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
							if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
								if (Isb_Obj_4Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    28e6:	f2 e0       	ldi	r31, 0x02	; 2
    28e8:	a4 34       	cpi	r26, 0x44	; 68
    28ea:	bf 07       	cpc	r27, r31
    28ec:	e1 f6       	brne	.-72     	; 0x28a6 <Isb_Obj_Exec+0x180>
											TxMsg.Data[3] = Isb_Obj_4Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
											break;
										}
									}
									Isb_Obj_4Bit[ObjIndex].IsChanged = FALSE;
    28ee:	f8 01       	movw	r30, r16
    28f0:	13 82       	std	Z+3, r1	; 0x03
								}
							}
							if (bit_is_set(Isb_Obj_4Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READONINIT)) {
    28f2:	f7 01       	movw	r30, r14
    28f4:	80 81       	ld	r24, Z
    28f6:	85 ff       	sbrs	r24, 5
    28f8:	04 c0       	rjmp	.+8      	; 0x2902 <Isb_Obj_Exec+0x1dc>
								// TODO;
								Isb_Obj_4Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    28fa:	f8 01       	movw	r30, r16
    28fc:	80 81       	ld	r24, Z
    28fe:	8f 7d       	andi	r24, 0xDF	; 223
    2900:	80 83       	st	Z, r24
    2902:	08 94       	sec
    2904:	c1 1c       	adc	r12, r1
    2906:	d1 1c       	adc	r13, r1
    2908:	0c 5f       	subi	r16, 0xFC	; 252
    290a:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		#endif /* ISB_OBJ_1BIT_MAX */

		#if defined(ISB_OBJ_4BIT_MAX)
			if (bit_is_set(Isb_Obj_4Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_4BIT_MAX; ObjIndex++) {
    290c:	f8 e0       	ldi	r31, 0x08	; 8
    290e:	cf 16       	cp	r12, r31
    2910:	d1 04       	cpc	r13, r1
    2912:	09 f0       	breq	.+2      	; 0x2916 <Isb_Obj_Exec+0x1f0>
    2914:	a2 cf       	rjmp	.-188    	; 0x285a <Isb_Obj_Exec+0x134>
								Isb_Obj_4Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
							}
						}
					}
				}
				Isb_Obj_4Bit_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    2916:	80 91 45 01 	lds	r24, 0x0145
    291a:	8e 7f       	andi	r24, 0xFE	; 254
    291c:	80 93 45 01 	sts	0x0145, r24
			}
		#endif /* ISB_OBJ_4BIT_MAX */

		#if defined(ISB_OBJ_8BIT_MAX)
			if (bit_is_set(Isb_Obj_8Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
    2920:	80 91 48 01 	lds	r24, 0x0148
    2924:	80 ff       	sbrs	r24, 0
    2926:	71 c0       	rjmp	.+226    	; 0x2a0a <Isb_Obj_Exec+0x2e4>
    2928:	0c ea       	ldi	r16, 0xAC	; 172
    292a:	11 e0       	ldi	r17, 0x01	; 1
    292c:	cc 24       	eor	r12, r12
    292e:	dd 24       	eor	r13, r13
								if (Isb_Obj_8Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_8Bit_Obj_Array[ObjIndex]);
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    2930:	24 e2       	ldi	r18, 0x24	; 36
    2932:	72 2e       	mov	r7, r18
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
											TxMsg.SourceId = Isb_Node_Id;
											TxMsg.Data[0] = ISB_MSG_TOP_8BIT;
    2934:	93 e0       	ldi	r25, 0x03	; 3
    2936:	89 2e       	mov	r8, r25
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    2938:	82 e0       	ldi	r24, 0x02	; 2
    293a:	98 2e       	mov	r9, r24
											TxMsg.Data[2] = Isb_Obj_8Bit[ObjIndex].Tov;
											TxMsg.Data[3] = Isb_Obj_8Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
    293c:	5e 01       	movw	r10, r28
    293e:	08 94       	sec
    2940:	a1 1c       	adc	r10, r1
    2942:	b1 1c       	adc	r11, r1
		#endif /* ISB_OBJ_4BIT_MAX */

		#if defined(ISB_OBJ_8BIT_MAX)
			if (bit_is_set(Isb_Obj_8Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_8Bit_Ch_Array[ObjIndex]);
    2944:	f6 01       	movw	r30, r12
    2946:	e0 59       	subi	r30, 0x90	; 144
    2948:	fe 4f       	sbci	r31, 0xFE	; 254
    294a:	e4 91       	lpm	r30, Z+
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	ee 0f       	add	r30, r30
    2950:	ff 1f       	adc	r31, r31
    2952:	e2 5e       	subi	r30, 0xE2	; 226
    2954:	fb 4f       	sbci	r31, 0xFB	; 251
    2956:	80 81       	ld	r24, Z
    2958:	80 ff       	sbrs	r24, 0
    295a:	48 c0       	rjmp	.+144    	; 0x29ec <Isb_Obj_Exec+0x2c6>
						if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
    295c:	76 01       	movw	r14, r12
    295e:	ee 0c       	add	r14, r14
    2960:	ff 1c       	adc	r15, r15
    2962:	ee 0c       	add	r14, r14
    2964:	ff 1c       	adc	r15, r15
    2966:	8c ea       	ldi	r24, 0xAC	; 172
    2968:	91 e0       	ldi	r25, 0x01	; 1
    296a:	e8 0e       	add	r14, r24
    296c:	f9 1e       	adc	r15, r25
    296e:	f7 01       	movw	r30, r14
    2970:	80 81       	ld	r24, Z
    2972:	80 ff       	sbrs	r24, 0
    2974:	3b c0       	rjmp	.+118    	; 0x29ec <Isb_Obj_Exec+0x2c6>
							if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
    2976:	80 81       	ld	r24, Z
    2978:	83 ff       	sbrs	r24, 3
    297a:	30 c0       	rjmp	.+96     	; 0x29dc <Isb_Obj_Exec+0x2b6>
								if (Isb_Obj_8Bit[ObjIndex].IsChanged == TRUE) {
    297c:	f8 01       	movw	r30, r16
    297e:	83 81       	ldd	r24, Z+3	; 0x03
    2980:	81 30       	cpi	r24, 0x01	; 1
    2982:	61 f5       	brne	.+88     	; 0x29dc <Isb_Obj_Exec+0x2b6>
    2984:	ac ec       	ldi	r26, 0xCC	; 204
    2986:	b1 e0       	ldi	r27, 0x01	; 1
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
										uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_8Bit_Obj_Array[ObjIndex]);
    2988:	f6 01       	movw	r30, r12
    298a:	ec 5d       	subi	r30, 0xDC	; 220
    298c:	fe 4f       	sbci	r31, 0xFE	; 254
    298e:	94 91       	lpm	r25, Z+
										if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0)) {
    2990:	2d 91       	ld	r18, X+
    2992:	3c 91       	ld	r19, X
    2994:	11 97       	sbiw	r26, 0x01	; 1
    2996:	12 96       	adiw	r26, 0x02	; 2
    2998:	8c 91       	ld	r24, X
    299a:	12 97       	sbiw	r26, 0x02	; 2
    299c:	89 17       	cp	r24, r25
    299e:	b9 f4       	brne	.+46     	; 0x29ce <Isb_Obj_Exec+0x2a8>
    29a0:	21 15       	cp	r18, r1
    29a2:	31 05       	cpc	r19, r1
    29a4:	a1 f0       	breq	.+40     	; 0x29ce <Isb_Obj_Exec+0x2a8>
											Isb_Msg_t TxMsg;
											TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_4;
    29a6:	79 82       	std	Y+1, r7	; 0x01
											TxMsg.DestId = Isb_Grp[GrpIndex].Id;
    29a8:	3b 83       	std	Y+3, r19	; 0x03
    29aa:	2a 83       	std	Y+2, r18	; 0x02
											TxMsg.SourceId = Isb_Node_Id;
    29ac:	80 91 34 01 	lds	r24, 0x0134
    29b0:	90 91 35 01 	lds	r25, 0x0135
    29b4:	9d 83       	std	Y+5, r25	; 0x05
    29b6:	8c 83       	std	Y+4, r24	; 0x04
											TxMsg.Data[0] = ISB_MSG_TOP_8BIT;
    29b8:	8e 82       	std	Y+6, r8	; 0x06
											TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    29ba:	9f 82       	std	Y+7, r9	; 0x07
											TxMsg.Data[2] = Isb_Obj_8Bit[ObjIndex].Tov;
    29bc:	f8 01       	movw	r30, r16
    29be:	81 81       	ldd	r24, Z+1	; 0x01
    29c0:	88 87       	std	Y+8, r24	; 0x08
											TxMsg.Data[3] = Isb_Obj_8Bit[ObjIndex].Value;
    29c2:	82 81       	ldd	r24, Z+2	; 0x02
    29c4:	89 87       	std	Y+9, r24	; 0x09
											Isb_SendMsg(&TxMsg);
    29c6:	c5 01       	movw	r24, r10
    29c8:	0e 94 b3 11 	call	0x2366	; 0x2366 <Isb_SendMsg>
    29cc:	05 c0       	rjmp	.+10     	; 0x29d8 <Isb_Obj_Exec+0x2b2>
											break;
    29ce:	13 96       	adiw	r26, 0x03	; 3
					uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_8Bit_Ch_Array[ObjIndex]);
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED)) {
						if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED)) {
							if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND)) {
								if (Isb_Obj_8Bit[ObjIndex].IsChanged == TRUE) {
									for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    29d0:	f2 e0       	ldi	r31, 0x02	; 2
    29d2:	a4 34       	cpi	r26, 0x44	; 68
    29d4:	bf 07       	cpc	r27, r31
    29d6:	e1 f6       	brne	.-72     	; 0x2990 <Isb_Obj_Exec+0x26a>
											TxMsg.Data[3] = Isb_Obj_8Bit[ObjIndex].Value;
											Isb_SendMsg(&TxMsg);
											break;
										}
									}
									Isb_Obj_8Bit[ObjIndex].IsChanged = FALSE;
    29d8:	f8 01       	movw	r30, r16
    29da:	13 82       	std	Z+3, r1	; 0x03
								}
							}
							if (bit_is_set(Isb_Obj_8Bit[ObjIndex].Ctrl, ISB_OBJ_CTRL_READONINIT)) {
    29dc:	f7 01       	movw	r30, r14
    29de:	80 81       	ld	r24, Z
    29e0:	85 ff       	sbrs	r24, 5
    29e2:	04 c0       	rjmp	.+8      	; 0x29ec <Isb_Obj_Exec+0x2c6>
								// TODO;
								Isb_Obj_8Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    29e4:	f8 01       	movw	r30, r16
    29e6:	80 81       	ld	r24, Z
    29e8:	8f 7d       	andi	r24, 0xDF	; 223
    29ea:	80 83       	st	Z, r24
    29ec:	08 94       	sec
    29ee:	c1 1c       	adc	r12, r1
    29f0:	d1 1c       	adc	r13, r1
    29f2:	0c 5f       	subi	r16, 0xFC	; 252
    29f4:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		#endif /* ISB_OBJ_4BIT_MAX */

		#if defined(ISB_OBJ_8BIT_MAX)
			if (bit_is_set(Isb_Obj_8Bit_Ctrl, ISB_CTRL_SOFTIRQ_EXEC)) {
				for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_8BIT_MAX; ObjIndex++) {
    29f6:	f8 e0       	ldi	r31, 0x08	; 8
    29f8:	cf 16       	cp	r12, r31
    29fa:	d1 04       	cpc	r13, r1
    29fc:	09 f0       	breq	.+2      	; 0x2a00 <Isb_Obj_Exec+0x2da>
    29fe:	a2 cf       	rjmp	.-188    	; 0x2944 <Isb_Obj_Exec+0x21e>
								Isb_Obj_8Bit[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
							}
						}
					}
				}
				Isb_Obj_8Bit_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    2a00:	80 91 48 01 	lds	r24, 0x0148
    2a04:	8e 7f       	andi	r24, 0xFE	; 254
    2a06:	80 93 48 01 	sts	0x0148, r24
				}
				Isb_Obj_Float_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
			}
		#endif /* ISB_OBJ_FLOAT_MAX */

	}
    2a0a:	2d 96       	adiw	r28, 0x0d	; 13
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	cd bf       	out	0x3d, r28	; 61
    2a16:	cf 91       	pop	r28
    2a18:	df 91       	pop	r29
    2a1a:	1f 91       	pop	r17
    2a1c:	0f 91       	pop	r16
    2a1e:	ff 90       	pop	r15
    2a20:	ef 90       	pop	r14
    2a22:	df 90       	pop	r13
    2a24:	cf 90       	pop	r12
    2a26:	bf 90       	pop	r11
    2a28:	af 90       	pop	r10
    2a2a:	9f 90       	pop	r9
    2a2c:	8f 90       	pop	r8
    2a2e:	7f 90       	pop	r7
    2a30:	08 95       	ret

00002a32 <Isb_Config_Rx>:
#ifndef ISB_SRV_CONFIG_C_
	#define ISB_SRV_CONFIG_C_



	void Isb_Config_Rx(Isb_Msg_t * aIsb_Msg) {
    2a32:	cf 92       	push	r12
    2a34:	df 92       	push	r13
    2a36:	ef 92       	push	r14
    2a38:	ff 92       	push	r15
    2a3a:	0f 93       	push	r16
    2a3c:	1f 93       	push	r17
    2a3e:	df 93       	push	r29
    2a40:	cf 93       	push	r28
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
    2a46:	2d 97       	sbiw	r28, 0x0d	; 13
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	f8 94       	cli
    2a4c:	de bf       	out	0x3e, r29	; 62
    2a4e:	0f be       	out	0x3f, r0	; 63
    2a50:	cd bf       	out	0x3d, r28	; 61
    2a52:	ac 01       	movw	r20, r24
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
    2a54:	fc 01       	movw	r30, r24
    2a56:	00 81       	ld	r16, Z
    2a58:	10 2f       	mov	r17, r16
    2a5a:	1f 70       	andi	r17, 0x0F	; 15
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
    2a5c:	c3 80       	ldd	r12, Z+3	; 0x03
    2a5e:	d4 80       	ldd	r13, Z+4	; 0x04
		MsgTx.SourceId = Isb_Node_Id;
    2a60:	e0 90 34 01 	lds	r14, 0x0134
    2a64:	f0 90 35 01 	lds	r15, 0x0135
    2a68:	dc 01       	movw	r26, r24
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	36 96       	adiw	r30, 0x06	; 6
		for (uint8_t i = 0; i < Dlc; i++) {
    2a6e:	9e 01       	movw	r18, r28
    2a70:	21 0f       	add	r18, r17
    2a72:	31 1d       	adc	r19, r1
    2a74:	2a 5f       	subi	r18, 0xFA	; 250
    2a76:	3f 4f       	sbci	r19, 0xFF	; 255
    2a78:	04 c0       	rjmp	.+8      	; 0x2a82 <Isb_Config_Rx+0x50>
			MsgTx.Data[i] = aIsb_Msg->Data[i];
    2a7a:	14 96       	adiw	r26, 0x04	; 4
    2a7c:	8c 91       	ld	r24, X
    2a7e:	14 97       	sbiw	r26, 0x04	; 4
    2a80:	81 93       	st	Z+, r24
    2a82:	11 96       	adiw	r26, 0x01	; 1
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
		MsgTx.SourceId = Isb_Node_Id;
		for (uint8_t i = 0; i < Dlc; i++) {
    2a84:	e2 17       	cp	r30, r18
    2a86:	f3 07       	cpc	r31, r19
    2a88:	c1 f7       	brne	.-16     	; 0x2a7a <Isb_Config_Rx+0x48>
			MsgTx.Data[i] = aIsb_Msg->Data[i];
		}
		if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_SETMODE) {
    2a8a:	fa 01       	movw	r30, r20
    2a8c:	85 81       	ldd	r24, Z+5	; 0x05
    2a8e:	82 30       	cpi	r24, 0x02	; 2
    2a90:	09 f0       	breq	.+2      	; 0x2a94 <Isb_Config_Rx+0x62>
    2a92:	95 c0       	rjmp	.+298    	; 0x2bbe <Isb_Config_Rx+0x18c>
			if (Dlc == ISB_MSG_FLAGS_DLC_2) {
    2a94:	12 30       	cpi	r17, 0x02	; 2
    2a96:	09 f0       	breq	.+2      	; 0x2a9a <Isb_Config_Rx+0x68>
    2a98:	4d c1       	rjmp	.+666    	; 0x2d34 <Isb_Config_Rx+0x302>
				MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_2;
				MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    2a9a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a9c:	80 6c       	ori	r24, 0xC0	; 192
    2a9e:	8e 83       	std	Y+6, r24	; 0x06
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__BL_NORM) {
    2aa0:	26 81       	ldd	r18, Z+6	; 0x06
    2aa2:	22 23       	and	r18, r18
    2aa4:	c9 f4       	brne	.+50     	; 0x2ad8 <Isb_Config_Rx+0xa6>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2aa6:	f9 99       	sbic	0x1f, 1	; 31
    2aa8:	fe cf       	rjmp	.-4      	; 0x2aa6 <Isb_Config_Rx+0x74>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2aaa:	82 e1       	ldi	r24, 0x12	; 18
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	92 bd       	out	0x22, r25	; 34
    2ab0:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    2ab2:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2ab4:	80 b5       	in	r24, 0x20	; 32
	}



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
    2ab6:	88 23       	and	r24, r24
    2ab8:	09 f4       	brne	.+2      	; 0x2abc <Isb_Config_Rx+0x8a>
    2aba:	66 c0       	rjmp	.+204    	; 0x2b88 <Isb_Config_Rx+0x156>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2abc:	f9 99       	sbic	0x1f, 1	; 31
    2abe:	fe cf       	rjmp	.-4      	; 0x2abc <Isb_Config_Rx+0x8a>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2ac0:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2ac2:	82 e1       	ldi	r24, 0x12	; 18
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	92 bd       	out	0x22, r25	; 34
    2ac8:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2aca:	10 bc       	out	0x20, r1	; 32

    __asm__ __volatile__ (
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	fa 9a       	sbi	0x1f, 2	; 31
    2ad2:	f9 9a       	sbi	0x1f, 1	; 31
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	72 c0       	rjmp	.+228    	; 0x2bbc <Isb_Config_Rx+0x18a>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__BL_FLASH) {
    2ad8:	21 30       	cpi	r18, 0x01	; 1
    2ada:	d1 f4       	brne	.+52     	; 0x2b10 <Isb_Config_Rx+0xde>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2adc:	f9 99       	sbic	0x1f, 1	; 31
    2ade:	fe cf       	rjmp	.-4      	; 0x2adc <Isb_Config_Rx+0xaa>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2ae0:	82 e1       	ldi	r24, 0x12	; 18
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	92 bd       	out	0x22, r25	; 34
    2ae6:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    2ae8:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2aea:	80 b5       	in	r24, 0x20	; 32
    2aec:	81 30       	cpi	r24, 0x01	; 1
    2aee:	09 f4       	brne	.+2      	; 0x2af2 <Isb_Config_Rx+0xc0>
    2af0:	65 c0       	rjmp	.+202    	; 0x2bbc <Isb_Config_Rx+0x18a>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2af2:	f9 99       	sbic	0x1f, 1	; 31
    2af4:	fe cf       	rjmp	.-4      	; 0x2af2 <Isb_Config_Rx+0xc0>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2af6:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2af8:	82 e1       	ldi	r24, 0x12	; 18
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	92 bd       	out	0x22, r25	; 34
    2afe:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	80 bd       	out	0x20, r24	; 32

    __asm__ __volatile__ (
    2b04:	0f b6       	in	r0, 0x3f	; 63
    2b06:	f8 94       	cli
    2b08:	fa 9a       	sbi	0x1f, 2	; 31
    2b0a:	f9 9a       	sbi	0x1f, 1	; 31
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	56 c0       	rjmp	.+172    	; 0x2bbc <Isb_Config_Rx+0x18a>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_FLASH);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__FW_NORM) {
    2b10:	28 30       	cpi	r18, 0x08	; 8
    2b12:	09 f0       	breq	.+2      	; 0x2b16 <Isb_Config_Rx+0xe4>
    2b14:	39 c0       	rjmp	.+114    	; 0x2b88 <Isb_Config_Rx+0x156>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2b16:	f9 99       	sbic	0x1f, 1	; 31
    2b18:	fe cf       	rjmp	.-4      	; 0x2b16 <Isb_Config_Rx+0xe4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2b1a:	8b e1       	ldi	r24, 0x1B	; 27
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	92 bd       	out	0x22, r25	; 34
    2b20:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    2b22:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2b24:	20 b5       	in	r18, 0x20	; 32
					uint8_t crc = lib_eep_read_byte((uint8_t *)EEP__ISB_CONFIG_CRC);
					crc++;
    2b26:	2f 5f       	subi	r18, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2b28:	f9 99       	sbic	0x1f, 1	; 31
    2b2a:	fe cf       	rjmp	.-4      	; 0x2b28 <Isb_Config_Rx+0xf6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2b2c:	8b e1       	ldi	r24, 0x1B	; 27
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	92 bd       	out	0x22, r25	; 34
    2b32:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    2b34:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2b36:	80 b5       	in	r24, 0x20	; 32
    2b38:	82 17       	cp	r24, r18
    2b3a:	69 f0       	breq	.+26     	; 0x2b56 <Isb_Config_Rx+0x124>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2b3c:	f9 99       	sbic	0x1f, 1	; 31
    2b3e:	fe cf       	rjmp	.-4      	; 0x2b3c <Isb_Config_Rx+0x10a>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2b40:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2b42:	8b e1       	ldi	r24, 0x1B	; 27
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	92 bd       	out	0x22, r25	; 34
    2b48:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2b4a:	20 bd       	out	0x20, r18	; 32

    __asm__ __volatile__ (
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	fa 9a       	sbi	0x1f, 2	; 31
    2b52:	f9 9a       	sbi	0x1f, 1	; 31
    2b54:	0f be       	out	0x3f, r0	; 63
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2b56:	f9 99       	sbic	0x1f, 1	; 31
    2b58:	fe cf       	rjmp	.-4      	; 0x2b56 <Isb_Config_Rx+0x124>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2b5a:	82 e1       	ldi	r24, 0x12	; 18
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	92 bd       	out	0x22, r25	; 34
    2b60:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    2b62:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2b64:	80 b5       	in	r24, 0x20	; 32
    2b66:	88 30       	cpi	r24, 0x08	; 8
    2b68:	49 f1       	breq	.+82     	; 0x2bbc <Isb_Config_Rx+0x18a>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2b6a:	f9 99       	sbic	0x1f, 1	; 31
    2b6c:	fe cf       	rjmp	.-4      	; 0x2b6a <Isb_Config_Rx+0x138>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2b6e:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2b70:	82 e1       	ldi	r24, 0x12	; 18
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	92 bd       	out	0x22, r25	; 34
    2b76:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2b78:	88 e0       	ldi	r24, 0x08	; 8
    2b7a:	80 bd       	out	0x20, r24	; 32

    __asm__ __volatile__ (
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	f8 94       	cli
    2b80:	fa 9a       	sbi	0x1f, 2	; 31
    2b82:	f9 9a       	sbi	0x1f, 1	; 31
    2b84:	0f be       	out	0x3f, r0	; 63
    2b86:	1a c0       	rjmp	.+52     	; 0x2bbc <Isb_Config_Rx+0x18a>
					lib_eep_write_byte((uint8_t *)EEP__ISB_CONFIG_CRC, crc);
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__FW_NORM);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__FW_CFG) {
    2b88:	29 30       	cpi	r18, 0x09	; 9
    2b8a:	c1 f4       	brne	.+48     	; 0x2bbc <Isb_Config_Rx+0x18a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2b8c:	f9 99       	sbic	0x1f, 1	; 31
    2b8e:	fe cf       	rjmp	.-4      	; 0x2b8c <Isb_Config_Rx+0x15a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2b90:	82 e1       	ldi	r24, 0x12	; 18
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	92 bd       	out	0x22, r25	; 34
    2b96:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    2b98:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2b9a:	80 b5       	in	r24, 0x20	; 32
    2b9c:	89 30       	cpi	r24, 0x09	; 9
    2b9e:	71 f0       	breq	.+28     	; 0x2bbc <Isb_Config_Rx+0x18a>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2ba0:	f9 99       	sbic	0x1f, 1	; 31
    2ba2:	fe cf       	rjmp	.-4      	; 0x2ba0 <Isb_Config_Rx+0x16e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2ba4:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2ba6:	82 e1       	ldi	r24, 0x12	; 18
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	92 bd       	out	0x22, r25	; 34
    2bac:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2bae:	89 e0       	ldi	r24, 0x09	; 9
    2bb0:	80 bd       	out	0x20, r24	; 32

    __asm__ __volatile__ (
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	fa 9a       	sbi	0x1f, 2	; 31
    2bb8:	f9 9a       	sbi	0x1f, 1	; 31
    2bba:	0f be       	out	0x3f, r0	; 63
    2bbc:	ff cf       	rjmp	.-2      	; 0x2bbc <Isb_Config_Rx+0x18a>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__FW_CFG);
				}
				Node_Reboot();
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_INITEEPROM) {
    2bbe:	86 30       	cpi	r24, 0x06	; 6
    2bc0:	09 f0       	breq	.+2      	; 0x2bc4 <Isb_Config_Rx+0x192>
    2bc2:	45 c0       	rjmp	.+138    	; 0x2c4e <Isb_Config_Rx+0x21c>
			if (Dlc == ISB_MSG_FLAGS_DLC_1) {
    2bc4:	11 30       	cpi	r17, 0x01	; 1
    2bc6:	09 f0       	breq	.+2      	; 0x2bca <Isb_Config_Rx+0x198>
    2bc8:	b5 c0       	rjmp	.+362    	; 0x2d34 <Isb_Config_Rx+0x302>
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
    2bca:	80 91 37 01 	lds	r24, 0x0137
    2bce:	89 30       	cpi	r24, 0x09	; 9
    2bd0:	09 f0       	breq	.+2      	; 0x2bd4 <Isb_Config_Rx+0x1a2>
    2bd2:	b0 c0       	rjmp	.+352    	; 0x2d34 <Isb_Config_Rx+0x302>
					MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_1;
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
    2bd4:	80 91 36 01 	lds	r24, 0x0136
    2bd8:	28 2f       	mov	r18, r24
    2bda:	30 e0       	ldi	r19, 0x00	; 0
						wdt_reset();
    2bdc:	a8 95       	wdr
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2bde:	f9 99       	sbic	0x1f, 1	; 31
    2be0:	fe cf       	rjmp	.-4      	; 0x2bde <Isb_Config_Rx+0x1ac>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2be2:	32 bd       	out	0x22, r19	; 34
    2be4:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
    2be6:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2be8:	80 b5       	in	r24, 0x20	; 32
    2bea:	88 23       	and	r24, r24
    2bec:	59 f0       	breq	.+22     	; 0x2c04 <Isb_Config_Rx+0x1d2>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2bee:	f9 99       	sbic	0x1f, 1	; 31
    2bf0:	fe cf       	rjmp	.-4      	; 0x2bee <Isb_Config_Rx+0x1bc>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2bf2:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2bf4:	32 bd       	out	0x22, r19	; 34
    2bf6:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    2bf8:	10 bc       	out	0x20, r1	; 32

    __asm__ __volatile__ (
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	fa 9a       	sbi	0x1f, 2	; 31
    2c00:	f9 9a       	sbi	0x1f, 1	; 31
    2c02:	0f be       	out	0x3f, r0	; 63
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_INITEEPROM) {
			if (Dlc == ISB_MSG_FLAGS_DLC_1) {
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
					MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_1;
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
    2c04:	2f 5f       	subi	r18, 0xFF	; 255
    2c06:	3f 4f       	sbci	r19, 0xFF	; 255
    2c08:	f2 e0       	ldi	r31, 0x02	; 2
    2c0a:	20 30       	cpi	r18, 0x00	; 0
    2c0c:	3f 07       	cpc	r19, r31
    2c0e:	30 f3       	brcs	.-52     	; 0x2bdc <Isb_Config_Rx+0x1aa>
    2c10:	2c e1       	ldi	r18, 0x1C	; 28
    2c12:	30 e0       	ldi	r19, 0x00	; 0
						wdt_reset();
						lib_eep_write_byte((uint8_t *) ee_Addr, 0x00);
					}
					for (uint8_t i = 0; i < 4; i++) {
						lib_eep_write_byte((uint8_t *)(EEP__ISB_CONFIG_CODE_0 + i), Isb_Firmware_Code[i]);
    2c14:	f9 01       	movw	r30, r18
    2c16:	ec 51       	subi	r30, 0x1C	; 28
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2c1c:	f9 99       	sbic	0x1f, 1	; 31
    2c1e:	fe cf       	rjmp	.-4      	; 0x2c1c <Isb_Config_Rx+0x1ea>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2c20:	32 bd       	out	0x22, r19	; 34
    2c22:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
    2c24:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2c26:	80 b5       	in	r24, 0x20	; 32
    2c28:	8e 17       	cp	r24, r30
    2c2a:	59 f0       	breq	.+22     	; 0x2c42 <Isb_Config_Rx+0x210>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2c2c:	f9 99       	sbic	0x1f, 1	; 31
    2c2e:	fe cf       	rjmp	.-4      	; 0x2c2c <Isb_Config_Rx+0x1fa>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2c30:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2c32:	32 bd       	out	0x22, r19	; 34
    2c34:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    2c36:	e0 bd       	out	0x20, r30	; 32

    __asm__ __volatile__ (
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	fa 9a       	sbi	0x1f, 2	; 31
    2c3e:	f9 9a       	sbi	0x1f, 1	; 31
    2c40:	0f be       	out	0x3f, r0	; 63
    2c42:	2f 5f       	subi	r18, 0xFF	; 255
    2c44:	3f 4f       	sbci	r19, 0xFF	; 255
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
						wdt_reset();
						lib_eep_write_byte((uint8_t *) ee_Addr, 0x00);
					}
					for (uint8_t i = 0; i < 4; i++) {
    2c46:	20 32       	cpi	r18, 0x20	; 32
    2c48:	31 05       	cpc	r19, r1
    2c4a:	21 f7       	brne	.-56     	; 0x2c14 <Isb_Config_Rx+0x1e2>
    2c4c:	ff cf       	rjmp	.-2      	; 0x2c4c <Isb_Config_Rx+0x21a>
					}
					Node_Reboot();
				}
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_READEEPROMBLOCK) {
    2c4e:	87 30       	cpi	r24, 0x07	; 7
    2c50:	69 f5       	brne	.+90     	; 0x2cac <Isb_Config_Rx+0x27a>
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
    2c52:	14 30       	cpi	r17, 0x04	; 4
    2c54:	08 f4       	brcc	.+2      	; 0x2c58 <Isb_Config_Rx+0x226>
    2c56:	6e c0       	rjmp	.+220    	; 0x2d34 <Isb_Config_Rx+0x302>
				Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
    2c58:	fa 01       	movw	r30, r20
    2c5a:	97 81       	ldd	r25, Z+7	; 0x07
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	26 81       	ldd	r18, Z+6	; 0x06
    2c60:	bc 01       	movw	r22, r24
    2c62:	62 0f       	add	r22, r18
    2c64:	71 1d       	adc	r23, r1
				if (Addr < EEP_SIZE) {
    2c66:	f2 e0       	ldi	r31, 0x02	; 2
    2c68:	60 30       	cpi	r22, 0x00	; 0
    2c6a:	7f 07       	cpc	r23, r31
    2c6c:	08 f0       	brcs	.+2      	; 0x2c70 <Isb_Config_Rx+0x23e>
    2c6e:	62 c0       	rjmp	.+196    	; 0x2d34 <Isb_Config_Rx+0x302>
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    2c70:	8e 81       	ldd	r24, Y+6	; 0x06
    2c72:	80 6c       	ori	r24, 0xC0	; 192
    2c74:	8e 83       	std	Y+6, r24	; 0x06
    2c76:	40 e0       	ldi	r20, 0x00	; 0
					for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2c78:	21 2f       	mov	r18, r17
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	23 50       	subi	r18, 0x03	; 3
    2c7e:	30 40       	sbci	r19, 0x00	; 0
						MsgTx.Data[3 + i] = lib_eep_read_byte((uint8_t *)(Addr + i));
    2c80:	de 01       	movw	r26, r28
    2c82:	19 96       	adiw	r26, 0x09	; 9
    2c84:	0d c0       	rjmp	.+26     	; 0x2ca0 <Isb_Config_Rx+0x26e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2c86:	f9 99       	sbic	0x1f, 1	; 31
    2c88:	fe cf       	rjmp	.-4      	; 0x2c86 <Isb_Config_Rx+0x254>
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	84 0f       	add	r24, r20
    2c8e:	91 1d       	adc	r25, r1
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2c90:	92 bd       	out	0x22, r25	; 34
    2c92:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    2c94:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2c96:	80 b5       	in	r24, 0x20	; 32
    2c98:	ea 0f       	add	r30, r26
    2c9a:	fb 1f       	adc	r31, r27
    2c9c:	80 83       	st	Z, r24
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_READEEPROMBLOCK) {
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
				Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
				if (Addr < EEP_SIZE) {
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2c9e:	4f 5f       	subi	r20, 0xFF	; 255
    2ca0:	e4 2f       	mov	r30, r20
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	e2 17       	cp	r30, r18
    2ca6:	f3 07       	cpc	r31, r19
    2ca8:	74 f3       	brlt	.-36     	; 0x2c86 <Isb_Config_Rx+0x254>
    2caa:	44 c0       	rjmp	.+136    	; 0x2d34 <Isb_Config_Rx+0x302>
						MsgTx.Data[3 + i] = lib_eep_read_byte((uint8_t *)(Addr + i));
					}
				}
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_WRITEEEPROMBLOCK) {
    2cac:	88 30       	cpi	r24, 0x08	; 8
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <Isb_Config_Rx+0x280>
    2cb0:	41 c0       	rjmp	.+130    	; 0x2d34 <Isb_Config_Rx+0x302>
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
    2cb2:	14 30       	cpi	r17, 0x04	; 4
    2cb4:	08 f4       	brcc	.+2      	; 0x2cb8 <Isb_Config_Rx+0x286>
    2cb6:	3e c0       	rjmp	.+124    	; 0x2d34 <Isb_Config_Rx+0x302>
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
    2cb8:	80 91 37 01 	lds	r24, 0x0137
    2cbc:	89 30       	cpi	r24, 0x09	; 9
    2cbe:	09 f0       	breq	.+2      	; 0x2cc2 <Isb_Config_Rx+0x290>
    2cc0:	39 c0       	rjmp	.+114    	; 0x2d34 <Isb_Config_Rx+0x302>
					Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
    2cc2:	fa 01       	movw	r30, r20
    2cc4:	97 81       	ldd	r25, Z+7	; 0x07
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	26 81       	ldd	r18, Z+6	; 0x06
    2cca:	bc 01       	movw	r22, r24
    2ccc:	62 0f       	add	r22, r18
    2cce:	71 1d       	adc	r23, r1
					if ((Addr >= Isb_Firmware_Offset) & (Addr < EEP_SIZE)) {
    2cd0:	80 91 36 01 	lds	r24, 0x0136
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	68 17       	cp	r22, r24
    2cd8:	79 07       	cpc	r23, r25
    2cda:	60 f1       	brcs	.+88     	; 0x2d34 <Isb_Config_Rx+0x302>
    2cdc:	f2 e0       	ldi	r31, 0x02	; 2
    2cde:	60 30       	cpi	r22, 0x00	; 0
    2ce0:	7f 07       	cpc	r23, r31
    2ce2:	40 f5       	brcc	.+80     	; 0x2d34 <Isb_Config_Rx+0x302>
						MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    2ce4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ce6:	80 6c       	ori	r24, 0xC0	; 192
    2ce8:	8e 83       	std	Y+6, r24	; 0x06
    2cea:	90 e0       	ldi	r25, 0x00	; 0
						for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2cec:	21 2f       	mov	r18, r17
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	23 50       	subi	r18, 0x03	; 3
    2cf2:	30 40       	sbci	r19, 0x00	; 0
    2cf4:	1a c0       	rjmp	.+52     	; 0x2d2a <Isb_Config_Rx+0x2f8>
							lib_eep_write_byte((uint8_t *)(Addr + i), aIsb_Msg->Data[3 + i]);
    2cf6:	df 01       	movw	r26, r30
    2cf8:	a6 0f       	add	r26, r22
    2cfa:	b7 1f       	adc	r27, r23
    2cfc:	e4 0f       	add	r30, r20
    2cfe:	f5 1f       	adc	r31, r21
    2d00:	e0 85       	ldd	r30, Z+8	; 0x08
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2d02:	f9 99       	sbic	0x1f, 1	; 31
    2d04:	fe cf       	rjmp	.-4      	; 0x2d02 <Isb_Config_Rx+0x2d0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d06:	b2 bd       	out	0x22, r27	; 34
    2d08:	a1 bd       	out	0x21, r26	; 33
#endif
    EECR |= (1 << EERE);
    2d0a:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2d0c:	80 b5       	in	r24, 0x20	; 32
    2d0e:	8e 17       	cp	r24, r30
    2d10:	59 f0       	breq	.+22     	; 0x2d28 <Isb_Config_Rx+0x2f6>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2d12:	f9 99       	sbic	0x1f, 1	; 31
    2d14:	fe cf       	rjmp	.-4      	; 0x2d12 <Isb_Config_Rx+0x2e0>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2d16:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2d18:	b2 bd       	out	0x22, r27	; 34
    2d1a:	a1 bd       	out	0x21, r26	; 33
#endif
    EEDR = __value;
    2d1c:	e0 bd       	out	0x20, r30	; 32

    __asm__ __volatile__ (
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	fa 9a       	sbi	0x1f, 2	; 31
    2d24:	f9 9a       	sbi	0x1f, 1	; 31
    2d26:	0f be       	out	0x3f, r0	; 63
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
					Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
					if ((Addr >= Isb_Firmware_Offset) & (Addr < EEP_SIZE)) {
						MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
						for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2d28:	9f 5f       	subi	r25, 0xFF	; 255
    2d2a:	e9 2f       	mov	r30, r25
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	e2 17       	cp	r30, r18
    2d30:	f3 07       	cpc	r31, r19
    2d32:	0c f3       	brlt	.-62     	; 0x2cf6 <Isb_Config_Rx+0x2c4>
						}
					}
				}
			}
		}
		MsgTx.Data[0] |= ISB_CONFIG_ANSWER_NACK;
    2d34:	8e 81       	ldd	r24, Y+6	; 0x06
    2d36:	80 64       	ori	r24, 0x40	; 64
    2d38:	8e 83       	std	Y+6, r24	; 0x06
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
		MsgTx.SourceId = Isb_Node_Id;
    2d3a:	fd 82       	std	Y+5, r15	; 0x05
    2d3c:	ec 82       	std	Y+4, r14	; 0x04
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
    2d3e:	db 82       	std	Y+3, r13	; 0x03
    2d40:	ca 82       	std	Y+2, r12	; 0x02
	void Isb_Config_Rx(Isb_Msg_t * aIsb_Msg) {
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
    2d42:	09 83       	std	Y+1, r16	; 0x01
					}
				}
			}
		}
		MsgTx.Data[0] |= ISB_CONFIG_ANSWER_NACK;
		Isb_SendMsg(&MsgTx);
    2d44:	ce 01       	movw	r24, r28
    2d46:	01 96       	adiw	r24, 0x01	; 1
    2d48:	0e 94 b3 11 	call	0x2366	; 0x2366 <Isb_SendMsg>
	}
    2d4c:	2d 96       	adiw	r28, 0x0d	; 13
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	cd bf       	out	0x3d, r28	; 61
    2d58:	cf 91       	pop	r28
    2d5a:	df 91       	pop	r29
    2d5c:	1f 91       	pop	r17
    2d5e:	0f 91       	pop	r16
    2d60:	ff 90       	pop	r15
    2d62:	ef 90       	pop	r14
    2d64:	df 90       	pop	r13
    2d66:	cf 90       	pop	r12
    2d68:	08 95       	ret

00002d6a <lib_eep_fw_read_word>:
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    return __eerd_word (__p, eeprom_read_byte);
    2d6a:	20 91 36 01 	lds	r18, 0x0136
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	22 0f       	add	r18, r18
    2d72:	33 1f       	adc	r19, r19
    2d74:	82 0f       	add	r24, r18
    2d76:	93 1f       	adc	r25, r19
    2d78:	66 e0       	ldi	r22, 0x06	; 6
    2d7a:	71 e0       	ldi	r23, 0x01	; 1
    2d7c:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <__eerd_word>



	uint16_t __attribute__((always_inline)) lib_eep_fw_read_word(uint16_t * aAddr) {
		return eeprom_read_word(Isb_Firmware_Offset + aAddr);;
	}
    2d80:	08 95       	ret

00002d82 <lib_eep_read_word>:
    2d82:	66 e0       	ldi	r22, 0x06	; 6
    2d84:	71 e0       	ldi	r23, 0x01	; 1
    2d86:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <__eerd_word>



	uint16_t __attribute__((always_inline)) lib_eep_read_word(uint16_t * aAddr) {
		return eeprom_read_word(aAddr);;
	}
    2d8a:	08 95       	ret

00002d8c <main>:



	int main(void) {
    2d8c:	ff 92       	push	r15
    2d8e:	0f 93       	push	r16
    2d90:	1f 93       	push	r17
    2d92:	df 93       	push	r29
    2d94:	cf 93       	push	r28
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
    2d9a:	2d 97       	sbiw	r28, 0x0d	; 13
    2d9c:	0f b6       	in	r0, 0x3f	; 63
    2d9e:	f8 94       	cli
    2da0:	de bf       	out	0x3e, r29	; 62
    2da2:	0f be       	out	0x3f, r0	; 63
    2da4:	cd bf       	out	0x3d, r28	; 61
		wdt_enable(WDTO_500MS);
    2da6:	2d e0       	ldi	r18, 0x0D	; 13
    2da8:	88 e1       	ldi	r24, 0x18	; 24
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	0f b6       	in	r0, 0x3f	; 63
    2dae:	f8 94       	cli
    2db0:	a8 95       	wdr
    2db2:	80 93 60 00 	sts	0x0060, r24
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	20 93 60 00 	sts	0x0060, r18
		wdt_reset();
    2dbc:	a8 95       	wdr
    2dbe:	80 e1       	ldi	r24, 0x10	; 16
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	66 e0       	ldi	r22, 0x06	; 6
    2dc4:	71 e0       	ldi	r23, 0x01	; 1
    2dc6:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <__eerd_word>
		Isb_Node_Id = lib_eep_read_word((uint16_t *)EEP__ISB_NODE_ID_0);
    2dca:	90 93 35 01 	sts	0x0135, r25
    2dce:	80 93 34 01 	sts	0x0134, r24
		if ((Isb_Node_Id == 0) | (Isb_Node_Id > 2047)) {
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	8f 5f       	subi	r24, 0xFF	; 255
    2dd6:	97 40       	sbci	r25, 0x07	; 7
    2dd8:	c0 f0       	brcs	.+48     	; 0x2e0a <main+0x7e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2dda:	f9 99       	sbic	0x1f, 1	; 31
    2ddc:	fe cf       	rjmp	.-4      	; 0x2dda <main+0x4e>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2dde:	82 e1       	ldi	r24, 0x12	; 18
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	92 bd       	out	0x22, r25	; 34
    2de4:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    2de6:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2de8:	80 b5       	in	r24, 0x20	; 32



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
    2dea:	88 23       	and	r24, r24
    2dec:	69 f0       	breq	.+26     	; 0x2e08 <main+0x7c>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2dee:	f9 99       	sbic	0x1f, 1	; 31
    2df0:	fe cf       	rjmp	.-4      	; 0x2dee <main+0x62>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2df2:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2df4:	82 e1       	ldi	r24, 0x12	; 18
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	92 bd       	out	0x22, r25	; 34
    2dfa:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2dfc:	10 bc       	out	0x20, r1	; 32

    __asm__ __volatile__ (
    2dfe:	0f b6       	in	r0, 0x3f	; 63
    2e00:	f8 94       	cli
    2e02:	fa 9a       	sbi	0x1f, 2	; 31
    2e04:	f9 9a       	sbi	0x1f, 1	; 31
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	ff cf       	rjmp	.-2      	; 0x2e08 <main+0x7c>
    2e0a:	2c e0       	ldi	r18, 0x0C	; 12
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
			Node_Reboot();
		}
		for (uint8_t i = 0; i < 4; i++) {
			lib_eep_write_byte((uint8_t *)(EEP__ISB_FIRMWARE_CODE_0 + i), Isb_Firmware_Code[i]);
    2e0e:	f9 01       	movw	r30, r18
    2e10:	ec 50       	subi	r30, 0x0C	; 12
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2e16:	f9 99       	sbic	0x1f, 1	; 31
    2e18:	fe cf       	rjmp	.-4      	; 0x2e16 <main+0x8a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2e1a:	32 bd       	out	0x22, r19	; 34
    2e1c:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
    2e1e:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2e20:	80 b5       	in	r24, 0x20	; 32
    2e22:	8e 17       	cp	r24, r30
    2e24:	59 f0       	breq	.+22     	; 0x2e3c <main+0xb0>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2e26:	f9 99       	sbic	0x1f, 1	; 31
    2e28:	fe cf       	rjmp	.-4      	; 0x2e26 <main+0x9a>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2e2a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2e2c:	32 bd       	out	0x22, r19	; 34
    2e2e:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    2e30:	e0 bd       	out	0x20, r30	; 32

    __asm__ __volatile__ (
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	f8 94       	cli
    2e36:	fa 9a       	sbi	0x1f, 2	; 31
    2e38:	f9 9a       	sbi	0x1f, 1	; 31
    2e3a:	0f be       	out	0x3f, r0	; 63
    2e3c:	2f 5f       	subi	r18, 0xFF	; 255
    2e3e:	3f 4f       	sbci	r19, 0xFF	; 255
		Isb_Node_Id = lib_eep_read_word((uint16_t *)EEP__ISB_NODE_ID_0);
		if ((Isb_Node_Id == 0) | (Isb_Node_Id > 2047)) {
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
			Node_Reboot();
		}
		for (uint8_t i = 0; i < 4; i++) {
    2e40:	20 31       	cpi	r18, 0x10	; 16
    2e42:	31 05       	cpc	r19, r1
    2e44:	21 f7       	brne	.-56     	; 0x2e0e <main+0x82>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2e46:	f9 99       	sbic	0x1f, 1	; 31
    2e48:	fe cf       	rjmp	.-4      	; 0x2e46 <main+0xba>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2e4a:	8a e1       	ldi	r24, 0x1A	; 26
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	92 bd       	out	0x22, r25	; 34
    2e50:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    2e52:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2e54:	80 b5       	in	r24, 0x20	; 32
			lib_eep_write_byte((uint8_t *)(EEP__ISB_FIRMWARE_CODE_0 + i), Isb_Firmware_Code[i]);
		}
		Isb_Firmware_Offset = lib_eep_read_byte((uint8_t *)EEP__ISB_FIRMWARE_OFFSET);
    2e56:	80 93 36 01 	sts	0x0136, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2e5a:	f9 99       	sbic	0x1f, 1	; 31
    2e5c:	fe cf       	rjmp	.-4      	; 0x2e5a <main+0xce>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2e5e:	82 e1       	ldi	r24, 0x12	; 18
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	92 bd       	out	0x22, r25	; 34
    2e64:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    2e66:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2e68:	80 b5       	in	r24, 0x20	; 32
		Isb_Node_Operating_Mode = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
    2e6a:	80 93 37 01 	sts	0x0137, r24
		if ((Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_NORM) & (Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_CFG))
    2e6e:	88 50       	subi	r24, 0x08	; 8
    2e70:	82 30       	cpi	r24, 0x02	; 2
    2e72:	d8 f0       	brcs	.+54     	; 0x2eaa <main+0x11e>
		{
			Isb_Node_Operating_Mode = ISB_NODE_OPERATING_MODE__FW_NORM;
    2e74:	88 e0       	ldi	r24, 0x08	; 8
    2e76:	80 93 37 01 	sts	0x0137, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2e7a:	f9 99       	sbic	0x1f, 1	; 31
    2e7c:	fe cf       	rjmp	.-4      	; 0x2e7a <main+0xee>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2e7e:	82 e1       	ldi	r24, 0x12	; 18
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	92 bd       	out	0x22, r25	; 34
    2e84:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    2e86:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2e88:	80 b5       	in	r24, 0x20	; 32
    2e8a:	88 30       	cpi	r24, 0x08	; 8
    2e8c:	71 f0       	breq	.+28     	; 0x2eaa <main+0x11e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2e8e:	f9 99       	sbic	0x1f, 1	; 31
    2e90:	fe cf       	rjmp	.-4      	; 0x2e8e <main+0x102>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2e92:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2e94:	82 e1       	ldi	r24, 0x12	; 18
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	92 bd       	out	0x22, r25	; 34
    2e9a:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2e9c:	88 e0       	ldi	r24, 0x08	; 8
    2e9e:	80 bd       	out	0x20, r24	; 32

    __asm__ __volatile__ (
    2ea0:	0f b6       	in	r0, 0x3f	; 63
    2ea2:	f8 94       	cli
    2ea4:	fa 9a       	sbi	0x1f, 2	; 31
    2ea6:	f9 9a       	sbi	0x1f, 1	; 31
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	40 91 38 01 	lds	r20, 0x0138
    2eae:	2c e1       	ldi	r18, 0x1C	; 28
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2eb2:	f9 99       	sbic	0x1f, 1	; 31
    2eb4:	fe cf       	rjmp	.-4      	; 0x2eb2 <main+0x126>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2eb6:	32 bd       	out	0x22, r19	; 34
    2eb8:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
    2eba:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2ebc:	80 b5       	in	r24, 0x20	; 32
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, Isb_Node_Operating_Mode);
		}
		for (uint8_t i = 0; i < 4; i++)
		{
			if (lib_eep_read_byte((uint8_t *)(EEP__ISB_CONFIG_CODE_0 + i)) != Isb_Firmware_Code[i])
    2ebe:	f9 01       	movw	r30, r18
    2ec0:	ec 51       	subi	r30, 0x1C	; 28
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	90 81       	ld	r25, Z
    2ec6:	89 13       	cpse	r24, r25
			{
				Error |= ERROR__CONFIG_CODE;
    2ec8:	41 60       	ori	r20, 0x01	; 1
    2eca:	2f 5f       	subi	r18, 0xFF	; 255
    2ecc:	3f 4f       	sbci	r19, 0xFF	; 255
		if ((Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_NORM) & (Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_CFG))
		{
			Isb_Node_Operating_Mode = ISB_NODE_OPERATING_MODE__FW_NORM;
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, Isb_Node_Operating_Mode);
		}
		for (uint8_t i = 0; i < 4; i++)
    2ece:	20 32       	cpi	r18, 0x20	; 32
    2ed0:	31 05       	cpc	r19, r1
    2ed2:	79 f7       	brne	.-34     	; 0x2eb2 <main+0x126>
    2ed4:	40 93 38 01 	sts	0x0138, r20
		#if defined(INF_TWI_C_)
			Inf_Twi_Init(0, 12);
// TODO:
Lib_Pin_Set(4, 2, LIB_PIN_OUTPUT_HIGH);
		#endif /* INF_TWI_C_ */
		if (Error == 0) {
    2ed8:	44 23       	and	r20, r20
    2eda:	a9 f4       	brne	.+42     	; 0x2f06 <main+0x17a>
			TCCR0 = (1 << WGM01) | (1 << CS01) | (1 << CS00);
			TCNT0 = 0;
			OCR0 = (F_CPU / 64) / 1000;
			TIMSK = (1 << OCIE0);
		#elif defined(__AVR_ATmega48__) || defined(__AVR_ATmega88__) || defined(__AVR_ATmega168__)
			TCCR0A = (1 << WGM01);
    2edc:	82 e0       	ldi	r24, 0x02	; 2
    2ede:	84 bd       	out	0x24, r24	; 36
			TCCR0B = (1 << CS01) | (1 << CS00);
    2ee0:	93 e0       	ldi	r25, 0x03	; 3
    2ee2:	95 bd       	out	0x25, r25	; 37
			TCNT0 = 0;
    2ee4:	16 bc       	out	0x26, r1	; 38
			OCR0A = (F_CPU / 64) / 1000;
    2ee6:	9d e7       	ldi	r25, 0x7D	; 125
    2ee8:	97 bd       	out	0x27, r25	; 39
			TIMSK0 = (1 << OCIE0A);
    2eea:	80 93 6e 00 	sts	0x006E, r24
			Isb_Systick_Init();
			Isb_Ch_Init();
    2eee:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <Isb_Ch_Init>
			Isb_Grp_Init();
    2ef2:	0e 94 7f 11 	call	0x22fe	; 0x22fe <Isb_Grp_Init>
			Isb_Obj_Init();
    2ef6:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <Isb_Obj_Init>
			Isb_Obj_Exec();
    2efa:	0e 94 93 13 	call	0x2726	; 0x2726 <Isb_Obj_Exec>
			Isb_App_Init();
    2efe:	0e 94 9a 06 	call	0xd34	; 0xd34 <Isb_App_Init>
			Isb_App_Exec();
    2f02:	0e 94 3d 09 	call	0x127a	; 0x127a <Isb_App_Exec>
		}
		sei();
    2f06:	78 94       	sei
		#endif /* ISB_INF_USART0 == 1 */
		#if ISB_INF_USART1 == 1
			Isb_Inf_Usart_Init(1);
		#endif /* ISB_INF_USART1 == 1 */
		#if ISB_INF_CAN0 == 1
			Isb_Inf_Can_Init(0);
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	0e 94 11 04 	call	0x822	; 0x822 <Isb_Inf_Can_Init>
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
    2f0e:	40 91 34 01 	lds	r20, 0x0134
    2f12:	50 91 35 01 	lds	r21, 0x0135
		Isb_Msg.Data[0] = ISB_MSG_TOP__SERIAL_NUMBER__MODE__ERROR;
    2f16:	81 e2       	ldi	r24, 0x21	; 33
    2f18:	8e 83       	std	Y+6, r24	; 0x06
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	37 96       	adiw	r30, 0x07	; 7
    2f1e:	24 e0       	ldi	r18, 0x04	; 4
    2f20:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2f22:	f9 99       	sbic	0x1f, 1	; 31
    2f24:	fe cf       	rjmp	.-4      	; 0x2f22 <main+0x196>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2f26:	32 bd       	out	0x22, r19	; 34
    2f28:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
    2f2a:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2f2c:	80 b5       	in	r24, 0x20	; 32
		for (uint8_t i = 0; i < 4; i++) {
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
    2f2e:	81 93       	st	Z+, r24
    2f30:	2f 5f       	subi	r18, 0xFF	; 255
    2f32:	3f 4f       	sbci	r19, 0xFF	; 255
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
		Isb_Msg.Data[0] = ISB_MSG_TOP__SERIAL_NUMBER__MODE__ERROR;
		for (uint8_t i = 0; i < 4; i++) {
    2f34:	28 30       	cpi	r18, 0x08	; 8
    2f36:	31 05       	cpc	r19, r1
    2f38:	a1 f7       	brne	.-24     	; 0x2f22 <main+0x196>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2f3a:	f9 99       	sbic	0x1f, 1	; 31
    2f3c:	fe cf       	rjmp	.-4      	; 0x2f3a <main+0x1ae>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2f3e:	82 e1       	ldi	r24, 0x12	; 18
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	92 bd       	out	0x22, r25	; 34
    2f44:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    2f46:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2f48:	80 b5       	in	r24, 0x20	; 32
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
    2f4a:	8b 87       	std	Y+11, r24	; 0x0b
		Isb_Msg.Data[6] = Error;
    2f4c:	80 91 38 01 	lds	r24, 0x0138
    2f50:	8c 87       	std	Y+12, r24	; 0x0c
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
    2f52:	5d 83       	std	Y+5, r21	; 0x05
    2f54:	4c 83       	std	Y+4, r20	; 0x04
		#if ISB_INF_USART1_SLAVE == 1
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
    2f56:	82 e0       	ldi	r24, 0x02	; 2
    2f58:	90 ef       	ldi	r25, 0xF0	; 240
    2f5a:	9b 83       	std	Y+3, r25	; 0x03
    2f5c:	8a 83       	std	Y+2, r24	; 0x02
		#endif /* ISB_INF_USART0_SLAVE == 1 */
		#if ISB_INF_USART1_SLAVE == 1
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
    2f5e:	87 e2       	ldi	r24, 0x27	; 39
    2f60:	89 83       	std	Y+1, r24	; 0x01
		for (uint8_t i = 0; i < 4; i++) {
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
		Isb_Msg.Data[6] = Error;
		Isb_SendMsg(&Isb_Msg);
    2f62:	8e 01       	movw	r16, r28
    2f64:	0f 5f       	subi	r16, 0xFF	; 255
    2f66:	1f 4f       	sbci	r17, 0xFF	; 255
    2f68:	c8 01       	movw	r24, r16
    2f6a:	0e 94 b3 11 	call	0x2366	; 0x2366 <Isb_SendMsg>
						}
					}
				}
			#endif /* ISB_INF_USART1 == 1 */
			#if ISB_INF_CAN0 == 1
				if (Isb_Inf_Can_Rx(0, &Isb_Msg) == TRUE) {
    2f6e:	f0 2e       	mov	r15, r16
    2f70:	01 2f       	mov	r16, r17
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
		Isb_Msg.Data[6] = Error;
		Isb_SendMsg(&Isb_Msg);
		for (;;) {
			wdt_reset();
    2f72:	a8 95       	wdr
			if (Error == 0) {
    2f74:	80 91 38 01 	lds	r24, 0x0138
    2f78:	88 23       	and	r24, r24
    2f7a:	31 f4       	brne	.+12     	; 0x2f88 <main+0x1fc>
				Isb_Systick_Exec();
    2f7c:	0e 94 31 05 	call	0xa62	; 0xa62 <Isb_Systick_Exec>
				Isb_Obj_Exec();
    2f80:	0e 94 93 13 	call	0x2726	; 0x2726 <Isb_Obj_Exec>
				Isb_App_Exec();
    2f84:	0e 94 3d 09 	call	0x127a	; 0x127a <Isb_App_Exec>
						}
					}
				}
			#endif /* ISB_INF_USART1 == 1 */
			#if ISB_INF_CAN0 == 1
				if (Isb_Inf_Can_Rx(0, &Isb_Msg) == TRUE) {
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	6f 2d       	mov	r22, r15
    2f8c:	70 2f       	mov	r23, r16
    2f8e:	0e 94 2e 04 	call	0x85c	; 0x85c <Isb_Inf_Can_Rx>
    2f92:	81 30       	cpi	r24, 0x01	; 1
    2f94:	71 f7       	brne	.-36     	; 0x2f72 <main+0x1e6>
						Isb_Inf_Can_Tx(1, &Isb_Msg);
					#endif /* ISB_INF_CAN1 == 1 */
					#if ISB_INF_CAN2 == 1
						Isb_Inf_Can_Tx(2, &Isb_Msg);
					#endif /* ISB_INF_CAN2 == 1 */
					if ((Isb_Msg.Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_UNICAST) {
    2f96:	89 81       	ldd	r24, Y+1	; 0x01
    2f98:	80 73       	andi	r24, 0x30	; 48
    2f9a:	69 f4       	brne	.+26     	; 0x2fb6 <main+0x22a>
						if (Isb_Msg.DestId == Isb_Node_Id) {
    2f9c:	2a 81       	ldd	r18, Y+2	; 0x02
    2f9e:	3b 81       	ldd	r19, Y+3	; 0x03
    2fa0:	80 91 34 01 	lds	r24, 0x0134
    2fa4:	90 91 35 01 	lds	r25, 0x0135
    2fa8:	28 17       	cp	r18, r24
    2faa:	39 07       	cpc	r19, r25
    2fac:	21 f4       	brne	.+8      	; 0x2fb6 <main+0x22a>
							Isb_Config_Rx(&Isb_Msg);
    2fae:	8f 2d       	mov	r24, r15
    2fb0:	90 2f       	mov	r25, r16
    2fb2:	0e 94 19 15 	call	0x2a32	; 0x2a32 <Isb_Config_Rx>
						}
					}
					if ((Isb_Msg.Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_MULTICAST) {
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
    2fb8:	80 73       	andi	r24, 0x30	; 48
    2fba:	80 32       	cpi	r24, 0x20	; 32
    2fbc:	d1 f6       	brne	.-76     	; 0x2f72 <main+0x1e6>
						if (Error == 0) {
    2fbe:	80 91 38 01 	lds	r24, 0x0138
    2fc2:	88 23       	and	r24, r24
    2fc4:	b1 f6       	brne	.-84     	; 0x2f72 <main+0x1e6>
							Isb_Obj_Rx(&Isb_Msg);
    2fc6:	8f 2d       	mov	r24, r15
    2fc8:	90 2f       	mov	r25, r16
    2fca:	0e 94 c8 11 	call	0x2390	; 0x2390 <Isb_Obj_Rx>
    2fce:	d1 cf       	rjmp	.-94     	; 0x2f72 <main+0x1e6>

00002fd0 <__eerd_word>:
    2fd0:	df 92       	push	r13
    2fd2:	ef 92       	push	r14
    2fd4:	ff 92       	push	r15
    2fd6:	0f 93       	push	r16
    2fd8:	1f 93       	push	r17
    2fda:	7b 01       	movw	r14, r22
    2fdc:	8c 01       	movw	r16, r24
    2fde:	fb 01       	movw	r30, r22
    2fe0:	09 95       	icall
    2fe2:	d8 2e       	mov	r13, r24
    2fe4:	c8 01       	movw	r24, r16
    2fe6:	01 96       	adiw	r24, 0x01	; 1
    2fe8:	f7 01       	movw	r30, r14
    2fea:	09 95       	icall
    2fec:	98 2f       	mov	r25, r24
    2fee:	8d 2d       	mov	r24, r13
    2ff0:	1f 91       	pop	r17
    2ff2:	0f 91       	pop	r16
    2ff4:	ff 90       	pop	r15
    2ff6:	ef 90       	pop	r14
    2ff8:	df 90       	pop	r13
    2ffa:	08 95       	ret

00002ffc <_exit>:
    2ffc:	f8 94       	cli

00002ffe <__stop_program>:
    2ffe:	ff cf       	rjmp	.-2      	; 0x2ffe <__stop_program>
