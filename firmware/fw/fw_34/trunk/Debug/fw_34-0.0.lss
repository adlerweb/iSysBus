
fw_34-0.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00002ac2  00002b36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ac2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000224  00800140  00002b02  00002b76  2**0
                  ALLOC
  3 .stab         00005acc  00000000  00000000  00002b78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002758  00000000  00000000  00008644  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      38:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__vector_14>
      3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      48:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      58:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      5c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      60:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      64:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>

00000068 <pgmIsb_Obj_Ch_Array>:
      68:	00 00 00 01 01 01 02 02 02 03 03 03 04 04 04 05     ................
      78:	05 05 06 06 06 07 07 07 08 09 0a 0b 0c 0d 0e 0f     ................

00000088 <pgmIsb_App_DigIn_Ch_Array>:
      88:	00 01 02 03 04 05 06 07                             ........

00000090 <pgmIsb_App_DigIn_Pin0_Array>:
      90:	58 59 5a 5b 5c 5d 60 61                             XYZ[\]`a

00000098 <pgmIsb_App_DigIn_Obj_0_Array>:
      98:	00 03 06 09 0c 0f 12 15                             ........

000000a0 <pgmIsb_App_DigIn_Obj_1_Array>:
      a0:	01 04 07 0a 0d 10 13 16                             ........

000000a8 <pgmIsb_App_DigIn_Obj_2_Array>:
      a8:	02 05 08 0b 0e 11 14 17                             ........

000000b0 <pgmIsb_App_DigOut_Ch_Array>:
      b0:	08 09 0a 0b 0c 0d 0e 0f                             ........

000000b8 <pgmIsb_App_DigOut_Obj_0_Array>:
      b8:	18 19 1a 1b 1c 1d 1e 1f                             ........

000000c0 <pgmIsb_App_DigOut_Pin0_Array>:
      c0:	23 24 16 17 25 26 27 11                             #$..%&'.

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d4 e0       	ldi	r29, 0x04	; 4
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e2 ec       	ldi	r30, 0xC2	; 194
      dc:	fa e2       	ldi	r31, 0x2A	; 42
      de:	02 c0       	rjmp	.+4      	; 0xe4 <.do_copy_data_start>

000000e0 <.do_copy_data_loop>:
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0

000000e4 <.do_copy_data_start>:
      e4:	a0 34       	cpi	r26, 0x40	; 64
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <.do_copy_data_loop>

000000ea <__do_clear_bss>:
      ea:	13 e0       	ldi	r17, 0x03	; 3
      ec:	a0 e4       	ldi	r26, 0x40	; 64
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a4 36       	cpi	r26, 0x64	; 100
      f6:	b1 07       	cpc	r27, r17
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
      fa:	0e 94 10 14 	call	0x2820	; 0x2820 <main>
      fe:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <_exit>

00000102 <__bad_interrupt>:
     102:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000106 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
     106:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
     108:	f9 99       	sbic	0x1f, 1	; 31
     10a:	fe cf       	rjmp	.-4      	; 0x108 <eeprom_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     10c:	32 bd       	out	0x22, r19	; 34
     10e:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
     110:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
     112:	80 b5       	in	r24, 0x20	; 32
}
     114:	08 95       	ret

00000116 <lib_eep_read_byte>:
#ifndef LIB_EEP_C_
	#define LIB_EEP_C_



	uint8_t __attribute__((always_inline)) lib_eep_read_byte(uint8_t * aAddr) {
     116:	9c 01       	movw	r18, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     118:	f9 99       	sbic	0x1f, 1	; 31
     11a:	fe cf       	rjmp	.-4      	; 0x118 <lib_eep_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     11c:	32 bd       	out	0x22, r19	; 34
     11e:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
     120:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
     122:	80 b5       	in	r24, 0x20	; 32
		return eeprom_read_byte(aAddr);;
	}
     124:	08 95       	ret

00000126 <lib_eep_write_byte>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     126:	f9 99       	sbic	0x1f, 1	; 31
     128:	fe cf       	rjmp	.-4      	; 0x126 <lib_eep_write_byte>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     12a:	9c 01       	movw	r18, r24
     12c:	92 bd       	out	0x22, r25	; 34
     12e:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
     130:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
     132:	80 b5       	in	r24, 0x20	; 32
	}



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
     134:	86 17       	cp	r24, r22
     136:	59 f0       	breq	.+22     	; 0x14e <lib_eep_write_byte+0x28>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     138:	f9 99       	sbic	0x1f, 1	; 31
     13a:	fe cf       	rjmp	.-4      	; 0x138 <lib_eep_write_byte+0x12>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     13c:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     13e:	32 bd       	out	0x22, r19	; 34
     140:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
     142:	60 bd       	out	0x20, r22	; 32

    __asm__ __volatile__ (
     144:	0f b6       	in	r0, 0x3f	; 63
     146:	f8 94       	cli
     148:	fa 9a       	sbi	0x1f, 2	; 31
     14a:	f9 9a       	sbi	0x1f, 1	; 31
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	08 95       	ret

00000150 <lib_eep_fw_read_byte>:
	}



	uint8_t __attribute__((always_inline)) lib_eep_fw_read_byte(uint8_t * aAddr) {
		return eeprom_read_byte(Isb_Firmware_Offset + aAddr);;
     150:	20 91 47 01 	lds	r18, 0x0147
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     154:	f9 99       	sbic	0x1f, 1	; 31
     156:	fe cf       	rjmp	.-4      	; 0x154 <lib_eep_fw_read_byte+0x4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     158:	82 0f       	add	r24, r18
     15a:	91 1d       	adc	r25, r1
     15c:	92 bd       	out	0x22, r25	; 34
     15e:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
     160:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
     162:	80 b5       	in	r24, 0x20	; 32
	}
     164:	08 95       	ret

00000166 <lib_eep_fw_write_byte>:
		return eeprom_read_word(Isb_Firmware_Offset + aAddr);;
	}



	void __attribute__((always_inline)) lib_eep_fw_write_byte(uint8_t * aAddr, uint8_t aData) {
     166:	ac 01       	movw	r20, r24
		if (eeprom_read_byte(Isb_Firmware_Offset + aAddr) != aData) {
     168:	80 91 47 01 	lds	r24, 0x0147
     16c:	28 2f       	mov	r18, r24
     16e:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     170:	f9 99       	sbic	0x1f, 1	; 31
     172:	fe cf       	rjmp	.-4      	; 0x170 <lib_eep_fw_write_byte+0xa>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     174:	ca 01       	movw	r24, r20
     176:	82 0f       	add	r24, r18
     178:	93 1f       	adc	r25, r19
     17a:	92 bd       	out	0x22, r25	; 34
     17c:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
     17e:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
     180:	80 b5       	in	r24, 0x20	; 32
     182:	86 17       	cp	r24, r22
     184:	69 f0       	breq	.+26     	; 0x1a0 <lib_eep_fw_write_byte+0x3a>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     186:	f9 99       	sbic	0x1f, 1	; 31
     188:	fe cf       	rjmp	.-4      	; 0x186 <lib_eep_fw_write_byte+0x20>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     18a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     18c:	24 0f       	add	r18, r20
     18e:	35 1f       	adc	r19, r21
     190:	32 bd       	out	0x22, r19	; 34
     192:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
     194:	60 bd       	out	0x20, r22	; 32

    __asm__ __volatile__ (
     196:	0f b6       	in	r0, 0x3f	; 63
     198:	f8 94       	cli
     19a:	fa 9a       	sbi	0x1f, 2	; 31
     19c:	f9 9a       	sbi	0x1f, 1	; 31
     19e:	0f be       	out	0x3f, r0	; 63
     1a0:	08 95       	ret

000001a2 <Lib_Pin_Get>:
	#endif



	uint8_t Lib_Pin_Get(const uint8_t aPort, const uint8_t aPin) {
		return (*(PINx[aPort]) >> aPin) & 1;
     1a2:	e8 2f       	mov	r30, r24
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	ee 0f       	add	r30, r30
     1a8:	ff 1f       	adc	r31, r31
     1aa:	ec 5d       	subi	r30, 0xDC	; 220
     1ac:	fe 4f       	sbci	r31, 0xFE	; 254
     1ae:	01 90       	ld	r0, Z+
     1b0:	f0 81       	ld	r31, Z
     1b2:	e0 2d       	mov	r30, r0
     1b4:	80 81       	ld	r24, Z
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <Lib_Pin_Get+0x1c>
     1ba:	95 95       	asr	r25
     1bc:	87 95       	ror	r24
     1be:	6a 95       	dec	r22
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <Lib_Pin_Get+0x18>
	}
     1c2:	81 70       	andi	r24, 0x01	; 1
     1c4:	08 95       	ret

000001c6 <Lib_Pin_Set>:



	void __attribute__((noinline)) Lib_Pin_Set(const uint8_t aPort, const uint8_t aPin, const uint8_t aCmd) {
     1c6:	91 e0       	ldi	r25, 0x01	; 1
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <Lib_Pin_Set+0x8>
		uint8_t mask;
		uint8_t tmp;
		volatile uint8_t *reg;
		uint8_t Pxx = aPin;
		for (mask = 1; Pxx--; mask <<= 1) ;
     1ca:	99 0f       	add	r25, r25
     1cc:	61 50       	subi	r22, 0x01	; 1
     1ce:	66 23       	and	r22, r22
     1d0:	e1 f7       	brne	.-8      	; 0x1ca <Lib_Pin_Set+0x4>
		reg = PORTx[aPort];
     1d2:	a8 2f       	mov	r26, r24
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	fd 01       	movw	r30, r26
     1d8:	ee 0f       	add	r30, r30
     1da:	ff 1f       	adc	r31, r31
     1dc:	ec 5e       	subi	r30, 0xEC	; 236
     1de:	fe 4f       	sbci	r31, 0xFE	; 254
     1e0:	01 90       	ld	r0, Z+
     1e2:	f0 81       	ld	r31, Z
     1e4:	e0 2d       	mov	r30, r0
		tmp = *reg | mask;
     1e6:	80 81       	ld	r24, Z
     1e8:	89 2b       	or	r24, r25
		if (! (aCmd & 2)) {
     1ea:	41 ff       	sbrs	r20, 1
			tmp ^= mask;
     1ec:	89 27       	eor	r24, r25
		}
		*reg = tmp;
     1ee:	80 83       	st	Z, r24
		reg = DDRx[aPort];
     1f0:	aa 0f       	add	r26, r26
     1f2:	bb 1f       	adc	r27, r27
     1f4:	ac 5f       	subi	r26, 0xFC	; 252
     1f6:	be 4f       	sbci	r27, 0xFE	; 254
     1f8:	ed 91       	ld	r30, X+
     1fa:	fc 91       	ld	r31, X
		tmp = *reg | mask;
     1fc:	80 81       	ld	r24, Z
     1fe:	89 2b       	or	r24, r25
		if (! (aCmd & 1)) {
     200:	40 ff       	sbrs	r20, 0
			tmp ^= mask;
     202:	89 27       	eor	r24, r25
		}
		*reg = tmp;
     204:	80 83       	st	Z, r24
	}
     206:	08 95       	ret

00000208 <Inf_Spi_Init>:
	#endif /* ISYSBUS_LIB */



	void Inf_Spi_Init(const unsigned char aCfg)
	{
     208:	df 93       	push	r29
     20a:	cf 93       	push	r28
     20c:	0f 92       	push	r0
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	89 83       	std	Y+1, r24	; 0x01

		if (bit_is_set(aCfg, SPE))
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	86 ff       	sbrs	r24, 6
     218:	0c c0       	rjmp	.+24     	; 0x232 <Inf_Spi_Init+0x2a>
		{
			if (bit_is_set(aCfg, MSTR))
     21a:	89 81       	ldd	r24, Y+1	; 0x01
     21c:	84 ff       	sbrs	r24, 4
     21e:	05 c0       	rjmp	.+10     	; 0x22a <Inf_Spi_Init+0x22>
			{
				INF_SPI_DDR |= (1 << INF_SPI_DD_MOSI) | (1 << INF_SPI_DD_SCK);
     220:	84 b1       	in	r24, 0x04	; 4
     222:	88 62       	ori	r24, 0x28	; 40
     224:	84 b9       	out	0x04, r24	; 4
				INF_SPI_DDR &= ~(1 << INF_SPI_DD_MISO);
     226:	24 98       	cbi	0x04, 4	; 4
     228:	07 c0       	rjmp	.+14     	; 0x238 <Inf_Spi_Init+0x30>
			}
			else
			{
				INF_SPI_DDR |= (1 << INF_SPI_DD_MISO);
     22a:	24 9a       	sbi	0x04, 4	; 4
				INF_SPI_DDR &= ~(1 << INF_SPI_DD_MOSI) & ~(1 << INF_SPI_DD_SCK);
     22c:	84 b1       	in	r24, 0x04	; 4
     22e:	87 7d       	andi	r24, 0xD7	; 215
     230:	02 c0       	rjmp	.+4      	; 0x236 <Inf_Spi_Init+0x2e>
			}
		}
		else
		{
			INF_SPI_DDR &= ~(1 << INF_SPI_DD_MISO) & ~(1 << INF_SPI_DD_MOSI) & ~(1 << INF_SPI_DD_SCK);
     232:	84 b1       	in	r24, 0x04	; 4
     234:	87 7c       	andi	r24, 0xC7	; 199
     236:	84 b9       	out	0x04, r24	; 4
		}

		SPCR = aCfg;
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	8c bd       	out	0x2c, r24	; 44
		SPSR = 0;
     23c:	1d bc       	out	0x2d, r1	; 45

	}
     23e:	0f 90       	pop	r0
     240:	cf 91       	pop	r28
     242:	df 91       	pop	r29
     244:	08 95       	ret

00000246 <Inf_Spi_Rx>:


	unsigned char Inf_Spi_Rx(void)
	{

		SPDR = 0;
     246:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     248:	0d b4       	in	r0, 0x2d	; 45
     24a:	07 fe       	sbrs	r0, 7
     24c:	fd cf       	rjmp	.-6      	; 0x248 <Inf_Spi_Rx+0x2>
		return SPDR;
     24e:	8e b5       	in	r24, 0x2e	; 46

	}
     250:	08 95       	ret

00000252 <Inf_Spi_Tx>:


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     252:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     254:	0d b4       	in	r0, 0x2d	; 45
     256:	07 fe       	sbrs	r0, 7
     258:	fd cf       	rjmp	.-6      	; 0x254 <Inf_Spi_Tx+0x2>

	}
     25a:	08 95       	ret

0000025c <Inf_Spi_TxRx>:


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     25c:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     25e:	0d b4       	in	r0, 0x2d	; 45
     260:	07 fe       	sbrs	r0, 7
     262:	fd cf       	rjmp	.-6      	; 0x25e <Inf_Spi_TxRx+0x2>
		return SPDR;
     264:	8e b5       	in	r24, 0x2e	; 46

	}
     266:	08 95       	ret

00000268 <Lib_Mcp2515_Read>:
#ifndef LIB_MCP2515_C_
	#define LIB_MCP2515_C_



	uint8_t Lib_Mcp2515_Read(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr) {
     268:	ff 92       	push	r15
     26a:	0f 93       	push	r16
     26c:	1f 93       	push	r17
     26e:	08 2f       	mov	r16, r24
     270:	f6 2e       	mov	r15, r22
     272:	14 2f       	mov	r17, r20
		uint8_t aData;
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     274:	41 e0       	ldi	r20, 0x01	; 1
     276:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     27a:	83 e0       	ldi	r24, 0x03	; 3
     27c:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     27e:	0d b4       	in	r0, 0x2d	; 45
     280:	07 fe       	sbrs	r0, 7
     282:	fd cf       	rjmp	.-6      	; 0x27e <Lib_Mcp2515_Read+0x16>
		return SPDR;
     284:	8e b5       	in	r24, 0x2e	; 46


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     286:	1e bd       	out	0x2e, r17	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     288:	0d b4       	in	r0, 0x2d	; 45
     28a:	07 fe       	sbrs	r0, 7
     28c:	fd cf       	rjmp	.-6      	; 0x288 <Lib_Mcp2515_Read+0x20>
		return SPDR;
     28e:	8e b5       	in	r24, 0x2e	; 46


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     290:	8f ef       	ldi	r24, 0xFF	; 255
     292:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     294:	0d b4       	in	r0, 0x2d	; 45
     296:	07 fe       	sbrs	r0, 7
     298:	fd cf       	rjmp	.-6      	; 0x294 <Lib_Mcp2515_Read+0x2c>
		return SPDR;
     29a:	1e b5       	in	r17, 0x2e	; 46
		Inf_Spi_TxRx(LIB_MCP2515_READ);
		Inf_Spi_TxRx(aAddr);
		aData = Inf_Spi_TxRx(0xff);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     29c:	80 2f       	mov	r24, r16
     29e:	6f 2d       	mov	r22, r15
     2a0:	43 e0       	ldi	r20, 0x03	; 3
     2a2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>
		return aData;
	}
     2a6:	81 2f       	mov	r24, r17
     2a8:	1f 91       	pop	r17
     2aa:	0f 91       	pop	r16
     2ac:	ff 90       	pop	r15
     2ae:	08 95       	ret

000002b0 <Lib_Mcp2515_Write>:



	void Lib_Mcp2515_Write(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr, const uint8_t aData) {
     2b0:	ef 92       	push	r14
     2b2:	ff 92       	push	r15
     2b4:	0f 93       	push	r16
     2b6:	1f 93       	push	r17
     2b8:	08 2f       	mov	r16, r24
     2ba:	f6 2e       	mov	r15, r22
     2bc:	14 2f       	mov	r17, r20
     2be:	e2 2e       	mov	r14, r18
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     2c0:	41 e0       	ldi	r20, 0x01	; 1
     2c2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     2c6:	82 e0       	ldi	r24, 0x02	; 2
     2c8:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     2ca:	0d b4       	in	r0, 0x2d	; 45
     2cc:	07 fe       	sbrs	r0, 7
     2ce:	fd cf       	rjmp	.-6      	; 0x2ca <Lib_Mcp2515_Write+0x1a>
		return SPDR;
     2d0:	8e b5       	in	r24, 0x2e	; 46


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     2d2:	1e bd       	out	0x2e, r17	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     2d4:	0d b4       	in	r0, 0x2d	; 45
     2d6:	07 fe       	sbrs	r0, 7
     2d8:	fd cf       	rjmp	.-6      	; 0x2d4 <Lib_Mcp2515_Write+0x24>
		return SPDR;
     2da:	8e b5       	in	r24, 0x2e	; 46


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     2dc:	ee bc       	out	0x2e, r14	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     2de:	0d b4       	in	r0, 0x2d	; 45
     2e0:	07 fe       	sbrs	r0, 7
     2e2:	fd cf       	rjmp	.-6      	; 0x2de <Lib_Mcp2515_Write+0x2e>
		return SPDR;
     2e4:	8e b5       	in	r24, 0x2e	; 46
		Inf_Spi_TxRx(LIB_MCP2515_WRITE);
		Inf_Spi_TxRx(aAddr);
		Inf_Spi_TxRx(aData);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     2e6:	80 2f       	mov	r24, r16
     2e8:	6f 2d       	mov	r22, r15
     2ea:	43 e0       	ldi	r20, 0x03	; 3
     2ec:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>
	}
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	ff 90       	pop	r15
     2f6:	ef 90       	pop	r14
     2f8:	08 95       	ret

000002fa <Lib_Mcp2515_Modify>:



	void Lib_Mcp2515_Modify(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aAddr, const uint8_t aMask, const uint8_t aData) {
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	e8 2e       	mov	r14, r24
     306:	d6 2e       	mov	r13, r22
     308:	14 2f       	mov	r17, r20
     30a:	f2 2e       	mov	r15, r18
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     30c:	41 e0       	ldi	r20, 0x01	; 1
     30e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     312:	85 e0       	ldi	r24, 0x05	; 5
     314:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     316:	0d b4       	in	r0, 0x2d	; 45
     318:	07 fe       	sbrs	r0, 7
     31a:	fd cf       	rjmp	.-6      	; 0x316 <Lib_Mcp2515_Modify+0x1c>
		return SPDR;
     31c:	8e b5       	in	r24, 0x2e	; 46


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     31e:	1e bd       	out	0x2e, r17	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     320:	0d b4       	in	r0, 0x2d	; 45
     322:	07 fe       	sbrs	r0, 7
     324:	fd cf       	rjmp	.-6      	; 0x320 <Lib_Mcp2515_Modify+0x26>
		return SPDR;
     326:	8e b5       	in	r24, 0x2e	; 46


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     328:	fe bc       	out	0x2e, r15	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     32a:	0d b4       	in	r0, 0x2d	; 45
     32c:	07 fe       	sbrs	r0, 7
     32e:	fd cf       	rjmp	.-6      	; 0x32a <Lib_Mcp2515_Modify+0x30>
		return SPDR;
     330:	8e b5       	in	r24, 0x2e	; 46


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     332:	0e bd       	out	0x2e, r16	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     334:	0d b4       	in	r0, 0x2d	; 45
     336:	07 fe       	sbrs	r0, 7
     338:	fd cf       	rjmp	.-6      	; 0x334 <Lib_Mcp2515_Modify+0x3a>
		return SPDR;
     33a:	8e b5       	in	r24, 0x2e	; 46
		Inf_Spi_TxRx(LIB_MCP2515_BIT_MODIFY);
		Inf_Spi_TxRx(aAddr);
		Inf_Spi_TxRx(aMask);
		Inf_Spi_TxRx(aData);
		Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     33c:	8e 2d       	mov	r24, r14
     33e:	6d 2d       	mov	r22, r13
     340:	43 e0       	ldi	r20, 0x03	; 3
     342:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>
	}
     346:	1f 91       	pop	r17
     348:	0f 91       	pop	r16
     34a:	ff 90       	pop	r15
     34c:	ef 90       	pop	r14
     34e:	df 90       	pop	r13
     350:	08 95       	ret

00000352 <Inf_Can_Init>:
	#define INF_CAN_C_



	#if defined(INF_CAN0_TX) || defined(INF_CAN0_RX) || defined(INF_CAN1_TX) || defined(INF_CAN1_RX) || defined(INF_CAN2_TX) || defined(INF_CAN2_RX)
		uint8_t Inf_Can_Init(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aCnf1, const uint8_t aCnf2, const uint8_t aCnf3, const uint8_t aRSPort, const uint8_t aRSPin, const uint8_t aMode) {
     352:	8f 92       	push	r8
     354:	9f 92       	push	r9
     356:	af 92       	push	r10
     358:	bf 92       	push	r11
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	df 93       	push	r29
     368:	cf 93       	push	r28
     36a:	cd b7       	in	r28, 0x3d	; 61
     36c:	de b7       	in	r29, 0x3e	; 62
     36e:	f8 2e       	mov	r15, r24
     370:	d6 2e       	mov	r13, r22
     372:	14 2f       	mov	r17, r20
     374:	b2 2e       	mov	r11, r18
     376:	90 2e       	mov	r9, r16
     378:	0c 2d       	mov	r16, r12
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     37a:	43 e0       	ldi	r20, 0x03	; 3
     37c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     380:	81 2f       	mov	r24, r17
     382:	0e 94 04 01 	call	0x208	; 0x208 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     386:	8f 2d       	mov	r24, r15
     388:	6d 2d       	mov	r22, r13
     38a:	41 e0       	ldi	r20, 0x01	; 1
     38c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     390:	80 ec       	ldi	r24, 0xC0	; 192
     392:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     394:	0d b4       	in	r0, 0x2d	; 45
     396:	07 fe       	sbrs	r0, 7
     398:	fd cf       	rjmp	.-6      	; 0x394 <Inf_Can_Init+0x42>
		return SPDR;
     39a:	8e b5       	in	r24, 0x2e	; 46
			Inf_Spi_TxRx(LIB_MCP2515_RESET);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     39c:	8f 2d       	mov	r24, r15
     39e:	6d 2d       	mov	r22, r13
     3a0:	43 e0       	ldi	r20, 0x03	; 3
     3a2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3a6:	80 ea       	ldi	r24, 0xA0	; 160
     3a8:	9f e0       	ldi	r25, 0x0F	; 15
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <Inf_Can_Init+0x58>
			_delay_ms(2);
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF1, aCnf1);
     3ae:	8f 2d       	mov	r24, r15
     3b0:	6d 2d       	mov	r22, r13
     3b2:	4a e2       	ldi	r20, 0x2A	; 42
     3b4:	2b 2d       	mov	r18, r11
     3b6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF2, aCnf2);
     3ba:	8f 2d       	mov	r24, r15
     3bc:	6d 2d       	mov	r22, r13
     3be:	49 e2       	ldi	r20, 0x29	; 41
     3c0:	29 2d       	mov	r18, r9
     3c2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CNF3, aCnf3);
     3c6:	8f 2d       	mov	r24, r15
     3c8:	6d 2d       	mov	r22, r13
     3ca:	48 e2       	ldi	r20, 0x28	; 40
     3cc:	2e 2d       	mov	r18, r14
     3ce:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_RXB0CTRL, 0x64);
     3d2:	8f 2d       	mov	r24, r15
     3d4:	6d 2d       	mov	r22, r13
     3d6:	40 e6       	ldi	r20, 0x60	; 96
     3d8:	24 e6       	ldi	r18, 0x64	; 100
     3da:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_RXB1CTRL, 0x60);
     3de:	8f 2d       	mov	r24, r15
     3e0:	6d 2d       	mov	r22, r13
     3e2:	40 e7       	ldi	r20, 0x70	; 112
     3e4:	20 e6       	ldi	r18, 0x60	; 96
     3e6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_CANINTE, 0x03);
     3ea:	8f 2d       	mov	r24, r15
     3ec:	6d 2d       	mov	r22, r13
     3ee:	4b e2       	ldi	r20, 0x2B	; 43
     3f0:	23 e0       	ldi	r18, 0x03	; 3
     3f2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Lib_Mcp2515_Write>
			if (aRSPort != 0) {
     3f6:	00 23       	and	r16, r16
     3f8:	c9 f0       	breq	.+50     	; 0x42c <Inf_Can_Init+0xda>
				if (aRSPort < 8) {
     3fa:	08 30       	cpi	r16, 0x08	; 8
     3fc:	30 f4       	brcc	.+12     	; 0x40a <Inf_Can_Init+0xb8>
					Lib_Pin_Set(aRSPort, aRSPin, LIB_PIN_OUTPUT_LOW);
     3fe:	80 2f       	mov	r24, r16
     400:	6a 2d       	mov	r22, r10
     402:	41 e0       	ldi	r20, 0x01	; 1
     404:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>
     408:	11 c0       	rjmp	.+34     	; 0x42c <Inf_Can_Init+0xda>
				}
//				else if (aRSPort < 16) {
//					Lib_Pin_Set(aRSPort, aRSPin, LIB_PIN_OUTPUT_HIGH);
//				}
				else if (aRSPort == 0xFC) {
     40a:	0c 3f       	cpi	r16, 0xFC	; 252
     40c:	31 f4       	brne	.+12     	; 0x41a <Inf_Can_Init+0xc8>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x14, 0x04);
     40e:	8f 2d       	mov	r24, r15
     410:	6d 2d       	mov	r22, r13
     412:	4c e0       	ldi	r20, 0x0C	; 12
     414:	24 e1       	ldi	r18, 0x14	; 20
     416:	04 e0       	ldi	r16, 0x04	; 4
     418:	07 c0       	rjmp	.+14     	; 0x428 <Inf_Can_Init+0xd6>
				}
				else if (aRSPort == 0xFD) {
     41a:	0d 3f       	cpi	r16, 0xFD	; 253
     41c:	39 f4       	brne	.+14     	; 0x42c <Inf_Can_Init+0xda>
					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x28, 0x08);
     41e:	8f 2d       	mov	r24, r15
     420:	6d 2d       	mov	r22, r13
     422:	4c e0       	ldi	r20, 0x0C	; 12
     424:	28 e2       	ldi	r18, 0x28	; 40
     426:	08 e0       	ldi	r16, 0x08	; 8
     428:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Lib_Mcp2515_Modify>
//				}
//				else if (aRSPort == 0xFF) {
//					Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x28, 0x28);
//				}
			}
			Lib_Mcp2515_Write(aSSPort, aSSPin, LIB_MCP2515_BFPCTRL, 0x0C);
     42c:	8f 2d       	mov	r24, r15
     42e:	6d 2d       	mov	r22, r13
     430:	4c e0       	ldi	r20, 0x0C	; 12
     432:	2c e0       	ldi	r18, 0x0C	; 12
     434:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Lib_Mcp2515_Write>
			Lib_Mcp2515_Modify(aSSPort, aSSPin, LIB_MCP2515_CANCTRL, 0xE0, aMode);
     438:	8f 2d       	mov	r24, r15
     43a:	6d 2d       	mov	r22, r13
     43c:	4f e0       	ldi	r20, 0x0F	; 15
     43e:	20 ee       	ldi	r18, 0xE0	; 224
     440:	08 2d       	mov	r16, r8
     442:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Lib_Mcp2515_Modify>
			if (((Lib_Mcp2515_Read(aSSPort, aSSPin, LIB_MCP2515_CANCTRL)) & 0xE0) == aMode) {
     446:	8f 2d       	mov	r24, r15
     448:	6d 2d       	mov	r22, r13
     44a:	4f e0       	ldi	r20, 0x0F	; 15
     44c:	0e 94 34 01 	call	0x268	; 0x268 <Lib_Mcp2515_Read>
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	80 7e       	andi	r24, 0xE0	; 224
     456:	90 70       	andi	r25, 0x00	; 0
     458:	28 2d       	mov	r18, r8
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	82 17       	cp	r24, r18
     45e:	93 07       	cpc	r25, r19
     460:	09 f4       	brne	.+2      	; 0x464 <Inf_Can_Init+0x112>
     462:	41 e0       	ldi	r20, 0x01	; 1
				return TRUE;
			}
			return FALSE;
		}
     464:	84 2f       	mov	r24, r20
     466:	cf 91       	pop	r28
     468:	df 91       	pop	r29
     46a:	1f 91       	pop	r17
     46c:	0f 91       	pop	r16
     46e:	ff 90       	pop	r15
     470:	ef 90       	pop	r14
     472:	df 90       	pop	r13
     474:	cf 90       	pop	r12
     476:	bf 90       	pop	r11
     478:	af 90       	pop	r10
     47a:	9f 90       	pop	r9
     47c:	8f 90       	pop	r8
     47e:	08 95       	ret

00000480 <Inf_Can_Rx>:
	#endif /* INF_CAN0_TX || INF_CAN0_RX || INF_CAN1_TX || INF_CAN1_RX || INF_CAN2_TX || INF_CAN2_RX */



	#if defined(INF_CAN0_RX) || defined(INF_CAN1_RX) || defined(INF_CAN2_RX)
		uint8_t Inf_Can_Rx(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aRSPort, const uint8_t aRSPin, Inf_Can_Msg_t * aInf_Can_Msg) {
     480:	df 92       	push	r13
     482:	ef 92       	push	r14
     484:	ff 92       	push	r15
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	df 93       	push	r29
     48c:	cf 93       	push	r28
     48e:	0f 92       	push	r0
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	08 2f       	mov	r16, r24
     496:	d6 2e       	mov	r13, r22
     498:	14 2f       	mov	r17, r20
			uint8_t State = 0;
     49a:	19 82       	std	Y+1, r1	; 0x01
			uint8_t CmdSave = 0;
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     49c:	43 e0       	ldi	r20, 0x03	; 3
     49e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     4a2:	81 2f       	mov	r24, r17
     4a4:	0e 94 04 01 	call	0x208	; 0x208 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     4a8:	80 2f       	mov	r24, r16
     4aa:	6d 2d       	mov	r22, r13
     4ac:	41 e0       	ldi	r20, 0x01	; 1
     4ae:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     4b2:	80 eb       	ldi	r24, 0xB0	; 176
     4b4:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     4b6:	0d b4       	in	r0, 0x2d	; 45
     4b8:	07 fe       	sbrs	r0, 7
     4ba:	fd cf       	rjmp	.-6      	; 0x4b6 <Inf_Can_Rx+0x36>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     4bc:	8f ef       	ldi	r24, 0xFF	; 255
     4be:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     4c0:	0d b4       	in	r0, 0x2d	; 45
     4c2:	07 fe       	sbrs	r0, 7
     4c4:	fd cf       	rjmp	.-6      	; 0x4c0 <Inf_Can_Rx+0x40>
		return SPDR;
     4c6:	9e b5       	in	r25, 0x2e	; 46


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     4c8:	8f ef       	ldi	r24, 0xFF	; 255
     4ca:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     4cc:	0d b4       	in	r0, 0x2d	; 45
     4ce:	07 fe       	sbrs	r0, 7
     4d0:	fd cf       	rjmp	.-6      	; 0x4cc <Inf_Can_Rx+0x4c>
		return SPDR;
     4d2:	8e b5       	in	r24, 0x2e	; 46
			Inf_Spi_Tx(LIB_MCP2515_RX_STATUS);
			State = Inf_Spi_TxRx(0xFF);
     4d4:	99 83       	std	Y+1, r25	; 0x01
			Inf_Spi_TxRx(0xFF);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     4d6:	80 2f       	mov	r24, r16
     4d8:	6d 2d       	mov	r22, r13
     4da:	43 e0       	ldi	r20, 0x03	; 3
     4dc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>
			if (bit_is_set(State, LIB_MCP2515_RX_STATUS_INSTRUCTION_CANINTF_RX0IF)) {
     4e0:	89 81       	ldd	r24, Y+1	; 0x01
     4e2:	86 ff       	sbrs	r24, 6
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <Inf_Can_Rx+0x6a>
     4e6:	10 e9       	ldi	r17, 0x90	; 144
     4e8:	06 c0       	rjmp	.+12     	; 0x4f6 <Inf_Can_Rx+0x76>
				CmdSave = LIB_MCP2515_READ_RX_BUFFER0;
			}
			else if (bit_is_set(State, LIB_MCP2515_RX_STATUS_INSTRUCTION_CANINTF_RX1IF)) {
     4ea:	89 81       	ldd	r24, Y+1	; 0x01
     4ec:	87 fd       	sbrc	r24, 7
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <Inf_Can_Rx+0x74>
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	4e c0       	rjmp	.+156    	; 0x590 <__stack+0x91>
     4f4:	14 e9       	ldi	r17, 0x94	; 148
				CmdSave = LIB_MCP2515_READ_RX_BUFFER1;
			}
			else {
				return FALSE;
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     4f6:	80 2f       	mov	r24, r16
     4f8:	6d 2d       	mov	r22, r13
     4fa:	41 e0       	ldi	r20, 0x01	; 1
     4fc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     500:	1e bd       	out	0x2e, r17	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     502:	0d b4       	in	r0, 0x2d	; 45
     504:	07 fe       	sbrs	r0, 7
     506:	fd cf       	rjmp	.-6      	; 0x502 <__stack+0x3>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     508:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     50a:	0d b4       	in	r0, 0x2d	; 45
     50c:	07 fe       	sbrs	r0, 7
     50e:	fd cf       	rjmp	.-6      	; 0x50a <__stack+0xb>
		return SPDR;
     510:	8e b5       	in	r24, 0x2e	; 46
			Inf_Spi_Tx(CmdSave);
			aInf_Can_Msg->SIdH = Inf_Spi_TxRx(0x00);
     512:	f7 01       	movw	r30, r14
     514:	81 83       	std	Z+1, r24	; 0x01


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     516:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     518:	0d b4       	in	r0, 0x2d	; 45
     51a:	07 fe       	sbrs	r0, 7
     51c:	fd cf       	rjmp	.-6      	; 0x518 <__stack+0x19>
		return SPDR;
     51e:	8e b5       	in	r24, 0x2e	; 46
			aInf_Can_Msg->SIdL = Inf_Spi_TxRx(0x00);
     520:	f7 01       	movw	r30, r14
     522:	80 83       	st	Z, r24


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     524:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     526:	0d b4       	in	r0, 0x2d	; 45
     528:	07 fe       	sbrs	r0, 7
     52a:	fd cf       	rjmp	.-6      	; 0x526 <__stack+0x27>
		return SPDR;
     52c:	8e b5       	in	r24, 0x2e	; 46
			aInf_Can_Msg->EIdH = Inf_Spi_TxRx(0x00);
     52e:	f7 01       	movw	r30, r14
     530:	83 83       	std	Z+3, r24	; 0x03


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     532:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     534:	0d b4       	in	r0, 0x2d	; 45
     536:	07 fe       	sbrs	r0, 7
     538:	fd cf       	rjmp	.-6      	; 0x534 <__stack+0x35>
		return SPDR;
     53a:	8e b5       	in	r24, 0x2e	; 46
			aInf_Can_Msg->EIdL = Inf_Spi_TxRx(0x00);
     53c:	f7 01       	movw	r30, r14
     53e:	82 83       	std	Z+2, r24	; 0x02


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     540:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     542:	0d b4       	in	r0, 0x2d	; 45
     544:	07 fe       	sbrs	r0, 7
     546:	fd cf       	rjmp	.-6      	; 0x542 <__stack+0x43>
		return SPDR;
     548:	8e b5       	in	r24, 0x2e	; 46
			aInf_Can_Msg->Dlc = Inf_Spi_TxRx(0x00);
     54a:	f7 01       	movw	r30, r14
     54c:	84 83       	std	Z+4, r24	; 0x04
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
     54e:	84 81       	ldd	r24, Z+4	; 0x04
     550:	86 fd       	sbrc	r24, 6
     552:	11 c0       	rjmp	.+34     	; 0x576 <__stack+0x77>
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0a c0       	rjmp	.+20     	; 0x56c <__stack+0x6d>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     558:	1e bc       	out	0x2e, r1	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     55a:	0d b4       	in	r0, 0x2d	; 45
     55c:	07 fe       	sbrs	r0, 7
     55e:	fd cf       	rjmp	.-6      	; 0x55a <__stack+0x5b>
		return SPDR;
     560:	8e b5       	in	r24, 0x2e	; 46
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
     562:	f7 01       	movw	r30, r14
     564:	e9 0f       	add	r30, r25
     566:	f1 1d       	adc	r31, r1
     568:	85 83       	std	Z+5, r24	; 0x05
			aInf_Can_Msg->SIdL = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->EIdH = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->EIdL = Inf_Spi_TxRx(0x00);
			aInf_Can_Msg->Dlc = Inf_Spi_TxRx(0x00);
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
     56a:	9f 5f       	subi	r25, 0xFF	; 255
     56c:	f7 01       	movw	r30, r14
     56e:	84 81       	ldd	r24, Z+4	; 0x04
     570:	98 17       	cp	r25, r24
     572:	90 f3       	brcs	.-28     	; 0x558 <__stack+0x59>
     574:	07 c0       	rjmp	.+14     	; 0x584 <__stack+0x85>
     576:	f7 01       	movw	r30, r14
     578:	80 e0       	ldi	r24, 0x00	; 0
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
				}
			}
			else {
				for (uint8_t i = 0; i < 8; i++) {
					aInf_Can_Msg->Data[i] = 0x00;
     57a:	15 82       	std	Z+5, r1	; 0x05
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++) {
					aInf_Can_Msg->Data[i] = Inf_Spi_TxRx(0x00);
				}
			}
			else {
				for (uint8_t i = 0; i < 8; i++) {
     57c:	8f 5f       	subi	r24, 0xFF	; 255
     57e:	31 96       	adiw	r30, 0x01	; 1
     580:	88 30       	cpi	r24, 0x08	; 8
     582:	d9 f7       	brne	.-10     	; 0x57a <__stack+0x7b>
					aInf_Can_Msg->Data[i] = 0x00;
				}
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     584:	80 2f       	mov	r24, r16
     586:	6d 2d       	mov	r22, r13
     588:	43 e0       	ldi	r20, 0x03	; 3
     58a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>
     58e:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
		}
     590:	0f 90       	pop	r0
     592:	cf 91       	pop	r28
     594:	df 91       	pop	r29
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	df 90       	pop	r13
     5a0:	08 95       	ret

000005a2 <Inf_Can_Tx>:
	#endif /* INF_CAN0_RX || INF_CAN1_RX || INF_CAN2_RX */



	#if defined(INF_CAN0_TX) || defined(INF_CAN1_TX) || defined(INF_CAN2_TX)
		uint8_t Inf_Can_Tx(const uint8_t aSSPort, const uint8_t aSSPin, const uint8_t aSpiCfg, const uint8_t aRSPort, const uint8_t aRSPin, Inf_Can_Msg_t * aInf_Can_Msg) {
     5a2:	cf 92       	push	r12
     5a4:	df 92       	push	r13
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	df 93       	push	r29
     5b0:	cf 93       	push	r28
     5b2:	0f 92       	push	r0
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	08 2f       	mov	r16, r24
     5ba:	d6 2e       	mov	r13, r22
     5bc:	14 2f       	mov	r17, r20
			uint8_t State = 0;
     5be:	19 82       	std	Y+1, r1	; 0x01
			uint8_t CmdLoad = 0;
			uint8_t CmdSend = 0;
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     5c0:	43 e0       	ldi	r20, 0x03	; 3
     5c2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>
			Inf_Spi_Init(aSpiCfg);
     5c6:	81 2f       	mov	r24, r17
     5c8:	0e 94 04 01 	call	0x208	; 0x208 <Inf_Spi_Init>
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     5cc:	80 2f       	mov	r24, r16
     5ce:	6d 2d       	mov	r22, r13
     5d0:	41 e0       	ldi	r20, 0x01	; 1
     5d2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     5d6:	80 ea       	ldi	r24, 0xA0	; 160
     5d8:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     5da:	0d b4       	in	r0, 0x2d	; 45
     5dc:	07 fe       	sbrs	r0, 7
     5de:	fd cf       	rjmp	.-6      	; 0x5da <Inf_Can_Tx+0x38>


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     5e0:	8f ef       	ldi	r24, 0xFF	; 255
     5e2:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     5e4:	0d b4       	in	r0, 0x2d	; 45
     5e6:	07 fe       	sbrs	r0, 7
     5e8:	fd cf       	rjmp	.-6      	; 0x5e4 <Inf_Can_Tx+0x42>
		return SPDR;
     5ea:	9e b5       	in	r25, 0x2e	; 46


	unsigned char Inf_Spi_TxRx(const unsigned char Data)
	{

		SPDR = Data;
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     5f0:	0d b4       	in	r0, 0x2d	; 45
     5f2:	07 fe       	sbrs	r0, 7
     5f4:	fd cf       	rjmp	.-6      	; 0x5f0 <Inf_Can_Tx+0x4e>
		return SPDR;
     5f6:	8e b5       	in	r24, 0x2e	; 46
			Inf_Spi_Tx(LIB_MCP2515_READ_STATUS);
			State = Inf_Spi_TxRx(0xFF);
     5f8:	99 83       	std	Y+1, r25	; 0x01
			Inf_Spi_TxRx(0xFF);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     5fa:	80 2f       	mov	r24, r16
     5fc:	6d 2d       	mov	r22, r13
     5fe:	43 e0       	ldi	r20, 0x03	; 3
     600:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>
			if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB0CTRL_TXREQ)) {
     604:	89 81       	ldd	r24, Y+1	; 0x01
     606:	82 fd       	sbrc	r24, 2
     608:	04 c0       	rjmp	.+8      	; 0x612 <Inf_Can_Tx+0x70>
     60a:	10 e4       	ldi	r17, 0x40	; 64
     60c:	61 e8       	ldi	r22, 0x81	; 129
     60e:	c6 2e       	mov	r12, r22
     610:	0f c0       	rjmp	.+30     	; 0x630 <Inf_Can_Tx+0x8e>
				CmdLoad = LIB_MCP2515_LOAD_TX_BUFFER0;
				CmdSend = LIB_MCP2515_RTS_TX0;
			}
			else if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB1CTRL_TXREQ)) {
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	84 fd       	sbrc	r24, 4
     616:	04 c0       	rjmp	.+8      	; 0x620 <Inf_Can_Tx+0x7e>
     618:	12 e4       	ldi	r17, 0x42	; 66
     61a:	52 e8       	ldi	r21, 0x82	; 130
     61c:	c5 2e       	mov	r12, r21
     61e:	08 c0       	rjmp	.+16     	; 0x630 <Inf_Can_Tx+0x8e>
				CmdLoad = LIB_MCP2515_LOAD_TX_BUFFER1;
				CmdSend = LIB_MCP2515_RTS_TX1;
			}
			else if (bit_is_clear(State, LIB_MCP2515_READ_STATUS_TXB2CTRL_TXREQ)) {
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	86 ff       	sbrs	r24, 6
     624:	02 c0       	rjmp	.+4      	; 0x62a <Inf_Can_Tx+0x88>
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	50 c0       	rjmp	.+160    	; 0x6ca <Inf_Can_Tx+0x128>
     62a:	14 e4       	ldi	r17, 0x44	; 68
     62c:	44 e8       	ldi	r20, 0x84	; 132
     62e:	c4 2e       	mov	r12, r20
				CmdSend = LIB_MCP2515_RTS_TX2;
			}
			else {
				return FALSE;
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     630:	80 2f       	mov	r24, r16
     632:	6d 2d       	mov	r22, r13
     634:	41 e0       	ldi	r20, 0x01	; 1
     636:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     63a:	1e bd       	out	0x2e, r17	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     63c:	0d b4       	in	r0, 0x2d	; 45
     63e:	07 fe       	sbrs	r0, 7
     640:	fd cf       	rjmp	.-6      	; 0x63c <Inf_Can_Tx+0x9a>
			Inf_Spi_Tx(CmdLoad);
			Inf_Spi_Tx(aInf_Can_Msg->SIdH);
     642:	f7 01       	movw	r30, r14
     644:	81 81       	ldd	r24, Z+1	; 0x01


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     646:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     648:	0d b4       	in	r0, 0x2d	; 45
     64a:	07 fe       	sbrs	r0, 7
     64c:	fd cf       	rjmp	.-6      	; 0x648 <Inf_Can_Tx+0xa6>
			Inf_Spi_Tx(aInf_Can_Msg->SIdL);
     64e:	f7 01       	movw	r30, r14
     650:	80 81       	ld	r24, Z


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     652:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     654:	0d b4       	in	r0, 0x2d	; 45
     656:	07 fe       	sbrs	r0, 7
     658:	fd cf       	rjmp	.-6      	; 0x654 <Inf_Can_Tx+0xb2>
			Inf_Spi_Tx(aInf_Can_Msg->EIdH);
     65a:	f7 01       	movw	r30, r14
     65c:	83 81       	ldd	r24, Z+3	; 0x03


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     65e:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     660:	0d b4       	in	r0, 0x2d	; 45
     662:	07 fe       	sbrs	r0, 7
     664:	fd cf       	rjmp	.-6      	; 0x660 <Inf_Can_Tx+0xbe>
			Inf_Spi_Tx(aInf_Can_Msg->EIdL);
     666:	f7 01       	movw	r30, r14
     668:	82 81       	ldd	r24, Z+2	; 0x02


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     66a:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     66c:	0d b4       	in	r0, 0x2d	; 45
     66e:	07 fe       	sbrs	r0, 7
     670:	fd cf       	rjmp	.-6      	; 0x66c <Inf_Can_Tx+0xca>
			Inf_Spi_Tx(aInf_Can_Msg->Dlc);
     672:	f7 01       	movw	r30, r14
     674:	24 81       	ldd	r18, Z+4	; 0x04


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     676:	2e bd       	out	0x2e, r18	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     678:	0d b4       	in	r0, 0x2d	; 45
     67a:	07 fe       	sbrs	r0, 7
     67c:	fd cf       	rjmp	.-6      	; 0x678 <Inf_Can_Tx+0xd6>
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
     67e:	f7 01       	movw	r30, r14
     680:	84 81       	ldd	r24, Z+4	; 0x04
     682:	86 fd       	sbrc	r24, 6
     684:	0d c0       	rjmp	.+26     	; 0x6a0 <Inf_Can_Tx+0xfe>
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	09 c0       	rjmp	.+18     	; 0x69c <Inf_Can_Tx+0xfa>
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++)
				{
					Inf_Spi_Tx(aInf_Can_Msg->Data[i]);
     68a:	f7 01       	movw	r30, r14
     68c:	e9 0f       	add	r30, r25
     68e:	f1 1d       	adc	r31, r1
     690:	85 81       	ldd	r24, Z+5	; 0x05


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     692:	8e bd       	out	0x2e, r24	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     694:	0d b4       	in	r0, 0x2d	; 45
     696:	07 fe       	sbrs	r0, 7
     698:	fd cf       	rjmp	.-6      	; 0x694 <Inf_Can_Tx+0xf2>
			Inf_Spi_Tx(aInf_Can_Msg->SIdL);
			Inf_Spi_Tx(aInf_Can_Msg->EIdH);
			Inf_Spi_Tx(aInf_Can_Msg->EIdL);
			Inf_Spi_Tx(aInf_Can_Msg->Dlc);
			if (bit_is_clear(aInf_Can_Msg->Dlc, 6)) {
				for (uint8_t i = 0; i < aInf_Can_Msg->Dlc; i++)
     69a:	9f 5f       	subi	r25, 0xFF	; 255
     69c:	92 17       	cp	r25, r18
     69e:	a8 f3       	brcs	.-22     	; 0x68a <Inf_Can_Tx+0xe8>
				{
					Inf_Spi_Tx(aInf_Can_Msg->Data[i]);
				}
			}
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     6a0:	80 2f       	mov	r24, r16
     6a2:	6d 2d       	mov	r22, r13
     6a4:	43 e0       	ldi	r20, 0x03	; 3
     6a6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>
			asm volatile("nop");
     6aa:	00 00       	nop
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_LOW);
     6ac:	80 2f       	mov	r24, r16
     6ae:	6d 2d       	mov	r22, r13
     6b0:	41 e0       	ldi	r20, 0x01	; 1
     6b2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>


	void Inf_Spi_Tx(const unsigned char Data)
	{

		SPDR = Data;
     6b6:	ce bc       	out	0x2e, r12	; 46
		loop_until_bit_is_set(SPSR, SPIF);
     6b8:	0d b4       	in	r0, 0x2d	; 45
     6ba:	07 fe       	sbrs	r0, 7
     6bc:	fd cf       	rjmp	.-6      	; 0x6b8 <Inf_Can_Tx+0x116>
			Inf_Spi_Tx(CmdSend);
			Lib_Pin_Set(aSSPort, aSSPin, LIB_PIN_OUTPUT_HIGH);
     6be:	80 2f       	mov	r24, r16
     6c0:	6d 2d       	mov	r22, r13
     6c2:	43 e0       	ldi	r20, 0x03	; 3
     6c4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>
     6c8:	81 e0       	ldi	r24, 0x01	; 1
			return TRUE;
		}
     6ca:	0f 90       	pop	r0
     6cc:	cf 91       	pop	r28
     6ce:	df 91       	pop	r29
     6d0:	1f 91       	pop	r17
     6d2:	0f 91       	pop	r16
     6d4:	ff 90       	pop	r15
     6d6:	ef 90       	pop	r14
     6d8:	df 90       	pop	r13
     6da:	cf 90       	pop	r12
     6dc:	08 95       	ret

000006de <Isb_Inf_Can_Init>:
#ifndef ISB_INF_CAN_C_
	#define ISB_INF_CAN_C_



	uint8_t Isb_Inf_Can_Init(const uint8_t aInf) {
     6de:	8f 92       	push	r8
     6e0:	af 92       	push	r10
     6e2:	cf 92       	push	r12
     6e4:	ef 92       	push	r14
     6e6:	0f 93       	push	r16
		uint8_t Result = FALSE;
		switch (aInf) {
     6e8:	88 23       	and	r24, r24
     6ea:	11 f0       	breq	.+4      	; 0x6f0 <Isb_Inf_Can_Init+0x12>
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	0d c0       	rjmp	.+26     	; 0x70a <Isb_Inf_Can_Init+0x2c>
			#if ISB_INF_CAN0 == 1
				case 0:
					Result = Inf_Can_Init(INF_CAN0_SSPORT, INF_CAN0_SSPIN, INF_CAN0_SPICFG, INF_CAN0_CNF1, INF_CAN0_CNF2, INF_CAN0_CNF3, INF_CAN0_RSPORT, INF_CAN0_RSPIN, INF_CAN0_MODE);
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	41 e5       	ldi	r20, 0x51	; 81
     6f6:	21 e0       	ldi	r18, 0x01	; 1
     6f8:	06 eb       	ldi	r16, 0xB6	; 182
     6fa:	e4 e0       	ldi	r30, 0x04	; 4
     6fc:	ee 2e       	mov	r14, r30
     6fe:	7d ef       	ldi	r23, 0xFD	; 253
     700:	c7 2e       	mov	r12, r23
     702:	aa 24       	eor	r10, r10
     704:	88 24       	eor	r8, r8
     706:	0e 94 a9 01 	call	0x352	; 0x352 <Inf_Can_Init>
					Result = Inf_Can_Init(INF_CAN2_SSPORT, INF_CAN2_SSPIN, INF_CAN2_SPICFG, INF_CAN2_CNF1, INF_CAN2_CNF2, INF_CAN2_CNF3, INF_CAN2_RSPORT, INF_CAN2_RSPIN, INF_CAN2_MODE);
					break;
			#endif /* ISB_INF_CAN2 == 1 */
		}
		return Result;
	}
     70a:	0f 91       	pop	r16
     70c:	ef 90       	pop	r14
     70e:	cf 90       	pop	r12
     710:	af 90       	pop	r10
     712:	8f 90       	pop	r8
     714:	08 95       	ret

00000716 <Isb_Inf_Can_Rx>:



	uint8_t Isb_Inf_Can_Rx(const uint8_t aInf, Isb_Msg_t * aIsb_Msg) {
     716:	af 92       	push	r10
     718:	bf 92       	push	r11
     71a:	cf 92       	push	r12
     71c:	df 92       	push	r13
     71e:	ef 92       	push	r14
     720:	ff 92       	push	r15
     722:	0f 93       	push	r16
     724:	df 93       	push	r29
     726:	cf 93       	push	r28
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
     72c:	2d 97       	sbiw	r28, 0x0d	; 13
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
     738:	6b 01       	movw	r12, r22
		uint8_t aSSPort;
		uint8_t aSSPin;
		uint8_t aSpiCfg;
		uint8_t aRSPort;
		uint8_t aRSPin;
		switch (aInf) {
     73a:	88 23       	and	r24, r24
     73c:	09 f0       	breq	.+2      	; 0x740 <Isb_Inf_Can_Rx+0x2a>
     73e:	66 c0       	rjmp	.+204    	; 0x80c <Isb_Inf_Can_Rx+0xf6>
			default:
				return FALSE;
				break;
		}
		Inf_Can_Msg_t aCanMsg;
		if (Inf_Can_Rx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	41 e5       	ldi	r20, 0x51	; 81
     746:	2d ef       	ldi	r18, 0xFD	; 253
     748:	00 e0       	ldi	r16, 0x00	; 0
     74a:	5e 01       	movw	r10, r28
     74c:	08 94       	sec
     74e:	a1 1c       	adc	r10, r1
     750:	b1 1c       	adc	r11, r1
     752:	75 01       	movw	r14, r10
     754:	0e 94 40 02 	call	0x480	; 0x480 <Inf_Can_Rx>
     758:	81 30       	cpi	r24, 0x01	; 1
     75a:	09 f0       	breq	.+2      	; 0x75e <Isb_Inf_Can_Rx+0x48>
     75c:	57 c0       	rjmp	.+174    	; 0x80c <Isb_Inf_Can_Rx+0xf6>
			aIsb_Msg->Flags = ((aCanMsg.SIdH & 0xC0) >> 2) | (aCanMsg.Dlc & ISB_MSG_FLAGS_DLC_MASK);
     75e:	ea 81       	ldd	r30, Y+2	; 0x02
     760:	8e 2f       	mov	r24, r30
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	80 7c       	andi	r24, 0xC0	; 192
     766:	90 70       	andi	r25, 0x00	; 0
     768:	95 95       	asr	r25
     76a:	87 95       	ror	r24
     76c:	95 95       	asr	r25
     76e:	87 95       	ror	r24
     770:	0d 81       	ldd	r16, Y+5	; 0x05
     772:	f0 2f       	mov	r31, r16
     774:	ff 70       	andi	r31, 0x0F	; 15
     776:	f8 2b       	or	r31, r24
     778:	d6 01       	movw	r26, r12
     77a:	fc 93       	st	X, r31
			aIsb_Msg->DestId = (uint16_t)((aCanMsg.EIdH & 0xF8) >> 3) + (uint16_t)((aCanMsg.SIdL & 0x03) << 5) + (uint16_t)((aCanMsg.SIdL & 0xE0) << 2) + (uint16_t)((aCanMsg.SIdH & 0x3F) << 10);
     77c:	6c 81       	ldd	r22, Y+4	; 0x04
     77e:	49 81       	ldd	r20, Y+1	; 0x01
     780:	50 e0       	ldi	r21, 0x00	; 0
     782:	3e 2f       	mov	r19, r30
     784:	33 0f       	add	r19, r19
     786:	33 0f       	add	r19, r19
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	86 2f       	mov	r24, r22
     78c:	86 95       	lsr	r24
     78e:	86 95       	lsr	r24
     790:	86 95       	lsr	r24
     792:	28 0f       	add	r18, r24
     794:	31 1d       	adc	r19, r1
     796:	ca 01       	movw	r24, r20
     798:	83 70       	andi	r24, 0x03	; 3
     79a:	90 70       	andi	r25, 0x00	; 0
     79c:	75 e0       	ldi	r23, 0x05	; 5
     79e:	88 0f       	add	r24, r24
     7a0:	99 1f       	adc	r25, r25
     7a2:	7a 95       	dec	r23
     7a4:	e1 f7       	brne	.-8      	; 0x79e <Isb_Inf_Can_Rx+0x88>
     7a6:	28 0f       	add	r18, r24
     7a8:	39 1f       	adc	r19, r25
     7aa:	40 7e       	andi	r20, 0xE0	; 224
     7ac:	50 70       	andi	r21, 0x00	; 0
     7ae:	44 0f       	add	r20, r20
     7b0:	55 1f       	adc	r21, r21
     7b2:	44 0f       	add	r20, r20
     7b4:	55 1f       	adc	r21, r21
     7b6:	24 0f       	add	r18, r20
     7b8:	35 1f       	adc	r19, r21
     7ba:	12 96       	adiw	r26, 0x02	; 2
     7bc:	3c 93       	st	X, r19
     7be:	2e 93       	st	-X, r18
     7c0:	11 97       	sbiw	r26, 0x01	; 1
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	67 70       	andi	r22, 0x07	; 7
     7c6:	70 70       	andi	r23, 0x00	; 0
     7c8:	76 2f       	mov	r23, r22
     7ca:	66 27       	eor	r22, r22
     7cc:	8b 81       	ldd	r24, Y+3	; 0x03
     7ce:	68 0f       	add	r22, r24
     7d0:	71 1d       	adc	r23, r1
     7d2:	14 96       	adiw	r26, 0x04	; 4
     7d4:	7c 93       	st	X, r23
     7d6:	6e 93       	st	-X, r22
     7d8:	13 97       	sbiw	r26, 0x03	; 3
			if (bit_is_set(aCanMsg.Dlc, 6)) {
     7da:	8d 81       	ldd	r24, Y+5	; 0x05
     7dc:	86 fd       	sbrc	r24, 6
     7de:	0a c0       	rjmp	.+20     	; 0x7f4 <Isb_Inf_Can_Rx+0xde>
				aIsb_Msg->Flags |= 0x40;
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     7e0:	de 01       	movw	r26, r28
     7e2:	16 96       	adiw	r26, 0x06	; 6
     7e4:	f6 01       	movw	r30, r12
     7e6:	20 2f       	mov	r18, r16
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	2b 5f       	subi	r18, 0xFB	; 251
     7ec:	3f 4f       	sbci	r19, 0xFF	; 255
     7ee:	2a 0d       	add	r18, r10
     7f0:	3b 1d       	adc	r19, r11
     7f2:	06 c0       	rjmp	.+12     	; 0x800 <Isb_Inf_Can_Rx+0xea>
		if (Inf_Can_Rx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
			aIsb_Msg->Flags = ((aCanMsg.SIdH & 0xC0) >> 2) | (aCanMsg.Dlc & ISB_MSG_FLAGS_DLC_MASK);
			aIsb_Msg->DestId = (uint16_t)((aCanMsg.EIdH & 0xF8) >> 3) + (uint16_t)((aCanMsg.SIdL & 0x03) << 5) + (uint16_t)((aCanMsg.SIdL & 0xE0) << 2) + (uint16_t)((aCanMsg.SIdH & 0x3F) << 10);
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
			if (bit_is_set(aCanMsg.Dlc, 6)) {
				aIsb_Msg->Flags |= 0x40;
     7f4:	f0 64       	ori	r31, 0x40	; 64
     7f6:	d6 01       	movw	r26, r12
     7f8:	fc 93       	st	X, r31
     7fa:	06 c0       	rjmp	.+12     	; 0x808 <Isb_Inf_Can_Rx+0xf2>
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
					aIsb_Msg->Data[i] = aCanMsg.Data[i];
     7fc:	8d 91       	ld	r24, X+
     7fe:	84 83       	std	Z+4, r24	; 0x04
     800:	31 96       	adiw	r30, 0x01	; 1
			aIsb_Msg->SourceId = (uint16_t)aCanMsg.EIdL + (uint16_t)((aCanMsg.EIdH & 0x07) << 8);
			if (bit_is_set(aCanMsg.Dlc, 6)) {
				aIsb_Msg->Flags |= 0x40;
			}
			else {
				for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     802:	a2 17       	cp	r26, r18
     804:	b3 07       	cpc	r27, r19
     806:	d1 f7       	brne	.-12     	; 0x7fc <Isb_Inf_Can_Rx+0xe6>
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	01 c0       	rjmp	.+2      	; 0x80e <Isb_Inf_Can_Rx+0xf8>
     80c:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			return TRUE;
		}
		return FALSE;
	}
     80e:	2d 96       	adiw	r28, 0x0d	; 13
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	f8 94       	cli
     814:	de bf       	out	0x3e, r29	; 62
     816:	0f be       	out	0x3f, r0	; 63
     818:	cd bf       	out	0x3d, r28	; 61
     81a:	cf 91       	pop	r28
     81c:	df 91       	pop	r29
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	ef 90       	pop	r14
     824:	df 90       	pop	r13
     826:	cf 90       	pop	r12
     828:	bf 90       	pop	r11
     82a:	af 90       	pop	r10
     82c:	08 95       	ret

0000082e <Isb_Inf_Can_Tx>:



	uint8_t Isb_Inf_Can_Tx(const uint8_t aInf, const Isb_Msg_t * aIsb_Msg) {
     82e:	ef 92       	push	r14
     830:	ff 92       	push	r15
     832:	0f 93       	push	r16
     834:	df 93       	push	r29
     836:	cf 93       	push	r28
     838:	cd b7       	in	r28, 0x3d	; 61
     83a:	de b7       	in	r29, 0x3e	; 62
     83c:	2d 97       	sbiw	r28, 0x0d	; 13
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	de bf       	out	0x3e, r29	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	cd bf       	out	0x3d, r28	; 61
     848:	fb 01       	movw	r30, r22
		uint8_t aSSPort;
		uint8_t aSSPin;
		uint8_t aSpiCfg;
		uint8_t aRSPort;
		uint8_t aRSPin;
		switch (aInf) {
     84a:	88 23       	and	r24, r24
     84c:	11 f0       	breq	.+4      	; 0x852 <Isb_Inf_Can_Tx+0x24>
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	4e c0       	rjmp	.+156    	; 0x8ee <Isb_Inf_Can_Tx+0xc0>
		}
		Inf_Can_Msg_t aCanMsg;
		// Write Message to SendBuffer - TXBnSIDH:
		//	[7..6] = Type
		//	[5..0] = Dest[15..10]
		aCanMsg.SIdH = ((aIsb_Msg->Flags << 2) & 0xC0) | (aIsb_Msg->DestId >> 10);
     852:	92 81       	ldd	r25, Z+2	; 0x02
     854:	96 95       	lsr	r25
     856:	96 95       	lsr	r25
     858:	60 81       	ld	r22, Z
     85a:	86 2f       	mov	r24, r22
     85c:	88 0f       	add	r24, r24
     85e:	88 0f       	add	r24, r24
     860:	80 7c       	andi	r24, 0xC0	; 192
     862:	89 2b       	or	r24, r25
     864:	8a 83       	std	Y+2, r24	; 0x02
		//	[7..5] = Dest[9..7]
		//	[4] = 0
		//	[3] = 1
		//	[2] = 0
		//	[1..0] = Dest[6..5]
		aCanMsg.SIdL = ((uint8_t)(aIsb_Msg->DestId >> 2) & 0xE0) | 0x08 | ((uint8_t)(aIsb_Msg->DestId >> 5) & 0x03);
     866:	41 81       	ldd	r20, Z+1	; 0x01
     868:	52 81       	ldd	r21, Z+2	; 0x02
     86a:	ca 01       	movw	r24, r20
     86c:	96 95       	lsr	r25
     86e:	87 95       	ror	r24
     870:	96 95       	lsr	r25
     872:	87 95       	ror	r24
     874:	80 7e       	andi	r24, 0xE0	; 224
     876:	9a 01       	movw	r18, r20
     878:	a5 e0       	ldi	r26, 0x05	; 5
     87a:	36 95       	lsr	r19
     87c:	27 95       	ror	r18
     87e:	aa 95       	dec	r26
     880:	e1 f7       	brne	.-8      	; 0x87a <Isb_Inf_Can_Tx+0x4c>
     882:	23 70       	andi	r18, 0x03	; 3
     884:	82 2b       	or	r24, r18
     886:	88 60       	ori	r24, 0x08	; 8
     888:	89 83       	std	Y+1, r24	; 0x01
		// Write Message to SendBuffer - TXBnEID8:
		//	[7..3] = Dest[4..0]
		//	[2..0] = Source[10..8]
		aCanMsg.EIdH = ((uint8_t)((aIsb_Msg->DestId << 3) & 0xF8)) | ((uint8_t)((aIsb_Msg->SourceId >> 8) & 0x07));
     88a:	84 81       	ldd	r24, Z+4	; 0x04
     88c:	87 70       	andi	r24, 0x07	; 7
     88e:	44 0f       	add	r20, r20
     890:	44 0f       	add	r20, r20
     892:	44 0f       	add	r20, r20
     894:	84 2b       	or	r24, r20
     896:	8c 83       	std	Y+4, r24	; 0x04
		// Write Message to SendBuffer - TXBnEID0:
		//	[7..0] = Source[7..0]
		aCanMsg.EIdL = (uint8_t)aIsb_Msg->SourceId;
     898:	83 81       	ldd	r24, Z+3	; 0x03
     89a:	8b 83       	std	Y+3, r24	; 0x03
		// Write Message to SendBuffer - DataLength
		aCanMsg.Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
     89c:	6f 70       	andi	r22, 0x0F	; 15
     89e:	6d 83       	std	Y+5, r22	; 0x05
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
     8a0:	80 81       	ld	r24, Z
     8a2:	86 fd       	sbrc	r24, 6
     8a4:	0a c0       	rjmp	.+20     	; 0x8ba <Isb_Inf_Can_Tx+0x8c>
     8a6:	df 01       	movw	r26, r30
     8a8:	fe 01       	movw	r30, r28
     8aa:	36 96       	adiw	r30, 0x06	; 6
			aCanMsg.Dlc |= 0x40;
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     8ac:	ce 01       	movw	r24, r28
     8ae:	86 0f       	add	r24, r22
     8b0:	91 1d       	adc	r25, r1
     8b2:	bc 01       	movw	r22, r24
     8b4:	6a 5f       	subi	r22, 0xFA	; 250
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	07 c0       	rjmp	.+14     	; 0x8c8 <Isb_Inf_Can_Tx+0x9a>
		aCanMsg.EIdL = (uint8_t)aIsb_Msg->SourceId;
		// Write Message to SendBuffer - DataLength
		aCanMsg.Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
			aCanMsg.Dlc |= 0x40;
     8ba:	60 64       	ori	r22, 0x40	; 64
     8bc:	6d 83       	std	Y+5, r22	; 0x05
     8be:	08 c0       	rjmp	.+16     	; 0x8d0 <Isb_Inf_Can_Tx+0xa2>
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
				aCanMsg.Data[i] = aIsb_Msg->Data[i];
     8c0:	14 96       	adiw	r26, 0x04	; 4
     8c2:	8c 91       	ld	r24, X
     8c4:	14 97       	sbiw	r26, 0x04	; 4
     8c6:	81 93       	st	Z+, r24
     8c8:	11 96       	adiw	r26, 0x01	; 1
		// RTR
		if (bit_is_set(aIsb_Msg->Flags, 6)) {
			aCanMsg.Dlc |= 0x40;
		}
		else {
			for (uint8_t i = 0; i < aCanMsg.Dlc; i++) {
     8ca:	e6 17       	cp	r30, r22
     8cc:	f7 07       	cpc	r31, r23
     8ce:	c1 f7       	brne	.-16     	; 0x8c0 <Isb_Inf_Can_Tx+0x92>
				aCanMsg.Data[i] = aIsb_Msg->Data[i];
			}
		}
		if (Inf_Can_Tx(aSSPort, aSSPin, aSpiCfg, aRSPort, aRSPin, &aCanMsg) == TRUE) {
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	41 e5       	ldi	r20, 0x51	; 81
     8d6:	2d ef       	ldi	r18, 0xFD	; 253
     8d8:	00 e0       	ldi	r16, 0x00	; 0
     8da:	7e 01       	movw	r14, r28
     8dc:	08 94       	sec
     8de:	e1 1c       	adc	r14, r1
     8e0:	f1 1c       	adc	r15, r1
     8e2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Inf_Can_Tx>
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	09 f4       	brne	.+2      	; 0x8ee <Isb_Inf_Can_Tx+0xc0>
     8ec:	91 e0       	ldi	r25, 0x01	; 1
			return TRUE;
		}
		return FALSE;
	}
     8ee:	89 2f       	mov	r24, r25
     8f0:	2d 96       	adiw	r28, 0x0d	; 13
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	de bf       	out	0x3e, r29	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	cd bf       	out	0x3d, r28	; 61
     8fc:	cf 91       	pop	r28
     8fe:	df 91       	pop	r29
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	08 95       	ret

00000908 <Isb_Systick_Init>:
	TCCR0 = (1 << WGM01) | (1 << CS01) | (1 << CS00);
	TCNT0 = 0;
	OCR0 = (F_CPU / 64) / 1000;
	TIMSK = (1 << OCIE0);
	#elif defined(__AVR_ATmega168__) | defined(__AVR_ATmega168V__)
	TCCR0A = (1 << WGM01);
     908:	92 e0       	ldi	r25, 0x02	; 2
     90a:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
     90c:	83 e0       	ldi	r24, 0x03	; 3
     90e:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
     910:	16 bc       	out	0x26, r1	; 38
	OCR0A = (F_CPU / 64) / 1000;
     912:	8d e7       	ldi	r24, 0x7D	; 125
     914:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = (1 << OCIE0A);
     916:	90 93 6e 00 	sts	0x006E, r25
	TIMSK0 = (1 << OCIE0A);
	#else
		#error "No definition for this MCU available."
	#endif

	Isb_Systick_Clock.Seconds = 0;
     91a:	10 92 fb 02 	sts	0x02FB, r1
	Isb_Systick_Clock.Minutes = 0;
     91e:	10 92 fc 02 	sts	0x02FC, r1
	Isb_Systick_Clock.Hour = 0;
     922:	10 92 fd 02 	sts	0x02FD, r1
	Isb_Systick_Clock.Dow = 1;
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	80 93 ff 02 	sts	0x02FF, r24
	Isb_Systick_Clock.Day = 1;
     92c:	80 93 fe 02 	sts	0x02FE, r24
	Isb_Systick_Clock.Month = 1;
     930:	80 93 00 03 	sts	0x0300, r24
	Isb_Systick_Clock.Year = 0;;
     934:	10 92 02 03 	sts	0x0302, r1
     938:	10 92 01 03 	sts	0x0301, r1

}
     93c:	08 95       	ret

0000093e <Isb_Systick_Exec>:



void Isb_Systick_Exec(void)
{
     93e:	1f 93       	push	r17

	if (bit_is_set(Isb_Systick_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
     940:	80 91 40 01 	lds	r24, 0x0140
     944:	80 ff       	sbrs	r24, 0
     946:	ca c0       	rjmp	.+404    	; 0xadc <Isb_Systick_Exec+0x19e>
	{

		if (Isb_Systick_IrqClock >= 1000)
     948:	80 91 41 01 	lds	r24, 0x0141
     94c:	90 91 42 01 	lds	r25, 0x0142
     950:	88 5e       	subi	r24, 0xE8	; 232
     952:	93 40       	sbci	r25, 0x03	; 3
     954:	08 f4       	brcc	.+2      	; 0x958 <Isb_Systick_Exec+0x1a>
     956:	72 c0       	rjmp	.+228    	; 0xa3c <Isb_Systick_Exec+0xfe>
		{
			Isb_Systick_IrqClock = 0;
     958:	10 92 42 01 	sts	0x0142, r1
     95c:	10 92 41 01 	sts	0x0141, r1
			Isb_Systick_Clock.Seconds++;
     960:	80 91 fb 02 	lds	r24, 0x02FB
     964:	8f 5f       	subi	r24, 0xFF	; 255
     966:	80 93 fb 02 	sts	0x02FB, r24
			if (Isb_Systick_Clock.Seconds == 60)
     96a:	8c 33       	cpi	r24, 0x3C	; 60
     96c:	09 f0       	breq	.+2      	; 0x970 <Isb_Systick_Exec+0x32>
     96e:	66 c0       	rjmp	.+204    	; 0xa3c <Isb_Systick_Exec+0xfe>
			{
				Isb_Systick_Clock.Seconds = 0;
     970:	10 92 fb 02 	sts	0x02FB, r1
				Isb_Systick_Clock.Minutes++;
     974:	80 91 fc 02 	lds	r24, 0x02FC
     978:	8f 5f       	subi	r24, 0xFF	; 255
     97a:	80 93 fc 02 	sts	0x02FC, r24
				if (Isb_Systick_Clock.Minutes == 60)
     97e:	8c 33       	cpi	r24, 0x3C	; 60
     980:	09 f0       	breq	.+2      	; 0x984 <Isb_Systick_Exec+0x46>
     982:	5c c0       	rjmp	.+184    	; 0xa3c <Isb_Systick_Exec+0xfe>
				{
					Isb_Systick_Clock.Minutes = 0;
     984:	10 92 fc 02 	sts	0x02FC, r1
					Isb_Systick_Clock.Hour++;
     988:	80 91 fd 02 	lds	r24, 0x02FD
     98c:	8f 5f       	subi	r24, 0xFF	; 255
     98e:	80 93 fd 02 	sts	0x02FD, r24
					if (Isb_Systick_Clock.Hour == 24)
     992:	88 31       	cpi	r24, 0x18	; 24
     994:	09 f0       	breq	.+2      	; 0x998 <Isb_Systick_Exec+0x5a>
     996:	52 c0       	rjmp	.+164    	; 0xa3c <Isb_Systick_Exec+0xfe>
					{
						Isb_Systick_Clock.Hour = 0;
     998:	10 92 fd 02 	sts	0x02FD, r1
						Isb_Systick_Clock.Day++;
     99c:	40 91 fe 02 	lds	r20, 0x02FE
     9a0:	4f 5f       	subi	r20, 0xFF	; 255
     9a2:	40 93 fe 02 	sts	0x02FE, r20
						Isb_Systick_Clock.Dow++;
     9a6:	80 91 ff 02 	lds	r24, 0x02FF
     9aa:	8f 5f       	subi	r24, 0xFF	; 255
     9ac:	80 93 ff 02 	sts	0x02FF, r24
						if (Isb_Systick_Clock.Dow == 8)
     9b0:	88 30       	cpi	r24, 0x08	; 8
     9b2:	19 f4       	brne	.+6      	; 0x9ba <Isb_Systick_Exec+0x7c>
						{
							Isb_Systick_Clock.Dow = 1;
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	80 93 ff 02 	sts	0x02FF, r24
						}
						uint8_t newMonth = 0;
						if (Isb_Systick_Clock.Month == 2)
     9ba:	10 91 00 03 	lds	r17, 0x0300
     9be:	12 30       	cpi	r17, 0x02	; 2
     9c0:	e1 f4       	brne	.+56     	; 0x9fa <Isb_Systick_Exec+0xbc>
						{
							if ((Isb_Systick_Clock.Year % 4) == 0)
     9c2:	20 91 01 03 	lds	r18, 0x0301
     9c6:	30 91 02 03 	lds	r19, 0x0302
     9ca:	c9 01       	movw	r24, r18
     9cc:	83 70       	andi	r24, 0x03	; 3
     9ce:	90 70       	andi	r25, 0x00	; 0
     9d0:	89 2b       	or	r24, r25
     9d2:	81 f4       	brne	.+32     	; 0x9f4 <Isb_Systick_Exec+0xb6>
							{
								newMonth = 1;
								if ((Isb_Systick_Clock.Year % 100) == 0)
     9d4:	c9 01       	movw	r24, r18
     9d6:	64 e6       	ldi	r22, 0x64	; 100
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__udivmodhi4>
     9de:	89 2b       	or	r24, r25
     9e0:	09 f0       	breq	.+2      	; 0x9e4 <Isb_Systick_Exec+0xa6>
     9e2:	76 c0       	rjmp	.+236    	; 0xad0 <Isb_Systick_Exec+0x192>
								{
									newMonth = 0;
									if ((Isb_Systick_Clock.Year % 400) == 0)
     9e4:	c9 01       	movw	r24, r18
     9e6:	60 e9       	ldi	r22, 0x90	; 144
     9e8:	71 e0       	ldi	r23, 0x01	; 1
     9ea:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__udivmodhi4>
     9ee:	89 2b       	or	r24, r25
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <Isb_Systick_Exec+0xb6>
     9f2:	6e c0       	rjmp	.+220    	; 0xad0 <Isb_Systick_Exec+0x192>
									newMonth = 0;
								}
							}
							else
							{
								if (Isb_Systick_Clock.Day == (daysPerMonth[Isb_Systick_Clock.Month] + 1))
     9f4:	40 32       	cpi	r20, 0x20	; 32
     9f6:	11 f5       	brne	.+68     	; 0xa3c <Isb_Systick_Exec+0xfe>
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <Isb_Systick_Exec+0xd6>
								}
							}
						}
						else
						{
							if (Isb_Systick_Clock.Day == (daysPerMonth[Isb_Systick_Clock.Month] + 1))
     9fa:	84 2f       	mov	r24, r20
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	e1 2f       	mov	r30, r17
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	ec 5c       	subi	r30, 0xCC	; 204
     a04:	fe 4f       	sbci	r31, 0xFE	; 254
     a06:	20 81       	ld	r18, Z
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	2f 5f       	subi	r18, 0xFF	; 255
     a0c:	3f 4f       	sbci	r19, 0xFF	; 255
     a0e:	82 17       	cp	r24, r18
     a10:	93 07       	cpc	r25, r19
     a12:	a1 f4       	brne	.+40     	; 0xa3c <Isb_Systick_Exec+0xfe>
								newMonth = 1;
							}
						}
						if (newMonth)
						{
							Isb_Systick_Clock.Day = 1;
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	90 93 fe 02 	sts	0x02FE, r25
							Isb_Systick_Clock.Month++;
     a1a:	81 2f       	mov	r24, r17
     a1c:	8f 5f       	subi	r24, 0xFF	; 255
     a1e:	80 93 00 03 	sts	0x0300, r24
							if (Isb_Systick_Clock.Month == 13)
     a22:	8d 30       	cpi	r24, 0x0D	; 13
     a24:	59 f4       	brne	.+22     	; 0xa3c <Isb_Systick_Exec+0xfe>
							{
								Isb_Systick_Clock.Month = 1;
     a26:	90 93 00 03 	sts	0x0300, r25
								Isb_Systick_Clock.Year++;
     a2a:	80 91 01 03 	lds	r24, 0x0301
     a2e:	90 91 02 03 	lds	r25, 0x0302
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	90 93 02 03 	sts	0x0302, r25
     a38:	80 93 01 03 	sts	0x0301, r24
					}
				}
			}
		}

		if (bit_is_clear(Isb_Systick_Ctrl, ISB_CTRL_RUNNING))
     a3c:	80 91 40 01 	lds	r24, 0x0140
     a40:	86 fd       	sbrc	r24, 6
     a42:	13 c0       	rjmp	.+38     	; 0xa6a <Isb_Systick_Exec+0x12c>
		{
			uint16_t Isb_Systick_Delay = 1000;
			if (Isb_Systick_Delay_Counter == Isb_Systick_Delay)
     a44:	20 91 43 01 	lds	r18, 0x0143
     a48:	30 91 44 01 	lds	r19, 0x0144
     a4c:	83 e0       	ldi	r24, 0x03	; 3
     a4e:	28 3e       	cpi	r18, 0xE8	; 232
     a50:	38 07       	cpc	r19, r24
     a52:	29 f4       	brne	.+10     	; 0xa5e <Isb_Systick_Exec+0x120>
			{
				Isb_Systick_Ctrl |= (1<<ISB_CTRL_RUNNING);
     a54:	80 91 40 01 	lds	r24, 0x0140
     a58:	80 64       	ori	r24, 0x40	; 64
     a5a:	80 93 40 01 	sts	0x0140, r24
			}
			Isb_Systick_Delay_Counter++;
     a5e:	2f 5f       	subi	r18, 0xFF	; 255
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	30 93 44 01 	sts	0x0144, r19
     a66:	20 93 43 01 	sts	0x0143, r18
			If_Rf_Rfm12_Ctrl |= (1 << IF_RF_RFM12_CTRL_SOFTIRQ_EXEC);
		}
	#endif /* IF_RF_RFM12 */

	#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
		if (Isb_App_DigOut_IrqExec >= ISB_APP_DIGOUT_EXECTIME)
     a6a:	80 91 4d 01 	lds	r24, 0x014D
     a6e:	90 91 4e 01 	lds	r25, 0x014E
     a72:	0a 97       	sbiw	r24, 0x0a	; 10
     a74:	48 f0       	brcs	.+18     	; 0xa88 <Isb_Systick_Exec+0x14a>
		{
			Isb_App_DigOut_IrqExec = 0;
     a76:	10 92 4e 01 	sts	0x014E, r1
     a7a:	10 92 4d 01 	sts	0x014D, r1
			Isb_App_DigOut_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a7e:	80 91 4c 01 	lds	r24, 0x014C
     a82:	81 60       	ori	r24, 0x01	; 1
     a84:	80 93 4c 01 	sts	0x014C, r24
		}
	#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

	#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
		if (Isb_App_DigIn_IrqExec >= ISB_APP_DIGIN_EXECTIME)
     a88:	80 91 4f 01 	lds	r24, 0x014F
     a8c:	90 91 50 01 	lds	r25, 0x0150
     a90:	0a 97       	sbiw	r24, 0x0a	; 10
     a92:	48 f0       	brcs	.+18     	; 0xaa6 <Isb_Systick_Exec+0x168>
		{
			Isb_App_DigIn_IrqExec = 0;
     a94:	10 92 50 01 	sts	0x0150, r1
     a98:	10 92 4f 01 	sts	0x014F, r1
			Isb_App_DigIn_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     a9c:	80 91 4b 01 	lds	r24, 0x014B
     aa0:	81 60       	ori	r24, 0x01	; 1
     aa2:	80 93 4b 01 	sts	0x014B, r24
			Isb_App_Clock_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
		}
	#endif /* ISB_APP_CLOCK_MAX && ISB_APP_H_ */

	#if defined(ISB_OBJ_MAX) && defined(ISB_OBJ_H_)
		if (Isb_Obj_IrqExec >= ISB_OBJ_EXECTIME)
     aa6:	80 91 51 01 	lds	r24, 0x0151
     aaa:	90 91 52 01 	lds	r25, 0x0152
     aae:	0a 97       	sbiw	r24, 0x0a	; 10
     ab0:	48 f0       	brcs	.+18     	; 0xac4 <Isb_Systick_Exec+0x186>
		{
			Isb_Obj_IrqExec = 0;
     ab2:	10 92 52 01 	sts	0x0152, r1
     ab6:	10 92 51 01 	sts	0x0151, r1
			Isb_Obj_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     aba:	80 91 4a 01 	lds	r24, 0x014A
     abe:	81 60       	ori	r24, 0x01	; 1
     ac0:	80 93 4a 01 	sts	0x014A, r24
			Isb_Obj_Float_IrqExec = 0;
			Isb_Obj_Float_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
		}
	#endif /* ISB_OBJ_FLOAT_MAX && ISB_OBJ_H_ */

	Isb_Systick_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
     ac4:	80 91 40 01 	lds	r24, 0x0140
     ac8:	8e 7f       	andi	r24, 0xFE	; 254
     aca:	80 93 40 01 	sts	0x0140, r24
     ace:	06 c0       	rjmp	.+12     	; 0xadc <Isb_Systick_Exec+0x19e>
									}
								}
							}
							if (newMonth)
							{
								if (Isb_Systick_Clock.Day < (daysPerMonth[Isb_Systick_Clock.Month] + 2))
     ad0:	84 2f       	mov	r24, r20
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	81 97       	sbiw	r24, 0x21	; 33
     ad6:	0c f4       	brge	.+2      	; 0xada <Isb_Systick_Exec+0x19c>
     ad8:	b1 cf       	rjmp	.-158    	; 0xa3c <Isb_Systick_Exec+0xfe>
     ada:	9c cf       	rjmp	.-200    	; 0xa14 <Isb_Systick_Exec+0xd6>
	#endif /* ISB_OBJ_FLOAT_MAX && ISB_OBJ_H_ */

	Isb_Systick_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
	}

}
     adc:	1f 91       	pop	r17
     ade:	08 95       	ret

00000ae0 <Isb_Systick_Irq_Timer>:


void Isb_Systick_Irq_Timer(void)
{

	Isb_Systick_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     ae0:	80 91 40 01 	lds	r24, 0x0140
     ae4:	81 60       	ori	r24, 0x01	; 1
     ae6:	80 93 40 01 	sts	0x0140, r24
	Isb_Systick_IrqClock++;
     aea:	80 91 41 01 	lds	r24, 0x0141
     aee:	90 91 42 01 	lds	r25, 0x0142
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	90 93 42 01 	sts	0x0142, r25
     af8:	80 93 41 01 	sts	0x0141, r24
	#if defined(IF_RF_RFM12)
	If_Rf_Rfm12_IrqExec++;
	#endif /* IF_RF_RFM12 */

	#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
	Isb_App_DigOut_IrqExec++;
     afc:	80 91 4d 01 	lds	r24, 0x014D
     b00:	90 91 4e 01 	lds	r25, 0x014E
     b04:	01 96       	adiw	r24, 0x01	; 1
     b06:	90 93 4e 01 	sts	0x014E, r25
     b0a:	80 93 4d 01 	sts	0x014D, r24
	#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

	#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
	Isb_App_DigIn_IrqExec++;
     b0e:	80 91 4f 01 	lds	r24, 0x014F
     b12:	90 91 50 01 	lds	r25, 0x0150
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	90 93 50 01 	sts	0x0150, r25
     b1c:	80 93 4f 01 	sts	0x014F, r24
	#if defined(ISB_APP_CLOCK_MAX) && defined(ISB_APP_H_)
	Isb_App_Clock_IrqExec++;
	#endif /* ISB_APP_CLOCK_MAX && ISB_APP_H_ */

	#if defined(ISB_OBJ_MAX) && defined(ISB_OBJ_H_)
	Isb_Obj_IrqExec++;
     b20:	80 91 51 01 	lds	r24, 0x0151
     b24:	90 91 52 01 	lds	r25, 0x0152
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	90 93 52 01 	sts	0x0152, r25
     b2e:	80 93 51 01 	sts	0x0151, r24

	#if defined(HW_EUROTRONIC_SPARMATIC_ZERO_H_) && defined(HW_EUROTRONIC_SPARMATIC_ZERO_H_)
	Hw_Eurotronic_Sparmatic_Zero_MotorUeberwachungCount++;
	#endif /* HW_EUROTRONIC_SPARMATIC_ZERO_H_ && HW_EUROTRONIC_SPARMATIC_ZERO_H_ */

}
     b32:	08 95       	ret

00000b34 <__vector_14>:
{
	Isb_Systick_Irq_Timer();
}
	#elif defined(__AVR_ATmega168__) | defined(__AVR_ATmega168V__)
ISR(TIMER0_COMPA_vect)
{
     b34:	1f 92       	push	r1
     b36:	0f 92       	push	r0
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	0f 92       	push	r0
     b3c:	11 24       	eor	r1, r1
     b3e:	8f 93       	push	r24
     b40:	9f 93       	push	r25


void Isb_Systick_Irq_Timer(void)
{

	Isb_Systick_Ctrl |= (1 << ISB_CTRL_SOFTIRQ_EXEC);
     b42:	80 91 40 01 	lds	r24, 0x0140
     b46:	81 60       	ori	r24, 0x01	; 1
     b48:	80 93 40 01 	sts	0x0140, r24
	Isb_Systick_IrqClock++;
     b4c:	80 91 41 01 	lds	r24, 0x0141
     b50:	90 91 42 01 	lds	r25, 0x0142
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	90 93 42 01 	sts	0x0142, r25
     b5a:	80 93 41 01 	sts	0x0141, r24
	#if defined(IF_RF_RFM12)
	If_Rf_Rfm12_IrqExec++;
	#endif /* IF_RF_RFM12 */

	#if defined(ISB_APP_DIGOUT_MAX) && defined(ISB_APP_H_)
	Isb_App_DigOut_IrqExec++;
     b5e:	80 91 4d 01 	lds	r24, 0x014D
     b62:	90 91 4e 01 	lds	r25, 0x014E
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	90 93 4e 01 	sts	0x014E, r25
     b6c:	80 93 4d 01 	sts	0x014D, r24
	#endif /* ISB_APP_DIGOUT_MAX && ISB_APP_H_ */

	#if defined(ISB_APP_DIGIN_MAX) && defined(ISB_APP_H_)
	Isb_App_DigIn_IrqExec++;
     b70:	80 91 4f 01 	lds	r24, 0x014F
     b74:	90 91 50 01 	lds	r25, 0x0150
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	90 93 50 01 	sts	0x0150, r25
     b7e:	80 93 4f 01 	sts	0x014F, r24
	#if defined(ISB_APP_CLOCK_MAX) && defined(ISB_APP_H_)
	Isb_App_Clock_IrqExec++;
	#endif /* ISB_APP_CLOCK_MAX && ISB_APP_H_ */

	#if defined(ISB_OBJ_MAX) && defined(ISB_OBJ_H_)
	Isb_Obj_IrqExec++;
     b82:	80 91 51 01 	lds	r24, 0x0151
     b86:	90 91 52 01 	lds	r25, 0x0152
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	90 93 52 01 	sts	0x0152, r25
     b90:	80 93 51 01 	sts	0x0151, r24
}
	#elif defined(__AVR_ATmega168__) | defined(__AVR_ATmega168V__)
ISR(TIMER0_COMPA_vect)
{
	Isb_Systick_Irq_Timer();
}
     b94:	9f 91       	pop	r25
     b96:	8f 91       	pop	r24
     b98:	0f 90       	pop	r0
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	0f 90       	pop	r0
     b9e:	1f 90       	pop	r1
     ba0:	18 95       	reti

00000ba2 <Isb_App_Init>:
//			}
// TODO: Alles
// TODO: <-
		#endif /* ISB_APP_LCD_MAX */

	}
     ba2:	08 95       	ret

00000ba4 <Isb_App_Convert_None>:



	void Isb_App_Convert_None(uint16_t Value, void *Destination)
	{
     ba4:	fb 01       	movw	r30, r22

		*(uint16_t *)Destination = Value;
     ba6:	91 83       	std	Z+1, r25	; 0x01
     ba8:	80 83       	st	Z, r24

	}
     baa:	08 95       	ret

00000bac <Isb_App_Convert_PT100>:



	void Isb_App_Convert_PT100(uint16_t Value, void *Destination)
	{
     bac:	fb 01       	movw	r30, r22

		Value = Value << 1;
		*(uint16_t *)Destination = Value;
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	91 83       	std	Z+1, r25	; 0x01
     bb4:	80 83       	st	Z, r24

	}
     bb6:	08 95       	ret

00000bb8 <Lib_FloatToInteger>:



	int32_t Lib_FloatToInteger(uint16_t Float)
	{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <Lib_FloatToInteger+0x6>
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	9a 83       	std	Y+2, r25	; 0x02
     bc4:	89 83       	std	Y+1, r24	; 0x01

		uint32_t Integer = 0;
		uint16_t Exponent = (Float & 0x7C00)>>11;
     bc6:	9c 01       	movw	r18, r24
		uint16_t Mantisse = Float & 0x03FF;

		if (bit_is_set(Float, 15))
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	c9 01       	movw	r24, r18
     bcc:	80 70       	andi	r24, 0x00	; 0
     bce:	9c 77       	andi	r25, 0x7C	; 124
     bd0:	89 2f       	mov	r24, r25
     bd2:	86 95       	lsr	r24
     bd4:	86 95       	lsr	r24
     bd6:	86 95       	lsr	r24
     bd8:	33 70       	andi	r19, 0x03	; 3
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <Lib_FloatToInteger+0x28>
     bdc:	22 0f       	add	r18, r18
     bde:	33 1f       	adc	r19, r19
     be0:	8a 95       	dec	r24
     be2:	e2 f7       	brpl	.-8      	; 0xbdc <Lib_FloatToInteger+0x24>
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	50 95       	com	r21
     bea:	40 95       	com	r20
     bec:	30 95       	com	r19
     bee:	21 95       	neg	r18
     bf0:	3f 4f       	sbci	r19, 0xFF	; 255
     bf2:	4f 4f       	sbci	r20, 0xFF	; 255
     bf4:	5f 4f       	sbci	r21, 0xFF	; 255
			Integer -= Mantisse * (1<<Exponent);
		}

		return Integer;

	}
     bf6:	b9 01       	movw	r22, r18
     bf8:	ca 01       	movw	r24, r20
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	08 95       	ret

00000c04 <Lib_IntegerToFloat>:
	{

		uint16_t Float = 0;

		// Vorzeichen
		if (Integer >= 0)
     c04:	97 fd       	sbrc	r25, 7
     c06:	03 c0       	rjmp	.+6      	; 0xc0e <Lib_IntegerToFloat+0xa>
     c08:	40 e0       	ldi	r20, 0x00	; 0
     c0a:	50 e8       	ldi	r21, 0x80	; 128
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <Lib_IntegerToFloat+0xe>
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	06 c0       	rjmp	.+12     	; 0xc24 <Lib_IntegerToFloat+0x20>
		}

		uint16_t Exponent = 0;
		while (Integer > 2047)
		{
			Exponent++;
     c18:	2f 5f       	subi	r18, 0xFF	; 255
     c1a:	3f 4f       	sbci	r19, 0xFF	; 255
			Integer = Integer >> 1;
     c1c:	95 95       	asr	r25
     c1e:	87 95       	ror	r24
     c20:	77 95       	ror	r23
     c22:	67 95       	ror	r22
		{
			Float |= 0x8000;
		}

		uint16_t Exponent = 0;
		while (Integer > 2047)
     c24:	60 30       	cpi	r22, 0x00	; 0
     c26:	e8 e0       	ldi	r30, 0x08	; 8
     c28:	7e 07       	cpc	r23, r30
     c2a:	e0 e0       	ldi	r30, 0x00	; 0
     c2c:	8e 07       	cpc	r24, r30
     c2e:	e0 e0       	ldi	r30, 0x00	; 0
     c30:	9e 07       	cpc	r25, r30
     c32:	94 f7       	brge	.-28     	; 0xc18 <Lib_IntegerToFloat+0x14>
			Exponent++;
			Integer = Integer >> 1;
		}
		Exponent = Exponent << 11;

		Float |= Exponent;
     c34:	32 2f       	mov	r19, r18
     c36:	22 27       	eor	r18, r18
     c38:	33 0f       	add	r19, r19
     c3a:	33 0f       	add	r19, r19
     c3c:	33 0f       	add	r19, r19
     c3e:	26 2b       	or	r18, r22
     c40:	37 2b       	or	r19, r23
     c42:	24 2b       	or	r18, r20
     c44:	35 2b       	or	r19, r21
		Float |= (uint16_t)Integer;

		return Float;

	}
     c46:	c9 01       	movw	r24, r18
     c48:	08 95       	ret

00000c4a <Isb_Ch_Ctrl_Get.2326>:
		uint8_t Isb_Ch_Ctrl_Get(uint8_t Ch)
		{
			uint8_t Ctrl = 0;
			uint16_t eepAddrCtrl = 0;
			uint16_t eepAddrCrc = 0;
			switch (Ch)
     c4a:	87 30       	cpi	r24, 0x07	; 7
     c4c:	09 f4       	brne	.+2      	; 0xc50 <Isb_Ch_Ctrl_Get.2326+0x6>
     c4e:	4b c0       	rjmp	.+150    	; 0xce6 <Isb_Ch_Ctrl_Get.2326+0x9c>
     c50:	88 30       	cpi	r24, 0x08	; 8
     c52:	70 f4       	brcc	.+28     	; 0xc70 <Isb_Ch_Ctrl_Get.2326+0x26>
     c54:	83 30       	cpi	r24, 0x03	; 3
     c56:	99 f1       	breq	.+102    	; 0xcbe <Isb_Ch_Ctrl_Get.2326+0x74>
     c58:	84 30       	cpi	r24, 0x04	; 4
     c5a:	28 f4       	brcc	.+10     	; 0xc66 <Isb_Ch_Ctrl_Get.2326+0x1c>
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	29 f1       	breq	.+74     	; 0xcaa <Isb_Ch_Ctrl_Get.2326+0x60>
     c60:	82 30       	cpi	r24, 0x02	; 2
     c62:	40 f5       	brcc	.+80     	; 0xcb4 <Isb_Ch_Ctrl_Get.2326+0x6a>
     c64:	1d c0       	rjmp	.+58     	; 0xca0 <Isb_Ch_Ctrl_Get.2326+0x56>
     c66:	85 30       	cpi	r24, 0x05	; 5
     c68:	a1 f1       	breq	.+104    	; 0xcd2 <Isb_Ch_Ctrl_Get.2326+0x88>
     c6a:	86 30       	cpi	r24, 0x06	; 6
     c6c:	b8 f5       	brcc	.+110    	; 0xcdc <Isb_Ch_Ctrl_Get.2326+0x92>
     c6e:	2c c0       	rjmp	.+88     	; 0xcc8 <Isb_Ch_Ctrl_Get.2326+0x7e>
     c70:	8b 30       	cpi	r24, 0x0B	; 11
     c72:	09 f4       	brne	.+2      	; 0xc76 <Isb_Ch_Ctrl_Get.2326+0x2c>
     c74:	4c c0       	rjmp	.+152    	; 0xd0e <Isb_Ch_Ctrl_Get.2326+0xc4>
     c76:	8c 30       	cpi	r24, 0x0C	; 12
     c78:	30 f4       	brcc	.+12     	; 0xc86 <Isb_Ch_Ctrl_Get.2326+0x3c>
     c7a:	89 30       	cpi	r24, 0x09	; 9
     c7c:	f1 f1       	breq	.+124    	; 0xcfa <Isb_Ch_Ctrl_Get.2326+0xb0>
     c7e:	8a 30       	cpi	r24, 0x0A	; 10
     c80:	08 f0       	brcs	.+2      	; 0xc84 <Isb_Ch_Ctrl_Get.2326+0x3a>
     c82:	40 c0       	rjmp	.+128    	; 0xd04 <Isb_Ch_Ctrl_Get.2326+0xba>
     c84:	35 c0       	rjmp	.+106    	; 0xcf0 <Isb_Ch_Ctrl_Get.2326+0xa6>
     c86:	8d 30       	cpi	r24, 0x0D	; 13
     c88:	09 f4       	brne	.+2      	; 0xc8c <Isb_Ch_Ctrl_Get.2326+0x42>
     c8a:	4b c0       	rjmp	.+150    	; 0xd22 <Isb_Ch_Ctrl_Get.2326+0xd8>
     c8c:	8d 30       	cpi	r24, 0x0D	; 13
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <Isb_Ch_Ctrl_Get.2326+0x48>
     c90:	43 c0       	rjmp	.+134    	; 0xd18 <Isb_Ch_Ctrl_Get.2326+0xce>
     c92:	8e 30       	cpi	r24, 0x0E	; 14
     c94:	09 f4       	brne	.+2      	; 0xc98 <Isb_Ch_Ctrl_Get.2326+0x4e>
     c96:	4a c0       	rjmp	.+148    	; 0xd2c <Isb_Ch_Ctrl_Get.2326+0xe2>
     c98:	8f 30       	cpi	r24, 0x0F	; 15
     c9a:	09 f0       	breq	.+2      	; 0xc9e <Isb_Ch_Ctrl_Get.2326+0x54>
     c9c:	53 c0       	rjmp	.+166    	; 0xd44 <Isb_Ch_Ctrl_Get.2326+0xfa>
     c9e:	4b c0       	rjmp	.+150    	; 0xd36 <Isb_Ch_Ctrl_Get.2326+0xec>
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	8a e1       	ldi	r24, 0x1A	; 26
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	4a c0       	rjmp	.+148    	; 0xd3e <Isb_Ch_Ctrl_Get.2326+0xf4>
     caa:	2b e1       	ldi	r18, 0x1B	; 27
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	85 e3       	ldi	r24, 0x35	; 53
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	45 c0       	rjmp	.+138    	; 0xd3e <Isb_Ch_Ctrl_Get.2326+0xf4>
				#endif /* ISB_CH_0 */
				#if defined(ISB_CH_1)
					case 1:
						eepAddrCtrl = ISB_CH_1_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_1_EEADDR_CRC;
						break;
     cb4:	26 e3       	ldi	r18, 0x36	; 54
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	80 e5       	ldi	r24, 0x50	; 80
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	40 c0       	rjmp	.+128    	; 0xd3e <Isb_Ch_Ctrl_Get.2326+0xf4>
				#endif /* ISB_CH_1 */
				#if defined(ISB_CH_2)
					case 2:
						eepAddrCtrl = ISB_CH_2_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_2_EEADDR_CRC;
						break;
     cbe:	21 e5       	ldi	r18, 0x51	; 81
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	8b e6       	ldi	r24, 0x6B	; 107
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	3b c0       	rjmp	.+118    	; 0xd3e <Isb_Ch_Ctrl_Get.2326+0xf4>
				#endif /* ISB_CH_2 */
				#if defined(ISB_CH_3)
					case 3:
						eepAddrCtrl = ISB_CH_3_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_3_EEADDR_CRC;
						break;
     cc8:	2c e6       	ldi	r18, 0x6C	; 108
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	86 e8       	ldi	r24, 0x86	; 134
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	36 c0       	rjmp	.+108    	; 0xd3e <Isb_Ch_Ctrl_Get.2326+0xf4>
				#endif /* ISB_CH_3 */
				#if defined(ISB_CH_4)
					case 4:
						eepAddrCtrl = ISB_CH_4_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_4_EEADDR_CRC;
						break;
     cd2:	27 e8       	ldi	r18, 0x87	; 135
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	81 ea       	ldi	r24, 0xA1	; 161
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	31 c0       	rjmp	.+98     	; 0xd3e <Isb_Ch_Ctrl_Get.2326+0xf4>
				#endif /* ISB_CH_4 */
				#if defined(ISB_CH_5)
					case 5:
						eepAddrCtrl = ISB_CH_5_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_5_EEADDR_CRC;
						break;
     cdc:	22 ea       	ldi	r18, 0xA2	; 162
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	8c eb       	ldi	r24, 0xBC	; 188
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	2c c0       	rjmp	.+88     	; 0xd3e <Isb_Ch_Ctrl_Get.2326+0xf4>
				#endif /* ISB_CH_5 */
				#if defined(ISB_CH_6)
					case 6:
						eepAddrCtrl = ISB_CH_6_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_6_EEADDR_CRC;
						break;
     ce6:	2d eb       	ldi	r18, 0xBD	; 189
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	87 ed       	ldi	r24, 0xD7	; 215
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	27 c0       	rjmp	.+78     	; 0xd3e <Isb_Ch_Ctrl_Get.2326+0xf4>
				#endif /* ISB_CH_6 */
				#if defined(ISB_CH_7)
					case 7:
						eepAddrCtrl = ISB_CH_7_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_7_EEADDR_CRC;
						break;
     cf0:	28 ed       	ldi	r18, 0xD8	; 216
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 ee       	ldi	r24, 0xE1	; 225
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	22 c0       	rjmp	.+68     	; 0xd3e <Isb_Ch_Ctrl_Get.2326+0xf4>
				#endif /* ISB_CH_7 */
				#if defined(ISB_CH_8)
					case 8:
						eepAddrCtrl = ISB_CH_8_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_8_EEADDR_CRC;
						break;
     cfa:	22 ee       	ldi	r18, 0xE2	; 226
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	8b ee       	ldi	r24, 0xEB	; 235
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	1d c0       	rjmp	.+58     	; 0xd3e <Isb_Ch_Ctrl_Get.2326+0xf4>
				#endif /* ISB_CH_8 */
				#if defined(ISB_CH_9)
					case 9:
						eepAddrCtrl = ISB_CH_9_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_9_EEADDR_CRC;
						break;
     d04:	2c ee       	ldi	r18, 0xEC	; 236
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	85 ef       	ldi	r24, 0xF5	; 245
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	18 c0       	rjmp	.+48     	; 0xd3e <Isb_Ch_Ctrl_Get.2326+0xf4>
				#endif /* ISB_CH_9 */
				#if defined(ISB_CH_10)
					case 10:
						eepAddrCtrl = ISB_CH_10_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_10_EEADDR_CRC;
						break;
     d0e:	26 ef       	ldi	r18, 0xF6	; 246
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	8f ef       	ldi	r24, 0xFF	; 255
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	13 c0       	rjmp	.+38     	; 0xd3e <Isb_Ch_Ctrl_Get.2326+0xf4>
				#endif /* ISB_CH_10 */
				#if defined(ISB_CH_11)
					case 11:
						eepAddrCtrl = ISB_CH_11_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_11_EEADDR_CRC;
						break;
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	31 e0       	ldi	r19, 0x01	; 1
     d1c:	89 e0       	ldi	r24, 0x09	; 9
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	0e c0       	rjmp	.+28     	; 0xd3e <Isb_Ch_Ctrl_Get.2326+0xf4>
				#endif /* ISB_CH_11 */
				#if defined(ISB_CH_12)
					case 12:
						eepAddrCtrl = ISB_CH_12_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_12_EEADDR_CRC;
						break;
     d22:	2a e0       	ldi	r18, 0x0A	; 10
     d24:	31 e0       	ldi	r19, 0x01	; 1
     d26:	83 e1       	ldi	r24, 0x13	; 19
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	09 c0       	rjmp	.+18     	; 0xd3e <Isb_Ch_Ctrl_Get.2326+0xf4>
				#endif /* ISB_CH_12 */
				#if defined(ISB_CH_13)
					case 13:
						eepAddrCtrl = ISB_CH_13_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_13_EEADDR_CRC;
						break;
     d2c:	24 e1       	ldi	r18, 0x14	; 20
     d2e:	31 e0       	ldi	r19, 0x01	; 1
     d30:	8d e1       	ldi	r24, 0x1D	; 29
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	04 c0       	rjmp	.+8      	; 0xd3e <Isb_Ch_Ctrl_Get.2326+0xf4>
				#endif /* ISB_CH_13 */
				#if defined(ISB_CH_14)
					case 14:
						eepAddrCtrl = ISB_CH_14_EEADDR_CTRL;
						eepAddrCrc = ISB_CH_14_EEADDR_CRC;
						break;
     d36:	2e e1       	ldi	r18, 0x1E	; 30
     d38:	31 e0       	ldi	r19, 0x01	; 1
     d3a:	87 e2       	ldi	r24, 0x27	; 39
     d3c:	91 e0       	ldi	r25, 0x01	; 1
//-				default:
//-					eepAddrCtrl = 0;
//-					eepAddrCrc = 0;
//-					break;
			}
			if ((eepAddrCrc != 0) & (eepAddrCtrl < eepAddrCrc))
     d3e:	28 17       	cp	r18, r24
     d40:	39 07       	cpc	r19, r25
     d42:	10 f0       	brcs	.+4      	; 0xd48 <Isb_Ch_Ctrl_Get.2326+0xfe>
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	08 95       	ret
     d48:	a9 01       	movw	r20, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <Isb_Ch_Ctrl_Get.2326+0x106>
			{
				uint8_t Crc = 0;
				for (uint16_t eepAddr = eepAddrCtrl; eepAddr <= eepAddrCrc; eepAddr++)
     d4c:	4f 5f       	subi	r20, 0xFF	; 255
     d4e:	5f 4f       	sbci	r21, 0xFF	; 255
     d50:	84 17       	cp	r24, r20
     d52:	95 07       	cpc	r25, r21
     d54:	d8 f7       	brcc	.-10     	; 0xd4c <Isb_Ch_Ctrl_Get.2326+0x102>
	}



	uint8_t __attribute__((always_inline)) lib_eep_fw_read_byte(uint8_t * aAddr) {
		return eeprom_read_byte(Isb_Firmware_Offset + aAddr);;
     d56:	80 91 47 01 	lds	r24, 0x0147
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     d5a:	f9 99       	sbic	0x1f, 1	; 31
     d5c:	fe cf       	rjmp	.-4      	; 0xd5a <Isb_Ch_Ctrl_Get.2326+0x110>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     d5e:	28 0f       	add	r18, r24
     d60:	31 1d       	adc	r19, r1
     d62:	32 bd       	out	0x22, r19	; 34
     d64:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
     d66:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
     d68:	80 b5       	in	r24, 0x20	; 32
				}
				else
				{
					Ctrl = (1<<ISB_CH_CTRL_ERROR_CRC);
				}
				Ctrl &= ~(1<<ISB_CH_CTRL_INITIALIZED);
     d6a:	8f 73       	andi	r24, 0x3F	; 63
			}
			return Ctrl;
		}
     d6c:	08 95       	ret

00000d6e <Isb_App_Exec>:
	}



	void Isb_App_Exec(void)
	{
     d6e:	2f 92       	push	r2
     d70:	3f 92       	push	r3
     d72:	4f 92       	push	r4
     d74:	5f 92       	push	r5
     d76:	6f 92       	push	r6
     d78:	7f 92       	push	r7
     d7a:	8f 92       	push	r8
     d7c:	9f 92       	push	r9
     d7e:	af 92       	push	r10
     d80:	bf 92       	push	r11
     d82:	cf 92       	push	r12
     d84:	df 92       	push	r13
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	69 97       	sbiw	r28, 0x19	; 25
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
				Isb_App_Clock_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
			}
		#endif /* ISB_APP_CLOCK_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			if (bit_is_set(Isb_App_DigIn_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
     da2:	80 91 4b 01 	lds	r24, 0x014B
     da6:	80 ff       	sbrs	r24, 0
     da8:	02 c7       	rjmp	.+3588   	; 0x1bae <Isb_App_Exec+0xe40>
     daa:	80 91 47 01 	lds	r24, 0x0147
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	3c 83       	std	Y+4, r19	; 0x04
     db4:	2b 83       	std	Y+3, r18	; 0x03
     db6:	43 e7       	ldi	r20, 0x73	; 115
     db8:	51 e0       	ldi	r21, 0x01	; 1
     dba:	59 8f       	std	Y+25, r21	; 0x19
     dbc:	48 8f       	std	Y+24, r20	; 0x18
     dbe:	1a 82       	std	Y+2, r1	; 0x02
     dc0:	19 82       	std	Y+1, r1	; 0x01
     dc2:	99 81       	ldd	r25, Y+1	; 0x01
			{
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++)
				{
					uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigIn_Ch_Array[AppIndex]);
     dc4:	e9 81       	ldd	r30, Y+1	; 0x01
     dc6:	fa 81       	ldd	r31, Y+2	; 0x02
     dc8:	e8 57       	subi	r30, 0x78	; 120
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	24 91       	lpm	r18, Z+
					uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigIn_Pin0_Array[AppIndex]);
     dce:	e9 81       	ldd	r30, Y+1	; 0x01
     dd0:	fa 81       	ldd	r31, Y+2	; 0x02
     dd2:	e0 57       	subi	r30, 0x70	; 112
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	54 91       	lpm	r21, Z+
     dd8:	5b 8b       	std	Y+19, r21	; 0x13
					uint8_t Obj_0 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_0_Array[AppIndex]);
     dda:	e9 81       	ldd	r30, Y+1	; 0x01
     ddc:	fa 81       	ldd	r31, Y+2	; 0x02
     dde:	e8 56       	subi	r30, 0x68	; 104
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	84 91       	lpm	r24, Z+
     de4:	8a 8b       	std	Y+18, r24	; 0x12
					uint8_t Obj_1 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_1_Array[AppIndex]);
     de6:	e9 81       	ldd	r30, Y+1	; 0x01
     de8:	fa 81       	ldd	r31, Y+2	; 0x02
     dea:	e0 56       	subi	r30, 0x60	; 96
     dec:	ff 4f       	sbci	r31, 0xFF	; 255
     dee:	a4 91       	lpm	r26, Z+
     df0:	a9 8b       	std	Y+17, r26	; 0x11
					uint8_t Obj_2 = pgm_read_byte(&pgmIsb_App_DigIn_Obj_2_Array[AppIndex]);
     df2:	e9 81       	ldd	r30, Y+1	; 0x01
     df4:	fa 81       	ldd	r31, Y+2	; 0x02
     df6:	e8 55       	subi	r30, 0x58	; 88
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	b4 91       	lpm	r27, Z+
     dfc:	b8 8b       	std	Y+16, r27	; 0x10
					// Initialize
					if (bit_is_clear(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_INITIALIZED))
     dfe:	e2 2f       	mov	r30, r18
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	ff 8b       	std	Y+23, r31	; 0x17
     e04:	ee 8b       	std	Y+22, r30	; 0x16
     e06:	ee 0f       	add	r30, r30
     e08:	ff 1f       	adc	r31, r31
     e0a:	ed 5a       	subi	r30, 0xAD	; 173
     e0c:	fe 4f       	sbci	r31, 0xFE	; 254
     e0e:	fd 8b       	std	Y+21, r31	; 0x15
     e10:	ec 8b       	std	Y+20, r30	; 0x14
     e12:	80 81       	ld	r24, Z
     e14:	86 fd       	sbrc	r24, 6
     e16:	e9 c2       	rjmp	.+1490   	; 0x13ea <Isb_App_Exec+0x67c>
						uint16_t eepAddr_Obj_1_Tov = 0;
						uint16_t eepAddr_Obj_1_InitValue = 0;
						uint16_t eepAddr_Obj_2_Ctrl = 0;
						uint16_t eepAddr_Obj_2_Tov = 0;
						uint16_t eepAddr_Obj_2_InitValue = 0;
						switch (AppIndex)
     e18:	93 30       	cpi	r25, 0x03	; 3
     e1a:	09 f4       	brne	.+2      	; 0xe1e <Isb_App_Exec+0xb0>
     e1c:	ae c0       	rjmp	.+348    	; 0xf7a <Isb_App_Exec+0x20c>
     e1e:	94 30       	cpi	r25, 0x04	; 4
     e20:	38 f4       	brcc	.+14     	; 0xe30 <Isb_App_Exec+0xc2>
     e22:	91 30       	cpi	r25, 0x01	; 1
     e24:	09 f4       	brne	.+2      	; 0xe28 <Isb_App_Exec+0xba>
     e26:	55 c0       	rjmp	.+170    	; 0xed2 <Isb_App_Exec+0x164>
     e28:	92 30       	cpi	r25, 0x02	; 2
     e2a:	08 f0       	brcs	.+2      	; 0xe2e <Isb_App_Exec+0xc0>
     e2c:	7c c0       	rjmp	.+248    	; 0xf26 <Isb_App_Exec+0x1b8>
     e2e:	0c c0       	rjmp	.+24     	; 0xe48 <Isb_App_Exec+0xda>
     e30:	95 30       	cpi	r25, 0x05	; 5
     e32:	09 f4       	brne	.+2      	; 0xe36 <Isb_App_Exec+0xc8>
     e34:	f8 c0       	rjmp	.+496    	; 0x1026 <Isb_App_Exec+0x2b8>
     e36:	95 30       	cpi	r25, 0x05	; 5
     e38:	08 f4       	brcc	.+2      	; 0xe3c <Isb_App_Exec+0xce>
     e3a:	c9 c0       	rjmp	.+402    	; 0xfce <Isb_App_Exec+0x260>
     e3c:	96 30       	cpi	r25, 0x06	; 6
     e3e:	09 f4       	brne	.+2      	; 0xe42 <Isb_App_Exec+0xd4>
     e40:	1e c1       	rjmp	.+572    	; 0x107e <Isb_App_Exec+0x310>
     e42:	97 30       	cpi	r25, 0x07	; 7
     e44:	59 f5       	brne	.+86     	; 0xe9c <Isb_App_Exec+0x12e>
     e46:	47 c1       	rjmp	.+654    	; 0x10d6 <Isb_App_Exec+0x368>
     e48:	41 e0       	ldi	r20, 0x01	; 1
     e4a:	a4 2e       	mov	r10, r20
     e4c:	b1 2c       	mov	r11, r1
     e4e:	32 e0       	ldi	r19, 0x02	; 2
     e50:	c3 2e       	mov	r12, r19
     e52:	d1 2c       	mov	r13, r1
     e54:	93 e0       	ldi	r25, 0x03	; 3
     e56:	e9 2e       	mov	r14, r25
     e58:	f1 2c       	mov	r15, r1
     e5a:	04 e0       	ldi	r16, 0x04	; 4
     e5c:	10 e0       	ldi	r17, 0x00	; 0
     e5e:	85 e0       	ldi	r24, 0x05	; 5
     e60:	88 2e       	mov	r8, r24
     e62:	91 2c       	mov	r9, r1
     e64:	b6 e0       	ldi	r27, 0x06	; 6
     e66:	6b 2e       	mov	r6, r27
     e68:	71 2c       	mov	r7, r1
     e6a:	47 e0       	ldi	r20, 0x07	; 7
     e6c:	50 e0       	ldi	r21, 0x00	; 0
     e6e:	5f 87       	std	Y+15, r21	; 0x0f
     e70:	4e 87       	std	Y+14, r20	; 0x0e
     e72:	ac e0       	ldi	r26, 0x0C	; 12
     e74:	4a 2e       	mov	r4, r26
     e76:	51 2c       	mov	r5, r1
     e78:	fd e0       	ldi	r31, 0x0D	; 13
     e7a:	2f 2e       	mov	r2, r31
     e7c:	31 2c       	mov	r3, r1
     e7e:	8e e0       	ldi	r24, 0x0E	; 14
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	9d 87       	std	Y+13, r25	; 0x0d
     e84:	8c 87       	std	Y+12, r24	; 0x0c
     e86:	a3 e1       	ldi	r26, 0x13	; 19
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	bb 87       	std	Y+11, r27	; 0x0b
     e8c:	aa 87       	std	Y+10, r26	; 0x0a
     e8e:	e4 e1       	ldi	r30, 0x14	; 20
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	f9 87       	std	Y+9, r31	; 0x09
     e94:	e8 87       	std	Y+8, r30	; 0x08
     e96:	45 e1       	ldi	r20, 0x15	; 21
     e98:	50 e0       	ldi	r21, 0x00	; 0
     e9a:	c2 c0       	rjmp	.+388    	; 0x1020 <Isb_App_Exec+0x2b2>
     e9c:	aa 24       	eor	r10, r10
     e9e:	bb 24       	eor	r11, r11
     ea0:	cc 24       	eor	r12, r12
     ea2:	dd 24       	eor	r13, r13
     ea4:	ee 24       	eor	r14, r14
     ea6:	ff 24       	eor	r15, r15
     ea8:	00 e0       	ldi	r16, 0x00	; 0
     eaa:	10 e0       	ldi	r17, 0x00	; 0
     eac:	88 24       	eor	r8, r8
     eae:	99 24       	eor	r9, r9
     eb0:	66 24       	eor	r6, r6
     eb2:	77 24       	eor	r7, r7
     eb4:	1f 86       	std	Y+15, r1	; 0x0f
     eb6:	1e 86       	std	Y+14, r1	; 0x0e
     eb8:	44 24       	eor	r4, r4
     eba:	55 24       	eor	r5, r5
     ebc:	22 24       	eor	r2, r2
     ebe:	33 24       	eor	r3, r3
     ec0:	1d 86       	std	Y+13, r1	; 0x0d
     ec2:	1c 86       	std	Y+12, r1	; 0x0c
     ec4:	1b 86       	std	Y+11, r1	; 0x0b
     ec6:	1a 86       	std	Y+10, r1	; 0x0a
     ec8:	19 86       	std	Y+9, r1	; 0x09
     eca:	18 86       	std	Y+8, r1	; 0x08
     ecc:	1f 82       	std	Y+7, r1	; 0x07
     ece:	1e 82       	std	Y+6, r1	; 0x06
     ed0:	2d c1       	rjmp	.+602    	; 0x112c <Isb_App_Exec+0x3be>
     ed2:	ec e1       	ldi	r30, 0x1C	; 28
     ed4:	ae 2e       	mov	r10, r30
     ed6:	b1 2c       	mov	r11, r1
     ed8:	7d e1       	ldi	r23, 0x1D	; 29
     eda:	c7 2e       	mov	r12, r23
     edc:	d1 2c       	mov	r13, r1
     ede:	6e e1       	ldi	r22, 0x1E	; 30
     ee0:	e6 2e       	mov	r14, r22
     ee2:	f1 2c       	mov	r15, r1
     ee4:	0f e1       	ldi	r16, 0x1F	; 31
     ee6:	10 e0       	ldi	r17, 0x00	; 0
     ee8:	50 e2       	ldi	r21, 0x20	; 32
     eea:	85 2e       	mov	r8, r21
     eec:	91 2c       	mov	r9, r1
     eee:	41 e2       	ldi	r20, 0x21	; 33
     ef0:	64 2e       	mov	r6, r20
     ef2:	71 2c       	mov	r7, r1
     ef4:	82 e2       	ldi	r24, 0x22	; 34
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9f 87       	std	Y+15, r25	; 0x0f
     efa:	8e 87       	std	Y+14, r24	; 0x0e
     efc:	37 e2       	ldi	r19, 0x27	; 39
     efe:	43 2e       	mov	r4, r19
     f00:	51 2c       	mov	r5, r1
     f02:	98 e2       	ldi	r25, 0x28	; 40
     f04:	29 2e       	mov	r2, r25
     f06:	31 2c       	mov	r3, r1
     f08:	a9 e2       	ldi	r26, 0x29	; 41
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	bd 87       	std	Y+13, r27	; 0x0d
     f0e:	ac 87       	std	Y+12, r26	; 0x0c
     f10:	ee e2       	ldi	r30, 0x2E	; 46
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	fb 87       	std	Y+11, r31	; 0x0b
     f16:	ea 87       	std	Y+10, r30	; 0x0a
     f18:	4f e2       	ldi	r20, 0x2F	; 47
     f1a:	50 e0       	ldi	r21, 0x00	; 0
     f1c:	59 87       	std	Y+9, r21	; 0x09
     f1e:	48 87       	std	Y+8, r20	; 0x08
     f20:	80 e3       	ldi	r24, 0x30	; 48
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	a9 c0       	rjmp	.+338    	; 0x1078 <Isb_App_Exec+0x30a>
									eepAddr_Obj_1_Tov = ISB_APP_DIGIN_1_OBJ_1_EEADDR_TOV;
									eepAddr_Obj_1_InitValue = ISB_APP_DIGIN_1_OBJ_1_EEADDR_INITVALUE;
									eepAddr_Obj_2_Ctrl = ISB_APP_DIGIN_1_OBJ_2_EEADDR_CTRL;
									eepAddr_Obj_2_Tov = ISB_APP_DIGIN_1_OBJ_2_EEADDR_TOV;
									eepAddr_Obj_2_InitValue = ISB_APP_DIGIN_1_OBJ_2_EEADDR_INITVALUE;
									break;
     f26:	87 e3       	ldi	r24, 0x37	; 55
     f28:	a8 2e       	mov	r10, r24
     f2a:	b1 2c       	mov	r11, r1
     f2c:	08 e3       	ldi	r16, 0x38	; 56
     f2e:	c0 2e       	mov	r12, r16
     f30:	d1 2c       	mov	r13, r1
     f32:	19 e3       	ldi	r17, 0x39	; 57
     f34:	e1 2e       	mov	r14, r17
     f36:	f1 2c       	mov	r15, r1
     f38:	0a e3       	ldi	r16, 0x3A	; 58
     f3a:	10 e0       	ldi	r17, 0x00	; 0
     f3c:	bb e3       	ldi	r27, 0x3B	; 59
     f3e:	8b 2e       	mov	r8, r27
     f40:	91 2c       	mov	r9, r1
     f42:	ac e3       	ldi	r26, 0x3C	; 60
     f44:	6a 2e       	mov	r6, r26
     f46:	71 2c       	mov	r7, r1
     f48:	ad e3       	ldi	r26, 0x3D	; 61
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	bf 87       	std	Y+15, r27	; 0x0f
     f4e:	ae 87       	std	Y+14, r26	; 0x0e
     f50:	f2 e4       	ldi	r31, 0x42	; 66
     f52:	4f 2e       	mov	r4, r31
     f54:	51 2c       	mov	r5, r1
     f56:	e3 e4       	ldi	r30, 0x43	; 67
     f58:	2e 2e       	mov	r2, r30
     f5a:	31 2c       	mov	r3, r1
     f5c:	e4 e4       	ldi	r30, 0x44	; 68
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	fd 87       	std	Y+13, r31	; 0x0d
     f62:	ec 87       	std	Y+12, r30	; 0x0c
     f64:	49 e4       	ldi	r20, 0x49	; 73
     f66:	50 e0       	ldi	r21, 0x00	; 0
     f68:	5b 87       	std	Y+11, r21	; 0x0b
     f6a:	4a 87       	std	Y+10, r20	; 0x0a
     f6c:	8a e4       	ldi	r24, 0x4A	; 74
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	99 87       	std	Y+9, r25	; 0x09
     f72:	88 87       	std	Y+8, r24	; 0x08
     f74:	ab e4       	ldi	r26, 0x4B	; 75
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	ab c0       	rjmp	.+342    	; 0x10d0 <Isb_App_Exec+0x362>
									eepAddr_Obj_1_Tov = ISB_APP_DIGIN_2_OBJ_1_EEADDR_TOV;
									eepAddr_Obj_1_InitValue = ISB_APP_DIGIN_2_OBJ_1_EEADDR_INITVALUE;
									eepAddr_Obj_2_Ctrl = ISB_APP_DIGIN_2_OBJ_2_EEADDR_CTRL;
									eepAddr_Obj_2_Tov = ISB_APP_DIGIN_2_OBJ_2_EEADDR_TOV;
									eepAddr_Obj_2_InitValue = ISB_APP_DIGIN_2_OBJ_2_EEADDR_INITVALUE;
									break;
     f7a:	72 e5       	ldi	r23, 0x52	; 82
     f7c:	a7 2e       	mov	r10, r23
     f7e:	b1 2c       	mov	r11, r1
     f80:	63 e5       	ldi	r22, 0x53	; 83
     f82:	c6 2e       	mov	r12, r22
     f84:	d1 2c       	mov	r13, r1
     f86:	54 e5       	ldi	r21, 0x54	; 84
     f88:	e5 2e       	mov	r14, r21
     f8a:	f1 2c       	mov	r15, r1
     f8c:	05 e5       	ldi	r16, 0x55	; 85
     f8e:	10 e0       	ldi	r17, 0x00	; 0
     f90:	46 e5       	ldi	r20, 0x56	; 86
     f92:	84 2e       	mov	r8, r20
     f94:	91 2c       	mov	r9, r1
     f96:	37 e5       	ldi	r19, 0x57	; 87
     f98:	63 2e       	mov	r6, r19
     f9a:	71 2c       	mov	r7, r1
     f9c:	e8 e5       	ldi	r30, 0x58	; 88
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	ff 87       	std	Y+15, r31	; 0x0f
     fa2:	ee 87       	std	Y+14, r30	; 0x0e
     fa4:	9d e5       	ldi	r25, 0x5D	; 93
     fa6:	49 2e       	mov	r4, r25
     fa8:	51 2c       	mov	r5, r1
     faa:	8e e5       	ldi	r24, 0x5E	; 94
     fac:	28 2e       	mov	r2, r24
     fae:	31 2c       	mov	r3, r1
     fb0:	4f e5       	ldi	r20, 0x5F	; 95
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	5d 87       	std	Y+13, r21	; 0x0d
     fb6:	4c 87       	std	Y+12, r20	; 0x0c
     fb8:	84 e6       	ldi	r24, 0x64	; 100
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	9b 87       	std	Y+11, r25	; 0x0b
     fbe:	8a 87       	std	Y+10, r24	; 0x0a
     fc0:	a5 e6       	ldi	r26, 0x65	; 101
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	b9 87       	std	Y+9, r27	; 0x09
     fc6:	a8 87       	std	Y+8, r26	; 0x08
     fc8:	e6 e6       	ldi	r30, 0x66	; 102
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	ad c0       	rjmp	.+346    	; 0x1128 <Isb_App_Exec+0x3ba>
									eepAddr_Obj_1_Tov = ISB_APP_DIGIN_3_OBJ_1_EEADDR_TOV;
									eepAddr_Obj_1_InitValue = ISB_APP_DIGIN_3_OBJ_1_EEADDR_INITVALUE;
									eepAddr_Obj_2_Ctrl = ISB_APP_DIGIN_3_OBJ_2_EEADDR_CTRL;
									eepAddr_Obj_2_Tov = ISB_APP_DIGIN_3_OBJ_2_EEADDR_TOV;
									eepAddr_Obj_2_InitValue = ISB_APP_DIGIN_3_OBJ_2_EEADDR_INITVALUE;
									break;
     fce:	bd e6       	ldi	r27, 0x6D	; 109
     fd0:	ab 2e       	mov	r10, r27
     fd2:	b1 2c       	mov	r11, r1
     fd4:	ae e6       	ldi	r26, 0x6E	; 110
     fd6:	ca 2e       	mov	r12, r26
     fd8:	d1 2c       	mov	r13, r1
     fda:	ff e6       	ldi	r31, 0x6F	; 111
     fdc:	ef 2e       	mov	r14, r31
     fde:	f1 2c       	mov	r15, r1
     fe0:	00 e7       	ldi	r16, 0x70	; 112
     fe2:	10 e0       	ldi	r17, 0x00	; 0
     fe4:	e1 e7       	ldi	r30, 0x71	; 113
     fe6:	8e 2e       	mov	r8, r30
     fe8:	91 2c       	mov	r9, r1
     fea:	72 e7       	ldi	r23, 0x72	; 114
     fec:	67 2e       	mov	r6, r23
     fee:	71 2c       	mov	r7, r1
     ff0:	43 e7       	ldi	r20, 0x73	; 115
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	5f 87       	std	Y+15, r21	; 0x0f
     ff6:	4e 87       	std	Y+14, r20	; 0x0e
     ff8:	68 e7       	ldi	r22, 0x78	; 120
     ffa:	46 2e       	mov	r4, r22
     ffc:	51 2c       	mov	r5, r1
     ffe:	59 e7       	ldi	r21, 0x79	; 121
    1000:	25 2e       	mov	r2, r21
    1002:	31 2c       	mov	r3, r1
    1004:	8a e7       	ldi	r24, 0x7A	; 122
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	9d 87       	std	Y+13, r25	; 0x0d
    100a:	8c 87       	std	Y+12, r24	; 0x0c
    100c:	af e7       	ldi	r26, 0x7F	; 127
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	bb 87       	std	Y+11, r27	; 0x0b
    1012:	aa 87       	std	Y+10, r26	; 0x0a
    1014:	e0 e8       	ldi	r30, 0x80	; 128
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	f9 87       	std	Y+9, r31	; 0x09
    101a:	e8 87       	std	Y+8, r30	; 0x08
    101c:	41 e8       	ldi	r20, 0x81	; 129
    101e:	50 e0       	ldi	r21, 0x00	; 0
    1020:	5f 83       	std	Y+7, r21	; 0x07
    1022:	4e 83       	std	Y+6, r20	; 0x06
    1024:	83 c0       	rjmp	.+262    	; 0x112c <Isb_App_Exec+0x3be>
									eepAddr_Obj_1_Tov = ISB_APP_DIGIN_4_OBJ_1_EEADDR_TOV;
									eepAddr_Obj_1_InitValue = ISB_APP_DIGIN_4_OBJ_1_EEADDR_INITVALUE;
									eepAddr_Obj_2_Ctrl = ISB_APP_DIGIN_4_OBJ_2_EEADDR_CTRL;
									eepAddr_Obj_2_Tov = ISB_APP_DIGIN_4_OBJ_2_EEADDR_TOV;
									eepAddr_Obj_2_InitValue = ISB_APP_DIGIN_4_OBJ_2_EEADDR_INITVALUE;
									break;
    1026:	48 e8       	ldi	r20, 0x88	; 136
    1028:	a4 2e       	mov	r10, r20
    102a:	b1 2c       	mov	r11, r1
    102c:	39 e8       	ldi	r19, 0x89	; 137
    102e:	c3 2e       	mov	r12, r19
    1030:	d1 2c       	mov	r13, r1
    1032:	9a e8       	ldi	r25, 0x8A	; 138
    1034:	e9 2e       	mov	r14, r25
    1036:	f1 2c       	mov	r15, r1
    1038:	0b e8       	ldi	r16, 0x8B	; 139
    103a:	10 e0       	ldi	r17, 0x00	; 0
    103c:	8c e8       	ldi	r24, 0x8C	; 140
    103e:	88 2e       	mov	r8, r24
    1040:	91 2c       	mov	r9, r1
    1042:	bd e8       	ldi	r27, 0x8D	; 141
    1044:	6b 2e       	mov	r6, r27
    1046:	71 2c       	mov	r7, r1
    1048:	8e e8       	ldi	r24, 0x8E	; 142
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	9f 87       	std	Y+15, r25	; 0x0f
    104e:	8e 87       	std	Y+14, r24	; 0x0e
    1050:	a3 e9       	ldi	r26, 0x93	; 147
    1052:	4a 2e       	mov	r4, r26
    1054:	51 2c       	mov	r5, r1
    1056:	f4 e9       	ldi	r31, 0x94	; 148
    1058:	2f 2e       	mov	r2, r31
    105a:	31 2c       	mov	r3, r1
    105c:	a5 e9       	ldi	r26, 0x95	; 149
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	bd 87       	std	Y+13, r27	; 0x0d
    1062:	ac 87       	std	Y+12, r26	; 0x0c
    1064:	ea e9       	ldi	r30, 0x9A	; 154
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	fb 87       	std	Y+11, r31	; 0x0b
    106a:	ea 87       	std	Y+10, r30	; 0x0a
    106c:	4b e9       	ldi	r20, 0x9B	; 155
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	59 87       	std	Y+9, r21	; 0x09
    1072:	48 87       	std	Y+8, r20	; 0x08
    1074:	8c e9       	ldi	r24, 0x9C	; 156
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	9f 83       	std	Y+7, r25	; 0x07
    107a:	8e 83       	std	Y+6, r24	; 0x06
    107c:	57 c0       	rjmp	.+174    	; 0x112c <Isb_App_Exec+0x3be>
									eepAddr_Obj_1_Tov = ISB_APP_DIGIN_5_OBJ_1_EEADDR_TOV;
									eepAddr_Obj_1_InitValue = ISB_APP_DIGIN_5_OBJ_1_EEADDR_INITVALUE;
									eepAddr_Obj_2_Ctrl = ISB_APP_DIGIN_5_OBJ_2_EEADDR_CTRL;
									eepAddr_Obj_2_Tov = ISB_APP_DIGIN_5_OBJ_2_EEADDR_TOV;
									eepAddr_Obj_2_InitValue = ISB_APP_DIGIN_5_OBJ_2_EEADDR_INITVALUE;
									break;
    107e:	e3 ea       	ldi	r30, 0xA3	; 163
    1080:	ae 2e       	mov	r10, r30
    1082:	b1 2c       	mov	r11, r1
    1084:	74 ea       	ldi	r23, 0xA4	; 164
    1086:	c7 2e       	mov	r12, r23
    1088:	d1 2c       	mov	r13, r1
    108a:	65 ea       	ldi	r22, 0xA5	; 165
    108c:	e6 2e       	mov	r14, r22
    108e:	f1 2c       	mov	r15, r1
    1090:	06 ea       	ldi	r16, 0xA6	; 166
    1092:	10 e0       	ldi	r17, 0x00	; 0
    1094:	57 ea       	ldi	r21, 0xA7	; 167
    1096:	85 2e       	mov	r8, r21
    1098:	91 2c       	mov	r9, r1
    109a:	48 ea       	ldi	r20, 0xA8	; 168
    109c:	64 2e       	mov	r6, r20
    109e:	71 2c       	mov	r7, r1
    10a0:	a9 ea       	ldi	r26, 0xA9	; 169
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	bf 87       	std	Y+15, r27	; 0x0f
    10a6:	ae 87       	std	Y+14, r26	; 0x0e
    10a8:	3e ea       	ldi	r19, 0xAE	; 174
    10aa:	43 2e       	mov	r4, r19
    10ac:	51 2c       	mov	r5, r1
    10ae:	9f ea       	ldi	r25, 0xAF	; 175
    10b0:	29 2e       	mov	r2, r25
    10b2:	31 2c       	mov	r3, r1
    10b4:	e0 eb       	ldi	r30, 0xB0	; 176
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	fd 87       	std	Y+13, r31	; 0x0d
    10ba:	ec 87       	std	Y+12, r30	; 0x0c
    10bc:	45 eb       	ldi	r20, 0xB5	; 181
    10be:	50 e0       	ldi	r21, 0x00	; 0
    10c0:	5b 87       	std	Y+11, r21	; 0x0b
    10c2:	4a 87       	std	Y+10, r20	; 0x0a
    10c4:	86 eb       	ldi	r24, 0xB6	; 182
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	99 87       	std	Y+9, r25	; 0x09
    10ca:	88 87       	std	Y+8, r24	; 0x08
    10cc:	a7 eb       	ldi	r26, 0xB7	; 183
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	bf 83       	std	Y+7, r27	; 0x07
    10d2:	ae 83       	std	Y+6, r26	; 0x06
    10d4:	2b c0       	rjmp	.+86     	; 0x112c <Isb_App_Exec+0x3be>
									eepAddr_Obj_1_Tov = ISB_APP_DIGIN_6_OBJ_1_EEADDR_TOV;
									eepAddr_Obj_1_InitValue = ISB_APP_DIGIN_6_OBJ_1_EEADDR_INITVALUE;
									eepAddr_Obj_2_Ctrl = ISB_APP_DIGIN_6_OBJ_2_EEADDR_CTRL;
									eepAddr_Obj_2_Tov = ISB_APP_DIGIN_6_OBJ_2_EEADDR_TOV;
									eepAddr_Obj_2_InitValue = ISB_APP_DIGIN_6_OBJ_2_EEADDR_INITVALUE;
									break;
    10d6:	8e eb       	ldi	r24, 0xBE	; 190
    10d8:	a8 2e       	mov	r10, r24
    10da:	b1 2c       	mov	r11, r1
    10dc:	0f eb       	ldi	r16, 0xBF	; 191
    10de:	c0 2e       	mov	r12, r16
    10e0:	d1 2c       	mov	r13, r1
    10e2:	10 ec       	ldi	r17, 0xC0	; 192
    10e4:	e1 2e       	mov	r14, r17
    10e6:	f1 2c       	mov	r15, r1
    10e8:	01 ec       	ldi	r16, 0xC1	; 193
    10ea:	10 e0       	ldi	r17, 0x00	; 0
    10ec:	b2 ec       	ldi	r27, 0xC2	; 194
    10ee:	8b 2e       	mov	r8, r27
    10f0:	91 2c       	mov	r9, r1
    10f2:	a3 ec       	ldi	r26, 0xC3	; 195
    10f4:	6a 2e       	mov	r6, r26
    10f6:	71 2c       	mov	r7, r1
    10f8:	e4 ec       	ldi	r30, 0xC4	; 196
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	ff 87       	std	Y+15, r31	; 0x0f
    10fe:	ee 87       	std	Y+14, r30	; 0x0e
    1100:	f9 ec       	ldi	r31, 0xC9	; 201
    1102:	4f 2e       	mov	r4, r31
    1104:	51 2c       	mov	r5, r1
    1106:	ea ec       	ldi	r30, 0xCA	; 202
    1108:	2e 2e       	mov	r2, r30
    110a:	31 2c       	mov	r3, r1
    110c:	4b ec       	ldi	r20, 0xCB	; 203
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	5d 87       	std	Y+13, r21	; 0x0d
    1112:	4c 87       	std	Y+12, r20	; 0x0c
    1114:	80 ed       	ldi	r24, 0xD0	; 208
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	9b 87       	std	Y+11, r25	; 0x0b
    111a:	8a 87       	std	Y+10, r24	; 0x0a
    111c:	a1 ed       	ldi	r26, 0xD1	; 209
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	b9 87       	std	Y+9, r27	; 0x09
    1122:	a8 87       	std	Y+8, r26	; 0x08
    1124:	e2 ed       	ldi	r30, 0xD2	; 210
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	ff 83       	std	Y+7, r31	; 0x07
    112a:	ee 83       	std	Y+6, r30	; 0x06
									eepAddr_Obj_2_Tov = ISB_APP_DIGIN_15_OBJ_2_EEADDR_TOV;
									eepAddr_Obj_2_InitValue = ISB_APP_DIGIN_15_OBJ_2_EEADDR_INITVALUE;
									break;
							#endif /* ISB_APP_DIGIN_15 */
						}
						Isb_Ch[Ch].Ctrl = Isb_Ch_Ctrl_Get(Ch);
    112c:	82 2f       	mov	r24, r18
    112e:	0e 94 25 06 	call	0xc4a	; 0xc4a <Isb_Ch_Ctrl_Get.2326>
    1132:	ee 89       	ldd	r30, Y+22	; 0x16
    1134:	ff 89       	ldd	r31, Y+23	; 0x17
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	ed 5a       	subi	r30, 0xAD	; 173
    113c:	fe 4f       	sbci	r31, 0xFE	; 254
    113e:	80 83       	st	Z, r24
    1140:	11 82       	std	Z+1, r1	; 0x01
						if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED))
    1142:	ac 89       	ldd	r26, Y+20	; 0x14
    1144:	bd 89       	ldd	r27, Y+21	; 0x15
    1146:	8c 91       	ld	r24, X
    1148:	80 ff       	sbrs	r24, 0
    114a:	44 c1       	rjmp	.+648    	; 0x13d4 <Isb_App_Exec+0x666>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    114c:	f9 99       	sbic	0x1f, 1	; 31
    114e:	fe cf       	rjmp	.-4      	; 0x114c <Isb_App_Exec+0x3de>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1150:	eb 81       	ldd	r30, Y+3	; 0x03
    1152:	fc 81       	ldd	r31, Y+4	; 0x04
    1154:	ae 0e       	add	r10, r30
    1156:	bf 1e       	adc	r11, r31
    1158:	b2 bc       	out	0x22, r11	; 34
    115a:	a1 bc       	out	0x21, r10	; 33
#endif
    EECR |= (1 << EERE);
    115c:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    115e:	80 b5       	in	r24, 0x20	; 32
						{
							Isb_App_DigIn[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg0);
    1160:	a8 8d       	ldd	r26, Y+24	; 0x18
    1162:	b9 8d       	ldd	r27, Y+25	; 0x19
    1164:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1166:	f9 99       	sbic	0x1f, 1	; 31
    1168:	fe cf       	rjmp	.-4      	; 0x1166 <Isb_App_Exec+0x3f8>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    116a:	eb 81       	ldd	r30, Y+3	; 0x03
    116c:	fc 81       	ldd	r31, Y+4	; 0x04
    116e:	ce 0e       	add	r12, r30
    1170:	df 1e       	adc	r13, r31
    1172:	d2 bc       	out	0x22, r13	; 34
    1174:	c1 bc       	out	0x21, r12	; 33
#endif
    EECR |= (1 << EERE);
    1176:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    1178:	80 b5       	in	r24, 0x20	; 32
							Isb_App_DigIn[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg1);
    117a:	a8 8d       	ldd	r26, Y+24	; 0x18
    117c:	b9 8d       	ldd	r27, Y+25	; 0x19
    117e:	11 96       	adiw	r26, 0x01	; 1
    1180:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1182:	f9 99       	sbic	0x1f, 1	; 31
    1184:	fe cf       	rjmp	.-4      	; 0x1182 <Isb_App_Exec+0x414>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1186:	eb 81       	ldd	r30, Y+3	; 0x03
    1188:	fc 81       	ldd	r31, Y+4	; 0x04
    118a:	ee 0e       	add	r14, r30
    118c:	ff 1e       	adc	r15, r31
    118e:	f2 bc       	out	0x22, r15	; 34
    1190:	e1 bc       	out	0x21, r14	; 33
#endif
    EECR |= (1 << EERE);
    1192:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    1194:	80 b5       	in	r24, 0x20	; 32
							Isb_App_DigIn[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg2);
    1196:	a8 8d       	ldd	r26, Y+24	; 0x18
    1198:	b9 8d       	ldd	r27, Y+25	; 0x19
    119a:	12 96       	adiw	r26, 0x02	; 2
    119c:	8c 93       	st	X, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    119e:	f9 99       	sbic	0x1f, 1	; 31
    11a0:	fe cf       	rjmp	.-4      	; 0x119e <Isb_App_Exec+0x430>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    11a2:	eb 81       	ldd	r30, Y+3	; 0x03
    11a4:	fc 81       	ldd	r31, Y+4	; 0x04
    11a6:	0e 0f       	add	r16, r30
    11a8:	1f 1f       	adc	r17, r31
    11aa:	12 bd       	out	0x22, r17	; 34
    11ac:	01 bd       	out	0x21, r16	; 33
#endif
    EECR |= (1 << EERE);
    11ae:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    11b0:	80 b5       	in	r24, 0x20	; 32
							Isb_App_DigIn[AppIndex].Cfg3 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg3);
    11b2:	a8 8d       	ldd	r26, Y+24	; 0x18
    11b4:	b9 8d       	ldd	r27, Y+25	; 0x19
    11b6:	13 96       	adiw	r26, 0x03	; 3
    11b8:	8c 93       	st	X, r24
							uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
    11ba:	bb 89       	ldd	r27, Y+19	; 0x13
    11bc:	2b 2f       	mov	r18, r27
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	c9 01       	movw	r24, r18
    11c2:	88 73       	andi	r24, 0x38	; 56
    11c4:	90 70       	andi	r25, 0x00	; 0
    11c6:	63 e0       	ldi	r22, 0x03	; 3
    11c8:	95 95       	asr	r25
    11ca:	87 95       	ror	r24
    11cc:	6a 95       	dec	r22
    11ce:	e1 f7       	brne	.-8      	; 0x11c8 <Isb_App_Exec+0x45a>
							uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
							if (Port != 0)
    11d0:	88 23       	and	r24, r24
    11d2:	49 f0       	breq	.+18     	; 0x11e6 <Isb_App_Exec+0x478>
							Isb_App_DigIn[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg0);
							Isb_App_DigIn[AppIndex].Cfg1 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg1);
							Isb_App_DigIn[AppIndex].Cfg2 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg2);
							Isb_App_DigIn[AppIndex].Cfg3 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg3);
							uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
							uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
    11d4:	6b 2f       	mov	r22, r27
    11d6:	67 70       	andi	r22, 0x07	; 7
							if (Port != 0)
							{
								if ((Pin0 & PULLUP) == 0)
    11d8:	b6 fd       	sbrc	r27, 6
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <Isb_App_Exec+0x472>
								{
									Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT);
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	01 c0       	rjmp	.+2      	; 0x11e2 <Isb_App_Exec+0x474>
								}
								else
								{
									Lib_Pin_Set(Port, Pin, LIB_PIN_INPUT_PULLUP);
    11e0:	42 e0       	ldi	r20, 0x02	; 2
    11e2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>
								}
							}
							Isb_Obj[Obj_0].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Ctrl);
    11e6:	ea 89       	ldd	r30, Y+18	; 0x12
    11e8:	6e 2f       	mov	r22, r30
    11ea:	70 e0       	ldi	r23, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    11ec:	f9 99       	sbic	0x1f, 1	; 31
    11ee:	fe cf       	rjmp	.-4      	; 0x11ec <Isb_App_Exec+0x47e>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    11f0:	2b 81       	ldd	r18, Y+3	; 0x03
    11f2:	3c 81       	ldd	r19, Y+4	; 0x04
    11f4:	82 0e       	add	r8, r18
    11f6:	93 1e       	adc	r9, r19
    11f8:	92 bc       	out	0x22, r9	; 34
    11fa:	81 bc       	out	0x21, r8	; 33
#endif
    EECR |= (1 << EERE);
    11fc:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    11fe:	80 b5       	in	r24, 0x20	; 32
    1200:	fb 01       	movw	r30, r22
    1202:	53 e0       	ldi	r21, 0x03	; 3
    1204:	ee 0f       	add	r30, r30
    1206:	ff 1f       	adc	r31, r31
    1208:	5a 95       	dec	r21
    120a:	e1 f7       	brne	.-8      	; 0x1204 <Isb_App_Exec+0x496>
    120c:	e6 0f       	add	r30, r22
    120e:	f7 1f       	adc	r31, r23
    1210:	e5 52       	subi	r30, 0x25	; 37
    1212:	fe 4f       	sbci	r31, 0xFE	; 254
    1214:	80 83       	st	Z, r24
							Isb_Obj[Obj_0].Top = ISB_MSG_TOP_1BIT;
    1216:	31 e0       	ldi	r19, 0x01	; 1
    1218:	31 83       	std	Z+1, r19	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    121a:	f9 99       	sbic	0x1f, 1	; 31
    121c:	fe cf       	rjmp	.-4      	; 0x121a <Isb_App_Exec+0x4ac>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    121e:	4b 81       	ldd	r20, Y+3	; 0x03
    1220:	5c 81       	ldd	r21, Y+4	; 0x04
    1222:	64 0e       	add	r6, r20
    1224:	75 1e       	adc	r7, r21
    1226:	72 bc       	out	0x22, r7	; 34
    1228:	61 bc       	out	0x21, r6	; 33
#endif
    EECR |= (1 << EERE);
    122a:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    122c:	80 b5       	in	r24, 0x20	; 32
							Isb_Obj[Obj_0].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Tov);
    122e:	9b 01       	movw	r18, r22
    1230:	43 e0       	ldi	r20, 0x03	; 3
    1232:	22 0f       	add	r18, r18
    1234:	33 1f       	adc	r19, r19
    1236:	4a 95       	dec	r20
    1238:	e1 f7       	brne	.-8      	; 0x1232 <Isb_App_Exec+0x4c4>
    123a:	26 0f       	add	r18, r22
    123c:	37 1f       	adc	r19, r23
    123e:	f9 01       	movw	r30, r18
    1240:	e5 52       	subi	r30, 0x25	; 37
    1242:	fe 4f       	sbci	r31, 0xFE	; 254
    1244:	82 83       	std	Z+2, r24	; 0x02
    1246:	4e 85       	ldd	r20, Y+14	; 0x0e
    1248:	5f 85       	ldd	r21, Y+15	; 0x0f
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	48 0f       	add	r20, r24
    1250:	59 1f       	adc	r21, r25
    1252:	f9 01       	movw	r30, r18
    1254:	e2 52       	subi	r30, 0x22	; 34
    1256:	fe 4f       	sbci	r31, 0xFE	; 254
    1258:	90 e0       	ldi	r25, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    125a:	f9 99       	sbic	0x1f, 1	; 31
    125c:	fe cf       	rjmp	.-4      	; 0x125a <Isb_App_Exec+0x4ec>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    125e:	52 bd       	out	0x22, r21	; 34
    1260:	41 bd       	out	0x21, r20	; 33
#endif
    EECR |= (1 << EERE);
    1262:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    1264:	80 b5       	in	r24, 0x20	; 32
							for (uint8_t i = 0; i < 5; i++)
							{
								Isb_Obj[Obj_0].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_0_InitValue + i));
    1266:	81 93       	st	Z+, r24
								}
							}
							Isb_Obj[Obj_0].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Ctrl);
							Isb_Obj[Obj_0].Top = ISB_MSG_TOP_1BIT;
							Isb_Obj[Obj_0].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Tov);
							for (uint8_t i = 0; i < 5; i++)
    1268:	9f 5f       	subi	r25, 0xFF	; 255
    126a:	4f 5f       	subi	r20, 0xFF	; 255
    126c:	5f 4f       	sbci	r21, 0xFF	; 255
    126e:	95 30       	cpi	r25, 0x05	; 5
    1270:	a1 f7       	brne	.-24     	; 0x125a <Isb_App_Exec+0x4ec>
							{
								Isb_Obj[Obj_0].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_0_InitValue + i));
							}
							Isb_Obj[Obj_0].IsChanged = FALSE;
    1272:	fb 01       	movw	r30, r22
    1274:	33 e0       	ldi	r19, 0x03	; 3
    1276:	ee 0f       	add	r30, r30
    1278:	ff 1f       	adc	r31, r31
    127a:	3a 95       	dec	r19
    127c:	e1 f7       	brne	.-8      	; 0x1276 <Isb_App_Exec+0x508>
    127e:	e6 0f       	add	r30, r22
    1280:	f7 1f       	adc	r31, r23
    1282:	e5 52       	subi	r30, 0x25	; 37
    1284:	fe 4f       	sbci	r31, 0xFE	; 254
    1286:	10 86       	std	Z+8, r1	; 0x08
							Isb_Obj[Obj_1].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_1_Ctrl);
    1288:	99 89       	ldd	r25, Y+17	; 0x11
    128a:	69 2f       	mov	r22, r25
    128c:	70 e0       	ldi	r23, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    128e:	f9 99       	sbic	0x1f, 1	; 31
    1290:	fe cf       	rjmp	.-4      	; 0x128e <Isb_App_Exec+0x520>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1292:	ab 81       	ldd	r26, Y+3	; 0x03
    1294:	bc 81       	ldd	r27, Y+4	; 0x04
    1296:	4a 0e       	add	r4, r26
    1298:	5b 1e       	adc	r5, r27
    129a:	52 bc       	out	0x22, r5	; 34
    129c:	41 bc       	out	0x21, r4	; 33
#endif
    EECR |= (1 << EERE);
    129e:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    12a0:	80 b5       	in	r24, 0x20	; 32
    12a2:	fb 01       	movw	r30, r22
    12a4:	23 e0       	ldi	r18, 0x03	; 3
    12a6:	ee 0f       	add	r30, r30
    12a8:	ff 1f       	adc	r31, r31
    12aa:	2a 95       	dec	r18
    12ac:	e1 f7       	brne	.-8      	; 0x12a6 <Isb_App_Exec+0x538>
    12ae:	e6 0f       	add	r30, r22
    12b0:	f7 1f       	adc	r31, r23
    12b2:	e5 52       	subi	r30, 0x25	; 37
    12b4:	fe 4f       	sbci	r31, 0xFE	; 254
    12b6:	80 83       	st	Z, r24
							Isb_Obj[Obj_1].Top = ISB_MSG_TOP_1BIT;
    12b8:	b1 e0       	ldi	r27, 0x01	; 1
    12ba:	b1 83       	std	Z+1, r27	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    12bc:	f9 99       	sbic	0x1f, 1	; 31
    12be:	fe cf       	rjmp	.-4      	; 0x12bc <Isb_App_Exec+0x54e>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    12c0:	eb 81       	ldd	r30, Y+3	; 0x03
    12c2:	fc 81       	ldd	r31, Y+4	; 0x04
    12c4:	2e 0e       	add	r2, r30
    12c6:	3f 1e       	adc	r3, r31
    12c8:	32 bc       	out	0x22, r3	; 34
    12ca:	21 bc       	out	0x21, r2	; 33
#endif
    EECR |= (1 << EERE);
    12cc:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    12ce:	80 b5       	in	r24, 0x20	; 32
							Isb_Obj[Obj_1].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_1_Tov);
    12d0:	9b 01       	movw	r18, r22
    12d2:	93 e0       	ldi	r25, 0x03	; 3
    12d4:	22 0f       	add	r18, r18
    12d6:	33 1f       	adc	r19, r19
    12d8:	9a 95       	dec	r25
    12da:	e1 f7       	brne	.-8      	; 0x12d4 <Isb_App_Exec+0x566>
    12dc:	26 0f       	add	r18, r22
    12de:	37 1f       	adc	r19, r23
    12e0:	f9 01       	movw	r30, r18
    12e2:	e5 52       	subi	r30, 0x25	; 37
    12e4:	fe 4f       	sbci	r31, 0xFE	; 254
    12e6:	82 83       	std	Z+2, r24	; 0x02
    12e8:	4c 85       	ldd	r20, Y+12	; 0x0c
    12ea:	5d 85       	ldd	r21, Y+13	; 0x0d
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	48 0f       	add	r20, r24
    12f2:	59 1f       	adc	r21, r25
    12f4:	f9 01       	movw	r30, r18
    12f6:	e2 52       	subi	r30, 0x22	; 34
    12f8:	fe 4f       	sbci	r31, 0xFE	; 254
    12fa:	90 e0       	ldi	r25, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    12fc:	f9 99       	sbic	0x1f, 1	; 31
    12fe:	fe cf       	rjmp	.-4      	; 0x12fc <Isb_App_Exec+0x58e>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1300:	52 bd       	out	0x22, r21	; 34
    1302:	41 bd       	out	0x21, r20	; 33
#endif
    EECR |= (1 << EERE);
    1304:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    1306:	80 b5       	in	r24, 0x20	; 32
							for (uint8_t i = 0; i < 5; i++)
							{
								Isb_Obj[Obj_1].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_1_InitValue + i));
    1308:	81 93       	st	Z+, r24
							}
							Isb_Obj[Obj_0].IsChanged = FALSE;
							Isb_Obj[Obj_1].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_1_Ctrl);
							Isb_Obj[Obj_1].Top = ISB_MSG_TOP_1BIT;
							Isb_Obj[Obj_1].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_1_Tov);
							for (uint8_t i = 0; i < 5; i++)
    130a:	9f 5f       	subi	r25, 0xFF	; 255
    130c:	4f 5f       	subi	r20, 0xFF	; 255
    130e:	5f 4f       	sbci	r21, 0xFF	; 255
    1310:	95 30       	cpi	r25, 0x05	; 5
    1312:	a1 f7       	brne	.-24     	; 0x12fc <Isb_App_Exec+0x58e>
							{
								Isb_Obj[Obj_1].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_1_InitValue + i));
							}
							Isb_Obj[Obj_1].IsChanged = FALSE;
    1314:	fb 01       	movw	r30, r22
    1316:	83 e0       	ldi	r24, 0x03	; 3
    1318:	ee 0f       	add	r30, r30
    131a:	ff 1f       	adc	r31, r31
    131c:	8a 95       	dec	r24
    131e:	e1 f7       	brne	.-8      	; 0x1318 <Isb_App_Exec+0x5aa>
    1320:	e6 0f       	add	r30, r22
    1322:	f7 1f       	adc	r31, r23
    1324:	e5 52       	subi	r30, 0x25	; 37
    1326:	fe 4f       	sbci	r31, 0xFE	; 254
    1328:	10 86       	std	Z+8, r1	; 0x08
							Isb_Obj[Obj_2].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_2_Ctrl);
    132a:	98 89       	ldd	r25, Y+16	; 0x10
    132c:	69 2f       	mov	r22, r25
    132e:	70 e0       	ldi	r23, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1330:	f9 99       	sbic	0x1f, 1	; 31
    1332:	fe cf       	rjmp	.-4      	; 0x1330 <Isb_App_Exec+0x5c2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1334:	aa 85       	ldd	r26, Y+10	; 0x0a
    1336:	bb 85       	ldd	r27, Y+11	; 0x0b
    1338:	eb 81       	ldd	r30, Y+3	; 0x03
    133a:	fc 81       	ldd	r31, Y+4	; 0x04
    133c:	ae 0f       	add	r26, r30
    133e:	bf 1f       	adc	r27, r31
    1340:	b2 bd       	out	0x22, r27	; 34
    1342:	a1 bd       	out	0x21, r26	; 33
#endif
    EECR |= (1 << EERE);
    1344:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    1346:	80 b5       	in	r24, 0x20	; 32
    1348:	fb 01       	movw	r30, r22
    134a:	03 e0       	ldi	r16, 0x03	; 3
    134c:	ee 0f       	add	r30, r30
    134e:	ff 1f       	adc	r31, r31
    1350:	0a 95       	dec	r16
    1352:	e1 f7       	brne	.-8      	; 0x134c <Isb_App_Exec+0x5de>
    1354:	e6 0f       	add	r30, r22
    1356:	f7 1f       	adc	r31, r23
    1358:	e5 52       	subi	r30, 0x25	; 37
    135a:	fe 4f       	sbci	r31, 0xFE	; 254
    135c:	80 83       	st	Z, r24
							Isb_Obj[Obj_2].Top = ISB_MSG_TOP_1BIT;
    135e:	21 e0       	ldi	r18, 0x01	; 1
    1360:	21 83       	std	Z+1, r18	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1362:	f9 99       	sbic	0x1f, 1	; 31
    1364:	fe cf       	rjmp	.-4      	; 0x1362 <Isb_App_Exec+0x5f4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1366:	48 85       	ldd	r20, Y+8	; 0x08
    1368:	59 85       	ldd	r21, Y+9	; 0x09
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	9c 81       	ldd	r25, Y+4	; 0x04
    136e:	48 0f       	add	r20, r24
    1370:	59 1f       	adc	r21, r25
    1372:	52 bd       	out	0x22, r21	; 34
    1374:	41 bd       	out	0x21, r20	; 33
#endif
    EECR |= (1 << EERE);
    1376:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    1378:	80 b5       	in	r24, 0x20	; 32
							Isb_Obj[Obj_2].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_2_Tov);
    137a:	9b 01       	movw	r18, r22
    137c:	13 e0       	ldi	r17, 0x03	; 3
    137e:	22 0f       	add	r18, r18
    1380:	33 1f       	adc	r19, r19
    1382:	1a 95       	dec	r17
    1384:	e1 f7       	brne	.-8      	; 0x137e <Isb_App_Exec+0x610>
    1386:	26 0f       	add	r18, r22
    1388:	37 1f       	adc	r19, r23
    138a:	f9 01       	movw	r30, r18
    138c:	e5 52       	subi	r30, 0x25	; 37
    138e:	fe 4f       	sbci	r31, 0xFE	; 254
    1390:	82 83       	std	Z+2, r24	; 0x02
    1392:	4e 81       	ldd	r20, Y+6	; 0x06
    1394:	5f 81       	ldd	r21, Y+7	; 0x07
    1396:	ab 81       	ldd	r26, Y+3	; 0x03
    1398:	bc 81       	ldd	r27, Y+4	; 0x04
    139a:	4a 0f       	add	r20, r26
    139c:	5b 1f       	adc	r21, r27
    139e:	f9 01       	movw	r30, r18
    13a0:	e2 52       	subi	r30, 0x22	; 34
    13a2:	fe 4f       	sbci	r31, 0xFE	; 254
    13a4:	90 e0       	ldi	r25, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    13a6:	f9 99       	sbic	0x1f, 1	; 31
    13a8:	fe cf       	rjmp	.-4      	; 0x13a6 <Isb_App_Exec+0x638>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    13aa:	52 bd       	out	0x22, r21	; 34
    13ac:	41 bd       	out	0x21, r20	; 33
#endif
    EECR |= (1 << EERE);
    13ae:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    13b0:	80 b5       	in	r24, 0x20	; 32
							for (uint8_t i = 0; i < 5; i++)
							{
								Isb_Obj[Obj_2].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_2_InitValue + i));
    13b2:	81 93       	st	Z+, r24
							}
							Isb_Obj[Obj_1].IsChanged = FALSE;
							Isb_Obj[Obj_2].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_2_Ctrl);
							Isb_Obj[Obj_2].Top = ISB_MSG_TOP_1BIT;
							Isb_Obj[Obj_2].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_2_Tov);
							for (uint8_t i = 0; i < 5; i++)
    13b4:	9f 5f       	subi	r25, 0xFF	; 255
    13b6:	4f 5f       	subi	r20, 0xFF	; 255
    13b8:	5f 4f       	sbci	r21, 0xFF	; 255
    13ba:	95 30       	cpi	r25, 0x05	; 5
    13bc:	a1 f7       	brne	.-24     	; 0x13a6 <Isb_App_Exec+0x638>
							{
								Isb_Obj[Obj_2].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_2_InitValue + i));
							}
							Isb_Obj[Obj_2].IsChanged = FALSE;
    13be:	fb 01       	movw	r30, r22
    13c0:	b3 e0       	ldi	r27, 0x03	; 3
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	ba 95       	dec	r27
    13c8:	e1 f7       	brne	.-8      	; 0x13c2 <Isb_App_Exec+0x654>
    13ca:	e6 0f       	add	r30, r22
    13cc:	f7 1f       	adc	r31, r23
    13ce:	e5 52       	subi	r30, 0x25	; 37
    13d0:	fe 4f       	sbci	r31, 0xFE	; 254
    13d2:	10 86       	std	Z+8, r1	; 0x08
						}
						Isb_Ch[Ch].Ctrl |= (1<<ISB_CH_CTRL_INITIALIZED);
    13d4:	ee 89       	ldd	r30, Y+22	; 0x16
    13d6:	ff 89       	ldd	r31, Y+23	; 0x17
    13d8:	ee 0f       	add	r30, r30
    13da:	ff 1f       	adc	r31, r31
    13dc:	ed 5a       	subi	r30, 0xAD	; 173
    13de:	fe 4f       	sbci	r31, 0xFE	; 254
    13e0:	80 81       	ld	r24, Z
    13e2:	91 81       	ldd	r25, Z+1	; 0x01
    13e4:	80 64       	ori	r24, 0x40	; 64
    13e6:	91 83       	std	Z+1, r25	; 0x01
    13e8:	80 83       	st	Z, r24
					}
					// Exec
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED))
    13ea:	ec 89       	ldd	r30, Y+20	; 0x14
    13ec:	fd 89       	ldd	r31, Y+21	; 0x15
    13ee:	80 81       	ld	r24, Z
    13f0:	80 ff       	sbrs	r24, 0
    13f2:	ca c3       	rjmp	.+1940   	; 0x1b88 <Isb_App_Exec+0xe1a>
					{
// -> TODO:
//						if (Isb_Obj[Obj_0].Data[0] == 0)
//						{
							// Pin einlesen
							switch (Isb_App_DigIn[AppIndex].Cfg0 & ISB_APP_DIGIN_CFG0_SOURCE_MASK)
    13f4:	a8 8d       	ldd	r26, Y+24	; 0x18
    13f6:	b9 8d       	ldd	r27, Y+25	; 0x19
    13f8:	8c 91       	ld	r24, X
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	83 70       	andi	r24, 0x03	; 3
    13fe:	90 70       	andi	r25, 0x00	; 0
    1400:	89 2b       	or	r24, r25
    1402:	09 f0       	breq	.+2      	; 0x1406 <Isb_App_Exec+0x698>
    1404:	51 c0       	rjmp	.+162    	; 0x14a8 <Isb_App_Exec+0x73a>
							{
								#if ISB_APP_DIGIN_SOURCE_FEATURE_PIN == TRUE
									case ISB_APP_DIGIN_CFG0_SOURCE_STD:
										;
										uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
    1406:	bb 89       	ldd	r27, Y+19	; 0x13
    1408:	8b 2f       	mov	r24, r27
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	88 73       	andi	r24, 0x38	; 56
    140e:	90 70       	andi	r25, 0x00	; 0
    1410:	e3 e0       	ldi	r30, 0x03	; 3
    1412:	95 95       	asr	r25
    1414:	87 95       	ror	r24
    1416:	ea 95       	dec	r30
    1418:	e1 f7       	brne	.-8      	; 0x1412 <Isb_App_Exec+0x6a4>
    141a:	98 2f       	mov	r25, r24
										uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
										if (Port != 0)
    141c:	88 23       	and	r24, r24
    141e:	09 f4       	brne	.+2      	; 0x1422 <Isb_App_Exec+0x6b4>
    1420:	43 c0       	rjmp	.+134    	; 0x14a8 <Isb_App_Exec+0x73a>
							{
								#if ISB_APP_DIGIN_SOURCE_FEATURE_PIN == TRUE
									case ISB_APP_DIGIN_CFG0_SOURCE_STD:
										;
										uint8_t Port = (Pin0 & ISB_APP_DIGIN_PIN0_MASKPORT) >> 3;
										uint8_t Pin = Pin0 & ISB_APP_DIGIN_PIN0_MASKPIN;
    1422:	2b 2f       	mov	r18, r27
    1424:	27 70       	andi	r18, 0x07	; 7
										if (Port != 0)
										{
											if (bit_is_clear(Isb_App_DigIn[AppIndex].Cfg0, ISB_APP_DIGIN_CFG0_PIN0_INVERTED))
    1426:	e9 81       	ldd	r30, Y+1	; 0x01
    1428:	fa 81       	ldd	r31, Y+2	; 0x02
    142a:	73 e0       	ldi	r23, 0x03	; 3
    142c:	ee 0f       	add	r30, r30
    142e:	ff 1f       	adc	r31, r31
    1430:	7a 95       	dec	r23
    1432:	e1 f7       	brne	.-8      	; 0x142c <Isb_App_Exec+0x6be>
    1434:	ed 58       	subi	r30, 0x8D	; 141
    1436:	fe 4f       	sbci	r31, 0xFE	; 254
    1438:	80 81       	ld	r24, Z
    143a:	e9 2f       	mov	r30, r25
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	82 fd       	sbrc	r24, 2
    1440:	1a c0       	rjmp	.+52     	; 0x1476 <Isb_App_Exec+0x708>
	#endif



	uint8_t Lib_Pin_Get(const uint8_t aPort, const uint8_t aPin) {
		return (*(PINx[aPort]) >> aPin) & 1;
    1442:	ee 0f       	add	r30, r30
    1444:	ff 1f       	adc	r31, r31
    1446:	ec 5d       	subi	r30, 0xDC	; 220
    1448:	fe 4f       	sbci	r31, 0xFE	; 254
    144a:	01 90       	ld	r0, Z+
    144c:	f0 81       	ld	r31, Z
    144e:	e0 2d       	mov	r30, r0
    1450:	80 81       	ld	r24, Z
											{
												if (Lib_Pin_Get(Port, Pin) != 0)
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 c0       	rjmp	.+4      	; 0x145a <Isb_App_Exec+0x6ec>
    1456:	95 95       	asr	r25
    1458:	87 95       	ror	r24
    145a:	2a 95       	dec	r18
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <Isb_App_Exec+0x6e8>
    145e:	80 ff       	sbrs	r24, 0
    1460:	05 c0       	rjmp	.+10     	; 0x146c <Isb_App_Exec+0x6fe>
												{
													Isb_App_DigIn[AppIndex].Value = 1;
    1462:	21 e0       	ldi	r18, 0x01	; 1
    1464:	e8 8d       	ldd	r30, Y+24	; 0x18
    1466:	f9 8d       	ldd	r31, Y+25	; 0x19
    1468:	24 83       	std	Z+4, r18	; 0x04
    146a:	1e c0       	rjmp	.+60     	; 0x14a8 <Isb_App_Exec+0x73a>
												}
												else
												{
													Isb_App_DigIn[AppIndex].Value = 0;
    146c:	a8 8d       	ldd	r26, Y+24	; 0x18
    146e:	b9 8d       	ldd	r27, Y+25	; 0x19
    1470:	14 96       	adiw	r26, 0x04	; 4
    1472:	1c 92       	st	X, r1
    1474:	19 c0       	rjmp	.+50     	; 0x14a8 <Isb_App_Exec+0x73a>
    1476:	ee 0f       	add	r30, r30
    1478:	ff 1f       	adc	r31, r31
    147a:	ec 5d       	subi	r30, 0xDC	; 220
    147c:	fe 4f       	sbci	r31, 0xFE	; 254
    147e:	01 90       	ld	r0, Z+
    1480:	f0 81       	ld	r31, Z
    1482:	e0 2d       	mov	r30, r0
    1484:	80 81       	ld	r24, Z
												}
											}
											else
											{
												if (Lib_Pin_Get(Port, Pin) != 0)
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 c0       	rjmp	.+4      	; 0x148e <Isb_App_Exec+0x720>
    148a:	95 95       	asr	r25
    148c:	87 95       	ror	r24
    148e:	2a 95       	dec	r18
    1490:	e2 f7       	brpl	.-8      	; 0x148a <Isb_App_Exec+0x71c>
    1492:	80 ff       	sbrs	r24, 0
    1494:	04 c0       	rjmp	.+8      	; 0x149e <Isb_App_Exec+0x730>
												{
													Isb_App_DigIn[AppIndex].Value = 0;
    1496:	e8 8d       	ldd	r30, Y+24	; 0x18
    1498:	f9 8d       	ldd	r31, Y+25	; 0x19
    149a:	14 82       	std	Z+4, r1	; 0x04
    149c:	05 c0       	rjmp	.+10     	; 0x14a8 <Isb_App_Exec+0x73a>
												}
												else
												{
													Isb_App_DigIn[AppIndex].Value = 1;
    149e:	e1 e0       	ldi	r30, 0x01	; 1
    14a0:	a8 8d       	ldd	r26, Y+24	; 0x18
    14a2:	b9 8d       	ldd	r27, Y+25	; 0x19
    14a4:	14 96       	adiw	r26, 0x04	; 4
    14a6:	ec 93       	st	X, r30
										Isb_App_DigIn[AppIndex].Value = 0;
										break;
								#endif /* ISB_APP_DIGIN_SOURCE_FEATURE_SLAVE_USART1 == TRUE */
							}
							// Pin auswerten
							if (Isb_App_DigIn[AppIndex].Value != 0)
    14a8:	a8 8d       	ldd	r26, Y+24	; 0x18
    14aa:	b9 8d       	ldd	r27, Y+25	; 0x19
    14ac:	14 96       	adiw	r26, 0x04	; 4
    14ae:	8c 91       	ld	r24, X
    14b0:	14 97       	sbiw	r26, 0x04	; 4
    14b2:	88 23       	and	r24, r24
    14b4:	61 f1       	breq	.+88     	; 0x150e <Isb_App_Exec+0x7a0>
							{
								// Global
								Isb_App_DigIn[AppIndex].CountHigh++;
    14b6:	17 96       	adiw	r26, 0x07	; 7
    14b8:	8c 91       	ld	r24, X
    14ba:	17 97       	sbiw	r26, 0x07	; 7
    14bc:	8f 5f       	subi	r24, 0xFF	; 255
    14be:	17 96       	adiw	r26, 0x07	; 7
    14c0:	8c 93       	st	X, r24
    14c2:	17 97       	sbiw	r26, 0x07	; 7
								// Event "High" > 40ms
								if (Isb_App_DigIn[AppIndex].CountHigh == 4)
    14c4:	84 30       	cpi	r24, 0x04	; 4
    14c6:	31 f4       	brne	.+12     	; 0x14d4 <Isb_App_Exec+0x766>
								{
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGH);
    14c8:	15 96       	adiw	r26, 0x05	; 5
    14ca:	8c 91       	ld	r24, X
    14cc:	15 97       	sbiw	r26, 0x05	; 5
    14ce:	80 61       	ori	r24, 0x10	; 16
    14d0:	15 96       	adiw	r26, 0x05	; 5
    14d2:	8c 93       	st	X, r24
								}
								// Event "High Long" > 400ms
								if (Isb_App_DigIn[AppIndex].CountHigh == 40)
    14d4:	e8 8d       	ldd	r30, Y+24	; 0x18
    14d6:	f9 8d       	ldd	r31, Y+25	; 0x19
    14d8:	87 81       	ldd	r24, Z+7	; 0x07
    14da:	88 32       	cpi	r24, 0x28	; 40
    14dc:	19 f4       	brne	.+6      	; 0x14e4 <Isb_App_Exec+0x776>
								{
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHLONG);
    14de:	85 81       	ldd	r24, Z+5	; 0x05
    14e0:	80 64       	ori	r24, 0x40	; 64
    14e2:	85 83       	std	Z+5, r24	; 0x05
								}
								// Event "High Repeat"
								if (Isb_App_DigIn[AppIndex].CountHigh == 100)
    14e4:	a8 8d       	ldd	r26, Y+24	; 0x18
    14e6:	b9 8d       	ldd	r27, Y+25	; 0x19
    14e8:	17 96       	adiw	r26, 0x07	; 7
    14ea:	8c 91       	ld	r24, X
    14ec:	17 97       	sbiw	r26, 0x07	; 7
    14ee:	84 36       	cpi	r24, 0x64	; 100
    14f0:	51 f4       	brne	.+20     	; 0x1506 <Isb_App_Exec+0x798>
								{
									Isb_App_DigIn[AppIndex].CountHigh = 90;
    14f2:	8a e5       	ldi	r24, 0x5A	; 90
    14f4:	17 96       	adiw	r26, 0x07	; 7
    14f6:	8c 93       	st	X, r24
    14f8:	17 97       	sbiw	r26, 0x07	; 7
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHREPEAT);
    14fa:	15 96       	adiw	r26, 0x05	; 5
    14fc:	8c 91       	ld	r24, X
    14fe:	15 97       	sbiw	r26, 0x05	; 5
    1500:	80 68       	ori	r24, 0x80	; 128
    1502:	15 96       	adiw	r26, 0x05	; 5
    1504:	8c 93       	st	X, r24
//-									{
//-										Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOWSHORT);
//-									}
//-								}
								// Global
								Isb_App_DigIn[AppIndex].CountLow = 0;
    1506:	e8 8d       	ldd	r30, Y+24	; 0x18
    1508:	f9 8d       	ldd	r31, Y+25	; 0x19
    150a:	16 82       	std	Z+6, r1	; 0x06
    150c:	1f c0       	rjmp	.+62     	; 0x154c <Isb_App_Exec+0x7de>
							}
							else
							{
								// Global
								Isb_App_DigIn[AppIndex].CountLow++;
    150e:	a8 8d       	ldd	r26, Y+24	; 0x18
    1510:	b9 8d       	ldd	r27, Y+25	; 0x19
    1512:	16 96       	adiw	r26, 0x06	; 6
    1514:	8c 91       	ld	r24, X
    1516:	16 97       	sbiw	r26, 0x06	; 6
    1518:	8f 5f       	subi	r24, 0xFF	; 255
    151a:	16 96       	adiw	r26, 0x06	; 6
    151c:	8c 93       	st	X, r24
    151e:	16 97       	sbiw	r26, 0x06	; 6
								// Event "Low" > 40ms
								if (Isb_App_DigIn[AppIndex].CountLow == 4)
    1520:	84 30       	cpi	r24, 0x04	; 4
    1522:	31 f4       	brne	.+12     	; 0x1530 <Isb_App_Exec+0x7c2>
								{
									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOW);
    1524:	15 96       	adiw	r26, 0x05	; 5
    1526:	8c 91       	ld	r24, X
    1528:	15 97       	sbiw	r26, 0x05	; 5
    152a:	81 60       	ori	r24, 0x01	; 1
    152c:	15 96       	adiw	r26, 0x05	; 5
    152e:	8c 93       	st	X, r24
//-								{
//-									Isb_App_DigIn[AppIndex].CountLow = 90;
//-									Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_LOWREPEAT);
//-								}
								// Event "High Short" = 40-400ms
								if (Isb_App_DigIn[AppIndex].CountHigh != 0)
    1530:	e8 8d       	ldd	r30, Y+24	; 0x18
    1532:	f9 8d       	ldd	r31, Y+25	; 0x19
    1534:	87 81       	ldd	r24, Z+7	; 0x07
    1536:	88 23       	and	r24, r24
    1538:	29 f0       	breq	.+10     	; 0x1544 <Isb_App_Exec+0x7d6>
								{
									if (Isb_App_DigIn[AppIndex].CountHigh < 40)
    153a:	88 32       	cpi	r24, 0x28	; 40
    153c:	18 f4       	brcc	.+6      	; 0x1544 <Isb_App_Exec+0x7d6>
									{
										Isb_App_DigIn[AppIndex].Event |= (1 << ISB_APP_DIGIN_EVENT_HIGHSHORT);
    153e:	85 81       	ldd	r24, Z+5	; 0x05
    1540:	80 62       	ori	r24, 0x20	; 32
    1542:	85 83       	std	Z+5, r24	; 0x05
									}
								}
								// Global
								Isb_App_DigIn[AppIndex].CountHigh = 0;
    1544:	a8 8d       	ldd	r26, Y+24	; 0x18
    1546:	b9 8d       	ldd	r27, Y+25	; 0x19
    1548:	17 96       	adiw	r26, 0x07	; 7
    154a:	1c 92       	st	X, r1
							}
							// Event auswerten
							switch (Isb_App_DigIn[AppIndex].Cfg1 & ISB_APP_DIGIN_CFG1_MODE_MASK)
    154c:	e8 8d       	ldd	r30, Y+24	; 0x18
    154e:	f9 8d       	ldd	r31, Y+25	; 0x19
    1550:	81 81       	ldd	r24, Z+1	; 0x01
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	c9 01       	movw	r24, r18
    1558:	87 70       	andi	r24, 0x07	; 7
    155a:	90 70       	andi	r25, 0x00	; 0
    155c:	89 2b       	or	r24, r25
    155e:	09 f0       	breq	.+2      	; 0x1562 <Isb_App_Exec+0x7f4>
    1560:	13 c3       	rjmp	.+1574   	; 0x1b88 <Isb_App_Exec+0xe1a>
							{
								#if ISB_APP_DIGIN_MODE_FEATURE_SWITCH == TRUE
									case ISB_APP_DIGIN_CFG1_MODE_SWITCH:
										// Betriebsart = Schaltsensor/Störmeldeeingang
										switch (Isb_App_DigIn[AppIndex].Cfg1 & ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_MASK)
    1562:	c9 01       	movw	r24, r18
    1564:	88 73       	andi	r24, 0x38	; 56
    1566:	90 70       	andi	r25, 0x00	; 0
    1568:	88 30       	cpi	r24, 0x08	; 8
    156a:	91 05       	cpc	r25, r1
    156c:	09 f4       	brne	.+2      	; 0x1570 <Isb_App_Exec+0x802>
    156e:	ca c0       	rjmp	.+404    	; 0x1704 <Isb_App_Exec+0x996>
    1570:	89 30       	cpi	r24, 0x09	; 9
    1572:	91 05       	cpc	r25, r1
    1574:	1c f4       	brge	.+6      	; 0x157c <Isb_App_Exec+0x80e>
    1576:	89 2b       	or	r24, r25
    1578:	49 f0       	breq	.+18     	; 0x158c <Isb_App_Exec+0x81e>
    157a:	06 c3       	rjmp	.+1548   	; 0x1b88 <Isb_App_Exec+0xe1a>
    157c:	80 31       	cpi	r24, 0x10	; 16
    157e:	91 05       	cpc	r25, r1
    1580:	09 f4       	brne	.+2      	; 0x1584 <Isb_App_Exec+0x816>
    1582:	79 c1       	rjmp	.+754    	; 0x1876 <Isb_App_Exec+0xb08>
    1584:	48 97       	sbiw	r24, 0x18	; 24
    1586:	09 f0       	breq	.+2      	; 0x158a <Isb_App_Exec+0x81c>
    1588:	ff c2       	rjmp	.+1534   	; 0x1b88 <Isb_App_Exec+0xe1a>
    158a:	31 c2       	rjmp	.+1122   	; 0x19ee <Isb_App_Exec+0xc80>
										{
											#if ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_1SOUKLOR == TRUE
												case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_0:
													// 1 Schaltobjekt - Ohne Unterscheidung Kurz/Lang - Ohne Repeat
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGH))
    158c:	a9 81       	ldd	r26, Y+1	; 0x01
    158e:	ba 81       	ldd	r27, Y+2	; 0x02
    1590:	43 e0       	ldi	r20, 0x03	; 3
    1592:	aa 0f       	add	r26, r26
    1594:	bb 1f       	adc	r27, r27
    1596:	4a 95       	dec	r20
    1598:	e1 f7       	brne	.-8      	; 0x1592 <Isb_App_Exec+0x824>
    159a:	a8 58       	subi	r26, 0x88	; 136
    159c:	be 4f       	sbci	r27, 0xFE	; 254
    159e:	8c 91       	ld	r24, X
    15a0:	84 ff       	sbrs	r24, 4
    15a2:	55 c0       	rjmp	.+170    	; 0x164e <Isb_App_Exec+0x8e0>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1)
    15a4:	e8 8d       	ldd	r30, Y+24	; 0x18
    15a6:	f9 8d       	ldd	r31, Y+25	; 0x19
    15a8:	82 81       	ldd	r24, Z+2	; 0x02
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	8f 70       	andi	r24, 0x0F	; 15
    15ae:	90 70       	andi	r25, 0x00	; 0
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	91 05       	cpc	r25, r1
    15b4:	89 f4       	brne	.+34     	; 0x15d8 <Isb_App_Exec+0x86a>
														{
															// Aus
															Isb_Obj[Obj_1].Data[0] = 0;
    15b6:	f9 89       	ldd	r31, Y+17	; 0x11
    15b8:	8f 2f       	mov	r24, r31
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	fc 01       	movw	r30, r24
    15be:	33 e0       	ldi	r19, 0x03	; 3
    15c0:	ee 0f       	add	r30, r30
    15c2:	ff 1f       	adc	r31, r31
    15c4:	3a 95       	dec	r19
    15c6:	e1 f7       	brne	.-8      	; 0x15c0 <Isb_App_Exec+0x852>
    15c8:	e8 0f       	add	r30, r24
    15ca:	f9 1f       	adc	r31, r25
    15cc:	e5 52       	subi	r30, 0x25	; 37
    15ce:	fe 4f       	sbci	r31, 0xFE	; 254
    15d0:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    15d2:	21 e0       	ldi	r18, 0x01	; 1
    15d4:	20 87       	std	Z+8, r18	; 0x08
    15d6:	36 c0       	rjmp	.+108    	; 0x1644 <Isb_App_Exec+0x8d6>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2)
    15d8:	82 30       	cpi	r24, 0x02	; 2
    15da:	91 05       	cpc	r25, r1
    15dc:	89 f4       	brne	.+34     	; 0x1600 <Isb_App_Exec+0x892>
														{
															// Ein
															Isb_Obj[Obj_1].Data[0] = 1;
    15de:	39 89       	ldd	r19, Y+17	; 0x11
    15e0:	83 2f       	mov	r24, r19
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	fc 01       	movw	r30, r24
    15e6:	23 e0       	ldi	r18, 0x03	; 3
    15e8:	ee 0f       	add	r30, r30
    15ea:	ff 1f       	adc	r31, r31
    15ec:	2a 95       	dec	r18
    15ee:	e1 f7       	brne	.-8      	; 0x15e8 <Isb_App_Exec+0x87a>
    15f0:	e8 0f       	add	r30, r24
    15f2:	f9 1f       	adc	r31, r25
    15f4:	e5 52       	subi	r30, 0x25	; 37
    15f6:	fe 4f       	sbci	r31, 0xFE	; 254
    15f8:	41 e0       	ldi	r20, 0x01	; 1
    15fa:	43 83       	std	Z+3, r20	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    15fc:	40 87       	std	Z+8, r20	; 0x08
    15fe:	22 c0       	rjmp	.+68     	; 0x1644 <Isb_App_Exec+0x8d6>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3)
    1600:	03 97       	sbiw	r24, 0x03	; 3
    1602:	01 f5       	brne	.+64     	; 0x1644 <Isb_App_Exec+0x8d6>
														{
															// Um
															if (Isb_Obj[Obj_1].Data[0] == 0)
    1604:	59 89       	ldd	r21, Y+17	; 0x11
    1606:	25 2f       	mov	r18, r21
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	f9 01       	movw	r30, r18
    160c:	03 e0       	ldi	r16, 0x03	; 3
    160e:	ee 0f       	add	r30, r30
    1610:	ff 1f       	adc	r31, r31
    1612:	0a 95       	dec	r16
    1614:	e1 f7       	brne	.-8      	; 0x160e <Isb_App_Exec+0x8a0>
    1616:	e2 0f       	add	r30, r18
    1618:	f3 1f       	adc	r31, r19
    161a:	e5 52       	subi	r30, 0x25	; 37
    161c:	fe 4f       	sbci	r31, 0xFE	; 254
    161e:	83 81       	ldd	r24, Z+3	; 0x03
    1620:	88 23       	and	r24, r24
    1622:	19 f4       	brne	.+6      	; 0x162a <Isb_App_Exec+0x8bc>
															{
																Isb_Obj[Obj_1].Data[0] = 1;
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	83 83       	std	Z+3, r24	; 0x03
    1628:	01 c0       	rjmp	.+2      	; 0x162c <Isb_App_Exec+0x8be>
															}
															else
															{
																Isb_Obj[Obj_1].Data[0] = 0;
    162a:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_1].IsChanged = TRUE;
    162c:	f9 01       	movw	r30, r18
    162e:	13 e0       	ldi	r17, 0x03	; 3
    1630:	ee 0f       	add	r30, r30
    1632:	ff 1f       	adc	r31, r31
    1634:	1a 95       	dec	r17
    1636:	e1 f7       	brne	.-8      	; 0x1630 <Isb_App_Exec+0x8c2>
    1638:	e2 0f       	add	r30, r18
    163a:	f3 1f       	adc	r31, r19
    163c:	e5 52       	subi	r30, 0x25	; 37
    163e:	fe 4f       	sbci	r31, 0xFE	; 254
    1640:	91 e0       	ldi	r25, 0x01	; 1
    1642:	90 87       	std	Z+8, r25	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGH);
    1644:	e8 8d       	ldd	r30, Y+24	; 0x18
    1646:	f9 8d       	ldd	r31, Y+25	; 0x19
    1648:	85 81       	ldd	r24, Z+5	; 0x05
    164a:	8f 7e       	andi	r24, 0xEF	; 239
    164c:	85 83       	std	Z+5, r24	; 0x05
													}
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_LOW))
    164e:	8c 91       	ld	r24, X
    1650:	80 ff       	sbrs	r24, 0
    1652:	9a c2       	rjmp	.+1332   	; 0x1b88 <Isb_App_Exec+0xe1a>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1)
    1654:	a8 8d       	ldd	r26, Y+24	; 0x18
    1656:	b9 8d       	ldd	r27, Y+25	; 0x19
    1658:	12 96       	adiw	r26, 0x02	; 2
    165a:	8c 91       	ld	r24, X
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	80 7f       	andi	r24, 0xF0	; 240
    1660:	90 70       	andi	r25, 0x00	; 0
    1662:	80 31       	cpi	r24, 0x10	; 16
    1664:	91 05       	cpc	r25, r1
    1666:	89 f4       	brne	.+34     	; 0x168a <Isb_App_Exec+0x91c>
														{
															// Aus
															Isb_Obj[Obj_1].Data[0] = 0;
    1668:	b9 89       	ldd	r27, Y+17	; 0x11
    166a:	8b 2f       	mov	r24, r27
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	fc 01       	movw	r30, r24
    1670:	a3 e0       	ldi	r26, 0x03	; 3
    1672:	ee 0f       	add	r30, r30
    1674:	ff 1f       	adc	r31, r31
    1676:	aa 95       	dec	r26
    1678:	e1 f7       	brne	.-8      	; 0x1672 <Isb_App_Exec+0x904>
    167a:	e8 0f       	add	r30, r24
    167c:	f9 1f       	adc	r31, r25
    167e:	e5 52       	subi	r30, 0x25	; 37
    1680:	fe 4f       	sbci	r31, 0xFE	; 254
    1682:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1684:	21 e0       	ldi	r18, 0x01	; 1
    1686:	20 87       	std	Z+8, r18	; 0x08
    1688:	36 c0       	rjmp	.+108    	; 0x16f6 <Isb_App_Exec+0x988>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2)
    168a:	80 32       	cpi	r24, 0x20	; 32
    168c:	91 05       	cpc	r25, r1
    168e:	89 f4       	brne	.+34     	; 0x16b2 <Isb_App_Exec+0x944>
														{
															// Ein
															Isb_Obj[Obj_1].Data[0] = 1;
    1690:	39 89       	ldd	r19, Y+17	; 0x11
    1692:	83 2f       	mov	r24, r19
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	fc 01       	movw	r30, r24
    1698:	73 e0       	ldi	r23, 0x03	; 3
    169a:	ee 0f       	add	r30, r30
    169c:	ff 1f       	adc	r31, r31
    169e:	7a 95       	dec	r23
    16a0:	e1 f7       	brne	.-8      	; 0x169a <Isb_App_Exec+0x92c>
    16a2:	e8 0f       	add	r30, r24
    16a4:	f9 1f       	adc	r31, r25
    16a6:	e5 52       	subi	r30, 0x25	; 37
    16a8:	fe 4f       	sbci	r31, 0xFE	; 254
    16aa:	41 e0       	ldi	r20, 0x01	; 1
    16ac:	43 83       	std	Z+3, r20	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    16ae:	40 87       	std	Z+8, r20	; 0x08
    16b0:	22 c0       	rjmp	.+68     	; 0x16f6 <Isb_App_Exec+0x988>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3)
    16b2:	c0 97       	sbiw	r24, 0x30	; 48
    16b4:	01 f5       	brne	.+64     	; 0x16f6 <Isb_App_Exec+0x988>
														{
															// Um
															if (Isb_Obj[Obj_1].Data[0] == 0)
    16b6:	59 89       	ldd	r21, Y+17	; 0x11
    16b8:	25 2f       	mov	r18, r21
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	f9 01       	movw	r30, r18
    16be:	63 e0       	ldi	r22, 0x03	; 3
    16c0:	ee 0f       	add	r30, r30
    16c2:	ff 1f       	adc	r31, r31
    16c4:	6a 95       	dec	r22
    16c6:	e1 f7       	brne	.-8      	; 0x16c0 <Isb_App_Exec+0x952>
    16c8:	e2 0f       	add	r30, r18
    16ca:	f3 1f       	adc	r31, r19
    16cc:	e5 52       	subi	r30, 0x25	; 37
    16ce:	fe 4f       	sbci	r31, 0xFE	; 254
    16d0:	83 81       	ldd	r24, Z+3	; 0x03
    16d2:	88 23       	and	r24, r24
    16d4:	19 f4       	brne	.+6      	; 0x16dc <Isb_App_Exec+0x96e>
															{
																Isb_Obj[Obj_1].Data[0] = 1;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	83 83       	std	Z+3, r24	; 0x03
    16da:	01 c0       	rjmp	.+2      	; 0x16de <Isb_App_Exec+0x970>
															}
															else
															{
																Isb_Obj[Obj_1].Data[0] = 0;
    16dc:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_1].IsChanged = TRUE;
    16de:	f9 01       	movw	r30, r18
    16e0:	53 e0       	ldi	r21, 0x03	; 3
    16e2:	ee 0f       	add	r30, r30
    16e4:	ff 1f       	adc	r31, r31
    16e6:	5a 95       	dec	r21
    16e8:	e1 f7       	brne	.-8      	; 0x16e2 <Isb_App_Exec+0x974>
    16ea:	e2 0f       	add	r30, r18
    16ec:	f3 1f       	adc	r31, r19
    16ee:	e5 52       	subi	r30, 0x25	; 37
    16f0:	fe 4f       	sbci	r31, 0xFE	; 254
    16f2:	91 e0       	ldi	r25, 0x01	; 1
    16f4:	90 87       	std	Z+8, r25	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_LOW);
    16f6:	a8 8d       	ldd	r26, Y+24	; 0x18
    16f8:	b9 8d       	ldd	r27, Y+25	; 0x19
    16fa:	15 96       	adiw	r26, 0x05	; 5
    16fc:	8c 91       	ld	r24, X
    16fe:	15 97       	sbiw	r26, 0x05	; 5
    1700:	8e 7f       	andi	r24, 0xFE	; 254
    1702:	40 c2       	rjmp	.+1152   	; 0x1b84 <Isb_App_Exec+0xe16>
													break;
											#endif /* ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_1SOUKLOR == TRUE */
											#if ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_1SOUKLMR == TRUE
												case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_1:
													// 1 Schaltobjekt - Ohne Unterscheidung Kurz/Lang - Mit Repeat
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGH))
    1704:	a9 81       	ldd	r26, Y+1	; 0x01
    1706:	ba 81       	ldd	r27, Y+2	; 0x02
    1708:	43 e0       	ldi	r20, 0x03	; 3
    170a:	aa 0f       	add	r26, r26
    170c:	bb 1f       	adc	r27, r27
    170e:	4a 95       	dec	r20
    1710:	e1 f7       	brne	.-8      	; 0x170a <Isb_App_Exec+0x99c>
    1712:	a8 58       	subi	r26, 0x88	; 136
    1714:	be 4f       	sbci	r27, 0xFE	; 254
    1716:	8c 91       	ld	r24, X
    1718:	84 ff       	sbrs	r24, 4
    171a:	55 c0       	rjmp	.+170    	; 0x17c6 <Isb_App_Exec+0xa58>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1)
    171c:	e8 8d       	ldd	r30, Y+24	; 0x18
    171e:	f9 8d       	ldd	r31, Y+25	; 0x19
    1720:	82 81       	ldd	r24, Z+2	; 0x02
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	8f 70       	andi	r24, 0x0F	; 15
    1726:	90 70       	andi	r25, 0x00	; 0
    1728:	81 30       	cpi	r24, 0x01	; 1
    172a:	91 05       	cpc	r25, r1
    172c:	89 f4       	brne	.+34     	; 0x1750 <Isb_App_Exec+0x9e2>
														{
															// Aus
															Isb_Obj[Obj_1].Data[0] = 0;
    172e:	f9 89       	ldd	r31, Y+17	; 0x11
    1730:	8f 2f       	mov	r24, r31
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	fc 01       	movw	r30, r24
    1736:	33 e0       	ldi	r19, 0x03	; 3
    1738:	ee 0f       	add	r30, r30
    173a:	ff 1f       	adc	r31, r31
    173c:	3a 95       	dec	r19
    173e:	e1 f7       	brne	.-8      	; 0x1738 <Isb_App_Exec+0x9ca>
    1740:	e8 0f       	add	r30, r24
    1742:	f9 1f       	adc	r31, r25
    1744:	e5 52       	subi	r30, 0x25	; 37
    1746:	fe 4f       	sbci	r31, 0xFE	; 254
    1748:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    174a:	21 e0       	ldi	r18, 0x01	; 1
    174c:	20 87       	std	Z+8, r18	; 0x08
    174e:	36 c0       	rjmp	.+108    	; 0x17bc <Isb_App_Exec+0xa4e>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2)
    1750:	82 30       	cpi	r24, 0x02	; 2
    1752:	91 05       	cpc	r25, r1
    1754:	89 f4       	brne	.+34     	; 0x1778 <Isb_App_Exec+0xa0a>
														{
															// Ein
															Isb_Obj[Obj_1].Data[0] = 1;
    1756:	39 89       	ldd	r19, Y+17	; 0x11
    1758:	83 2f       	mov	r24, r19
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	fc 01       	movw	r30, r24
    175e:	23 e0       	ldi	r18, 0x03	; 3
    1760:	ee 0f       	add	r30, r30
    1762:	ff 1f       	adc	r31, r31
    1764:	2a 95       	dec	r18
    1766:	e1 f7       	brne	.-8      	; 0x1760 <Isb_App_Exec+0x9f2>
    1768:	e8 0f       	add	r30, r24
    176a:	f9 1f       	adc	r31, r25
    176c:	e5 52       	subi	r30, 0x25	; 37
    176e:	fe 4f       	sbci	r31, 0xFE	; 254
    1770:	41 e0       	ldi	r20, 0x01	; 1
    1772:	43 83       	std	Z+3, r20	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1774:	40 87       	std	Z+8, r20	; 0x08
    1776:	22 c0       	rjmp	.+68     	; 0x17bc <Isb_App_Exec+0xa4e>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3)
    1778:	03 97       	sbiw	r24, 0x03	; 3
    177a:	01 f5       	brne	.+64     	; 0x17bc <Isb_App_Exec+0xa4e>
														{
															// Um
															if (Isb_Obj[Obj_1].Data[0] == 0)
    177c:	59 89       	ldd	r21, Y+17	; 0x11
    177e:	25 2f       	mov	r18, r21
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	f9 01       	movw	r30, r18
    1784:	03 e0       	ldi	r16, 0x03	; 3
    1786:	ee 0f       	add	r30, r30
    1788:	ff 1f       	adc	r31, r31
    178a:	0a 95       	dec	r16
    178c:	e1 f7       	brne	.-8      	; 0x1786 <Isb_App_Exec+0xa18>
    178e:	e2 0f       	add	r30, r18
    1790:	f3 1f       	adc	r31, r19
    1792:	e5 52       	subi	r30, 0x25	; 37
    1794:	fe 4f       	sbci	r31, 0xFE	; 254
    1796:	83 81       	ldd	r24, Z+3	; 0x03
    1798:	88 23       	and	r24, r24
    179a:	19 f4       	brne	.+6      	; 0x17a2 <Isb_App_Exec+0xa34>
															{
																Isb_Obj[Obj_1].Data[0] = 1;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	83 83       	std	Z+3, r24	; 0x03
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <Isb_App_Exec+0xa36>
															}
															else
															{
																Isb_Obj[Obj_1].Data[0] = 0;
    17a2:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_1].IsChanged = TRUE;
    17a4:	f9 01       	movw	r30, r18
    17a6:	13 e0       	ldi	r17, 0x03	; 3
    17a8:	ee 0f       	add	r30, r30
    17aa:	ff 1f       	adc	r31, r31
    17ac:	1a 95       	dec	r17
    17ae:	e1 f7       	brne	.-8      	; 0x17a8 <Isb_App_Exec+0xa3a>
    17b0:	e2 0f       	add	r30, r18
    17b2:	f3 1f       	adc	r31, r19
    17b4:	e5 52       	subi	r30, 0x25	; 37
    17b6:	fe 4f       	sbci	r31, 0xFE	; 254
    17b8:	91 e0       	ldi	r25, 0x01	; 1
    17ba:	90 87       	std	Z+8, r25	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGH);
    17bc:	e8 8d       	ldd	r30, Y+24	; 0x18
    17be:	f9 8d       	ldd	r31, Y+25	; 0x19
    17c0:	85 81       	ldd	r24, Z+5	; 0x05
    17c2:	8f 7e       	andi	r24, 0xEF	; 239
    17c4:	85 83       	std	Z+5, r24	; 0x05
													}
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_LOW))
    17c6:	8c 91       	ld	r24, X
    17c8:	80 ff       	sbrs	r24, 0
    17ca:	d3 c1       	rjmp	.+934    	; 0x1b72 <Isb_App_Exec+0xe04>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1)
    17cc:	e8 8d       	ldd	r30, Y+24	; 0x18
    17ce:	f9 8d       	ldd	r31, Y+25	; 0x19
    17d0:	82 81       	ldd	r24, Z+2	; 0x02
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	80 7f       	andi	r24, 0xF0	; 240
    17d6:	90 70       	andi	r25, 0x00	; 0
    17d8:	80 31       	cpi	r24, 0x10	; 16
    17da:	91 05       	cpc	r25, r1
    17dc:	89 f4       	brne	.+34     	; 0x1800 <Isb_App_Exec+0xa92>
														{
															// Aus
															Isb_Obj[Obj_1].Data[0] = 0;
    17de:	f9 89       	ldd	r31, Y+17	; 0x11
    17e0:	8f 2f       	mov	r24, r31
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	fc 01       	movw	r30, r24
    17e6:	73 e0       	ldi	r23, 0x03	; 3
    17e8:	ee 0f       	add	r30, r30
    17ea:	ff 1f       	adc	r31, r31
    17ec:	7a 95       	dec	r23
    17ee:	e1 f7       	brne	.-8      	; 0x17e8 <Isb_App_Exec+0xa7a>
    17f0:	e8 0f       	add	r30, r24
    17f2:	f9 1f       	adc	r31, r25
    17f4:	e5 52       	subi	r30, 0x25	; 37
    17f6:	fe 4f       	sbci	r31, 0xFE	; 254
    17f8:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    17fa:	21 e0       	ldi	r18, 0x01	; 1
    17fc:	20 87       	std	Z+8, r18	; 0x08
    17fe:	36 c0       	rjmp	.+108    	; 0x186c <Isb_App_Exec+0xafe>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2)
    1800:	80 32       	cpi	r24, 0x20	; 32
    1802:	91 05       	cpc	r25, r1
    1804:	89 f4       	brne	.+34     	; 0x1828 <Isb_App_Exec+0xaba>
														{
															// Ein
															Isb_Obj[Obj_1].Data[0] = 1;
    1806:	39 89       	ldd	r19, Y+17	; 0x11
    1808:	83 2f       	mov	r24, r19
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	fc 01       	movw	r30, r24
    180e:	63 e0       	ldi	r22, 0x03	; 3
    1810:	ee 0f       	add	r30, r30
    1812:	ff 1f       	adc	r31, r31
    1814:	6a 95       	dec	r22
    1816:	e1 f7       	brne	.-8      	; 0x1810 <Isb_App_Exec+0xaa2>
    1818:	e8 0f       	add	r30, r24
    181a:	f9 1f       	adc	r31, r25
    181c:	e5 52       	subi	r30, 0x25	; 37
    181e:	fe 4f       	sbci	r31, 0xFE	; 254
    1820:	41 e0       	ldi	r20, 0x01	; 1
    1822:	43 83       	std	Z+3, r20	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1824:	40 87       	std	Z+8, r20	; 0x08
    1826:	22 c0       	rjmp	.+68     	; 0x186c <Isb_App_Exec+0xafe>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3)
    1828:	c0 97       	sbiw	r24, 0x30	; 48
    182a:	01 f5       	brne	.+64     	; 0x186c <Isb_App_Exec+0xafe>
														{
															// Um
															if (Isb_Obj[Obj_1].Data[0] == 0)
    182c:	59 89       	ldd	r21, Y+17	; 0x11
    182e:	25 2f       	mov	r18, r21
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	f9 01       	movw	r30, r18
    1834:	53 e0       	ldi	r21, 0x03	; 3
    1836:	ee 0f       	add	r30, r30
    1838:	ff 1f       	adc	r31, r31
    183a:	5a 95       	dec	r21
    183c:	e1 f7       	brne	.-8      	; 0x1836 <Isb_App_Exec+0xac8>
    183e:	e2 0f       	add	r30, r18
    1840:	f3 1f       	adc	r31, r19
    1842:	e5 52       	subi	r30, 0x25	; 37
    1844:	fe 4f       	sbci	r31, 0xFE	; 254
    1846:	83 81       	ldd	r24, Z+3	; 0x03
    1848:	88 23       	and	r24, r24
    184a:	19 f4       	brne	.+6      	; 0x1852 <Isb_App_Exec+0xae4>
															{
																Isb_Obj[Obj_1].Data[0] = 1;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	83 83       	std	Z+3, r24	; 0x03
    1850:	01 c0       	rjmp	.+2      	; 0x1854 <Isb_App_Exec+0xae6>
															}
															else
															{
																Isb_Obj[Obj_1].Data[0] = 0;
    1852:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1854:	f9 01       	movw	r30, r18
    1856:	43 e0       	ldi	r20, 0x03	; 3
    1858:	ee 0f       	add	r30, r30
    185a:	ff 1f       	adc	r31, r31
    185c:	4a 95       	dec	r20
    185e:	e1 f7       	brne	.-8      	; 0x1858 <Isb_App_Exec+0xaea>
    1860:	e2 0f       	add	r30, r18
    1862:	f3 1f       	adc	r31, r19
    1864:	e5 52       	subi	r30, 0x25	; 37
    1866:	fe 4f       	sbci	r31, 0xFE	; 254
    1868:	91 e0       	ldi	r25, 0x01	; 1
    186a:	90 87       	std	Z+8, r25	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_LOW);
    186c:	e8 8d       	ldd	r30, Y+24	; 0x18
    186e:	f9 8d       	ldd	r31, Y+25	; 0x19
    1870:	85 81       	ldd	r24, Z+5	; 0x05
    1872:	8e 7f       	andi	r24, 0xFE	; 254
    1874:	7d c1       	rjmp	.+762    	; 0x1b70 <Isb_App_Exec+0xe02>
													break;
											#endif /* ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_1SOUKLMR == TRUE */
											#if ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_2SMUKLOR == TRUE
												case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_2:
													// 2 Schaltobjekte - Mit Unterscheidung Kurz/Lang - Ohne Repeat
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHSHORT))
    1876:	a9 81       	ldd	r26, Y+1	; 0x01
    1878:	ba 81       	ldd	r27, Y+2	; 0x02
    187a:	33 e0       	ldi	r19, 0x03	; 3
    187c:	aa 0f       	add	r26, r26
    187e:	bb 1f       	adc	r27, r27
    1880:	3a 95       	dec	r19
    1882:	e1 f7       	brne	.-8      	; 0x187c <Isb_App_Exec+0xb0e>
    1884:	a8 58       	subi	r26, 0x88	; 136
    1886:	be 4f       	sbci	r27, 0xFE	; 254
    1888:	8c 91       	ld	r24, X
    188a:	85 ff       	sbrs	r24, 5
    188c:	55 c0       	rjmp	.+170    	; 0x1938 <Isb_App_Exec+0xbca>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1)
    188e:	e8 8d       	ldd	r30, Y+24	; 0x18
    1890:	f9 8d       	ldd	r31, Y+25	; 0x19
    1892:	82 81       	ldd	r24, Z+2	; 0x02
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	8f 70       	andi	r24, 0x0F	; 15
    1898:	90 70       	andi	r25, 0x00	; 0
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	91 05       	cpc	r25, r1
    189e:	89 f4       	brne	.+34     	; 0x18c2 <Isb_App_Exec+0xb54>
														{
															// Aus
															Isb_Obj[Obj_1].Data[0] = 0;
    18a0:	f9 89       	ldd	r31, Y+17	; 0x11
    18a2:	8f 2f       	mov	r24, r31
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	fc 01       	movw	r30, r24
    18a8:	23 e0       	ldi	r18, 0x03	; 3
    18aa:	ee 0f       	add	r30, r30
    18ac:	ff 1f       	adc	r31, r31
    18ae:	2a 95       	dec	r18
    18b0:	e1 f7       	brne	.-8      	; 0x18aa <Isb_App_Exec+0xb3c>
    18b2:	e8 0f       	add	r30, r24
    18b4:	f9 1f       	adc	r31, r25
    18b6:	e5 52       	subi	r30, 0x25	; 37
    18b8:	fe 4f       	sbci	r31, 0xFE	; 254
    18ba:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    18bc:	21 e0       	ldi	r18, 0x01	; 1
    18be:	20 87       	std	Z+8, r18	; 0x08
    18c0:	36 c0       	rjmp	.+108    	; 0x192e <Isb_App_Exec+0xbc0>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2)
    18c2:	82 30       	cpi	r24, 0x02	; 2
    18c4:	91 05       	cpc	r25, r1
    18c6:	89 f4       	brne	.+34     	; 0x18ea <Isb_App_Exec+0xb7c>
														{
															// Ein
															Isb_Obj[Obj_1].Data[0] = 1;
    18c8:	39 89       	ldd	r19, Y+17	; 0x11
    18ca:	83 2f       	mov	r24, r19
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	fc 01       	movw	r30, r24
    18d0:	03 e0       	ldi	r16, 0x03	; 3
    18d2:	ee 0f       	add	r30, r30
    18d4:	ff 1f       	adc	r31, r31
    18d6:	0a 95       	dec	r16
    18d8:	e1 f7       	brne	.-8      	; 0x18d2 <Isb_App_Exec+0xb64>
    18da:	e8 0f       	add	r30, r24
    18dc:	f9 1f       	adc	r31, r25
    18de:	e5 52       	subi	r30, 0x25	; 37
    18e0:	fe 4f       	sbci	r31, 0xFE	; 254
    18e2:	41 e0       	ldi	r20, 0x01	; 1
    18e4:	43 83       	std	Z+3, r20	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    18e6:	40 87       	std	Z+8, r20	; 0x08
    18e8:	22 c0       	rjmp	.+68     	; 0x192e <Isb_App_Exec+0xbc0>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3)
    18ea:	03 97       	sbiw	r24, 0x03	; 3
    18ec:	01 f5       	brne	.+64     	; 0x192e <Isb_App_Exec+0xbc0>
														{
															// Um
															if (Isb_Obj[Obj_1].Data[0] == 0)
    18ee:	59 89       	ldd	r21, Y+17	; 0x11
    18f0:	25 2f       	mov	r18, r21
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	f9 01       	movw	r30, r18
    18f6:	13 e0       	ldi	r17, 0x03	; 3
    18f8:	ee 0f       	add	r30, r30
    18fa:	ff 1f       	adc	r31, r31
    18fc:	1a 95       	dec	r17
    18fe:	e1 f7       	brne	.-8      	; 0x18f8 <Isb_App_Exec+0xb8a>
    1900:	e2 0f       	add	r30, r18
    1902:	f3 1f       	adc	r31, r19
    1904:	e5 52       	subi	r30, 0x25	; 37
    1906:	fe 4f       	sbci	r31, 0xFE	; 254
    1908:	83 81       	ldd	r24, Z+3	; 0x03
    190a:	88 23       	and	r24, r24
    190c:	19 f4       	brne	.+6      	; 0x1914 <Isb_App_Exec+0xba6>
															{
																Isb_Obj[Obj_1].Data[0] = 1;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	83 83       	std	Z+3, r24	; 0x03
    1912:	01 c0       	rjmp	.+2      	; 0x1916 <Isb_App_Exec+0xba8>
															}
															else
															{
																Isb_Obj[Obj_1].Data[0] = 0;
    1914:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1916:	f9 01       	movw	r30, r18
    1918:	73 e0       	ldi	r23, 0x03	; 3
    191a:	ee 0f       	add	r30, r30
    191c:	ff 1f       	adc	r31, r31
    191e:	7a 95       	dec	r23
    1920:	e1 f7       	brne	.-8      	; 0x191a <Isb_App_Exec+0xbac>
    1922:	e2 0f       	add	r30, r18
    1924:	f3 1f       	adc	r31, r19
    1926:	e5 52       	subi	r30, 0x25	; 37
    1928:	fe 4f       	sbci	r31, 0xFE	; 254
    192a:	91 e0       	ldi	r25, 0x01	; 1
    192c:	90 87       	std	Z+8, r25	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHSHORT);
    192e:	e8 8d       	ldd	r30, Y+24	; 0x18
    1930:	f9 8d       	ldd	r31, Y+25	; 0x19
    1932:	85 81       	ldd	r24, Z+5	; 0x05
    1934:	8f 7d       	andi	r24, 0xDF	; 223
    1936:	85 83       	std	Z+5, r24	; 0x05
													}
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHLONG))
    1938:	8c 91       	ld	r24, X
    193a:	86 ff       	sbrs	r24, 6
    193c:	25 c1       	rjmp	.+586    	; 0x1b88 <Isb_App_Exec+0xe1a>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1)
    193e:	a8 8d       	ldd	r26, Y+24	; 0x18
    1940:	b9 8d       	ldd	r27, Y+25	; 0x19
    1942:	12 96       	adiw	r26, 0x02	; 2
    1944:	8c 91       	ld	r24, X
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	80 7f       	andi	r24, 0xF0	; 240
    194a:	90 70       	andi	r25, 0x00	; 0
    194c:	80 31       	cpi	r24, 0x10	; 16
    194e:	91 05       	cpc	r25, r1
    1950:	89 f4       	brne	.+34     	; 0x1974 <Isb_App_Exec+0xc06>
														{
															// Aus
															Isb_Obj[Obj_2].Data[0] = 0;
    1952:	b8 89       	ldd	r27, Y+16	; 0x10
    1954:	8b 2f       	mov	r24, r27
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	fc 01       	movw	r30, r24
    195a:	63 e0       	ldi	r22, 0x03	; 3
    195c:	ee 0f       	add	r30, r30
    195e:	ff 1f       	adc	r31, r31
    1960:	6a 95       	dec	r22
    1962:	e1 f7       	brne	.-8      	; 0x195c <Isb_App_Exec+0xbee>
    1964:	e8 0f       	add	r30, r24
    1966:	f9 1f       	adc	r31, r25
    1968:	e5 52       	subi	r30, 0x25	; 37
    196a:	fe 4f       	sbci	r31, 0xFE	; 254
    196c:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_2].IsChanged = TRUE;
    196e:	21 e0       	ldi	r18, 0x01	; 1
    1970:	20 87       	std	Z+8, r18	; 0x08
    1972:	36 c0       	rjmp	.+108    	; 0x19e0 <Isb_App_Exec+0xc72>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2)
    1974:	80 32       	cpi	r24, 0x20	; 32
    1976:	91 05       	cpc	r25, r1
    1978:	89 f4       	brne	.+34     	; 0x199c <Isb_App_Exec+0xc2e>
														{
															// Ein
															Isb_Obj[Obj_2].Data[0] = 1;
    197a:	38 89       	ldd	r19, Y+16	; 0x10
    197c:	83 2f       	mov	r24, r19
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	fc 01       	movw	r30, r24
    1982:	53 e0       	ldi	r21, 0x03	; 3
    1984:	ee 0f       	add	r30, r30
    1986:	ff 1f       	adc	r31, r31
    1988:	5a 95       	dec	r21
    198a:	e1 f7       	brne	.-8      	; 0x1984 <Isb_App_Exec+0xc16>
    198c:	e8 0f       	add	r30, r24
    198e:	f9 1f       	adc	r31, r25
    1990:	e5 52       	subi	r30, 0x25	; 37
    1992:	fe 4f       	sbci	r31, 0xFE	; 254
    1994:	41 e0       	ldi	r20, 0x01	; 1
    1996:	43 83       	std	Z+3, r20	; 0x03
															Isb_Obj[Obj_2].IsChanged = TRUE;
    1998:	40 87       	std	Z+8, r20	; 0x08
    199a:	22 c0       	rjmp	.+68     	; 0x19e0 <Isb_App_Exec+0xc72>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3)
    199c:	c0 97       	sbiw	r24, 0x30	; 48
    199e:	01 f5       	brne	.+64     	; 0x19e0 <Isb_App_Exec+0xc72>
														{
															// Um
															if (Isb_Obj[Obj_2].Data[0] == 0)
    19a0:	58 89       	ldd	r21, Y+16	; 0x10
    19a2:	25 2f       	mov	r18, r21
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	f9 01       	movw	r30, r18
    19a8:	43 e0       	ldi	r20, 0x03	; 3
    19aa:	ee 0f       	add	r30, r30
    19ac:	ff 1f       	adc	r31, r31
    19ae:	4a 95       	dec	r20
    19b0:	e1 f7       	brne	.-8      	; 0x19aa <Isb_App_Exec+0xc3c>
    19b2:	e2 0f       	add	r30, r18
    19b4:	f3 1f       	adc	r31, r19
    19b6:	e5 52       	subi	r30, 0x25	; 37
    19b8:	fe 4f       	sbci	r31, 0xFE	; 254
    19ba:	83 81       	ldd	r24, Z+3	; 0x03
    19bc:	88 23       	and	r24, r24
    19be:	19 f4       	brne	.+6      	; 0x19c6 <Isb_App_Exec+0xc58>
															{
																Isb_Obj[Obj_2].Data[0] = 1;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	83 83       	std	Z+3, r24	; 0x03
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <Isb_App_Exec+0xc5a>
															}
															else
															{
																Isb_Obj[Obj_2].Data[0] = 0;
    19c6:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_2].IsChanged = TRUE;
    19c8:	f9 01       	movw	r30, r18
    19ca:	93 e0       	ldi	r25, 0x03	; 3
    19cc:	ee 0f       	add	r30, r30
    19ce:	ff 1f       	adc	r31, r31
    19d0:	9a 95       	dec	r25
    19d2:	e1 f7       	brne	.-8      	; 0x19cc <Isb_App_Exec+0xc5e>
    19d4:	e2 0f       	add	r30, r18
    19d6:	f3 1f       	adc	r31, r19
    19d8:	e5 52       	subi	r30, 0x25	; 37
    19da:	fe 4f       	sbci	r31, 0xFE	; 254
    19dc:	91 e0       	ldi	r25, 0x01	; 1
    19de:	90 87       	std	Z+8, r25	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHLONG);
    19e0:	a8 8d       	ldd	r26, Y+24	; 0x18
    19e2:	b9 8d       	ldd	r27, Y+25	; 0x19
    19e4:	15 96       	adiw	r26, 0x05	; 5
    19e6:	8c 91       	ld	r24, X
    19e8:	15 97       	sbiw	r26, 0x05	; 5
    19ea:	8f 7b       	andi	r24, 0xBF	; 191
    19ec:	cb c0       	rjmp	.+406    	; 0x1b84 <Isb_App_Exec+0xe16>
													break;
											#endif /* ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_2SMUKLOR == TRUE */
											#if ISB_APP_DIGIN_MODE_FEATURE_SWITCH_FUNCTION_2SMUKLMR == TRUE
												case ISB_APP_DIGIN_CFG1_OPERATINGFUNCTION_3:
													// 2 Schaltobjekte - Mit Unterscheidung Kurz/Lang - Mit Repeat
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHSHORT))
    19ee:	a9 81       	ldd	r26, Y+1	; 0x01
    19f0:	ba 81       	ldd	r27, Y+2	; 0x02
    19f2:	83 e0       	ldi	r24, 0x03	; 3
    19f4:	aa 0f       	add	r26, r26
    19f6:	bb 1f       	adc	r27, r27
    19f8:	8a 95       	dec	r24
    19fa:	e1 f7       	brne	.-8      	; 0x19f4 <Isb_App_Exec+0xc86>
    19fc:	a8 58       	subi	r26, 0x88	; 136
    19fe:	be 4f       	sbci	r27, 0xFE	; 254
    1a00:	8c 91       	ld	r24, X
    1a02:	85 ff       	sbrs	r24, 5
    1a04:	5e c0       	rjmp	.+188    	; 0x1ac2 <Isb_App_Exec+0xd54>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_1)
    1a06:	e8 8d       	ldd	r30, Y+24	; 0x18
    1a08:	f9 8d       	ldd	r31, Y+25	; 0x19
    1a0a:	82 81       	ldd	r24, Z+2	; 0x02
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	8f 70       	andi	r24, 0x0F	; 15
    1a10:	90 70       	andi	r25, 0x00	; 0
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	91 05       	cpc	r25, r1
    1a16:	79 f4       	brne	.+30     	; 0x1a36 <Isb_App_Exec+0xcc8>
														{
															// Aus
															Isb_Obj[Obj_1].Data[0] = 0;
    1a18:	f9 89       	ldd	r31, Y+17	; 0x11
    1a1a:	8f 2f       	mov	r24, r31
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	fc 01       	movw	r30, r24
    1a20:	03 e0       	ldi	r16, 0x03	; 3
    1a22:	ee 0f       	add	r30, r30
    1a24:	ff 1f       	adc	r31, r31
    1a26:	0a 95       	dec	r16
    1a28:	e1 f7       	brne	.-8      	; 0x1a22 <Isb_App_Exec+0xcb4>
    1a2a:	e8 0f       	add	r30, r24
    1a2c:	f9 1f       	adc	r31, r25
    1a2e:	e5 52       	subi	r30, 0x25	; 37
    1a30:	fe 4f       	sbci	r31, 0xFE	; 254
    1a32:	13 82       	std	Z+3, r1	; 0x03
    1a34:	3f c0       	rjmp	.+126    	; 0x1ab4 <Isb_App_Exec+0xd46>
															Isb_Obj[Obj_1].IsChanged = TRUE;
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_2)
    1a36:	82 30       	cpi	r24, 0x02	; 2
    1a38:	91 05       	cpc	r25, r1
    1a3a:	89 f4       	brne	.+34     	; 0x1a5e <Isb_App_Exec+0xcf0>
														{
															// Ein
															Isb_Obj[Obj_1].Data[0] = 1;
    1a3c:	39 89       	ldd	r19, Y+17	; 0x11
    1a3e:	83 2f       	mov	r24, r19
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	fc 01       	movw	r30, r24
    1a44:	13 e0       	ldi	r17, 0x03	; 3
    1a46:	ee 0f       	add	r30, r30
    1a48:	ff 1f       	adc	r31, r31
    1a4a:	1a 95       	dec	r17
    1a4c:	e1 f7       	brne	.-8      	; 0x1a46 <Isb_App_Exec+0xcd8>
    1a4e:	e8 0f       	add	r30, r24
    1a50:	f9 1f       	adc	r31, r25
    1a52:	e5 52       	subi	r30, 0x25	; 37
    1a54:	fe 4f       	sbci	r31, 0xFE	; 254
    1a56:	41 e0       	ldi	r20, 0x01	; 1
    1a58:	43 83       	std	Z+3, r20	; 0x03
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1a5a:	40 87       	std	Z+8, r20	; 0x08
    1a5c:	2d c0       	rjmp	.+90     	; 0x1ab8 <Isb_App_Exec+0xd4a>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_A_MASK) == ISB_APP_DIGIN_CFG2_ACTION_A_3)
    1a5e:	03 97       	sbiw	r24, 0x03	; 3
    1a60:	59 f5       	brne	.+86     	; 0x1ab8 <Isb_App_Exec+0xd4a>
														{
															// Um
															if (Isb_Obj[Obj_1].Data[0] == 0)
    1a62:	89 89       	ldd	r24, Y+17	; 0x11
    1a64:	48 2f       	mov	r20, r24
    1a66:	50 e0       	ldi	r21, 0x00	; 0
    1a68:	9a 01       	movw	r18, r20
    1a6a:	73 e0       	ldi	r23, 0x03	; 3
    1a6c:	22 0f       	add	r18, r18
    1a6e:	33 1f       	adc	r19, r19
    1a70:	7a 95       	dec	r23
    1a72:	e1 f7       	brne	.-8      	; 0x1a6c <Isb_App_Exec+0xcfe>
    1a74:	f9 01       	movw	r30, r18
    1a76:	e4 0f       	add	r30, r20
    1a78:	f5 1f       	adc	r31, r21
    1a7a:	e5 52       	subi	r30, 0x25	; 37
    1a7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a7e:	83 81       	ldd	r24, Z+3	; 0x03
    1a80:	88 23       	and	r24, r24
    1a82:	41 f4       	brne	.+16     	; 0x1a94 <Isb_App_Exec+0xd26>
															{
																Isb_Obj[Obj_1].Data[0] = 1;
    1a84:	f9 01       	movw	r30, r18
    1a86:	e4 0f       	add	r30, r20
    1a88:	f5 1f       	adc	r31, r21
    1a8a:	e5 52       	subi	r30, 0x25	; 37
    1a8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a8e:	91 e0       	ldi	r25, 0x01	; 1
    1a90:	93 83       	std	Z+3, r25	; 0x03
    1a92:	06 c0       	rjmp	.+12     	; 0x1aa0 <Isb_App_Exec+0xd32>
															}
															else
															{
																Isb_Obj[Obj_1].Data[0] = 0;
    1a94:	f9 01       	movw	r30, r18
    1a96:	e4 0f       	add	r30, r20
    1a98:	f5 1f       	adc	r31, r21
    1a9a:	e5 52       	subi	r30, 0x25	; 37
    1a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a9e:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_1].IsChanged = TRUE;
    1aa0:	fa 01       	movw	r30, r20
    1aa2:	63 e0       	ldi	r22, 0x03	; 3
    1aa4:	ee 0f       	add	r30, r30
    1aa6:	ff 1f       	adc	r31, r31
    1aa8:	6a 95       	dec	r22
    1aaa:	e1 f7       	brne	.-8      	; 0x1aa4 <Isb_App_Exec+0xd36>
    1aac:	e4 0f       	add	r30, r20
    1aae:	f5 1f       	adc	r31, r21
    1ab0:	e5 52       	subi	r30, 0x25	; 37
    1ab2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ab4:	21 e0       	ldi	r18, 0x01	; 1
    1ab6:	20 87       	std	Z+8, r18	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHSHORT);
    1ab8:	e8 8d       	ldd	r30, Y+24	; 0x18
    1aba:	f9 8d       	ldd	r31, Y+25	; 0x19
    1abc:	85 81       	ldd	r24, Z+5	; 0x05
    1abe:	8f 7d       	andi	r24, 0xDF	; 223
    1ac0:	85 83       	std	Z+5, r24	; 0x05
													}
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHLONG))
    1ac2:	8c 91       	ld	r24, X
    1ac4:	86 ff       	sbrs	r24, 6
    1ac6:	55 c0       	rjmp	.+170    	; 0x1b72 <Isb_App_Exec+0xe04>
													{
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_1)
    1ac8:	e8 8d       	ldd	r30, Y+24	; 0x18
    1aca:	f9 8d       	ldd	r31, Y+25	; 0x19
    1acc:	82 81       	ldd	r24, Z+2	; 0x02
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	80 7f       	andi	r24, 0xF0	; 240
    1ad2:	90 70       	andi	r25, 0x00	; 0
    1ad4:	80 31       	cpi	r24, 0x10	; 16
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	89 f4       	brne	.+34     	; 0x1afc <Isb_App_Exec+0xd8e>
														{
															// Aus
															Isb_Obj[Obj_2].Data[0] = 0;
    1ada:	f8 89       	ldd	r31, Y+16	; 0x10
    1adc:	8f 2f       	mov	r24, r31
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	33 e0       	ldi	r19, 0x03	; 3
    1ae4:	ee 0f       	add	r30, r30
    1ae6:	ff 1f       	adc	r31, r31
    1ae8:	3a 95       	dec	r19
    1aea:	e1 f7       	brne	.-8      	; 0x1ae4 <Isb_App_Exec+0xd76>
    1aec:	e8 0f       	add	r30, r24
    1aee:	f9 1f       	adc	r31, r25
    1af0:	e5 52       	subi	r30, 0x25	; 37
    1af2:	fe 4f       	sbci	r31, 0xFE	; 254
    1af4:	13 82       	std	Z+3, r1	; 0x03
															Isb_Obj[Obj_2].IsChanged = TRUE;
    1af6:	21 e0       	ldi	r18, 0x01	; 1
    1af8:	20 87       	std	Z+8, r18	; 0x08
    1afa:	36 c0       	rjmp	.+108    	; 0x1b68 <Isb_App_Exec+0xdfa>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_2)
    1afc:	80 32       	cpi	r24, 0x20	; 32
    1afe:	91 05       	cpc	r25, r1
    1b00:	89 f4       	brne	.+34     	; 0x1b24 <Isb_App_Exec+0xdb6>
														{
															// Ein
															Isb_Obj[Obj_2].Data[0] = 1;
    1b02:	38 89       	ldd	r19, Y+16	; 0x10
    1b04:	83 2f       	mov	r24, r19
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	fc 01       	movw	r30, r24
    1b0a:	23 e0       	ldi	r18, 0x03	; 3
    1b0c:	ee 0f       	add	r30, r30
    1b0e:	ff 1f       	adc	r31, r31
    1b10:	2a 95       	dec	r18
    1b12:	e1 f7       	brne	.-8      	; 0x1b0c <Isb_App_Exec+0xd9e>
    1b14:	e8 0f       	add	r30, r24
    1b16:	f9 1f       	adc	r31, r25
    1b18:	e5 52       	subi	r30, 0x25	; 37
    1b1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b1c:	41 e0       	ldi	r20, 0x01	; 1
    1b1e:	43 83       	std	Z+3, r20	; 0x03
															Isb_Obj[Obj_2].IsChanged = TRUE;
    1b20:	40 87       	std	Z+8, r20	; 0x08
    1b22:	22 c0       	rjmp	.+68     	; 0x1b68 <Isb_App_Exec+0xdfa>
														}
														if ((Isb_App_DigIn[AppIndex].Cfg2 & ISB_APP_DIGIN_CFG2_ACTION_B_MASK) == ISB_APP_DIGIN_CFG2_ACTION_B_3)
    1b24:	c0 97       	sbiw	r24, 0x30	; 48
    1b26:	01 f5       	brne	.+64     	; 0x1b68 <Isb_App_Exec+0xdfa>
														{
															// Um
															if (Isb_Obj[Obj_2].Data[0] == 0)
    1b28:	58 89       	ldd	r21, Y+16	; 0x10
    1b2a:	25 2f       	mov	r18, r21
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	f9 01       	movw	r30, r18
    1b30:	83 e0       	ldi	r24, 0x03	; 3
    1b32:	ee 0f       	add	r30, r30
    1b34:	ff 1f       	adc	r31, r31
    1b36:	8a 95       	dec	r24
    1b38:	e1 f7       	brne	.-8      	; 0x1b32 <Isb_App_Exec+0xdc4>
    1b3a:	e2 0f       	add	r30, r18
    1b3c:	f3 1f       	adc	r31, r19
    1b3e:	e5 52       	subi	r30, 0x25	; 37
    1b40:	fe 4f       	sbci	r31, 0xFE	; 254
    1b42:	83 81       	ldd	r24, Z+3	; 0x03
    1b44:	88 23       	and	r24, r24
    1b46:	19 f4       	brne	.+6      	; 0x1b4e <Isb_App_Exec+0xde0>
															{
																Isb_Obj[Obj_2].Data[0] = 1;
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	83 83       	std	Z+3, r24	; 0x03
    1b4c:	01 c0       	rjmp	.+2      	; 0x1b50 <Isb_App_Exec+0xde2>
															}
															else
															{
																Isb_Obj[Obj_2].Data[0] = 0;
    1b4e:	13 82       	std	Z+3, r1	; 0x03
															}
															Isb_Obj[Obj_2].IsChanged = TRUE;
    1b50:	f9 01       	movw	r30, r18
    1b52:	03 e0       	ldi	r16, 0x03	; 3
    1b54:	ee 0f       	add	r30, r30
    1b56:	ff 1f       	adc	r31, r31
    1b58:	0a 95       	dec	r16
    1b5a:	e1 f7       	brne	.-8      	; 0x1b54 <Isb_App_Exec+0xde6>
    1b5c:	e2 0f       	add	r30, r18
    1b5e:	f3 1f       	adc	r31, r19
    1b60:	e5 52       	subi	r30, 0x25	; 37
    1b62:	fe 4f       	sbci	r31, 0xFE	; 254
    1b64:	91 e0       	ldi	r25, 0x01	; 1
    1b66:	90 87       	std	Z+8, r25	; 0x08
														}
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHLONG);
    1b68:	e8 8d       	ldd	r30, Y+24	; 0x18
    1b6a:	f9 8d       	ldd	r31, Y+25	; 0x19
    1b6c:	85 81       	ldd	r24, Z+5	; 0x05
    1b6e:	8f 7b       	andi	r24, 0xBF	; 191
    1b70:	85 83       	std	Z+5, r24	; 0x05
													}
													if (bit_is_set(Isb_App_DigIn[AppIndex].Event, ISB_APP_DIGIN_EVENT_HIGHREPEAT))
    1b72:	8c 91       	ld	r24, X
    1b74:	87 ff       	sbrs	r24, 7
    1b76:	08 c0       	rjmp	.+16     	; 0x1b88 <Isb_App_Exec+0xe1a>
													{
// TODO: REPEAT
														Isb_App_DigIn[AppIndex].Event &= ~(1<<ISB_APP_DIGIN_EVENT_HIGHREPEAT);
    1b78:	a8 8d       	ldd	r26, Y+24	; 0x18
    1b7a:	b9 8d       	ldd	r27, Y+25	; 0x19
    1b7c:	15 96       	adiw	r26, 0x05	; 5
    1b7e:	8c 91       	ld	r24, X
    1b80:	15 97       	sbiw	r26, 0x05	; 5
    1b82:	8f 77       	andi	r24, 0x7F	; 127
    1b84:	15 96       	adiw	r26, 0x05	; 5
    1b86:	8c 93       	st	X, r24
    1b88:	e9 81       	ldd	r30, Y+1	; 0x01
    1b8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b8c:	31 96       	adiw	r30, 0x01	; 1
    1b8e:	fa 83       	std	Y+2, r31	; 0x02
    1b90:	e9 83       	std	Y+1, r30	; 0x01
    1b92:	28 8d       	ldd	r18, Y+24	; 0x18
    1b94:	39 8d       	ldd	r19, Y+25	; 0x19
    1b96:	28 5f       	subi	r18, 0xF8	; 248
    1b98:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9a:	39 8f       	std	Y+25, r19	; 0x19
    1b9c:	28 8f       	std	Y+24, r18	; 0x18
		#endif /* ISB_APP_CLOCK_MAX */

		#if defined(ISB_APP_DIGIN_MAX)
			if (bit_is_set(Isb_App_DigIn_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
			{
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGIN_MAX; AppIndex++)
    1b9e:	38 97       	sbiw	r30, 0x08	; 8
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <Isb_App_Exec+0xe36>
    1ba2:	0f c9       	rjmp	.-3554   	; 0xdc2 <Isb_App_Exec+0x54>
								#endif /* ISB_APP_DIGIN_MODE_FEATURE_COUNTER == TRUE */
							}
//						}
					}
				}
				Isb_App_DigIn_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    1ba4:	80 91 4b 01 	lds	r24, 0x014B
    1ba8:	8e 7f       	andi	r24, 0xFE	; 254
    1baa:	80 93 4b 01 	sts	0x014B, r24
			}
		#endif /* ISB_APP_DIGIN_MAX */

		#if defined(ISB_APP_DIGOUT_MAX)
			if (bit_is_set(Isb_App_DigOut_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
    1bae:	80 91 4c 01 	lds	r24, 0x014C
    1bb2:	80 ff       	sbrs	r24, 0
    1bb4:	9c c1       	rjmp	.+824    	; 0x1eee <Isb_App_Exec+0x1180>
    1bb6:	80 91 47 01 	lds	r24, 0x0147
    1bba:	28 2e       	mov	r2, r24
    1bbc:	33 24       	eor	r3, r3
    1bbe:	13 eb       	ldi	r17, 0xB3	; 179
    1bc0:	61 2e       	mov	r6, r17
    1bc2:	11 e0       	ldi	r17, 0x01	; 1
    1bc4:	71 2e       	mov	r7, r17
    1bc6:	88 24       	eor	r8, r8
    1bc8:	99 24       	eor	r9, r9
    1bca:	98 2d       	mov	r25, r8
			{
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGOUT_MAX; AppIndex++)
				{
					uint8_t Ch = pgm_read_byte(&pgmIsb_App_DigOut_Ch_Array[AppIndex]);
    1bcc:	f4 01       	movw	r30, r8
    1bce:	e0 55       	subi	r30, 0x50	; 80
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	24 91       	lpm	r18, Z+
					uint8_t Obj_0 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_0_Array[AppIndex]);
    1bd4:	f4 01       	movw	r30, r8
    1bd6:	e8 54       	subi	r30, 0x48	; 72
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	34 91       	lpm	r19, Z+
    1bdc:	3d 83       	std	Y+5, r19	; 0x05
					#endif /* ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION == TRUE */
					#if ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE
						uint8_t Obj_3 = pgm_read_byte(&pgmIsb_App_DigOut_Obj_3_Array[AppIndex]);
					#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
					// Initialize
					if (bit_is_clear(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_INITIALIZED))
    1bde:	a2 2e       	mov	r10, r18
    1be0:	bb 24       	eor	r11, r11
    1be2:	25 01       	movw	r4, r10
    1be4:	44 0c       	add	r4, r4
    1be6:	55 1c       	adc	r5, r5
    1be8:	43 e5       	ldi	r20, 0x53	; 83
    1bea:	51 e0       	ldi	r21, 0x01	; 1
    1bec:	44 0e       	add	r4, r20
    1bee:	55 1e       	adc	r5, r21
    1bf0:	d2 01       	movw	r26, r4
    1bf2:	8c 91       	ld	r24, X
    1bf4:	86 fd       	sbrc	r24, 6
    1bf6:	fd c0       	rjmp	.+506    	; 0x1df2 <Isb_App_Exec+0x1084>
							uint16_t eepAddr_Cfg10 = 0;
							uint16_t eepAddr_Obj_3_Ctrl = 0;
							uint16_t eepAddr_Obj_3_Tov = 0;
							uint16_t eepAddr_Obj_3_InitValue = 0;
						#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
						switch (AppIndex)
    1bf8:	93 30       	cpi	r25, 0x03	; 3
    1bfa:	09 f4       	brne	.+2      	; 0x1bfe <Isb_App_Exec+0xe90>
    1bfc:	43 c0       	rjmp	.+134    	; 0x1c84 <Isb_App_Exec+0xf16>
    1bfe:	94 30       	cpi	r25, 0x04	; 4
    1c00:	28 f4       	brcc	.+10     	; 0x1c0c <Isb_App_Exec+0xe9e>
    1c02:	91 30       	cpi	r25, 0x01	; 1
    1c04:	29 f1       	breq	.+74     	; 0x1c50 <Isb_App_Exec+0xee2>
    1c06:	92 30       	cpi	r25, 0x02	; 2
    1c08:	80 f5       	brcc	.+96     	; 0x1c6a <Isb_App_Exec+0xefc>
    1c0a:	0c c0       	rjmp	.+24     	; 0x1c24 <Isb_App_Exec+0xeb6>
    1c0c:	95 30       	cpi	r25, 0x05	; 5
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <Isb_App_Exec+0xea4>
    1c10:	54 c0       	rjmp	.+168    	; 0x1cba <Isb_App_Exec+0xf4c>
    1c12:	95 30       	cpi	r25, 0x05	; 5
    1c14:	08 f4       	brcc	.+2      	; 0x1c18 <Isb_App_Exec+0xeaa>
    1c16:	43 c0       	rjmp	.+134    	; 0x1c9e <Isb_App_Exec+0xf30>
    1c18:	96 30       	cpi	r25, 0x06	; 6
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <Isb_App_Exec+0xeb0>
    1c1c:	5d c0       	rjmp	.+186    	; 0x1cd8 <Isb_App_Exec+0xf6a>
    1c1e:	97 30       	cpi	r25, 0x07	; 7
    1c20:	71 f4       	brne	.+28     	; 0x1c3e <Isb_App_Exec+0xed0>
    1c22:	69 c0       	rjmp	.+210    	; 0x1cf6 <Isb_App_Exec+0xf88>
    1c24:	a9 ed       	ldi	r26, 0xD9	; 217
    1c26:	ea 2e       	mov	r14, r26
    1c28:	f1 2c       	mov	r15, r1
    1c2a:	ea ed       	ldi	r30, 0xDA	; 218
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	f9 8f       	std	Y+25, r31	; 0x19
    1c30:	e8 8f       	std	Y+24, r30	; 0x18
    1c32:	0b ed       	ldi	r16, 0xDB	; 219
    1c34:	10 e0       	ldi	r17, 0x00	; 0
    1c36:	fc ed       	ldi	r31, 0xDC	; 220
    1c38:	cf 2e       	mov	r12, r31
    1c3a:	d1 2c       	mov	r13, r1
    1c3c:	6a c0       	rjmp	.+212    	; 0x1d12 <Isb_App_Exec+0xfa4>
    1c3e:	ee 24       	eor	r14, r14
    1c40:	ff 24       	eor	r15, r15
    1c42:	19 8e       	std	Y+25, r1	; 0x19
    1c44:	18 8e       	std	Y+24, r1	; 0x18
    1c46:	00 e0       	ldi	r16, 0x00	; 0
    1c48:	10 e0       	ldi	r17, 0x00	; 0
    1c4a:	cc 24       	eor	r12, r12
    1c4c:	dd 24       	eor	r13, r13
    1c4e:	61 c0       	rjmp	.+194    	; 0x1d12 <Isb_App_Exec+0xfa4>
    1c50:	e3 ee       	ldi	r30, 0xE3	; 227
    1c52:	ee 2e       	mov	r14, r30
    1c54:	f1 2c       	mov	r15, r1
    1c56:	44 ee       	ldi	r20, 0xE4	; 228
    1c58:	50 e0       	ldi	r21, 0x00	; 0
    1c5a:	59 8f       	std	Y+25, r21	; 0x19
    1c5c:	48 8f       	std	Y+24, r20	; 0x18
    1c5e:	05 ee       	ldi	r16, 0xE5	; 229
    1c60:	10 e0       	ldi	r17, 0x00	; 0
    1c62:	76 ee       	ldi	r23, 0xE6	; 230
    1c64:	c7 2e       	mov	r12, r23
    1c66:	d1 2c       	mov	r13, r1
    1c68:	54 c0       	rjmp	.+168    	; 0x1d12 <Isb_App_Exec+0xfa4>
										eepAddr_Cfg10 = ISB_APP_DIGOUT_1_EEADDR_CFG10;
										eepAddr_Obj_3_Ctrl = ISB_APP_DIGOUT_1_OBJ_3_EEADDR_CTRL;
										eepAddr_Obj_3_Tov = ISB_APP_DIGOUT_1_OBJ_3_EEADDR_TOV;
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_1_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
    1c6a:	6d ee       	ldi	r22, 0xED	; 237
    1c6c:	e6 2e       	mov	r14, r22
    1c6e:	f1 2c       	mov	r15, r1
    1c70:	8e ee       	ldi	r24, 0xEE	; 238
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	99 8f       	std	Y+25, r25	; 0x19
    1c76:	88 8f       	std	Y+24, r24	; 0x18
    1c78:	0f ee       	ldi	r16, 0xEF	; 239
    1c7a:	10 e0       	ldi	r17, 0x00	; 0
    1c7c:	50 ef       	ldi	r21, 0xF0	; 240
    1c7e:	c5 2e       	mov	r12, r21
    1c80:	d1 2c       	mov	r13, r1
    1c82:	47 c0       	rjmp	.+142    	; 0x1d12 <Isb_App_Exec+0xfa4>
										eepAddr_Cfg10 = ISB_APP_DIGOUT_2_EEADDR_CFG10;
										eepAddr_Obj_3_Ctrl = ISB_APP_DIGOUT_2_OBJ_3_EEADDR_CTRL;
										eepAddr_Obj_3_Tov = ISB_APP_DIGOUT_2_OBJ_3_EEADDR_TOV;
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_2_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
    1c84:	47 ef       	ldi	r20, 0xF7	; 247
    1c86:	e4 2e       	mov	r14, r20
    1c88:	f1 2c       	mov	r15, r1
    1c8a:	a8 ef       	ldi	r26, 0xF8	; 248
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	b9 8f       	std	Y+25, r27	; 0x19
    1c90:	a8 8f       	std	Y+24, r26	; 0x18
    1c92:	09 ef       	ldi	r16, 0xF9	; 249
    1c94:	10 e0       	ldi	r17, 0x00	; 0
    1c96:	3a ef       	ldi	r19, 0xFA	; 250
    1c98:	c3 2e       	mov	r12, r19
    1c9a:	d1 2c       	mov	r13, r1
    1c9c:	3a c0       	rjmp	.+116    	; 0x1d12 <Isb_App_Exec+0xfa4>
										eepAddr_Cfg10 = ISB_APP_DIGOUT_3_EEADDR_CFG10;
										eepAddr_Obj_3_Ctrl = ISB_APP_DIGOUT_3_OBJ_3_EEADDR_CTRL;
										eepAddr_Obj_3_Tov = ISB_APP_DIGOUT_3_OBJ_3_EEADDR_TOV;
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_3_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
    1c9e:	91 e0       	ldi	r25, 0x01	; 1
    1ca0:	e9 2e       	mov	r14, r25
    1ca2:	f9 2e       	mov	r15, r25
    1ca4:	e2 e0       	ldi	r30, 0x02	; 2
    1ca6:	f1 e0       	ldi	r31, 0x01	; 1
    1ca8:	f9 8f       	std	Y+25, r31	; 0x19
    1caa:	e8 8f       	std	Y+24, r30	; 0x18
    1cac:	03 e0       	ldi	r16, 0x03	; 3
    1cae:	11 e0       	ldi	r17, 0x01	; 1
    1cb0:	84 e0       	ldi	r24, 0x04	; 4
    1cb2:	c8 2e       	mov	r12, r24
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	d8 2e       	mov	r13, r24
    1cb8:	2c c0       	rjmp	.+88     	; 0x1d12 <Isb_App_Exec+0xfa4>
										eepAddr_Cfg10 = ISB_APP_DIGOUT_4_EEADDR_CFG10;
										eepAddr_Obj_3_Ctrl = ISB_APP_DIGOUT_4_OBJ_3_EEADDR_CTRL;
										eepAddr_Obj_3_Tov = ISB_APP_DIGOUT_4_OBJ_3_EEADDR_TOV;
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_4_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
    1cba:	1b e0       	ldi	r17, 0x0B	; 11
    1cbc:	e1 2e       	mov	r14, r17
    1cbe:	11 e0       	ldi	r17, 0x01	; 1
    1cc0:	f1 2e       	mov	r15, r17
    1cc2:	4c e0       	ldi	r20, 0x0C	; 12
    1cc4:	51 e0       	ldi	r21, 0x01	; 1
    1cc6:	59 8f       	std	Y+25, r21	; 0x19
    1cc8:	48 8f       	std	Y+24, r20	; 0x18
    1cca:	0d e0       	ldi	r16, 0x0D	; 13
    1ccc:	11 e0       	ldi	r17, 0x01	; 1
    1cce:	be e0       	ldi	r27, 0x0E	; 14
    1cd0:	cb 2e       	mov	r12, r27
    1cd2:	b1 e0       	ldi	r27, 0x01	; 1
    1cd4:	db 2e       	mov	r13, r27
    1cd6:	1d c0       	rjmp	.+58     	; 0x1d12 <Isb_App_Exec+0xfa4>
										eepAddr_Cfg10 = ISB_APP_DIGOUT_5_EEADDR_CFG10;
										eepAddr_Obj_3_Ctrl = ISB_APP_DIGOUT_5_OBJ_3_EEADDR_CTRL;
										eepAddr_Obj_3_Tov = ISB_APP_DIGOUT_5_OBJ_3_EEADDR_TOV;
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_5_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
    1cd8:	a5 e1       	ldi	r26, 0x15	; 21
    1cda:	ea 2e       	mov	r14, r26
    1cdc:	a1 e0       	ldi	r26, 0x01	; 1
    1cde:	fa 2e       	mov	r15, r26
    1ce0:	86 e1       	ldi	r24, 0x16	; 22
    1ce2:	91 e0       	ldi	r25, 0x01	; 1
    1ce4:	99 8f       	std	Y+25, r25	; 0x19
    1ce6:	88 8f       	std	Y+24, r24	; 0x18
    1ce8:	07 e1       	ldi	r16, 0x17	; 23
    1cea:	11 e0       	ldi	r17, 0x01	; 1
    1cec:	f8 e1       	ldi	r31, 0x18	; 24
    1cee:	cf 2e       	mov	r12, r31
    1cf0:	f1 e0       	ldi	r31, 0x01	; 1
    1cf2:	df 2e       	mov	r13, r31
    1cf4:	0e c0       	rjmp	.+28     	; 0x1d12 <Isb_App_Exec+0xfa4>
										eepAddr_Cfg10 = ISB_APP_DIGOUT_6_EEADDR_CFG10;
										eepAddr_Obj_3_Ctrl = ISB_APP_DIGOUT_6_OBJ_3_EEADDR_CTRL;
										eepAddr_Obj_3_Tov = ISB_APP_DIGOUT_6_OBJ_3_EEADDR_TOV;
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_6_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
    1cf6:	ef e1       	ldi	r30, 0x1F	; 31
    1cf8:	ee 2e       	mov	r14, r30
    1cfa:	e1 e0       	ldi	r30, 0x01	; 1
    1cfc:	fe 2e       	mov	r15, r30
    1cfe:	a0 e2       	ldi	r26, 0x20	; 32
    1d00:	b1 e0       	ldi	r27, 0x01	; 1
    1d02:	b9 8f       	std	Y+25, r27	; 0x19
    1d04:	a8 8f       	std	Y+24, r26	; 0x18
    1d06:	01 e2       	ldi	r16, 0x21	; 33
    1d08:	11 e0       	ldi	r17, 0x01	; 1
    1d0a:	72 e2       	ldi	r23, 0x22	; 34
    1d0c:	c7 2e       	mov	r12, r23
    1d0e:	71 e0       	ldi	r23, 0x01	; 1
    1d10:	d7 2e       	mov	r13, r23
										eepAddr_Obj_3_InitValue = ISB_APP_DIGOUT_15_OBJ_3_EEADDR_INITVALUE;
									#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
									break;
							#endif /* ISB_APP_DIGOUT_15 */
						}
						Isb_Ch[Ch].Ctrl = Isb_Ch_Ctrl_Get(Ch);
    1d12:	82 2f       	mov	r24, r18
    1d14:	0e 94 25 06 	call	0xc4a	; 0xc4a <Isb_Ch_Ctrl_Get.2326>
    1d18:	a8 2f       	mov	r26, r24
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	f5 01       	movw	r30, r10
    1d1e:	ee 0f       	add	r30, r30
    1d20:	ff 1f       	adc	r31, r31
    1d22:	ed 5a       	subi	r30, 0xAD	; 173
    1d24:	fe 4f       	sbci	r31, 0xFE	; 254
    1d26:	b1 83       	std	Z+1, r27	; 0x01
    1d28:	a0 83       	st	Z, r26
						if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED))
    1d2a:	f2 01       	movw	r30, r4
    1d2c:	80 81       	ld	r24, Z
    1d2e:	80 ff       	sbrs	r24, 0
    1d30:	56 c0       	rjmp	.+172    	; 0x1dde <Isb_App_Exec+0x1070>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1d32:	f9 99       	sbic	0x1f, 1	; 31
    1d34:	fe cf       	rjmp	.-4      	; 0x1d32 <Isb_App_Exec+0xfc4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1d36:	e2 0c       	add	r14, r2
    1d38:	f3 1c       	adc	r15, r3
    1d3a:	f2 bc       	out	0x22, r15	; 34
    1d3c:	e1 bc       	out	0x21, r14	; 33
#endif
    EECR |= (1 << EERE);
    1d3e:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    1d40:	80 b5       	in	r24, 0x20	; 32
						{
							Isb_App_DigOut[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg0);
    1d42:	f3 01       	movw	r30, r6
    1d44:	80 83       	st	Z, r24
							Isb_Obj[Obj_0].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Ctrl);
    1d46:	fd 81       	ldd	r31, Y+5	; 0x05
    1d48:	6f 2f       	mov	r22, r31
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1d4c:	f9 99       	sbic	0x1f, 1	; 31
    1d4e:	fe cf       	rjmp	.-4      	; 0x1d4c <Isb_App_Exec+0xfde>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1d50:	28 8d       	ldd	r18, Y+24	; 0x18
    1d52:	39 8d       	ldd	r19, Y+25	; 0x19
    1d54:	22 0d       	add	r18, r2
    1d56:	33 1d       	adc	r19, r3
    1d58:	32 bd       	out	0x22, r19	; 34
    1d5a:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
    1d5c:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    1d5e:	80 b5       	in	r24, 0x20	; 32
    1d60:	fb 01       	movw	r30, r22
    1d62:	53 e0       	ldi	r21, 0x03	; 3
    1d64:	ee 0f       	add	r30, r30
    1d66:	ff 1f       	adc	r31, r31
    1d68:	5a 95       	dec	r21
    1d6a:	e1 f7       	brne	.-8      	; 0x1d64 <Isb_App_Exec+0xff6>
    1d6c:	e6 0f       	add	r30, r22
    1d6e:	f7 1f       	adc	r31, r23
    1d70:	e5 52       	subi	r30, 0x25	; 37
    1d72:	fe 4f       	sbci	r31, 0xFE	; 254
    1d74:	80 83       	st	Z, r24
							Isb_Obj[Obj_0].Top = ISB_MSG_TOP_1BIT;
    1d76:	31 e0       	ldi	r19, 0x01	; 1
    1d78:	31 83       	std	Z+1, r19	; 0x01
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1d7a:	f9 99       	sbic	0x1f, 1	; 31
    1d7c:	fe cf       	rjmp	.-4      	; 0x1d7a <Isb_App_Exec+0x100c>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1d7e:	02 0d       	add	r16, r2
    1d80:	13 1d       	adc	r17, r3
    1d82:	12 bd       	out	0x22, r17	; 34
    1d84:	01 bd       	out	0x21, r16	; 33
#endif
    EECR |= (1 << EERE);
    1d86:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    1d88:	80 b5       	in	r24, 0x20	; 32
							Isb_Obj[Obj_0].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Tov);
    1d8a:	9b 01       	movw	r18, r22
    1d8c:	43 e0       	ldi	r20, 0x03	; 3
    1d8e:	22 0f       	add	r18, r18
    1d90:	33 1f       	adc	r19, r19
    1d92:	4a 95       	dec	r20
    1d94:	e1 f7       	brne	.-8      	; 0x1d8e <Isb_App_Exec+0x1020>
    1d96:	26 0f       	add	r18, r22
    1d98:	37 1f       	adc	r19, r23
    1d9a:	f9 01       	movw	r30, r18
    1d9c:	e5 52       	subi	r30, 0x25	; 37
    1d9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1da0:	82 83       	std	Z+2, r24	; 0x02
    1da2:	a6 01       	movw	r20, r12
    1da4:	42 0d       	add	r20, r2
    1da6:	53 1d       	adc	r21, r3
    1da8:	f9 01       	movw	r30, r18
    1daa:	e2 52       	subi	r30, 0x22	; 34
    1dac:	fe 4f       	sbci	r31, 0xFE	; 254
    1dae:	90 e0       	ldi	r25, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1db0:	f9 99       	sbic	0x1f, 1	; 31
    1db2:	fe cf       	rjmp	.-4      	; 0x1db0 <Isb_App_Exec+0x1042>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1db4:	52 bd       	out	0x22, r21	; 34
    1db6:	41 bd       	out	0x21, r20	; 33
#endif
    EECR |= (1 << EERE);
    1db8:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    1dba:	80 b5       	in	r24, 0x20	; 32
							for (uint8_t i = 0; i < 5; i++)
							{
								Isb_Obj[Obj_0].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_0_InitValue + i));
    1dbc:	81 93       	st	Z+, r24
						{
							Isb_App_DigOut[AppIndex].Cfg0 = lib_eep_fw_read_byte((uint8_t *)eepAddr_Cfg0);
							Isb_Obj[Obj_0].Ctrl = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Ctrl);
							Isb_Obj[Obj_0].Top = ISB_MSG_TOP_1BIT;
							Isb_Obj[Obj_0].Tov = lib_eep_fw_read_byte((uint8_t *)eepAddr_Obj_0_Tov);
							for (uint8_t i = 0; i < 5; i++)
    1dbe:	9f 5f       	subi	r25, 0xFF	; 255
    1dc0:	4f 5f       	subi	r20, 0xFF	; 255
    1dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc4:	95 30       	cpi	r25, 0x05	; 5
    1dc6:	a1 f7       	brne	.-24     	; 0x1db0 <Isb_App_Exec+0x1042>
							{
								Isb_Obj[Obj_0].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_0_InitValue + i));
							}
							Isb_Obj[Obj_0].IsChanged = FALSE;
    1dc8:	fb 01       	movw	r30, r22
    1dca:	23 e0       	ldi	r18, 0x03	; 3
    1dcc:	ee 0f       	add	r30, r30
    1dce:	ff 1f       	adc	r31, r31
    1dd0:	2a 95       	dec	r18
    1dd2:	e1 f7       	brne	.-8      	; 0x1dcc <Isb_App_Exec+0x105e>
    1dd4:	e6 0f       	add	r30, r22
    1dd6:	f7 1f       	adc	r31, r23
    1dd8:	e5 52       	subi	r30, 0x25	; 37
    1dda:	fe 4f       	sbci	r31, 0xFE	; 254
    1ddc:	10 86       	std	Z+8, r1	; 0x08
									Isb_Obj[Obj_3].Data[i] = lib_eep_fw_read_byte((uint8_t *)(eepAddr_Obj_3_InitValue + i));
								}
								Isb_Obj[Obj_3].IsChanged = FALSE;
							#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
						}
						Isb_Ch[Ch].Ctrl |= (1<<ISB_CH_CTRL_INITIALIZED);
    1dde:	aa 0c       	add	r10, r10
    1de0:	bb 1c       	adc	r11, r11
    1de2:	43 e5       	ldi	r20, 0x53	; 83
    1de4:	51 e0       	ldi	r21, 0x01	; 1
    1de6:	a4 0e       	add	r10, r20
    1de8:	b5 1e       	adc	r11, r21
    1dea:	a0 64       	ori	r26, 0x40	; 64
    1dec:	f5 01       	movw	r30, r10
    1dee:	b1 83       	std	Z+1, r27	; 0x01
    1df0:	a0 83       	st	Z, r26
					}
					// Exec
					if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED))
    1df2:	d2 01       	movw	r26, r4
    1df4:	8c 91       	ld	r24, X
    1df6:	80 ff       	sbrs	r24, 0
    1df8:	69 c0       	rjmp	.+210    	; 0x1ecc <Isb_App_Exec+0x115e>
					{
						uint8_t Value = Isb_App_DigOut[AppIndex].Value;
						uint8_t IsChanged = Isb_App_DigOut[AppIndex].IsChanged;
    1dfa:	f3 01       	movw	r30, r6
    1dfc:	44 81       	ldd	r20, Z+4	; 0x04
									break;
							}
							Value = Isb_App_DigOut[AppIndex].LogicValue;
							IsChanged = Isb_App_DigOut[AppIndex].LogicIsChanged;
						#else /* ISB_APP_DIGOUT_FEATURE_LOGICFUNCTION == TRUE */
							if (Value != Isb_Obj[Obj_0].Data[0])
    1dfe:	fd 81       	ldd	r31, Y+5	; 0x05
    1e00:	2f 2f       	mov	r18, r31
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	f9 01       	movw	r30, r18
    1e06:	83 e0       	ldi	r24, 0x03	; 3
    1e08:	ee 0f       	add	r30, r30
    1e0a:	ff 1f       	adc	r31, r31
    1e0c:	8a 95       	dec	r24
    1e0e:	e1 f7       	brne	.-8      	; 0x1e08 <Isb_App_Exec+0x109a>
    1e10:	e2 0f       	add	r30, r18
    1e12:	f3 1f       	adc	r31, r19
    1e14:	e5 52       	subi	r30, 0x25	; 37
    1e16:	fe 4f       	sbci	r31, 0xFE	; 254
    1e18:	93 81       	ldd	r25, Z+3	; 0x03
    1e1a:	d3 01       	movw	r26, r6
    1e1c:	13 96       	adiw	r26, 0x03	; 3
    1e1e:	8c 91       	ld	r24, X
    1e20:	89 13       	cpse	r24, r25
    1e22:	41 e0       	ldi	r20, 0x01	; 1
							{
								Value = Isb_Obj[Obj_0].Data[0];
								IsChanged = TRUE;
							}
							Isb_Obj[Obj_0].IsChanged = FALSE;
    1e24:	f9 01       	movw	r30, r18
    1e26:	03 e0       	ldi	r16, 0x03	; 3
    1e28:	ee 0f       	add	r30, r30
    1e2a:	ff 1f       	adc	r31, r31
    1e2c:	0a 95       	dec	r16
    1e2e:	e1 f7       	brne	.-8      	; 0x1e28 <Isb_App_Exec+0x10ba>
    1e30:	e2 0f       	add	r30, r18
    1e32:	f3 1f       	adc	r31, r19
    1e34:	e5 52       	subi	r30, 0x25	; 37
    1e36:	fe 4f       	sbci	r31, 0xFE	; 254
    1e38:	10 86       	std	Z+8, r1	; 0x08
									// nachgeführten Zustand einstellen
									break;
							}
						#endif /* ISB_APP_DIGOUT_FEATURE_SPECIALFUNCTION == TRUE */
						// Ausgang
						Isb_App_DigOut[AppIndex].Value = Value;
    1e3a:	f3 01       	movw	r30, r6
    1e3c:	93 83       	std	Z+3, r25	; 0x03
						Isb_App_DigOut[AppIndex].IsChanged = IsChanged;
    1e3e:	44 83       	std	Z+4, r20	; 0x04
						uint8_t Pin0 = pgm_read_byte(&pgmIsb_App_DigOut_Pin0_Array[AppIndex]);
    1e40:	f4 01       	movw	r30, r8
    1e42:	e0 54       	subi	r30, 0x40	; 64
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	64 91       	lpm	r22, Z+
						#if (ISB_APP_DIGOUT_DESTINATION_FEATURE_SSR == TRUE) | (ISB_APP_DIGOUT_FEATURE_RESULT == TRUE)
							uint8_t Pin1 = pgm_read_byte(&pgmIsb_App_DigOut_Pin1_Array[AppIndex]);
						#endif /* (ISB_APP_DIGOUT_DESTINATION_FEATURE_SSR == TRUE) | (ISB_APP_DIGOUT_FEATURE_RESULT == TRUE) */
						switch (Isb_App_DigOut[AppIndex].Cfg0 & ISB_APP_DIGOUT_CFG0_OPERATION_MASK)
    1e48:	d3 01       	movw	r26, r6
    1e4a:	8c 91       	ld	r24, X
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	87 70       	andi	r24, 0x07	; 7
    1e50:	90 70       	andi	r25, 0x00	; 0
    1e52:	89 2b       	or	r24, r25
    1e54:	d9 f5       	brne	.+118    	; 0x1ecc <Isb_App_Exec+0x115e>
						{
							#if ISB_APP_DIGOUT_DESTINATION_FEATURE_RELAIS == TRUE
								case ISB_APP_DIGOUT_CFG0_OPERATION_STD:
									if (Isb_App_DigOut[AppIndex].IsChanged == TRUE)
    1e56:	41 30       	cpi	r20, 0x01	; 1
    1e58:	c9 f5       	brne	.+114    	; 0x1ecc <Isb_App_Exec+0x115e>
									{
										if (bit_is_set(Isb_App_DigOut[AppIndex].Value, 0))
    1e5a:	a4 01       	movw	r20, r8
    1e5c:	44 0f       	add	r20, r20
    1e5e:	55 1f       	adc	r21, r21
    1e60:	44 0f       	add	r20, r20
    1e62:	55 1f       	adc	r21, r21
    1e64:	48 0d       	add	r20, r8
    1e66:	59 1d       	adc	r21, r9
    1e68:	fa 01       	movw	r30, r20
    1e6a:	ea 54       	subi	r30, 0x4A	; 74
    1e6c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e6e:	80 81       	ld	r24, Z
    1e70:	26 2f       	mov	r18, r22
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	80 ff       	sbrs	r24, 0
    1e76:	11 c0       	rjmp	.+34     	; 0x1e9a <Isb_App_Exec+0x112c>
										{
											uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
    1e78:	28 73       	andi	r18, 0x38	; 56
    1e7a:	30 70       	andi	r19, 0x00	; 0
    1e7c:	b3 e0       	ldi	r27, 0x03	; 3
    1e7e:	35 95       	asr	r19
    1e80:	27 95       	ror	r18
    1e82:	ba 95       	dec	r27
    1e84:	e1 f7       	brne	.-8      	; 0x1e7e <Isb_App_Exec+0x1110>
											uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
											if (Port != 0)
    1e86:	22 23       	and	r18, r18
    1e88:	f9 f0       	breq	.+62     	; 0x1ec8 <Isb_App_Exec+0x115a>
									if (Isb_App_DigOut[AppIndex].IsChanged == TRUE)
									{
										if (bit_is_set(Isb_App_DigOut[AppIndex].Value, 0))
										{
											uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
											uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
    1e8a:	67 70       	andi	r22, 0x07	; 7
											if (Port != 0)
											{
												if (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN0_INVERTED))
    1e8c:	fa 01       	movw	r30, r20
    1e8e:	ed 54       	subi	r30, 0x4D	; 77
    1e90:	fe 4f       	sbci	r31, 0xFE	; 254
    1e92:	80 81       	ld	r24, Z
    1e94:	84 fd       	sbrc	r24, 4
    1e96:	11 c0       	rjmp	.+34     	; 0x1eba <Isb_App_Exec+0x114c>
    1e98:	13 c0       	rjmp	.+38     	; 0x1ec0 <Isb_App_Exec+0x1152>
												}
											}
										}
										else
										{
											uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
    1e9a:	28 73       	andi	r18, 0x38	; 56
    1e9c:	30 70       	andi	r19, 0x00	; 0
    1e9e:	a3 e0       	ldi	r26, 0x03	; 3
    1ea0:	35 95       	asr	r19
    1ea2:	27 95       	ror	r18
    1ea4:	aa 95       	dec	r26
    1ea6:	e1 f7       	brne	.-8      	; 0x1ea0 <Isb_App_Exec+0x1132>
											uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
											if (Port != 0)
    1ea8:	22 23       	and	r18, r18
    1eaa:	71 f0       	breq	.+28     	; 0x1ec8 <Isb_App_Exec+0x115a>
											}
										}
										else
										{
											uint8_t Port = (Pin0 & ISB_APP_DIGOUT_PIN0_MASKPORT) >> 3;
											uint8_t Pin = Pin0 & ISB_APP_DIGOUT_PIN0_MASKPIN;
    1eac:	67 70       	andi	r22, 0x07	; 7
											if (Port != 0)
											{
												if (bit_is_clear(Isb_App_DigOut[AppIndex].Cfg0, ISB_APP_DIGOUT_CFG0_PIN0_INVERTED))
    1eae:	fa 01       	movw	r30, r20
    1eb0:	ed 54       	subi	r30, 0x4D	; 77
    1eb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1eb4:	80 81       	ld	r24, Z
    1eb6:	84 fd       	sbrc	r24, 4
    1eb8:	03 c0       	rjmp	.+6      	; 0x1ec0 <Isb_App_Exec+0x1152>
												{
													Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_HIGH);
    1eba:	82 2f       	mov	r24, r18
    1ebc:	43 e0       	ldi	r20, 0x03	; 3
    1ebe:	02 c0       	rjmp	.+4      	; 0x1ec4 <Isb_App_Exec+0x1156>
												}
												else
												{
													Lib_Pin_Set(Port, Pin, LIB_PIN_OUTPUT_LOW);
    1ec0:	82 2f       	mov	r24, r18
    1ec2:	41 e0       	ldi	r20, 0x01	; 1
    1ec4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Lib_Pin_Set>
												}
											}
										}
										Isb_App_DigOut[AppIndex].IsChanged = FALSE;
    1ec8:	f3 01       	movw	r30, r6
    1eca:	14 82       	std	Z+4, r1	; 0x04
    1ecc:	08 94       	sec
    1ece:	81 1c       	adc	r8, r1
    1ed0:	91 1c       	adc	r9, r1
    1ed2:	25 e0       	ldi	r18, 0x05	; 5
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	62 0e       	add	r6, r18
    1ed8:	73 1e       	adc	r7, r19
		#endif /* ISB_APP_DIGIN_MAX */

		#if defined(ISB_APP_DIGOUT_MAX)
			if (bit_is_set(Isb_App_DigOut_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
			{
				for (uint8_t AppIndex = 0; AppIndex < ISB_APP_DIGOUT_MAX; AppIndex++)
    1eda:	38 e0       	ldi	r19, 0x08	; 8
    1edc:	83 16       	cp	r8, r19
    1ede:	91 04       	cpc	r9, r1
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <Isb_App_Exec+0x1176>
    1ee2:	73 ce       	rjmp	.-794    	; 0x1bca <Isb_App_Exec+0xe5c>
								Isb_Obj[Obj_1].IsChanged = TRUE;
							}
						#endif /* ISB_APP_DIGOUT_FEATURE_RESULT == TRUE */
					}
				}
				Isb_App_DigOut_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    1ee4:	80 91 4c 01 	lds	r24, 0x014C
    1ee8:	8e 7f       	andi	r24, 0xFE	; 254
    1eea:	80 93 4c 01 	sts	0x014C, r24
				}
				Isb_App_HotWater_Circulation_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
			}
		#endif /* ISB_APP_HOTWATER_CIRCULATION_MAX */

	}
    1eee:	69 96       	adiw	r28, 0x19	; 25
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	de bf       	out	0x3e, r29	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	1f 91       	pop	r17
    1f00:	0f 91       	pop	r16
    1f02:	ff 90       	pop	r15
    1f04:	ef 90       	pop	r14
    1f06:	df 90       	pop	r13
    1f08:	cf 90       	pop	r12
    1f0a:	bf 90       	pop	r11
    1f0c:	af 90       	pop	r10
    1f0e:	9f 90       	pop	r9
    1f10:	8f 90       	pop	r8
    1f12:	7f 90       	pop	r7
    1f14:	6f 90       	pop	r6
    1f16:	5f 90       	pop	r5
    1f18:	4f 90       	pop	r4
    1f1a:	3f 90       	pop	r3
    1f1c:	2f 90       	pop	r2
    1f1e:	08 95       	ret

00001f20 <Isb_Obj_getDlc>:
	uint8_t Isb_Obj_getDlc(uint8_t aTop)
	{

		uint8_t Dlc = 0;

		switch (aTop)
    1f20:	85 30       	cpi	r24, 0x05	; 5
    1f22:	71 f0       	breq	.+28     	; 0x1f40 <Isb_Obj_getDlc+0x20>
    1f24:	86 30       	cpi	r24, 0x06	; 6
    1f26:	18 f4       	brcc	.+6      	; 0x1f2e <Isb_Obj_getDlc+0xe>
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	41 f4       	brne	.+16     	; 0x1f3c <Isb_Obj_getDlc+0x1c>
    1f2c:	05 c0       	rjmp	.+10     	; 0x1f38 <Isb_Obj_getDlc+0x18>
    1f2e:	86 30       	cpi	r24, 0x06	; 6
    1f30:	49 f0       	breq	.+18     	; 0x1f44 <Isb_Obj_getDlc+0x24>
    1f32:	87 30       	cpi	r24, 0x07	; 7
    1f34:	19 f4       	brne	.+6      	; 0x1f3c <Isb_Obj_getDlc+0x1c>
    1f36:	08 c0       	rjmp	.+16     	; 0x1f48 <Isb_Obj_getDlc+0x28>
    1f38:	84 e0       	ldi	r24, 0x04	; 4
    1f3a:	08 95       	ret
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	08 95       	ret
    1f40:	85 e0       	ldi	r24, 0x05	; 5
    1f42:	08 95       	ret
//			case ISB_MSG_TOP_4BIT:
//				Dlc = 4;
//				break;
			case ISB_MSG_TOP_FLOAT:
				Dlc = 5;
				break;
    1f44:	86 e0       	ldi	r24, 0x06	; 6
    1f46:	08 95       	ret
			case ISB_MSG_TOP_TIME:
				Dlc = 6;
				break;
    1f48:	88 e0       	ldi	r24, 0x08	; 8
//				break;
		}

		return Dlc;

	}
    1f4a:	08 95       	ret

00001f4c <Isb_Grp_Init>:
#ifndef ISB_GRP_C_
	#define ISB_GRP_C_



	void Isb_Grp_Init(void) {
    1f4c:	80 91 47 01 	lds	r24, 0x0147
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	26 5d       	subi	r18, 0xD6	; 214
    1f56:	3e 4f       	sbci	r19, 0xFE	; 254
    1f58:	e4 e0       	ldi	r30, 0x04	; 4
    1f5a:	f3 e0       	ldi	r31, 0x03	; 3
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1f5c:	f9 99       	sbic	0x1f, 1	; 31
    1f5e:	fe cf       	rjmp	.-4      	; 0x1f5c <Isb_Grp_Init+0x10>
    1f60:	22 50       	subi	r18, 0x02	; 2
    1f62:	30 40       	sbci	r19, 0x00	; 0
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1f64:	32 bd       	out	0x22, r19	; 34
    1f66:	21 bd       	out	0x21, r18	; 33
    1f68:	2e 5f       	subi	r18, 0xFE	; 254
    1f6a:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
    EECR |= (1 << EERE);
    1f6c:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    1f6e:	90 b5       	in	r25, 0x20	; 32
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1f70:	f9 99       	sbic	0x1f, 1	; 31
    1f72:	fe cf       	rjmp	.-4      	; 0x1f70 <Isb_Grp_Init+0x24>
    1f74:	21 50       	subi	r18, 0x01	; 1
    1f76:	30 40       	sbci	r19, 0x00	; 0
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1f78:	32 bd       	out	0x22, r19	; 34
    1f7a:	21 bd       	out	0x21, r18	; 33
    1f7c:	2f 5f       	subi	r18, 0xFF	; 255
    1f7e:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
    EECR |= (1 << EERE);
    1f80:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    1f82:	80 b5       	in	r24, 0x20	; 32
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
			Isb_Grp[GrpIndex].Id = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3));
			Isb_Grp[GrpIndex].Id |= lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 1)) << 8;
    1f84:	58 2f       	mov	r21, r24
    1f86:	40 e0       	ldi	r20, 0x00	; 0
    1f88:	89 2f       	mov	r24, r25
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	84 2b       	or	r24, r20
    1f8e:	95 2b       	or	r25, r21
    1f90:	91 83       	std	Z+1, r25	; 0x01
    1f92:	80 83       	st	Z, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1f94:	f9 99       	sbic	0x1f, 1	; 31
    1f96:	fe cf       	rjmp	.-4      	; 0x1f94 <Isb_Grp_Init+0x48>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1f98:	32 bd       	out	0x22, r19	; 34
    1f9a:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
    1f9c:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    1f9e:	80 b5       	in	r24, 0x20	; 32
			Isb_Grp[GrpIndex].Obj = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 2));
    1fa0:	82 83       	std	Z+2, r24	; 0x02
    1fa2:	2d 5f       	subi	r18, 0xFD	; 253
    1fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa6:	33 96       	adiw	r30, 0x03	; 3
	#define ISB_GRP_C_



	void Isb_Grp_Init(void) {
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++) {
    1fa8:	83 e0       	ldi	r24, 0x03	; 3
    1faa:	e4 36       	cpi	r30, 0x64	; 100
    1fac:	f8 07       	cpc	r31, r24
    1fae:	b1 f6       	brne	.-84     	; 0x1f5c <Isb_Grp_Init+0x10>
			Isb_Grp[GrpIndex].Id = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3));
			Isb_Grp[GrpIndex].Id |= lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 1)) << 8;
			Isb_Grp[GrpIndex].Obj = lib_eep_fw_read_byte((uint8_t *)(ISB_GRP_EEADDR_START + GrpIndex * 3 + 2));
		}
	}
    1fb0:	08 95       	ret

00001fb2 <Node_Reboot>:
	#include "./../lib/isb_obj.c"
	#include "./../lib/isb_grp.c"



	void Node_Reboot(void) {
    1fb2:	ff cf       	rjmp	.-2      	; 0x1fb2 <Node_Reboot>

00001fb4 <Isb_SendMsg>:
		while (1) ;
	}



	void Isb_SendMsg(Isb_Msg_t * aMsg) {
    1fb4:	cf 93       	push	r28
    1fb6:	df 93       	push	r29
    1fb8:	ec 01       	movw	r28, r24
		#endif /* ISB_INF_USART0 == 1 */
		#if ISB_INF_USART1 == 1
			Isb_Inf_Usart_Tx(1, aMsg);
		#endif /* ISB_INF_USART1 == 1 */
		#if ISB_INF_CAN0 == 1
			Isb_Inf_Can_Tx(0, aMsg);
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	be 01       	movw	r22, r28
    1fbe:	0e 94 17 04 	call	0x82e	; 0x82e <Isb_Inf_Can_Tx>
			Isb_Inf_Can_Tx(1, aMsg);
		#endif /* ISB_INF_CAN1 == 1 */
		#if ISB_INF_CAN2 == 1
			Isb_Inf_Can_Tx(2, aMsg);
		#endif /* ISB_INF_CAN2 == 1 */
		if ((aMsg->Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_MULTICAST) {
    1fc2:	88 81       	ld	r24, Y
    1fc4:	80 73       	andi	r24, 0x30	; 48
    1fc6:	80 32       	cpi	r24, 0x20	; 32
    1fc8:	39 f4       	brne	.+14     	; 0x1fd8 <Isb_SendMsg+0x24>
			if (Error == 0) {
    1fca:	80 91 49 01 	lds	r24, 0x0149
    1fce:	88 23       	and	r24, r24
    1fd0:	19 f4       	brne	.+6      	; 0x1fd8 <Isb_SendMsg+0x24>
				Isb_Obj_Rx(aMsg);
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <Isb_Obj_Rx>
			}
		}
	}
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	08 95       	ret

00001fde <Isb_Obj_Rx>:
	}



	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg)
	{
    1fde:	2f 92       	push	r2
    1fe0:	3f 92       	push	r3
    1fe2:	4f 92       	push	r4
    1fe4:	5f 92       	push	r5
    1fe6:	6f 92       	push	r6
    1fe8:	7f 92       	push	r7
    1fea:	8f 92       	push	r8
    1fec:	9f 92       	push	r9
    1fee:	af 92       	push	r10
    1ff0:	bf 92       	push	r11
    1ff2:	cf 92       	push	r12
    1ff4:	df 92       	push	r13
    1ff6:	ef 92       	push	r14
    1ff8:	ff 92       	push	r15
    1ffa:	0f 93       	push	r16
    1ffc:	1f 93       	push	r17
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	2d 97       	sbiw	r28, 0x0d	; 13
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61
    2012:	5c 01       	movw	r10, r24
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ))
											{
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
												TxMsg.DestId = aIsb_Msg->DestId;
												TxMsg.SourceId = Isb_Node_Id;
    2014:	20 90 45 01 	lds	r2, 0x0145
    2018:	30 90 46 01 	lds	r3, 0x0146
    201c:	04 e0       	ldi	r16, 0x04	; 4
    201e:	40 2e       	mov	r4, r16
    2020:	03 e0       	ldi	r16, 0x03	; 3
    2022:	50 2e       	mov	r5, r16

	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg)
	{
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
		{
			if ((aIsb_Msg->DestId == Isb_Grp[GrpIndex].Id) & (aIsb_Msg->DestId != 0))
    2024:	f5 01       	movw	r30, r10
    2026:	21 81       	ldd	r18, Z+1	; 0x01
    2028:	32 81       	ldd	r19, Z+2	; 0x02
    202a:	f2 01       	movw	r30, r4
    202c:	80 81       	ld	r24, Z
    202e:	91 81       	ldd	r25, Z+1	; 0x01
    2030:	28 17       	cp	r18, r24
    2032:	39 07       	cpc	r19, r25
    2034:	09 f0       	breq	.+2      	; 0x2038 <Isb_Obj_Rx+0x5a>
    2036:	f0 c0       	rjmp	.+480    	; 0x2218 <Isb_Obj_Rx+0x23a>
    2038:	23 2b       	or	r18, r19
    203a:	09 f4       	brne	.+2      	; 0x203e <Isb_Obj_Rx+0x60>
    203c:	ed c0       	rjmp	.+474    	; 0x2218 <Isb_Obj_Rx+0x23a>
    203e:	1b ed       	ldi	r17, 0xDB	; 219
    2040:	e1 2e       	mov	r14, r17
    2042:	11 e0       	ldi	r17, 0x01	; 1
    2044:	f1 2e       	mov	r15, r17
    2046:	00 e0       	ldi	r16, 0x00	; 0
    2048:	10 e0       	ldi	r17, 0x00	; 0
					{
//						uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_Ch_Array[ObjIndex]);
//						uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_Obj_Array[ObjIndex]);
// TODO:
uint8_t Obj = ObjIndex;
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED))
    204a:	68 01       	movw	r12, r16
    204c:	b3 e0       	ldi	r27, 0x03	; 3
    204e:	cc 0c       	add	r12, r12
    2050:	dd 1c       	adc	r13, r13
    2052:	ba 95       	dec	r27
    2054:	e1 f7       	brne	.-8      	; 0x204e <Isb_Obj_Rx+0x70>
    2056:	c0 0e       	add	r12, r16
    2058:	d1 1e       	adc	r13, r17
    205a:	2b ed       	ldi	r18, 0xDB	; 219
    205c:	31 e0       	ldi	r19, 0x01	; 1
    205e:	c2 0e       	add	r12, r18
    2060:	d3 1e       	adc	r13, r19
    2062:	f6 01       	movw	r30, r12
    2064:	80 81       	ld	r24, Z
    2066:	80 ff       	sbrs	r24, 0
    2068:	cd c0       	rjmp	.+410    	; 0x2204 <Isb_Obj_Rx+0x226>
						{
							if (Obj == Isb_Grp[GrpIndex].Obj)
    206a:	f2 01       	movw	r30, r4
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	08 17       	cp	r16, r24
    2070:	09 f0       	breq	.+2      	; 0x2074 <Isb_Obj_Rx+0x96>
    2072:	c8 c0       	rjmp	.+400    	; 0x2204 <Isb_Obj_Rx+0x226>
							{
								uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
    2074:	f7 01       	movw	r30, r14
    2076:	21 81       	ldd	r18, Z+1	; 0x01
	uint8_t Isb_Obj_getDlc(uint8_t aTop)
	{

		uint8_t Dlc = 0;

		switch (aTop)
    2078:	25 30       	cpi	r18, 0x05	; 5
    207a:	69 f0       	breq	.+26     	; 0x2096 <Isb_Obj_Rx+0xb8>
    207c:	26 30       	cpi	r18, 0x06	; 6
    207e:	18 f4       	brcc	.+6      	; 0x2086 <Isb_Obj_Rx+0xa8>
    2080:	21 30       	cpi	r18, 0x01	; 1
    2082:	29 f4       	brne	.+10     	; 0x208e <Isb_Obj_Rx+0xb0>
    2084:	06 c0       	rjmp	.+12     	; 0x2092 <Isb_Obj_Rx+0xb4>
    2086:	26 30       	cpi	r18, 0x06	; 6
    2088:	41 f0       	breq	.+16     	; 0x209a <Isb_Obj_Rx+0xbc>
    208a:	27 30       	cpi	r18, 0x07	; 7
    208c:	41 f0       	breq	.+16     	; 0x209e <Isb_Obj_Rx+0xc0>
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	07 c0       	rjmp	.+14     	; 0x20a0 <Isb_Obj_Rx+0xc2>
    2092:	44 e0       	ldi	r20, 0x04	; 4
    2094:	05 c0       	rjmp	.+10     	; 0x20a0 <Isb_Obj_Rx+0xc2>
    2096:	45 e0       	ldi	r20, 0x05	; 5
    2098:	03 c0       	rjmp	.+6      	; 0x20a0 <Isb_Obj_Rx+0xc2>
    209a:	46 e0       	ldi	r20, 0x06	; 6
    209c:	01 c0       	rjmp	.+2      	; 0x20a0 <Isb_Obj_Rx+0xc2>
    209e:	48 e0       	ldi	r20, 0x08	; 8
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED))
						{
							if (Obj == Isb_Grp[GrpIndex].Obj)
							{
								uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
								if ((aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK) == Dlc)
    20a0:	f5 01       	movw	r30, r10
    20a2:	80 81       	ld	r24, Z
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	8f 70       	andi	r24, 0x0F	; 15
    20a8:	90 70       	andi	r25, 0x00	; 0
    20aa:	84 2e       	mov	r8, r20
    20ac:	99 24       	eor	r9, r9
    20ae:	88 15       	cp	r24, r8
    20b0:	99 05       	cpc	r25, r9
    20b2:	09 f0       	breq	.+2      	; 0x20b6 <Isb_Obj_Rx+0xd8>
    20b4:	a7 c0       	rjmp	.+334    	; 0x2204 <Isb_Obj_Rx+0x226>
								{
									if (aIsb_Msg->Data[0] == Isb_Obj[ObjIndex].Top)
    20b6:	85 81       	ldd	r24, Z+5	; 0x05
    20b8:	82 17       	cp	r24, r18
    20ba:	09 f0       	breq	.+2      	; 0x20be <Isb_Obj_Rx+0xe0>
    20bc:	a3 c0       	rjmp	.+326    	; 0x2204 <Isb_Obj_Rx+0x226>
									{
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ)
    20be:	86 81       	ldd	r24, Z+6	; 0x06
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	83 70       	andi	r24, 0x03	; 3
    20c4:	90 70       	andi	r25, 0x00	; 0
    20c6:	89 2b       	or	r24, r25
    20c8:	b9 f5       	brne	.+110    	; 0x2138 <Isb_Obj_Rx+0x15a>
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ))
    20ca:	f6 01       	movw	r30, r12
    20cc:	80 81       	ld	r24, Z
    20ce:	81 ff       	sbrs	r24, 1
    20d0:	33 c0       	rjmp	.+102    	; 0x2138 <Isb_Obj_Rx+0x15a>
											{
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
												TxMsg.DestId = aIsb_Msg->DestId;
    20d2:	f5 01       	movw	r30, r10
    20d4:	61 80       	ldd	r6, Z+1	; 0x01
    20d6:	72 80       	ldd	r7, Z+2	; 0x02
												TxMsg.SourceId = Isb_Node_Id;
												TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
    20d8:	2e 83       	std	Y+6, r18	; 0x06
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
    20da:	f1 e0       	ldi	r31, 0x01	; 1
    20dc:	ff 83       	std	Y+7, r31	; 0x07
												TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
    20de:	f7 01       	movw	r30, r14
    20e0:	82 81       	ldd	r24, Z+2	; 0x02
    20e2:	88 87       	std	Y+8, r24	; 0x08
    20e4:	90 e0       	ldi	r25, 0x00	; 0
												for (uint8_t i = 0; i < (Dlc - 3); i++)
    20e6:	b4 01       	movw	r22, r8
    20e8:	63 50       	subi	r22, 0x03	; 3
    20ea:	70 40       	sbci	r23, 0x00	; 0
												{
													TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
    20ec:	98 01       	movw	r18, r16
    20ee:	a3 e0       	ldi	r26, 0x03	; 3
    20f0:	22 0f       	add	r18, r18
    20f2:	33 1f       	adc	r19, r19
    20f4:	aa 95       	dec	r26
    20f6:	e1 f7       	brne	.-8      	; 0x20f0 <Isb_Obj_Rx+0x112>
    20f8:	20 0f       	add	r18, r16
    20fa:	31 1f       	adc	r19, r17
    20fc:	25 52       	subi	r18, 0x25	; 37
    20fe:	3e 4f       	sbci	r19, 0xFE	; 254
    2100:	0c c0       	rjmp	.+24     	; 0x211a <Isb_Obj_Rx+0x13c>
    2102:	e9 e0       	ldi	r30, 0x09	; 9
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	ec 0f       	add	r30, r28
    2108:	fd 1f       	adc	r31, r29
    210a:	ea 0f       	add	r30, r26
    210c:	fb 1f       	adc	r31, r27
    210e:	a2 0f       	add	r26, r18
    2110:	b3 1f       	adc	r27, r19
    2112:	13 96       	adiw	r26, 0x03	; 3
    2114:	8c 91       	ld	r24, X
    2116:	80 83       	st	Z, r24
												TxMsg.DestId = aIsb_Msg->DestId;
												TxMsg.SourceId = Isb_Node_Id;
												TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
												TxMsg.Data[1] = ISB_MSG_CTRL_CMD_ANSWER;
												TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
												for (uint8_t i = 0; i < (Dlc - 3); i++)
    2118:	9f 5f       	subi	r25, 0xFF	; 255
    211a:	a9 2f       	mov	r26, r25
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	a6 17       	cp	r26, r22
    2120:	b7 07       	cpc	r27, r23
    2122:	7c f3       	brlt	.-34     	; 0x2102 <Isb_Obj_Rx+0x124>
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ))
											{
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
												TxMsg.DestId = aIsb_Msg->DestId;
												TxMsg.SourceId = Isb_Node_Id;
    2124:	3d 82       	std	Y+5, r3	; 0x05
    2126:	2c 82       	std	Y+4, r2	; 0x04
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ))
											{
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
												TxMsg.DestId = aIsb_Msg->DestId;
    2128:	7b 82       	std	Y+3, r7	; 0x03
    212a:	6a 82       	std	Y+2, r6	; 0x02
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_READ)
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READ))
											{
												Isb_Msg_t TxMsg;
												TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
    212c:	40 62       	ori	r20, 0x20	; 32
    212e:	49 83       	std	Y+1, r20	; 0x01
												TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
												for (uint8_t i = 0; i < (Dlc - 3); i++)
												{
													TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
												}
												Isb_SendMsg(&TxMsg);
    2130:	ce 01       	movw	r24, r28
    2132:	01 96       	adiw	r24, 0x01	; 1
    2134:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <Isb_SendMsg>
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_ANSWER)
    2138:	f5 01       	movw	r30, r10
    213a:	86 81       	ldd	r24, Z+6	; 0x06
    213c:	83 70       	andi	r24, 0x03	; 3
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	59 f5       	brne	.+86     	; 0x2198 <Isb_Obj_Rx+0x1ba>
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_UPDATE))
    2142:	f6 01       	movw	r30, r12
    2144:	80 81       	ld	r24, Z
    2146:	84 ff       	sbrs	r24, 4
    2148:	27 c0       	rjmp	.+78     	; 0x2198 <Isb_Obj_Rx+0x1ba>
											{
												if (aIsb_Msg->Data[2] == Isb_Obj[ObjIndex].Tov)
    214a:	f5 01       	movw	r30, r10
    214c:	97 81       	ldd	r25, Z+7	; 0x07
    214e:	f7 01       	movw	r30, r14
    2150:	82 81       	ldd	r24, Z+2	; 0x02
    2152:	98 17       	cp	r25, r24
    2154:	09 f5       	brne	.+66     	; 0x2198 <Isb_Obj_Rx+0x1ba>
    2156:	90 e0       	ldi	r25, 0x00	; 0
												{
													for (uint8_t i = 0; i < (Dlc - 3); i++)
    2158:	a4 01       	movw	r20, r8
    215a:	43 50       	subi	r20, 0x03	; 3
    215c:	50 40       	sbci	r21, 0x00	; 0
													{
														Isb_Obj[ObjIndex].Data[i] = aIsb_Msg->Data[i + 3];
    215e:	98 01       	movw	r18, r16
    2160:	f3 e0       	ldi	r31, 0x03	; 3
    2162:	22 0f       	add	r18, r18
    2164:	33 1f       	adc	r19, r19
    2166:	fa 95       	dec	r31
    2168:	e1 f7       	brne	.-8      	; 0x2162 <Isb_Obj_Rx+0x184>
    216a:	20 0f       	add	r18, r16
    216c:	31 1f       	adc	r19, r17
    216e:	25 52       	subi	r18, 0x25	; 37
    2170:	3e 4f       	sbci	r19, 0xFE	; 254
    2172:	09 c0       	rjmp	.+18     	; 0x2186 <Isb_Obj_Rx+0x1a8>
    2174:	f9 01       	movw	r30, r18
    2176:	ea 0f       	add	r30, r26
    2178:	fb 1f       	adc	r31, r27
    217a:	aa 0d       	add	r26, r10
    217c:	bb 1d       	adc	r27, r11
    217e:	18 96       	adiw	r26, 0x08	; 8
    2180:	8c 91       	ld	r24, X
    2182:	83 83       	std	Z+3, r24	; 0x03
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_UPDATE))
											{
												if (aIsb_Msg->Data[2] == Isb_Obj[ObjIndex].Tov)
												{
													for (uint8_t i = 0; i < (Dlc - 3); i++)
    2184:	9f 5f       	subi	r25, 0xFF	; 255
    2186:	a9 2f       	mov	r26, r25
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	a4 17       	cp	r26, r20
    218c:	b5 07       	cpc	r27, r21
    218e:	94 f3       	brlt	.-28     	; 0x2174 <Isb_Obj_Rx+0x196>
													{
														Isb_Obj[ObjIndex].Data[i] = aIsb_Msg->Data[i + 3];
													}
													Isb_Obj[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    2190:	f7 01       	movw	r30, r14
    2192:	80 81       	ld	r24, Z
    2194:	8f 7d       	andi	r24, 0xDF	; 223
    2196:	80 83       	st	Z, r24
												}
											}
										}
										if ((aIsb_Msg->Data[1] & ISB_MSG_CTRL_CMD_MASK) == ISB_MSG_CTRL_CMD_WRITE)
    2198:	f5 01       	movw	r30, r10
    219a:	86 81       	ldd	r24, Z+6	; 0x06
    219c:	83 70       	andi	r24, 0x03	; 3
    219e:	82 30       	cpi	r24, 0x02	; 2
    21a0:	89 f5       	brne	.+98     	; 0x2204 <Isb_Obj_Rx+0x226>
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE))
    21a2:	f6 01       	movw	r30, r12
    21a4:	80 81       	ld	r24, Z
    21a6:	82 ff       	sbrs	r24, 2
    21a8:	2d c0       	rjmp	.+90     	; 0x2204 <Isb_Obj_Rx+0x226>
											{
												if (aIsb_Msg->Data[2] == Isb_Obj[ObjIndex].Tov)
    21aa:	f5 01       	movw	r30, r10
    21ac:	97 81       	ldd	r25, Z+7	; 0x07
    21ae:	f7 01       	movw	r30, r14
    21b0:	82 81       	ldd	r24, Z+2	; 0x02
    21b2:	98 17       	cp	r25, r24
    21b4:	39 f5       	brne	.+78     	; 0x2204 <Isb_Obj_Rx+0x226>
    21b6:	50 e0       	ldi	r21, 0x00	; 0
												{
													for (uint8_t i = 0; i < (Dlc - 3); i++)
    21b8:	b4 01       	movw	r22, r8
    21ba:	63 50       	subi	r22, 0x03	; 3
    21bc:	70 40       	sbci	r23, 0x00	; 0
													{
														if (Isb_Obj[ObjIndex].Data[i] != aIsb_Msg->Data[i + 3])
    21be:	98 01       	movw	r18, r16
    21c0:	e3 e0       	ldi	r30, 0x03	; 3
    21c2:	22 0f       	add	r18, r18
    21c4:	33 1f       	adc	r19, r19
    21c6:	ea 95       	dec	r30
    21c8:	e1 f7       	brne	.-8      	; 0x21c2 <Isb_Obj_Rx+0x1e4>
    21ca:	20 0f       	add	r18, r16
    21cc:	31 1f       	adc	r19, r17
    21ce:	25 52       	subi	r18, 0x25	; 37
    21d0:	3e 4f       	sbci	r19, 0xFE	; 254
    21d2:	0f c0       	rjmp	.+30     	; 0x21f2 <Isb_Obj_Rx+0x214>
    21d4:	f5 01       	movw	r30, r10
    21d6:	e8 0f       	add	r30, r24
    21d8:	f9 1f       	adc	r31, r25
    21da:	40 85       	ldd	r20, Z+8	; 0x08
    21dc:	f9 01       	movw	r30, r18
    21de:	e8 0f       	add	r30, r24
    21e0:	f9 1f       	adc	r31, r25
    21e2:	83 81       	ldd	r24, Z+3	; 0x03
    21e4:	84 17       	cp	r24, r20
    21e6:	21 f0       	breq	.+8      	; 0x21f0 <Isb_Obj_Rx+0x212>
														{
															Isb_Obj[ObjIndex].Data[i] = aIsb_Msg->Data[i + 3];
    21e8:	43 83       	std	Z+3, r20	; 0x03
															Isb_Obj[ObjIndex].IsChanged = TRUE;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	f7 01       	movw	r30, r14
    21ee:	80 87       	std	Z+8, r24	; 0x08
										{
											if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_WRITE))
											{
												if (aIsb_Msg->Data[2] == Isb_Obj[ObjIndex].Tov)
												{
													for (uint8_t i = 0; i < (Dlc - 3); i++)
    21f0:	5f 5f       	subi	r21, 0xFF	; 255
    21f2:	85 2f       	mov	r24, r21
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	86 17       	cp	r24, r22
    21f8:	97 07       	cpc	r25, r23
    21fa:	64 f3       	brlt	.-40     	; 0x21d4 <Isb_Obj_Rx+0x1f6>
														{
															Isb_Obj[ObjIndex].Data[i] = aIsb_Msg->Data[i + 3];
															Isb_Obj[ObjIndex].IsChanged = TRUE;
														}
													}
													Isb_Obj[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    21fc:	f7 01       	movw	r30, r14
    21fe:	80 81       	ld	r24, Z
    2200:	8f 7d       	andi	r24, 0xDF	; 223
    2202:	80 83       	st	Z, r24
    2204:	0f 5f       	subi	r16, 0xFF	; 255
    2206:	1f 4f       	sbci	r17, 0xFF	; 255
    2208:	29 e0       	ldi	r18, 0x09	; 9
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	e2 0e       	add	r14, r18
    220e:	f3 1e       	adc	r15, r19
		{
			if ((aIsb_Msg->DestId == Isb_Grp[GrpIndex].Id) & (aIsb_Msg->DestId != 0))
			{

				#if defined(ISB_OBJ_MAX)
					for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_MAX; ObjIndex++)
    2210:	00 32       	cpi	r16, 0x20	; 32
    2212:	11 05       	cpc	r17, r1
    2214:	09 f0       	breq	.+2      	; 0x2218 <Isb_Obj_Rx+0x23a>
    2216:	19 cf       	rjmp	.-462    	; 0x204a <Isb_Obj_Rx+0x6c>
    2218:	83 e0       	ldi	r24, 0x03	; 3
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	48 0e       	add	r4, r24
    221e:	59 1e       	adc	r5, r25



	void Isb_Obj_Rx(const Isb_Msg_t * aIsb_Msg)
	{
		for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
    2220:	94 e6       	ldi	r25, 0x64	; 100
    2222:	49 16       	cp	r4, r25
    2224:	93 e0       	ldi	r25, 0x03	; 3
    2226:	59 06       	cpc	r5, r25
    2228:	09 f0       	breq	.+2      	; 0x222c <Isb_Obj_Rx+0x24e>
    222a:	fc ce       	rjmp	.-520    	; 0x2024 <Isb_Obj_Rx+0x46>
					}
				#endif /* ISB_OBJ_MAX */

			}
		}
	}
    222c:	2d 96       	adiw	r28, 0x0d	; 13
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	1f 91       	pop	r17
    223e:	0f 91       	pop	r16
    2240:	ff 90       	pop	r15
    2242:	ef 90       	pop	r14
    2244:	df 90       	pop	r13
    2246:	cf 90       	pop	r12
    2248:	bf 90       	pop	r11
    224a:	af 90       	pop	r10
    224c:	9f 90       	pop	r9
    224e:	8f 90       	pop	r8
    2250:	7f 90       	pop	r7
    2252:	6f 90       	pop	r6
    2254:	5f 90       	pop	r5
    2256:	4f 90       	pop	r4
    2258:	3f 90       	pop	r3
    225a:	2f 90       	pop	r2
    225c:	08 95       	ret

0000225e <Isb_Obj_Exec>:
	#define ISB_OBJ_C_



	void Isb_Obj_Exec(void)
	{
    225e:	2f 92       	push	r2
    2260:	3f 92       	push	r3
    2262:	4f 92       	push	r4
    2264:	5f 92       	push	r5
    2266:	6f 92       	push	r6
    2268:	7f 92       	push	r7
    226a:	8f 92       	push	r8
    226c:	9f 92       	push	r9
    226e:	af 92       	push	r10
    2270:	bf 92       	push	r11
    2272:	cf 92       	push	r12
    2274:	df 92       	push	r13
    2276:	ef 92       	push	r14
    2278:	ff 92       	push	r15
    227a:	0f 93       	push	r16
    227c:	1f 93       	push	r17
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	2d 97       	sbiw	r28, 0x0d	; 13
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61

		#if defined(ISB_OBJ_MAX)
		if (bit_is_set(Isb_Obj_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
    2292:	80 91 4a 01 	lds	r24, 0x014A
    2296:	80 ff       	sbrs	r24, 0
    2298:	fd c0       	rjmp	.+506    	; 0x2494 <Isb_Obj_Exec+0x236>
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
    229a:	80 90 45 01 	lds	r8, 0x0145
    229e:	90 90 46 01 	lds	r9, 0x0146
    22a2:	0b ed       	ldi	r16, 0xDB	; 219
    22a4:	c0 2e       	mov	r12, r16
    22a6:	01 e0       	ldi	r16, 0x01	; 1
    22a8:	d0 2e       	mov	r13, r16
    22aa:	ee 24       	eor	r14, r14
    22ac:	ff 24       	eor	r15, r15
									TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
									TxMsg.Data[1] = ISB_MSG_CTRL_CMD_READ;
									TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
									for (uint8_t i = 0; i < (Dlc - 3); i++)
									{
										TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
    22ae:	19 e0       	ldi	r17, 0x09	; 9
    22b0:	21 2e       	mov	r2, r17
    22b2:	31 2c       	mov	r3, r1
    22b4:	2c 0e       	add	r2, r28
    22b6:	3d 1e       	adc	r3, r29
									}
									Isb_SendMsg(&TxMsg);
    22b8:	2e 01       	movw	r4, r28
    22ba:	08 94       	sec
    22bc:	41 1c       	adc	r4, r1
    22be:	51 1c       	adc	r5, r1
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
										TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
										TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    22c0:	b2 e0       	ldi	r27, 0x02	; 2
    22c2:	6b 2e       	mov	r6, r27
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
    22c4:	7e 2c       	mov	r7, r14
		#if defined(ISB_OBJ_MAX)
		if (bit_is_set(Isb_Obj_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
		{
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_MAX; ObjIndex++)
			{
				uint8_t Ch = pgm_read_byte(&pgmIsb_Obj_Ch_Array[ObjIndex]);
    22c6:	f7 01       	movw	r30, r14
    22c8:	e8 59       	subi	r30, 0x98	; 152
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	e4 91       	lpm	r30, Z+
				if (bit_is_set(Isb_Ch[Ch].Ctrl, ISB_CH_CTRL_ENABLED))
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	ee 0f       	add	r30, r30
    22d2:	ff 1f       	adc	r31, r31
    22d4:	ed 5a       	subi	r30, 0xAD	; 173
    22d6:	fe 4f       	sbci	r31, 0xFE	; 254
    22d8:	80 81       	ld	r24, Z
    22da:	80 ff       	sbrs	r24, 0
    22dc:	ca c0       	rjmp	.+404    	; 0x2472 <Isb_Obj_Exec+0x214>
				{
					if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_ENABLED))
    22de:	87 01       	movw	r16, r14
    22e0:	e3 e0       	ldi	r30, 0x03	; 3
    22e2:	00 0f       	add	r16, r16
    22e4:	11 1f       	adc	r17, r17
    22e6:	ea 95       	dec	r30
    22e8:	e1 f7       	brne	.-8      	; 0x22e2 <Isb_Obj_Exec+0x84>
    22ea:	0e 0d       	add	r16, r14
    22ec:	1f 1d       	adc	r17, r15
    22ee:	05 52       	subi	r16, 0x25	; 37
    22f0:	1e 4f       	sbci	r17, 0xFE	; 254
    22f2:	f8 01       	movw	r30, r16
    22f4:	80 81       	ld	r24, Z
    22f6:	80 ff       	sbrs	r24, 0
    22f8:	bc c0       	rjmp	.+376    	; 0x2472 <Isb_Obj_Exec+0x214>
					{
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND))
    22fa:	80 81       	ld	r24, Z
    22fc:	83 ff       	sbrs	r24, 3
    22fe:	5c c0       	rjmp	.+184    	; 0x23b8 <Isb_Obj_Exec+0x15a>
						{
							if (Isb_Obj[ObjIndex].IsChanged == TRUE)
    2300:	f6 01       	movw	r30, r12
    2302:	80 85       	ldd	r24, Z+8	; 0x08
    2304:	81 30       	cpi	r24, 0x01	; 1
    2306:	09 f0       	breq	.+2      	; 0x230a <Isb_Obj_Exec+0xac>
    2308:	57 c0       	rjmp	.+174    	; 0x23b8 <Isb_Obj_Exec+0x15a>
    230a:	e4 e0       	ldi	r30, 0x04	; 4
    230c:	f3 e0       	ldi	r31, 0x03	; 3
								for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
								{
//									uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_Obj_Array[ObjIndex]);
// TODO:
uint8_t Obj = ObjIndex;
									if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
    230e:	a0 80       	ld	r10, Z
    2310:	b1 80       	ldd	r11, Z+1	; 0x01
    2312:	82 81       	ldd	r24, Z+2	; 0x02
    2314:	87 15       	cp	r24, r7
    2316:	09 f0       	breq	.+2      	; 0x231a <Isb_Obj_Exec+0xbc>
    2318:	47 c0       	rjmp	.+142    	; 0x23a8 <Isb_Obj_Exec+0x14a>
    231a:	a1 14       	cp	r10, r1
    231c:	b1 04       	cpc	r11, r1
    231e:	09 f4       	brne	.+2      	; 0x2322 <Isb_Obj_Exec+0xc4>
    2320:	43 c0       	rjmp	.+134    	; 0x23a8 <Isb_Obj_Exec+0x14a>
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
    2322:	f6 01       	movw	r30, r12
    2324:	81 81       	ldd	r24, Z+1	; 0x01
	uint8_t Isb_Obj_getDlc(uint8_t aTop)
	{

		uint8_t Dlc = 0;

		switch (aTop)
    2326:	85 30       	cpi	r24, 0x05	; 5
    2328:	69 f0       	breq	.+26     	; 0x2344 <Isb_Obj_Exec+0xe6>
    232a:	86 30       	cpi	r24, 0x06	; 6
    232c:	18 f4       	brcc	.+6      	; 0x2334 <Isb_Obj_Exec+0xd6>
    232e:	81 30       	cpi	r24, 0x01	; 1
    2330:	29 f4       	brne	.+10     	; 0x233c <Isb_Obj_Exec+0xde>
    2332:	06 c0       	rjmp	.+12     	; 0x2340 <Isb_Obj_Exec+0xe2>
    2334:	86 30       	cpi	r24, 0x06	; 6
    2336:	41 f0       	breq	.+16     	; 0x2348 <Isb_Obj_Exec+0xea>
    2338:	87 30       	cpi	r24, 0x07	; 7
    233a:	41 f0       	breq	.+16     	; 0x234c <Isb_Obj_Exec+0xee>
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	07 c0       	rjmp	.+14     	; 0x234e <Isb_Obj_Exec+0xf0>
    2340:	94 e0       	ldi	r25, 0x04	; 4
    2342:	05 c0       	rjmp	.+10     	; 0x234e <Isb_Obj_Exec+0xf0>
    2344:	95 e0       	ldi	r25, 0x05	; 5
    2346:	03 c0       	rjmp	.+6      	; 0x234e <Isb_Obj_Exec+0xf0>
    2348:	96 e0       	ldi	r25, 0x06	; 6
    234a:	01 c0       	rjmp	.+2      	; 0x234e <Isb_Obj_Exec+0xf0>
    234c:	98 e0       	ldi	r25, 0x08	; 8
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
										TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
    234e:	8e 83       	std	Y+6, r24	; 0x06
										TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
    2350:	6f 82       	std	Y+7, r6	; 0x07
										TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
    2352:	f6 01       	movw	r30, r12
    2354:	82 81       	ldd	r24, Z+2	; 0x02
    2356:	88 87       	std	Y+8, r24	; 0x08
    2358:	60 e0       	ldi	r22, 0x00	; 0
										for (uint8_t i = 0; i < (Dlc - 3); i++)
    235a:	49 2f       	mov	r20, r25
    235c:	50 e0       	ldi	r21, 0x00	; 0
    235e:	43 50       	subi	r20, 0x03	; 3
    2360:	50 40       	sbci	r21, 0x00	; 0
										{
											TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
    2362:	97 01       	movw	r18, r14
    2364:	73 e0       	ldi	r23, 0x03	; 3
    2366:	22 0f       	add	r18, r18
    2368:	33 1f       	adc	r19, r19
    236a:	7a 95       	dec	r23
    236c:	e1 f7       	brne	.-8      	; 0x2366 <Isb_Obj_Exec+0x108>
    236e:	2e 0d       	add	r18, r14
    2370:	3f 1d       	adc	r19, r15
    2372:	25 52       	subi	r18, 0x25	; 37
    2374:	3e 4f       	sbci	r19, 0xFE	; 254
    2376:	09 c0       	rjmp	.+18     	; 0x238a <Isb_Obj_Exec+0x12c>
    2378:	f1 01       	movw	r30, r2
    237a:	ea 0f       	add	r30, r26
    237c:	fb 1f       	adc	r31, r27
    237e:	a2 0f       	add	r26, r18
    2380:	b3 1f       	adc	r27, r19
    2382:	13 96       	adiw	r26, 0x03	; 3
    2384:	8c 91       	ld	r24, X
    2386:	80 83       	st	Z, r24
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
										TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
										TxMsg.Data[1] = ISB_MSG_CTRL_CMD_WRITE;
										TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
										for (uint8_t i = 0; i < (Dlc - 3); i++)
    2388:	6f 5f       	subi	r22, 0xFF	; 255
    238a:	a6 2f       	mov	r26, r22
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	a4 17       	cp	r26, r20
    2390:	b5 07       	cpc	r27, r21
    2392:	94 f3       	brlt	.-28     	; 0x2378 <Isb_Obj_Exec+0x11a>
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
										TxMsg.SourceId = Isb_Node_Id;
    2394:	9d 82       	std	Y+5, r9	; 0x05
    2396:	8c 82       	std	Y+4, r8	; 0x04
									if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
										TxMsg.DestId = Isb_Grp[GrpIndex].Id;
    2398:	bb 82       	std	Y+3, r11	; 0x03
    239a:	aa 82       	std	Y+2, r10	; 0x02
uint8_t Obj = ObjIndex;
									if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
									{
										Isb_Msg_t TxMsg;
										uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
										TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
    239c:	90 62       	ori	r25, 0x20	; 32
    239e:	99 83       	std	Y+1, r25	; 0x01
										TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
										for (uint8_t i = 0; i < (Dlc - 3); i++)
										{
											TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
										}
										Isb_SendMsg(&TxMsg);
    23a0:	c2 01       	movw	r24, r4
    23a2:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <Isb_SendMsg>
    23a6:	06 c0       	rjmp	.+12     	; 0x23b4 <Isb_Obj_Exec+0x156>
										break;
    23a8:	33 96       	adiw	r30, 0x03	; 3
					{
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_SEND))
						{
							if (Isb_Obj[ObjIndex].IsChanged == TRUE)
							{
								for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
    23aa:	83 e0       	ldi	r24, 0x03	; 3
    23ac:	e4 36       	cpi	r30, 0x64	; 100
    23ae:	f8 07       	cpc	r31, r24
    23b0:	09 f0       	breq	.+2      	; 0x23b4 <Isb_Obj_Exec+0x156>
    23b2:	ad cf       	rjmp	.-166    	; 0x230e <Isb_Obj_Exec+0xb0>
										}
										Isb_SendMsg(&TxMsg);
										break;
									}
								}
								Isb_Obj[ObjIndex].IsChanged = FALSE;
    23b4:	f6 01       	movw	r30, r12
    23b6:	10 86       	std	Z+8, r1	; 0x08
							}
						}
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READONINIT))
    23b8:	f8 01       	movw	r30, r16
    23ba:	80 81       	ld	r24, Z
    23bc:	85 ff       	sbrs	r24, 5
    23be:	59 c0       	rjmp	.+178    	; 0x2472 <Isb_Obj_Exec+0x214>
    23c0:	e4 e0       	ldi	r30, 0x04	; 4
    23c2:	f3 e0       	ldi	r31, 0x03	; 3
							for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
							{
//								uint8_t Obj = pgm_read_byte(&pgmIsb_Obj_Obj_Array[ObjIndex]);
// TODO:
uint8_t Obj = ObjIndex;
								if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
    23c4:	00 81       	ld	r16, Z
    23c6:	11 81       	ldd	r17, Z+1	; 0x01
    23c8:	82 81       	ldd	r24, Z+2	; 0x02
    23ca:	87 15       	cp	r24, r7
    23cc:	09 f0       	breq	.+2      	; 0x23d0 <Isb_Obj_Exec+0x172>
    23ce:	4b c0       	rjmp	.+150    	; 0x2466 <Isb_Obj_Exec+0x208>
    23d0:	01 15       	cp	r16, r1
    23d2:	11 05       	cpc	r17, r1
    23d4:	09 f4       	brne	.+2      	; 0x23d8 <Isb_Obj_Exec+0x17a>
    23d6:	47 c0       	rjmp	.+142    	; 0x2466 <Isb_Obj_Exec+0x208>
								{
									Isb_Msg_t TxMsg;
									uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
    23d8:	f6 01       	movw	r30, r12
    23da:	81 81       	ldd	r24, Z+1	; 0x01
	uint8_t Isb_Obj_getDlc(uint8_t aTop)
	{

		uint8_t Dlc = 0;

		switch (aTop)
    23dc:	85 30       	cpi	r24, 0x05	; 5
    23de:	69 f0       	breq	.+26     	; 0x23fa <Isb_Obj_Exec+0x19c>
    23e0:	86 30       	cpi	r24, 0x06	; 6
    23e2:	18 f4       	brcc	.+6      	; 0x23ea <Isb_Obj_Exec+0x18c>
    23e4:	81 30       	cpi	r24, 0x01	; 1
    23e6:	29 f4       	brne	.+10     	; 0x23f2 <Isb_Obj_Exec+0x194>
    23e8:	06 c0       	rjmp	.+12     	; 0x23f6 <Isb_Obj_Exec+0x198>
    23ea:	86 30       	cpi	r24, 0x06	; 6
    23ec:	41 f0       	breq	.+16     	; 0x23fe <Isb_Obj_Exec+0x1a0>
    23ee:	87 30       	cpi	r24, 0x07	; 7
    23f0:	41 f0       	breq	.+16     	; 0x2402 <Isb_Obj_Exec+0x1a4>
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	07 c0       	rjmp	.+14     	; 0x2404 <Isb_Obj_Exec+0x1a6>
    23f6:	94 e0       	ldi	r25, 0x04	; 4
    23f8:	05 c0       	rjmp	.+10     	; 0x2404 <Isb_Obj_Exec+0x1a6>
    23fa:	95 e0       	ldi	r25, 0x05	; 5
    23fc:	03 c0       	rjmp	.+6      	; 0x2404 <Isb_Obj_Exec+0x1a6>
    23fe:	96 e0       	ldi	r25, 0x06	; 6
    2400:	01 c0       	rjmp	.+2      	; 0x2404 <Isb_Obj_Exec+0x1a6>
    2402:	98 e0       	ldi	r25, 0x08	; 8
									Isb_Msg_t TxMsg;
									uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
									TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
									TxMsg.DestId = Isb_Grp[GrpIndex].Id;
									TxMsg.SourceId = Isb_Node_Id;
									TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
    2404:	8e 83       	std	Y+6, r24	; 0x06
									TxMsg.Data[1] = ISB_MSG_CTRL_CMD_READ;
    2406:	1f 82       	std	Y+7, r1	; 0x07
									TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
    2408:	f6 01       	movw	r30, r12
    240a:	82 81       	ldd	r24, Z+2	; 0x02
    240c:	88 87       	std	Y+8, r24	; 0x08
    240e:	60 e0       	ldi	r22, 0x00	; 0
									for (uint8_t i = 0; i < (Dlc - 3); i++)
    2410:	49 2f       	mov	r20, r25
    2412:	50 e0       	ldi	r21, 0x00	; 0
    2414:	43 50       	subi	r20, 0x03	; 3
    2416:	50 40       	sbci	r21, 0x00	; 0
									{
										TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
    2418:	97 01       	movw	r18, r14
    241a:	83 e0       	ldi	r24, 0x03	; 3
    241c:	22 0f       	add	r18, r18
    241e:	33 1f       	adc	r19, r19
    2420:	8a 95       	dec	r24
    2422:	e1 f7       	brne	.-8      	; 0x241c <Isb_Obj_Exec+0x1be>
    2424:	2e 0d       	add	r18, r14
    2426:	3f 1d       	adc	r19, r15
    2428:	25 52       	subi	r18, 0x25	; 37
    242a:	3e 4f       	sbci	r19, 0xFE	; 254
    242c:	09 c0       	rjmp	.+18     	; 0x2440 <Isb_Obj_Exec+0x1e2>
    242e:	f1 01       	movw	r30, r2
    2430:	ea 0f       	add	r30, r26
    2432:	fb 1f       	adc	r31, r27
    2434:	a2 0f       	add	r26, r18
    2436:	b3 1f       	adc	r27, r19
    2438:	13 96       	adiw	r26, 0x03	; 3
    243a:	8c 91       	ld	r24, X
    243c:	80 83       	st	Z, r24
									TxMsg.DestId = Isb_Grp[GrpIndex].Id;
									TxMsg.SourceId = Isb_Node_Id;
									TxMsg.Data[0] = Isb_Obj[ObjIndex].Top;
									TxMsg.Data[1] = ISB_MSG_CTRL_CMD_READ;
									TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
									for (uint8_t i = 0; i < (Dlc - 3); i++)
    243e:	6f 5f       	subi	r22, 0xFF	; 255
    2440:	a6 2f       	mov	r26, r22
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	a4 17       	cp	r26, r20
    2446:	b5 07       	cpc	r27, r21
    2448:	94 f3       	brlt	.-28     	; 0x242e <Isb_Obj_Exec+0x1d0>
								{
									Isb_Msg_t TxMsg;
									uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
									TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
									TxMsg.DestId = Isb_Grp[GrpIndex].Id;
									TxMsg.SourceId = Isb_Node_Id;
    244a:	9d 82       	std	Y+5, r9	; 0x05
    244c:	8c 82       	std	Y+4, r8	; 0x04
								if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
								{
									Isb_Msg_t TxMsg;
									uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
									TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
									TxMsg.DestId = Isb_Grp[GrpIndex].Id;
    244e:	1b 83       	std	Y+3, r17	; 0x03
    2450:	0a 83       	std	Y+2, r16	; 0x02
uint8_t Obj = ObjIndex;
								if ((Isb_Grp[GrpIndex].Obj == Obj) & (Isb_Grp[GrpIndex].Id != 0))
								{
									Isb_Msg_t TxMsg;
									uint8_t Dlc = Isb_Obj_getDlc(Isb_Obj[ObjIndex].Top);
									TxMsg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | Dlc;
    2452:	90 62       	ori	r25, 0x20	; 32
    2454:	99 83       	std	Y+1, r25	; 0x01
									TxMsg.Data[2] = Isb_Obj[ObjIndex].Tov;
									for (uint8_t i = 0; i < (Dlc - 3); i++)
									{
										TxMsg.Data[i + 3] = Isb_Obj[ObjIndex].Data[i];
									}
									Isb_SendMsg(&TxMsg);
    2456:	c2 01       	movw	r24, r4
    2458:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <Isb_SendMsg>
									Isb_Obj[ObjIndex].Ctrl &= ~(1 << ISB_OBJ_CTRL_READONINIT);
    245c:	f6 01       	movw	r30, r12
    245e:	80 81       	ld	r24, Z
    2460:	8f 7d       	andi	r24, 0xDF	; 223
    2462:	80 83       	st	Z, r24
    2464:	06 c0       	rjmp	.+12     	; 0x2472 <Isb_Obj_Exec+0x214>
									break;
    2466:	33 96       	adiw	r30, 0x03	; 3
								Isb_Obj[ObjIndex].IsChanged = FALSE;
							}
						}
						if (bit_is_set(Isb_Obj[ObjIndex].Ctrl, ISB_OBJ_CTRL_READONINIT))
						{
							for (uint8_t GrpIndex = 0; GrpIndex < ISB_GRP_MAX; GrpIndex++)
    2468:	83 e0       	ldi	r24, 0x03	; 3
    246a:	e4 36       	cpi	r30, 0x64	; 100
    246c:	f8 07       	cpc	r31, r24
    246e:	09 f0       	breq	.+2      	; 0x2472 <Isb_Obj_Exec+0x214>
    2470:	a9 cf       	rjmp	.-174    	; 0x23c4 <Isb_Obj_Exec+0x166>
    2472:	08 94       	sec
    2474:	e1 1c       	adc	r14, r1
    2476:	f1 1c       	adc	r15, r1
    2478:	e9 e0       	ldi	r30, 0x09	; 9
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	ce 0e       	add	r12, r30
    247e:	df 1e       	adc	r13, r31
	{

		#if defined(ISB_OBJ_MAX)
		if (bit_is_set(Isb_Obj_Ctrl, ISB_CTRL_SOFTIRQ_EXEC))
		{
			for (uint8_t ObjIndex = 0; ObjIndex < ISB_OBJ_MAX; ObjIndex++)
    2480:	f0 e2       	ldi	r31, 0x20	; 32
    2482:	ef 16       	cp	r14, r31
    2484:	f1 04       	cpc	r15, r1
    2486:	09 f0       	breq	.+2      	; 0x248a <Isb_Obj_Exec+0x22c>
    2488:	1d cf       	rjmp	.-454    	; 0x22c4 <Isb_Obj_Exec+0x66>
							}
						}
					}
				}
			}
			Isb_Obj_Ctrl &= ~(1 << ISB_CTRL_SOFTIRQ_EXEC);
    248a:	80 91 4a 01 	lds	r24, 0x014A
    248e:	8e 7f       	andi	r24, 0xFE	; 254
    2490:	80 93 4a 01 	sts	0x014A, r24
		}
		#endif /* ISB_OBJ_MAX */

	}
    2494:	2d 96       	adiw	r28, 0x0d	; 13
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	de bf       	out	0x3e, r29	; 62
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	cd bf       	out	0x3d, r28	; 61
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	1f 91       	pop	r17
    24a6:	0f 91       	pop	r16
    24a8:	ff 90       	pop	r15
    24aa:	ef 90       	pop	r14
    24ac:	df 90       	pop	r13
    24ae:	cf 90       	pop	r12
    24b0:	bf 90       	pop	r11
    24b2:	af 90       	pop	r10
    24b4:	9f 90       	pop	r9
    24b6:	8f 90       	pop	r8
    24b8:	7f 90       	pop	r7
    24ba:	6f 90       	pop	r6
    24bc:	5f 90       	pop	r5
    24be:	4f 90       	pop	r4
    24c0:	3f 90       	pop	r3
    24c2:	2f 90       	pop	r2
    24c4:	08 95       	ret

000024c6 <Isb_Config_Rx>:
#ifndef ISB_SRV_CONFIG_C_
	#define ISB_SRV_CONFIG_C_



	void Isb_Config_Rx(Isb_Msg_t * aIsb_Msg) {
    24c6:	cf 92       	push	r12
    24c8:	df 92       	push	r13
    24ca:	ef 92       	push	r14
    24cc:	ff 92       	push	r15
    24ce:	0f 93       	push	r16
    24d0:	1f 93       	push	r17
    24d2:	df 93       	push	r29
    24d4:	cf 93       	push	r28
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
    24da:	2d 97       	sbiw	r28, 0x0d	; 13
    24dc:	0f b6       	in	r0, 0x3f	; 63
    24de:	f8 94       	cli
    24e0:	de bf       	out	0x3e, r29	; 62
    24e2:	0f be       	out	0x3f, r0	; 63
    24e4:	cd bf       	out	0x3d, r28	; 61
    24e6:	ac 01       	movw	r20, r24
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
    24e8:	fc 01       	movw	r30, r24
    24ea:	00 81       	ld	r16, Z
    24ec:	10 2f       	mov	r17, r16
    24ee:	1f 70       	andi	r17, 0x0F	; 15
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
    24f0:	c3 80       	ldd	r12, Z+3	; 0x03
    24f2:	d4 80       	ldd	r13, Z+4	; 0x04
		MsgTx.SourceId = Isb_Node_Id;
    24f4:	e0 90 45 01 	lds	r14, 0x0145
    24f8:	f0 90 46 01 	lds	r15, 0x0146
    24fc:	dc 01       	movw	r26, r24
    24fe:	fe 01       	movw	r30, r28
    2500:	36 96       	adiw	r30, 0x06	; 6
		for (uint8_t i = 0; i < Dlc; i++) {
    2502:	9e 01       	movw	r18, r28
    2504:	21 0f       	add	r18, r17
    2506:	31 1d       	adc	r19, r1
    2508:	2a 5f       	subi	r18, 0xFA	; 250
    250a:	3f 4f       	sbci	r19, 0xFF	; 255
    250c:	04 c0       	rjmp	.+8      	; 0x2516 <Isb_Config_Rx+0x50>
			MsgTx.Data[i] = aIsb_Msg->Data[i];
    250e:	14 96       	adiw	r26, 0x04	; 4
    2510:	8c 91       	ld	r24, X
    2512:	14 97       	sbiw	r26, 0x04	; 4
    2514:	81 93       	st	Z+, r24
    2516:	11 96       	adiw	r26, 0x01	; 1
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
		MsgTx.SourceId = Isb_Node_Id;
		for (uint8_t i = 0; i < Dlc; i++) {
    2518:	e2 17       	cp	r30, r18
    251a:	f3 07       	cpc	r31, r19
    251c:	c1 f7       	brne	.-16     	; 0x250e <Isb_Config_Rx+0x48>
			MsgTx.Data[i] = aIsb_Msg->Data[i];
		}
		if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_SETMODE) {
    251e:	fa 01       	movw	r30, r20
    2520:	85 81       	ldd	r24, Z+5	; 0x05
    2522:	82 30       	cpi	r24, 0x02	; 2
    2524:	09 f0       	breq	.+2      	; 0x2528 <Isb_Config_Rx+0x62>
    2526:	95 c0       	rjmp	.+298    	; 0x2652 <Isb_Config_Rx+0x18c>
			if (Dlc == ISB_MSG_FLAGS_DLC_2) {
    2528:	12 30       	cpi	r17, 0x02	; 2
    252a:	09 f0       	breq	.+2      	; 0x252e <Isb_Config_Rx+0x68>
    252c:	4d c1       	rjmp	.+666    	; 0x27c8 <Isb_Config_Rx+0x302>
				MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_2;
				MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    252e:	8e 81       	ldd	r24, Y+6	; 0x06
    2530:	80 6c       	ori	r24, 0xC0	; 192
    2532:	8e 83       	std	Y+6, r24	; 0x06
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__BL_NORM) {
    2534:	26 81       	ldd	r18, Z+6	; 0x06
    2536:	22 23       	and	r18, r18
    2538:	c9 f4       	brne	.+50     	; 0x256c <Isb_Config_Rx+0xa6>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    253a:	f9 99       	sbic	0x1f, 1	; 31
    253c:	fe cf       	rjmp	.-4      	; 0x253a <Isb_Config_Rx+0x74>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    253e:	82 e1       	ldi	r24, 0x12	; 18
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	92 bd       	out	0x22, r25	; 34
    2544:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    2546:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2548:	80 b5       	in	r24, 0x20	; 32
	}



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
    254a:	88 23       	and	r24, r24
    254c:	09 f4       	brne	.+2      	; 0x2550 <Isb_Config_Rx+0x8a>
    254e:	66 c0       	rjmp	.+204    	; 0x261c <Isb_Config_Rx+0x156>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2550:	f9 99       	sbic	0x1f, 1	; 31
    2552:	fe cf       	rjmp	.-4      	; 0x2550 <Isb_Config_Rx+0x8a>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2554:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2556:	82 e1       	ldi	r24, 0x12	; 18
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	92 bd       	out	0x22, r25	; 34
    255c:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    255e:	10 bc       	out	0x20, r1	; 32

    __asm__ __volatile__ (
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	f8 94       	cli
    2564:	fa 9a       	sbi	0x1f, 2	; 31
    2566:	f9 9a       	sbi	0x1f, 1	; 31
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	72 c0       	rjmp	.+228    	; 0x2650 <Isb_Config_Rx+0x18a>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__BL_FLASH) {
    256c:	21 30       	cpi	r18, 0x01	; 1
    256e:	d1 f4       	brne	.+52     	; 0x25a4 <Isb_Config_Rx+0xde>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2570:	f9 99       	sbic	0x1f, 1	; 31
    2572:	fe cf       	rjmp	.-4      	; 0x2570 <Isb_Config_Rx+0xaa>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2574:	82 e1       	ldi	r24, 0x12	; 18
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	92 bd       	out	0x22, r25	; 34
    257a:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    257c:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    257e:	80 b5       	in	r24, 0x20	; 32
    2580:	81 30       	cpi	r24, 0x01	; 1
    2582:	09 f4       	brne	.+2      	; 0x2586 <Isb_Config_Rx+0xc0>
    2584:	65 c0       	rjmp	.+202    	; 0x2650 <Isb_Config_Rx+0x18a>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2586:	f9 99       	sbic	0x1f, 1	; 31
    2588:	fe cf       	rjmp	.-4      	; 0x2586 <Isb_Config_Rx+0xc0>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    258a:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    258c:	82 e1       	ldi	r24, 0x12	; 18
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	92 bd       	out	0x22, r25	; 34
    2592:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	80 bd       	out	0x20, r24	; 32

    __asm__ __volatile__ (
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	fa 9a       	sbi	0x1f, 2	; 31
    259e:	f9 9a       	sbi	0x1f, 1	; 31
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	56 c0       	rjmp	.+172    	; 0x2650 <Isb_Config_Rx+0x18a>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_FLASH);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__FW_NORM) {
    25a4:	28 30       	cpi	r18, 0x08	; 8
    25a6:	09 f0       	breq	.+2      	; 0x25aa <Isb_Config_Rx+0xe4>
    25a8:	39 c0       	rjmp	.+114    	; 0x261c <Isb_Config_Rx+0x156>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    25aa:	f9 99       	sbic	0x1f, 1	; 31
    25ac:	fe cf       	rjmp	.-4      	; 0x25aa <Isb_Config_Rx+0xe4>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    25ae:	8b e1       	ldi	r24, 0x1B	; 27
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	92 bd       	out	0x22, r25	; 34
    25b4:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    25b6:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    25b8:	20 b5       	in	r18, 0x20	; 32
					uint8_t crc = lib_eep_read_byte((uint8_t *)EEP__ISB_CONFIG_CRC);
					crc++;
    25ba:	2f 5f       	subi	r18, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    25bc:	f9 99       	sbic	0x1f, 1	; 31
    25be:	fe cf       	rjmp	.-4      	; 0x25bc <Isb_Config_Rx+0xf6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    25c0:	8b e1       	ldi	r24, 0x1B	; 27
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	92 bd       	out	0x22, r25	; 34
    25c6:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    25c8:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    25ca:	80 b5       	in	r24, 0x20	; 32
    25cc:	82 17       	cp	r24, r18
    25ce:	69 f0       	breq	.+26     	; 0x25ea <Isb_Config_Rx+0x124>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    25d0:	f9 99       	sbic	0x1f, 1	; 31
    25d2:	fe cf       	rjmp	.-4      	; 0x25d0 <Isb_Config_Rx+0x10a>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    25d4:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    25d6:	8b e1       	ldi	r24, 0x1B	; 27
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	92 bd       	out	0x22, r25	; 34
    25dc:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    25de:	20 bd       	out	0x20, r18	; 32

    __asm__ __volatile__ (
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	fa 9a       	sbi	0x1f, 2	; 31
    25e6:	f9 9a       	sbi	0x1f, 1	; 31
    25e8:	0f be       	out	0x3f, r0	; 63
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    25ea:	f9 99       	sbic	0x1f, 1	; 31
    25ec:	fe cf       	rjmp	.-4      	; 0x25ea <Isb_Config_Rx+0x124>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    25ee:	82 e1       	ldi	r24, 0x12	; 18
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	92 bd       	out	0x22, r25	; 34
    25f4:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    25f6:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    25f8:	80 b5       	in	r24, 0x20	; 32
    25fa:	88 30       	cpi	r24, 0x08	; 8
    25fc:	49 f1       	breq	.+82     	; 0x2650 <Isb_Config_Rx+0x18a>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    25fe:	f9 99       	sbic	0x1f, 1	; 31
    2600:	fe cf       	rjmp	.-4      	; 0x25fe <Isb_Config_Rx+0x138>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2602:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2604:	82 e1       	ldi	r24, 0x12	; 18
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	92 bd       	out	0x22, r25	; 34
    260a:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    260c:	88 e0       	ldi	r24, 0x08	; 8
    260e:	80 bd       	out	0x20, r24	; 32

    __asm__ __volatile__ (
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	f8 94       	cli
    2614:	fa 9a       	sbi	0x1f, 2	; 31
    2616:	f9 9a       	sbi	0x1f, 1	; 31
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	1a c0       	rjmp	.+52     	; 0x2650 <Isb_Config_Rx+0x18a>
					lib_eep_write_byte((uint8_t *)EEP__ISB_CONFIG_CRC, crc);
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__FW_NORM);
				}
				if (aIsb_Msg->Data[1] == ISB_NODE_OPERATING_MODE__FW_CFG) {
    261c:	29 30       	cpi	r18, 0x09	; 9
    261e:	c1 f4       	brne	.+48     	; 0x2650 <Isb_Config_Rx+0x18a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2620:	f9 99       	sbic	0x1f, 1	; 31
    2622:	fe cf       	rjmp	.-4      	; 0x2620 <Isb_Config_Rx+0x15a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2624:	82 e1       	ldi	r24, 0x12	; 18
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	92 bd       	out	0x22, r25	; 34
    262a:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    262c:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    262e:	80 b5       	in	r24, 0x20	; 32
    2630:	89 30       	cpi	r24, 0x09	; 9
    2632:	71 f0       	breq	.+28     	; 0x2650 <Isb_Config_Rx+0x18a>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2634:	f9 99       	sbic	0x1f, 1	; 31
    2636:	fe cf       	rjmp	.-4      	; 0x2634 <Isb_Config_Rx+0x16e>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2638:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    263a:	82 e1       	ldi	r24, 0x12	; 18
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	92 bd       	out	0x22, r25	; 34
    2640:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2642:	89 e0       	ldi	r24, 0x09	; 9
    2644:	80 bd       	out	0x20, r24	; 32

    __asm__ __volatile__ (
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	fa 9a       	sbi	0x1f, 2	; 31
    264c:	f9 9a       	sbi	0x1f, 1	; 31
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	ff cf       	rjmp	.-2      	; 0x2650 <Isb_Config_Rx+0x18a>
					lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__FW_CFG);
				}
				Node_Reboot();
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_INITEEPROM) {
    2652:	86 30       	cpi	r24, 0x06	; 6
    2654:	09 f0       	breq	.+2      	; 0x2658 <Isb_Config_Rx+0x192>
    2656:	45 c0       	rjmp	.+138    	; 0x26e2 <Isb_Config_Rx+0x21c>
			if (Dlc == ISB_MSG_FLAGS_DLC_1) {
    2658:	11 30       	cpi	r17, 0x01	; 1
    265a:	09 f0       	breq	.+2      	; 0x265e <Isb_Config_Rx+0x198>
    265c:	b5 c0       	rjmp	.+362    	; 0x27c8 <Isb_Config_Rx+0x302>
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
    265e:	80 91 48 01 	lds	r24, 0x0148
    2662:	89 30       	cpi	r24, 0x09	; 9
    2664:	09 f0       	breq	.+2      	; 0x2668 <Isb_Config_Rx+0x1a2>
    2666:	b0 c0       	rjmp	.+352    	; 0x27c8 <Isb_Config_Rx+0x302>
					MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_1;
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
    2668:	80 91 47 01 	lds	r24, 0x0147
    266c:	28 2f       	mov	r18, r24
    266e:	30 e0       	ldi	r19, 0x00	; 0
						wdt_reset();
    2670:	a8 95       	wdr
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2672:	f9 99       	sbic	0x1f, 1	; 31
    2674:	fe cf       	rjmp	.-4      	; 0x2672 <Isb_Config_Rx+0x1ac>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2676:	32 bd       	out	0x22, r19	; 34
    2678:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
    267a:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    267c:	80 b5       	in	r24, 0x20	; 32
    267e:	88 23       	and	r24, r24
    2680:	59 f0       	breq	.+22     	; 0x2698 <Isb_Config_Rx+0x1d2>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2682:	f9 99       	sbic	0x1f, 1	; 31
    2684:	fe cf       	rjmp	.-4      	; 0x2682 <Isb_Config_Rx+0x1bc>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    2686:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2688:	32 bd       	out	0x22, r19	; 34
    268a:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    268c:	10 bc       	out	0x20, r1	; 32

    __asm__ __volatile__ (
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	f8 94       	cli
    2692:	fa 9a       	sbi	0x1f, 2	; 31
    2694:	f9 9a       	sbi	0x1f, 1	; 31
    2696:	0f be       	out	0x3f, r0	; 63
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_INITEEPROM) {
			if (Dlc == ISB_MSG_FLAGS_DLC_1) {
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
					MsgTx.Flags = ISB_MSG_FLAGS_TOF_UNICAST | ISB_MSG_FLAGS_DLC_1;
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
    2698:	2f 5f       	subi	r18, 0xFF	; 255
    269a:	3f 4f       	sbci	r19, 0xFF	; 255
    269c:	f2 e0       	ldi	r31, 0x02	; 2
    269e:	20 30       	cpi	r18, 0x00	; 0
    26a0:	3f 07       	cpc	r19, r31
    26a2:	30 f3       	brcs	.-52     	; 0x2670 <Isb_Config_Rx+0x1aa>
    26a4:	2c e1       	ldi	r18, 0x1C	; 28
    26a6:	30 e0       	ldi	r19, 0x00	; 0
						wdt_reset();
						lib_eep_write_byte((uint8_t *) ee_Addr, 0x00);
					}
					for (uint8_t i = 0; i < 4; i++) {
						lib_eep_write_byte((uint8_t *)(EEP__ISB_CONFIG_CODE_0 + i), Isb_Firmware_Code[i]);
    26a8:	f9 01       	movw	r30, r18
    26aa:	ec 51       	subi	r30, 0x1C	; 28
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    26b0:	f9 99       	sbic	0x1f, 1	; 31
    26b2:	fe cf       	rjmp	.-4      	; 0x26b0 <Isb_Config_Rx+0x1ea>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    26b4:	32 bd       	out	0x22, r19	; 34
    26b6:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
    26b8:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    26ba:	80 b5       	in	r24, 0x20	; 32
    26bc:	8e 17       	cp	r24, r30
    26be:	59 f0       	breq	.+22     	; 0x26d6 <Isb_Config_Rx+0x210>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    26c0:	f9 99       	sbic	0x1f, 1	; 31
    26c2:	fe cf       	rjmp	.-4      	; 0x26c0 <Isb_Config_Rx+0x1fa>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    26c4:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    26c6:	32 bd       	out	0x22, r19	; 34
    26c8:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    26ca:	e0 bd       	out	0x20, r30	; 32

    __asm__ __volatile__ (
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	fa 9a       	sbi	0x1f, 2	; 31
    26d2:	f9 9a       	sbi	0x1f, 1	; 31
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	2f 5f       	subi	r18, 0xFF	; 255
    26d8:	3f 4f       	sbci	r19, 0xFF	; 255
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint16_t ee_Addr = Isb_Firmware_Offset; ee_Addr < EEP_SIZE; ee_Addr++) {
						wdt_reset();
						lib_eep_write_byte((uint8_t *) ee_Addr, 0x00);
					}
					for (uint8_t i = 0; i < 4; i++) {
    26da:	20 32       	cpi	r18, 0x20	; 32
    26dc:	31 05       	cpc	r19, r1
    26de:	21 f7       	brne	.-56     	; 0x26a8 <Isb_Config_Rx+0x1e2>
    26e0:	ff cf       	rjmp	.-2      	; 0x26e0 <Isb_Config_Rx+0x21a>
					}
					Node_Reboot();
				}
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_READEEPROMBLOCK) {
    26e2:	87 30       	cpi	r24, 0x07	; 7
    26e4:	69 f5       	brne	.+90     	; 0x2740 <Isb_Config_Rx+0x27a>
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
    26e6:	14 30       	cpi	r17, 0x04	; 4
    26e8:	08 f4       	brcc	.+2      	; 0x26ec <Isb_Config_Rx+0x226>
    26ea:	6e c0       	rjmp	.+220    	; 0x27c8 <Isb_Config_Rx+0x302>
				Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
    26ec:	fa 01       	movw	r30, r20
    26ee:	97 81       	ldd	r25, Z+7	; 0x07
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	26 81       	ldd	r18, Z+6	; 0x06
    26f4:	bc 01       	movw	r22, r24
    26f6:	62 0f       	add	r22, r18
    26f8:	71 1d       	adc	r23, r1
				if (Addr < EEP_SIZE) {
    26fa:	f2 e0       	ldi	r31, 0x02	; 2
    26fc:	60 30       	cpi	r22, 0x00	; 0
    26fe:	7f 07       	cpc	r23, r31
    2700:	08 f0       	brcs	.+2      	; 0x2704 <Isb_Config_Rx+0x23e>
    2702:	62 c0       	rjmp	.+196    	; 0x27c8 <Isb_Config_Rx+0x302>
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    2704:	8e 81       	ldd	r24, Y+6	; 0x06
    2706:	80 6c       	ori	r24, 0xC0	; 192
    2708:	8e 83       	std	Y+6, r24	; 0x06
    270a:	40 e0       	ldi	r20, 0x00	; 0
					for (uint8_t i = 0; i < (Dlc - 3); i++) {
    270c:	21 2f       	mov	r18, r17
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	23 50       	subi	r18, 0x03	; 3
    2712:	30 40       	sbci	r19, 0x00	; 0
						MsgTx.Data[3 + i] = lib_eep_read_byte((uint8_t *)(Addr + i));
    2714:	de 01       	movw	r26, r28
    2716:	19 96       	adiw	r26, 0x09	; 9
    2718:	0d c0       	rjmp	.+26     	; 0x2734 <Isb_Config_Rx+0x26e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    271a:	f9 99       	sbic	0x1f, 1	; 31
    271c:	fe cf       	rjmp	.-4      	; 0x271a <Isb_Config_Rx+0x254>
    271e:	cb 01       	movw	r24, r22
    2720:	84 0f       	add	r24, r20
    2722:	91 1d       	adc	r25, r1
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2724:	92 bd       	out	0x22, r25	; 34
    2726:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    2728:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    272a:	80 b5       	in	r24, 0x20	; 32
    272c:	ea 0f       	add	r30, r26
    272e:	fb 1f       	adc	r31, r27
    2730:	80 83       	st	Z, r24
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_READEEPROMBLOCK) {
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
				Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
				if (Addr < EEP_SIZE) {
					MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
					for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2732:	4f 5f       	subi	r20, 0xFF	; 255
    2734:	e4 2f       	mov	r30, r20
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	e2 17       	cp	r30, r18
    273a:	f3 07       	cpc	r31, r19
    273c:	74 f3       	brlt	.-36     	; 0x271a <Isb_Config_Rx+0x254>
    273e:	44 c0       	rjmp	.+136    	; 0x27c8 <Isb_Config_Rx+0x302>
						MsgTx.Data[3 + i] = lib_eep_read_byte((uint8_t *)(Addr + i));
					}
				}
			}
		}
		else if (aIsb_Msg->Data[0] == ISB_CONFIG_CMD_WRITEEEPROMBLOCK) {
    2740:	88 30       	cpi	r24, 0x08	; 8
    2742:	09 f0       	breq	.+2      	; 0x2746 <Isb_Config_Rx+0x280>
    2744:	41 c0       	rjmp	.+130    	; 0x27c8 <Isb_Config_Rx+0x302>
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
    2746:	14 30       	cpi	r17, 0x04	; 4
    2748:	08 f4       	brcc	.+2      	; 0x274c <Isb_Config_Rx+0x286>
    274a:	3e c0       	rjmp	.+124    	; 0x27c8 <Isb_Config_Rx+0x302>
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
    274c:	80 91 48 01 	lds	r24, 0x0148
    2750:	89 30       	cpi	r24, 0x09	; 9
    2752:	09 f0       	breq	.+2      	; 0x2756 <Isb_Config_Rx+0x290>
    2754:	39 c0       	rjmp	.+114    	; 0x27c8 <Isb_Config_Rx+0x302>
					Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
    2756:	fa 01       	movw	r30, r20
    2758:	97 81       	ldd	r25, Z+7	; 0x07
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	26 81       	ldd	r18, Z+6	; 0x06
    275e:	bc 01       	movw	r22, r24
    2760:	62 0f       	add	r22, r18
    2762:	71 1d       	adc	r23, r1
					if ((Addr >= Isb_Firmware_Offset) & (Addr < EEP_SIZE)) {
    2764:	80 91 47 01 	lds	r24, 0x0147
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	68 17       	cp	r22, r24
    276c:	79 07       	cpc	r23, r25
    276e:	60 f1       	brcs	.+88     	; 0x27c8 <Isb_Config_Rx+0x302>
    2770:	f2 e0       	ldi	r31, 0x02	; 2
    2772:	60 30       	cpi	r22, 0x00	; 0
    2774:	7f 07       	cpc	r23, r31
    2776:	40 f5       	brcc	.+80     	; 0x27c8 <Isb_Config_Rx+0x302>
						MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
    2778:	8e 81       	ldd	r24, Y+6	; 0x06
    277a:	80 6c       	ori	r24, 0xC0	; 192
    277c:	8e 83       	std	Y+6, r24	; 0x06
    277e:	90 e0       	ldi	r25, 0x00	; 0
						for (uint8_t i = 0; i < (Dlc - 3); i++) {
    2780:	21 2f       	mov	r18, r17
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	23 50       	subi	r18, 0x03	; 3
    2786:	30 40       	sbci	r19, 0x00	; 0
    2788:	1a c0       	rjmp	.+52     	; 0x27be <Isb_Config_Rx+0x2f8>
							lib_eep_write_byte((uint8_t *)(Addr + i), aIsb_Msg->Data[3 + i]);
    278a:	df 01       	movw	r26, r30
    278c:	a6 0f       	add	r26, r22
    278e:	b7 1f       	adc	r27, r23
    2790:	e4 0f       	add	r30, r20
    2792:	f5 1f       	adc	r31, r21
    2794:	e0 85       	ldd	r30, Z+8	; 0x08
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2796:	f9 99       	sbic	0x1f, 1	; 31
    2798:	fe cf       	rjmp	.-4      	; 0x2796 <Isb_Config_Rx+0x2d0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    279a:	b2 bd       	out	0x22, r27	; 34
    279c:	a1 bd       	out	0x21, r26	; 33
#endif
    EECR |= (1 << EERE);
    279e:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    27a0:	80 b5       	in	r24, 0x20	; 32
    27a2:	8e 17       	cp	r24, r30
    27a4:	59 f0       	breq	.+22     	; 0x27bc <Isb_Config_Rx+0x2f6>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    27a6:	f9 99       	sbic	0x1f, 1	; 31
    27a8:	fe cf       	rjmp	.-4      	; 0x27a6 <Isb_Config_Rx+0x2e0>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    27aa:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    27ac:	b2 bd       	out	0x22, r27	; 34
    27ae:	a1 bd       	out	0x21, r26	; 33
#endif
    EEDR = __value;
    27b0:	e0 bd       	out	0x20, r30	; 32

    __asm__ __volatile__ (
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	f8 94       	cli
    27b6:	fa 9a       	sbi	0x1f, 2	; 31
    27b8:	f9 9a       	sbi	0x1f, 1	; 31
    27ba:	0f be       	out	0x3f, r0	; 63
			if (Dlc > ISB_MSG_FLAGS_DLC_3) {
				if (Isb_Node_Operating_Mode == ISB_NODE_OPERATING_MODE__FW_CFG) {
					Addr = (uint16_t)aIsb_Msg->Data[1] + (uint16_t)(aIsb_Msg->Data[2] << 8);
					if ((Addr >= Isb_Firmware_Offset) & (Addr < EEP_SIZE)) {
						MsgTx.Data[0] |= ISB_CONFIG_ANSWER_ACK;
						for (uint8_t i = 0; i < (Dlc - 3); i++) {
    27bc:	9f 5f       	subi	r25, 0xFF	; 255
    27be:	e9 2f       	mov	r30, r25
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	e2 17       	cp	r30, r18
    27c4:	f3 07       	cpc	r31, r19
    27c6:	0c f3       	brlt	.-62     	; 0x278a <Isb_Config_Rx+0x2c4>
						}
					}
				}
			}
		}
		MsgTx.Data[0] |= ISB_CONFIG_ANSWER_NACK;
    27c8:	8e 81       	ldd	r24, Y+6	; 0x06
    27ca:	80 64       	ori	r24, 0x40	; 64
    27cc:	8e 83       	std	Y+6, r24	; 0x06
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
		MsgTx.SourceId = Isb_Node_Id;
    27ce:	fd 82       	std	Y+5, r15	; 0x05
    27d0:	ec 82       	std	Y+4, r14	; 0x04
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
		MsgTx.DestId = aIsb_Msg->SourceId;
    27d2:	db 82       	std	Y+3, r13	; 0x03
    27d4:	ca 82       	std	Y+2, r12	; 0x02
	void Isb_Config_Rx(Isb_Msg_t * aIsb_Msg) {
		uint8_t Dlc;
		Isb_Msg_t MsgTx;
		uint16_t Addr;
		Dlc = aIsb_Msg->Flags & ISB_MSG_FLAGS_DLC_MASK;
		MsgTx.Flags = aIsb_Msg->Flags;
    27d6:	09 83       	std	Y+1, r16	; 0x01
					}
				}
			}
		}
		MsgTx.Data[0] |= ISB_CONFIG_ANSWER_NACK;
		Isb_SendMsg(&MsgTx);
    27d8:	ce 01       	movw	r24, r28
    27da:	01 96       	adiw	r24, 0x01	; 1
    27dc:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <Isb_SendMsg>
	}
    27e0:	2d 96       	adiw	r28, 0x0d	; 13
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	cf 91       	pop	r28
    27ee:	df 91       	pop	r29
    27f0:	1f 91       	pop	r17
    27f2:	0f 91       	pop	r16
    27f4:	ff 90       	pop	r15
    27f6:	ef 90       	pop	r14
    27f8:	df 90       	pop	r13
    27fa:	cf 90       	pop	r12
    27fc:	08 95       	ret

000027fe <lib_eep_fw_read_word>:
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    return __eerd_word (__p, eeprom_read_byte);
    27fe:	20 91 47 01 	lds	r18, 0x0147
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	22 0f       	add	r18, r18
    2806:	33 1f       	adc	r19, r19
    2808:	82 0f       	add	r24, r18
    280a:	93 1f       	adc	r25, r19
    280c:	63 e8       	ldi	r22, 0x83	; 131
    280e:	70 e0       	ldi	r23, 0x00	; 0
    2810:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__eerd_word>



	uint16_t __attribute__((always_inline)) lib_eep_fw_read_word(uint16_t * aAddr) {
		return eeprom_read_word(Isb_Firmware_Offset + aAddr);;
	}
    2814:	08 95       	ret

00002816 <lib_eep_read_word>:
    2816:	63 e8       	ldi	r22, 0x83	; 131
    2818:	70 e0       	ldi	r23, 0x00	; 0
    281a:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__eerd_word>



	uint16_t __attribute__((always_inline)) lib_eep_read_word(uint16_t * aAddr) {
		return eeprom_read_word(aAddr);;
	}
    281e:	08 95       	ret

00002820 <main>:



	int main(void)
	{
    2820:	cf 92       	push	r12
    2822:	df 92       	push	r13
    2824:	ef 92       	push	r14
    2826:	ff 92       	push	r15
    2828:	0f 93       	push	r16
    282a:	1f 93       	push	r17
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    2834:	2d 97       	sbiw	r28, 0x0d	; 13
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	de bf       	out	0x3e, r29	; 62
    283c:	0f be       	out	0x3f, r0	; 63
    283e:	cd bf       	out	0x3d, r28	; 61
		wdt_enable(WDTO_500MS);
    2840:	8d e0       	ldi	r24, 0x0D	; 13
    2842:	28 e1       	ldi	r18, 0x18	; 24
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	a8 95       	wdr
    284c:	20 93 60 00 	sts	0x0060, r18
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	80 93 60 00 	sts	0x0060, r24
		wdt_reset();
    2856:	a8 95       	wdr
    2858:	80 e1       	ldi	r24, 0x10	; 16
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	63 e8       	ldi	r22, 0x83	; 131
    285e:	70 e0       	ldi	r23, 0x00	; 0
    2860:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__eerd_word>
    2864:	6c 01       	movw	r12, r24
		Isb_Node_Id = lib_eep_read_word((uint16_t *)EEP__ISB_NODE_ID_0);
    2866:	90 93 46 01 	sts	0x0146, r25
    286a:	80 93 45 01 	sts	0x0145, r24
		if ((Isb_Node_Id == 0) | (Isb_Node_Id > 2047)) {
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	8f 5f       	subi	r24, 0xFF	; 255
    2872:	97 40       	sbci	r25, 0x07	; 7
    2874:	c0 f0       	brcs	.+48     	; 0x28a6 <main+0x86>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2876:	f9 99       	sbic	0x1f, 1	; 31
    2878:	fe cf       	rjmp	.-4      	; 0x2876 <main+0x56>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    287a:	82 e1       	ldi	r24, 0x12	; 18
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	92 bd       	out	0x22, r25	; 34
    2880:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    2882:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2884:	80 b5       	in	r24, 0x20	; 32



	void __attribute__((always_inline)) lib_eep_write_byte(uint8_t * aAddr, uint8_t aData) {
		if (eeprom_read_byte(aAddr) != aData) {
    2886:	88 23       	and	r24, r24
    2888:	69 f0       	breq	.+26     	; 0x28a4 <main+0x84>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    288a:	f9 99       	sbic	0x1f, 1	; 31
    288c:	fe cf       	rjmp	.-4      	; 0x288a <main+0x6a>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    288e:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2890:	82 e1       	ldi	r24, 0x12	; 18
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	92 bd       	out	0x22, r25	; 34
    2896:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2898:	10 bc       	out	0x20, r1	; 32

    __asm__ __volatile__ (
    289a:	0f b6       	in	r0, 0x3f	; 63
    289c:	f8 94       	cli
    289e:	fa 9a       	sbi	0x1f, 2	; 31
    28a0:	f9 9a       	sbi	0x1f, 1	; 31
    28a2:	0f be       	out	0x3f, r0	; 63
    28a4:	ff cf       	rjmp	.-2      	; 0x28a4 <main+0x84>
    28a6:	2c e0       	ldi	r18, 0x0C	; 12
    28a8:	30 e0       	ldi	r19, 0x00	; 0
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
			Node_Reboot();
		}
		for (uint8_t i = 0; i < 4; i++) {
			lib_eep_write_byte((uint8_t *)(EEP__ISB_FIRMWARE_CODE_0 + i), Isb_Firmware_Code[i]);
    28aa:	f9 01       	movw	r30, r18
    28ac:	ec 50       	subi	r30, 0x0C	; 12
    28ae:	ff 4f       	sbci	r31, 0xFF	; 255
    28b0:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    28b2:	f9 99       	sbic	0x1f, 1	; 31
    28b4:	fe cf       	rjmp	.-4      	; 0x28b2 <main+0x92>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    28b6:	32 bd       	out	0x22, r19	; 34
    28b8:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
    28ba:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    28bc:	80 b5       	in	r24, 0x20	; 32
    28be:	8e 17       	cp	r24, r30
    28c0:	59 f0       	breq	.+22     	; 0x28d8 <main+0xb8>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    28c2:	f9 99       	sbic	0x1f, 1	; 31
    28c4:	fe cf       	rjmp	.-4      	; 0x28c2 <main+0xa2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    28c6:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    28c8:	32 bd       	out	0x22, r19	; 34
    28ca:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    28cc:	e0 bd       	out	0x20, r30	; 32

    __asm__ __volatile__ (
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	f8 94       	cli
    28d2:	fa 9a       	sbi	0x1f, 2	; 31
    28d4:	f9 9a       	sbi	0x1f, 1	; 31
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	2f 5f       	subi	r18, 0xFF	; 255
    28da:	3f 4f       	sbci	r19, 0xFF	; 255
		Isb_Node_Id = lib_eep_read_word((uint16_t *)EEP__ISB_NODE_ID_0);
		if ((Isb_Node_Id == 0) | (Isb_Node_Id > 2047)) {
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, ISB_NODE_OPERATING_MODE__BL_NORM);
			Node_Reboot();
		}
		for (uint8_t i = 0; i < 4; i++) {
    28dc:	20 31       	cpi	r18, 0x10	; 16
    28de:	31 05       	cpc	r19, r1
    28e0:	21 f7       	brne	.-56     	; 0x28aa <main+0x8a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    28e2:	f9 99       	sbic	0x1f, 1	; 31
    28e4:	fe cf       	rjmp	.-4      	; 0x28e2 <main+0xc2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    28e6:	8a e1       	ldi	r24, 0x1A	; 26
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	92 bd       	out	0x22, r25	; 34
    28ec:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    28ee:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    28f0:	80 b5       	in	r24, 0x20	; 32
			lib_eep_write_byte((uint8_t *)(EEP__ISB_FIRMWARE_CODE_0 + i), Isb_Firmware_Code[i]);
		}
		Isb_Firmware_Offset = lib_eep_read_byte((uint8_t *)EEP__ISB_FIRMWARE_OFFSET);
    28f2:	80 93 47 01 	sts	0x0147, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    28f6:	f9 99       	sbic	0x1f, 1	; 31
    28f8:	fe cf       	rjmp	.-4      	; 0x28f6 <main+0xd6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    28fa:	82 e1       	ldi	r24, 0x12	; 18
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	92 bd       	out	0x22, r25	; 34
    2900:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    2902:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2904:	80 b5       	in	r24, 0x20	; 32
		Isb_Node_Operating_Mode = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
    2906:	80 93 48 01 	sts	0x0148, r24
		if ((Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_NORM) & (Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_CFG))
    290a:	88 50       	subi	r24, 0x08	; 8
    290c:	82 30       	cpi	r24, 0x02	; 2
    290e:	d8 f0       	brcs	.+54     	; 0x2946 <main+0x126>
		{
			Isb_Node_Operating_Mode = ISB_NODE_OPERATING_MODE__FW_NORM;
    2910:	88 e0       	ldi	r24, 0x08	; 8
    2912:	80 93 48 01 	sts	0x0148, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2916:	f9 99       	sbic	0x1f, 1	; 31
    2918:	fe cf       	rjmp	.-4      	; 0x2916 <main+0xf6>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    291a:	82 e1       	ldi	r24, 0x12	; 18
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	92 bd       	out	0x22, r25	; 34
    2920:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    2922:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2924:	80 b5       	in	r24, 0x20	; 32
    2926:	88 30       	cpi	r24, 0x08	; 8
    2928:	71 f0       	breq	.+28     	; 0x2946 <main+0x126>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    292a:	f9 99       	sbic	0x1f, 1	; 31
    292c:	fe cf       	rjmp	.-4      	; 0x292a <main+0x10a>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    292e:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2930:	82 e1       	ldi	r24, 0x12	; 18
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	92 bd       	out	0x22, r25	; 34
    2936:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    2938:	88 e0       	ldi	r24, 0x08	; 8
    293a:	80 bd       	out	0x20, r24	; 32

    __asm__ __volatile__ (
    293c:	0f b6       	in	r0, 0x3f	; 63
    293e:	f8 94       	cli
    2940:	fa 9a       	sbi	0x1f, 2	; 31
    2942:	f9 9a       	sbi	0x1f, 1	; 31
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	f0 90 49 01 	lds	r15, 0x0149
    294a:	2c e1       	ldi	r18, 0x1C	; 28
    294c:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    294e:	f9 99       	sbic	0x1f, 1	; 31
    2950:	fe cf       	rjmp	.-4      	; 0x294e <main+0x12e>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    2952:	32 bd       	out	0x22, r19	; 34
    2954:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
    2956:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    2958:	80 b5       	in	r24, 0x20	; 32
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, Isb_Node_Operating_Mode);
		}
		for (uint8_t i = 0; i < 4; i++)
		{
			if (lib_eep_read_byte((uint8_t *)(EEP__ISB_CONFIG_CODE_0 + i)) != Isb_Firmware_Code[i])
    295a:	f9 01       	movw	r30, r18
    295c:	ec 51       	subi	r30, 0x1C	; 28
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	90 81       	ld	r25, Z
    2962:	89 17       	cp	r24, r25
    2964:	11 f0       	breq	.+4      	; 0x296a <main+0x14a>
			{
				Error |= ERROR__CONFIG_CODE;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	f8 2a       	or	r15, r24
    296a:	2f 5f       	subi	r18, 0xFF	; 255
    296c:	3f 4f       	sbci	r19, 0xFF	; 255
		if ((Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_NORM) & (Isb_Node_Operating_Mode != ISB_NODE_OPERATING_MODE__FW_CFG))
		{
			Isb_Node_Operating_Mode = ISB_NODE_OPERATING_MODE__FW_NORM;
			lib_eep_write_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE, Isb_Node_Operating_Mode);
		}
		for (uint8_t i = 0; i < 4; i++)
    296e:	20 32       	cpi	r18, 0x20	; 32
    2970:	31 05       	cpc	r19, r1
    2972:	69 f7       	brne	.-38     	; 0x294e <main+0x12e>
    2974:	f0 92 49 01 	sts	0x0149, r15
//			Inf_Twi_Init(0, 12);
			Inf_Twi_Init(0, 255);
// TODO:
Lib_Pin_Set(4, 2, LIB_PIN_OUTPUT_HIGH);
		#endif /* INF_TWI_C_ */
		if (Error == 0) {
    2978:	ff 20       	and	r15, r15
    297a:	01 f5       	brne	.+64     	; 0x29bc <main+0x19c>
	TCCR0 = (1 << WGM01) | (1 << CS01) | (1 << CS00);
	TCNT0 = 0;
	OCR0 = (F_CPU / 64) / 1000;
	TIMSK = (1 << OCIE0);
	#elif defined(__AVR_ATmega168__) | defined(__AVR_ATmega168V__)
	TCCR0A = (1 << WGM01);
    297c:	92 e0       	ldi	r25, 0x02	; 2
    297e:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    2980:	83 e0       	ldi	r24, 0x03	; 3
    2982:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
    2984:	16 bc       	out	0x26, r1	; 38
	OCR0A = (F_CPU / 64) / 1000;
    2986:	8d e7       	ldi	r24, 0x7D	; 125
    2988:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = (1 << OCIE0A);
    298a:	90 93 6e 00 	sts	0x006E, r25
	TIMSK0 = (1 << OCIE0A);
	#else
		#error "No definition for this MCU available."
	#endif

	Isb_Systick_Clock.Seconds = 0;
    298e:	10 92 fb 02 	sts	0x02FB, r1
	Isb_Systick_Clock.Minutes = 0;
    2992:	10 92 fc 02 	sts	0x02FC, r1
	Isb_Systick_Clock.Hour = 0;
    2996:	10 92 fd 02 	sts	0x02FD, r1
	Isb_Systick_Clock.Dow = 1;
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	80 93 ff 02 	sts	0x02FF, r24
	Isb_Systick_Clock.Day = 1;
    29a0:	80 93 fe 02 	sts	0x02FE, r24
	Isb_Systick_Clock.Month = 1;
    29a4:	80 93 00 03 	sts	0x0300, r24
	Isb_Systick_Clock.Year = 0;;
    29a8:	10 92 02 03 	sts	0x0302, r1
    29ac:	10 92 01 03 	sts	0x0301, r1
			Isb_Systick_Init();
//			Isb_Ch_Init();
			Isb_Grp_Init();
    29b0:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <Isb_Grp_Init>
//			Isb_Obj_Init();
			Isb_Obj_Exec();
    29b4:	0e 94 2f 11 	call	0x225e	; 0x225e <Isb_Obj_Exec>
//			Isb_App_Init();
			Isb_App_Exec();
    29b8:	0e 94 b7 06 	call	0xd6e	; 0xd6e <Isb_App_Exec>
		}
		sei();
    29bc:	78 94       	sei
		#endif /* ISB_INF_USART0 == 1 */
		#if ISB_INF_USART1 == 1
			Isb_Inf_Usart_Init(1);
		#endif /* ISB_INF_USART1 == 1 */
		#if ISB_INF_CAN0 == 1
			Isb_Inf_Can_Init(0);
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	0e 94 6f 03 	call	0x6de	; 0x6de <Isb_Inf_Can_Init>
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
		Isb_Msg.Data[0] = ISB_MSG_TOP__SERIAL_NUMBER__MODE__ERROR;
    29c4:	81 e2       	ldi	r24, 0x21	; 33
    29c6:	8e 83       	std	Y+6, r24	; 0x06
    29c8:	fe 01       	movw	r30, r28
    29ca:	37 96       	adiw	r30, 0x07	; 7
    29cc:	24 e0       	ldi	r18, 0x04	; 4
    29ce:	30 e0       	ldi	r19, 0x00	; 0
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    29d0:	f9 99       	sbic	0x1f, 1	; 31
    29d2:	fe cf       	rjmp	.-4      	; 0x29d0 <main+0x1b0>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    29d4:	32 bd       	out	0x22, r19	; 34
    29d6:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
    29d8:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    29da:	80 b5       	in	r24, 0x20	; 32
		for (uint8_t i = 0; i < 4; i++) {
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
    29dc:	81 93       	st	Z+, r24
    29de:	2f 5f       	subi	r18, 0xFF	; 255
    29e0:	3f 4f       	sbci	r19, 0xFF	; 255
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
		Isb_Msg.Data[0] = ISB_MSG_TOP__SERIAL_NUMBER__MODE__ERROR;
		for (uint8_t i = 0; i < 4; i++) {
    29e2:	28 30       	cpi	r18, 0x08	; 8
    29e4:	31 05       	cpc	r19, r1
    29e6:	a1 f7       	brne	.-24     	; 0x29d0 <main+0x1b0>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    29e8:	f9 99       	sbic	0x1f, 1	; 31
    29ea:	fe cf       	rjmp	.-4      	; 0x29e8 <main+0x1c8>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    29ec:	82 e1       	ldi	r24, 0x12	; 18
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	92 bd       	out	0x22, r25	; 34
    29f2:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
    29f4:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
    29f6:	80 b5       	in	r24, 0x20	; 32
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
    29f8:	8b 87       	std	Y+11, r24	; 0x0b
		Isb_Msg.Data[6] = Error;
    29fa:	fc 86       	std	Y+12, r15	; 0x0c
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
		Isb_Msg.SourceId = Isb_Node_Id;
    29fc:	dd 82       	std	Y+5, r13	; 0x05
    29fe:	cc 82       	std	Y+4, r12	; 0x04
		#if ISB_INF_USART1_SLAVE == 1
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
		Isb_Msg.DestId = ISB_MSG_MULTICAST_GROUPID_FW_START;
    2a00:	82 e0       	ldi	r24, 0x02	; 2
    2a02:	90 ef       	ldi	r25, 0xF0	; 240
    2a04:	9b 83       	std	Y+3, r25	; 0x03
    2a06:	8a 83       	std	Y+2, r24	; 0x02
		#endif /* ISB_INF_USART0_SLAVE == 1 */
		#if ISB_INF_USART1_SLAVE == 1
			Isb_Inf_Usart_Slave_Init(1);
		#endif /* ISB_INF_USART1_SLAVE == 1 */
		Isb_Msg_t Isb_Msg;
		Isb_Msg.Flags = ISB_MSG_FLAGS_TOF_MULTICAST | ISB_MSG_FLAGS_DLC_7;
    2a08:	87 e2       	ldi	r24, 0x27	; 39
    2a0a:	89 83       	std	Y+1, r24	; 0x01
		for (uint8_t i = 0; i < 4; i++) {
			Isb_Msg.Data[i + 1] = lib_eep_read_byte((uint8_t *)(EEP__ISB_NODE_SERIAL_NUMBER_0 + i));
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
		Isb_Msg.Data[6] = Error;
		Isb_SendMsg(&Isb_Msg);
    2a0c:	8e 01       	movw	r16, r28
    2a0e:	0f 5f       	subi	r16, 0xFF	; 255
    2a10:	1f 4f       	sbci	r17, 0xFF	; 255
    2a12:	c8 01       	movw	r24, r16
    2a14:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <Isb_SendMsg>
						}
					}
				}
			#endif /* ISB_INF_USART1 == 1 */
			#if ISB_INF_CAN0 == 1
				if (Isb_Inf_Can_Rx(0, &Isb_Msg) == TRUE) {
    2a18:	e0 2e       	mov	r14, r16
    2a1a:	01 2f       	mov	r16, r17
		}
		Isb_Msg.Data[5] = lib_eep_read_byte((uint8_t *)EEP__ISB_NODE_OPERATING_MODE);
		Isb_Msg.Data[6] = Error;
		Isb_SendMsg(&Isb_Msg);
		for (;;) {
			wdt_reset();
    2a1c:	a8 95       	wdr
			if (Error == 0) {
    2a1e:	ff 20       	and	r15, r15
    2a20:	31 f4       	brne	.+12     	; 0x2a2e <main+0x20e>
				Isb_Systick_Exec();
    2a22:	0e 94 9f 04 	call	0x93e	; 0x93e <Isb_Systick_Exec>
				Isb_Obj_Exec();
    2a26:	0e 94 2f 11 	call	0x225e	; 0x225e <Isb_Obj_Exec>
				Isb_App_Exec();
    2a2a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <Isb_App_Exec>
						}
					}
				}
			#endif /* ISB_INF_USART1 == 1 */
			#if ISB_INF_CAN0 == 1
				if (Isb_Inf_Can_Rx(0, &Isb_Msg) == TRUE) {
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	6e 2d       	mov	r22, r14
    2a32:	70 2f       	mov	r23, r16
    2a34:	0e 94 8b 03 	call	0x716	; 0x716 <Isb_Inf_Can_Rx>
    2a38:	81 30       	cpi	r24, 0x01	; 1
    2a3a:	81 f7       	brne	.-32     	; 0x2a1c <main+0x1fc>
						Isb_Inf_Can_Tx(1, &Isb_Msg);
					#endif /* ISB_INF_CAN1 == 1 */
					#if ISB_INF_CAN2 == 1
						Isb_Inf_Can_Tx(2, &Isb_Msg);
					#endif /* ISB_INF_CAN2 == 1 */
					if ((Isb_Msg.Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_UNICAST) {
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	80 73       	andi	r24, 0x30	; 48
    2a40:	49 f4       	brne	.+18     	; 0x2a54 <main+0x234>
						if (Isb_Msg.DestId == Isb_Node_Id) {
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	9b 81       	ldd	r25, Y+3	; 0x03
    2a46:	8c 15       	cp	r24, r12
    2a48:	9d 05       	cpc	r25, r13
    2a4a:	21 f4       	brne	.+8      	; 0x2a54 <main+0x234>
							Isb_Config_Rx(&Isb_Msg);
    2a4c:	8e 2d       	mov	r24, r14
    2a4e:	90 2f       	mov	r25, r16
    2a50:	0e 94 63 12 	call	0x24c6	; 0x24c6 <Isb_Config_Rx>
						}
					}
					if ((Isb_Msg.Flags & ISB_MSG_FLAGS_TOF_MASK) == ISB_MSG_FLAGS_TOF_MULTICAST) {
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	80 73       	andi	r24, 0x30	; 48
    2a58:	80 32       	cpi	r24, 0x20	; 32
    2a5a:	01 f7       	brne	.-64     	; 0x2a1c <main+0x1fc>
						if (Error == 0) {
    2a5c:	ff 20       	and	r15, r15
    2a5e:	f1 f6       	brne	.-68     	; 0x2a1c <main+0x1fc>
							Isb_Obj_Rx(&Isb_Msg);
    2a60:	8e 2d       	mov	r24, r14
    2a62:	90 2f       	mov	r25, r16
    2a64:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <Isb_Obj_Rx>
    2a68:	d9 cf       	rjmp	.-78     	; 0x2a1c <main+0x1fc>

00002a6a <__eerd_word>:
    2a6a:	df 92       	push	r13
    2a6c:	ef 92       	push	r14
    2a6e:	ff 92       	push	r15
    2a70:	0f 93       	push	r16
    2a72:	1f 93       	push	r17
    2a74:	7b 01       	movw	r14, r22
    2a76:	8c 01       	movw	r16, r24
    2a78:	fb 01       	movw	r30, r22
    2a7a:	09 95       	icall
    2a7c:	d8 2e       	mov	r13, r24
    2a7e:	c8 01       	movw	r24, r16
    2a80:	01 96       	adiw	r24, 0x01	; 1
    2a82:	f7 01       	movw	r30, r14
    2a84:	09 95       	icall
    2a86:	98 2f       	mov	r25, r24
    2a88:	8d 2d       	mov	r24, r13
    2a8a:	1f 91       	pop	r17
    2a8c:	0f 91       	pop	r16
    2a8e:	ff 90       	pop	r15
    2a90:	ef 90       	pop	r14
    2a92:	df 90       	pop	r13
    2a94:	08 95       	ret

00002a96 <__udivmodhi4>:
    2a96:	aa 1b       	sub	r26, r26
    2a98:	bb 1b       	sub	r27, r27
    2a9a:	51 e1       	ldi	r21, 0x11	; 17
    2a9c:	07 c0       	rjmp	.+14     	; 0x2aac <__udivmodhi4_ep>

00002a9e <__udivmodhi4_loop>:
    2a9e:	aa 1f       	adc	r26, r26
    2aa0:	bb 1f       	adc	r27, r27
    2aa2:	a6 17       	cp	r26, r22
    2aa4:	b7 07       	cpc	r27, r23
    2aa6:	10 f0       	brcs	.+4      	; 0x2aac <__udivmodhi4_ep>
    2aa8:	a6 1b       	sub	r26, r22
    2aaa:	b7 0b       	sbc	r27, r23

00002aac <__udivmodhi4_ep>:
    2aac:	88 1f       	adc	r24, r24
    2aae:	99 1f       	adc	r25, r25
    2ab0:	5a 95       	dec	r21
    2ab2:	a9 f7       	brne	.-22     	; 0x2a9e <__udivmodhi4_loop>
    2ab4:	80 95       	com	r24
    2ab6:	90 95       	com	r25
    2ab8:	bc 01       	movw	r22, r24
    2aba:	cd 01       	movw	r24, r26
    2abc:	08 95       	ret

00002abe <_exit>:
    2abe:	f8 94       	cli

00002ac0 <__stop_program>:
    2ac0:	ff cf       	rjmp	.-2      	; 0x2ac0 <__stop_program>
