Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.3.2/avr5/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.3.2/../../../avr/lib/avr5/crtm168.o (exit)
/usr/lib/gcc/avr/4.3.2/avr5/libgcc.a(_copy_data.o)
                              ./main.o (__do_copy_data)
/usr/lib/gcc/avr/4.3.2/avr5/libgcc.a(_clear_bss.o)
                              ./main.o (__do_clear_bss)
/usr/lib/gcc/avr/4.3.2/../../../avr/lib/avr5/libc.a(memcmp.o)
                              ./main.o (memcmp)

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00020000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
fuse             0x00820000         0x00000400         rw !x
lock             0x00830000         0x00000400         rw !x
signature        0x00840000         0x00000400         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.3.2/../../../avr/lib/avr5/crtm168.o
Address of section .text set to 0x3800
LOAD ./main.o
LOAD /usr/lib/gcc/avr/4.3.2/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/4.3.2/../../../avr/lib/avr5/libc.a
LOAD /usr/lib/gcc/avr/4.3.2/avr5/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x00003800      0x734
 *(.vectors)
 .vectors       0x00003800       0x68 /usr/lib/gcc/avr/4.3.2/../../../avr/lib/avr5/crtm168.o
                0x00003800                __vectors
                0x00003800                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x00003868                . = ALIGN (0x2)
                0x00003868                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x00003868        0x0 linker stubs
 *(.trampolines*)
                0x00003868                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x00003868                __ctors_start = .
 *(.ctors)
                0x00003868                __ctors_end = .
                0x00003868                __dtors_start = .
 *(.dtors)
                0x00003868                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x00003868        0x0 /usr/lib/gcc/avr/4.3.2/../../../avr/lib/avr5/crtm168.o
                0x00003868                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x00003868        0xc /usr/lib/gcc/avr/4.3.2/../../../avr/lib/avr5/crtm168.o
 *(.init2)
 *(.init3)
 .init3         0x00003874       0x3a ./main.o
                0x00003874                get_ResetSource
 *(.init3)
 *(.init4)
 .init4         0x000038ae       0x16 /usr/lib/gcc/avr/4.3.2/avr5/libgcc.a(_copy_data.o)
                0x000038ae                __do_copy_data
 .init4         0x000038c4       0x10 /usr/lib/gcc/avr/4.3.2/avr5/libgcc.a(_clear_bss.o)
                0x000038c4                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x000038d4        0x8 /usr/lib/gcc/avr/4.3.2/../../../avr/lib/avr5/crtm168.o
 *(.init9)
 *(.text)
 .text          0x000038dc        0x4 /usr/lib/gcc/avr/4.3.2/../../../avr/lib/avr5/crtm168.o
                0x000038dc                __vector_22
                0x000038dc                __vector_1
                0x000038dc                __vector_24
                0x000038dc                __vector_12
                0x000038dc                __bad_interrupt
                0x000038dc                __vector_6
                0x000038dc                __vector_3
                0x000038dc                __vector_23
                0x000038dc                __vector_25
                0x000038dc                __vector_11
                0x000038dc                __vector_13
                0x000038dc                __vector_17
                0x000038dc                __vector_19
                0x000038dc                __vector_7
                0x000038dc                __vector_5
                0x000038dc                __vector_4
                0x000038dc                __vector_9
                0x000038dc                __vector_2
                0x000038dc                __vector_21
                0x000038dc                __vector_15
                0x000038dc                __vector_8
                0x000038dc                __vector_14
                0x000038dc                __vector_10
                0x000038dc                __vector_16
                0x000038dc                __vector_18
                0x000038dc                __vector_20
 .text          0x000038e0      0x636 ./main.o
                0x00003932                Inf_Spi_WriteRead
                0x000038e0                ByteToShort
                0x00003922                Inf_Spi_Init
                0x00003962                Send_Message
                0x000038f8                eep_write_byte
                0x000039f8                main
                0x0000393e                Lib_Mcp2515_Write
 .text          0x00003f16        0x0 /usr/lib/gcc/avr/4.3.2/avr5/libgcc.a(_exit.o)
 .text          0x00003f16        0x0 /usr/lib/gcc/avr/4.3.2/avr5/libgcc.a(_copy_data.o)
 .text          0x00003f16        0x0 /usr/lib/gcc/avr/4.3.2/avr5/libgcc.a(_clear_bss.o)
 .text          0x00003f16       0x1a /usr/lib/gcc/avr/4.3.2/../../../avr/lib/avr5/libc.a(memcmp.o)
                0x00003f16                memcmp
                0x00003f30                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x00003f30        0x0 /usr/lib/gcc/avr/4.3.2/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x00003f30        0x0 /usr/lib/gcc/avr/4.3.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc   0x00003f30        0x0 /usr/lib/gcc/avr/4.3.2/avr5/libgcc.a(_clear_bss.o)
                0x00003f30                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x00003f30        0x0 /usr/lib/gcc/avr/4.3.2/avr5/libgcc.a(_exit.o)
                0x00003f30                exit
                0x00003f30                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x00003f30        0x4 /usr/lib/gcc/avr/4.3.2/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x00003f34                _etext = .

.data           0x00800100        0x4 load address 0x00003f34
                0x00800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800100        0x0 /usr/lib/gcc/avr/4.3.2/../../../avr/lib/avr5/crtm168.o
 .data          0x00800100        0x4 ./main.o
                0x00800100                Isb_Bootloader_Code
 .data          0x00800104        0x0 /usr/lib/gcc/avr/4.3.2/avr5/libgcc.a(_exit.o)
 .data          0x00800104        0x0 /usr/lib/gcc/avr/4.3.2/avr5/libgcc.a(_copy_data.o)
 .data          0x00800104        0x0 /usr/lib/gcc/avr/4.3.2/avr5/libgcc.a(_clear_bss.o)
 .data          0x00800104        0x0 /usr/lib/gcc/avr/4.3.2/../../../avr/lib/avr5/libc.a(memcmp.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x00800104                . = ALIGN (0x2)
                0x00800104                _edata = .
                0x00800104                PROVIDE (__data_end, .)

.bss            0x00800104        0x2 load address 0x00003f38
                0x00800104                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x00800104        0x0 /usr/lib/gcc/avr/4.3.2/../../../avr/lib/avr5/crtm168.o
 .bss           0x00800104        0x2 ./main.o
                0x00800104                JumpToFirmware
 .bss           0x00800106        0x0 /usr/lib/gcc/avr/4.3.2/avr5/libgcc.a(_exit.o)
 .bss           0x00800106        0x0 /usr/lib/gcc/avr/4.3.2/avr5/libgcc.a(_copy_data.o)
 .bss           0x00800106        0x0 /usr/lib/gcc/avr/4.3.2/avr5/libgcc.a(_clear_bss.o)
 .bss           0x00800106        0x0 /usr/lib/gcc/avr/4.3.2/../../../avr/lib/avr5/libc.a(memcmp.o)
 *(.bss*)
 *(COMMON)
                0x00800106                PROVIDE (__bss_end, .)
                0x00003f34                __data_load_start = LOADADDR (.data)
                0x00003f38                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x00800106        0x0
                0x00800106                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x00800106                PROVIDE (__noinit_end, .)
                0x00800106                _end = .
                0x00800106                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0x0
 *(.eeprom*)
                0x00810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x00000000     0x1b48
 *(.stab)
 .stab          0x00000000      0x6b4 /usr/lib/gcc/avr/4.3.2/../../../avr/lib/avr5/crtm168.o
 .stab          0x000006b4     0x13e0 ./main.o
                               0x13ec (size before relaxing)
 .stab          0x00001a94       0xb4 /usr/lib/gcc/avr/4.3.2/../../../avr/lib/avr5/libc.a(memcmp.o)
                                 0xc0 (size before relaxing)

.stabstr        0x00000000      0xe85
 *(.stabstr)
 .stabstr       0x00000000      0xe85 /usr/lib/gcc/avr/4.3.2/../../../avr/lib/avr5/crtm168.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(bl_6-1.0.elf elf32-avr)
LOAD linker stubs
